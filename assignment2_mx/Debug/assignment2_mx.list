
assignment2_mx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c940  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800cad0  0800cad0  0001cad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0a8  0800d0a8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0a8  0800d0a8  0001d0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0b0  0800d0b0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0b0  0800d0b0  0001d0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0b4  0800d0b4  0001d0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d0b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001898  200001e4  0800d29c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a7c  0800d29c  00021a7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e00e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004608  00000000  00000000  0003e222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  00042830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001698  00000000  00000000  000440f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cc7c  00000000  00000000  00045788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002096e  00000000  00000000  00072404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102fd8  00000000  00000000  00092d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195d4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000790c  00000000  00000000  00195d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cab8 	.word	0x0800cab8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800cab8 	.word	0x0800cab8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_DMA_Init+0x48>)
 8001000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <MX_DMA_Init+0x48>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6493      	str	r3, [r2, #72]	; 0x48
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <MX_DMA_Init+0x48>)
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2105      	movs	r1, #5
 800101a:	200e      	movs	r0, #14
 800101c:	f000 fefe 	bl	8001e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001020:	200e      	movs	r0, #14
 8001022:	f000 ff17 	bl	8001e54 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2105      	movs	r1, #5
 800102a:	200f      	movs	r0, #15
 800102c:	f000 fef6 	bl	8001e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001030:	200f      	movs	r0, #15
 8001032:	f000 ff0f 	bl	8001e54 <HAL_NVIC_EnableIRQ>

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <vApplicationGetIdleTaskMemory+0x2c>)
 8001054:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <vApplicationGetIdleTaskMemory+0x30>)
 800105a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	2000021c 	.word	0x2000021c
 8001074:	200002d0 	.word	0x200002d0

08001078 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001088:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <vApplicationGetTimerTaskMemory+0x30>)
 800108e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001096:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	200004d0 	.word	0x200004d0
 80010a8:	20000584 	.word	0x20000584

080010ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010ac:	b5b0      	push	{r4, r5, r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af02      	add	r7, sp, #8
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	UART1_queue = xQueueCreate(5,sizeof(queue_UART_msg_t));
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80010b8:	2005      	movs	r0, #5
 80010ba:	f004 fced 	bl	8005a98 <xQueueGenericCreate>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a24      	ldr	r2, [pc, #144]	; (8001154 <MX_FREERTOS_Init+0xa8>)
 80010c2:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <MX_FREERTOS_Init+0xac>)
 80010c6:	1d3c      	adds	r4, r7, #4
 80010c8:	461d      	mov	r5, r3
 80010ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 fae8 	bl	80056b0 <osThreadCreate>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a1e      	ldr	r2, [pc, #120]	; (800115c <MX_FREERTOS_Init+0xb0>)
 80010e4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(uart1_task, "uart_task", configMINIMAL_STACK_SIZE, (void*)1,
 80010e6:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <MX_FREERTOS_Init+0xb4>)
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	2307      	movs	r3, #7
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	491c      	ldr	r1, [pc, #112]	; (8001164 <MX_FREERTOS_Init+0xb8>)
 80010f4:	481c      	ldr	r0, [pc, #112]	; (8001168 <MX_FREERTOS_Init+0xbc>)
 80010f6:	f005 f96e 	bl	80063d6 <xTaskCreate>
		  /*priority*/ (UBaseType_t) 7, &uart1_task_handle);
  xTaskCreate(lis_task, "lis_task", configMINIMAL_STACK_SIZE, (void*)1,
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_FREERTOS_Init+0xc0>)
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	2307      	movs	r3, #7
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	491a      	ldr	r1, [pc, #104]	; (8001170 <MX_FREERTOS_Init+0xc4>)
 8001108:	481a      	ldr	r0, [pc, #104]	; (8001174 <MX_FREERTOS_Init+0xc8>)
 800110a:	f005 f964 	bl	80063d6 <xTaskCreate>
		  /*priority*/ (UBaseType_t) 7, &lis_task_handle);
  xTaskCreate(lps_task, "lps_task", configMINIMAL_STACK_SIZE, (void*)1,
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_FREERTOS_Init+0xcc>)
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	2307      	movs	r3, #7
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	4918      	ldr	r1, [pc, #96]	; (800117c <MX_FREERTOS_Init+0xd0>)
 800111c:	4818      	ldr	r0, [pc, #96]	; (8001180 <MX_FREERTOS_Init+0xd4>)
 800111e:	f005 f95a 	bl	80063d6 <xTaskCreate>
		  /*priority*/ (UBaseType_t) 7, &lps_task_handle);
  xTaskCreate(hts_task, "hts_task", configMINIMAL_STACK_SIZE, (void*)1,
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <MX_FREERTOS_Init+0xd8>)
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	2307      	movs	r3, #7
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2301      	movs	r3, #1
 800112c:	2280      	movs	r2, #128	; 0x80
 800112e:	4916      	ldr	r1, [pc, #88]	; (8001188 <MX_FREERTOS_Init+0xdc>)
 8001130:	4816      	ldr	r0, [pc, #88]	; (800118c <MX_FREERTOS_Init+0xe0>)
 8001132:	f005 f950 	bl	80063d6 <xTaskCreate>
		  /*priority*/ (UBaseType_t) 7, &hts_task_handle);
  xTaskCreate(lsm_task, "lsm_task", configMINIMAL_STACK_SIZE, (void*)1,
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_FREERTOS_Init+0xe4>)
 8001138:	9301      	str	r3, [sp, #4]
 800113a:	2307      	movs	r3, #7
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	2280      	movs	r2, #128	; 0x80
 8001142:	4914      	ldr	r1, [pc, #80]	; (8001194 <MX_FREERTOS_Init+0xe8>)
 8001144:	4814      	ldr	r0, [pc, #80]	; (8001198 <MX_FREERTOS_Init+0xec>)
 8001146:	f005 f946 	bl	80063d6 <xTaskCreate>
		  /*priority*/ (UBaseType_t) 7, &lsm_task_handle);
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bdb0      	pop	{r4, r5, r7, pc}
 8001152:	bf00      	nop
 8001154:	20000214 	.word	0x20000214
 8001158:	0800cb18 	.word	0x0800cb18
 800115c:	20000218 	.word	0x20000218
 8001160:	20000200 	.word	0x20000200
 8001164:	0800cadc 	.word	0x0800cadc
 8001168:	08001b55 	.word	0x08001b55
 800116c:	20000204 	.word	0x20000204
 8001170:	0800cae8 	.word	0x0800cae8
 8001174:	08001ae5 	.word	0x08001ae5
 8001178:	20000208 	.word	0x20000208
 800117c:	0800caf4 	.word	0x0800caf4
 8001180:	08001b13 	.word	0x08001b13
 8001184:	20000210 	.word	0x20000210
 8001188:	0800cb00 	.word	0x0800cb00
 800118c:	08001ab7 	.word	0x08001ab7
 8001190:	2000020c 	.word	0x2000020c
 8001194:	0800cb0c 	.word	0x0800cb0c
 8001198:	08001b41 	.word	0x08001b41

0800119c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f004 facf 	bl	8005748 <osDelay>
 80011aa:	e7fb      	b.n	80011a4 <StartDefaultTask+0x8>

080011ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_GPIO_Init+0x68>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <MX_GPIO_Init+0x68>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_GPIO_Init+0x68>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_GPIO_Init+0x68>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <MX_GPIO_Init+0x68>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_GPIO_Init+0x68>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 80011f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_GPIO_Init+0x6c>)
 8001208:	f001 f8a8 	bl	800235c <HAL_GPIO_Init>

}
 800120c:	bf00      	nop
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40021000 	.word	0x40021000
 8001218:	48000800 	.word	0x48000800
 800121c:	00000000 	.word	0x00000000

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001224:	b0ce      	sub	sp, #312	; 0x138
 8001226:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001228:	f000 fce4 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122c:	f000 f906 	bl	800143c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001230:	f7ff ffbc 	bl	80011ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001234:	f7ff fee0 	bl	8000ff8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001238:	f000 fb16 	bl	8001868 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t ticker =0 ;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001242:	f7ff ff33 	bl	80010ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001246:	f004 fa2c 	bl	80056a2 <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t tx_buffer[255];
	  uint16_t tx_len;
	  tx_len = sprintf((char*)tx_buffer,"test\n");
 800124a:	463b      	mov	r3, r7
 800124c:	4974      	ldr	r1, [pc, #464]	; (8001420 <main+0x200>)
 800124e:	4618      	mov	r0, r3
 8001250:	f007 ffec 	bl	800922c <siprintf>
 8001254:	4603      	mov	r3, r0
 8001256:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
		ticker ++;
 800125a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800125e:	3301      	adds	r3, #1
 8001260:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		float accel_data[3];
		int16_t accel_data_i16[3] = { 0 };			// array to store the x, y and z readings.
 8001264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	809a      	strh	r2, [r3, #4]
		if (ticker % 2 == 0){
 800126e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d175      	bne.n	8001366 <main+0x146>
			BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
 800127a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fc7a 	bl	8001b78 <BSP_ACCELERO_AccGetXYZ>
			// the function above returns 16 bit integers which are acceleration in mg (9.8/1000 m/s^2).
			// Converting to float to print the actual acceleration.
			accel_data[0] = (float)accel_data_i16[0] * (9.8/1000.0f);
 8001284:	f9b7 3108 	ldrsh.w	r3, [r7, #264]	; 0x108
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001290:	ee17 0a90 	vmov	r0, s15
 8001294:	f7ff f958 	bl	8000548 <__aeabi_f2d>
 8001298:	a35f      	add	r3, pc, #380	; (adr r3, 8001418 <main+0x1f8>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff f9ab 	bl	80005f8 <__aeabi_dmul>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff fc9d 	bl	8000be8 <__aeabi_d2f>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			accel_data[1] = (float)accel_data_i16[1] * (9.8/1000.0f);
 80012b4:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c0:	ee17 0a90 	vmov	r0, s15
 80012c4:	f7ff f940 	bl	8000548 <__aeabi_f2d>
 80012c8:	a353      	add	r3, pc, #332	; (adr r3, 8001418 <main+0x1f8>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff f993 	bl	80005f8 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fc85 	bl	8000be8 <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
 80012e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			accel_data[2] = (float)accel_data_i16[2] * (9.8/1000.0f);
 80012e4:	f9b7 310c 	ldrsh.w	r3, [r7, #268]	; 0x10c
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f0:	ee17 0a90 	vmov	r0, s15
 80012f4:	f7ff f928 	bl	8000548 <__aeabi_f2d>
 80012f8:	a347      	add	r3, pc, #284	; (adr r3, 8001418 <main+0x1f8>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff f97b 	bl	80005f8 <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f7ff fc6d 	bl	8000be8 <__aeabi_d2f>
 800130e:	4603      	mov	r3, r0
 8001310:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			tx_len = sprintf((char*)tx_buffer,"AccelX : %f; Accel Y: %f; Accel Z: %f\n", accel_data[0], accel_data[1], accel_data[2]);
 8001314:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f915 	bl	8000548 <__aeabi_f2d>
 800131e:	4680      	mov	r8, r0
 8001320:	4689      	mov	r9, r1
 8001322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f90e 	bl	8000548 <__aeabi_f2d>
 800132c:	4604      	mov	r4, r0
 800132e:	460d      	mov	r5, r1
 8001330:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f907 	bl	8000548 <__aeabi_f2d>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4638      	mov	r0, r7
 8001340:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001344:	e9cd 4500 	strd	r4, r5, [sp]
 8001348:	4642      	mov	r2, r8
 800134a:	464b      	mov	r3, r9
 800134c:	4935      	ldr	r1, [pc, #212]	; (8001424 <main+0x204>)
 800134e:	f007 ff6d 	bl	800922c <siprintf>
 8001352:	4603      	mov	r3, r0
 8001354:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
			HAL_UART_Transmit_DMA(&huart1, tx_buffer,tx_len);
 8001358:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	4831      	ldr	r0, [pc, #196]	; (8001428 <main+0x208>)
 8001362:	f003 f817 	bl	8004394 <HAL_UART_Transmit_DMA>
		}
		if (ticker % 3 == 0){
 8001366:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <main+0x20c>)
 800136c:	fba3 2301 	umull	r2, r3, r3, r1
 8001370:	085a      	lsrs	r2, r3, #1
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	1aca      	subs	r2, r1, r3
 800137a:	2a00      	cmp	r2, #0
 800137c:	d117      	bne.n	80013ae <main+0x18e>
			float temp_data;
			temp_data = BSP_TSENSOR_ReadTemp();			// read temperature sensor
 800137e:	f000 fc2b 	bl	8001bd8 <BSP_TSENSOR_ReadTemp>
 8001382:	ed87 0a47 	vstr	s0, [r7, #284]	; 0x11c
			tx_len = sprintf((char*)tx_buffer,"Temp data: %f\n",temp_data);
 8001386:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800138a:	f7ff f8dd 	bl	8000548 <__aeabi_f2d>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4638      	mov	r0, r7
 8001394:	4926      	ldr	r1, [pc, #152]	; (8001430 <main+0x210>)
 8001396:	f007 ff49 	bl	800922c <siprintf>
 800139a:	4603      	mov	r3, r0
 800139c:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
			HAL_UART_Transmit_DMA(&huart1, tx_buffer,tx_len);
 80013a0:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	481f      	ldr	r0, [pc, #124]	; (8001428 <main+0x208>)
 80013aa:	f002 fff3 	bl	8004394 <HAL_UART_Transmit_DMA>
		}

		if (ticker%5 == 0){
 80013ae:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <main+0x214>)
 80013b4:	fba3 2301 	umull	r2, r3, r3, r1
 80013b8:	089a      	lsrs	r2, r3, #2
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	1aca      	subs	r2, r1, r3
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d121      	bne.n	800140a <main+0x1ea>
			int16_t magneto_data[3]= {0};
 80013c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	809a      	strh	r2, [r3, #4]
			BSP_MAGNETO_GetXYZ(magneto_data);
 80013d0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fbe7 	bl	8001ba8 <BSP_MAGNETO_GetXYZ>
			tx_len = sprintf((char*)tx_buffer, "magnetoX: %d, magnetoY: %d, magnetoZ: %d\n",
					magneto_data[0],magneto_data[1], magneto_data[2]);
 80013da:	f9b7 3100 	ldrsh.w	r3, [r7, #256]	; 0x100
			tx_len = sprintf((char*)tx_buffer, "magnetoX: %d, magnetoY: %d, magnetoZ: %d\n",
 80013de:	461a      	mov	r2, r3
					magneto_data[0],magneto_data[1], magneto_data[2]);
 80013e0:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	; 0x102
			tx_len = sprintf((char*)tx_buffer, "magnetoX: %d, magnetoY: %d, magnetoZ: %d\n",
 80013e4:	4619      	mov	r1, r3
					magneto_data[0],magneto_data[1], magneto_data[2]);
 80013e6:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	; 0x104
			tx_len = sprintf((char*)tx_buffer, "magnetoX: %d, magnetoY: %d, magnetoZ: %d\n",
 80013ea:	4638      	mov	r0, r7
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	460b      	mov	r3, r1
 80013f0:	4911      	ldr	r1, [pc, #68]	; (8001438 <main+0x218>)
 80013f2:	f007 ff1b 	bl	800922c <siprintf>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
			HAL_UART_Transmit_DMA(&huart1, tx_buffer,tx_len);
 80013fc:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <main+0x208>)
 8001406:	f002 ffc5 	bl	8004394 <HAL_UART_Transmit_DMA>
		}
		HAL_Delay(500);	// read once a ~second.
 800140a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800140e:	f000 fc29 	bl	8001c64 <HAL_Delay>
  {
 8001412:	e71a      	b.n	800124a <main+0x2a>
 8001414:	f3af 8000 	nop.w
 8001418:	bc01a36f 	.word	0xbc01a36f
 800141c:	3f841205 	.word	0x3f841205
 8001420:	0800cb34 	.word	0x0800cb34
 8001424:	0800cb3c 	.word	0x0800cb3c
 8001428:	200009d4 	.word	0x200009d4
 800142c:	aaaaaaab 	.word	0xaaaaaaab
 8001430:	0800cb64 	.word	0x0800cb64
 8001434:	cccccccd 	.word	0xcccccccd
 8001438:	0800cb74 	.word	0x0800cb74

0800143c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b096      	sub	sp, #88	; 0x58
 8001440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	2244      	movs	r2, #68	; 0x44
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f006 ff57 	bl	80082fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001450:	463b      	mov	r3, r7
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800145e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001462:	f001 f933 	bl	80026cc <HAL_PWREx_ControlVoltageScaling>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800146c:	f000 f83e 	bl	80014ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001470:	2310      	movs	r3, #16
 8001472:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001474:	2301      	movs	r3, #1
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800147c:	2360      	movs	r3, #96	; 0x60
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001480:	2300      	movs	r3, #0
 8001482:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4618      	mov	r0, r3
 800148a:	f001 f975 	bl	8002778 <HAL_RCC_OscConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001494:	f000 f82a 	bl	80014ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001498:	230f      	movs	r3, #15
 800149a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 fd3d 	bl	8002f30 <HAL_RCC_ClockConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014bc:	f000 f816 	bl	80014ec <Error_Handler>
  }
}
 80014c0:	bf00      	nop
 80014c2:	3758      	adds	r7, #88	; 0x58
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d101      	bne.n	80014de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014da:	f000 fba3 	bl	8001c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40001000 	.word	0x40001000

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <Error_Handler+0x8>
	...

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_MspInit+0x4c>)
 8001500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_MspInit+0x4c>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6613      	str	r3, [r2, #96]	; 0x60
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_MspInit+0x4c>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_MspInit+0x4c>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_MspInit+0x4c>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6593      	str	r3, [r2, #88]	; 0x58
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_MspInit+0x4c>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	210f      	movs	r1, #15
 8001532:	f06f 0001 	mvn.w	r0, #1
 8001536:	f000 fc71 	bl	8001e1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000

08001548 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08e      	sub	sp, #56	; 0x38
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <HAL_InitTick+0xe0>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	4a33      	ldr	r2, [pc, #204]	; (8001628 <HAL_InitTick+0xe0>)
 800155c:	f043 0310 	orr.w	r3, r3, #16
 8001560:	6593      	str	r3, [r2, #88]	; 0x58
 8001562:	4b31      	ldr	r3, [pc, #196]	; (8001628 <HAL_InitTick+0xe0>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800156e:	f107 0210 	add.w	r2, r7, #16
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f001 fe9d 	bl	80032b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001584:	2b00      	cmp	r3, #0
 8001586:	d103      	bne.n	8001590 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001588:	f001 fe6a 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 800158c:	6378      	str	r0, [r7, #52]	; 0x34
 800158e:	e004      	b.n	800159a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001590:	f001 fe66 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 8001594:	4603      	mov	r3, r0
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800159a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159c:	4a23      	ldr	r2, [pc, #140]	; (800162c <HAL_InitTick+0xe4>)
 800159e:	fba2 2303 	umull	r2, r3, r2, r3
 80015a2:	0c9b      	lsrs	r3, r3, #18
 80015a4:	3b01      	subs	r3, #1
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015a8:	4b21      	ldr	r3, [pc, #132]	; (8001630 <HAL_InitTick+0xe8>)
 80015aa:	4a22      	ldr	r2, [pc, #136]	; (8001634 <HAL_InitTick+0xec>)
 80015ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_InitTick+0xe8>)
 80015b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015b6:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <HAL_InitTick+0xe8>)
 80015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_InitTick+0xe8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_InitTick+0xe8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_InitTick+0xe8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <HAL_InitTick+0xe8>)
 80015d0:	f002 fbc0 	bl	8003d54 <HAL_TIM_Base_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d11b      	bne.n	800161a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015e2:	4813      	ldr	r0, [pc, #76]	; (8001630 <HAL_InitTick+0xe8>)
 80015e4:	f002 fc18 	bl	8003e18 <HAL_TIM_Base_Start_IT>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d111      	bne.n	800161a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015f6:	2036      	movs	r0, #54	; 0x36
 80015f8:	f000 fc2c 	bl	8001e54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b0f      	cmp	r3, #15
 8001600:	d808      	bhi.n	8001614 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001602:	2200      	movs	r2, #0
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	2036      	movs	r0, #54	; 0x36
 8001608:	f000 fc08 	bl	8001e1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_InitTick+0xf0>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e002      	b.n	800161a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800161a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800161e:	4618      	mov	r0, r3
 8001620:	3738      	adds	r7, #56	; 0x38
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	431bde83 	.word	0x431bde83
 8001630:	20000984 	.word	0x20000984
 8001634:	40001000 	.word	0x40001000
 8001638:	20000004 	.word	0x20000004

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <NMI_Handler+0x4>

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <DMA1_Channel4_IRQHandler+0x10>)
 800166e:	f000 fd96 	bl	800219e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000aa0 	.word	0x20000aa0

0800167c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <DMA1_Channel5_IRQHandler+0x10>)
 8001682:	f000 fd8c 	bl	800219e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000a58 	.word	0x20000a58

08001690 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <USART1_IRQHandler+0x10>)
 8001696:	f002 ff0d 	bl	80044b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200009d4 	.word	0x200009d4

080016a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <TIM6_DAC_IRQHandler+0x10>)
 80016aa:	f002 fc25 	bl	8003ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000984 	.word	0x20000984

080016b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return 1;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_kill>:

int _kill(int pid, int sig)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016d2:	f006 fce3 	bl	800809c <__errno>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2216      	movs	r2, #22
 80016da:	601a      	str	r2, [r3, #0]
  return -1;
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_exit>:

void _exit (int status)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ffe7 	bl	80016c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016fa:	e7fe      	b.n	80016fa <_exit+0x12>

080016fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e00a      	b.n	8001724 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800170e:	f3af 8000 	nop.w
 8001712:	4601      	mov	r1, r0
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60ba      	str	r2, [r7, #8]
 800171a:	b2ca      	uxtb	r2, r1
 800171c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbf0      	blt.n	800170e <_read+0x12>
  }

  return len;
 800172c:	687b      	ldr	r3, [r7, #4]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e009      	b.n	800175c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60ba      	str	r2, [r7, #8]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3301      	adds	r3, #1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	429a      	cmp	r2, r3
 8001762:	dbf1      	blt.n	8001748 <_write+0x12>
  }
  return len;
 8001764:	687b      	ldr	r3, [r7, #4]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <_close>:

int _close(int file)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001796:	605a      	str	r2, [r3, #4]
  return 0;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_isatty>:

int _isatty(int file)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e0:	4a14      	ldr	r2, [pc, #80]	; (8001834 <_sbrk+0x5c>)
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <_sbrk+0x60>)
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <_sbrk+0x64>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <_sbrk+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001808:	f006 fc48 	bl	800809c <__errno>
 800180c:	4603      	mov	r3, r0
 800180e:	220c      	movs	r2, #12
 8001810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	e009      	b.n	800182c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <_sbrk+0x64>)
 8001828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20018000 	.word	0x20018000
 8001838:	00000400 	.word	0x00000400
 800183c:	200009d0 	.word	0x200009d0
 8001840:	20001a80 	.word	0x20001a80

08001844 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <SystemInit+0x20>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <SystemInit+0x20>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_USART1_UART_Init+0x58>)
 800186e:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <MX_USART1_UART_Init+0x5c>)
 8001870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <MX_USART1_UART_Init+0x58>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_USART1_UART_Init+0x58>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_USART1_UART_Init+0x58>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_USART1_UART_Init+0x58>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_USART1_UART_Init+0x58>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <MX_USART1_UART_Init+0x58>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_USART1_UART_Init+0x58>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <MX_USART1_UART_Init+0x58>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_USART1_UART_Init+0x58>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_USART1_UART_Init+0x58>)
 80018ac:	f002 fd24 	bl	80042f8 <HAL_UART_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80018b6:	f7ff fe19 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200009d4 	.word	0x200009d4
 80018c4:	40013800 	.word	0x40013800

080018c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b0ac      	sub	sp, #176	; 0xb0
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2288      	movs	r2, #136	; 0x88
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f006 fd08 	bl	80082fe <memset>
  if(uartHandle->Instance==USART1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a4e      	ldr	r2, [pc, #312]	; (8001a2c <HAL_UART_MspInit+0x164>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	f040 8095 	bne.w	8001a24 <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018fa:	2301      	movs	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018fe:	2300      	movs	r3, #0
 8001900:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4618      	mov	r0, r3
 8001908:	f001 fd68 	bl	80033dc <HAL_RCCEx_PeriphCLKConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001912:	f7ff fdeb 	bl	80014ec <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001916:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <HAL_UART_MspInit+0x168>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191a:	4a45      	ldr	r2, [pc, #276]	; (8001a30 <HAL_UART_MspInit+0x168>)
 800191c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001920:	6613      	str	r3, [r2, #96]	; 0x60
 8001922:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <HAL_UART_MspInit+0x168>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <HAL_UART_MspInit+0x168>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4a3f      	ldr	r2, [pc, #252]	; (8001a30 <HAL_UART_MspInit+0x168>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193a:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <HAL_UART_MspInit+0x168>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001946:	23c0      	movs	r3, #192	; 0xc0
 8001948:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800195e:	2307      	movs	r3, #7
 8001960:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001964:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001968:	4619      	mov	r1, r3
 800196a:	4832      	ldr	r0, [pc, #200]	; (8001a34 <HAL_UART_MspInit+0x16c>)
 800196c:	f000 fcf6 	bl	800235c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001970:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <HAL_UART_MspInit+0x170>)
 8001972:	4a32      	ldr	r2, [pc, #200]	; (8001a3c <HAL_UART_MspInit+0x174>)
 8001974:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_UART_MspInit+0x170>)
 8001978:	2202      	movs	r2, #2
 800197a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800197c:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <HAL_UART_MspInit+0x170>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001982:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <HAL_UART_MspInit+0x170>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_UART_MspInit+0x170>)
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HAL_UART_MspInit+0x170>)
 8001990:	2200      	movs	r2, #0
 8001992:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_UART_MspInit+0x170>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <HAL_UART_MspInit+0x170>)
 800199c:	2220      	movs	r2, #32
 800199e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <HAL_UART_MspInit+0x170>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80019a6:	4824      	ldr	r0, [pc, #144]	; (8001a38 <HAL_UART_MspInit+0x170>)
 80019a8:	f000 fa62 	bl	8001e70 <HAL_DMA_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80019b2:	f7ff fd9b 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <HAL_UART_MspInit+0x170>)
 80019ba:	671a      	str	r2, [r3, #112]	; 0x70
 80019bc:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <HAL_UART_MspInit+0x170>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <HAL_UART_MspInit+0x178>)
 80019c4:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <HAL_UART_MspInit+0x17c>)
 80019c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_UART_MspInit+0x178>)
 80019ca:	2202      	movs	r2, #2
 80019cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ce:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <HAL_UART_MspInit+0x178>)
 80019d0:	2210      	movs	r2, #16
 80019d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HAL_UART_MspInit+0x178>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_UART_MspInit+0x178>)
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_UART_MspInit+0x178>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_UART_MspInit+0x178>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_UART_MspInit+0x178>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_UART_MspInit+0x178>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80019f8:	4811      	ldr	r0, [pc, #68]	; (8001a40 <HAL_UART_MspInit+0x178>)
 80019fa:	f000 fa39 	bl	8001e70 <HAL_DMA_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8001a04:	f7ff fd72 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_UART_MspInit+0x178>)
 8001a0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8001a0e:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <HAL_UART_MspInit+0x178>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2105      	movs	r1, #5
 8001a18:	2025      	movs	r0, #37	; 0x25
 8001a1a:	f000 f9ff 	bl	8001e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a1e:	2025      	movs	r0, #37	; 0x25
 8001a20:	f000 fa18 	bl	8001e54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a24:	bf00      	nop
 8001a26:	37b0      	adds	r7, #176	; 0xb0
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40013800 	.word	0x40013800
 8001a30:	40021000 	.word	0x40021000
 8001a34:	48000400 	.word	0x48000400
 8001a38:	20000a58 	.word	0x20000a58
 8001a3c:	40020058 	.word	0x40020058
 8001a40:	20000aa0 	.word	0x20000aa0
 8001a44:	40020044 	.word	0x40020044

08001a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a4c:	f7ff fefa 	bl	8001844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a52:	490d      	ldr	r1, [pc, #52]	; (8001a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a54:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <LoopForever+0xe>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a68:	4c0a      	ldr	r4, [pc, #40]	; (8001a94 <LoopForever+0x16>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f006 fc0d 	bl	8008294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a7a:	f7ff fbd1 	bl	8001220 <main>

08001a7e <LoopForever>:

LoopForever:
    b LoopForever
 8001a7e:	e7fe      	b.n	8001a7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a88:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001a8c:	0800d0b8 	.word	0x0800d0b8
  ldr r2, =_sbss
 8001a90:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001a94:	20001a7c 	.word	0x20001a7c

08001a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <ADC1_2_IRQHandler>

08001a9a <hts_init>:

#include "../../Drivers/BSP/B-L475E-IOT01/stm32l475e_iot01_tsensor.h"
#include "stdio.h"
#include "../../tasks/inc/hts_task.h"

void hts_init(){
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <hts_loop>:

void hts_loop(){
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <hts_task>:

void hts_task(void* argument){
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
	hts_init();
 8001abe:	f7ff ffec 	bl	8001a9a <hts_init>
	while(1){
		hts_loop();
 8001ac2:	f7ff fff1 	bl	8001aa8 <hts_loop>
 8001ac6:	e7fc      	b.n	8001ac2 <hts_task+0xc>

08001ac8 <lis_init>:
#include "stdio.h"
#include "../../tasks/inc/lis_task.h"



void lis_init(){
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <lis_loop>:

void lis_loop(){
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <lis_task>:

void lis_task(void* argument){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	lis_init();
 8001aec:	f7ff ffec 	bl	8001ac8 <lis_init>
	while(1){
		lis_loop();
 8001af0:	f7ff fff1 	bl	8001ad6 <lis_loop>
 8001af4:	e7fc      	b.n	8001af0 <lis_task+0xc>

08001af6 <lps_init>:
#include "main.h"
#include "rtos_vars.h"
#include "stm32l475e_iot01_psensor.h"
#include "stdio.h"
#include "lps_task.h"
void lps_init(){
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <lps_loop>:

void lps_loop(){
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <lps_task>:

void lps_task(void* argument){
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
	lps_init();
 8001b1a:	f7ff ffec 	bl	8001af6 <lps_init>
	while(1){
		lps_loop();
 8001b1e:	f7ff fff1 	bl	8001b04 <lps_loop>
 8001b22:	e7fc      	b.n	8001b1e <lps_task+0xc>

08001b24 <lsm_init>:
#include "../../Drivers/BSP/B-L475E-IOT01/stm32l475e_iot01_accelero.h"
#include "../../Drivers/BSP/B-L475E-IOT01/stm32l475e_iot01_gyro.h"
#include "stdio.h"
#include "../../tasks/inc/lsm_task.h"

void lsm_init(){
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <lsm_loop>:

void lsm_loop(){
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <lsm_task>:

void lsm_task(void* argument){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	lsm_init();
 8001b48:	f7ff ffec 	bl	8001b24 <lsm_init>
	while(1){
		lsm_loop();
 8001b4c:	f7ff fff1 	bl	8001b32 <lsm_loop>
 8001b50:	e7fc      	b.n	8001b4c <lsm_task+0xc>
	...

08001b54 <uart1_task>:
#include "main.h"
#include "rtos_vars.h"
#include "uart1_task.h"


void uart1_task(void* argument){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	//init code
	static queue_UART_msg_t uart_q;
	while(1){
		xQueueReceive(UART1_queue, &uart_q, 100000);
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <uart1_task+0x18>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <uart1_task+0x1c>)
 8001b62:	4904      	ldr	r1, [pc, #16]	; (8001b74 <uart1_task+0x20>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f004 f98b 	bl	8005e80 <xQueueReceive>
 8001b6a:	e7f7      	b.n	8001b5c <uart1_task+0x8>
 8001b6c:	20000214 	.word	0x20000214
 8001b70:	000186a0 	.word	0x000186a0
 8001b74:	20000ae8 	.word	0x20000ae8

08001b78 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d009      	beq.n	8001b9c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d004      	beq.n	8001b9c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4798      	blx	r3
    }
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000bec 	.word	0x20000bec

08001ba8 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d004      	beq.n	8001bcc <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	4798      	blx	r3
    }
  }
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000bf0 	.word	0x20000bf0

08001bd8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <BSP_TSENSOR_ReadTemp+0x18>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	20be      	movs	r0, #190	; 0xbe
 8001be4:	4798      	blx	r3
 8001be6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001bea:	eeb0 0a67 	vmov.f32	s0, s15
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000bf4 	.word	0x20000bf4

08001bf4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfe:	2003      	movs	r0, #3
 8001c00:	f000 f901 	bl	8001e06 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c04:	200f      	movs	r0, #15
 8001c06:	f7ff fc9f 	bl	8001548 <HAL_InitTick>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	71fb      	strb	r3, [r7, #7]
 8001c14:	e001      	b.n	8001c1a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c16:	f7ff fc6f 	bl	80014f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20000bf8 	.word	0x20000bf8

08001c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000bf8 	.word	0x20000bf8

08001c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff ffee 	bl	8001c4c <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_Delay+0x44>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffde 	bl	8001c4c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <__NVIC_EnableIRQ+0x38>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	; (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	; (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ff4c 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2e:	f7ff ff61 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	6978      	ldr	r0, [r7, #20]
 8001e3a:	f7ff ffb1 	bl	8001da0 <NVIC_EncodePriority>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff80 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e4c:	bf00      	nop
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff54 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e098      	b.n	8001fb4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b4d      	ldr	r3, [pc, #308]	; (8001fc0 <HAL_DMA_Init+0x150>)
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d80f      	bhi.n	8001eae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_DMA_Init+0x154>)
 8001e96:	4413      	add	r3, r2
 8001e98:	4a4b      	ldr	r2, [pc, #300]	; (8001fc8 <HAL_DMA_Init+0x158>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	009a      	lsls	r2, r3, #2
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a48      	ldr	r2, [pc, #288]	; (8001fcc <HAL_DMA_Init+0x15c>)
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8001eac:	e00e      	b.n	8001ecc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <HAL_DMA_Init+0x160>)
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a43      	ldr	r2, [pc, #268]	; (8001fc8 <HAL_DMA_Init+0x158>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	091b      	lsrs	r3, r3, #4
 8001ec0:	009a      	lsls	r2, r3, #2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a42      	ldr	r2, [pc, #264]	; (8001fd4 <HAL_DMA_Init+0x164>)
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f26:	d039      	beq.n	8001f9c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	4a27      	ldr	r2, [pc, #156]	; (8001fcc <HAL_DMA_Init+0x15c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d11a      	bne.n	8001f68 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_DMA_Init+0x168>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f003 031c 	and.w	r3, r3, #28
 8001f3e:	210f      	movs	r1, #15
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4924      	ldr	r1, [pc, #144]	; (8001fd8 <HAL_DMA_Init+0x168>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_DMA_Init+0x168>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f58:	f003 031c 	and.w	r3, r3, #28
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	491d      	ldr	r1, [pc, #116]	; (8001fd8 <HAL_DMA_Init+0x168>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
 8001f66:	e019      	b.n	8001f9c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f68:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <HAL_DMA_Init+0x16c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f70:	f003 031c 	and.w	r3, r3, #28
 8001f74:	210f      	movs	r1, #15
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	4917      	ldr	r1, [pc, #92]	; (8001fdc <HAL_DMA_Init+0x16c>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <HAL_DMA_Init+0x16c>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6859      	ldr	r1, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f003 031c 	and.w	r3, r3, #28
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	4911      	ldr	r1, [pc, #68]	; (8001fdc <HAL_DMA_Init+0x16c>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40020407 	.word	0x40020407
 8001fc4:	bffdfff8 	.word	0xbffdfff8
 8001fc8:	cccccccd 	.word	0xcccccccd
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	bffdfbf8 	.word	0xbffdfbf8
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	400200a8 	.word	0x400200a8
 8001fdc:	400204a8 	.word	0x400204a8

08001fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_DMA_Start_IT+0x20>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e04b      	b.n	8002098 <HAL_DMA_Start_IT+0xb8>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d13a      	bne.n	800208a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0201 	bic.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68b9      	ldr	r1, [r7, #8]
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 f95f 	bl	80022fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 020e 	orr.w	r2, r2, #14
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e00f      	b.n	8002078 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0204 	bic.w	r2, r2, #4
 8002066:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 020a 	orr.w	r2, r2, #10
 8002076:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e005      	b.n	8002096 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002092:	2302      	movs	r3, #2
 8002094:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002096:	7dfb      	ldrb	r3, [r7, #23]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d008      	beq.n	80020ca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2204      	movs	r2, #4
 80020bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e022      	b.n	8002110 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 020e 	bic.w	r2, r2, #14
 80020d8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f003 021c 	and.w	r2, r3, #28
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2101      	movs	r1, #1
 80020f8:	fa01 f202 	lsl.w	r2, r1, r2
 80020fc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d005      	beq.n	8002140 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2204      	movs	r2, #4
 8002138:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
 800213e:	e029      	b.n	8002194 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 020e 	bic.w	r2, r2, #14
 800214e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0201 	bic.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	f003 021c 	and.w	r2, r3, #28
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	2101      	movs	r1, #1
 800216e:	fa01 f202 	lsl.w	r2, r1, r2
 8002172:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3
    }
  }
  return status;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f003 031c 	and.w	r3, r3, #28
 80021be:	2204      	movs	r2, #4
 80021c0:	409a      	lsls	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d026      	beq.n	8002218 <HAL_DMA_IRQHandler+0x7a>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d021      	beq.n	8002218 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d107      	bne.n	80021f2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0204 	bic.w	r2, r2, #4
 80021f0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f003 021c 	and.w	r2, r3, #28
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2104      	movs	r1, #4
 8002200:	fa01 f202 	lsl.w	r2, r1, r2
 8002204:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	2b00      	cmp	r3, #0
 800220c:	d071      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002216:	e06c      	b.n	80022f2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	f003 031c 	and.w	r3, r3, #28
 8002220:	2202      	movs	r2, #2
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d02e      	beq.n	800228a <HAL_DMA_IRQHandler+0xec>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d029      	beq.n	800228a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10b      	bne.n	800225c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 020a 	bic.w	r2, r2, #10
 8002252:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002260:	f003 021c 	and.w	r2, r3, #28
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	2102      	movs	r1, #2
 800226a:	fa01 f202 	lsl.w	r2, r1, r2
 800226e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	2b00      	cmp	r3, #0
 800227e:	d038      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002288:	e033      	b.n	80022f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f003 031c 	and.w	r3, r3, #28
 8002292:	2208      	movs	r2, #8
 8002294:	409a      	lsls	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d02a      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x156>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d025      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 020e 	bic.w	r2, r2, #14
 80022b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	f003 021c 	and.w	r2, r3, #28
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	2101      	movs	r1, #1
 80022c6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d004      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
}
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f003 021c 	and.w	r2, r3, #28
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f202 	lsl.w	r2, r1, r2
 800231c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b10      	cmp	r3, #16
 800232c:	d108      	bne.n	8002340 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800233e:	e007      	b.n	8002350 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	60da      	str	r2, [r3, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236a:	e17f      	b.n	800266c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2101      	movs	r1, #1
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	4013      	ands	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8171 	beq.w	8002666 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d005      	beq.n	800239c <HAL_GPIO_Init+0x40>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d130      	bne.n	80023fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023d2:	2201      	movs	r2, #1
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	f003 0201 	and.w	r2, r3, #1
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b03      	cmp	r3, #3
 8002408:	d118      	bne.n	800243c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002410:	2201      	movs	r2, #1
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	08db      	lsrs	r3, r3, #3
 8002426:	f003 0201 	and.w	r2, r3, #1
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b03      	cmp	r3, #3
 8002446:	d017      	beq.n	8002478 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d123      	bne.n	80024cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	220f      	movs	r2, #15
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	08da      	lsrs	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3208      	adds	r2, #8
 80024c6:	6939      	ldr	r1, [r7, #16]
 80024c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0203 	and.w	r2, r3, #3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80ac 	beq.w	8002666 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	4b5f      	ldr	r3, [pc, #380]	; (800268c <HAL_GPIO_Init+0x330>)
 8002510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002512:	4a5e      	ldr	r2, [pc, #376]	; (800268c <HAL_GPIO_Init+0x330>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6613      	str	r3, [r2, #96]	; 0x60
 800251a:	4b5c      	ldr	r3, [pc, #368]	; (800268c <HAL_GPIO_Init+0x330>)
 800251c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002526:	4a5a      	ldr	r2, [pc, #360]	; (8002690 <HAL_GPIO_Init+0x334>)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002532:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	220f      	movs	r2, #15
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002550:	d025      	beq.n	800259e <HAL_GPIO_Init+0x242>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4f      	ldr	r2, [pc, #316]	; (8002694 <HAL_GPIO_Init+0x338>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01f      	beq.n	800259a <HAL_GPIO_Init+0x23e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4e      	ldr	r2, [pc, #312]	; (8002698 <HAL_GPIO_Init+0x33c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d019      	beq.n	8002596 <HAL_GPIO_Init+0x23a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4d      	ldr	r2, [pc, #308]	; (800269c <HAL_GPIO_Init+0x340>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0x236>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4c      	ldr	r2, [pc, #304]	; (80026a0 <HAL_GPIO_Init+0x344>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00d      	beq.n	800258e <HAL_GPIO_Init+0x232>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4b      	ldr	r2, [pc, #300]	; (80026a4 <HAL_GPIO_Init+0x348>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <HAL_GPIO_Init+0x22e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4a      	ldr	r2, [pc, #296]	; (80026a8 <HAL_GPIO_Init+0x34c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_GPIO_Init+0x22a>
 8002582:	2306      	movs	r3, #6
 8002584:	e00c      	b.n	80025a0 <HAL_GPIO_Init+0x244>
 8002586:	2307      	movs	r3, #7
 8002588:	e00a      	b.n	80025a0 <HAL_GPIO_Init+0x244>
 800258a:	2305      	movs	r3, #5
 800258c:	e008      	b.n	80025a0 <HAL_GPIO_Init+0x244>
 800258e:	2304      	movs	r3, #4
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x244>
 8002592:	2303      	movs	r3, #3
 8002594:	e004      	b.n	80025a0 <HAL_GPIO_Init+0x244>
 8002596:	2302      	movs	r3, #2
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_Init+0x244>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_GPIO_Init+0x244>
 800259e:	2300      	movs	r3, #0
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	f002 0203 	and.w	r2, r2, #3
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	4093      	lsls	r3, r2
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025b0:	4937      	ldr	r1, [pc, #220]	; (8002690 <HAL_GPIO_Init+0x334>)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3302      	adds	r3, #2
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <HAL_GPIO_Init+0x350>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025e2:	4a32      	ldr	r2, [pc, #200]	; (80026ac <HAL_GPIO_Init+0x350>)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025e8:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_GPIO_Init+0x350>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800260c:	4a27      	ldr	r2, [pc, #156]	; (80026ac <HAL_GPIO_Init+0x350>)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <HAL_GPIO_Init+0x350>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43db      	mvns	r3, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002636:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <HAL_GPIO_Init+0x350>)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <HAL_GPIO_Init+0x350>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002660:	4a12      	ldr	r2, [pc, #72]	; (80026ac <HAL_GPIO_Init+0x350>)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3301      	adds	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa22 f303 	lsr.w	r3, r2, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	f47f ae78 	bne.w	800236c <HAL_GPIO_Init+0x10>
  }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	371c      	adds	r7, #28
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	40010000 	.word	0x40010000
 8002694:	48000400 	.word	0x48000400
 8002698:	48000800 	.word	0x48000800
 800269c:	48000c00 	.word	0x48000c00
 80026a0:	48001000 	.word	0x48001000
 80026a4:	48001400 	.word	0x48001400
 80026a8:	48001800 	.word	0x48001800
 80026ac:	40010400 	.word	0x40010400

080026b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40007000 	.word	0x40007000

080026cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026da:	d130      	bne.n	800273e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026dc:	4b23      	ldr	r3, [pc, #140]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e8:	d038      	beq.n	800275c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026f2:	4a1e      	ldr	r2, [pc, #120]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026fa:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2232      	movs	r2, #50	; 0x32
 8002700:	fb02 f303 	mul.w	r3, r2, r3
 8002704:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0c9b      	lsrs	r3, r3, #18
 800270c:	3301      	adds	r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002710:	e002      	b.n	8002718 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3b01      	subs	r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002724:	d102      	bne.n	800272c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f2      	bne.n	8002712 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002738:	d110      	bne.n	800275c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e00f      	b.n	800275e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	d007      	beq.n	800275c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800274c:	4b07      	ldr	r3, [pc, #28]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002754:	4a05      	ldr	r2, [pc, #20]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800275a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40007000 	.word	0x40007000
 8002770:	20000000 	.word	0x20000000
 8002774:	431bde83 	.word	0x431bde83

08002778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e3ca      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278a:	4b97      	ldr	r3, [pc, #604]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002794:	4b94      	ldr	r3, [pc, #592]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80e4 	beq.w	8002974 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_RCC_OscConfig+0x4a>
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	f040 808b 	bne.w	80028d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	f040 8087 	bne.w	80028d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027c2:	4b89      	ldr	r3, [pc, #548]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <HAL_RCC_OscConfig+0x62>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e3a2      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1a      	ldr	r2, [r3, #32]
 80027de:	4b82      	ldr	r3, [pc, #520]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d004      	beq.n	80027f4 <HAL_RCC_OscConfig+0x7c>
 80027ea:	4b7f      	ldr	r3, [pc, #508]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f2:	e005      	b.n	8002800 <HAL_RCC_OscConfig+0x88>
 80027f4:	4b7c      	ldr	r3, [pc, #496]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 80027f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002800:	4293      	cmp	r3, r2
 8002802:	d223      	bcs.n	800284c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4618      	mov	r0, r3
 800280a:	f000 fd87 	bl	800331c <RCC_SetFlashLatencyFromMSIRange>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e383      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002818:	4b73      	ldr	r3, [pc, #460]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a72      	ldr	r2, [pc, #456]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 800281e:	f043 0308 	orr.w	r3, r3, #8
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b70      	ldr	r3, [pc, #448]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	496d      	ldr	r1, [pc, #436]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002836:	4b6c      	ldr	r3, [pc, #432]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	4968      	ldr	r1, [pc, #416]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
 800284a:	e025      	b.n	8002898 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800284c:	4b66      	ldr	r3, [pc, #408]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a65      	ldr	r2, [pc, #404]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002852:	f043 0308 	orr.w	r3, r3, #8
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4960      	ldr	r1, [pc, #384]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800286a:	4b5f      	ldr	r3, [pc, #380]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	495b      	ldr	r1, [pc, #364]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fd47 	bl	800331c <RCC_SetFlashLatencyFromMSIRange>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e343      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002898:	f000 fc4a 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b52      	ldr	r3, [pc, #328]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	4950      	ldr	r1, [pc, #320]	; (80029ec <HAL_RCC_OscConfig+0x274>)
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
 80028b4:	4a4e      	ldr	r2, [pc, #312]	; (80029f0 <HAL_RCC_OscConfig+0x278>)
 80028b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028b8:	4b4e      	ldr	r3, [pc, #312]	; (80029f4 <HAL_RCC_OscConfig+0x27c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe fe43 	bl	8001548 <HAL_InitTick>
 80028c2:	4603      	mov	r3, r0
 80028c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d052      	beq.n	8002972 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	e327      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d032      	beq.n	800293e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028d8:	4b43      	ldr	r3, [pc, #268]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a42      	ldr	r2, [pc, #264]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028e4:	f7ff f9b2 	bl	8001c4c <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ec:	f7ff f9ae 	bl	8001c4c <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e310      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028fe:	4b3a      	ldr	r3, [pc, #232]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800290a:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a36      	ldr	r2, [pc, #216]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002910:	f043 0308 	orr.w	r3, r3, #8
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4931      	ldr	r1, [pc, #196]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002924:	4313      	orrs	r3, r2
 8002926:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002928:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	492c      	ldr	r1, [pc, #176]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
 800293c:	e01a      	b.n	8002974 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a29      	ldr	r2, [pc, #164]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800294a:	f7ff f97f 	bl	8001c4c <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002952:	f7ff f97b 	bl	8001c4c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e2dd      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002964:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <HAL_RCC_OscConfig+0x1da>
 8002970:	e000      	b.n	8002974 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002972:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d074      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b08      	cmp	r3, #8
 8002984:	d005      	beq.n	8002992 <HAL_RCC_OscConfig+0x21a>
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b0c      	cmp	r3, #12
 800298a:	d10e      	bne.n	80029aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d10b      	bne.n	80029aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d064      	beq.n	8002a68 <HAL_RCC_OscConfig+0x2f0>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d160      	bne.n	8002a68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e2ba      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x24a>
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 80029ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	e026      	b.n	8002a10 <HAL_RCC_OscConfig+0x298>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029ca:	d115      	bne.n	80029f8 <HAL_RCC_OscConfig+0x280>
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 80029d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a02      	ldr	r2, [pc, #8]	; (80029e8 <HAL_RCC_OscConfig+0x270>)
 80029de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	e014      	b.n	8002a10 <HAL_RCC_OscConfig+0x298>
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	0800cbb8 	.word	0x0800cbb8
 80029f0:	20000000 	.word	0x20000000
 80029f4:	20000004 	.word	0x20000004
 80029f8:	4ba0      	ldr	r3, [pc, #640]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a9f      	ldr	r2, [pc, #636]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 80029fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b9d      	ldr	r3, [pc, #628]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a9c      	ldr	r2, [pc, #624]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d013      	beq.n	8002a40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7ff f918 	bl	8001c4c <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7ff f914 	bl	8001c4c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e276      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a32:	4b92      	ldr	r3, [pc, #584]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x2a8>
 8002a3e:	e014      	b.n	8002a6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7ff f904 	bl	8001c4c <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a48:	f7ff f900 	bl	8001c4c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e262      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a5a:	4b88      	ldr	r3, [pc, #544]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x2d0>
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d060      	beq.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_OscConfig+0x310>
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d119      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d116      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a88:	4b7c      	ldr	r3, [pc, #496]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x328>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e23f      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa0:	4b76      	ldr	r3, [pc, #472]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	4973      	ldr	r1, [pc, #460]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab4:	e040      	b.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d023      	beq.n	8002b06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002abe:	4b6f      	ldr	r3, [pc, #444]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6e      	ldr	r2, [pc, #440]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7ff f8bf 	bl	8001c4c <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad2:	f7ff f8bb 	bl	8001c4c <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e21d      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae4:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af0:	4b62      	ldr	r3, [pc, #392]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	495f      	ldr	r1, [pc, #380]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
 8002b04:	e018      	b.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b06:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a5c      	ldr	r2, [pc, #368]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7ff f89b 	bl	8001c4c <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1a:	f7ff f897 	bl	8001c4c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e1f9      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b2c:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d03c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01c      	beq.n	8002b86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4c:	4b4b      	ldr	r3, [pc, #300]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b52:	4a4a      	ldr	r2, [pc, #296]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7ff f876 	bl	8001c4c <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b64:	f7ff f872 	bl	8001c4c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e1d4      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b76:	4b41      	ldr	r3, [pc, #260]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ef      	beq.n	8002b64 <HAL_RCC_OscConfig+0x3ec>
 8002b84:	e01b      	b.n	8002bbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b86:	4b3d      	ldr	r3, [pc, #244]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8c:	4a3b      	ldr	r2, [pc, #236]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f7ff f859 	bl	8001c4c <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9e:	f7ff f855 	bl	8001c4c <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e1b7      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bb0:	4b32      	ldr	r3, [pc, #200]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ef      	bne.n	8002b9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80a6 	beq.w	8002d18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10d      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bdc:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6593      	str	r3, [r2, #88]	; 0x58
 8002be8:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf8:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <HAL_RCC_OscConfig+0x508>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d118      	bne.n	8002c36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c04:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <HAL_RCC_OscConfig+0x508>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <HAL_RCC_OscConfig+0x508>)
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c10:	f7ff f81c 	bl	8001c4c <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c18:	f7ff f818 	bl	8001c4c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e17a      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <HAL_RCC_OscConfig+0x508>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d108      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4d8>
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c4e:	e029      	b.n	8002ca4 <HAL_RCC_OscConfig+0x52c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	d115      	bne.n	8002c84 <HAL_RCC_OscConfig+0x50c>
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002c60:	f043 0304 	orr.w	r3, r3, #4
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6e:	4a03      	ldr	r2, [pc, #12]	; (8002c7c <HAL_RCC_OscConfig+0x504>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c78:	e014      	b.n	8002ca4 <HAL_RCC_OscConfig+0x52c>
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40007000 	.word	0x40007000
 8002c84:	4b9c      	ldr	r3, [pc, #624]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	4a9b      	ldr	r2, [pc, #620]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c94:	4b98      	ldr	r3, [pc, #608]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	4a97      	ldr	r2, [pc, #604]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002c9c:	f023 0304 	bic.w	r3, r3, #4
 8002ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d016      	beq.n	8002cda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7fe ffce 	bl	8001c4c <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb4:	f7fe ffca 	bl	8001c4c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e12a      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cca:	4b8b      	ldr	r3, [pc, #556]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ed      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x53c>
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cda:	f7fe ffb7 	bl	8001c4c <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7fe ffb3 	bl	8001c4c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e113      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cf8:	4b7f      	ldr	r3, [pc, #508]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1ed      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d06:	7ffb      	ldrb	r3, [r7, #31]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d105      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0c:	4b7a      	ldr	r3, [pc, #488]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	4a79      	ldr	r2, [pc, #484]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80fe 	beq.w	8002f1e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	f040 80d0 	bne.w	8002ecc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d2c:	4b72      	ldr	r3, [pc, #456]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f003 0203 	and.w	r2, r3, #3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d130      	bne.n	8002da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d127      	bne.n	8002da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d11f      	bne.n	8002da2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d6c:	2a07      	cmp	r2, #7
 8002d6e:	bf14      	ite	ne
 8002d70:	2201      	movne	r2, #1
 8002d72:	2200      	moveq	r2, #0
 8002d74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d113      	bne.n	8002da2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	3b01      	subs	r3, #1
 8002d88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d109      	bne.n	8002da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d06e      	beq.n	8002e80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	d069      	beq.n	8002e7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d105      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002db4:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0ad      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dc4:	4b4c      	ldr	r3, [pc, #304]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a4b      	ldr	r2, [pc, #300]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dd0:	f7fe ff3c 	bl	8001c4c <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fe ff38 	bl	8001c4c <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e09a      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dea:	4b43      	ldr	r3, [pc, #268]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df6:	4b40      	ldr	r3, [pc, #256]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	4b40      	ldr	r3, [pc, #256]	; (8002efc <HAL_RCC_OscConfig+0x784>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e06:	3a01      	subs	r2, #1
 8002e08:	0112      	lsls	r2, r2, #4
 8002e0a:	4311      	orrs	r1, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e10:	0212      	lsls	r2, r2, #8
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e18:	0852      	lsrs	r2, r2, #1
 8002e1a:	3a01      	subs	r2, #1
 8002e1c:	0552      	lsls	r2, r2, #21
 8002e1e:	4311      	orrs	r1, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e24:	0852      	lsrs	r2, r2, #1
 8002e26:	3a01      	subs	r2, #1
 8002e28:	0652      	lsls	r2, r2, #25
 8002e2a:	4311      	orrs	r1, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e30:	0912      	lsrs	r2, r2, #4
 8002e32:	0452      	lsls	r2, r2, #17
 8002e34:	430a      	orrs	r2, r1
 8002e36:	4930      	ldr	r1, [pc, #192]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e3c:	4b2e      	ldr	r3, [pc, #184]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a2d      	ldr	r2, [pc, #180]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e48:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a2a      	ldr	r2, [pc, #168]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e54:	f7fe fefa 	bl	8001c4c <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7fe fef6 	bl	8001c4c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e058      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6e:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e7a:	e050      	b.n	8002f1e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e04f      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e80:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d148      	bne.n	8002f1e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a19      	ldr	r2, [pc, #100]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e98:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4a16      	ldr	r2, [pc, #88]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ea2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ea4:	f7fe fed2 	bl	8001c4c <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fe fece 	bl	8001c4c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e030      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x734>
 8002eca:	e028      	b.n	8002f1e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d023      	beq.n	8002f1a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <HAL_RCC_OscConfig+0x780>)
 8002ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fe feb5 	bl	8001c4c <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee4:	e00c      	b.n	8002f00 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7fe feb1 	bl	8001c4c <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d905      	bls.n	8002f00 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e013      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCC_OscConfig+0x7b0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1ec      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_RCC_OscConfig+0x7b0>)
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	4905      	ldr	r1, [pc, #20]	; (8002f28 <HAL_RCC_OscConfig+0x7b0>)
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_RCC_OscConfig+0x7b4>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	60cb      	str	r3, [r1, #12]
 8002f18:	e001      	b.n	8002f1e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	feeefffc 	.word	0xfeeefffc

08002f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0e7      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f44:	4b75      	ldr	r3, [pc, #468]	; (800311c <HAL_RCC_ClockConfig+0x1ec>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d910      	bls.n	8002f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b72      	ldr	r3, [pc, #456]	; (800311c <HAL_RCC_ClockConfig+0x1ec>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 0207 	bic.w	r2, r3, #7
 8002f5a:	4970      	ldr	r1, [pc, #448]	; (800311c <HAL_RCC_ClockConfig+0x1ec>)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	4b6e      	ldr	r3, [pc, #440]	; (800311c <HAL_RCC_ClockConfig+0x1ec>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0cf      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d010      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	4b66      	ldr	r3, [pc, #408]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d908      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b63      	ldr	r3, [pc, #396]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	4960      	ldr	r1, [pc, #384]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d04c      	beq.n	8003048 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb6:	4b5a      	ldr	r3, [pc, #360]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d121      	bne.n	8003006 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e0a6      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fce:	4b54      	ldr	r3, [pc, #336]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d115      	bne.n	8003006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e09a      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fe6:	4b4e      	ldr	r3, [pc, #312]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e08e      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff6:	4b4a      	ldr	r3, [pc, #296]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e086      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003006:	4b46      	ldr	r3, [pc, #280]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4943      	ldr	r1, [pc, #268]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003018:	f7fe fe18 	bl	8001c4c <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	e00a      	b.n	8003036 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7fe fe14 	bl	8001c4c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e06e      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b3a      	ldr	r3, [pc, #232]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 020c 	and.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1eb      	bne.n	8003020 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d010      	beq.n	8003076 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	4b31      	ldr	r3, [pc, #196]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003060:	429a      	cmp	r2, r3
 8003062:	d208      	bcs.n	8003076 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003064:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	492b      	ldr	r1, [pc, #172]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003076:	4b29      	ldr	r3, [pc, #164]	; (800311c <HAL_RCC_ClockConfig+0x1ec>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d210      	bcs.n	80030a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_RCC_ClockConfig+0x1ec>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 0207 	bic.w	r2, r3, #7
 800308c:	4923      	ldr	r1, [pc, #140]	; (800311c <HAL_RCC_ClockConfig+0x1ec>)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003094:	4b21      	ldr	r3, [pc, #132]	; (800311c <HAL_RCC_ClockConfig+0x1ec>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d001      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e036      	b.n	8003114 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	4918      	ldr	r1, [pc, #96]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d009      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4910      	ldr	r1, [pc, #64]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030e4:	f000 f824 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <HAL_RCC_ClockConfig+0x1f0>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	490b      	ldr	r1, [pc, #44]	; (8003124 <HAL_RCC_ClockConfig+0x1f4>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003100:	4a09      	ldr	r2, [pc, #36]	; (8003128 <HAL_RCC_ClockConfig+0x1f8>)
 8003102:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_RCC_ClockConfig+0x1fc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe fa1d 	bl	8001548 <HAL_InitTick>
 800310e:	4603      	mov	r3, r0
 8003110:	72fb      	strb	r3, [r7, #11]

  return status;
 8003112:	7afb      	ldrb	r3, [r7, #11]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40022000 	.word	0x40022000
 8003120:	40021000 	.word	0x40021000
 8003124:	0800cbb8 	.word	0x0800cbb8
 8003128:	20000000 	.word	0x20000000
 800312c:	20000004 	.word	0x20000004

08003130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	; 0x24
 8003134:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313e:	4b3e      	ldr	r3, [pc, #248]	; (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003148:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x34>
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	2b0c      	cmp	r3, #12
 800315c:	d121      	bne.n	80031a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d11e      	bne.n	80031a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003164:	4b34      	ldr	r3, [pc, #208]	; (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d107      	bne.n	8003180 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003170:	4b31      	ldr	r3, [pc, #196]	; (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 8003172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003176:	0a1b      	lsrs	r3, r3, #8
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	e005      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003180:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800318c:	4a2b      	ldr	r2, [pc, #172]	; (800323c <HAL_RCC_GetSysClockFreq+0x10c>)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003194:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10d      	bne.n	80031b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d102      	bne.n	80031ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031a8:	4b25      	ldr	r3, [pc, #148]	; (8003240 <HAL_RCC_GetSysClockFreq+0x110>)
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	e004      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031b4:	4b23      	ldr	r3, [pc, #140]	; (8003244 <HAL_RCC_GetSysClockFreq+0x114>)
 80031b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	d134      	bne.n	8003228 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031be:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d003      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0xac>
 80031d4:	e005      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031d6:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_RCC_GetSysClockFreq+0x110>)
 80031d8:	617b      	str	r3, [r7, #20]
      break;
 80031da:	e005      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031dc:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_RCC_GetSysClockFreq+0x114>)
 80031de:	617b      	str	r3, [r7, #20]
      break;
 80031e0:	e002      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	617b      	str	r3, [r7, #20]
      break;
 80031e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	3301      	adds	r3, #1
 80031f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	fb03 f202 	mul.w	r2, r3, r2
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <HAL_RCC_GetSysClockFreq+0x108>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	0e5b      	lsrs	r3, r3, #25
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	3301      	adds	r3, #1
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003228:	69bb      	ldr	r3, [r7, #24]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3724      	adds	r7, #36	; 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	0800cbd0 	.word	0x0800cbd0
 8003240:	00f42400 	.word	0x00f42400
 8003244:	007a1200 	.word	0x007a1200

08003248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <HAL_RCC_GetHCLKFreq+0x14>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000000 	.word	0x20000000

08003260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003264:	f7ff fff0 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	0a1b      	lsrs	r3, r3, #8
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4904      	ldr	r1, [pc, #16]	; (8003288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40021000 	.word	0x40021000
 8003288:	0800cbc8 	.word	0x0800cbc8

0800328c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003290:	f7ff ffda 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003294:	4602      	mov	r2, r0
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	0adb      	lsrs	r3, r3, #11
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	4904      	ldr	r1, [pc, #16]	; (80032b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000
 80032b4:	0800cbc8 	.word	0x0800cbc8

080032b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	220f      	movs	r2, #15
 80032c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80032c8:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_RCC_GetClockConfig+0x5c>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0203 	and.w	r2, r3, #3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <HAL_RCC_GetClockConfig+0x5c>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <HAL_RCC_GetClockConfig+0x5c>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <HAL_RCC_GetClockConfig+0x5c>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	08db      	lsrs	r3, r3, #3
 80032f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80032fa:	4b07      	ldr	r3, [pc, #28]	; (8003318 <HAL_RCC_GetClockConfig+0x60>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0207 	and.w	r2, r3, #7
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	601a      	str	r2, [r3, #0]
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
 8003318:	40022000 	.word	0x40022000

0800331c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003328:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003334:	f7ff f9bc 	bl	80026b0 <HAL_PWREx_GetVoltageRange>
 8003338:	6178      	str	r0, [r7, #20]
 800333a:	e014      	b.n	8003366 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800333c:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003346:	6593      	str	r3, [r2, #88]	; 0x58
 8003348:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003354:	f7ff f9ac 	bl	80026b0 <HAL_PWREx_GetVoltageRange>
 8003358:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800335a:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003364:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336c:	d10b      	bne.n	8003386 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b80      	cmp	r3, #128	; 0x80
 8003372:	d919      	bls.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2ba0      	cmp	r3, #160	; 0xa0
 8003378:	d902      	bls.n	8003380 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800337a:	2302      	movs	r3, #2
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	e013      	b.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003380:	2301      	movs	r3, #1
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	e010      	b.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b80      	cmp	r3, #128	; 0x80
 800338a:	d902      	bls.n	8003392 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800338c:	2303      	movs	r3, #3
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	e00a      	b.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b80      	cmp	r3, #128	; 0x80
 8003396:	d102      	bne.n	800339e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003398:	2302      	movs	r3, #2
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	e004      	b.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b70      	cmp	r3, #112	; 0x70
 80033a2:	d101      	bne.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033a4:	2301      	movs	r3, #1
 80033a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 0207 	bic.w	r2, r3, #7
 80033b0:	4909      	ldr	r1, [pc, #36]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033b8:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d001      	beq.n	80033ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40022000 	.word	0x40022000

080033dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033e4:	2300      	movs	r3, #0
 80033e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033e8:	2300      	movs	r3, #0
 80033ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d041      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003400:	d02a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003402:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003406:	d824      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003408:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800340c:	d008      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800340e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003412:	d81e      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341c:	d010      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800341e:	e018      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003420:	4b86      	ldr	r3, [pc, #536]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a85      	ldr	r2, [pc, #532]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800342c:	e015      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3304      	adds	r3, #4
 8003432:	2100      	movs	r1, #0
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fabb 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800343e:	e00c      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3320      	adds	r3, #32
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fba6 	bl	8003b98 <RCCEx_PLLSAI2_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003450:	e003      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	74fb      	strb	r3, [r7, #19]
      break;
 8003456:	e000      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800345a:	7cfb      	ldrb	r3, [r7, #19]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10b      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003460:	4b76      	ldr	r3, [pc, #472]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003466:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800346e:	4973      	ldr	r1, [pc, #460]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003476:	e001      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d041      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003490:	d02a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003492:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003496:	d824      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003498:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800349c:	d008      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800349e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034a2:	d81e      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80034a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ac:	d010      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034ae:	e018      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034b0:	4b62      	ldr	r3, [pc, #392]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a61      	ldr	r2, [pc, #388]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034bc:	e015      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fa73 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ce:	e00c      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3320      	adds	r3, #32
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fb5e 	bl	8003b98 <RCCEx_PLLSAI2_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034e0:	e003      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	74fb      	strb	r3, [r7, #19]
      break;
 80034e6:	e000      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80034e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034f0:	4b52      	ldr	r3, [pc, #328]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034fe:	494f      	ldr	r1, [pc, #316]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003506:	e001      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80a0 	beq.w	800365a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351a:	2300      	movs	r3, #0
 800351c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800351e:	4b47      	ldr	r3, [pc, #284]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800352e:	2300      	movs	r3, #0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00d      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003534:	4b41      	ldr	r3, [pc, #260]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	4a40      	ldr	r2, [pc, #256]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353e:	6593      	str	r3, [r2, #88]	; 0x58
 8003540:	4b3e      	ldr	r3, [pc, #248]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354c:	2301      	movs	r3, #1
 800354e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003550:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a3a      	ldr	r2, [pc, #232]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800355c:	f7fe fb76 	bl	8001c4c <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003562:	e009      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003564:	f7fe fb72 	bl	8001c4c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d902      	bls.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	74fb      	strb	r3, [r7, #19]
        break;
 8003576:	e005      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003578:	4b31      	ldr	r3, [pc, #196]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ef      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d15c      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800358a:	4b2c      	ldr	r3, [pc, #176]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003594:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01f      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d019      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035b4:	4b21      	ldr	r3, [pc, #132]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	4a20      	ldr	r2, [pc, #128]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	4a1c      	ldr	r2, [pc, #112]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035d4:	4a19      	ldr	r2, [pc, #100]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e6:	f7fe fb31 	bl	8001c4c <HAL_GetTick>
 80035ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ec:	e00b      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fe fb2d 	bl	8001c4c <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d902      	bls.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	74fb      	strb	r3, [r7, #19]
            break;
 8003604:	e006      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003606:	4b0d      	ldr	r3, [pc, #52]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0ec      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10c      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800361a:	4b08      	ldr	r3, [pc, #32]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800362a:	4904      	ldr	r1, [pc, #16]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003632:	e009      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	74bb      	strb	r3, [r7, #18]
 8003638:	e006      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003648:	7c7b      	ldrb	r3, [r7, #17]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d105      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364e:	4b9e      	ldr	r3, [pc, #632]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	4a9d      	ldr	r2, [pc, #628]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003658:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003666:	4b98      	ldr	r3, [pc, #608]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366c:	f023 0203 	bic.w	r2, r3, #3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	4994      	ldr	r1, [pc, #592]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003688:	4b8f      	ldr	r3, [pc, #572]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368e:	f023 020c 	bic.w	r2, r3, #12
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003696:	498c      	ldr	r1, [pc, #560]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036aa:	4b87      	ldr	r3, [pc, #540]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	4983      	ldr	r1, [pc, #524]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036cc:	4b7e      	ldr	r3, [pc, #504]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	497b      	ldr	r1, [pc, #492]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036ee:	4b76      	ldr	r3, [pc, #472]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fc:	4972      	ldr	r1, [pc, #456]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003710:	4b6d      	ldr	r3, [pc, #436]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371e:	496a      	ldr	r1, [pc, #424]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003732:	4b65      	ldr	r3, [pc, #404]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003738:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003740:	4961      	ldr	r1, [pc, #388]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003754:	4b5c      	ldr	r3, [pc, #368]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003762:	4959      	ldr	r1, [pc, #356]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003776:	4b54      	ldr	r3, [pc, #336]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003784:	4950      	ldr	r1, [pc, #320]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003798:	4b4b      	ldr	r3, [pc, #300]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	4948      	ldr	r1, [pc, #288]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ba:	4b43      	ldr	r3, [pc, #268]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	493f      	ldr	r1, [pc, #252]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d028      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037dc:	4b3a      	ldr	r3, [pc, #232]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ea:	4937      	ldr	r1, [pc, #220]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037fa:	d106      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037fc:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4a31      	ldr	r2, [pc, #196]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003806:	60d3      	str	r3, [r2, #12]
 8003808:	e011      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003812:	d10c      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	2101      	movs	r1, #1
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f8c8 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d028      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800383a:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003840:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	491f      	ldr	r1, [pc, #124]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003858:	d106      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800385a:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003864:	60d3      	str	r3, [r2, #12]
 8003866:	e011      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003870:	d10c      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3304      	adds	r3, #4
 8003876:	2101      	movs	r1, #1
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f899 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003888:	7cfb      	ldrb	r3, [r7, #19]
 800388a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02b      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a6:	4908      	ldr	r1, [pc, #32]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038b6:	d109      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4a02      	ldr	r2, [pc, #8]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038c2:	60d3      	str	r3, [r2, #12]
 80038c4:	e014      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	2101      	movs	r1, #1
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 f867 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038e6:	7cfb      	ldrb	r3, [r7, #19]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80038ec:	7cfb      	ldrb	r3, [r7, #19]
 80038ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d02f      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038fc:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800390a:	4928      	ldr	r1, [pc, #160]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800391a:	d10d      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	2102      	movs	r1, #2
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f844 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800392c:	7cfb      	ldrb	r3, [r7, #19]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d014      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003932:	7cfb      	ldrb	r3, [r7, #19]
 8003934:	74bb      	strb	r3, [r7, #18]
 8003936:	e011      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800393c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003940:	d10c      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3320      	adds	r3, #32
 8003946:	2102      	movs	r1, #2
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f925 	bl	8003b98 <RCCEx_PLLSAI2_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003952:	7cfb      	ldrb	r3, [r7, #19]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003968:	4b10      	ldr	r3, [pc, #64]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003976:	490d      	ldr	r1, [pc, #52]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800399a:	4904      	ldr	r1, [pc, #16]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000

080039b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039be:	4b75      	ldr	r3, [pc, #468]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d018      	beq.n	80039fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039ca:	4b72      	ldr	r3, [pc, #456]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0203 	and.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d10d      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
       ||
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039e2:	4b6c      	ldr	r3, [pc, #432]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
       ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d047      	beq.n	8003a86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
 80039fa:	e044      	b.n	8003a86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d018      	beq.n	8003a36 <RCCEx_PLLSAI1_Config+0x86>
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d825      	bhi.n	8003a54 <RCCEx_PLLSAI1_Config+0xa4>
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d002      	beq.n	8003a12 <RCCEx_PLLSAI1_Config+0x62>
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d009      	beq.n	8003a24 <RCCEx_PLLSAI1_Config+0x74>
 8003a10:	e020      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a12:	4b60      	ldr	r3, [pc, #384]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11d      	bne.n	8003a5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a22:	e01a      	b.n	8003a5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a24:	4b5b      	ldr	r3, [pc, #364]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d116      	bne.n	8003a5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a34:	e013      	b.n	8003a5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a36:	4b57      	ldr	r3, [pc, #348]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10f      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a42:	4b54      	ldr	r3, [pc, #336]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a52:	e006      	b.n	8003a62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      break;
 8003a58:	e004      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e002      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e000      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a62:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10d      	bne.n	8003a86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	4944      	ldr	r1, [pc, #272]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d17d      	bne.n	8003b88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a8c:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a40      	ldr	r2, [pc, #256]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a98:	f7fe f8d8 	bl	8001c4c <HAL_GetTick>
 8003a9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a9e:	e009      	b.n	8003ab4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aa0:	f7fe f8d4 	bl	8001c4c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d902      	bls.n	8003ab4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ab2:	e005      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ab4:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ef      	bne.n	8003aa0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d160      	bne.n	8003b88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d111      	bne.n	8003af0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003acc:	4b31      	ldr	r3, [pc, #196]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6892      	ldr	r2, [r2, #8]
 8003adc:	0211      	lsls	r1, r2, #8
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68d2      	ldr	r2, [r2, #12]
 8003ae2:	0912      	lsrs	r2, r2, #4
 8003ae4:	0452      	lsls	r2, r2, #17
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	492a      	ldr	r1, [pc, #168]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	610b      	str	r3, [r1, #16]
 8003aee:	e027      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d112      	bne.n	8003b1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003af6:	4b27      	ldr	r3, [pc, #156]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003afe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6892      	ldr	r2, [r2, #8]
 8003b06:	0211      	lsls	r1, r2, #8
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6912      	ldr	r2, [r2, #16]
 8003b0c:	0852      	lsrs	r2, r2, #1
 8003b0e:	3a01      	subs	r2, #1
 8003b10:	0552      	lsls	r2, r2, #21
 8003b12:	430a      	orrs	r2, r1
 8003b14:	491f      	ldr	r1, [pc, #124]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	610b      	str	r3, [r1, #16]
 8003b1a:	e011      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b1c:	4b1d      	ldr	r3, [pc, #116]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6892      	ldr	r2, [r2, #8]
 8003b2c:	0211      	lsls	r1, r2, #8
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6952      	ldr	r2, [r2, #20]
 8003b32:	0852      	lsrs	r2, r2, #1
 8003b34:	3a01      	subs	r2, #1
 8003b36:	0652      	lsls	r2, r2, #25
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	4916      	ldr	r1, [pc, #88]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b40:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fe f87e 	bl	8001c4c <HAL_GetTick>
 8003b50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b52:	e009      	b.n	8003b68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b54:	f7fe f87a 	bl	8001c4c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d902      	bls.n	8003b68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	73fb      	strb	r3, [r7, #15]
          break;
 8003b66:	e005      	b.n	8003b74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b68:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ef      	beq.n	8003b54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b7a:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	4904      	ldr	r1, [pc, #16]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000

08003b98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ba6:	4b6a      	ldr	r3, [pc, #424]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d018      	beq.n	8003be4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bb2:	4b67      	ldr	r3, [pc, #412]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0203 	and.w	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d10d      	bne.n	8003bde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
       ||
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bca:	4b61      	ldr	r3, [pc, #388]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
       ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d047      	beq.n	8003c6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
 8003be2:	e044      	b.n	8003c6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d018      	beq.n	8003c1e <RCCEx_PLLSAI2_Config+0x86>
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d825      	bhi.n	8003c3c <RCCEx_PLLSAI2_Config+0xa4>
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d002      	beq.n	8003bfa <RCCEx_PLLSAI2_Config+0x62>
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d009      	beq.n	8003c0c <RCCEx_PLLSAI2_Config+0x74>
 8003bf8:	e020      	b.n	8003c3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bfa:	4b55      	ldr	r3, [pc, #340]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d11d      	bne.n	8003c42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0a:	e01a      	b.n	8003c42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c0c:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d116      	bne.n	8003c46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c1c:	e013      	b.n	8003c46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c1e:	4b4c      	ldr	r3, [pc, #304]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c2a:	4b49      	ldr	r3, [pc, #292]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c3a:	e006      	b.n	8003c4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c40:	e004      	b.n	8003c4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c42:	bf00      	nop
 8003c44:	e002      	b.n	8003c4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c46:	bf00      	nop
 8003c48:	e000      	b.n	8003c4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10d      	bne.n	8003c6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c52:	4b3f      	ldr	r3, [pc, #252]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6819      	ldr	r1, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	430b      	orrs	r3, r1
 8003c68:	4939      	ldr	r1, [pc, #228]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d167      	bne.n	8003d44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a35      	ldr	r2, [pc, #212]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c80:	f7fd ffe4 	bl	8001c4c <HAL_GetTick>
 8003c84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c86:	e009      	b.n	8003c9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c88:	f7fd ffe0 	bl	8001c4c <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d902      	bls.n	8003c9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	73fb      	strb	r3, [r7, #15]
        break;
 8003c9a:	e005      	b.n	8003ca8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c9c:	4b2c      	ldr	r3, [pc, #176]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1ef      	bne.n	8003c88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d14a      	bne.n	8003d44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d111      	bne.n	8003cd8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cb4:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6892      	ldr	r2, [r2, #8]
 8003cc4:	0211      	lsls	r1, r2, #8
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68d2      	ldr	r2, [r2, #12]
 8003cca:	0912      	lsrs	r2, r2, #4
 8003ccc:	0452      	lsls	r2, r2, #17
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	491f      	ldr	r1, [pc, #124]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	614b      	str	r3, [r1, #20]
 8003cd6:	e011      	b.n	8003cfc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cd8:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ce0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6892      	ldr	r2, [r2, #8]
 8003ce8:	0211      	lsls	r1, r2, #8
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6912      	ldr	r2, [r2, #16]
 8003cee:	0852      	lsrs	r2, r2, #1
 8003cf0:	3a01      	subs	r2, #1
 8003cf2:	0652      	lsls	r2, r2, #25
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	4916      	ldr	r1, [pc, #88]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cfc:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a13      	ldr	r2, [pc, #76]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fd ffa0 	bl	8001c4c <HAL_GetTick>
 8003d0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d0e:	e009      	b.n	8003d24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d10:	f7fd ff9c 	bl	8001c4c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d902      	bls.n	8003d24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	73fb      	strb	r3, [r7, #15]
          break;
 8003d22:	e005      	b.n	8003d30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0ef      	beq.n	8003d10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	4904      	ldr	r1, [pc, #16]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000

08003d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e049      	b.n	8003dfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f841 	bl	8003e02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	f000 f9f8 	bl	8004188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d001      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e04f      	b.n	8003ed0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a23      	ldr	r2, [pc, #140]	; (8003edc <HAL_TIM_Base_Start_IT+0xc4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01d      	beq.n	8003e8e <HAL_TIM_Base_Start_IT+0x76>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5a:	d018      	beq.n	8003e8e <HAL_TIM_Base_Start_IT+0x76>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_TIM_Base_Start_IT+0x76>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00e      	beq.n	8003e8e <HAL_TIM_Base_Start_IT+0x76>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1c      	ldr	r2, [pc, #112]	; (8003ee8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d009      	beq.n	8003e8e <HAL_TIM_Base_Start_IT+0x76>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1b      	ldr	r2, [pc, #108]	; (8003eec <HAL_TIM_Base_Start_IT+0xd4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d004      	beq.n	8003e8e <HAL_TIM_Base_Start_IT+0x76>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a19      	ldr	r2, [pc, #100]	; (8003ef0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d115      	bne.n	8003eba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	4b17      	ldr	r3, [pc, #92]	; (8003ef4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b06      	cmp	r3, #6
 8003e9e:	d015      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0xb4>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea6:	d011      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb8:	e008      	b.n	8003ecc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0201 	orr.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e000      	b.n	8003ece <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ecc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40012c00 	.word	0x40012c00
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800
 8003ee8:	40000c00 	.word	0x40000c00
 8003eec:	40013400 	.word	0x40013400
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	00010007 	.word	0x00010007

08003ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d122      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d11b      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0202 	mvn.w	r2, #2
 8003f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f905 	bl	800414a <HAL_TIM_IC_CaptureCallback>
 8003f40:	e005      	b.n	8003f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f8f7 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f908 	bl	800415e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d122      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d11b      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0204 	mvn.w	r2, #4
 8003f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8db 	bl	800414a <HAL_TIM_IC_CaptureCallback>
 8003f94:	e005      	b.n	8003fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8cd 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f8de 	bl	800415e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d122      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d11b      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0208 	mvn.w	r2, #8
 8003fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8b1 	bl	800414a <HAL_TIM_IC_CaptureCallback>
 8003fe8:	e005      	b.n	8003ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8a3 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f8b4 	bl	800415e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b10      	cmp	r3, #16
 8004008:	d122      	bne.n	8004050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b10      	cmp	r3, #16
 8004016:	d11b      	bne.n	8004050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0210 	mvn.w	r2, #16
 8004020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2208      	movs	r2, #8
 8004026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f887 	bl	800414a <HAL_TIM_IC_CaptureCallback>
 800403c:	e005      	b.n	800404a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f879 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f88a 	bl	800415e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b01      	cmp	r3, #1
 800405c:	d10e      	bne.n	800407c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d107      	bne.n	800407c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0201 	mvn.w	r2, #1
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fd fa26 	bl	80014c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004086:	2b80      	cmp	r3, #128	; 0x80
 8004088:	d10e      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004094:	2b80      	cmp	r3, #128	; 0x80
 8004096:	d107      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f914 	bl	80042d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b6:	d10e      	bne.n	80040d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	2b80      	cmp	r3, #128	; 0x80
 80040c4:	d107      	bne.n	80040d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f907 	bl	80042e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d10e      	bne.n	8004102 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ee:	2b40      	cmp	r3, #64	; 0x40
 80040f0:	d107      	bne.n	8004102 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f838 	bl	8004172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b20      	cmp	r3, #32
 800410e:	d10e      	bne.n	800412e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b20      	cmp	r3, #32
 800411c:	d107      	bne.n	800412e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f06f 0220 	mvn.w	r2, #32
 8004126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f8c7 	bl	80042bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a40      	ldr	r2, [pc, #256]	; (800429c <TIM_Base_SetConfig+0x114>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a6:	d00f      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a3d      	ldr	r2, [pc, #244]	; (80042a0 <TIM_Base_SetConfig+0x118>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00b      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a3c      	ldr	r2, [pc, #240]	; (80042a4 <TIM_Base_SetConfig+0x11c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d007      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a3b      	ldr	r2, [pc, #236]	; (80042a8 <TIM_Base_SetConfig+0x120>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a3a      	ldr	r2, [pc, #232]	; (80042ac <TIM_Base_SetConfig+0x124>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d108      	bne.n	80041da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a2f      	ldr	r2, [pc, #188]	; (800429c <TIM_Base_SetConfig+0x114>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01f      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e8:	d01b      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a2c      	ldr	r2, [pc, #176]	; (80042a0 <TIM_Base_SetConfig+0x118>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d017      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a2b      	ldr	r2, [pc, #172]	; (80042a4 <TIM_Base_SetConfig+0x11c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a2a      	ldr	r2, [pc, #168]	; (80042a8 <TIM_Base_SetConfig+0x120>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00f      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a29      	ldr	r2, [pc, #164]	; (80042ac <TIM_Base_SetConfig+0x124>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00b      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a28      	ldr	r2, [pc, #160]	; (80042b0 <TIM_Base_SetConfig+0x128>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <TIM_Base_SetConfig+0x12c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a26      	ldr	r2, [pc, #152]	; (80042b8 <TIM_Base_SetConfig+0x130>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d108      	bne.n	8004234 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a10      	ldr	r2, [pc, #64]	; (800429c <TIM_Base_SetConfig+0x114>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00f      	beq.n	8004280 <TIM_Base_SetConfig+0xf8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a12      	ldr	r2, [pc, #72]	; (80042ac <TIM_Base_SetConfig+0x124>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00b      	beq.n	8004280 <TIM_Base_SetConfig+0xf8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a11      	ldr	r2, [pc, #68]	; (80042b0 <TIM_Base_SetConfig+0x128>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d007      	beq.n	8004280 <TIM_Base_SetConfig+0xf8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a10      	ldr	r2, [pc, #64]	; (80042b4 <TIM_Base_SetConfig+0x12c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <TIM_Base_SetConfig+0xf8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a0f      	ldr	r2, [pc, #60]	; (80042b8 <TIM_Base_SetConfig+0x130>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d103      	bne.n	8004288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	615a      	str	r2, [r3, #20]
}
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40012c00 	.word	0x40012c00
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800
 80042a8:	40000c00 	.word	0x40000c00
 80042ac:	40013400 	.word	0x40013400
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40014400 	.word	0x40014400
 80042b8:	40014800 	.word	0x40014800

080042bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e040      	b.n	800438c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fd fad4 	bl	80018c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2224      	movs	r2, #36	; 0x24
 8004324:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fbc8 	bl	8004acc <UART_SetConfig>
 800433c:	4603      	mov	r3, r0
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e022      	b.n	800438c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fe74 	bl	800503c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fefb 	bl	8005180 <UART_CheckIdleState>
 800438a:	4603      	mov	r3, r0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	; 0x28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	4613      	mov	r3, r2
 80043a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	d178      	bne.n	800449c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_UART_Transmit_DMA+0x22>
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e071      	b.n	800449e <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_UART_Transmit_DMA+0x34>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e06a      	b.n	800449e <HAL_UART_Transmit_DMA+0x10a>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	88fa      	ldrh	r2, [r7, #6]
 80043da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	88fa      	ldrh	r2, [r7, #6]
 80043e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2221      	movs	r2, #33	; 0x21
 80043f2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d02b      	beq.n	8004454 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004400:	4a29      	ldr	r2, [pc, #164]	; (80044a8 <HAL_UART_Transmit_DMA+0x114>)
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004408:	4a28      	ldr	r2, [pc, #160]	; (80044ac <HAL_UART_Transmit_DMA+0x118>)
 800440a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004410:	4a27      	ldr	r2, [pc, #156]	; (80044b0 <HAL_UART_Transmit_DMA+0x11c>)
 8004412:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004418:	2200      	movs	r2, #0
 800441a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004424:	4619      	mov	r1, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3328      	adds	r3, #40	; 0x28
 800442c:	461a      	mov	r2, r3
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	f7fd fdd6 	bl	8001fe0 <HAL_DMA_Start_IT>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2210      	movs	r2, #16
 800443e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e024      	b.n	800449e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2240      	movs	r2, #64	; 0x40
 800445a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3308      	adds	r3, #8
 800446a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	613b      	str	r3, [r7, #16]
   return(result);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3308      	adds	r3, #8
 8004482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004484:	623a      	str	r2, [r7, #32]
 8004486:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004488:	69f9      	ldr	r1, [r7, #28]
 800448a:	6a3a      	ldr	r2, [r7, #32]
 800448c:	e841 2300 	strex	r3, r2, [r1]
 8004490:	61bb      	str	r3, [r7, #24]
   return(result);
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e5      	bne.n	8004464 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	e000      	b.n	800449e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800449c:	2302      	movs	r3, #2
  }
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3728      	adds	r7, #40	; 0x28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	080054ad 	.word	0x080054ad
 80044ac:	08005547 	.word	0x08005547
 80044b0:	08005563 	.word	0x08005563

080044b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b0ba      	sub	sp, #232	; 0xe8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80044de:	f640 030f 	movw	r3, #2063	; 0x80f
 80044e2:	4013      	ands	r3, r2
 80044e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80044e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d115      	bne.n	800451c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00f      	beq.n	800451c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d009      	beq.n	800451c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 82a6 	beq.w	8004a5e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4798      	blx	r3
      }
      return;
 800451a:	e2a0      	b.n	8004a5e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800451c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8117 	beq.w	8004754 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004532:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004536:	4b85      	ldr	r3, [pc, #532]	; (800474c <HAL_UART_IRQHandler+0x298>)
 8004538:	4013      	ands	r3, r2
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 810a 	beq.w	8004754 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d011      	beq.n	8004570 <HAL_UART_IRQHandler+0xbc>
 800454c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00b      	beq.n	8004570 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2201      	movs	r2, #1
 800455e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004566:	f043 0201 	orr.w	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d011      	beq.n	80045a0 <HAL_UART_IRQHandler+0xec>
 800457c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00b      	beq.n	80045a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2202      	movs	r2, #2
 800458e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004596:	f043 0204 	orr.w	r2, r3, #4
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d011      	beq.n	80045d0 <HAL_UART_IRQHandler+0x11c>
 80045ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00b      	beq.n	80045d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2204      	movs	r2, #4
 80045be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045c6:	f043 0202 	orr.w	r2, r3, #2
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d017      	beq.n	800460c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e0:	f003 0320 	and.w	r3, r3, #32
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d105      	bne.n	80045f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00b      	beq.n	800460c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2208      	movs	r2, #8
 80045fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004602:	f043 0208 	orr.w	r2, r3, #8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800460c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004614:	2b00      	cmp	r3, #0
 8004616:	d012      	beq.n	800463e <HAL_UART_IRQHandler+0x18a>
 8004618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800461c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00c      	beq.n	800463e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800462c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 820c 	beq.w	8004a62 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800464a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00d      	beq.n	8004672 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004678:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004686:	2b40      	cmp	r3, #64	; 0x40
 8004688:	d005      	beq.n	8004696 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800468a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800468e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004692:	2b00      	cmp	r3, #0
 8004694:	d04f      	beq.n	8004736 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fea5 	bl	80053e6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d141      	bne.n	800472e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3308      	adds	r3, #8
 80046b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3308      	adds	r3, #8
 80046d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1d9      	bne.n	80046aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d013      	beq.n	8004726 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	4a13      	ldr	r2, [pc, #76]	; (8004750 <HAL_UART_IRQHandler+0x29c>)
 8004704:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	4618      	mov	r0, r3
 800470c:	f7fd fd06 	bl	800211c <HAL_DMA_Abort_IT>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d017      	beq.n	8004746 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004720:	4610      	mov	r0, r2
 8004722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004724:	e00f      	b.n	8004746 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f9ba 	bl	8004aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472c:	e00b      	b.n	8004746 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f9b6 	bl	8004aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004734:	e007      	b.n	8004746 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f9b2 	bl	8004aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004744:	e18d      	b.n	8004a62 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004746:	bf00      	nop
    return;
 8004748:	e18b      	b.n	8004a62 <HAL_UART_IRQHandler+0x5ae>
 800474a:	bf00      	nop
 800474c:	04000120 	.word	0x04000120
 8004750:	080055df 	.word	0x080055df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004758:	2b01      	cmp	r3, #1
 800475a:	f040 8146 	bne.w	80049ea <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 813f 	beq.w	80049ea <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8138 	beq.w	80049ea <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2210      	movs	r2, #16
 8004780:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	f040 80b4 	bne.w	80048fa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800479e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 815f 	beq.w	8004a66 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047b2:	429a      	cmp	r2, r3
 80047b4:	f080 8157 	bcs.w	8004a66 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f040 8085 	bne.w	80048de <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004802:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800480a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004816:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1da      	bne.n	80047d4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3308      	adds	r3, #8
 8004824:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800482e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3308      	adds	r3, #8
 800483e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004842:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004846:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800484a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e1      	bne.n	800481e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3308      	adds	r3, #8
 8004860:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800486a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004870:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3308      	adds	r3, #8
 800487a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800487e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004880:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004884:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800488c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e3      	bne.n	800485a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ae:	f023 0310 	bic.w	r3, r3, #16
 80048b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80048c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e4      	bne.n	800489e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fd fbe1 	bl	80020a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	4619      	mov	r1, r3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f8de 	bl	8004ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048f8:	e0b5      	b.n	8004a66 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004906:	b29b      	uxth	r3, r3
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80a7 	beq.w	8004a6a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800491c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 80a2 	beq.w	8004a6a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004936:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800493a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004948:	647b      	str	r3, [r7, #68]	; 0x44
 800494a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800494e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e4      	bne.n	8004926 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3308      	adds	r3, #8
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	623b      	str	r3, [r7, #32]
   return(result);
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3308      	adds	r3, #8
 800497c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004980:	633a      	str	r2, [r7, #48]	; 0x30
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e3      	bne.n	800495c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0310 	bic.w	r3, r3, #16
 80049ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	69b9      	ldr	r1, [r7, #24]
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	617b      	str	r3, [r7, #20]
   return(result);
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e4      	bne.n	80049a6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f866 	bl	8004ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049e8:	e03f      	b.n	8004a6a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00e      	beq.n	8004a14 <HAL_UART_IRQHandler+0x560>
 80049f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d008      	beq.n	8004a14 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fe26 	bl	800565e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a12:	e02d      	b.n	8004a70 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00e      	beq.n	8004a3e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d008      	beq.n	8004a3e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01c      	beq.n	8004a6e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
    }
    return;
 8004a3c:	e017      	b.n	8004a6e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d012      	beq.n	8004a70 <HAL_UART_IRQHandler+0x5bc>
 8004a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00c      	beq.n	8004a70 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fdd7 	bl	800560a <UART_EndTransmit_IT>
    return;
 8004a5c:	e008      	b.n	8004a70 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a5e:	bf00      	nop
 8004a60:	e006      	b.n	8004a70 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004a62:	bf00      	nop
 8004a64:	e004      	b.n	8004a70 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a66:	bf00      	nop
 8004a68:	e002      	b.n	8004a70 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a6a:	bf00      	nop
 8004a6c:	e000      	b.n	8004a70 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004a6e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a70:	37e8      	adds	r7, #232	; 0xe8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop

08004a78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad0:	b08a      	sub	sp, #40	; 0x28
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4ba4      	ldr	r3, [pc, #656]	; (8004d8c <UART_SetConfig+0x2c0>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a99      	ldr	r2, [pc, #612]	; (8004d90 <UART_SetConfig+0x2c4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b34:	4313      	orrs	r3, r2
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a90      	ldr	r2, [pc, #576]	; (8004d94 <UART_SetConfig+0x2c8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d126      	bne.n	8004ba4 <UART_SetConfig+0xd8>
 8004b56:	4b90      	ldr	r3, [pc, #576]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d81b      	bhi.n	8004b9c <UART_SetConfig+0xd0>
 8004b64:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <UART_SetConfig+0xa0>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004b7d 	.word	0x08004b7d
 8004b70:	08004b8d 	.word	0x08004b8d
 8004b74:	08004b85 	.word	0x08004b85
 8004b78:	08004b95 	.word	0x08004b95
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b82:	e116      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004b84:	2302      	movs	r3, #2
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8a:	e112      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b92:	e10e      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004b94:	2308      	movs	r3, #8
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9a:	e10a      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e106      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a7c      	ldr	r2, [pc, #496]	; (8004d9c <UART_SetConfig+0x2d0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d138      	bne.n	8004c20 <UART_SetConfig+0x154>
 8004bae:	4b7a      	ldr	r3, [pc, #488]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb4:	f003 030c 	and.w	r3, r3, #12
 8004bb8:	2b0c      	cmp	r3, #12
 8004bba:	d82d      	bhi.n	8004c18 <UART_SetConfig+0x14c>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <UART_SetConfig+0xf8>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004c19 	.word	0x08004c19
 8004bcc:	08004c19 	.word	0x08004c19
 8004bd0:	08004c19 	.word	0x08004c19
 8004bd4:	08004c09 	.word	0x08004c09
 8004bd8:	08004c19 	.word	0x08004c19
 8004bdc:	08004c19 	.word	0x08004c19
 8004be0:	08004c19 	.word	0x08004c19
 8004be4:	08004c01 	.word	0x08004c01
 8004be8:	08004c19 	.word	0x08004c19
 8004bec:	08004c19 	.word	0x08004c19
 8004bf0:	08004c19 	.word	0x08004c19
 8004bf4:	08004c11 	.word	0x08004c11
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfe:	e0d8      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c00:	2302      	movs	r3, #2
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c06:	e0d4      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0e:	e0d0      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c10:	2308      	movs	r3, #8
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c16:	e0cc      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1e:	e0c8      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5e      	ldr	r2, [pc, #376]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d125      	bne.n	8004c76 <UART_SetConfig+0x1aa>
 8004c2a:	4b5b      	ldr	r3, [pc, #364]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c34:	2b30      	cmp	r3, #48	; 0x30
 8004c36:	d016      	beq.n	8004c66 <UART_SetConfig+0x19a>
 8004c38:	2b30      	cmp	r3, #48	; 0x30
 8004c3a:	d818      	bhi.n	8004c6e <UART_SetConfig+0x1a2>
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d00a      	beq.n	8004c56 <UART_SetConfig+0x18a>
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d814      	bhi.n	8004c6e <UART_SetConfig+0x1a2>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <UART_SetConfig+0x182>
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d008      	beq.n	8004c5e <UART_SetConfig+0x192>
 8004c4c:	e00f      	b.n	8004c6e <UART_SetConfig+0x1a2>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c54:	e0ad      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c56:	2302      	movs	r3, #2
 8004c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5c:	e0a9      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c5e:	2304      	movs	r3, #4
 8004c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c64:	e0a5      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c66:	2308      	movs	r3, #8
 8004c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6c:	e0a1      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c6e:	2310      	movs	r3, #16
 8004c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c74:	e09d      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a4a      	ldr	r2, [pc, #296]	; (8004da4 <UART_SetConfig+0x2d8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d125      	bne.n	8004ccc <UART_SetConfig+0x200>
 8004c80:	4b45      	ldr	r3, [pc, #276]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c8c:	d016      	beq.n	8004cbc <UART_SetConfig+0x1f0>
 8004c8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c90:	d818      	bhi.n	8004cc4 <UART_SetConfig+0x1f8>
 8004c92:	2b80      	cmp	r3, #128	; 0x80
 8004c94:	d00a      	beq.n	8004cac <UART_SetConfig+0x1e0>
 8004c96:	2b80      	cmp	r3, #128	; 0x80
 8004c98:	d814      	bhi.n	8004cc4 <UART_SetConfig+0x1f8>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <UART_SetConfig+0x1d8>
 8004c9e:	2b40      	cmp	r3, #64	; 0x40
 8004ca0:	d008      	beq.n	8004cb4 <UART_SetConfig+0x1e8>
 8004ca2:	e00f      	b.n	8004cc4 <UART_SetConfig+0x1f8>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004caa:	e082      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004cac:	2302      	movs	r3, #2
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb2:	e07e      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cba:	e07a      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004cbc:	2308      	movs	r3, #8
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e076      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e072      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a35      	ldr	r2, [pc, #212]	; (8004da8 <UART_SetConfig+0x2dc>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d12a      	bne.n	8004d2c <UART_SetConfig+0x260>
 8004cd6:	4b30      	ldr	r3, [pc, #192]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ce4:	d01a      	beq.n	8004d1c <UART_SetConfig+0x250>
 8004ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cea:	d81b      	bhi.n	8004d24 <UART_SetConfig+0x258>
 8004cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf0:	d00c      	beq.n	8004d0c <UART_SetConfig+0x240>
 8004cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf6:	d815      	bhi.n	8004d24 <UART_SetConfig+0x258>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <UART_SetConfig+0x238>
 8004cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d00:	d008      	beq.n	8004d14 <UART_SetConfig+0x248>
 8004d02:	e00f      	b.n	8004d24 <UART_SetConfig+0x258>
 8004d04:	2300      	movs	r3, #0
 8004d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0a:	e052      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d12:	e04e      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d14:	2304      	movs	r3, #4
 8004d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1a:	e04a      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d22:	e046      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d24:	2310      	movs	r3, #16
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2a:	e042      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <UART_SetConfig+0x2c4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d13a      	bne.n	8004dac <UART_SetConfig+0x2e0>
 8004d36:	4b18      	ldr	r3, [pc, #96]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d44:	d01a      	beq.n	8004d7c <UART_SetConfig+0x2b0>
 8004d46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d4a:	d81b      	bhi.n	8004d84 <UART_SetConfig+0x2b8>
 8004d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d50:	d00c      	beq.n	8004d6c <UART_SetConfig+0x2a0>
 8004d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d56:	d815      	bhi.n	8004d84 <UART_SetConfig+0x2b8>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <UART_SetConfig+0x298>
 8004d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d60:	d008      	beq.n	8004d74 <UART_SetConfig+0x2a8>
 8004d62:	e00f      	b.n	8004d84 <UART_SetConfig+0x2b8>
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6a:	e022      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d72:	e01e      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d74:	2304      	movs	r3, #4
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7a:	e01a      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d7c:	2308      	movs	r3, #8
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d82:	e016      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d84:	2310      	movs	r3, #16
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e012      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d8c:	efff69f3 	.word	0xefff69f3
 8004d90:	40008000 	.word	0x40008000
 8004d94:	40013800 	.word	0x40013800
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40004400 	.word	0x40004400
 8004da0:	40004800 	.word	0x40004800
 8004da4:	40004c00 	.word	0x40004c00
 8004da8:	40005000 	.word	0x40005000
 8004dac:	2310      	movs	r3, #16
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a9f      	ldr	r2, [pc, #636]	; (8005034 <UART_SetConfig+0x568>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d17a      	bne.n	8004eb2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d824      	bhi.n	8004e0e <UART_SetConfig+0x342>
 8004dc4:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <UART_SetConfig+0x300>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004df1 	.word	0x08004df1
 8004dd0:	08004e0f 	.word	0x08004e0f
 8004dd4:	08004df9 	.word	0x08004df9
 8004dd8:	08004e0f 	.word	0x08004e0f
 8004ddc:	08004dff 	.word	0x08004dff
 8004de0:	08004e0f 	.word	0x08004e0f
 8004de4:	08004e0f 	.word	0x08004e0f
 8004de8:	08004e0f 	.word	0x08004e0f
 8004dec:	08004e07 	.word	0x08004e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df0:	f7fe fa36 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 8004df4:	61f8      	str	r0, [r7, #28]
        break;
 8004df6:	e010      	b.n	8004e1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df8:	4b8f      	ldr	r3, [pc, #572]	; (8005038 <UART_SetConfig+0x56c>)
 8004dfa:	61fb      	str	r3, [r7, #28]
        break;
 8004dfc:	e00d      	b.n	8004e1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfe:	f7fe f997 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 8004e02:	61f8      	str	r0, [r7, #28]
        break;
 8004e04:	e009      	b.n	8004e1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0a:	61fb      	str	r3, [r7, #28]
        break;
 8004e0c:	e005      	b.n	8004e1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 80fb 	beq.w	8005018 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d305      	bcc.n	8004e3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d903      	bls.n	8004e46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e44:	e0e8      	b.n	8005018 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	461c      	mov	r4, r3
 8004e4c:	4615      	mov	r5, r2
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	022b      	lsls	r3, r5, #8
 8004e58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e5c:	0222      	lsls	r2, r4, #8
 8004e5e:	68f9      	ldr	r1, [r7, #12]
 8004e60:	6849      	ldr	r1, [r1, #4]
 8004e62:	0849      	lsrs	r1, r1, #1
 8004e64:	2000      	movs	r0, #0
 8004e66:	4688      	mov	r8, r1
 8004e68:	4681      	mov	r9, r0
 8004e6a:	eb12 0a08 	adds.w	sl, r2, r8
 8004e6e:	eb43 0b09 	adc.w	fp, r3, r9
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	603b      	str	r3, [r7, #0]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e80:	4650      	mov	r0, sl
 8004e82:	4659      	mov	r1, fp
 8004e84:	f7fb ff00 	bl	8000c88 <__aeabi_uldivmod>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e96:	d308      	bcc.n	8004eaa <UART_SetConfig+0x3de>
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9e:	d204      	bcs.n	8004eaa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	60da      	str	r2, [r3, #12]
 8004ea8:	e0b6      	b.n	8005018 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004eb0:	e0b2      	b.n	8005018 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eba:	d15e      	bne.n	8004f7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d828      	bhi.n	8004f16 <UART_SetConfig+0x44a>
 8004ec4:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <UART_SetConfig+0x400>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004ef1 	.word	0x08004ef1
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004f01 	.word	0x08004f01
 8004ed8:	08004f17 	.word	0x08004f17
 8004edc:	08004f07 	.word	0x08004f07
 8004ee0:	08004f17 	.word	0x08004f17
 8004ee4:	08004f17 	.word	0x08004f17
 8004ee8:	08004f17 	.word	0x08004f17
 8004eec:	08004f0f 	.word	0x08004f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef0:	f7fe f9b6 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 8004ef4:	61f8      	str	r0, [r7, #28]
        break;
 8004ef6:	e014      	b.n	8004f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef8:	f7fe f9c8 	bl	800328c <HAL_RCC_GetPCLK2Freq>
 8004efc:	61f8      	str	r0, [r7, #28]
        break;
 8004efe:	e010      	b.n	8004f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f00:	4b4d      	ldr	r3, [pc, #308]	; (8005038 <UART_SetConfig+0x56c>)
 8004f02:	61fb      	str	r3, [r7, #28]
        break;
 8004f04:	e00d      	b.n	8004f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f06:	f7fe f913 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 8004f0a:	61f8      	str	r0, [r7, #28]
        break;
 8004f0c:	e009      	b.n	8004f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f12:	61fb      	str	r3, [r7, #28]
        break;
 8004f14:	e005      	b.n	8004f22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d077      	beq.n	8005018 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	005a      	lsls	r2, r3, #1
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	085b      	lsrs	r3, r3, #1
 8004f32:	441a      	add	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b0f      	cmp	r3, #15
 8004f42:	d916      	bls.n	8004f72 <UART_SetConfig+0x4a6>
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4a:	d212      	bcs.n	8004f72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f023 030f 	bic.w	r3, r3, #15
 8004f54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	085b      	lsrs	r3, r3, #1
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	8afb      	ldrh	r3, [r7, #22]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	8afa      	ldrh	r2, [r7, #22]
 8004f6e:	60da      	str	r2, [r3, #12]
 8004f70:	e052      	b.n	8005018 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f78:	e04e      	b.n	8005018 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d827      	bhi.n	8004fd2 <UART_SetConfig+0x506>
 8004f82:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <UART_SetConfig+0x4bc>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	08004fbd 	.word	0x08004fbd
 8004f94:	08004fd3 	.word	0x08004fd3
 8004f98:	08004fc3 	.word	0x08004fc3
 8004f9c:	08004fd3 	.word	0x08004fd3
 8004fa0:	08004fd3 	.word	0x08004fd3
 8004fa4:	08004fd3 	.word	0x08004fd3
 8004fa8:	08004fcb 	.word	0x08004fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fac:	f7fe f958 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 8004fb0:	61f8      	str	r0, [r7, #28]
        break;
 8004fb2:	e014      	b.n	8004fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb4:	f7fe f96a 	bl	800328c <HAL_RCC_GetPCLK2Freq>
 8004fb8:	61f8      	str	r0, [r7, #28]
        break;
 8004fba:	e010      	b.n	8004fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fbc:	4b1e      	ldr	r3, [pc, #120]	; (8005038 <UART_SetConfig+0x56c>)
 8004fbe:	61fb      	str	r3, [r7, #28]
        break;
 8004fc0:	e00d      	b.n	8004fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fc2:	f7fe f8b5 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 8004fc6:	61f8      	str	r0, [r7, #28]
        break;
 8004fc8:	e009      	b.n	8004fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fce:	61fb      	str	r3, [r7, #28]
        break;
 8004fd0:	e005      	b.n	8004fde <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fdc:	bf00      	nop
    }

    if (pclk != 0U)
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d019      	beq.n	8005018 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	085a      	lsrs	r2, r3, #1
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	441a      	add	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b0f      	cmp	r3, #15
 8004ffc:	d909      	bls.n	8005012 <UART_SetConfig+0x546>
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005004:	d205      	bcs.n	8005012 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60da      	str	r2, [r3, #12]
 8005010:	e002      	b.n	8005018 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005024:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005028:	4618      	mov	r0, r3
 800502a:	3728      	adds	r7, #40	; 0x28
 800502c:	46bd      	mov	sp, r7
 800502e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005032:	bf00      	nop
 8005034:	40008000 	.word	0x40008000
 8005038:	00f42400 	.word	0x00f42400

0800503c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01a      	beq.n	8005152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800513a:	d10a      	bne.n	8005152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	605a      	str	r2, [r3, #4]
  }
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af02      	add	r7, sp, #8
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005190:	f7fc fd5c 	bl	8001c4c <HAL_GetTick>
 8005194:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d10e      	bne.n	80051c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f82d 	bl	8005212 <UART_WaitOnFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e023      	b.n	800520a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d10e      	bne.n	80051ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f817 	bl	8005212 <UART_WaitOnFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e00d      	b.n	800520a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b09c      	sub	sp, #112	; 0x70
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	603b      	str	r3, [r7, #0]
 800521e:	4613      	mov	r3, r2
 8005220:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005222:	e0a5      	b.n	8005370 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522a:	f000 80a1 	beq.w	8005370 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522e:	f7fc fd0d 	bl	8001c4c <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800523a:	429a      	cmp	r2, r3
 800523c:	d302      	bcc.n	8005244 <UART_WaitOnFlagUntilTimeout+0x32>
 800523e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005240:	2b00      	cmp	r3, #0
 8005242:	d13e      	bne.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005254:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005258:	667b      	str	r3, [r7, #100]	; 0x64
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005264:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005268:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e6      	bne.n	8005244 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3308      	adds	r3, #8
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	f023 0301 	bic.w	r3, r3, #1
 800528c:	663b      	str	r3, [r7, #96]	; 0x60
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3308      	adds	r3, #8
 8005294:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005296:	64ba      	str	r2, [r7, #72]	; 0x48
 8005298:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800529c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e5      	bne.n	8005276 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e067      	b.n	8005392 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d04f      	beq.n	8005370 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052de:	d147      	bne.n	8005370 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	461a      	mov	r2, r3
 8005306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
 800530a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800530e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e6      	bne.n	80052ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3308      	adds	r3, #8
 8005322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	e853 3f00 	ldrex	r3, [r3]
 800532a:	613b      	str	r3, [r7, #16]
   return(result);
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f023 0301 	bic.w	r3, r3, #1
 8005332:	66bb      	str	r3, [r7, #104]	; 0x68
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3308      	adds	r3, #8
 800533a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800533c:	623a      	str	r2, [r7, #32]
 800533e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	69f9      	ldr	r1, [r7, #28]
 8005342:	6a3a      	ldr	r2, [r7, #32]
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	61bb      	str	r3, [r7, #24]
   return(result);
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e5      	bne.n	800531c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e010      	b.n	8005392 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69da      	ldr	r2, [r3, #28]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4013      	ands	r3, r2
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	429a      	cmp	r2, r3
 800537e:	bf0c      	ite	eq
 8005380:	2301      	moveq	r3, #1
 8005382:	2300      	movne	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	429a      	cmp	r2, r3
 800538c:	f43f af4a 	beq.w	8005224 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3770      	adds	r7, #112	; 0x70
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800539a:	b480      	push	{r7}
 800539c:	b089      	sub	sp, #36	; 0x24
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	e853 3f00 	ldrex	r3, [r3]
 80053ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053b6:	61fb      	str	r3, [r7, #28]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6979      	ldr	r1, [r7, #20]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	613b      	str	r3, [r7, #16]
   return(result);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e6      	bne.n	80053a2 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	679a      	str	r2, [r3, #120]	; 0x78
}
 80053da:	bf00      	nop
 80053dc:	3724      	adds	r7, #36	; 0x24
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b095      	sub	sp, #84	; 0x54
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540c:	643b      	str	r3, [r7, #64]	; 0x40
 800540e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e6      	bne.n	80053ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3308      	adds	r3, #8
 8005426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f023 0301 	bic.w	r3, r3, #1
 8005436:	64bb      	str	r3, [r7, #72]	; 0x48
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3308      	adds	r3, #8
 800543e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005440:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e5      	bne.n	8005420 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005458:	2b01      	cmp	r3, #1
 800545a:	d118      	bne.n	800548e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	60bb      	str	r3, [r7, #8]
   return(result);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f023 0310 	bic.w	r3, r3, #16
 8005470:	647b      	str	r3, [r7, #68]	; 0x44
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800547a:	61bb      	str	r3, [r7, #24]
 800547c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6979      	ldr	r1, [r7, #20]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	613b      	str	r3, [r7, #16]
   return(result);
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e6      	bne.n	800545c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	665a      	str	r2, [r3, #100]	; 0x64
}
 80054a0:	bf00      	nop
 80054a2:	3754      	adds	r7, #84	; 0x54
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b090      	sub	sp, #64	; 0x40
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d137      	bne.n	8005538 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80054c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80054d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3308      	adds	r3, #8
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	623b      	str	r3, [r7, #32]
   return(result);
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3308      	adds	r3, #8
 80054ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f0:	633a      	str	r2, [r7, #48]	; 0x30
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e5      	bne.n	80054d0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	60fb      	str	r3, [r7, #12]
   return(result);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
 800551a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	69b9      	ldr	r1, [r7, #24]
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	617b      	str	r3, [r7, #20]
   return(result);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e6      	bne.n	8005504 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005536:	e002      	b.n	800553e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005538:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800553a:	f7ff fa9d 	bl	8004a78 <HAL_UART_TxCpltCallback>
}
 800553e:	bf00      	nop
 8005540:	3740      	adds	r7, #64	; 0x40
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005552:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f7ff fa99 	bl	8004a8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800555a:	bf00      	nop
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005574:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800557a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	d109      	bne.n	800559e <UART_DMAError+0x3c>
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b21      	cmp	r3, #33	; 0x21
 800558e:	d106      	bne.n	800559e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2200      	movs	r2, #0
 8005594:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005598:	6978      	ldr	r0, [r7, #20]
 800559a:	f7ff fefe 	bl	800539a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a8:	2b40      	cmp	r3, #64	; 0x40
 80055aa:	d109      	bne.n	80055c0 <UART_DMAError+0x5e>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b22      	cmp	r3, #34	; 0x22
 80055b0:	d106      	bne.n	80055c0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80055ba:	6978      	ldr	r0, [r7, #20]
 80055bc:	f7ff ff13 	bl	80053e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c6:	f043 0210 	orr.w	r2, r3, #16
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055d0:	6978      	ldr	r0, [r7, #20]
 80055d2:	f7ff fa65 	bl	8004aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d6:	bf00      	nop
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f7ff fa4f 	bl	8004aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005602:	bf00      	nop
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b088      	sub	sp, #32
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005626:	61fb      	str	r3, [r7, #28]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6979      	ldr	r1, [r7, #20]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	613b      	str	r3, [r7, #16]
   return(result);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e6      	bne.n	8005612 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff fa11 	bl	8004a78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005656:	bf00      	nop
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	4603      	mov	r3, r0
 800567a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005684:	2b84      	cmp	r3, #132	; 0x84
 8005686:	d005      	beq.n	8005694 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005688:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	3303      	adds	r3, #3
 8005692:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005694:	68fb      	ldr	r3, [r7, #12]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80056a6:	f001 f817 	bl	80066d8 <vTaskStartScheduler>
  
  return osOK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80056b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056b2:	b089      	sub	sp, #36	; 0x24
 80056b4:	af04      	add	r7, sp, #16
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d020      	beq.n	8005704 <osThreadCreate+0x54>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01c      	beq.n	8005704 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685c      	ldr	r4, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681d      	ldr	r5, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691e      	ldr	r6, [r3, #16]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff ffc8 	bl	8005672 <makeFreeRtosPriority>
 80056e2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056ec:	9202      	str	r2, [sp, #8]
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	9100      	str	r1, [sp, #0]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	4632      	mov	r2, r6
 80056f6:	4629      	mov	r1, r5
 80056f8:	4620      	mov	r0, r4
 80056fa:	f000 fe0f 	bl	800631c <xTaskCreateStatic>
 80056fe:	4603      	mov	r3, r0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	e01c      	b.n	800573e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685c      	ldr	r4, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005710:	b29e      	uxth	r6, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff ffaa 	bl	8005672 <makeFreeRtosPriority>
 800571e:	4602      	mov	r2, r0
 8005720:	f107 030c 	add.w	r3, r7, #12
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	9200      	str	r2, [sp, #0]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	4632      	mov	r2, r6
 800572c:	4629      	mov	r1, r5
 800572e:	4620      	mov	r0, r4
 8005730:	f000 fe51 	bl	80063d6 <xTaskCreate>
 8005734:	4603      	mov	r3, r0
 8005736:	2b01      	cmp	r3, #1
 8005738:	d001      	beq.n	800573e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	e000      	b.n	8005740 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800573e:	68fb      	ldr	r3, [r7, #12]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005748 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <osDelay+0x16>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	e000      	b.n	8005760 <osDelay+0x18>
 800575e:	2301      	movs	r3, #1
 8005760:	4618      	mov	r0, r3
 8005762:	f000 ff85 	bl	8006670 <vTaskDelay>
  
  return osOK;
 8005766:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f103 0208 	add.w	r2, r3, #8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f04f 32ff 	mov.w	r2, #4294967295
 8005788:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f103 0208 	add.w	r2, r3, #8
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f103 0208 	add.w	r2, r3, #8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	601a      	str	r2, [r3, #0]
}
 8005806:	bf00      	nop
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005812:	b480      	push	{r7}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d103      	bne.n	8005832 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	e00c      	b.n	800584c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3308      	adds	r3, #8
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	e002      	b.n	8005840 <vListInsert+0x2e>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	429a      	cmp	r2, r3
 800584a:	d2f6      	bcs.n	800583a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	601a      	str	r2, [r3, #0]
}
 8005878:	bf00      	nop
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6892      	ldr	r2, [r2, #8]
 800589a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6852      	ldr	r2, [r2, #4]
 80058a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d103      	bne.n	80058b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	1e5a      	subs	r2, r3, #1
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005902:	f002 f8bf 	bl	8007a84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590e:	68f9      	ldr	r1, [r7, #12]
 8005910:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005912:	fb01 f303 	mul.w	r3, r1, r3
 8005916:	441a      	add	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	3b01      	subs	r3, #1
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005938:	fb01 f303 	mul.w	r3, r1, r3
 800593c:	441a      	add	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	22ff      	movs	r2, #255	; 0xff
 8005946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	22ff      	movs	r2, #255	; 0xff
 800594e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d114      	bne.n	8005982 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01a      	beq.n	8005996 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3310      	adds	r3, #16
 8005964:	4618      	mov	r0, r3
 8005966:	f001 f94b 	bl	8006c00 <xTaskRemoveFromEventList>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d012      	beq.n	8005996 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005970:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <xQueueGenericReset+0xcc>)
 8005972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	e009      	b.n	8005996 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3310      	adds	r3, #16
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fef2 	bl	8005770 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3324      	adds	r3, #36	; 0x24
 8005990:	4618      	mov	r0, r3
 8005992:	f7ff feed 	bl	8005770 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005996:	f002 f8a5 	bl	8007ae4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800599a:	2301      	movs	r3, #1
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	e000ed04 	.word	0xe000ed04

080059a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08e      	sub	sp, #56	; 0x38
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <xQueueGenericCreateStatic+0x52>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <xQueueGenericCreateStatic+0x56>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <xQueueGenericCreateStatic+0x58>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	623b      	str	r3, [r7, #32]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <xQueueGenericCreateStatic+0x7e>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <xQueueGenericCreateStatic+0x82>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <xQueueGenericCreateStatic+0x84>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	61fb      	str	r3, [r7, #28]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a46:	2348      	movs	r3, #72	; 0x48
 8005a48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b48      	cmp	r3, #72	; 0x48
 8005a4e:	d00a      	beq.n	8005a66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	61bb      	str	r3, [r7, #24]
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00d      	beq.n	8005a8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	4613      	mov	r3, r2
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 f83f 	bl	8005b0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3730      	adds	r7, #48	; 0x30
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	; 0x28
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	613b      	str	r3, [r7, #16]
}
 8005abe:	bf00      	nop
 8005ac0:	e7fe      	b.n	8005ac0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	fb02 f303 	mul.w	r3, r2, r3
 8005aca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	3348      	adds	r3, #72	; 0x48
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f002 f8f9 	bl	8007cc8 <pvPortMalloc>
 8005ad6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d011      	beq.n	8005b02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	3348      	adds	r3, #72	; 0x48
 8005ae6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005af0:	79fa      	ldrb	r2, [r7, #7]
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	4613      	mov	r3, r2
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 f805 	bl	8005b0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b02:	69bb      	ldr	r3, [r7, #24]
	}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3720      	adds	r7, #32
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d103      	bne.n	8005b28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	e002      	b.n	8005b2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	69b8      	ldr	r0, [r7, #24]
 8005b3e:	f7ff fecb 	bl	80058d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b42:	bf00      	nop
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08e      	sub	sp, #56	; 0x38
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <xQueueGenericSend+0x32>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <xQueueGenericSend+0x40>
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <xQueueGenericSend+0x44>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e000      	b.n	8005b92 <xQueueGenericSend+0x46>
 8005b90:	2300      	movs	r3, #0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <xQueueGenericSend+0x60>
	__asm volatile
 8005b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ba8:	bf00      	nop
 8005baa:	e7fe      	b.n	8005baa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d103      	bne.n	8005bba <xQueueGenericSend+0x6e>
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <xQueueGenericSend+0x72>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <xQueueGenericSend+0x74>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <xQueueGenericSend+0x8e>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	623b      	str	r3, [r7, #32]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bda:	f001 f9d1 	bl	8006f80 <xTaskGetSchedulerState>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <xQueueGenericSend+0x9e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <xQueueGenericSend+0xa2>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <xQueueGenericSend+0xa4>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10a      	bne.n	8005c0a <xQueueGenericSend+0xbe>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	61fb      	str	r3, [r7, #28]
}
 8005c06:	bf00      	nop
 8005c08:	e7fe      	b.n	8005c08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c0a:	f001 ff3b 	bl	8007a84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d302      	bcc.n	8005c20 <xQueueGenericSend+0xd4>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d129      	bne.n	8005c74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c26:	f000 fa0b 	bl	8006040 <prvCopyDataToQueue>
 8005c2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d010      	beq.n	8005c56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	3324      	adds	r3, #36	; 0x24
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 ffe1 	bl	8006c00 <xTaskRemoveFromEventList>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d013      	beq.n	8005c6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c44:	4b3f      	ldr	r3, [pc, #252]	; (8005d44 <xQueueGenericSend+0x1f8>)
 8005c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	e00a      	b.n	8005c6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c5c:	4b39      	ldr	r3, [pc, #228]	; (8005d44 <xQueueGenericSend+0x1f8>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c6c:	f001 ff3a 	bl	8007ae4 <vPortExitCritical>
				return pdPASS;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e063      	b.n	8005d3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c7a:	f001 ff33 	bl	8007ae4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e05c      	b.n	8005d3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d106      	bne.n	8005c96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c88:	f107 0314 	add.w	r3, r7, #20
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 f819 	bl	8006cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c92:	2301      	movs	r3, #1
 8005c94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c96:	f001 ff25 	bl	8007ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c9a:	f000 fd8d 	bl	80067b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c9e:	f001 fef1 	bl	8007a84 <vPortEnterCritical>
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ca8:	b25b      	sxtb	r3, r3
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d103      	bne.n	8005cb8 <xQueueGenericSend+0x16c>
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cbe:	b25b      	sxtb	r3, r3
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc4:	d103      	bne.n	8005cce <xQueueGenericSend+0x182>
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cce:	f001 ff09 	bl	8007ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cd2:	1d3a      	adds	r2, r7, #4
 8005cd4:	f107 0314 	add.w	r3, r7, #20
 8005cd8:	4611      	mov	r1, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 f808 	bl	8006cf0 <xTaskCheckForTimeOut>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d124      	bne.n	8005d30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ce8:	f000 faa2 	bl	8006230 <prvIsQueueFull>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d018      	beq.n	8005d24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	3310      	adds	r3, #16
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 ff30 	bl	8006b60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d02:	f000 fa2d 	bl	8006160 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d06:	f000 fd65 	bl	80067d4 <xTaskResumeAll>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f47f af7c 	bne.w	8005c0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d12:	4b0c      	ldr	r3, [pc, #48]	; (8005d44 <xQueueGenericSend+0x1f8>)
 8005d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	e772      	b.n	8005c0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d26:	f000 fa1b 	bl	8006160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d2a:	f000 fd53 	bl	80067d4 <xTaskResumeAll>
 8005d2e:	e76c      	b.n	8005c0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d32:	f000 fa15 	bl	8006160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d36:	f000 fd4d 	bl	80067d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3738      	adds	r7, #56	; 0x38
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b090      	sub	sp, #64	; 0x40
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d103      	bne.n	8005d84 <xQueueGenericSendFromISR+0x3c>
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <xQueueGenericSendFromISR+0x40>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <xQueueGenericSendFromISR+0x42>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d103      	bne.n	8005db2 <xQueueGenericSendFromISR+0x6a>
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <xQueueGenericSendFromISR+0x6e>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <xQueueGenericSendFromISR+0x70>
 8005db6:	2300      	movs	r3, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	623b      	str	r3, [r7, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dd2:	f001 ff39 	bl	8007c48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005dd6:	f3ef 8211 	mrs	r2, BASEPRI
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	61fa      	str	r2, [r7, #28]
 8005dec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005dee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005df0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d302      	bcc.n	8005e04 <xQueueGenericSendFromISR+0xbc>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d12f      	bne.n	8005e64 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e12:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e1a:	f000 f911 	bl	8006040 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e26:	d112      	bne.n	8005e4e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d016      	beq.n	8005e5e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e32:	3324      	adds	r3, #36	; 0x24
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fee3 	bl	8006c00 <xTaskRemoveFromEventList>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00e      	beq.n	8005e5e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00b      	beq.n	8005e5e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	e007      	b.n	8005e5e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e52:	3301      	adds	r3, #1
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	b25a      	sxtb	r2, r3
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005e62:	e001      	b.n	8005e68 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3740      	adds	r7, #64	; 0x40
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08c      	sub	sp, #48	; 0x30
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <xQueueReceive+0x30>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	623b      	str	r3, [r7, #32]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d103      	bne.n	8005ebe <xQueueReceive+0x3e>
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <xQueueReceive+0x42>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <xQueueReceive+0x44>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <xQueueReceive+0x5e>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	61fb      	str	r3, [r7, #28]
}
 8005eda:	bf00      	nop
 8005edc:	e7fe      	b.n	8005edc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ede:	f001 f84f 	bl	8006f80 <xTaskGetSchedulerState>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <xQueueReceive+0x6e>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <xQueueReceive+0x72>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <xQueueReceive+0x74>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <xQueueReceive+0x8e>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	61bb      	str	r3, [r7, #24]
}
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f0e:	f001 fdb9 	bl	8007a84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01f      	beq.n	8005f5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f22:	f000 f8f7 	bl	8006114 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	1e5a      	subs	r2, r3, #1
 8005f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00f      	beq.n	8005f56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	3310      	adds	r3, #16
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fe60 	bl	8006c00 <xTaskRemoveFromEventList>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f46:	4b3d      	ldr	r3, [pc, #244]	; (800603c <xQueueReceive+0x1bc>)
 8005f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f56:	f001 fdc5 	bl	8007ae4 <vPortExitCritical>
				return pdPASS;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e069      	b.n	8006032 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d103      	bne.n	8005f6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f64:	f001 fdbe 	bl	8007ae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e062      	b.n	8006032 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f72:	f107 0310 	add.w	r3, r7, #16
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fea4 	bl	8006cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f80:	f001 fdb0 	bl	8007ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f84:	f000 fc18 	bl	80067b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f88:	f001 fd7c 	bl	8007a84 <vPortEnterCritical>
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f92:	b25b      	sxtb	r3, r3
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d103      	bne.n	8005fa2 <xQueueReceive+0x122>
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fa8:	b25b      	sxtb	r3, r3
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d103      	bne.n	8005fb8 <xQueueReceive+0x138>
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fb8:	f001 fd94 	bl	8007ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fbc:	1d3a      	adds	r2, r7, #4
 8005fbe:	f107 0310 	add.w	r3, r7, #16
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 fe93 	bl	8006cf0 <xTaskCheckForTimeOut>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d123      	bne.n	8006018 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fd2:	f000 f917 	bl	8006204 <prvIsQueueEmpty>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d017      	beq.n	800600c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fde:	3324      	adds	r3, #36	; 0x24
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fdbb 	bl	8006b60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fec:	f000 f8b8 	bl	8006160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ff0:	f000 fbf0 	bl	80067d4 <xTaskResumeAll>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d189      	bne.n	8005f0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005ffa:	4b10      	ldr	r3, [pc, #64]	; (800603c <xQueueReceive+0x1bc>)
 8005ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	e780      	b.n	8005f0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800600c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800600e:	f000 f8a7 	bl	8006160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006012:	f000 fbdf 	bl	80067d4 <xTaskResumeAll>
 8006016:	e77a      	b.n	8005f0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800601a:	f000 f8a1 	bl	8006160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800601e:	f000 fbd9 	bl	80067d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006024:	f000 f8ee 	bl	8006204 <prvIsQueueEmpty>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	f43f af6f 	beq.w	8005f0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006030:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006032:	4618      	mov	r0, r3
 8006034:	3730      	adds	r7, #48	; 0x30
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	e000ed04 	.word	0xe000ed04

08006040 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800604c:	2300      	movs	r3, #0
 800604e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10d      	bne.n	800607a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d14d      	bne.n	8006102 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 ffa6 	bl	8006fbc <xTaskPriorityDisinherit>
 8006070:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	609a      	str	r2, [r3, #8]
 8006078:	e043      	b.n	8006102 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d119      	bne.n	80060b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6858      	ldr	r0, [r3, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	461a      	mov	r2, r3
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	f002 f929 	bl	80082e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	441a      	add	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d32b      	bcc.n	8006102 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	605a      	str	r2, [r3, #4]
 80060b2:	e026      	b.n	8006102 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	68d8      	ldr	r0, [r3, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	461a      	mov	r2, r3
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	f002 f90f 	bl	80082e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	425b      	negs	r3, r3
 80060ce:	441a      	add	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d207      	bcs.n	80060f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e8:	425b      	negs	r3, r3
 80060ea:	441a      	add	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d105      	bne.n	8006102 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	3b01      	subs	r3, #1
 8006100:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800610a:	697b      	ldr	r3, [r7, #20]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d018      	beq.n	8006158 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	441a      	add	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	429a      	cmp	r2, r3
 800613e:	d303      	bcc.n	8006148 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68d9      	ldr	r1, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	461a      	mov	r2, r3
 8006152:	6838      	ldr	r0, [r7, #0]
 8006154:	f002 f8c5 	bl	80082e2 <memcpy>
	}
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006168:	f001 fc8c 	bl	8007a84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006172:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006174:	e011      	b.n	800619a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	2b00      	cmp	r3, #0
 800617c:	d012      	beq.n	80061a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3324      	adds	r3, #36	; 0x24
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fd3c 	bl	8006c00 <xTaskRemoveFromEventList>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800618e:	f000 fe11 	bl	8006db4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	3b01      	subs	r3, #1
 8006196:	b2db      	uxtb	r3, r3
 8006198:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800619a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	dce9      	bgt.n	8006176 <prvUnlockQueue+0x16>
 80061a2:	e000      	b.n	80061a6 <prvUnlockQueue+0x46>
					break;
 80061a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	22ff      	movs	r2, #255	; 0xff
 80061aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061ae:	f001 fc99 	bl	8007ae4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061b2:	f001 fc67 	bl	8007a84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061be:	e011      	b.n	80061e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d012      	beq.n	80061ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3310      	adds	r3, #16
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fd17 	bl	8006c00 <xTaskRemoveFromEventList>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061d8:	f000 fdec 	bl	8006db4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061dc:	7bbb      	ldrb	r3, [r7, #14]
 80061de:	3b01      	subs	r3, #1
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	dce9      	bgt.n	80061c0 <prvUnlockQueue+0x60>
 80061ec:	e000      	b.n	80061f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	22ff      	movs	r2, #255	; 0xff
 80061f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061f8:	f001 fc74 	bl	8007ae4 <vPortExitCritical>
}
 80061fc:	bf00      	nop
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800620c:	f001 fc3a 	bl	8007a84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006218:	2301      	movs	r3, #1
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	e001      	b.n	8006222 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006222:	f001 fc5f 	bl	8007ae4 <vPortExitCritical>

	return xReturn;
 8006226:	68fb      	ldr	r3, [r7, #12]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006238:	f001 fc24 	bl	8007a84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006244:	429a      	cmp	r2, r3
 8006246:	d102      	bne.n	800624e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006248:	2301      	movs	r3, #1
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	e001      	b.n	8006252 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006252:	f001 fc47 	bl	8007ae4 <vPortExitCritical>

	return xReturn;
 8006256:	68fb      	ldr	r3, [r7, #12]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	e014      	b.n	800629a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006270:	4a0f      	ldr	r2, [pc, #60]	; (80062b0 <vQueueAddToRegistry+0x50>)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10b      	bne.n	8006294 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800627c:	490c      	ldr	r1, [pc, #48]	; (80062b0 <vQueueAddToRegistry+0x50>)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006286:	4a0a      	ldr	r2, [pc, #40]	; (80062b0 <vQueueAddToRegistry+0x50>)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	4413      	add	r3, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006292:	e006      	b.n	80062a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b07      	cmp	r3, #7
 800629e:	d9e7      	bls.n	8006270 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	20000bfc 	.word	0x20000bfc

080062b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062c4:	f001 fbde 	bl	8007a84 <vPortEnterCritical>
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062ce:	b25b      	sxtb	r3, r3
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d4:	d103      	bne.n	80062de <vQueueWaitForMessageRestricted+0x2a>
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062e4:	b25b      	sxtb	r3, r3
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d103      	bne.n	80062f4 <vQueueWaitForMessageRestricted+0x40>
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062f4:	f001 fbf6 	bl	8007ae4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d106      	bne.n	800630e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	3324      	adds	r3, #36	; 0x24
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	68b9      	ldr	r1, [r7, #8]
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fc4d 	bl	8006ba8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800630e:	6978      	ldr	r0, [r7, #20]
 8006310:	f7ff ff26 	bl	8006160 <prvUnlockQueue>
	}
 8006314:	bf00      	nop
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08e      	sub	sp, #56	; 0x38
 8006320:	af04      	add	r7, sp, #16
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800632a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	623b      	str	r3, [r7, #32]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10a      	bne.n	8006362 <xTaskCreateStatic+0x46>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	61fb      	str	r3, [r7, #28]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006362:	23b4      	movs	r3, #180	; 0xb4
 8006364:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	2bb4      	cmp	r3, #180	; 0xb4
 800636a:	d00a      	beq.n	8006382 <xTaskCreateStatic+0x66>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	61bb      	str	r3, [r7, #24]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006382:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	2b00      	cmp	r3, #0
 8006388:	d01e      	beq.n	80063c8 <xTaskCreateStatic+0xac>
 800638a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01b      	beq.n	80063c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006398:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	2202      	movs	r2, #2
 800639e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063a2:	2300      	movs	r3, #0
 80063a4:	9303      	str	r3, [sp, #12]
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	9302      	str	r3, [sp, #8]
 80063aa:	f107 0314 	add.w	r3, r7, #20
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f850 	bl	8006460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063c2:	f000 f8eb 	bl	800659c <prvAddNewTaskToReadyList>
 80063c6:	e001      	b.n	80063cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063cc:	697b      	ldr	r3, [r7, #20]
	}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3728      	adds	r7, #40	; 0x28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b08c      	sub	sp, #48	; 0x30
 80063da:	af04      	add	r7, sp, #16
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	603b      	str	r3, [r7, #0]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063e6:	88fb      	ldrh	r3, [r7, #6]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 fc6c 	bl	8007cc8 <pvPortMalloc>
 80063f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00e      	beq.n	8006416 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063f8:	20b4      	movs	r0, #180	; 0xb4
 80063fa:	f001 fc65 	bl	8007cc8 <pvPortMalloc>
 80063fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
 800640c:	e005      	b.n	800641a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800640e:	6978      	ldr	r0, [r7, #20]
 8006410:	f001 fd26 	bl	8007e60 <vPortFree>
 8006414:	e001      	b.n	800641a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d017      	beq.n	8006450 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006428:	88fa      	ldrh	r2, [r7, #6]
 800642a:	2300      	movs	r3, #0
 800642c:	9303      	str	r3, [sp, #12]
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	9302      	str	r3, [sp, #8]
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 f80e 	bl	8006460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006444:	69f8      	ldr	r0, [r7, #28]
 8006446:	f000 f8a9 	bl	800659c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800644a:	2301      	movs	r3, #1
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	e002      	b.n	8006456 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006450:	f04f 33ff 	mov.w	r3, #4294967295
 8006454:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006456:	69bb      	ldr	r3, [r7, #24]
	}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006478:	3b01      	subs	r3, #1
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f023 0307 	bic.w	r3, r3, #7
 8006486:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	617b      	str	r3, [r7, #20]
}
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d01f      	beq.n	80064ee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	e012      	b.n	80064da <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	7819      	ldrb	r1, [r3, #0]
 80064bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	3334      	adds	r3, #52	; 0x34
 80064c4:	460a      	mov	r2, r1
 80064c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d006      	beq.n	80064e2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	3301      	adds	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	2b0f      	cmp	r3, #15
 80064de:	d9e9      	bls.n	80064b4 <prvInitialiseNewTask+0x54>
 80064e0:	e000      	b.n	80064e4 <prvInitialiseNewTask+0x84>
			{
				break;
 80064e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064ec:	e003      	b.n	80064f6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	2b06      	cmp	r3, #6
 80064fa:	d901      	bls.n	8006500 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064fc:	2306      	movs	r3, #6
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006504:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800650a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	2200      	movs	r2, #0
 8006510:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	3304      	adds	r3, #4
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff f94a 	bl	80057b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	3318      	adds	r3, #24
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff f945 	bl	80057b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	f1c3 0207 	rsb	r2, r3, #7
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800653a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	2200      	movs	r2, #0
 8006540:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	2200      	movs	r2, #0
 8006548:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	334c      	adds	r3, #76	; 0x4c
 8006550:	2260      	movs	r2, #96	; 0x60
 8006552:	2100      	movs	r1, #0
 8006554:	4618      	mov	r0, r3
 8006556:	f001 fed2 	bl	80082fe <memset>
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	4a0c      	ldr	r2, [pc, #48]	; (8006590 <prvInitialiseNewTask+0x130>)
 800655e:	651a      	str	r2, [r3, #80]	; 0x50
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	4a0c      	ldr	r2, [pc, #48]	; (8006594 <prvInitialiseNewTask+0x134>)
 8006564:	655a      	str	r2, [r3, #84]	; 0x54
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	4a0b      	ldr	r2, [pc, #44]	; (8006598 <prvInitialiseNewTask+0x138>)
 800656a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	68f9      	ldr	r1, [r7, #12]
 8006570:	69b8      	ldr	r0, [r7, #24]
 8006572:	f001 f95d 	bl	8007830 <pxPortInitialiseStack>
 8006576:	4602      	mov	r2, r0
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006586:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006588:	bf00      	nop
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	0800cc20 	.word	0x0800cc20
 8006594:	0800cc40 	.word	0x0800cc40
 8006598:	0800cc00 	.word	0x0800cc00

0800659c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065a4:	f001 fa6e 	bl	8007a84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065a8:	4b2a      	ldr	r3, [pc, #168]	; (8006654 <prvAddNewTaskToReadyList+0xb8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3301      	adds	r3, #1
 80065ae:	4a29      	ldr	r2, [pc, #164]	; (8006654 <prvAddNewTaskToReadyList+0xb8>)
 80065b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065b2:	4b29      	ldr	r3, [pc, #164]	; (8006658 <prvAddNewTaskToReadyList+0xbc>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065ba:	4a27      	ldr	r2, [pc, #156]	; (8006658 <prvAddNewTaskToReadyList+0xbc>)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065c0:	4b24      	ldr	r3, [pc, #144]	; (8006654 <prvAddNewTaskToReadyList+0xb8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d110      	bne.n	80065ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065c8:	f000 fc18 	bl	8006dfc <prvInitialiseTaskLists>
 80065cc:	e00d      	b.n	80065ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065ce:	4b23      	ldr	r3, [pc, #140]	; (800665c <prvAddNewTaskToReadyList+0xc0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d109      	bne.n	80065ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065d6:	4b20      	ldr	r3, [pc, #128]	; (8006658 <prvAddNewTaskToReadyList+0xbc>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d802      	bhi.n	80065ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065e4:	4a1c      	ldr	r2, [pc, #112]	; (8006658 <prvAddNewTaskToReadyList+0xbc>)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065ea:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <prvAddNewTaskToReadyList+0xc4>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3301      	adds	r3, #1
 80065f0:	4a1b      	ldr	r2, [pc, #108]	; (8006660 <prvAddNewTaskToReadyList+0xc4>)
 80065f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	2201      	movs	r2, #1
 80065fa:	409a      	lsls	r2, r3
 80065fc:	4b19      	ldr	r3, [pc, #100]	; (8006664 <prvAddNewTaskToReadyList+0xc8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4313      	orrs	r3, r2
 8006602:	4a18      	ldr	r2, [pc, #96]	; (8006664 <prvAddNewTaskToReadyList+0xc8>)
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4a15      	ldr	r2, [pc, #84]	; (8006668 <prvAddNewTaskToReadyList+0xcc>)
 8006614:	441a      	add	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3304      	adds	r3, #4
 800661a:	4619      	mov	r1, r3
 800661c:	4610      	mov	r0, r2
 800661e:	f7ff f8d4 	bl	80057ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006622:	f001 fa5f 	bl	8007ae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006626:	4b0d      	ldr	r3, [pc, #52]	; (800665c <prvAddNewTaskToReadyList+0xc0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800662e:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <prvAddNewTaskToReadyList+0xbc>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	429a      	cmp	r2, r3
 800663a:	d207      	bcs.n	800664c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800663c:	4b0b      	ldr	r3, [pc, #44]	; (800666c <prvAddNewTaskToReadyList+0xd0>)
 800663e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20000d3c 	.word	0x20000d3c
 8006658:	20000c3c 	.word	0x20000c3c
 800665c:	20000d48 	.word	0x20000d48
 8006660:	20000d58 	.word	0x20000d58
 8006664:	20000d44 	.word	0x20000d44
 8006668:	20000c40 	.word	0x20000c40
 800666c:	e000ed04 	.word	0xe000ed04

08006670 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006678:	2300      	movs	r3, #0
 800667a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d017      	beq.n	80066b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006682:	4b13      	ldr	r3, [pc, #76]	; (80066d0 <vTaskDelay+0x60>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00a      	beq.n	80066a0 <vTaskDelay+0x30>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	60bb      	str	r3, [r7, #8]
}
 800669c:	bf00      	nop
 800669e:	e7fe      	b.n	800669e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066a0:	f000 f88a 	bl	80067b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066a4:	2100      	movs	r1, #0
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fd0e 	bl	80070c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066ac:	f000 f892 	bl	80067d4 <xTaskResumeAll>
 80066b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d107      	bne.n	80066c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80066b8:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <vTaskDelay+0x64>)
 80066ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066c8:	bf00      	nop
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	20000d64 	.word	0x20000d64
 80066d4:	e000ed04 	.word	0xe000ed04

080066d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	; 0x28
 80066dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066de:	2300      	movs	r3, #0
 80066e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066e6:	463a      	mov	r2, r7
 80066e8:	1d39      	adds	r1, r7, #4
 80066ea:	f107 0308 	add.w	r3, r7, #8
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fa fca8 	bl	8001044 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	9202      	str	r2, [sp, #8]
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	2300      	movs	r3, #0
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	2300      	movs	r3, #0
 8006704:	460a      	mov	r2, r1
 8006706:	4924      	ldr	r1, [pc, #144]	; (8006798 <vTaskStartScheduler+0xc0>)
 8006708:	4824      	ldr	r0, [pc, #144]	; (800679c <vTaskStartScheduler+0xc4>)
 800670a:	f7ff fe07 	bl	800631c <xTaskCreateStatic>
 800670e:	4603      	mov	r3, r0
 8006710:	4a23      	ldr	r2, [pc, #140]	; (80067a0 <vTaskStartScheduler+0xc8>)
 8006712:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006714:	4b22      	ldr	r3, [pc, #136]	; (80067a0 <vTaskStartScheduler+0xc8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800671c:	2301      	movs	r3, #1
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	e001      	b.n	8006726 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006722:	2300      	movs	r3, #0
 8006724:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d102      	bne.n	8006732 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800672c:	f000 fd32 	bl	8007194 <xTimerCreateTimerTask>
 8006730:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d11b      	bne.n	8006770 <vTaskStartScheduler+0x98>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	613b      	str	r3, [r7, #16]
}
 800674a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800674c:	4b15      	ldr	r3, [pc, #84]	; (80067a4 <vTaskStartScheduler+0xcc>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	334c      	adds	r3, #76	; 0x4c
 8006752:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <vTaskStartScheduler+0xd0>)
 8006754:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006756:	4b15      	ldr	r3, [pc, #84]	; (80067ac <vTaskStartScheduler+0xd4>)
 8006758:	f04f 32ff 	mov.w	r2, #4294967295
 800675c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800675e:	4b14      	ldr	r3, [pc, #80]	; (80067b0 <vTaskStartScheduler+0xd8>)
 8006760:	2201      	movs	r2, #1
 8006762:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006764:	4b13      	ldr	r3, [pc, #76]	; (80067b4 <vTaskStartScheduler+0xdc>)
 8006766:	2200      	movs	r2, #0
 8006768:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800676a:	f001 f8e9 	bl	8007940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800676e:	e00e      	b.n	800678e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d10a      	bne.n	800678e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	60fb      	str	r3, [r7, #12]
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <vTaskStartScheduler+0xb4>
}
 800678e:	bf00      	nop
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	0800cba0 	.word	0x0800cba0
 800679c:	08006dcd 	.word	0x08006dcd
 80067a0:	20000d60 	.word	0x20000d60
 80067a4:	20000c3c 	.word	0x20000c3c
 80067a8:	20000010 	.word	0x20000010
 80067ac:	20000d5c 	.word	0x20000d5c
 80067b0:	20000d48 	.word	0x20000d48
 80067b4:	20000d40 	.word	0x20000d40

080067b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067bc:	4b04      	ldr	r3, [pc, #16]	; (80067d0 <vTaskSuspendAll+0x18>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3301      	adds	r3, #1
 80067c2:	4a03      	ldr	r2, [pc, #12]	; (80067d0 <vTaskSuspendAll+0x18>)
 80067c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80067c6:	bf00      	nop
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	20000d64 	.word	0x20000d64

080067d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067de:	2300      	movs	r3, #0
 80067e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067e2:	4b41      	ldr	r3, [pc, #260]	; (80068e8 <xTaskResumeAll+0x114>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10a      	bne.n	8006800 <xTaskResumeAll+0x2c>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	603b      	str	r3, [r7, #0]
}
 80067fc:	bf00      	nop
 80067fe:	e7fe      	b.n	80067fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006800:	f001 f940 	bl	8007a84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006804:	4b38      	ldr	r3, [pc, #224]	; (80068e8 <xTaskResumeAll+0x114>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3b01      	subs	r3, #1
 800680a:	4a37      	ldr	r2, [pc, #220]	; (80068e8 <xTaskResumeAll+0x114>)
 800680c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800680e:	4b36      	ldr	r3, [pc, #216]	; (80068e8 <xTaskResumeAll+0x114>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d161      	bne.n	80068da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006816:	4b35      	ldr	r3, [pc, #212]	; (80068ec <xTaskResumeAll+0x118>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d05d      	beq.n	80068da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800681e:	e02e      	b.n	800687e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006820:	4b33      	ldr	r3, [pc, #204]	; (80068f0 <xTaskResumeAll+0x11c>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3318      	adds	r3, #24
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff f829 	bl	8005884 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3304      	adds	r3, #4
 8006836:	4618      	mov	r0, r3
 8006838:	f7ff f824 	bl	8005884 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	2201      	movs	r2, #1
 8006842:	409a      	lsls	r2, r3
 8006844:	4b2b      	ldr	r3, [pc, #172]	; (80068f4 <xTaskResumeAll+0x120>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4313      	orrs	r3, r2
 800684a:	4a2a      	ldr	r2, [pc, #168]	; (80068f4 <xTaskResumeAll+0x120>)
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006852:	4613      	mov	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4a27      	ldr	r2, [pc, #156]	; (80068f8 <xTaskResumeAll+0x124>)
 800685c:	441a      	add	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3304      	adds	r3, #4
 8006862:	4619      	mov	r1, r3
 8006864:	4610      	mov	r0, r2
 8006866:	f7fe ffb0 	bl	80057ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686e:	4b23      	ldr	r3, [pc, #140]	; (80068fc <xTaskResumeAll+0x128>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	429a      	cmp	r2, r3
 8006876:	d302      	bcc.n	800687e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006878:	4b21      	ldr	r3, [pc, #132]	; (8006900 <xTaskResumeAll+0x12c>)
 800687a:	2201      	movs	r2, #1
 800687c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800687e:	4b1c      	ldr	r3, [pc, #112]	; (80068f0 <xTaskResumeAll+0x11c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1cc      	bne.n	8006820 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800688c:	f000 fb58 	bl	8006f40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006890:	4b1c      	ldr	r3, [pc, #112]	; (8006904 <xTaskResumeAll+0x130>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d010      	beq.n	80068be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800689c:	f000 f846 	bl	800692c <xTaskIncrementTick>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80068a6:	4b16      	ldr	r3, [pc, #88]	; (8006900 <xTaskResumeAll+0x12c>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1f1      	bne.n	800689c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80068b8:	4b12      	ldr	r3, [pc, #72]	; (8006904 <xTaskResumeAll+0x130>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068be:	4b10      	ldr	r3, [pc, #64]	; (8006900 <xTaskResumeAll+0x12c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068c6:	2301      	movs	r3, #1
 80068c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068ca:	4b0f      	ldr	r3, [pc, #60]	; (8006908 <xTaskResumeAll+0x134>)
 80068cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068da:	f001 f903 	bl	8007ae4 <vPortExitCritical>

	return xAlreadyYielded;
 80068de:	68bb      	ldr	r3, [r7, #8]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20000d64 	.word	0x20000d64
 80068ec:	20000d3c 	.word	0x20000d3c
 80068f0:	20000cfc 	.word	0x20000cfc
 80068f4:	20000d44 	.word	0x20000d44
 80068f8:	20000c40 	.word	0x20000c40
 80068fc:	20000c3c 	.word	0x20000c3c
 8006900:	20000d50 	.word	0x20000d50
 8006904:	20000d4c 	.word	0x20000d4c
 8006908:	e000ed04 	.word	0xe000ed04

0800690c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006912:	4b05      	ldr	r3, [pc, #20]	; (8006928 <xTaskGetTickCount+0x1c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006918:	687b      	ldr	r3, [r7, #4]
}
 800691a:	4618      	mov	r0, r3
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20000d40 	.word	0x20000d40

0800692c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006932:	2300      	movs	r3, #0
 8006934:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006936:	4b4e      	ldr	r3, [pc, #312]	; (8006a70 <xTaskIncrementTick+0x144>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	f040 808e 	bne.w	8006a5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006940:	4b4c      	ldr	r3, [pc, #304]	; (8006a74 <xTaskIncrementTick+0x148>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3301      	adds	r3, #1
 8006946:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006948:	4a4a      	ldr	r2, [pc, #296]	; (8006a74 <xTaskIncrementTick+0x148>)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d120      	bne.n	8006996 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006954:	4b48      	ldr	r3, [pc, #288]	; (8006a78 <xTaskIncrementTick+0x14c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <xTaskIncrementTick+0x48>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	603b      	str	r3, [r7, #0]
}
 8006970:	bf00      	nop
 8006972:	e7fe      	b.n	8006972 <xTaskIncrementTick+0x46>
 8006974:	4b40      	ldr	r3, [pc, #256]	; (8006a78 <xTaskIncrementTick+0x14c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	4b40      	ldr	r3, [pc, #256]	; (8006a7c <xTaskIncrementTick+0x150>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a3e      	ldr	r2, [pc, #248]	; (8006a78 <xTaskIncrementTick+0x14c>)
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	4a3e      	ldr	r2, [pc, #248]	; (8006a7c <xTaskIncrementTick+0x150>)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	4b3d      	ldr	r3, [pc, #244]	; (8006a80 <xTaskIncrementTick+0x154>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3301      	adds	r3, #1
 800698e:	4a3c      	ldr	r2, [pc, #240]	; (8006a80 <xTaskIncrementTick+0x154>)
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	f000 fad5 	bl	8006f40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006996:	4b3b      	ldr	r3, [pc, #236]	; (8006a84 <xTaskIncrementTick+0x158>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	429a      	cmp	r2, r3
 800699e:	d348      	bcc.n	8006a32 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069a0:	4b35      	ldr	r3, [pc, #212]	; (8006a78 <xTaskIncrementTick+0x14c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d104      	bne.n	80069b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069aa:	4b36      	ldr	r3, [pc, #216]	; (8006a84 <xTaskIncrementTick+0x158>)
 80069ac:	f04f 32ff 	mov.w	r2, #4294967295
 80069b0:	601a      	str	r2, [r3, #0]
					break;
 80069b2:	e03e      	b.n	8006a32 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b4:	4b30      	ldr	r3, [pc, #192]	; (8006a78 <xTaskIncrementTick+0x14c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d203      	bcs.n	80069d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069cc:	4a2d      	ldr	r2, [pc, #180]	; (8006a84 <xTaskIncrementTick+0x158>)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069d2:	e02e      	b.n	8006a32 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	3304      	adds	r3, #4
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe ff53 	bl	8005884 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d004      	beq.n	80069f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	3318      	adds	r3, #24
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe ff4a 	bl	8005884 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	2201      	movs	r2, #1
 80069f6:	409a      	lsls	r2, r3
 80069f8:	4b23      	ldr	r3, [pc, #140]	; (8006a88 <xTaskIncrementTick+0x15c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	4a22      	ldr	r2, [pc, #136]	; (8006a88 <xTaskIncrementTick+0x15c>)
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4a1f      	ldr	r2, [pc, #124]	; (8006a8c <xTaskIncrementTick+0x160>)
 8006a10:	441a      	add	r2, r3
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	3304      	adds	r3, #4
 8006a16:	4619      	mov	r1, r3
 8006a18:	4610      	mov	r0, r2
 8006a1a:	f7fe fed6 	bl	80057ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a22:	4b1b      	ldr	r3, [pc, #108]	; (8006a90 <xTaskIncrementTick+0x164>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d3b9      	bcc.n	80069a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a30:	e7b6      	b.n	80069a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a32:	4b17      	ldr	r3, [pc, #92]	; (8006a90 <xTaskIncrementTick+0x164>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a38:	4914      	ldr	r1, [pc, #80]	; (8006a8c <xTaskIncrementTick+0x160>)
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	440b      	add	r3, r1
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d901      	bls.n	8006a4e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a4e:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <xTaskIncrementTick+0x168>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d007      	beq.n	8006a66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006a56:	2301      	movs	r3, #1
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	e004      	b.n	8006a66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a5c:	4b0e      	ldr	r3, [pc, #56]	; (8006a98 <xTaskIncrementTick+0x16c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3301      	adds	r3, #1
 8006a62:	4a0d      	ldr	r2, [pc, #52]	; (8006a98 <xTaskIncrementTick+0x16c>)
 8006a64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a66:	697b      	ldr	r3, [r7, #20]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	20000d64 	.word	0x20000d64
 8006a74:	20000d40 	.word	0x20000d40
 8006a78:	20000cf4 	.word	0x20000cf4
 8006a7c:	20000cf8 	.word	0x20000cf8
 8006a80:	20000d54 	.word	0x20000d54
 8006a84:	20000d5c 	.word	0x20000d5c
 8006a88:	20000d44 	.word	0x20000d44
 8006a8c:	20000c40 	.word	0x20000c40
 8006a90:	20000c3c 	.word	0x20000c3c
 8006a94:	20000d50 	.word	0x20000d50
 8006a98:	20000d4c 	.word	0x20000d4c

08006a9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006aa2:	4b29      	ldr	r3, [pc, #164]	; (8006b48 <vTaskSwitchContext+0xac>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006aaa:	4b28      	ldr	r3, [pc, #160]	; (8006b4c <vTaskSwitchContext+0xb0>)
 8006aac:	2201      	movs	r2, #1
 8006aae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ab0:	e044      	b.n	8006b3c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006ab2:	4b26      	ldr	r3, [pc, #152]	; (8006b4c <vTaskSwitchContext+0xb0>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ab8:	4b25      	ldr	r3, [pc, #148]	; (8006b50 <vTaskSwitchContext+0xb4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	fab3 f383 	clz	r3, r3
 8006ac4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ac6:	7afb      	ldrb	r3, [r7, #11]
 8006ac8:	f1c3 031f 	rsb	r3, r3, #31
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	4921      	ldr	r1, [pc, #132]	; (8006b54 <vTaskSwitchContext+0xb8>)
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	440b      	add	r3, r1
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	607b      	str	r3, [r7, #4]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <vTaskSwitchContext+0x5a>
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4a14      	ldr	r2, [pc, #80]	; (8006b54 <vTaskSwitchContext+0xb8>)
 8006b04:	4413      	add	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	605a      	str	r2, [r3, #4]
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d104      	bne.n	8006b28 <vTaskSwitchContext+0x8c>
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	605a      	str	r2, [r3, #4]
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	4a0a      	ldr	r2, [pc, #40]	; (8006b58 <vTaskSwitchContext+0xbc>)
 8006b30:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b32:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <vTaskSwitchContext+0xbc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	334c      	adds	r3, #76	; 0x4c
 8006b38:	4a08      	ldr	r2, [pc, #32]	; (8006b5c <vTaskSwitchContext+0xc0>)
 8006b3a:	6013      	str	r3, [r2, #0]
}
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	20000d64 	.word	0x20000d64
 8006b4c:	20000d50 	.word	0x20000d50
 8006b50:	20000d44 	.word	0x20000d44
 8006b54:	20000c40 	.word	0x20000c40
 8006b58:	20000c3c 	.word	0x20000c3c
 8006b5c:	20000010 	.word	0x20000010

08006b60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10a      	bne.n	8006b86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	60fb      	str	r3, [r7, #12]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b86:	4b07      	ldr	r3, [pc, #28]	; (8006ba4 <vTaskPlaceOnEventList+0x44>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3318      	adds	r3, #24
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fe fe3f 	bl	8005812 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b94:	2101      	movs	r1, #1
 8006b96:	6838      	ldr	r0, [r7, #0]
 8006b98:	f000 fa96 	bl	80070c8 <prvAddCurrentTaskToDelayedList>
}
 8006b9c:	bf00      	nop
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	20000c3c 	.word	0x20000c3c

08006ba8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	617b      	str	r3, [r7, #20]
}
 8006bcc:	bf00      	nop
 8006bce:	e7fe      	b.n	8006bce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <vTaskPlaceOnEventListRestricted+0x54>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3318      	adds	r3, #24
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7fe fdf6 	bl	80057ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006be4:	f04f 33ff 	mov.w	r3, #4294967295
 8006be8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	68b8      	ldr	r0, [r7, #8]
 8006bee:	f000 fa6b 	bl	80070c8 <prvAddCurrentTaskToDelayedList>
	}
 8006bf2:	bf00      	nop
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000c3c 	.word	0x20000c3c

08006c00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10a      	bne.n	8006c2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	60fb      	str	r3, [r7, #12]
}
 8006c28:	bf00      	nop
 8006c2a:	e7fe      	b.n	8006c2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	3318      	adds	r3, #24
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fe fe27 	bl	8005884 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c36:	4b1d      	ldr	r3, [pc, #116]	; (8006cac <xTaskRemoveFromEventList+0xac>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d11c      	bne.n	8006c78 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	3304      	adds	r3, #4
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fe1e 	bl	8005884 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	409a      	lsls	r2, r3
 8006c50:	4b17      	ldr	r3, [pc, #92]	; (8006cb0 <xTaskRemoveFromEventList+0xb0>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	4a16      	ldr	r2, [pc, #88]	; (8006cb0 <xTaskRemoveFromEventList+0xb0>)
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4a13      	ldr	r2, [pc, #76]	; (8006cb4 <xTaskRemoveFromEventList+0xb4>)
 8006c68:	441a      	add	r2, r3
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4610      	mov	r0, r2
 8006c72:	f7fe fdaa 	bl	80057ca <vListInsertEnd>
 8006c76:	e005      	b.n	8006c84 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	3318      	adds	r3, #24
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	480e      	ldr	r0, [pc, #56]	; (8006cb8 <xTaskRemoveFromEventList+0xb8>)
 8006c80:	f7fe fda3 	bl	80057ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c88:	4b0c      	ldr	r3, [pc, #48]	; (8006cbc <xTaskRemoveFromEventList+0xbc>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d905      	bls.n	8006c9e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c92:	2301      	movs	r3, #1
 8006c94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c96:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <xTaskRemoveFromEventList+0xc0>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	e001      	b.n	8006ca2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ca2:	697b      	ldr	r3, [r7, #20]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20000d64 	.word	0x20000d64
 8006cb0:	20000d44 	.word	0x20000d44
 8006cb4:	20000c40 	.word	0x20000c40
 8006cb8:	20000cfc 	.word	0x20000cfc
 8006cbc:	20000c3c 	.word	0x20000c3c
 8006cc0:	20000d50 	.word	0x20000d50

08006cc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <vTaskInternalSetTimeOutState+0x24>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006cd4:	4b05      	ldr	r3, [pc, #20]	; (8006cec <vTaskInternalSetTimeOutState+0x28>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	605a      	str	r2, [r3, #4]
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	20000d54 	.word	0x20000d54
 8006cec:	20000d40 	.word	0x20000d40

08006cf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10a      	bne.n	8006d16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	613b      	str	r3, [r7, #16]
}
 8006d12:	bf00      	nop
 8006d14:	e7fe      	b.n	8006d14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	60fb      	str	r3, [r7, #12]
}
 8006d2e:	bf00      	nop
 8006d30:	e7fe      	b.n	8006d30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006d32:	f000 fea7 	bl	8007a84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d36:	4b1d      	ldr	r3, [pc, #116]	; (8006dac <xTaskCheckForTimeOut+0xbc>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d102      	bne.n	8006d56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	61fb      	str	r3, [r7, #28]
 8006d54:	e023      	b.n	8006d9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <xTaskCheckForTimeOut+0xc0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d007      	beq.n	8006d72 <xTaskCheckForTimeOut+0x82>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d302      	bcc.n	8006d72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	61fb      	str	r3, [r7, #28]
 8006d70:	e015      	b.n	8006d9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d20b      	bcs.n	8006d94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	1ad2      	subs	r2, r2, r3
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff ff9b 	bl	8006cc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	e004      	b.n	8006d9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d9e:	f000 fea1 	bl	8007ae4 <vPortExitCritical>

	return xReturn;
 8006da2:	69fb      	ldr	r3, [r7, #28]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3720      	adds	r7, #32
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000d40 	.word	0x20000d40
 8006db0:	20000d54 	.word	0x20000d54

08006db4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006db8:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <vTaskMissedYield+0x14>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
}
 8006dbe:	bf00      	nop
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	20000d50 	.word	0x20000d50

08006dcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006dd4:	f000 f852 	bl	8006e7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006dd8:	4b06      	ldr	r3, [pc, #24]	; (8006df4 <prvIdleTask+0x28>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d9f9      	bls.n	8006dd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006de0:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <prvIdleTask+0x2c>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006df0:	e7f0      	b.n	8006dd4 <prvIdleTask+0x8>
 8006df2:	bf00      	nop
 8006df4:	20000c40 	.word	0x20000c40
 8006df8:	e000ed04 	.word	0xe000ed04

08006dfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e02:	2300      	movs	r3, #0
 8006e04:	607b      	str	r3, [r7, #4]
 8006e06:	e00c      	b.n	8006e22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4a12      	ldr	r2, [pc, #72]	; (8006e5c <prvInitialiseTaskLists+0x60>)
 8006e14:	4413      	add	r3, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fe fcaa 	bl	8005770 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	607b      	str	r3, [r7, #4]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b06      	cmp	r3, #6
 8006e26:	d9ef      	bls.n	8006e08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e28:	480d      	ldr	r0, [pc, #52]	; (8006e60 <prvInitialiseTaskLists+0x64>)
 8006e2a:	f7fe fca1 	bl	8005770 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e2e:	480d      	ldr	r0, [pc, #52]	; (8006e64 <prvInitialiseTaskLists+0x68>)
 8006e30:	f7fe fc9e 	bl	8005770 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e34:	480c      	ldr	r0, [pc, #48]	; (8006e68 <prvInitialiseTaskLists+0x6c>)
 8006e36:	f7fe fc9b 	bl	8005770 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e3a:	480c      	ldr	r0, [pc, #48]	; (8006e6c <prvInitialiseTaskLists+0x70>)
 8006e3c:	f7fe fc98 	bl	8005770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e40:	480b      	ldr	r0, [pc, #44]	; (8006e70 <prvInitialiseTaskLists+0x74>)
 8006e42:	f7fe fc95 	bl	8005770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e46:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <prvInitialiseTaskLists+0x78>)
 8006e48:	4a05      	ldr	r2, [pc, #20]	; (8006e60 <prvInitialiseTaskLists+0x64>)
 8006e4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e4c:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <prvInitialiseTaskLists+0x7c>)
 8006e4e:	4a05      	ldr	r2, [pc, #20]	; (8006e64 <prvInitialiseTaskLists+0x68>)
 8006e50:	601a      	str	r2, [r3, #0]
}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000c40 	.word	0x20000c40
 8006e60:	20000ccc 	.word	0x20000ccc
 8006e64:	20000ce0 	.word	0x20000ce0
 8006e68:	20000cfc 	.word	0x20000cfc
 8006e6c:	20000d10 	.word	0x20000d10
 8006e70:	20000d28 	.word	0x20000d28
 8006e74:	20000cf4 	.word	0x20000cf4
 8006e78:	20000cf8 	.word	0x20000cf8

08006e7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e82:	e019      	b.n	8006eb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e84:	f000 fdfe 	bl	8007a84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e88:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <prvCheckTasksWaitingTermination+0x50>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe fcf5 	bl	8005884 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	; (8006ed0 <prvCheckTasksWaitingTermination+0x54>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	4a0b      	ldr	r2, [pc, #44]	; (8006ed0 <prvCheckTasksWaitingTermination+0x54>)
 8006ea2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	; (8006ed4 <prvCheckTasksWaitingTermination+0x58>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ed4 <prvCheckTasksWaitingTermination+0x58>)
 8006eac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006eae:	f000 fe19 	bl	8007ae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f810 	bl	8006ed8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eb8:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <prvCheckTasksWaitingTermination+0x58>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e1      	bne.n	8006e84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ec0:	bf00      	nop
 8006ec2:	bf00      	nop
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000d10 	.word	0x20000d10
 8006ed0:	20000d3c 	.word	0x20000d3c
 8006ed4:	20000d24 	.word	0x20000d24

08006ed8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	334c      	adds	r3, #76	; 0x4c
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f002 f92f 	bl	8009148 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d108      	bne.n	8006f06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 ffb1 	bl	8007e60 <vPortFree>
				vPortFree( pxTCB );
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 ffae 	bl	8007e60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f04:	e018      	b.n	8006f38 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d103      	bne.n	8006f18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 ffa5 	bl	8007e60 <vPortFree>
	}
 8006f16:	e00f      	b.n	8006f38 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d00a      	beq.n	8006f38 <prvDeleteTCB+0x60>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	60fb      	str	r3, [r7, #12]
}
 8006f34:	bf00      	nop
 8006f36:	e7fe      	b.n	8006f36 <prvDeleteTCB+0x5e>
	}
 8006f38:	bf00      	nop
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f46:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <prvResetNextTaskUnblockTime+0x38>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d104      	bne.n	8006f5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <prvResetNextTaskUnblockTime+0x3c>)
 8006f52:	f04f 32ff 	mov.w	r2, #4294967295
 8006f56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f58:	e008      	b.n	8006f6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f5a:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <prvResetNextTaskUnblockTime+0x38>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	4a04      	ldr	r2, [pc, #16]	; (8006f7c <prvResetNextTaskUnblockTime+0x3c>)
 8006f6a:	6013      	str	r3, [r2, #0]
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	20000cf4 	.word	0x20000cf4
 8006f7c:	20000d5c 	.word	0x20000d5c

08006f80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f86:	4b0b      	ldr	r3, [pc, #44]	; (8006fb4 <xTaskGetSchedulerState+0x34>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d102      	bne.n	8006f94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	607b      	str	r3, [r7, #4]
 8006f92:	e008      	b.n	8006fa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f94:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <xTaskGetSchedulerState+0x38>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	607b      	str	r3, [r7, #4]
 8006fa0:	e001      	b.n	8006fa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fa6:	687b      	ldr	r3, [r7, #4]
	}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	20000d48 	.word	0x20000d48
 8006fb8:	20000d64 	.word	0x20000d64

08006fbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d06e      	beq.n	80070b0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006fd2:	4b3a      	ldr	r3, [pc, #232]	; (80070bc <xTaskPriorityDisinherit+0x100>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d00a      	beq.n	8006ff2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	60fb      	str	r3, [r7, #12]
}
 8006fee:	bf00      	nop
 8006ff0:	e7fe      	b.n	8006ff0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	60bb      	str	r3, [r7, #8]
}
 800700c:	bf00      	nop
 800700e:	e7fe      	b.n	800700e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007014:	1e5a      	subs	r2, r3, #1
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007022:	429a      	cmp	r2, r3
 8007024:	d044      	beq.n	80070b0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800702a:	2b00      	cmp	r3, #0
 800702c:	d140      	bne.n	80070b0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	3304      	adds	r3, #4
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe fc26 	bl	8005884 <uxListRemove>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d115      	bne.n	800706a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007042:	491f      	ldr	r1, [pc, #124]	; (80070c0 <xTaskPriorityDisinherit+0x104>)
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <xTaskPriorityDisinherit+0xae>
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	2201      	movs	r2, #1
 800705a:	fa02 f303 	lsl.w	r3, r2, r3
 800705e:	43da      	mvns	r2, r3
 8007060:	4b18      	ldr	r3, [pc, #96]	; (80070c4 <xTaskPriorityDisinherit+0x108>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4013      	ands	r3, r2
 8007066:	4a17      	ldr	r2, [pc, #92]	; (80070c4 <xTaskPriorityDisinherit+0x108>)
 8007068:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007076:	f1c3 0207 	rsb	r2, r3, #7
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007082:	2201      	movs	r2, #1
 8007084:	409a      	lsls	r2, r3
 8007086:	4b0f      	ldr	r3, [pc, #60]	; (80070c4 <xTaskPriorityDisinherit+0x108>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4313      	orrs	r3, r2
 800708c:	4a0d      	ldr	r2, [pc, #52]	; (80070c4 <xTaskPriorityDisinherit+0x108>)
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4a08      	ldr	r2, [pc, #32]	; (80070c0 <xTaskPriorityDisinherit+0x104>)
 800709e:	441a      	add	r2, r3
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4619      	mov	r1, r3
 80070a6:	4610      	mov	r0, r2
 80070a8:	f7fe fb8f 	bl	80057ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070ac:	2301      	movs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070b0:	697b      	ldr	r3, [r7, #20]
	}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	20000c3c 	.word	0x20000c3c
 80070c0:	20000c40 	.word	0x20000c40
 80070c4:	20000d44 	.word	0x20000d44

080070c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070d2:	4b29      	ldr	r3, [pc, #164]	; (8007178 <prvAddCurrentTaskToDelayedList+0xb0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070d8:	4b28      	ldr	r3, [pc, #160]	; (800717c <prvAddCurrentTaskToDelayedList+0xb4>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3304      	adds	r3, #4
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fbd0 	bl	8005884 <uxListRemove>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10b      	bne.n	8007102 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80070ea:	4b24      	ldr	r3, [pc, #144]	; (800717c <prvAddCurrentTaskToDelayedList+0xb4>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	2201      	movs	r2, #1
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	43da      	mvns	r2, r3
 80070f8:	4b21      	ldr	r3, [pc, #132]	; (8007180 <prvAddCurrentTaskToDelayedList+0xb8>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4013      	ands	r3, r2
 80070fe:	4a20      	ldr	r2, [pc, #128]	; (8007180 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007100:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007108:	d10a      	bne.n	8007120 <prvAddCurrentTaskToDelayedList+0x58>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d007      	beq.n	8007120 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007110:	4b1a      	ldr	r3, [pc, #104]	; (800717c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3304      	adds	r3, #4
 8007116:	4619      	mov	r1, r3
 8007118:	481a      	ldr	r0, [pc, #104]	; (8007184 <prvAddCurrentTaskToDelayedList+0xbc>)
 800711a:	f7fe fb56 	bl	80057ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800711e:	e026      	b.n	800716e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4413      	add	r3, r2
 8007126:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007128:	4b14      	ldr	r3, [pc, #80]	; (800717c <prvAddCurrentTaskToDelayedList+0xb4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	429a      	cmp	r2, r3
 8007136:	d209      	bcs.n	800714c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007138:	4b13      	ldr	r3, [pc, #76]	; (8007188 <prvAddCurrentTaskToDelayedList+0xc0>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	4b0f      	ldr	r3, [pc, #60]	; (800717c <prvAddCurrentTaskToDelayedList+0xb4>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3304      	adds	r3, #4
 8007142:	4619      	mov	r1, r3
 8007144:	4610      	mov	r0, r2
 8007146:	f7fe fb64 	bl	8005812 <vListInsert>
}
 800714a:	e010      	b.n	800716e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800714c:	4b0f      	ldr	r3, [pc, #60]	; (800718c <prvAddCurrentTaskToDelayedList+0xc4>)
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	4b0a      	ldr	r3, [pc, #40]	; (800717c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3304      	adds	r3, #4
 8007156:	4619      	mov	r1, r3
 8007158:	4610      	mov	r0, r2
 800715a:	f7fe fb5a 	bl	8005812 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800715e:	4b0c      	ldr	r3, [pc, #48]	; (8007190 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	429a      	cmp	r2, r3
 8007166:	d202      	bcs.n	800716e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007168:	4a09      	ldr	r2, [pc, #36]	; (8007190 <prvAddCurrentTaskToDelayedList+0xc8>)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	6013      	str	r3, [r2, #0]
}
 800716e:	bf00      	nop
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000d40 	.word	0x20000d40
 800717c:	20000c3c 	.word	0x20000c3c
 8007180:	20000d44 	.word	0x20000d44
 8007184:	20000d28 	.word	0x20000d28
 8007188:	20000cf8 	.word	0x20000cf8
 800718c:	20000cf4 	.word	0x20000cf4
 8007190:	20000d5c 	.word	0x20000d5c

08007194 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08a      	sub	sp, #40	; 0x28
 8007198:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800719a:	2300      	movs	r3, #0
 800719c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800719e:	f000 fb07 	bl	80077b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80071a2:	4b1c      	ldr	r3, [pc, #112]	; (8007214 <xTimerCreateTimerTask+0x80>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d021      	beq.n	80071ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80071b2:	1d3a      	adds	r2, r7, #4
 80071b4:	f107 0108 	add.w	r1, r7, #8
 80071b8:	f107 030c 	add.w	r3, r7, #12
 80071bc:	4618      	mov	r0, r3
 80071be:	f7f9 ff5b 	bl	8001078 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	9202      	str	r2, [sp, #8]
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	2302      	movs	r3, #2
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	2300      	movs	r3, #0
 80071d2:	460a      	mov	r2, r1
 80071d4:	4910      	ldr	r1, [pc, #64]	; (8007218 <xTimerCreateTimerTask+0x84>)
 80071d6:	4811      	ldr	r0, [pc, #68]	; (800721c <xTimerCreateTimerTask+0x88>)
 80071d8:	f7ff f8a0 	bl	800631c <xTaskCreateStatic>
 80071dc:	4603      	mov	r3, r0
 80071de:	4a10      	ldr	r2, [pc, #64]	; (8007220 <xTimerCreateTimerTask+0x8c>)
 80071e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071e2:	4b0f      	ldr	r3, [pc, #60]	; (8007220 <xTimerCreateTimerTask+0x8c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071ea:	2301      	movs	r3, #1
 80071ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	613b      	str	r3, [r7, #16]
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800720a:	697b      	ldr	r3, [r7, #20]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20000d98 	.word	0x20000d98
 8007218:	0800cba8 	.word	0x0800cba8
 800721c:	08007359 	.word	0x08007359
 8007220:	20000d9c 	.word	0x20000d9c

08007224 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08a      	sub	sp, #40	; 0x28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007232:	2300      	movs	r3, #0
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10a      	bne.n	8007252 <xTimerGenericCommand+0x2e>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	623b      	str	r3, [r7, #32]
}
 800724e:	bf00      	nop
 8007250:	e7fe      	b.n	8007250 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007252:	4b1a      	ldr	r3, [pc, #104]	; (80072bc <xTimerGenericCommand+0x98>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d02a      	beq.n	80072b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b05      	cmp	r3, #5
 800726a:	dc18      	bgt.n	800729e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800726c:	f7ff fe88 	bl	8006f80 <xTaskGetSchedulerState>
 8007270:	4603      	mov	r3, r0
 8007272:	2b02      	cmp	r3, #2
 8007274:	d109      	bne.n	800728a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007276:	4b11      	ldr	r3, [pc, #68]	; (80072bc <xTimerGenericCommand+0x98>)
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	f107 0110 	add.w	r1, r7, #16
 800727e:	2300      	movs	r3, #0
 8007280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007282:	f7fe fc63 	bl	8005b4c <xQueueGenericSend>
 8007286:	6278      	str	r0, [r7, #36]	; 0x24
 8007288:	e012      	b.n	80072b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800728a:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <xTimerGenericCommand+0x98>)
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	f107 0110 	add.w	r1, r7, #16
 8007292:	2300      	movs	r3, #0
 8007294:	2200      	movs	r2, #0
 8007296:	f7fe fc59 	bl	8005b4c <xQueueGenericSend>
 800729a:	6278      	str	r0, [r7, #36]	; 0x24
 800729c:	e008      	b.n	80072b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800729e:	4b07      	ldr	r3, [pc, #28]	; (80072bc <xTimerGenericCommand+0x98>)
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	f107 0110 	add.w	r1, r7, #16
 80072a6:	2300      	movs	r3, #0
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	f7fe fd4d 	bl	8005d48 <xQueueGenericSendFromISR>
 80072ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3728      	adds	r7, #40	; 0x28
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000d98 	.word	0x20000d98

080072c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af02      	add	r7, sp, #8
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ca:	4b22      	ldr	r3, [pc, #136]	; (8007354 <prvProcessExpiredTimer+0x94>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fe fad3 	bl	8005884 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d022      	beq.n	8007332 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	699a      	ldr	r2, [r3, #24]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	18d1      	adds	r1, r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	6978      	ldr	r0, [r7, #20]
 80072fa:	f000 f8d1 	bl	80074a0 <prvInsertTimerInActiveList>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01f      	beq.n	8007344 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007304:	2300      	movs	r3, #0
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	2300      	movs	r3, #0
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	2100      	movs	r1, #0
 800730e:	6978      	ldr	r0, [r7, #20]
 8007310:	f7ff ff88 	bl	8007224 <xTimerGenericCommand>
 8007314:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d113      	bne.n	8007344 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	60fb      	str	r3, [r7, #12]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007338:	f023 0301 	bic.w	r3, r3, #1
 800733c:	b2da      	uxtb	r2, r3
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	6978      	ldr	r0, [r7, #20]
 800734a:	4798      	blx	r3
}
 800734c:	bf00      	nop
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20000d90 	.word	0x20000d90

08007358 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007360:	f107 0308 	add.w	r3, r7, #8
 8007364:	4618      	mov	r0, r3
 8007366:	f000 f857 	bl	8007418 <prvGetNextExpireTime>
 800736a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4619      	mov	r1, r3
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f803 	bl	800737c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007376:	f000 f8d5 	bl	8007524 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800737a:	e7f1      	b.n	8007360 <prvTimerTask+0x8>

0800737c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007386:	f7ff fa17 	bl	80067b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800738a:	f107 0308 	add.w	r3, r7, #8
 800738e:	4618      	mov	r0, r3
 8007390:	f000 f866 	bl	8007460 <prvSampleTimeNow>
 8007394:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d130      	bne.n	80073fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10a      	bne.n	80073b8 <prvProcessTimerOrBlockTask+0x3c>
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d806      	bhi.n	80073b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80073aa:	f7ff fa13 	bl	80067d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff ff85 	bl	80072c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80073b6:	e024      	b.n	8007402 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d008      	beq.n	80073d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073be:	4b13      	ldr	r3, [pc, #76]	; (800740c <prvProcessTimerOrBlockTask+0x90>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <prvProcessTimerOrBlockTask+0x50>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <prvProcessTimerOrBlockTask+0x52>
 80073cc:	2300      	movs	r3, #0
 80073ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073d0:	4b0f      	ldr	r3, [pc, #60]	; (8007410 <prvProcessTimerOrBlockTask+0x94>)
 80073d2:	6818      	ldr	r0, [r3, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	4619      	mov	r1, r3
 80073de:	f7fe ff69 	bl	80062b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073e2:	f7ff f9f7 	bl	80067d4 <xTaskResumeAll>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80073ec:	4b09      	ldr	r3, [pc, #36]	; (8007414 <prvProcessTimerOrBlockTask+0x98>)
 80073ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	f3bf 8f6f 	isb	sy
}
 80073fc:	e001      	b.n	8007402 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073fe:	f7ff f9e9 	bl	80067d4 <xTaskResumeAll>
}
 8007402:	bf00      	nop
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20000d94 	.word	0x20000d94
 8007410:	20000d98 	.word	0x20000d98
 8007414:	e000ed04 	.word	0xe000ed04

08007418 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007420:	4b0e      	ldr	r3, [pc, #56]	; (800745c <prvGetNextExpireTime+0x44>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <prvGetNextExpireTime+0x16>
 800742a:	2201      	movs	r2, #1
 800742c:	e000      	b.n	8007430 <prvGetNextExpireTime+0x18>
 800742e:	2200      	movs	r2, #0
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d105      	bne.n	8007448 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800743c:	4b07      	ldr	r3, [pc, #28]	; (800745c <prvGetNextExpireTime+0x44>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	e001      	b.n	800744c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800744c:	68fb      	ldr	r3, [r7, #12]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	20000d90 	.word	0x20000d90

08007460 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007468:	f7ff fa50 	bl	800690c <xTaskGetTickCount>
 800746c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800746e:	4b0b      	ldr	r3, [pc, #44]	; (800749c <prvSampleTimeNow+0x3c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	429a      	cmp	r2, r3
 8007476:	d205      	bcs.n	8007484 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007478:	f000 f936 	bl	80076e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	e002      	b.n	800748a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800748a:	4a04      	ldr	r2, [pc, #16]	; (800749c <prvSampleTimeNow+0x3c>)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007490:	68fb      	ldr	r3, [r7, #12]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	20000da0 	.word	0x20000da0

080074a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80074ae:	2300      	movs	r3, #0
 80074b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d812      	bhi.n	80074ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	1ad2      	subs	r2, r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d302      	bcc.n	80074da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074d4:	2301      	movs	r3, #1
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	e01b      	b.n	8007512 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074da:	4b10      	ldr	r3, [pc, #64]	; (800751c <prvInsertTimerInActiveList+0x7c>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3304      	adds	r3, #4
 80074e2:	4619      	mov	r1, r3
 80074e4:	4610      	mov	r0, r2
 80074e6:	f7fe f994 	bl	8005812 <vListInsert>
 80074ea:	e012      	b.n	8007512 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d206      	bcs.n	8007502 <prvInsertTimerInActiveList+0x62>
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d302      	bcc.n	8007502 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074fc:	2301      	movs	r3, #1
 80074fe:	617b      	str	r3, [r7, #20]
 8007500:	e007      	b.n	8007512 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007502:	4b07      	ldr	r3, [pc, #28]	; (8007520 <prvInsertTimerInActiveList+0x80>)
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3304      	adds	r3, #4
 800750a:	4619      	mov	r1, r3
 800750c:	4610      	mov	r0, r2
 800750e:	f7fe f980 	bl	8005812 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007512:	697b      	ldr	r3, [r7, #20]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20000d94 	.word	0x20000d94
 8007520:	20000d90 	.word	0x20000d90

08007524 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08e      	sub	sp, #56	; 0x38
 8007528:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800752a:	e0ca      	b.n	80076c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	da18      	bge.n	8007564 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007532:	1d3b      	adds	r3, r7, #4
 8007534:	3304      	adds	r3, #4
 8007536:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10a      	bne.n	8007554 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	61fb      	str	r3, [r7, #28]
}
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800755a:	6850      	ldr	r0, [r2, #4]
 800755c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800755e:	6892      	ldr	r2, [r2, #8]
 8007560:	4611      	mov	r1, r2
 8007562:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	f2c0 80aa 	blt.w	80076c0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d004      	beq.n	8007582 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757a:	3304      	adds	r3, #4
 800757c:	4618      	mov	r0, r3
 800757e:	f7fe f981 	bl	8005884 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007582:	463b      	mov	r3, r7
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff ff6b 	bl	8007460 <prvSampleTimeNow>
 800758a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b09      	cmp	r3, #9
 8007590:	f200 8097 	bhi.w	80076c2 <prvProcessReceivedCommands+0x19e>
 8007594:	a201      	add	r2, pc, #4	; (adr r2, 800759c <prvProcessReceivedCommands+0x78>)
 8007596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759a:	bf00      	nop
 800759c:	080075c5 	.word	0x080075c5
 80075a0:	080075c5 	.word	0x080075c5
 80075a4:	080075c5 	.word	0x080075c5
 80075a8:	08007639 	.word	0x08007639
 80075ac:	0800764d 	.word	0x0800764d
 80075b0:	08007697 	.word	0x08007697
 80075b4:	080075c5 	.word	0x080075c5
 80075b8:	080075c5 	.word	0x080075c5
 80075bc:	08007639 	.word	0x08007639
 80075c0:	0800764d 	.word	0x0800764d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075ca:	f043 0301 	orr.w	r3, r3, #1
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	18d1      	adds	r1, r2, r3
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075e4:	f7ff ff5c 	bl	80074a0 <prvInsertTimerInActiveList>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d069      	beq.n	80076c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d05e      	beq.n	80076c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	441a      	add	r2, r3
 800760c:	2300      	movs	r3, #0
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	2300      	movs	r3, #0
 8007612:	2100      	movs	r1, #0
 8007614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007616:	f7ff fe05 	bl	8007224 <xTimerGenericCommand>
 800761a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d14f      	bne.n	80076c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	61bb      	str	r3, [r7, #24]
}
 8007634:	bf00      	nop
 8007636:	e7fe      	b.n	8007636 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	b2da      	uxtb	r2, r3
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800764a:	e03a      	b.n	80076c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007652:	f043 0301 	orr.w	r3, r3, #1
 8007656:	b2da      	uxtb	r2, r3
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d10a      	bne.n	8007682 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	617b      	str	r3, [r7, #20]
}
 800767e:	bf00      	nop
 8007680:	e7fe      	b.n	8007680 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007684:	699a      	ldr	r2, [r3, #24]
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	18d1      	adds	r1, r2, r3
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800768e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007690:	f7ff ff06 	bl	80074a0 <prvInsertTimerInActiveList>
					break;
 8007694:	e015      	b.n	80076c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d103      	bne.n	80076ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80076a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076a6:	f000 fbdb 	bl	8007e60 <vPortFree>
 80076aa:	e00a      	b.n	80076c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076b2:	f023 0301 	bic.w	r3, r3, #1
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076be:	e000      	b.n	80076c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80076c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076c2:	4b08      	ldr	r3, [pc, #32]	; (80076e4 <prvProcessReceivedCommands+0x1c0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	1d39      	adds	r1, r7, #4
 80076c8:	2200      	movs	r2, #0
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe fbd8 	bl	8005e80 <xQueueReceive>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f47f af2a 	bne.w	800752c <prvProcessReceivedCommands+0x8>
	}
}
 80076d8:	bf00      	nop
 80076da:	bf00      	nop
 80076dc:	3730      	adds	r7, #48	; 0x30
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	20000d98 	.word	0x20000d98

080076e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076ee:	e048      	b.n	8007782 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076f0:	4b2d      	ldr	r3, [pc, #180]	; (80077a8 <prvSwitchTimerLists+0xc0>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076fa:	4b2b      	ldr	r3, [pc, #172]	; (80077a8 <prvSwitchTimerLists+0xc0>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3304      	adds	r3, #4
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe f8bb 	bl	8005884 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800771c:	f003 0304 	and.w	r3, r3, #4
 8007720:	2b00      	cmp	r3, #0
 8007722:	d02e      	beq.n	8007782 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	4413      	add	r3, r2
 800772c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	429a      	cmp	r2, r3
 8007734:	d90e      	bls.n	8007754 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007742:	4b19      	ldr	r3, [pc, #100]	; (80077a8 <prvSwitchTimerLists+0xc0>)
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3304      	adds	r3, #4
 800774a:	4619      	mov	r1, r3
 800774c:	4610      	mov	r0, r2
 800774e:	f7fe f860 	bl	8005812 <vListInsert>
 8007752:	e016      	b.n	8007782 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007754:	2300      	movs	r3, #0
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	2300      	movs	r3, #0
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	2100      	movs	r1, #0
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f7ff fd60 	bl	8007224 <xTimerGenericCommand>
 8007764:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10a      	bne.n	8007782 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	603b      	str	r3, [r7, #0]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007782:	4b09      	ldr	r3, [pc, #36]	; (80077a8 <prvSwitchTimerLists+0xc0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1b1      	bne.n	80076f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800778c:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <prvSwitchTimerLists+0xc0>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007792:	4b06      	ldr	r3, [pc, #24]	; (80077ac <prvSwitchTimerLists+0xc4>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a04      	ldr	r2, [pc, #16]	; (80077a8 <prvSwitchTimerLists+0xc0>)
 8007798:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800779a:	4a04      	ldr	r2, [pc, #16]	; (80077ac <prvSwitchTimerLists+0xc4>)
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	6013      	str	r3, [r2, #0]
}
 80077a0:	bf00      	nop
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000d90 	.word	0x20000d90
 80077ac:	20000d94 	.word	0x20000d94

080077b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077b6:	f000 f965 	bl	8007a84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077ba:	4b15      	ldr	r3, [pc, #84]	; (8007810 <prvCheckForValidListAndQueue+0x60>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d120      	bne.n	8007804 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077c2:	4814      	ldr	r0, [pc, #80]	; (8007814 <prvCheckForValidListAndQueue+0x64>)
 80077c4:	f7fd ffd4 	bl	8005770 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077c8:	4813      	ldr	r0, [pc, #76]	; (8007818 <prvCheckForValidListAndQueue+0x68>)
 80077ca:	f7fd ffd1 	bl	8005770 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077ce:	4b13      	ldr	r3, [pc, #76]	; (800781c <prvCheckForValidListAndQueue+0x6c>)
 80077d0:	4a10      	ldr	r2, [pc, #64]	; (8007814 <prvCheckForValidListAndQueue+0x64>)
 80077d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077d4:	4b12      	ldr	r3, [pc, #72]	; (8007820 <prvCheckForValidListAndQueue+0x70>)
 80077d6:	4a10      	ldr	r2, [pc, #64]	; (8007818 <prvCheckForValidListAndQueue+0x68>)
 80077d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077da:	2300      	movs	r3, #0
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	4b11      	ldr	r3, [pc, #68]	; (8007824 <prvCheckForValidListAndQueue+0x74>)
 80077e0:	4a11      	ldr	r2, [pc, #68]	; (8007828 <prvCheckForValidListAndQueue+0x78>)
 80077e2:	2110      	movs	r1, #16
 80077e4:	200a      	movs	r0, #10
 80077e6:	f7fe f8df 	bl	80059a8 <xQueueGenericCreateStatic>
 80077ea:	4603      	mov	r3, r0
 80077ec:	4a08      	ldr	r2, [pc, #32]	; (8007810 <prvCheckForValidListAndQueue+0x60>)
 80077ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077f0:	4b07      	ldr	r3, [pc, #28]	; (8007810 <prvCheckForValidListAndQueue+0x60>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d005      	beq.n	8007804 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077f8:	4b05      	ldr	r3, [pc, #20]	; (8007810 <prvCheckForValidListAndQueue+0x60>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	490b      	ldr	r1, [pc, #44]	; (800782c <prvCheckForValidListAndQueue+0x7c>)
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe fd2e 	bl	8006260 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007804:	f000 f96e 	bl	8007ae4 <vPortExitCritical>
}
 8007808:	bf00      	nop
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20000d98 	.word	0x20000d98
 8007814:	20000d68 	.word	0x20000d68
 8007818:	20000d7c 	.word	0x20000d7c
 800781c:	20000d90 	.word	0x20000d90
 8007820:	20000d94 	.word	0x20000d94
 8007824:	20000e44 	.word	0x20000e44
 8007828:	20000da4 	.word	0x20000da4
 800782c:	0800cbb0 	.word	0x0800cbb0

08007830 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	3b04      	subs	r3, #4
 8007840:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3b04      	subs	r3, #4
 800784e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f023 0201 	bic.w	r2, r3, #1
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3b04      	subs	r3, #4
 800785e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007860:	4a0c      	ldr	r2, [pc, #48]	; (8007894 <pxPortInitialiseStack+0x64>)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3b14      	subs	r3, #20
 800786a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3b04      	subs	r3, #4
 8007876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f06f 0202 	mvn.w	r2, #2
 800787e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3b20      	subs	r3, #32
 8007884:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007886:	68fb      	ldr	r3, [r7, #12]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	08007899 	.word	0x08007899

08007898 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078a2:	4b12      	ldr	r3, [pc, #72]	; (80078ec <prvTaskExitError+0x54>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078aa:	d00a      	beq.n	80078c2 <prvTaskExitError+0x2a>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	60fb      	str	r3, [r7, #12]
}
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <prvTaskExitError+0x28>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	60bb      	str	r3, [r7, #8]
}
 80078d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078d6:	bf00      	nop
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0fc      	beq.n	80078d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078de:	bf00      	nop
 80078e0:	bf00      	nop
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	2000000c 	.word	0x2000000c

080078f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078f0:	4b07      	ldr	r3, [pc, #28]	; (8007910 <pxCurrentTCBConst2>)
 80078f2:	6819      	ldr	r1, [r3, #0]
 80078f4:	6808      	ldr	r0, [r1, #0]
 80078f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fa:	f380 8809 	msr	PSP, r0
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f04f 0000 	mov.w	r0, #0
 8007906:	f380 8811 	msr	BASEPRI, r0
 800790a:	4770      	bx	lr
 800790c:	f3af 8000 	nop.w

08007910 <pxCurrentTCBConst2>:
 8007910:	20000c3c 	.word	0x20000c3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop

08007918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007918:	4808      	ldr	r0, [pc, #32]	; (800793c <prvPortStartFirstTask+0x24>)
 800791a:	6800      	ldr	r0, [r0, #0]
 800791c:	6800      	ldr	r0, [r0, #0]
 800791e:	f380 8808 	msr	MSP, r0
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f380 8814 	msr	CONTROL, r0
 800792a:	b662      	cpsie	i
 800792c:	b661      	cpsie	f
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	df00      	svc	0
 8007938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800793a:	bf00      	nop
 800793c:	e000ed08 	.word	0xe000ed08

08007940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007946:	4b46      	ldr	r3, [pc, #280]	; (8007a60 <xPortStartScheduler+0x120>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a46      	ldr	r2, [pc, #280]	; (8007a64 <xPortStartScheduler+0x124>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d10a      	bne.n	8007966 <xPortStartScheduler+0x26>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	613b      	str	r3, [r7, #16]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007966:	4b3e      	ldr	r3, [pc, #248]	; (8007a60 <xPortStartScheduler+0x120>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a3f      	ldr	r2, [pc, #252]	; (8007a68 <xPortStartScheduler+0x128>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d10a      	bne.n	8007986 <xPortStartScheduler+0x46>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	60fb      	str	r3, [r7, #12]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007986:	4b39      	ldr	r3, [pc, #228]	; (8007a6c <xPortStartScheduler+0x12c>)
 8007988:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	22ff      	movs	r2, #255	; 0xff
 8007996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	b2db      	uxtb	r3, r3
 800799e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	4b31      	ldr	r3, [pc, #196]	; (8007a70 <xPortStartScheduler+0x130>)
 80079ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079ae:	4b31      	ldr	r3, [pc, #196]	; (8007a74 <xPortStartScheduler+0x134>)
 80079b0:	2207      	movs	r2, #7
 80079b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079b4:	e009      	b.n	80079ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80079b6:	4b2f      	ldr	r3, [pc, #188]	; (8007a74 <xPortStartScheduler+0x134>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	4a2d      	ldr	r2, [pc, #180]	; (8007a74 <xPortStartScheduler+0x134>)
 80079be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ca:	78fb      	ldrb	r3, [r7, #3]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d2:	2b80      	cmp	r3, #128	; 0x80
 80079d4:	d0ef      	beq.n	80079b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079d6:	4b27      	ldr	r3, [pc, #156]	; (8007a74 <xPortStartScheduler+0x134>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f1c3 0307 	rsb	r3, r3, #7
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d00a      	beq.n	80079f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	60bb      	str	r3, [r7, #8]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079f8:	4b1e      	ldr	r3, [pc, #120]	; (8007a74 <xPortStartScheduler+0x134>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	4a1d      	ldr	r2, [pc, #116]	; (8007a74 <xPortStartScheduler+0x134>)
 8007a00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a02:	4b1c      	ldr	r3, [pc, #112]	; (8007a74 <xPortStartScheduler+0x134>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a0a:	4a1a      	ldr	r2, [pc, #104]	; (8007a74 <xPortStartScheduler+0x134>)
 8007a0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a16:	4b18      	ldr	r3, [pc, #96]	; (8007a78 <xPortStartScheduler+0x138>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <xPortStartScheduler+0x138>)
 8007a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a22:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <xPortStartScheduler+0x138>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a14      	ldr	r2, [pc, #80]	; (8007a78 <xPortStartScheduler+0x138>)
 8007a28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a2e:	f000 f8dd 	bl	8007bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a32:	4b12      	ldr	r3, [pc, #72]	; (8007a7c <xPortStartScheduler+0x13c>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a38:	f000 f8fc 	bl	8007c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a3c:	4b10      	ldr	r3, [pc, #64]	; (8007a80 <xPortStartScheduler+0x140>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a0f      	ldr	r2, [pc, #60]	; (8007a80 <xPortStartScheduler+0x140>)
 8007a42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a48:	f7ff ff66 	bl	8007918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a4c:	f7ff f826 	bl	8006a9c <vTaskSwitchContext>
	prvTaskExitError();
 8007a50:	f7ff ff22 	bl	8007898 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	e000ed00 	.word	0xe000ed00
 8007a64:	410fc271 	.word	0x410fc271
 8007a68:	410fc270 	.word	0x410fc270
 8007a6c:	e000e400 	.word	0xe000e400
 8007a70:	20000e8c 	.word	0x20000e8c
 8007a74:	20000e90 	.word	0x20000e90
 8007a78:	e000ed20 	.word	0xe000ed20
 8007a7c:	2000000c 	.word	0x2000000c
 8007a80:	e000ef34 	.word	0xe000ef34

08007a84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	607b      	str	r3, [r7, #4]
}
 8007a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a9e:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <vPortEnterCritical+0x58>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	4a0d      	ldr	r2, [pc, #52]	; (8007adc <vPortEnterCritical+0x58>)
 8007aa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007aa8:	4b0c      	ldr	r3, [pc, #48]	; (8007adc <vPortEnterCritical+0x58>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d10f      	bne.n	8007ad0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <vPortEnterCritical+0x5c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	603b      	str	r3, [r7, #0]
}
 8007acc:	bf00      	nop
 8007ace:	e7fe      	b.n	8007ace <vPortEnterCritical+0x4a>
	}
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	2000000c 	.word	0x2000000c
 8007ae0:	e000ed04 	.word	0xe000ed04

08007ae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007aea:	4b12      	ldr	r3, [pc, #72]	; (8007b34 <vPortExitCritical+0x50>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10a      	bne.n	8007b08 <vPortExitCritical+0x24>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	607b      	str	r3, [r7, #4]
}
 8007b04:	bf00      	nop
 8007b06:	e7fe      	b.n	8007b06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b08:	4b0a      	ldr	r3, [pc, #40]	; (8007b34 <vPortExitCritical+0x50>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	4a09      	ldr	r2, [pc, #36]	; (8007b34 <vPortExitCritical+0x50>)
 8007b10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b12:	4b08      	ldr	r3, [pc, #32]	; (8007b34 <vPortExitCritical+0x50>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d105      	bne.n	8007b26 <vPortExitCritical+0x42>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	f383 8811 	msr	BASEPRI, r3
}
 8007b24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	2000000c 	.word	0x2000000c
	...

08007b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b40:	f3ef 8009 	mrs	r0, PSP
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	4b15      	ldr	r3, [pc, #84]	; (8007ba0 <pxCurrentTCBConst>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	f01e 0f10 	tst.w	lr, #16
 8007b50:	bf08      	it	eq
 8007b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	6010      	str	r0, [r2, #0]
 8007b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b64:	f380 8811 	msr	BASEPRI, r0
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f7fe ff94 	bl	8006a9c <vTaskSwitchContext>
 8007b74:	f04f 0000 	mov.w	r0, #0
 8007b78:	f380 8811 	msr	BASEPRI, r0
 8007b7c:	bc09      	pop	{r0, r3}
 8007b7e:	6819      	ldr	r1, [r3, #0]
 8007b80:	6808      	ldr	r0, [r1, #0]
 8007b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b86:	f01e 0f10 	tst.w	lr, #16
 8007b8a:	bf08      	it	eq
 8007b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b90:	f380 8809 	msr	PSP, r0
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	f3af 8000 	nop.w

08007ba0 <pxCurrentTCBConst>:
 8007ba0:	20000c3c 	.word	0x20000c3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop

08007ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	607b      	str	r3, [r7, #4]
}
 8007bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bc2:	f7fe feb3 	bl	800692c <xTaskIncrementTick>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bcc:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <SysTick_Handler+0x40>)
 8007bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	f383 8811 	msr	BASEPRI, r3
}
 8007bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <vPortSetupTimerInterrupt+0x34>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <vPortSetupTimerInterrupt+0x38>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <vPortSetupTimerInterrupt+0x3c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a0a      	ldr	r2, [pc, #40]	; (8007c2c <vPortSetupTimerInterrupt+0x40>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	099b      	lsrs	r3, r3, #6
 8007c08:	4a09      	ldr	r2, [pc, #36]	; (8007c30 <vPortSetupTimerInterrupt+0x44>)
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c0e:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <vPortSetupTimerInterrupt+0x34>)
 8007c10:	2207      	movs	r2, #7
 8007c12:	601a      	str	r2, [r3, #0]
}
 8007c14:	bf00      	nop
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	e000e010 	.word	0xe000e010
 8007c24:	e000e018 	.word	0xe000e018
 8007c28:	20000000 	.word	0x20000000
 8007c2c:	10624dd3 	.word	0x10624dd3
 8007c30:	e000e014 	.word	0xe000e014

08007c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c44 <vPortEnableVFP+0x10>
 8007c38:	6801      	ldr	r1, [r0, #0]
 8007c3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c3e:	6001      	str	r1, [r0, #0]
 8007c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c42:	bf00      	nop
 8007c44:	e000ed88 	.word	0xe000ed88

08007c48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c4e:	f3ef 8305 	mrs	r3, IPSR
 8007c52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b0f      	cmp	r3, #15
 8007c58:	d914      	bls.n	8007c84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c5a:	4a17      	ldr	r2, [pc, #92]	; (8007cb8 <vPortValidateInterruptPriority+0x70>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4413      	add	r3, r2
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c64:	4b15      	ldr	r3, [pc, #84]	; (8007cbc <vPortValidateInterruptPriority+0x74>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	7afa      	ldrb	r2, [r7, #11]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d20a      	bcs.n	8007c84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	607b      	str	r3, [r7, #4]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c84:	4b0e      	ldr	r3, [pc, #56]	; (8007cc0 <vPortValidateInterruptPriority+0x78>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c8c:	4b0d      	ldr	r3, [pc, #52]	; (8007cc4 <vPortValidateInterruptPriority+0x7c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d90a      	bls.n	8007caa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	603b      	str	r3, [r7, #0]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <vPortValidateInterruptPriority+0x60>
	}
 8007caa:	bf00      	nop
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	e000e3f0 	.word	0xe000e3f0
 8007cbc:	20000e8c 	.word	0x20000e8c
 8007cc0:	e000ed0c 	.word	0xe000ed0c
 8007cc4:	20000e90 	.word	0x20000e90

08007cc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08a      	sub	sp, #40	; 0x28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cd4:	f7fe fd70 	bl	80067b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cd8:	4b5b      	ldr	r3, [pc, #364]	; (8007e48 <pvPortMalloc+0x180>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ce0:	f000 f920 	bl	8007f24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ce4:	4b59      	ldr	r3, [pc, #356]	; (8007e4c <pvPortMalloc+0x184>)
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4013      	ands	r3, r2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f040 8093 	bne.w	8007e18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d01d      	beq.n	8007d34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007cf8:	2208      	movs	r2, #8
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f003 0307 	and.w	r3, r3, #7
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d014      	beq.n	8007d34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f023 0307 	bic.w	r3, r3, #7
 8007d10:	3308      	adds	r3, #8
 8007d12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f003 0307 	and.w	r3, r3, #7
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00a      	beq.n	8007d34 <pvPortMalloc+0x6c>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	617b      	str	r3, [r7, #20]
}
 8007d30:	bf00      	nop
 8007d32:	e7fe      	b.n	8007d32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d06e      	beq.n	8007e18 <pvPortMalloc+0x150>
 8007d3a:	4b45      	ldr	r3, [pc, #276]	; (8007e50 <pvPortMalloc+0x188>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d869      	bhi.n	8007e18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d44:	4b43      	ldr	r3, [pc, #268]	; (8007e54 <pvPortMalloc+0x18c>)
 8007d46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d48:	4b42      	ldr	r3, [pc, #264]	; (8007e54 <pvPortMalloc+0x18c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d4e:	e004      	b.n	8007d5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d903      	bls.n	8007d6c <pvPortMalloc+0xa4>
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1f1      	bne.n	8007d50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d6c:	4b36      	ldr	r3, [pc, #216]	; (8007e48 <pvPortMalloc+0x180>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d050      	beq.n	8007e18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2208      	movs	r2, #8
 8007d7c:	4413      	add	r3, r2
 8007d7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	1ad2      	subs	r2, r2, r3
 8007d90:	2308      	movs	r3, #8
 8007d92:	005b      	lsls	r3, r3, #1
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d91f      	bls.n	8007dd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00a      	beq.n	8007dc0 <pvPortMalloc+0xf8>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	613b      	str	r3, [r7, #16]
}
 8007dbc:	bf00      	nop
 8007dbe:	e7fe      	b.n	8007dbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	1ad2      	subs	r2, r2, r3
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dd2:	69b8      	ldr	r0, [r7, #24]
 8007dd4:	f000 f908 	bl	8007fe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007dd8:	4b1d      	ldr	r3, [pc, #116]	; (8007e50 <pvPortMalloc+0x188>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	4a1b      	ldr	r2, [pc, #108]	; (8007e50 <pvPortMalloc+0x188>)
 8007de4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007de6:	4b1a      	ldr	r3, [pc, #104]	; (8007e50 <pvPortMalloc+0x188>)
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	4b1b      	ldr	r3, [pc, #108]	; (8007e58 <pvPortMalloc+0x190>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d203      	bcs.n	8007dfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007df2:	4b17      	ldr	r3, [pc, #92]	; (8007e50 <pvPortMalloc+0x188>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a18      	ldr	r2, [pc, #96]	; (8007e58 <pvPortMalloc+0x190>)
 8007df8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <pvPortMalloc+0x184>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	431a      	orrs	r2, r3
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e0e:	4b13      	ldr	r3, [pc, #76]	; (8007e5c <pvPortMalloc+0x194>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3301      	adds	r3, #1
 8007e14:	4a11      	ldr	r2, [pc, #68]	; (8007e5c <pvPortMalloc+0x194>)
 8007e16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e18:	f7fe fcdc 	bl	80067d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	f003 0307 	and.w	r3, r3, #7
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00a      	beq.n	8007e3c <pvPortMalloc+0x174>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	60fb      	str	r3, [r7, #12]
}
 8007e38:	bf00      	nop
 8007e3a:	e7fe      	b.n	8007e3a <pvPortMalloc+0x172>
	return pvReturn;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3728      	adds	r7, #40	; 0x28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20001a54 	.word	0x20001a54
 8007e4c:	20001a68 	.word	0x20001a68
 8007e50:	20001a58 	.word	0x20001a58
 8007e54:	20001a4c 	.word	0x20001a4c
 8007e58:	20001a5c 	.word	0x20001a5c
 8007e5c:	20001a60 	.word	0x20001a60

08007e60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d04d      	beq.n	8007f0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e72:	2308      	movs	r3, #8
 8007e74:	425b      	negs	r3, r3
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	4413      	add	r3, r2
 8007e7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	4b24      	ldr	r3, [pc, #144]	; (8007f18 <vPortFree+0xb8>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4013      	ands	r3, r2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10a      	bne.n	8007ea4 <vPortFree+0x44>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	60fb      	str	r3, [r7, #12]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00a      	beq.n	8007ec2 <vPortFree+0x62>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	60bb      	str	r3, [r7, #8]
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	4b14      	ldr	r3, [pc, #80]	; (8007f18 <vPortFree+0xb8>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01e      	beq.n	8007f0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d11a      	bne.n	8007f0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	4b0e      	ldr	r3, [pc, #56]	; (8007f18 <vPortFree+0xb8>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	43db      	mvns	r3, r3
 8007ee2:	401a      	ands	r2, r3
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ee8:	f7fe fc66 	bl	80067b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <vPortFree+0xbc>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	4a09      	ldr	r2, [pc, #36]	; (8007f1c <vPortFree+0xbc>)
 8007ef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007efa:	6938      	ldr	r0, [r7, #16]
 8007efc:	f000 f874 	bl	8007fe8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <vPortFree+0xc0>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3301      	adds	r3, #1
 8007f06:	4a06      	ldr	r2, [pc, #24]	; (8007f20 <vPortFree+0xc0>)
 8007f08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f0a:	f7fe fc63 	bl	80067d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f0e:	bf00      	nop
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20001a68 	.word	0x20001a68
 8007f1c:	20001a58 	.word	0x20001a58
 8007f20:	20001a64 	.word	0x20001a64

08007f24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007f2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f30:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <prvHeapInit+0xac>)
 8007f32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00c      	beq.n	8007f58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3307      	adds	r3, #7
 8007f42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 0307 	bic.w	r3, r3, #7
 8007f4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	4a1f      	ldr	r2, [pc, #124]	; (8007fd0 <prvHeapInit+0xac>)
 8007f54:	4413      	add	r3, r2
 8007f56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f5c:	4a1d      	ldr	r2, [pc, #116]	; (8007fd4 <prvHeapInit+0xb0>)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f62:	4b1c      	ldr	r3, [pc, #112]	; (8007fd4 <prvHeapInit+0xb0>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f70:	2208      	movs	r2, #8
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0307 	bic.w	r3, r3, #7
 8007f7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a15      	ldr	r2, [pc, #84]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f86:	4b14      	ldr	r3, [pc, #80]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f8e:	4b12      	ldr	r3, [pc, #72]	; (8007fd8 <prvHeapInit+0xb4>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fa4:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <prvHeapInit+0xb4>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	4a0a      	ldr	r2, [pc, #40]	; (8007fdc <prvHeapInit+0xb8>)
 8007fb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	4a09      	ldr	r2, [pc, #36]	; (8007fe0 <prvHeapInit+0xbc>)
 8007fba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fbc:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <prvHeapInit+0xc0>)
 8007fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fc2:	601a      	str	r2, [r3, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20000e94 	.word	0x20000e94
 8007fd4:	20001a4c 	.word	0x20001a4c
 8007fd8:	20001a54 	.word	0x20001a54
 8007fdc:	20001a5c 	.word	0x20001a5c
 8007fe0:	20001a58 	.word	0x20001a58
 8007fe4:	20001a68 	.word	0x20001a68

08007fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ff0:	4b28      	ldr	r3, [pc, #160]	; (8008094 <prvInsertBlockIntoFreeList+0xac>)
 8007ff2:	60fb      	str	r3, [r7, #12]
 8007ff4:	e002      	b.n	8007ffc <prvInsertBlockIntoFreeList+0x14>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d8f7      	bhi.n	8007ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	4413      	add	r3, r2
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	429a      	cmp	r2, r3
 8008016:	d108      	bne.n	800802a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	441a      	add	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	441a      	add	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	429a      	cmp	r2, r3
 800803c:	d118      	bne.n	8008070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	4b15      	ldr	r3, [pc, #84]	; (8008098 <prvInsertBlockIntoFreeList+0xb0>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	429a      	cmp	r2, r3
 8008048:	d00d      	beq.n	8008066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	441a      	add	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	e008      	b.n	8008078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008066:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <prvInsertBlockIntoFreeList+0xb0>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	601a      	str	r2, [r3, #0]
 800806e:	e003      	b.n	8008078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	429a      	cmp	r2, r3
 800807e:	d002      	beq.n	8008086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20001a4c 	.word	0x20001a4c
 8008098:	20001a54 	.word	0x20001a54

0800809c <__errno>:
 800809c:	4b01      	ldr	r3, [pc, #4]	; (80080a4 <__errno+0x8>)
 800809e:	6818      	ldr	r0, [r3, #0]
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20000010 	.word	0x20000010

080080a8 <std>:
 80080a8:	2300      	movs	r3, #0
 80080aa:	b510      	push	{r4, lr}
 80080ac:	4604      	mov	r4, r0
 80080ae:	e9c0 3300 	strd	r3, r3, [r0]
 80080b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080b6:	6083      	str	r3, [r0, #8]
 80080b8:	8181      	strh	r1, [r0, #12]
 80080ba:	6643      	str	r3, [r0, #100]	; 0x64
 80080bc:	81c2      	strh	r2, [r0, #14]
 80080be:	6183      	str	r3, [r0, #24]
 80080c0:	4619      	mov	r1, r3
 80080c2:	2208      	movs	r2, #8
 80080c4:	305c      	adds	r0, #92	; 0x5c
 80080c6:	f000 f91a 	bl	80082fe <memset>
 80080ca:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <std+0x38>)
 80080cc:	6263      	str	r3, [r4, #36]	; 0x24
 80080ce:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <std+0x3c>)
 80080d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <std+0x40>)
 80080d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080d6:	4b05      	ldr	r3, [pc, #20]	; (80080ec <std+0x44>)
 80080d8:	6224      	str	r4, [r4, #32]
 80080da:	6323      	str	r3, [r4, #48]	; 0x30
 80080dc:	bd10      	pop	{r4, pc}
 80080de:	bf00      	nop
 80080e0:	0800926d 	.word	0x0800926d
 80080e4:	0800928f 	.word	0x0800928f
 80080e8:	080092c7 	.word	0x080092c7
 80080ec:	080092eb 	.word	0x080092eb

080080f0 <_cleanup_r>:
 80080f0:	4901      	ldr	r1, [pc, #4]	; (80080f8 <_cleanup_r+0x8>)
 80080f2:	f000 b8af 	b.w	8008254 <_fwalk_reent>
 80080f6:	bf00      	nop
 80080f8:	0800b051 	.word	0x0800b051

080080fc <__sfmoreglue>:
 80080fc:	b570      	push	{r4, r5, r6, lr}
 80080fe:	2268      	movs	r2, #104	; 0x68
 8008100:	1e4d      	subs	r5, r1, #1
 8008102:	4355      	muls	r5, r2
 8008104:	460e      	mov	r6, r1
 8008106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800810a:	f000 f921 	bl	8008350 <_malloc_r>
 800810e:	4604      	mov	r4, r0
 8008110:	b140      	cbz	r0, 8008124 <__sfmoreglue+0x28>
 8008112:	2100      	movs	r1, #0
 8008114:	e9c0 1600 	strd	r1, r6, [r0]
 8008118:	300c      	adds	r0, #12
 800811a:	60a0      	str	r0, [r4, #8]
 800811c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008120:	f000 f8ed 	bl	80082fe <memset>
 8008124:	4620      	mov	r0, r4
 8008126:	bd70      	pop	{r4, r5, r6, pc}

08008128 <__sfp_lock_acquire>:
 8008128:	4801      	ldr	r0, [pc, #4]	; (8008130 <__sfp_lock_acquire+0x8>)
 800812a:	f000 b8d8 	b.w	80082de <__retarget_lock_acquire_recursive>
 800812e:	bf00      	nop
 8008130:	20001a6d 	.word	0x20001a6d

08008134 <__sfp_lock_release>:
 8008134:	4801      	ldr	r0, [pc, #4]	; (800813c <__sfp_lock_release+0x8>)
 8008136:	f000 b8d3 	b.w	80082e0 <__retarget_lock_release_recursive>
 800813a:	bf00      	nop
 800813c:	20001a6d 	.word	0x20001a6d

08008140 <__sinit_lock_acquire>:
 8008140:	4801      	ldr	r0, [pc, #4]	; (8008148 <__sinit_lock_acquire+0x8>)
 8008142:	f000 b8cc 	b.w	80082de <__retarget_lock_acquire_recursive>
 8008146:	bf00      	nop
 8008148:	20001a6e 	.word	0x20001a6e

0800814c <__sinit_lock_release>:
 800814c:	4801      	ldr	r0, [pc, #4]	; (8008154 <__sinit_lock_release+0x8>)
 800814e:	f000 b8c7 	b.w	80082e0 <__retarget_lock_release_recursive>
 8008152:	bf00      	nop
 8008154:	20001a6e 	.word	0x20001a6e

08008158 <__sinit>:
 8008158:	b510      	push	{r4, lr}
 800815a:	4604      	mov	r4, r0
 800815c:	f7ff fff0 	bl	8008140 <__sinit_lock_acquire>
 8008160:	69a3      	ldr	r3, [r4, #24]
 8008162:	b11b      	cbz	r3, 800816c <__sinit+0x14>
 8008164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008168:	f7ff bff0 	b.w	800814c <__sinit_lock_release>
 800816c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008170:	6523      	str	r3, [r4, #80]	; 0x50
 8008172:	4b13      	ldr	r3, [pc, #76]	; (80081c0 <__sinit+0x68>)
 8008174:	4a13      	ldr	r2, [pc, #76]	; (80081c4 <__sinit+0x6c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	62a2      	str	r2, [r4, #40]	; 0x28
 800817a:	42a3      	cmp	r3, r4
 800817c:	bf04      	itt	eq
 800817e:	2301      	moveq	r3, #1
 8008180:	61a3      	streq	r3, [r4, #24]
 8008182:	4620      	mov	r0, r4
 8008184:	f000 f820 	bl	80081c8 <__sfp>
 8008188:	6060      	str	r0, [r4, #4]
 800818a:	4620      	mov	r0, r4
 800818c:	f000 f81c 	bl	80081c8 <__sfp>
 8008190:	60a0      	str	r0, [r4, #8]
 8008192:	4620      	mov	r0, r4
 8008194:	f000 f818 	bl	80081c8 <__sfp>
 8008198:	2200      	movs	r2, #0
 800819a:	60e0      	str	r0, [r4, #12]
 800819c:	2104      	movs	r1, #4
 800819e:	6860      	ldr	r0, [r4, #4]
 80081a0:	f7ff ff82 	bl	80080a8 <std>
 80081a4:	68a0      	ldr	r0, [r4, #8]
 80081a6:	2201      	movs	r2, #1
 80081a8:	2109      	movs	r1, #9
 80081aa:	f7ff ff7d 	bl	80080a8 <std>
 80081ae:	68e0      	ldr	r0, [r4, #12]
 80081b0:	2202      	movs	r2, #2
 80081b2:	2112      	movs	r1, #18
 80081b4:	f7ff ff78 	bl	80080a8 <std>
 80081b8:	2301      	movs	r3, #1
 80081ba:	61a3      	str	r3, [r4, #24]
 80081bc:	e7d2      	b.n	8008164 <__sinit+0xc>
 80081be:	bf00      	nop
 80081c0:	0800cc60 	.word	0x0800cc60
 80081c4:	080080f1 	.word	0x080080f1

080081c8 <__sfp>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	4607      	mov	r7, r0
 80081cc:	f7ff ffac 	bl	8008128 <__sfp_lock_acquire>
 80081d0:	4b1e      	ldr	r3, [pc, #120]	; (800824c <__sfp+0x84>)
 80081d2:	681e      	ldr	r6, [r3, #0]
 80081d4:	69b3      	ldr	r3, [r6, #24]
 80081d6:	b913      	cbnz	r3, 80081de <__sfp+0x16>
 80081d8:	4630      	mov	r0, r6
 80081da:	f7ff ffbd 	bl	8008158 <__sinit>
 80081de:	3648      	adds	r6, #72	; 0x48
 80081e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	d503      	bpl.n	80081f0 <__sfp+0x28>
 80081e8:	6833      	ldr	r3, [r6, #0]
 80081ea:	b30b      	cbz	r3, 8008230 <__sfp+0x68>
 80081ec:	6836      	ldr	r6, [r6, #0]
 80081ee:	e7f7      	b.n	80081e0 <__sfp+0x18>
 80081f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081f4:	b9d5      	cbnz	r5, 800822c <__sfp+0x64>
 80081f6:	4b16      	ldr	r3, [pc, #88]	; (8008250 <__sfp+0x88>)
 80081f8:	60e3      	str	r3, [r4, #12]
 80081fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081fe:	6665      	str	r5, [r4, #100]	; 0x64
 8008200:	f000 f86c 	bl	80082dc <__retarget_lock_init_recursive>
 8008204:	f7ff ff96 	bl	8008134 <__sfp_lock_release>
 8008208:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800820c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008210:	6025      	str	r5, [r4, #0]
 8008212:	61a5      	str	r5, [r4, #24]
 8008214:	2208      	movs	r2, #8
 8008216:	4629      	mov	r1, r5
 8008218:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800821c:	f000 f86f 	bl	80082fe <memset>
 8008220:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008224:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008228:	4620      	mov	r0, r4
 800822a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800822c:	3468      	adds	r4, #104	; 0x68
 800822e:	e7d9      	b.n	80081e4 <__sfp+0x1c>
 8008230:	2104      	movs	r1, #4
 8008232:	4638      	mov	r0, r7
 8008234:	f7ff ff62 	bl	80080fc <__sfmoreglue>
 8008238:	4604      	mov	r4, r0
 800823a:	6030      	str	r0, [r6, #0]
 800823c:	2800      	cmp	r0, #0
 800823e:	d1d5      	bne.n	80081ec <__sfp+0x24>
 8008240:	f7ff ff78 	bl	8008134 <__sfp_lock_release>
 8008244:	230c      	movs	r3, #12
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	e7ee      	b.n	8008228 <__sfp+0x60>
 800824a:	bf00      	nop
 800824c:	0800cc60 	.word	0x0800cc60
 8008250:	ffff0001 	.word	0xffff0001

08008254 <_fwalk_reent>:
 8008254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008258:	4606      	mov	r6, r0
 800825a:	4688      	mov	r8, r1
 800825c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008260:	2700      	movs	r7, #0
 8008262:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008266:	f1b9 0901 	subs.w	r9, r9, #1
 800826a:	d505      	bpl.n	8008278 <_fwalk_reent+0x24>
 800826c:	6824      	ldr	r4, [r4, #0]
 800826e:	2c00      	cmp	r4, #0
 8008270:	d1f7      	bne.n	8008262 <_fwalk_reent+0xe>
 8008272:	4638      	mov	r0, r7
 8008274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008278:	89ab      	ldrh	r3, [r5, #12]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d907      	bls.n	800828e <_fwalk_reent+0x3a>
 800827e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008282:	3301      	adds	r3, #1
 8008284:	d003      	beq.n	800828e <_fwalk_reent+0x3a>
 8008286:	4629      	mov	r1, r5
 8008288:	4630      	mov	r0, r6
 800828a:	47c0      	blx	r8
 800828c:	4307      	orrs	r7, r0
 800828e:	3568      	adds	r5, #104	; 0x68
 8008290:	e7e9      	b.n	8008266 <_fwalk_reent+0x12>
	...

08008294 <__libc_init_array>:
 8008294:	b570      	push	{r4, r5, r6, lr}
 8008296:	4d0d      	ldr	r5, [pc, #52]	; (80082cc <__libc_init_array+0x38>)
 8008298:	4c0d      	ldr	r4, [pc, #52]	; (80082d0 <__libc_init_array+0x3c>)
 800829a:	1b64      	subs	r4, r4, r5
 800829c:	10a4      	asrs	r4, r4, #2
 800829e:	2600      	movs	r6, #0
 80082a0:	42a6      	cmp	r6, r4
 80082a2:	d109      	bne.n	80082b8 <__libc_init_array+0x24>
 80082a4:	4d0b      	ldr	r5, [pc, #44]	; (80082d4 <__libc_init_array+0x40>)
 80082a6:	4c0c      	ldr	r4, [pc, #48]	; (80082d8 <__libc_init_array+0x44>)
 80082a8:	f004 fc06 	bl	800cab8 <_init>
 80082ac:	1b64      	subs	r4, r4, r5
 80082ae:	10a4      	asrs	r4, r4, #2
 80082b0:	2600      	movs	r6, #0
 80082b2:	42a6      	cmp	r6, r4
 80082b4:	d105      	bne.n	80082c2 <__libc_init_array+0x2e>
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082bc:	4798      	blx	r3
 80082be:	3601      	adds	r6, #1
 80082c0:	e7ee      	b.n	80082a0 <__libc_init_array+0xc>
 80082c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c6:	4798      	blx	r3
 80082c8:	3601      	adds	r6, #1
 80082ca:	e7f2      	b.n	80082b2 <__libc_init_array+0x1e>
 80082cc:	0800d0b0 	.word	0x0800d0b0
 80082d0:	0800d0b0 	.word	0x0800d0b0
 80082d4:	0800d0b0 	.word	0x0800d0b0
 80082d8:	0800d0b4 	.word	0x0800d0b4

080082dc <__retarget_lock_init_recursive>:
 80082dc:	4770      	bx	lr

080082de <__retarget_lock_acquire_recursive>:
 80082de:	4770      	bx	lr

080082e0 <__retarget_lock_release_recursive>:
 80082e0:	4770      	bx	lr

080082e2 <memcpy>:
 80082e2:	440a      	add	r2, r1
 80082e4:	4291      	cmp	r1, r2
 80082e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80082ea:	d100      	bne.n	80082ee <memcpy+0xc>
 80082ec:	4770      	bx	lr
 80082ee:	b510      	push	{r4, lr}
 80082f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082f8:	4291      	cmp	r1, r2
 80082fa:	d1f9      	bne.n	80082f0 <memcpy+0xe>
 80082fc:	bd10      	pop	{r4, pc}

080082fe <memset>:
 80082fe:	4402      	add	r2, r0
 8008300:	4603      	mov	r3, r0
 8008302:	4293      	cmp	r3, r2
 8008304:	d100      	bne.n	8008308 <memset+0xa>
 8008306:	4770      	bx	lr
 8008308:	f803 1b01 	strb.w	r1, [r3], #1
 800830c:	e7f9      	b.n	8008302 <memset+0x4>
	...

08008310 <sbrk_aligned>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	4e0e      	ldr	r6, [pc, #56]	; (800834c <sbrk_aligned+0x3c>)
 8008314:	460c      	mov	r4, r1
 8008316:	6831      	ldr	r1, [r6, #0]
 8008318:	4605      	mov	r5, r0
 800831a:	b911      	cbnz	r1, 8008322 <sbrk_aligned+0x12>
 800831c:	f000 ff70 	bl	8009200 <_sbrk_r>
 8008320:	6030      	str	r0, [r6, #0]
 8008322:	4621      	mov	r1, r4
 8008324:	4628      	mov	r0, r5
 8008326:	f000 ff6b 	bl	8009200 <_sbrk_r>
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	d00a      	beq.n	8008344 <sbrk_aligned+0x34>
 800832e:	1cc4      	adds	r4, r0, #3
 8008330:	f024 0403 	bic.w	r4, r4, #3
 8008334:	42a0      	cmp	r0, r4
 8008336:	d007      	beq.n	8008348 <sbrk_aligned+0x38>
 8008338:	1a21      	subs	r1, r4, r0
 800833a:	4628      	mov	r0, r5
 800833c:	f000 ff60 	bl	8009200 <_sbrk_r>
 8008340:	3001      	adds	r0, #1
 8008342:	d101      	bne.n	8008348 <sbrk_aligned+0x38>
 8008344:	f04f 34ff 	mov.w	r4, #4294967295
 8008348:	4620      	mov	r0, r4
 800834a:	bd70      	pop	{r4, r5, r6, pc}
 800834c:	20001a74 	.word	0x20001a74

08008350 <_malloc_r>:
 8008350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008354:	1ccd      	adds	r5, r1, #3
 8008356:	f025 0503 	bic.w	r5, r5, #3
 800835a:	3508      	adds	r5, #8
 800835c:	2d0c      	cmp	r5, #12
 800835e:	bf38      	it	cc
 8008360:	250c      	movcc	r5, #12
 8008362:	2d00      	cmp	r5, #0
 8008364:	4607      	mov	r7, r0
 8008366:	db01      	blt.n	800836c <_malloc_r+0x1c>
 8008368:	42a9      	cmp	r1, r5
 800836a:	d905      	bls.n	8008378 <_malloc_r+0x28>
 800836c:	230c      	movs	r3, #12
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	2600      	movs	r6, #0
 8008372:	4630      	mov	r0, r6
 8008374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008378:	4e2e      	ldr	r6, [pc, #184]	; (8008434 <_malloc_r+0xe4>)
 800837a:	f003 fabd 	bl	800b8f8 <__malloc_lock>
 800837e:	6833      	ldr	r3, [r6, #0]
 8008380:	461c      	mov	r4, r3
 8008382:	bb34      	cbnz	r4, 80083d2 <_malloc_r+0x82>
 8008384:	4629      	mov	r1, r5
 8008386:	4638      	mov	r0, r7
 8008388:	f7ff ffc2 	bl	8008310 <sbrk_aligned>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	4604      	mov	r4, r0
 8008390:	d14d      	bne.n	800842e <_malloc_r+0xde>
 8008392:	6834      	ldr	r4, [r6, #0]
 8008394:	4626      	mov	r6, r4
 8008396:	2e00      	cmp	r6, #0
 8008398:	d140      	bne.n	800841c <_malloc_r+0xcc>
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	4631      	mov	r1, r6
 800839e:	4638      	mov	r0, r7
 80083a0:	eb04 0803 	add.w	r8, r4, r3
 80083a4:	f000 ff2c 	bl	8009200 <_sbrk_r>
 80083a8:	4580      	cmp	r8, r0
 80083aa:	d13a      	bne.n	8008422 <_malloc_r+0xd2>
 80083ac:	6821      	ldr	r1, [r4, #0]
 80083ae:	3503      	adds	r5, #3
 80083b0:	1a6d      	subs	r5, r5, r1
 80083b2:	f025 0503 	bic.w	r5, r5, #3
 80083b6:	3508      	adds	r5, #8
 80083b8:	2d0c      	cmp	r5, #12
 80083ba:	bf38      	it	cc
 80083bc:	250c      	movcc	r5, #12
 80083be:	4629      	mov	r1, r5
 80083c0:	4638      	mov	r0, r7
 80083c2:	f7ff ffa5 	bl	8008310 <sbrk_aligned>
 80083c6:	3001      	adds	r0, #1
 80083c8:	d02b      	beq.n	8008422 <_malloc_r+0xd2>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	442b      	add	r3, r5
 80083ce:	6023      	str	r3, [r4, #0]
 80083d0:	e00e      	b.n	80083f0 <_malloc_r+0xa0>
 80083d2:	6822      	ldr	r2, [r4, #0]
 80083d4:	1b52      	subs	r2, r2, r5
 80083d6:	d41e      	bmi.n	8008416 <_malloc_r+0xc6>
 80083d8:	2a0b      	cmp	r2, #11
 80083da:	d916      	bls.n	800840a <_malloc_r+0xba>
 80083dc:	1961      	adds	r1, r4, r5
 80083de:	42a3      	cmp	r3, r4
 80083e0:	6025      	str	r5, [r4, #0]
 80083e2:	bf18      	it	ne
 80083e4:	6059      	strne	r1, [r3, #4]
 80083e6:	6863      	ldr	r3, [r4, #4]
 80083e8:	bf08      	it	eq
 80083ea:	6031      	streq	r1, [r6, #0]
 80083ec:	5162      	str	r2, [r4, r5]
 80083ee:	604b      	str	r3, [r1, #4]
 80083f0:	4638      	mov	r0, r7
 80083f2:	f104 060b 	add.w	r6, r4, #11
 80083f6:	f003 fa85 	bl	800b904 <__malloc_unlock>
 80083fa:	f026 0607 	bic.w	r6, r6, #7
 80083fe:	1d23      	adds	r3, r4, #4
 8008400:	1af2      	subs	r2, r6, r3
 8008402:	d0b6      	beq.n	8008372 <_malloc_r+0x22>
 8008404:	1b9b      	subs	r3, r3, r6
 8008406:	50a3      	str	r3, [r4, r2]
 8008408:	e7b3      	b.n	8008372 <_malloc_r+0x22>
 800840a:	6862      	ldr	r2, [r4, #4]
 800840c:	42a3      	cmp	r3, r4
 800840e:	bf0c      	ite	eq
 8008410:	6032      	streq	r2, [r6, #0]
 8008412:	605a      	strne	r2, [r3, #4]
 8008414:	e7ec      	b.n	80083f0 <_malloc_r+0xa0>
 8008416:	4623      	mov	r3, r4
 8008418:	6864      	ldr	r4, [r4, #4]
 800841a:	e7b2      	b.n	8008382 <_malloc_r+0x32>
 800841c:	4634      	mov	r4, r6
 800841e:	6876      	ldr	r6, [r6, #4]
 8008420:	e7b9      	b.n	8008396 <_malloc_r+0x46>
 8008422:	230c      	movs	r3, #12
 8008424:	603b      	str	r3, [r7, #0]
 8008426:	4638      	mov	r0, r7
 8008428:	f003 fa6c 	bl	800b904 <__malloc_unlock>
 800842c:	e7a1      	b.n	8008372 <_malloc_r+0x22>
 800842e:	6025      	str	r5, [r4, #0]
 8008430:	e7de      	b.n	80083f0 <_malloc_r+0xa0>
 8008432:	bf00      	nop
 8008434:	20001a70 	.word	0x20001a70

08008438 <__cvt>:
 8008438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800843c:	ec55 4b10 	vmov	r4, r5, d0
 8008440:	2d00      	cmp	r5, #0
 8008442:	460e      	mov	r6, r1
 8008444:	4619      	mov	r1, r3
 8008446:	462b      	mov	r3, r5
 8008448:	bfbb      	ittet	lt
 800844a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800844e:	461d      	movlt	r5, r3
 8008450:	2300      	movge	r3, #0
 8008452:	232d      	movlt	r3, #45	; 0x2d
 8008454:	700b      	strb	r3, [r1, #0]
 8008456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008458:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800845c:	4691      	mov	r9, r2
 800845e:	f023 0820 	bic.w	r8, r3, #32
 8008462:	bfbc      	itt	lt
 8008464:	4622      	movlt	r2, r4
 8008466:	4614      	movlt	r4, r2
 8008468:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800846c:	d005      	beq.n	800847a <__cvt+0x42>
 800846e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008472:	d100      	bne.n	8008476 <__cvt+0x3e>
 8008474:	3601      	adds	r6, #1
 8008476:	2102      	movs	r1, #2
 8008478:	e000      	b.n	800847c <__cvt+0x44>
 800847a:	2103      	movs	r1, #3
 800847c:	ab03      	add	r3, sp, #12
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	ab02      	add	r3, sp, #8
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	ec45 4b10 	vmov	d0, r4, r5
 8008488:	4653      	mov	r3, sl
 800848a:	4632      	mov	r2, r6
 800848c:	f001 ff6c 	bl	800a368 <_dtoa_r>
 8008490:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008494:	4607      	mov	r7, r0
 8008496:	d102      	bne.n	800849e <__cvt+0x66>
 8008498:	f019 0f01 	tst.w	r9, #1
 800849c:	d022      	beq.n	80084e4 <__cvt+0xac>
 800849e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084a2:	eb07 0906 	add.w	r9, r7, r6
 80084a6:	d110      	bne.n	80084ca <__cvt+0x92>
 80084a8:	783b      	ldrb	r3, [r7, #0]
 80084aa:	2b30      	cmp	r3, #48	; 0x30
 80084ac:	d10a      	bne.n	80084c4 <__cvt+0x8c>
 80084ae:	2200      	movs	r2, #0
 80084b0:	2300      	movs	r3, #0
 80084b2:	4620      	mov	r0, r4
 80084b4:	4629      	mov	r1, r5
 80084b6:	f7f8 fb07 	bl	8000ac8 <__aeabi_dcmpeq>
 80084ba:	b918      	cbnz	r0, 80084c4 <__cvt+0x8c>
 80084bc:	f1c6 0601 	rsb	r6, r6, #1
 80084c0:	f8ca 6000 	str.w	r6, [sl]
 80084c4:	f8da 3000 	ldr.w	r3, [sl]
 80084c8:	4499      	add	r9, r3
 80084ca:	2200      	movs	r2, #0
 80084cc:	2300      	movs	r3, #0
 80084ce:	4620      	mov	r0, r4
 80084d0:	4629      	mov	r1, r5
 80084d2:	f7f8 faf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80084d6:	b108      	cbz	r0, 80084dc <__cvt+0xa4>
 80084d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80084dc:	2230      	movs	r2, #48	; 0x30
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	454b      	cmp	r3, r9
 80084e2:	d307      	bcc.n	80084f4 <__cvt+0xbc>
 80084e4:	9b03      	ldr	r3, [sp, #12]
 80084e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084e8:	1bdb      	subs	r3, r3, r7
 80084ea:	4638      	mov	r0, r7
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	b004      	add	sp, #16
 80084f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f4:	1c59      	adds	r1, r3, #1
 80084f6:	9103      	str	r1, [sp, #12]
 80084f8:	701a      	strb	r2, [r3, #0]
 80084fa:	e7f0      	b.n	80084de <__cvt+0xa6>

080084fc <__exponent>:
 80084fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084fe:	4603      	mov	r3, r0
 8008500:	2900      	cmp	r1, #0
 8008502:	bfb8      	it	lt
 8008504:	4249      	neglt	r1, r1
 8008506:	f803 2b02 	strb.w	r2, [r3], #2
 800850a:	bfb4      	ite	lt
 800850c:	222d      	movlt	r2, #45	; 0x2d
 800850e:	222b      	movge	r2, #43	; 0x2b
 8008510:	2909      	cmp	r1, #9
 8008512:	7042      	strb	r2, [r0, #1]
 8008514:	dd2a      	ble.n	800856c <__exponent+0x70>
 8008516:	f10d 0407 	add.w	r4, sp, #7
 800851a:	46a4      	mov	ip, r4
 800851c:	270a      	movs	r7, #10
 800851e:	46a6      	mov	lr, r4
 8008520:	460a      	mov	r2, r1
 8008522:	fb91 f6f7 	sdiv	r6, r1, r7
 8008526:	fb07 1516 	mls	r5, r7, r6, r1
 800852a:	3530      	adds	r5, #48	; 0x30
 800852c:	2a63      	cmp	r2, #99	; 0x63
 800852e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008532:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008536:	4631      	mov	r1, r6
 8008538:	dcf1      	bgt.n	800851e <__exponent+0x22>
 800853a:	3130      	adds	r1, #48	; 0x30
 800853c:	f1ae 0502 	sub.w	r5, lr, #2
 8008540:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008544:	1c44      	adds	r4, r0, #1
 8008546:	4629      	mov	r1, r5
 8008548:	4561      	cmp	r1, ip
 800854a:	d30a      	bcc.n	8008562 <__exponent+0x66>
 800854c:	f10d 0209 	add.w	r2, sp, #9
 8008550:	eba2 020e 	sub.w	r2, r2, lr
 8008554:	4565      	cmp	r5, ip
 8008556:	bf88      	it	hi
 8008558:	2200      	movhi	r2, #0
 800855a:	4413      	add	r3, r2
 800855c:	1a18      	subs	r0, r3, r0
 800855e:	b003      	add	sp, #12
 8008560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008566:	f804 2f01 	strb.w	r2, [r4, #1]!
 800856a:	e7ed      	b.n	8008548 <__exponent+0x4c>
 800856c:	2330      	movs	r3, #48	; 0x30
 800856e:	3130      	adds	r1, #48	; 0x30
 8008570:	7083      	strb	r3, [r0, #2]
 8008572:	70c1      	strb	r1, [r0, #3]
 8008574:	1d03      	adds	r3, r0, #4
 8008576:	e7f1      	b.n	800855c <__exponent+0x60>

08008578 <_printf_float>:
 8008578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857c:	ed2d 8b02 	vpush	{d8}
 8008580:	b08d      	sub	sp, #52	; 0x34
 8008582:	460c      	mov	r4, r1
 8008584:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008588:	4616      	mov	r6, r2
 800858a:	461f      	mov	r7, r3
 800858c:	4605      	mov	r5, r0
 800858e:	f003 f91d 	bl	800b7cc <_localeconv_r>
 8008592:	f8d0 a000 	ldr.w	sl, [r0]
 8008596:	4650      	mov	r0, sl
 8008598:	f7f7 fe1a 	bl	80001d0 <strlen>
 800859c:	2300      	movs	r3, #0
 800859e:	930a      	str	r3, [sp, #40]	; 0x28
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	9305      	str	r3, [sp, #20]
 80085a4:	f8d8 3000 	ldr.w	r3, [r8]
 80085a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80085ac:	3307      	adds	r3, #7
 80085ae:	f023 0307 	bic.w	r3, r3, #7
 80085b2:	f103 0208 	add.w	r2, r3, #8
 80085b6:	f8c8 2000 	str.w	r2, [r8]
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80085c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80085c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085ca:	9307      	str	r3, [sp, #28]
 80085cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80085d0:	ee08 0a10 	vmov	s16, r0
 80085d4:	4b9f      	ldr	r3, [pc, #636]	; (8008854 <_printf_float+0x2dc>)
 80085d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085da:	f04f 32ff 	mov.w	r2, #4294967295
 80085de:	f7f8 faa5 	bl	8000b2c <__aeabi_dcmpun>
 80085e2:	bb88      	cbnz	r0, 8008648 <_printf_float+0xd0>
 80085e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085e8:	4b9a      	ldr	r3, [pc, #616]	; (8008854 <_printf_float+0x2dc>)
 80085ea:	f04f 32ff 	mov.w	r2, #4294967295
 80085ee:	f7f8 fa7f 	bl	8000af0 <__aeabi_dcmple>
 80085f2:	bb48      	cbnz	r0, 8008648 <_printf_float+0xd0>
 80085f4:	2200      	movs	r2, #0
 80085f6:	2300      	movs	r3, #0
 80085f8:	4640      	mov	r0, r8
 80085fa:	4649      	mov	r1, r9
 80085fc:	f7f8 fa6e 	bl	8000adc <__aeabi_dcmplt>
 8008600:	b110      	cbz	r0, 8008608 <_printf_float+0x90>
 8008602:	232d      	movs	r3, #45	; 0x2d
 8008604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008608:	4b93      	ldr	r3, [pc, #588]	; (8008858 <_printf_float+0x2e0>)
 800860a:	4894      	ldr	r0, [pc, #592]	; (800885c <_printf_float+0x2e4>)
 800860c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008610:	bf94      	ite	ls
 8008612:	4698      	movls	r8, r3
 8008614:	4680      	movhi	r8, r0
 8008616:	2303      	movs	r3, #3
 8008618:	6123      	str	r3, [r4, #16]
 800861a:	9b05      	ldr	r3, [sp, #20]
 800861c:	f023 0204 	bic.w	r2, r3, #4
 8008620:	6022      	str	r2, [r4, #0]
 8008622:	f04f 0900 	mov.w	r9, #0
 8008626:	9700      	str	r7, [sp, #0]
 8008628:	4633      	mov	r3, r6
 800862a:	aa0b      	add	r2, sp, #44	; 0x2c
 800862c:	4621      	mov	r1, r4
 800862e:	4628      	mov	r0, r5
 8008630:	f000 f9d8 	bl	80089e4 <_printf_common>
 8008634:	3001      	adds	r0, #1
 8008636:	f040 8090 	bne.w	800875a <_printf_float+0x1e2>
 800863a:	f04f 30ff 	mov.w	r0, #4294967295
 800863e:	b00d      	add	sp, #52	; 0x34
 8008640:	ecbd 8b02 	vpop	{d8}
 8008644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008648:	4642      	mov	r2, r8
 800864a:	464b      	mov	r3, r9
 800864c:	4640      	mov	r0, r8
 800864e:	4649      	mov	r1, r9
 8008650:	f7f8 fa6c 	bl	8000b2c <__aeabi_dcmpun>
 8008654:	b140      	cbz	r0, 8008668 <_printf_float+0xf0>
 8008656:	464b      	mov	r3, r9
 8008658:	2b00      	cmp	r3, #0
 800865a:	bfbc      	itt	lt
 800865c:	232d      	movlt	r3, #45	; 0x2d
 800865e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008662:	487f      	ldr	r0, [pc, #508]	; (8008860 <_printf_float+0x2e8>)
 8008664:	4b7f      	ldr	r3, [pc, #508]	; (8008864 <_printf_float+0x2ec>)
 8008666:	e7d1      	b.n	800860c <_printf_float+0x94>
 8008668:	6863      	ldr	r3, [r4, #4]
 800866a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800866e:	9206      	str	r2, [sp, #24]
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	d13f      	bne.n	80086f4 <_printf_float+0x17c>
 8008674:	2306      	movs	r3, #6
 8008676:	6063      	str	r3, [r4, #4]
 8008678:	9b05      	ldr	r3, [sp, #20]
 800867a:	6861      	ldr	r1, [r4, #4]
 800867c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008680:	2300      	movs	r3, #0
 8008682:	9303      	str	r3, [sp, #12]
 8008684:	ab0a      	add	r3, sp, #40	; 0x28
 8008686:	e9cd b301 	strd	fp, r3, [sp, #4]
 800868a:	ab09      	add	r3, sp, #36	; 0x24
 800868c:	ec49 8b10 	vmov	d0, r8, r9
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	6022      	str	r2, [r4, #0]
 8008694:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008698:	4628      	mov	r0, r5
 800869a:	f7ff fecd 	bl	8008438 <__cvt>
 800869e:	9b06      	ldr	r3, [sp, #24]
 80086a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086a2:	2b47      	cmp	r3, #71	; 0x47
 80086a4:	4680      	mov	r8, r0
 80086a6:	d108      	bne.n	80086ba <_printf_float+0x142>
 80086a8:	1cc8      	adds	r0, r1, #3
 80086aa:	db02      	blt.n	80086b2 <_printf_float+0x13a>
 80086ac:	6863      	ldr	r3, [r4, #4]
 80086ae:	4299      	cmp	r1, r3
 80086b0:	dd41      	ble.n	8008736 <_printf_float+0x1be>
 80086b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80086b6:	fa5f fb8b 	uxtb.w	fp, fp
 80086ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086be:	d820      	bhi.n	8008702 <_printf_float+0x18a>
 80086c0:	3901      	subs	r1, #1
 80086c2:	465a      	mov	r2, fp
 80086c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086c8:	9109      	str	r1, [sp, #36]	; 0x24
 80086ca:	f7ff ff17 	bl	80084fc <__exponent>
 80086ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086d0:	1813      	adds	r3, r2, r0
 80086d2:	2a01      	cmp	r2, #1
 80086d4:	4681      	mov	r9, r0
 80086d6:	6123      	str	r3, [r4, #16]
 80086d8:	dc02      	bgt.n	80086e0 <_printf_float+0x168>
 80086da:	6822      	ldr	r2, [r4, #0]
 80086dc:	07d2      	lsls	r2, r2, #31
 80086de:	d501      	bpl.n	80086e4 <_printf_float+0x16c>
 80086e0:	3301      	adds	r3, #1
 80086e2:	6123      	str	r3, [r4, #16]
 80086e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d09c      	beq.n	8008626 <_printf_float+0xae>
 80086ec:	232d      	movs	r3, #45	; 0x2d
 80086ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086f2:	e798      	b.n	8008626 <_printf_float+0xae>
 80086f4:	9a06      	ldr	r2, [sp, #24]
 80086f6:	2a47      	cmp	r2, #71	; 0x47
 80086f8:	d1be      	bne.n	8008678 <_printf_float+0x100>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1bc      	bne.n	8008678 <_printf_float+0x100>
 80086fe:	2301      	movs	r3, #1
 8008700:	e7b9      	b.n	8008676 <_printf_float+0xfe>
 8008702:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008706:	d118      	bne.n	800873a <_printf_float+0x1c2>
 8008708:	2900      	cmp	r1, #0
 800870a:	6863      	ldr	r3, [r4, #4]
 800870c:	dd0b      	ble.n	8008726 <_printf_float+0x1ae>
 800870e:	6121      	str	r1, [r4, #16]
 8008710:	b913      	cbnz	r3, 8008718 <_printf_float+0x1a0>
 8008712:	6822      	ldr	r2, [r4, #0]
 8008714:	07d0      	lsls	r0, r2, #31
 8008716:	d502      	bpl.n	800871e <_printf_float+0x1a6>
 8008718:	3301      	adds	r3, #1
 800871a:	440b      	add	r3, r1
 800871c:	6123      	str	r3, [r4, #16]
 800871e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008720:	f04f 0900 	mov.w	r9, #0
 8008724:	e7de      	b.n	80086e4 <_printf_float+0x16c>
 8008726:	b913      	cbnz	r3, 800872e <_printf_float+0x1b6>
 8008728:	6822      	ldr	r2, [r4, #0]
 800872a:	07d2      	lsls	r2, r2, #31
 800872c:	d501      	bpl.n	8008732 <_printf_float+0x1ba>
 800872e:	3302      	adds	r3, #2
 8008730:	e7f4      	b.n	800871c <_printf_float+0x1a4>
 8008732:	2301      	movs	r3, #1
 8008734:	e7f2      	b.n	800871c <_printf_float+0x1a4>
 8008736:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800873a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873c:	4299      	cmp	r1, r3
 800873e:	db05      	blt.n	800874c <_printf_float+0x1d4>
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	6121      	str	r1, [r4, #16]
 8008744:	07d8      	lsls	r0, r3, #31
 8008746:	d5ea      	bpl.n	800871e <_printf_float+0x1a6>
 8008748:	1c4b      	adds	r3, r1, #1
 800874a:	e7e7      	b.n	800871c <_printf_float+0x1a4>
 800874c:	2900      	cmp	r1, #0
 800874e:	bfd4      	ite	le
 8008750:	f1c1 0202 	rsble	r2, r1, #2
 8008754:	2201      	movgt	r2, #1
 8008756:	4413      	add	r3, r2
 8008758:	e7e0      	b.n	800871c <_printf_float+0x1a4>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	055a      	lsls	r2, r3, #21
 800875e:	d407      	bmi.n	8008770 <_printf_float+0x1f8>
 8008760:	6923      	ldr	r3, [r4, #16]
 8008762:	4642      	mov	r2, r8
 8008764:	4631      	mov	r1, r6
 8008766:	4628      	mov	r0, r5
 8008768:	47b8      	blx	r7
 800876a:	3001      	adds	r0, #1
 800876c:	d12c      	bne.n	80087c8 <_printf_float+0x250>
 800876e:	e764      	b.n	800863a <_printf_float+0xc2>
 8008770:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008774:	f240 80e0 	bls.w	8008938 <_printf_float+0x3c0>
 8008778:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800877c:	2200      	movs	r2, #0
 800877e:	2300      	movs	r3, #0
 8008780:	f7f8 f9a2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008784:	2800      	cmp	r0, #0
 8008786:	d034      	beq.n	80087f2 <_printf_float+0x27a>
 8008788:	4a37      	ldr	r2, [pc, #220]	; (8008868 <_printf_float+0x2f0>)
 800878a:	2301      	movs	r3, #1
 800878c:	4631      	mov	r1, r6
 800878e:	4628      	mov	r0, r5
 8008790:	47b8      	blx	r7
 8008792:	3001      	adds	r0, #1
 8008794:	f43f af51 	beq.w	800863a <_printf_float+0xc2>
 8008798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800879c:	429a      	cmp	r2, r3
 800879e:	db02      	blt.n	80087a6 <_printf_float+0x22e>
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	07d8      	lsls	r0, r3, #31
 80087a4:	d510      	bpl.n	80087c8 <_printf_float+0x250>
 80087a6:	ee18 3a10 	vmov	r3, s16
 80087aa:	4652      	mov	r2, sl
 80087ac:	4631      	mov	r1, r6
 80087ae:	4628      	mov	r0, r5
 80087b0:	47b8      	blx	r7
 80087b2:	3001      	adds	r0, #1
 80087b4:	f43f af41 	beq.w	800863a <_printf_float+0xc2>
 80087b8:	f04f 0800 	mov.w	r8, #0
 80087bc:	f104 091a 	add.w	r9, r4, #26
 80087c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c2:	3b01      	subs	r3, #1
 80087c4:	4543      	cmp	r3, r8
 80087c6:	dc09      	bgt.n	80087dc <_printf_float+0x264>
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	079b      	lsls	r3, r3, #30
 80087cc:	f100 8105 	bmi.w	80089da <_printf_float+0x462>
 80087d0:	68e0      	ldr	r0, [r4, #12]
 80087d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087d4:	4298      	cmp	r0, r3
 80087d6:	bfb8      	it	lt
 80087d8:	4618      	movlt	r0, r3
 80087da:	e730      	b.n	800863e <_printf_float+0xc6>
 80087dc:	2301      	movs	r3, #1
 80087de:	464a      	mov	r2, r9
 80087e0:	4631      	mov	r1, r6
 80087e2:	4628      	mov	r0, r5
 80087e4:	47b8      	blx	r7
 80087e6:	3001      	adds	r0, #1
 80087e8:	f43f af27 	beq.w	800863a <_printf_float+0xc2>
 80087ec:	f108 0801 	add.w	r8, r8, #1
 80087f0:	e7e6      	b.n	80087c0 <_printf_float+0x248>
 80087f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	dc39      	bgt.n	800886c <_printf_float+0x2f4>
 80087f8:	4a1b      	ldr	r2, [pc, #108]	; (8008868 <_printf_float+0x2f0>)
 80087fa:	2301      	movs	r3, #1
 80087fc:	4631      	mov	r1, r6
 80087fe:	4628      	mov	r0, r5
 8008800:	47b8      	blx	r7
 8008802:	3001      	adds	r0, #1
 8008804:	f43f af19 	beq.w	800863a <_printf_float+0xc2>
 8008808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800880c:	4313      	orrs	r3, r2
 800880e:	d102      	bne.n	8008816 <_printf_float+0x29e>
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	07d9      	lsls	r1, r3, #31
 8008814:	d5d8      	bpl.n	80087c8 <_printf_float+0x250>
 8008816:	ee18 3a10 	vmov	r3, s16
 800881a:	4652      	mov	r2, sl
 800881c:	4631      	mov	r1, r6
 800881e:	4628      	mov	r0, r5
 8008820:	47b8      	blx	r7
 8008822:	3001      	adds	r0, #1
 8008824:	f43f af09 	beq.w	800863a <_printf_float+0xc2>
 8008828:	f04f 0900 	mov.w	r9, #0
 800882c:	f104 0a1a 	add.w	sl, r4, #26
 8008830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008832:	425b      	negs	r3, r3
 8008834:	454b      	cmp	r3, r9
 8008836:	dc01      	bgt.n	800883c <_printf_float+0x2c4>
 8008838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800883a:	e792      	b.n	8008762 <_printf_float+0x1ea>
 800883c:	2301      	movs	r3, #1
 800883e:	4652      	mov	r2, sl
 8008840:	4631      	mov	r1, r6
 8008842:	4628      	mov	r0, r5
 8008844:	47b8      	blx	r7
 8008846:	3001      	adds	r0, #1
 8008848:	f43f aef7 	beq.w	800863a <_printf_float+0xc2>
 800884c:	f109 0901 	add.w	r9, r9, #1
 8008850:	e7ee      	b.n	8008830 <_printf_float+0x2b8>
 8008852:	bf00      	nop
 8008854:	7fefffff 	.word	0x7fefffff
 8008858:	0800cc64 	.word	0x0800cc64
 800885c:	0800cc68 	.word	0x0800cc68
 8008860:	0800cc70 	.word	0x0800cc70
 8008864:	0800cc6c 	.word	0x0800cc6c
 8008868:	0800cc74 	.word	0x0800cc74
 800886c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800886e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008870:	429a      	cmp	r2, r3
 8008872:	bfa8      	it	ge
 8008874:	461a      	movge	r2, r3
 8008876:	2a00      	cmp	r2, #0
 8008878:	4691      	mov	r9, r2
 800887a:	dc37      	bgt.n	80088ec <_printf_float+0x374>
 800887c:	f04f 0b00 	mov.w	fp, #0
 8008880:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008884:	f104 021a 	add.w	r2, r4, #26
 8008888:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800888a:	9305      	str	r3, [sp, #20]
 800888c:	eba3 0309 	sub.w	r3, r3, r9
 8008890:	455b      	cmp	r3, fp
 8008892:	dc33      	bgt.n	80088fc <_printf_float+0x384>
 8008894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008898:	429a      	cmp	r2, r3
 800889a:	db3b      	blt.n	8008914 <_printf_float+0x39c>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	07da      	lsls	r2, r3, #31
 80088a0:	d438      	bmi.n	8008914 <_printf_float+0x39c>
 80088a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a4:	9a05      	ldr	r2, [sp, #20]
 80088a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088a8:	1a9a      	subs	r2, r3, r2
 80088aa:	eba3 0901 	sub.w	r9, r3, r1
 80088ae:	4591      	cmp	r9, r2
 80088b0:	bfa8      	it	ge
 80088b2:	4691      	movge	r9, r2
 80088b4:	f1b9 0f00 	cmp.w	r9, #0
 80088b8:	dc35      	bgt.n	8008926 <_printf_float+0x3ae>
 80088ba:	f04f 0800 	mov.w	r8, #0
 80088be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088c2:	f104 0a1a 	add.w	sl, r4, #26
 80088c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088ca:	1a9b      	subs	r3, r3, r2
 80088cc:	eba3 0309 	sub.w	r3, r3, r9
 80088d0:	4543      	cmp	r3, r8
 80088d2:	f77f af79 	ble.w	80087c8 <_printf_float+0x250>
 80088d6:	2301      	movs	r3, #1
 80088d8:	4652      	mov	r2, sl
 80088da:	4631      	mov	r1, r6
 80088dc:	4628      	mov	r0, r5
 80088de:	47b8      	blx	r7
 80088e0:	3001      	adds	r0, #1
 80088e2:	f43f aeaa 	beq.w	800863a <_printf_float+0xc2>
 80088e6:	f108 0801 	add.w	r8, r8, #1
 80088ea:	e7ec      	b.n	80088c6 <_printf_float+0x34e>
 80088ec:	4613      	mov	r3, r2
 80088ee:	4631      	mov	r1, r6
 80088f0:	4642      	mov	r2, r8
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b8      	blx	r7
 80088f6:	3001      	adds	r0, #1
 80088f8:	d1c0      	bne.n	800887c <_printf_float+0x304>
 80088fa:	e69e      	b.n	800863a <_printf_float+0xc2>
 80088fc:	2301      	movs	r3, #1
 80088fe:	4631      	mov	r1, r6
 8008900:	4628      	mov	r0, r5
 8008902:	9205      	str	r2, [sp, #20]
 8008904:	47b8      	blx	r7
 8008906:	3001      	adds	r0, #1
 8008908:	f43f ae97 	beq.w	800863a <_printf_float+0xc2>
 800890c:	9a05      	ldr	r2, [sp, #20]
 800890e:	f10b 0b01 	add.w	fp, fp, #1
 8008912:	e7b9      	b.n	8008888 <_printf_float+0x310>
 8008914:	ee18 3a10 	vmov	r3, s16
 8008918:	4652      	mov	r2, sl
 800891a:	4631      	mov	r1, r6
 800891c:	4628      	mov	r0, r5
 800891e:	47b8      	blx	r7
 8008920:	3001      	adds	r0, #1
 8008922:	d1be      	bne.n	80088a2 <_printf_float+0x32a>
 8008924:	e689      	b.n	800863a <_printf_float+0xc2>
 8008926:	9a05      	ldr	r2, [sp, #20]
 8008928:	464b      	mov	r3, r9
 800892a:	4442      	add	r2, r8
 800892c:	4631      	mov	r1, r6
 800892e:	4628      	mov	r0, r5
 8008930:	47b8      	blx	r7
 8008932:	3001      	adds	r0, #1
 8008934:	d1c1      	bne.n	80088ba <_printf_float+0x342>
 8008936:	e680      	b.n	800863a <_printf_float+0xc2>
 8008938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800893a:	2a01      	cmp	r2, #1
 800893c:	dc01      	bgt.n	8008942 <_printf_float+0x3ca>
 800893e:	07db      	lsls	r3, r3, #31
 8008940:	d538      	bpl.n	80089b4 <_printf_float+0x43c>
 8008942:	2301      	movs	r3, #1
 8008944:	4642      	mov	r2, r8
 8008946:	4631      	mov	r1, r6
 8008948:	4628      	mov	r0, r5
 800894a:	47b8      	blx	r7
 800894c:	3001      	adds	r0, #1
 800894e:	f43f ae74 	beq.w	800863a <_printf_float+0xc2>
 8008952:	ee18 3a10 	vmov	r3, s16
 8008956:	4652      	mov	r2, sl
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	f43f ae6b 	beq.w	800863a <_printf_float+0xc2>
 8008964:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008968:	2200      	movs	r2, #0
 800896a:	2300      	movs	r3, #0
 800896c:	f7f8 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8008970:	b9d8      	cbnz	r0, 80089aa <_printf_float+0x432>
 8008972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008974:	f108 0201 	add.w	r2, r8, #1
 8008978:	3b01      	subs	r3, #1
 800897a:	4631      	mov	r1, r6
 800897c:	4628      	mov	r0, r5
 800897e:	47b8      	blx	r7
 8008980:	3001      	adds	r0, #1
 8008982:	d10e      	bne.n	80089a2 <_printf_float+0x42a>
 8008984:	e659      	b.n	800863a <_printf_float+0xc2>
 8008986:	2301      	movs	r3, #1
 8008988:	4652      	mov	r2, sl
 800898a:	4631      	mov	r1, r6
 800898c:	4628      	mov	r0, r5
 800898e:	47b8      	blx	r7
 8008990:	3001      	adds	r0, #1
 8008992:	f43f ae52 	beq.w	800863a <_printf_float+0xc2>
 8008996:	f108 0801 	add.w	r8, r8, #1
 800899a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800899c:	3b01      	subs	r3, #1
 800899e:	4543      	cmp	r3, r8
 80089a0:	dcf1      	bgt.n	8008986 <_printf_float+0x40e>
 80089a2:	464b      	mov	r3, r9
 80089a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089a8:	e6dc      	b.n	8008764 <_printf_float+0x1ec>
 80089aa:	f04f 0800 	mov.w	r8, #0
 80089ae:	f104 0a1a 	add.w	sl, r4, #26
 80089b2:	e7f2      	b.n	800899a <_printf_float+0x422>
 80089b4:	2301      	movs	r3, #1
 80089b6:	4642      	mov	r2, r8
 80089b8:	e7df      	b.n	800897a <_printf_float+0x402>
 80089ba:	2301      	movs	r3, #1
 80089bc:	464a      	mov	r2, r9
 80089be:	4631      	mov	r1, r6
 80089c0:	4628      	mov	r0, r5
 80089c2:	47b8      	blx	r7
 80089c4:	3001      	adds	r0, #1
 80089c6:	f43f ae38 	beq.w	800863a <_printf_float+0xc2>
 80089ca:	f108 0801 	add.w	r8, r8, #1
 80089ce:	68e3      	ldr	r3, [r4, #12]
 80089d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089d2:	1a5b      	subs	r3, r3, r1
 80089d4:	4543      	cmp	r3, r8
 80089d6:	dcf0      	bgt.n	80089ba <_printf_float+0x442>
 80089d8:	e6fa      	b.n	80087d0 <_printf_float+0x258>
 80089da:	f04f 0800 	mov.w	r8, #0
 80089de:	f104 0919 	add.w	r9, r4, #25
 80089e2:	e7f4      	b.n	80089ce <_printf_float+0x456>

080089e4 <_printf_common>:
 80089e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e8:	4616      	mov	r6, r2
 80089ea:	4699      	mov	r9, r3
 80089ec:	688a      	ldr	r2, [r1, #8]
 80089ee:	690b      	ldr	r3, [r1, #16]
 80089f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089f4:	4293      	cmp	r3, r2
 80089f6:	bfb8      	it	lt
 80089f8:	4613      	movlt	r3, r2
 80089fa:	6033      	str	r3, [r6, #0]
 80089fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a00:	4607      	mov	r7, r0
 8008a02:	460c      	mov	r4, r1
 8008a04:	b10a      	cbz	r2, 8008a0a <_printf_common+0x26>
 8008a06:	3301      	adds	r3, #1
 8008a08:	6033      	str	r3, [r6, #0]
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	0699      	lsls	r1, r3, #26
 8008a0e:	bf42      	ittt	mi
 8008a10:	6833      	ldrmi	r3, [r6, #0]
 8008a12:	3302      	addmi	r3, #2
 8008a14:	6033      	strmi	r3, [r6, #0]
 8008a16:	6825      	ldr	r5, [r4, #0]
 8008a18:	f015 0506 	ands.w	r5, r5, #6
 8008a1c:	d106      	bne.n	8008a2c <_printf_common+0x48>
 8008a1e:	f104 0a19 	add.w	sl, r4, #25
 8008a22:	68e3      	ldr	r3, [r4, #12]
 8008a24:	6832      	ldr	r2, [r6, #0]
 8008a26:	1a9b      	subs	r3, r3, r2
 8008a28:	42ab      	cmp	r3, r5
 8008a2a:	dc26      	bgt.n	8008a7a <_printf_common+0x96>
 8008a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a30:	1e13      	subs	r3, r2, #0
 8008a32:	6822      	ldr	r2, [r4, #0]
 8008a34:	bf18      	it	ne
 8008a36:	2301      	movne	r3, #1
 8008a38:	0692      	lsls	r2, r2, #26
 8008a3a:	d42b      	bmi.n	8008a94 <_printf_common+0xb0>
 8008a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a40:	4649      	mov	r1, r9
 8008a42:	4638      	mov	r0, r7
 8008a44:	47c0      	blx	r8
 8008a46:	3001      	adds	r0, #1
 8008a48:	d01e      	beq.n	8008a88 <_printf_common+0xa4>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	68e5      	ldr	r5, [r4, #12]
 8008a4e:	6832      	ldr	r2, [r6, #0]
 8008a50:	f003 0306 	and.w	r3, r3, #6
 8008a54:	2b04      	cmp	r3, #4
 8008a56:	bf08      	it	eq
 8008a58:	1aad      	subeq	r5, r5, r2
 8008a5a:	68a3      	ldr	r3, [r4, #8]
 8008a5c:	6922      	ldr	r2, [r4, #16]
 8008a5e:	bf0c      	ite	eq
 8008a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a64:	2500      	movne	r5, #0
 8008a66:	4293      	cmp	r3, r2
 8008a68:	bfc4      	itt	gt
 8008a6a:	1a9b      	subgt	r3, r3, r2
 8008a6c:	18ed      	addgt	r5, r5, r3
 8008a6e:	2600      	movs	r6, #0
 8008a70:	341a      	adds	r4, #26
 8008a72:	42b5      	cmp	r5, r6
 8008a74:	d11a      	bne.n	8008aac <_printf_common+0xc8>
 8008a76:	2000      	movs	r0, #0
 8008a78:	e008      	b.n	8008a8c <_printf_common+0xa8>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	4649      	mov	r1, r9
 8008a80:	4638      	mov	r0, r7
 8008a82:	47c0      	blx	r8
 8008a84:	3001      	adds	r0, #1
 8008a86:	d103      	bne.n	8008a90 <_printf_common+0xac>
 8008a88:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a90:	3501      	adds	r5, #1
 8008a92:	e7c6      	b.n	8008a22 <_printf_common+0x3e>
 8008a94:	18e1      	adds	r1, r4, r3
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	2030      	movs	r0, #48	; 0x30
 8008a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a9e:	4422      	add	r2, r4
 8008aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008aa8:	3302      	adds	r3, #2
 8008aaa:	e7c7      	b.n	8008a3c <_printf_common+0x58>
 8008aac:	2301      	movs	r3, #1
 8008aae:	4622      	mov	r2, r4
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	47c0      	blx	r8
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	d0e6      	beq.n	8008a88 <_printf_common+0xa4>
 8008aba:	3601      	adds	r6, #1
 8008abc:	e7d9      	b.n	8008a72 <_printf_common+0x8e>
	...

08008ac0 <_printf_i>:
 8008ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac4:	7e0f      	ldrb	r7, [r1, #24]
 8008ac6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ac8:	2f78      	cmp	r7, #120	; 0x78
 8008aca:	4691      	mov	r9, r2
 8008acc:	4680      	mov	r8, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	469a      	mov	sl, r3
 8008ad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ad6:	d807      	bhi.n	8008ae8 <_printf_i+0x28>
 8008ad8:	2f62      	cmp	r7, #98	; 0x62
 8008ada:	d80a      	bhi.n	8008af2 <_printf_i+0x32>
 8008adc:	2f00      	cmp	r7, #0
 8008ade:	f000 80d8 	beq.w	8008c92 <_printf_i+0x1d2>
 8008ae2:	2f58      	cmp	r7, #88	; 0x58
 8008ae4:	f000 80a3 	beq.w	8008c2e <_printf_i+0x16e>
 8008ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008af0:	e03a      	b.n	8008b68 <_printf_i+0xa8>
 8008af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008af6:	2b15      	cmp	r3, #21
 8008af8:	d8f6      	bhi.n	8008ae8 <_printf_i+0x28>
 8008afa:	a101      	add	r1, pc, #4	; (adr r1, 8008b00 <_printf_i+0x40>)
 8008afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b00:	08008b59 	.word	0x08008b59
 8008b04:	08008b6d 	.word	0x08008b6d
 8008b08:	08008ae9 	.word	0x08008ae9
 8008b0c:	08008ae9 	.word	0x08008ae9
 8008b10:	08008ae9 	.word	0x08008ae9
 8008b14:	08008ae9 	.word	0x08008ae9
 8008b18:	08008b6d 	.word	0x08008b6d
 8008b1c:	08008ae9 	.word	0x08008ae9
 8008b20:	08008ae9 	.word	0x08008ae9
 8008b24:	08008ae9 	.word	0x08008ae9
 8008b28:	08008ae9 	.word	0x08008ae9
 8008b2c:	08008c79 	.word	0x08008c79
 8008b30:	08008b9d 	.word	0x08008b9d
 8008b34:	08008c5b 	.word	0x08008c5b
 8008b38:	08008ae9 	.word	0x08008ae9
 8008b3c:	08008ae9 	.word	0x08008ae9
 8008b40:	08008c9b 	.word	0x08008c9b
 8008b44:	08008ae9 	.word	0x08008ae9
 8008b48:	08008b9d 	.word	0x08008b9d
 8008b4c:	08008ae9 	.word	0x08008ae9
 8008b50:	08008ae9 	.word	0x08008ae9
 8008b54:	08008c63 	.word	0x08008c63
 8008b58:	682b      	ldr	r3, [r5, #0]
 8008b5a:	1d1a      	adds	r2, r3, #4
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	602a      	str	r2, [r5, #0]
 8008b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e0a3      	b.n	8008cb4 <_printf_i+0x1f4>
 8008b6c:	6820      	ldr	r0, [r4, #0]
 8008b6e:	6829      	ldr	r1, [r5, #0]
 8008b70:	0606      	lsls	r6, r0, #24
 8008b72:	f101 0304 	add.w	r3, r1, #4
 8008b76:	d50a      	bpl.n	8008b8e <_printf_i+0xce>
 8008b78:	680e      	ldr	r6, [r1, #0]
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	2e00      	cmp	r6, #0
 8008b7e:	da03      	bge.n	8008b88 <_printf_i+0xc8>
 8008b80:	232d      	movs	r3, #45	; 0x2d
 8008b82:	4276      	negs	r6, r6
 8008b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b88:	485e      	ldr	r0, [pc, #376]	; (8008d04 <_printf_i+0x244>)
 8008b8a:	230a      	movs	r3, #10
 8008b8c:	e019      	b.n	8008bc2 <_printf_i+0x102>
 8008b8e:	680e      	ldr	r6, [r1, #0]
 8008b90:	602b      	str	r3, [r5, #0]
 8008b92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b96:	bf18      	it	ne
 8008b98:	b236      	sxthne	r6, r6
 8008b9a:	e7ef      	b.n	8008b7c <_printf_i+0xbc>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	6820      	ldr	r0, [r4, #0]
 8008ba0:	1d19      	adds	r1, r3, #4
 8008ba2:	6029      	str	r1, [r5, #0]
 8008ba4:	0601      	lsls	r1, r0, #24
 8008ba6:	d501      	bpl.n	8008bac <_printf_i+0xec>
 8008ba8:	681e      	ldr	r6, [r3, #0]
 8008baa:	e002      	b.n	8008bb2 <_printf_i+0xf2>
 8008bac:	0646      	lsls	r6, r0, #25
 8008bae:	d5fb      	bpl.n	8008ba8 <_printf_i+0xe8>
 8008bb0:	881e      	ldrh	r6, [r3, #0]
 8008bb2:	4854      	ldr	r0, [pc, #336]	; (8008d04 <_printf_i+0x244>)
 8008bb4:	2f6f      	cmp	r7, #111	; 0x6f
 8008bb6:	bf0c      	ite	eq
 8008bb8:	2308      	moveq	r3, #8
 8008bba:	230a      	movne	r3, #10
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bc2:	6865      	ldr	r5, [r4, #4]
 8008bc4:	60a5      	str	r5, [r4, #8]
 8008bc6:	2d00      	cmp	r5, #0
 8008bc8:	bfa2      	ittt	ge
 8008bca:	6821      	ldrge	r1, [r4, #0]
 8008bcc:	f021 0104 	bicge.w	r1, r1, #4
 8008bd0:	6021      	strge	r1, [r4, #0]
 8008bd2:	b90e      	cbnz	r6, 8008bd8 <_printf_i+0x118>
 8008bd4:	2d00      	cmp	r5, #0
 8008bd6:	d04d      	beq.n	8008c74 <_printf_i+0x1b4>
 8008bd8:	4615      	mov	r5, r2
 8008bda:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bde:	fb03 6711 	mls	r7, r3, r1, r6
 8008be2:	5dc7      	ldrb	r7, [r0, r7]
 8008be4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008be8:	4637      	mov	r7, r6
 8008bea:	42bb      	cmp	r3, r7
 8008bec:	460e      	mov	r6, r1
 8008bee:	d9f4      	bls.n	8008bda <_printf_i+0x11a>
 8008bf0:	2b08      	cmp	r3, #8
 8008bf2:	d10b      	bne.n	8008c0c <_printf_i+0x14c>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	07de      	lsls	r6, r3, #31
 8008bf8:	d508      	bpl.n	8008c0c <_printf_i+0x14c>
 8008bfa:	6923      	ldr	r3, [r4, #16]
 8008bfc:	6861      	ldr	r1, [r4, #4]
 8008bfe:	4299      	cmp	r1, r3
 8008c00:	bfde      	ittt	le
 8008c02:	2330      	movle	r3, #48	; 0x30
 8008c04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c0c:	1b52      	subs	r2, r2, r5
 8008c0e:	6122      	str	r2, [r4, #16]
 8008c10:	f8cd a000 	str.w	sl, [sp]
 8008c14:	464b      	mov	r3, r9
 8008c16:	aa03      	add	r2, sp, #12
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	f7ff fee2 	bl	80089e4 <_printf_common>
 8008c20:	3001      	adds	r0, #1
 8008c22:	d14c      	bne.n	8008cbe <_printf_i+0x1fe>
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	b004      	add	sp, #16
 8008c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2e:	4835      	ldr	r0, [pc, #212]	; (8008d04 <_printf_i+0x244>)
 8008c30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c34:	6829      	ldr	r1, [r5, #0]
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c3c:	6029      	str	r1, [r5, #0]
 8008c3e:	061d      	lsls	r5, r3, #24
 8008c40:	d514      	bpl.n	8008c6c <_printf_i+0x1ac>
 8008c42:	07df      	lsls	r7, r3, #31
 8008c44:	bf44      	itt	mi
 8008c46:	f043 0320 	orrmi.w	r3, r3, #32
 8008c4a:	6023      	strmi	r3, [r4, #0]
 8008c4c:	b91e      	cbnz	r6, 8008c56 <_printf_i+0x196>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	f023 0320 	bic.w	r3, r3, #32
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	2310      	movs	r3, #16
 8008c58:	e7b0      	b.n	8008bbc <_printf_i+0xfc>
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	f043 0320 	orr.w	r3, r3, #32
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	2378      	movs	r3, #120	; 0x78
 8008c64:	4828      	ldr	r0, [pc, #160]	; (8008d08 <_printf_i+0x248>)
 8008c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c6a:	e7e3      	b.n	8008c34 <_printf_i+0x174>
 8008c6c:	0659      	lsls	r1, r3, #25
 8008c6e:	bf48      	it	mi
 8008c70:	b2b6      	uxthmi	r6, r6
 8008c72:	e7e6      	b.n	8008c42 <_printf_i+0x182>
 8008c74:	4615      	mov	r5, r2
 8008c76:	e7bb      	b.n	8008bf0 <_printf_i+0x130>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	6826      	ldr	r6, [r4, #0]
 8008c7c:	6961      	ldr	r1, [r4, #20]
 8008c7e:	1d18      	adds	r0, r3, #4
 8008c80:	6028      	str	r0, [r5, #0]
 8008c82:	0635      	lsls	r5, r6, #24
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	d501      	bpl.n	8008c8c <_printf_i+0x1cc>
 8008c88:	6019      	str	r1, [r3, #0]
 8008c8a:	e002      	b.n	8008c92 <_printf_i+0x1d2>
 8008c8c:	0670      	lsls	r0, r6, #25
 8008c8e:	d5fb      	bpl.n	8008c88 <_printf_i+0x1c8>
 8008c90:	8019      	strh	r1, [r3, #0]
 8008c92:	2300      	movs	r3, #0
 8008c94:	6123      	str	r3, [r4, #16]
 8008c96:	4615      	mov	r5, r2
 8008c98:	e7ba      	b.n	8008c10 <_printf_i+0x150>
 8008c9a:	682b      	ldr	r3, [r5, #0]
 8008c9c:	1d1a      	adds	r2, r3, #4
 8008c9e:	602a      	str	r2, [r5, #0]
 8008ca0:	681d      	ldr	r5, [r3, #0]
 8008ca2:	6862      	ldr	r2, [r4, #4]
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f7f7 fa9a 	bl	80001e0 <memchr>
 8008cac:	b108      	cbz	r0, 8008cb2 <_printf_i+0x1f2>
 8008cae:	1b40      	subs	r0, r0, r5
 8008cb0:	6060      	str	r0, [r4, #4]
 8008cb2:	6863      	ldr	r3, [r4, #4]
 8008cb4:	6123      	str	r3, [r4, #16]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cbc:	e7a8      	b.n	8008c10 <_printf_i+0x150>
 8008cbe:	6923      	ldr	r3, [r4, #16]
 8008cc0:	462a      	mov	r2, r5
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	4640      	mov	r0, r8
 8008cc6:	47d0      	blx	sl
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d0ab      	beq.n	8008c24 <_printf_i+0x164>
 8008ccc:	6823      	ldr	r3, [r4, #0]
 8008cce:	079b      	lsls	r3, r3, #30
 8008cd0:	d413      	bmi.n	8008cfa <_printf_i+0x23a>
 8008cd2:	68e0      	ldr	r0, [r4, #12]
 8008cd4:	9b03      	ldr	r3, [sp, #12]
 8008cd6:	4298      	cmp	r0, r3
 8008cd8:	bfb8      	it	lt
 8008cda:	4618      	movlt	r0, r3
 8008cdc:	e7a4      	b.n	8008c28 <_printf_i+0x168>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4632      	mov	r2, r6
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	4640      	mov	r0, r8
 8008ce6:	47d0      	blx	sl
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d09b      	beq.n	8008c24 <_printf_i+0x164>
 8008cec:	3501      	adds	r5, #1
 8008cee:	68e3      	ldr	r3, [r4, #12]
 8008cf0:	9903      	ldr	r1, [sp, #12]
 8008cf2:	1a5b      	subs	r3, r3, r1
 8008cf4:	42ab      	cmp	r3, r5
 8008cf6:	dcf2      	bgt.n	8008cde <_printf_i+0x21e>
 8008cf8:	e7eb      	b.n	8008cd2 <_printf_i+0x212>
 8008cfa:	2500      	movs	r5, #0
 8008cfc:	f104 0619 	add.w	r6, r4, #25
 8008d00:	e7f5      	b.n	8008cee <_printf_i+0x22e>
 8008d02:	bf00      	nop
 8008d04:	0800cc76 	.word	0x0800cc76
 8008d08:	0800cc87 	.word	0x0800cc87

08008d0c <_scanf_float>:
 8008d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	b087      	sub	sp, #28
 8008d12:	4617      	mov	r7, r2
 8008d14:	9303      	str	r3, [sp, #12]
 8008d16:	688b      	ldr	r3, [r1, #8]
 8008d18:	1e5a      	subs	r2, r3, #1
 8008d1a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008d1e:	bf83      	ittte	hi
 8008d20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008d24:	195b      	addhi	r3, r3, r5
 8008d26:	9302      	strhi	r3, [sp, #8]
 8008d28:	2300      	movls	r3, #0
 8008d2a:	bf86      	itte	hi
 8008d2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d30:	608b      	strhi	r3, [r1, #8]
 8008d32:	9302      	strls	r3, [sp, #8]
 8008d34:	680b      	ldr	r3, [r1, #0]
 8008d36:	468b      	mov	fp, r1
 8008d38:	2500      	movs	r5, #0
 8008d3a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008d3e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008d42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008d46:	4680      	mov	r8, r0
 8008d48:	460c      	mov	r4, r1
 8008d4a:	465e      	mov	r6, fp
 8008d4c:	46aa      	mov	sl, r5
 8008d4e:	46a9      	mov	r9, r5
 8008d50:	9501      	str	r5, [sp, #4]
 8008d52:	68a2      	ldr	r2, [r4, #8]
 8008d54:	b152      	cbz	r2, 8008d6c <_scanf_float+0x60>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b4e      	cmp	r3, #78	; 0x4e
 8008d5c:	d864      	bhi.n	8008e28 <_scanf_float+0x11c>
 8008d5e:	2b40      	cmp	r3, #64	; 0x40
 8008d60:	d83c      	bhi.n	8008ddc <_scanf_float+0xd0>
 8008d62:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008d66:	b2c8      	uxtb	r0, r1
 8008d68:	280e      	cmp	r0, #14
 8008d6a:	d93a      	bls.n	8008de2 <_scanf_float+0xd6>
 8008d6c:	f1b9 0f00 	cmp.w	r9, #0
 8008d70:	d003      	beq.n	8008d7a <_scanf_float+0x6e>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d7e:	f1ba 0f01 	cmp.w	sl, #1
 8008d82:	f200 8113 	bhi.w	8008fac <_scanf_float+0x2a0>
 8008d86:	455e      	cmp	r6, fp
 8008d88:	f200 8105 	bhi.w	8008f96 <_scanf_float+0x28a>
 8008d8c:	2501      	movs	r5, #1
 8008d8e:	4628      	mov	r0, r5
 8008d90:	b007      	add	sp, #28
 8008d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d96:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008d9a:	2a0d      	cmp	r2, #13
 8008d9c:	d8e6      	bhi.n	8008d6c <_scanf_float+0x60>
 8008d9e:	a101      	add	r1, pc, #4	; (adr r1, 8008da4 <_scanf_float+0x98>)
 8008da0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008da4:	08008ee3 	.word	0x08008ee3
 8008da8:	08008d6d 	.word	0x08008d6d
 8008dac:	08008d6d 	.word	0x08008d6d
 8008db0:	08008d6d 	.word	0x08008d6d
 8008db4:	08008f43 	.word	0x08008f43
 8008db8:	08008f1b 	.word	0x08008f1b
 8008dbc:	08008d6d 	.word	0x08008d6d
 8008dc0:	08008d6d 	.word	0x08008d6d
 8008dc4:	08008ef1 	.word	0x08008ef1
 8008dc8:	08008d6d 	.word	0x08008d6d
 8008dcc:	08008d6d 	.word	0x08008d6d
 8008dd0:	08008d6d 	.word	0x08008d6d
 8008dd4:	08008d6d 	.word	0x08008d6d
 8008dd8:	08008ea9 	.word	0x08008ea9
 8008ddc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008de0:	e7db      	b.n	8008d9a <_scanf_float+0x8e>
 8008de2:	290e      	cmp	r1, #14
 8008de4:	d8c2      	bhi.n	8008d6c <_scanf_float+0x60>
 8008de6:	a001      	add	r0, pc, #4	; (adr r0, 8008dec <_scanf_float+0xe0>)
 8008de8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008dec:	08008e9b 	.word	0x08008e9b
 8008df0:	08008d6d 	.word	0x08008d6d
 8008df4:	08008e9b 	.word	0x08008e9b
 8008df8:	08008f2f 	.word	0x08008f2f
 8008dfc:	08008d6d 	.word	0x08008d6d
 8008e00:	08008e49 	.word	0x08008e49
 8008e04:	08008e85 	.word	0x08008e85
 8008e08:	08008e85 	.word	0x08008e85
 8008e0c:	08008e85 	.word	0x08008e85
 8008e10:	08008e85 	.word	0x08008e85
 8008e14:	08008e85 	.word	0x08008e85
 8008e18:	08008e85 	.word	0x08008e85
 8008e1c:	08008e85 	.word	0x08008e85
 8008e20:	08008e85 	.word	0x08008e85
 8008e24:	08008e85 	.word	0x08008e85
 8008e28:	2b6e      	cmp	r3, #110	; 0x6e
 8008e2a:	d809      	bhi.n	8008e40 <_scanf_float+0x134>
 8008e2c:	2b60      	cmp	r3, #96	; 0x60
 8008e2e:	d8b2      	bhi.n	8008d96 <_scanf_float+0x8a>
 8008e30:	2b54      	cmp	r3, #84	; 0x54
 8008e32:	d077      	beq.n	8008f24 <_scanf_float+0x218>
 8008e34:	2b59      	cmp	r3, #89	; 0x59
 8008e36:	d199      	bne.n	8008d6c <_scanf_float+0x60>
 8008e38:	2d07      	cmp	r5, #7
 8008e3a:	d197      	bne.n	8008d6c <_scanf_float+0x60>
 8008e3c:	2508      	movs	r5, #8
 8008e3e:	e029      	b.n	8008e94 <_scanf_float+0x188>
 8008e40:	2b74      	cmp	r3, #116	; 0x74
 8008e42:	d06f      	beq.n	8008f24 <_scanf_float+0x218>
 8008e44:	2b79      	cmp	r3, #121	; 0x79
 8008e46:	e7f6      	b.n	8008e36 <_scanf_float+0x12a>
 8008e48:	6821      	ldr	r1, [r4, #0]
 8008e4a:	05c8      	lsls	r0, r1, #23
 8008e4c:	d51a      	bpl.n	8008e84 <_scanf_float+0x178>
 8008e4e:	9b02      	ldr	r3, [sp, #8]
 8008e50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008e54:	6021      	str	r1, [r4, #0]
 8008e56:	f109 0901 	add.w	r9, r9, #1
 8008e5a:	b11b      	cbz	r3, 8008e64 <_scanf_float+0x158>
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	3201      	adds	r2, #1
 8008e60:	9302      	str	r3, [sp, #8]
 8008e62:	60a2      	str	r2, [r4, #8]
 8008e64:	68a3      	ldr	r3, [r4, #8]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	60a3      	str	r3, [r4, #8]
 8008e6a:	6923      	ldr	r3, [r4, #16]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	6123      	str	r3, [r4, #16]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3b01      	subs	r3, #1
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	607b      	str	r3, [r7, #4]
 8008e78:	f340 8084 	ble.w	8008f84 <_scanf_float+0x278>
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	603b      	str	r3, [r7, #0]
 8008e82:	e766      	b.n	8008d52 <_scanf_float+0x46>
 8008e84:	eb1a 0f05 	cmn.w	sl, r5
 8008e88:	f47f af70 	bne.w	8008d6c <_scanf_float+0x60>
 8008e8c:	6822      	ldr	r2, [r4, #0]
 8008e8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008e92:	6022      	str	r2, [r4, #0]
 8008e94:	f806 3b01 	strb.w	r3, [r6], #1
 8008e98:	e7e4      	b.n	8008e64 <_scanf_float+0x158>
 8008e9a:	6822      	ldr	r2, [r4, #0]
 8008e9c:	0610      	lsls	r0, r2, #24
 8008e9e:	f57f af65 	bpl.w	8008d6c <_scanf_float+0x60>
 8008ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ea6:	e7f4      	b.n	8008e92 <_scanf_float+0x186>
 8008ea8:	f1ba 0f00 	cmp.w	sl, #0
 8008eac:	d10e      	bne.n	8008ecc <_scanf_float+0x1c0>
 8008eae:	f1b9 0f00 	cmp.w	r9, #0
 8008eb2:	d10e      	bne.n	8008ed2 <_scanf_float+0x1c6>
 8008eb4:	6822      	ldr	r2, [r4, #0]
 8008eb6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008eba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ebe:	d108      	bne.n	8008ed2 <_scanf_float+0x1c6>
 8008ec0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ec4:	6022      	str	r2, [r4, #0]
 8008ec6:	f04f 0a01 	mov.w	sl, #1
 8008eca:	e7e3      	b.n	8008e94 <_scanf_float+0x188>
 8008ecc:	f1ba 0f02 	cmp.w	sl, #2
 8008ed0:	d055      	beq.n	8008f7e <_scanf_float+0x272>
 8008ed2:	2d01      	cmp	r5, #1
 8008ed4:	d002      	beq.n	8008edc <_scanf_float+0x1d0>
 8008ed6:	2d04      	cmp	r5, #4
 8008ed8:	f47f af48 	bne.w	8008d6c <_scanf_float+0x60>
 8008edc:	3501      	adds	r5, #1
 8008ede:	b2ed      	uxtb	r5, r5
 8008ee0:	e7d8      	b.n	8008e94 <_scanf_float+0x188>
 8008ee2:	f1ba 0f01 	cmp.w	sl, #1
 8008ee6:	f47f af41 	bne.w	8008d6c <_scanf_float+0x60>
 8008eea:	f04f 0a02 	mov.w	sl, #2
 8008eee:	e7d1      	b.n	8008e94 <_scanf_float+0x188>
 8008ef0:	b97d      	cbnz	r5, 8008f12 <_scanf_float+0x206>
 8008ef2:	f1b9 0f00 	cmp.w	r9, #0
 8008ef6:	f47f af3c 	bne.w	8008d72 <_scanf_float+0x66>
 8008efa:	6822      	ldr	r2, [r4, #0]
 8008efc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f04:	f47f af39 	bne.w	8008d7a <_scanf_float+0x6e>
 8008f08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f0c:	6022      	str	r2, [r4, #0]
 8008f0e:	2501      	movs	r5, #1
 8008f10:	e7c0      	b.n	8008e94 <_scanf_float+0x188>
 8008f12:	2d03      	cmp	r5, #3
 8008f14:	d0e2      	beq.n	8008edc <_scanf_float+0x1d0>
 8008f16:	2d05      	cmp	r5, #5
 8008f18:	e7de      	b.n	8008ed8 <_scanf_float+0x1cc>
 8008f1a:	2d02      	cmp	r5, #2
 8008f1c:	f47f af26 	bne.w	8008d6c <_scanf_float+0x60>
 8008f20:	2503      	movs	r5, #3
 8008f22:	e7b7      	b.n	8008e94 <_scanf_float+0x188>
 8008f24:	2d06      	cmp	r5, #6
 8008f26:	f47f af21 	bne.w	8008d6c <_scanf_float+0x60>
 8008f2a:	2507      	movs	r5, #7
 8008f2c:	e7b2      	b.n	8008e94 <_scanf_float+0x188>
 8008f2e:	6822      	ldr	r2, [r4, #0]
 8008f30:	0591      	lsls	r1, r2, #22
 8008f32:	f57f af1b 	bpl.w	8008d6c <_scanf_float+0x60>
 8008f36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008f3a:	6022      	str	r2, [r4, #0]
 8008f3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f40:	e7a8      	b.n	8008e94 <_scanf_float+0x188>
 8008f42:	6822      	ldr	r2, [r4, #0]
 8008f44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008f48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008f4c:	d006      	beq.n	8008f5c <_scanf_float+0x250>
 8008f4e:	0550      	lsls	r0, r2, #21
 8008f50:	f57f af0c 	bpl.w	8008d6c <_scanf_float+0x60>
 8008f54:	f1b9 0f00 	cmp.w	r9, #0
 8008f58:	f43f af0f 	beq.w	8008d7a <_scanf_float+0x6e>
 8008f5c:	0591      	lsls	r1, r2, #22
 8008f5e:	bf58      	it	pl
 8008f60:	9901      	ldrpl	r1, [sp, #4]
 8008f62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f66:	bf58      	it	pl
 8008f68:	eba9 0101 	subpl.w	r1, r9, r1
 8008f6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008f70:	bf58      	it	pl
 8008f72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f76:	6022      	str	r2, [r4, #0]
 8008f78:	f04f 0900 	mov.w	r9, #0
 8008f7c:	e78a      	b.n	8008e94 <_scanf_float+0x188>
 8008f7e:	f04f 0a03 	mov.w	sl, #3
 8008f82:	e787      	b.n	8008e94 <_scanf_float+0x188>
 8008f84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f88:	4639      	mov	r1, r7
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	4798      	blx	r3
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f43f aedf 	beq.w	8008d52 <_scanf_float+0x46>
 8008f94:	e6ea      	b.n	8008d6c <_scanf_float+0x60>
 8008f96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f9e:	463a      	mov	r2, r7
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	4798      	blx	r3
 8008fa4:	6923      	ldr	r3, [r4, #16]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	6123      	str	r3, [r4, #16]
 8008faa:	e6ec      	b.n	8008d86 <_scanf_float+0x7a>
 8008fac:	1e6b      	subs	r3, r5, #1
 8008fae:	2b06      	cmp	r3, #6
 8008fb0:	d825      	bhi.n	8008ffe <_scanf_float+0x2f2>
 8008fb2:	2d02      	cmp	r5, #2
 8008fb4:	d836      	bhi.n	8009024 <_scanf_float+0x318>
 8008fb6:	455e      	cmp	r6, fp
 8008fb8:	f67f aee8 	bls.w	8008d8c <_scanf_float+0x80>
 8008fbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fc0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fc4:	463a      	mov	r2, r7
 8008fc6:	4640      	mov	r0, r8
 8008fc8:	4798      	blx	r3
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	6123      	str	r3, [r4, #16]
 8008fd0:	e7f1      	b.n	8008fb6 <_scanf_float+0x2aa>
 8008fd2:	9802      	ldr	r0, [sp, #8]
 8008fd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fd8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008fdc:	9002      	str	r0, [sp, #8]
 8008fde:	463a      	mov	r2, r7
 8008fe0:	4640      	mov	r0, r8
 8008fe2:	4798      	blx	r3
 8008fe4:	6923      	ldr	r3, [r4, #16]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	6123      	str	r3, [r4, #16]
 8008fea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fee:	fa5f fa8a 	uxtb.w	sl, sl
 8008ff2:	f1ba 0f02 	cmp.w	sl, #2
 8008ff6:	d1ec      	bne.n	8008fd2 <_scanf_float+0x2c6>
 8008ff8:	3d03      	subs	r5, #3
 8008ffa:	b2ed      	uxtb	r5, r5
 8008ffc:	1b76      	subs	r6, r6, r5
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	05da      	lsls	r2, r3, #23
 8009002:	d52f      	bpl.n	8009064 <_scanf_float+0x358>
 8009004:	055b      	lsls	r3, r3, #21
 8009006:	d510      	bpl.n	800902a <_scanf_float+0x31e>
 8009008:	455e      	cmp	r6, fp
 800900a:	f67f aebf 	bls.w	8008d8c <_scanf_float+0x80>
 800900e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009012:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009016:	463a      	mov	r2, r7
 8009018:	4640      	mov	r0, r8
 800901a:	4798      	blx	r3
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	3b01      	subs	r3, #1
 8009020:	6123      	str	r3, [r4, #16]
 8009022:	e7f1      	b.n	8009008 <_scanf_float+0x2fc>
 8009024:	46aa      	mov	sl, r5
 8009026:	9602      	str	r6, [sp, #8]
 8009028:	e7df      	b.n	8008fea <_scanf_float+0x2de>
 800902a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800902e:	6923      	ldr	r3, [r4, #16]
 8009030:	2965      	cmp	r1, #101	; 0x65
 8009032:	f103 33ff 	add.w	r3, r3, #4294967295
 8009036:	f106 35ff 	add.w	r5, r6, #4294967295
 800903a:	6123      	str	r3, [r4, #16]
 800903c:	d00c      	beq.n	8009058 <_scanf_float+0x34c>
 800903e:	2945      	cmp	r1, #69	; 0x45
 8009040:	d00a      	beq.n	8009058 <_scanf_float+0x34c>
 8009042:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009046:	463a      	mov	r2, r7
 8009048:	4640      	mov	r0, r8
 800904a:	4798      	blx	r3
 800904c:	6923      	ldr	r3, [r4, #16]
 800904e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009052:	3b01      	subs	r3, #1
 8009054:	1eb5      	subs	r5, r6, #2
 8009056:	6123      	str	r3, [r4, #16]
 8009058:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800905c:	463a      	mov	r2, r7
 800905e:	4640      	mov	r0, r8
 8009060:	4798      	blx	r3
 8009062:	462e      	mov	r6, r5
 8009064:	6825      	ldr	r5, [r4, #0]
 8009066:	f015 0510 	ands.w	r5, r5, #16
 800906a:	d159      	bne.n	8009120 <_scanf_float+0x414>
 800906c:	7035      	strb	r5, [r6, #0]
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009078:	d11b      	bne.n	80090b2 <_scanf_float+0x3a6>
 800907a:	9b01      	ldr	r3, [sp, #4]
 800907c:	454b      	cmp	r3, r9
 800907e:	eba3 0209 	sub.w	r2, r3, r9
 8009082:	d123      	bne.n	80090cc <_scanf_float+0x3c0>
 8009084:	2200      	movs	r2, #0
 8009086:	4659      	mov	r1, fp
 8009088:	4640      	mov	r0, r8
 800908a:	f000 ff57 	bl	8009f3c <_strtod_r>
 800908e:	6822      	ldr	r2, [r4, #0]
 8009090:	9b03      	ldr	r3, [sp, #12]
 8009092:	f012 0f02 	tst.w	r2, #2
 8009096:	ec57 6b10 	vmov	r6, r7, d0
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	d021      	beq.n	80090e2 <_scanf_float+0x3d6>
 800909e:	9903      	ldr	r1, [sp, #12]
 80090a0:	1d1a      	adds	r2, r3, #4
 80090a2:	600a      	str	r2, [r1, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	e9c3 6700 	strd	r6, r7, [r3]
 80090aa:	68e3      	ldr	r3, [r4, #12]
 80090ac:	3301      	adds	r3, #1
 80090ae:	60e3      	str	r3, [r4, #12]
 80090b0:	e66d      	b.n	8008d8e <_scanf_float+0x82>
 80090b2:	9b04      	ldr	r3, [sp, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0e5      	beq.n	8009084 <_scanf_float+0x378>
 80090b8:	9905      	ldr	r1, [sp, #20]
 80090ba:	230a      	movs	r3, #10
 80090bc:	462a      	mov	r2, r5
 80090be:	3101      	adds	r1, #1
 80090c0:	4640      	mov	r0, r8
 80090c2:	f000 ffc3 	bl	800a04c <_strtol_r>
 80090c6:	9b04      	ldr	r3, [sp, #16]
 80090c8:	9e05      	ldr	r6, [sp, #20]
 80090ca:	1ac2      	subs	r2, r0, r3
 80090cc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80090d0:	429e      	cmp	r6, r3
 80090d2:	bf28      	it	cs
 80090d4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80090d8:	4912      	ldr	r1, [pc, #72]	; (8009124 <_scanf_float+0x418>)
 80090da:	4630      	mov	r0, r6
 80090dc:	f000 f8a6 	bl	800922c <siprintf>
 80090e0:	e7d0      	b.n	8009084 <_scanf_float+0x378>
 80090e2:	9903      	ldr	r1, [sp, #12]
 80090e4:	f012 0f04 	tst.w	r2, #4
 80090e8:	f103 0204 	add.w	r2, r3, #4
 80090ec:	600a      	str	r2, [r1, #0]
 80090ee:	d1d9      	bne.n	80090a4 <_scanf_float+0x398>
 80090f0:	f8d3 8000 	ldr.w	r8, [r3]
 80090f4:	ee10 2a10 	vmov	r2, s0
 80090f8:	ee10 0a10 	vmov	r0, s0
 80090fc:	463b      	mov	r3, r7
 80090fe:	4639      	mov	r1, r7
 8009100:	f7f7 fd14 	bl	8000b2c <__aeabi_dcmpun>
 8009104:	b128      	cbz	r0, 8009112 <_scanf_float+0x406>
 8009106:	4808      	ldr	r0, [pc, #32]	; (8009128 <_scanf_float+0x41c>)
 8009108:	f000 f88a 	bl	8009220 <nanf>
 800910c:	ed88 0a00 	vstr	s0, [r8]
 8009110:	e7cb      	b.n	80090aa <_scanf_float+0x39e>
 8009112:	4630      	mov	r0, r6
 8009114:	4639      	mov	r1, r7
 8009116:	f7f7 fd67 	bl	8000be8 <__aeabi_d2f>
 800911a:	f8c8 0000 	str.w	r0, [r8]
 800911e:	e7c4      	b.n	80090aa <_scanf_float+0x39e>
 8009120:	2500      	movs	r5, #0
 8009122:	e634      	b.n	8008d8e <_scanf_float+0x82>
 8009124:	0800cc98 	.word	0x0800cc98
 8009128:	0800cd2b 	.word	0x0800cd2b

0800912c <cleanup_glue>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	460c      	mov	r4, r1
 8009130:	6809      	ldr	r1, [r1, #0]
 8009132:	4605      	mov	r5, r0
 8009134:	b109      	cbz	r1, 800913a <cleanup_glue+0xe>
 8009136:	f7ff fff9 	bl	800912c <cleanup_glue>
 800913a:	4621      	mov	r1, r4
 800913c:	4628      	mov	r0, r5
 800913e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009142:	f003 b8bd 	b.w	800c2c0 <_free_r>
	...

08009148 <_reclaim_reent>:
 8009148:	4b2c      	ldr	r3, [pc, #176]	; (80091fc <_reclaim_reent+0xb4>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4283      	cmp	r3, r0
 800914e:	b570      	push	{r4, r5, r6, lr}
 8009150:	4604      	mov	r4, r0
 8009152:	d051      	beq.n	80091f8 <_reclaim_reent+0xb0>
 8009154:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009156:	b143      	cbz	r3, 800916a <_reclaim_reent+0x22>
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d14a      	bne.n	80091f4 <_reclaim_reent+0xac>
 800915e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009160:	6819      	ldr	r1, [r3, #0]
 8009162:	b111      	cbz	r1, 800916a <_reclaim_reent+0x22>
 8009164:	4620      	mov	r0, r4
 8009166:	f003 f8ab 	bl	800c2c0 <_free_r>
 800916a:	6961      	ldr	r1, [r4, #20]
 800916c:	b111      	cbz	r1, 8009174 <_reclaim_reent+0x2c>
 800916e:	4620      	mov	r0, r4
 8009170:	f003 f8a6 	bl	800c2c0 <_free_r>
 8009174:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009176:	b111      	cbz	r1, 800917e <_reclaim_reent+0x36>
 8009178:	4620      	mov	r0, r4
 800917a:	f003 f8a1 	bl	800c2c0 <_free_r>
 800917e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009180:	b111      	cbz	r1, 8009188 <_reclaim_reent+0x40>
 8009182:	4620      	mov	r0, r4
 8009184:	f003 f89c 	bl	800c2c0 <_free_r>
 8009188:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800918a:	b111      	cbz	r1, 8009192 <_reclaim_reent+0x4a>
 800918c:	4620      	mov	r0, r4
 800918e:	f003 f897 	bl	800c2c0 <_free_r>
 8009192:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009194:	b111      	cbz	r1, 800919c <_reclaim_reent+0x54>
 8009196:	4620      	mov	r0, r4
 8009198:	f003 f892 	bl	800c2c0 <_free_r>
 800919c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800919e:	b111      	cbz	r1, 80091a6 <_reclaim_reent+0x5e>
 80091a0:	4620      	mov	r0, r4
 80091a2:	f003 f88d 	bl	800c2c0 <_free_r>
 80091a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80091a8:	b111      	cbz	r1, 80091b0 <_reclaim_reent+0x68>
 80091aa:	4620      	mov	r0, r4
 80091ac:	f003 f888 	bl	800c2c0 <_free_r>
 80091b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091b2:	b111      	cbz	r1, 80091ba <_reclaim_reent+0x72>
 80091b4:	4620      	mov	r0, r4
 80091b6:	f003 f883 	bl	800c2c0 <_free_r>
 80091ba:	69a3      	ldr	r3, [r4, #24]
 80091bc:	b1e3      	cbz	r3, 80091f8 <_reclaim_reent+0xb0>
 80091be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80091c0:	4620      	mov	r0, r4
 80091c2:	4798      	blx	r3
 80091c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80091c6:	b1b9      	cbz	r1, 80091f8 <_reclaim_reent+0xb0>
 80091c8:	4620      	mov	r0, r4
 80091ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091ce:	f7ff bfad 	b.w	800912c <cleanup_glue>
 80091d2:	5949      	ldr	r1, [r1, r5]
 80091d4:	b941      	cbnz	r1, 80091e8 <_reclaim_reent+0xa0>
 80091d6:	3504      	adds	r5, #4
 80091d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091da:	2d80      	cmp	r5, #128	; 0x80
 80091dc:	68d9      	ldr	r1, [r3, #12]
 80091de:	d1f8      	bne.n	80091d2 <_reclaim_reent+0x8a>
 80091e0:	4620      	mov	r0, r4
 80091e2:	f003 f86d 	bl	800c2c0 <_free_r>
 80091e6:	e7ba      	b.n	800915e <_reclaim_reent+0x16>
 80091e8:	680e      	ldr	r6, [r1, #0]
 80091ea:	4620      	mov	r0, r4
 80091ec:	f003 f868 	bl	800c2c0 <_free_r>
 80091f0:	4631      	mov	r1, r6
 80091f2:	e7ef      	b.n	80091d4 <_reclaim_reent+0x8c>
 80091f4:	2500      	movs	r5, #0
 80091f6:	e7ef      	b.n	80091d8 <_reclaim_reent+0x90>
 80091f8:	bd70      	pop	{r4, r5, r6, pc}
 80091fa:	bf00      	nop
 80091fc:	20000010 	.word	0x20000010

08009200 <_sbrk_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4d06      	ldr	r5, [pc, #24]	; (800921c <_sbrk_r+0x1c>)
 8009204:	2300      	movs	r3, #0
 8009206:	4604      	mov	r4, r0
 8009208:	4608      	mov	r0, r1
 800920a:	602b      	str	r3, [r5, #0]
 800920c:	f7f8 fae4 	bl	80017d8 <_sbrk>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_sbrk_r+0x1a>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b103      	cbz	r3, 800921a <_sbrk_r+0x1a>
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	20001a78 	.word	0x20001a78

08009220 <nanf>:
 8009220:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009228 <nanf+0x8>
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	7fc00000 	.word	0x7fc00000

0800922c <siprintf>:
 800922c:	b40e      	push	{r1, r2, r3}
 800922e:	b500      	push	{lr}
 8009230:	b09c      	sub	sp, #112	; 0x70
 8009232:	ab1d      	add	r3, sp, #116	; 0x74
 8009234:	9002      	str	r0, [sp, #8]
 8009236:	9006      	str	r0, [sp, #24]
 8009238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800923c:	4809      	ldr	r0, [pc, #36]	; (8009264 <siprintf+0x38>)
 800923e:	9107      	str	r1, [sp, #28]
 8009240:	9104      	str	r1, [sp, #16]
 8009242:	4909      	ldr	r1, [pc, #36]	; (8009268 <siprintf+0x3c>)
 8009244:	f853 2b04 	ldr.w	r2, [r3], #4
 8009248:	9105      	str	r1, [sp, #20]
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	a902      	add	r1, sp, #8
 8009250:	f003 f8de 	bl	800c410 <_svfiprintf_r>
 8009254:	9b02      	ldr	r3, [sp, #8]
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	b01c      	add	sp, #112	; 0x70
 800925c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009260:	b003      	add	sp, #12
 8009262:	4770      	bx	lr
 8009264:	20000010 	.word	0x20000010
 8009268:	ffff0208 	.word	0xffff0208

0800926c <__sread>:
 800926c:	b510      	push	{r4, lr}
 800926e:	460c      	mov	r4, r1
 8009270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009274:	f003 fb26 	bl	800c8c4 <_read_r>
 8009278:	2800      	cmp	r0, #0
 800927a:	bfab      	itete	ge
 800927c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800927e:	89a3      	ldrhlt	r3, [r4, #12]
 8009280:	181b      	addge	r3, r3, r0
 8009282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009286:	bfac      	ite	ge
 8009288:	6563      	strge	r3, [r4, #84]	; 0x54
 800928a:	81a3      	strhlt	r3, [r4, #12]
 800928c:	bd10      	pop	{r4, pc}

0800928e <__swrite>:
 800928e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009292:	461f      	mov	r7, r3
 8009294:	898b      	ldrh	r3, [r1, #12]
 8009296:	05db      	lsls	r3, r3, #23
 8009298:	4605      	mov	r5, r0
 800929a:	460c      	mov	r4, r1
 800929c:	4616      	mov	r6, r2
 800929e:	d505      	bpl.n	80092ac <__swrite+0x1e>
 80092a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a4:	2302      	movs	r3, #2
 80092a6:	2200      	movs	r2, #0
 80092a8:	f002 fa94 	bl	800b7d4 <_lseek_r>
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092b6:	81a3      	strh	r3, [r4, #12]
 80092b8:	4632      	mov	r2, r6
 80092ba:	463b      	mov	r3, r7
 80092bc:	4628      	mov	r0, r5
 80092be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092c2:	f000 bf17 	b.w	800a0f4 <_write_r>

080092c6 <__sseek>:
 80092c6:	b510      	push	{r4, lr}
 80092c8:	460c      	mov	r4, r1
 80092ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ce:	f002 fa81 	bl	800b7d4 <_lseek_r>
 80092d2:	1c43      	adds	r3, r0, #1
 80092d4:	89a3      	ldrh	r3, [r4, #12]
 80092d6:	bf15      	itete	ne
 80092d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80092da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092e2:	81a3      	strheq	r3, [r4, #12]
 80092e4:	bf18      	it	ne
 80092e6:	81a3      	strhne	r3, [r4, #12]
 80092e8:	bd10      	pop	{r4, pc}

080092ea <__sclose>:
 80092ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ee:	f000 bf9f 	b.w	800a230 <_close_r>

080092f2 <sulp>:
 80092f2:	b570      	push	{r4, r5, r6, lr}
 80092f4:	4604      	mov	r4, r0
 80092f6:	460d      	mov	r5, r1
 80092f8:	ec45 4b10 	vmov	d0, r4, r5
 80092fc:	4616      	mov	r6, r2
 80092fe:	f002 fe79 	bl	800bff4 <__ulp>
 8009302:	ec51 0b10 	vmov	r0, r1, d0
 8009306:	b17e      	cbz	r6, 8009328 <sulp+0x36>
 8009308:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800930c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009310:	2b00      	cmp	r3, #0
 8009312:	dd09      	ble.n	8009328 <sulp+0x36>
 8009314:	051b      	lsls	r3, r3, #20
 8009316:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800931a:	2400      	movs	r4, #0
 800931c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009320:	4622      	mov	r2, r4
 8009322:	462b      	mov	r3, r5
 8009324:	f7f7 f968 	bl	80005f8 <__aeabi_dmul>
 8009328:	bd70      	pop	{r4, r5, r6, pc}
 800932a:	0000      	movs	r0, r0
 800932c:	0000      	movs	r0, r0
	...

08009330 <_strtod_l>:
 8009330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009334:	ed2d 8b02 	vpush	{d8}
 8009338:	b09d      	sub	sp, #116	; 0x74
 800933a:	461f      	mov	r7, r3
 800933c:	2300      	movs	r3, #0
 800933e:	9318      	str	r3, [sp, #96]	; 0x60
 8009340:	4ba2      	ldr	r3, [pc, #648]	; (80095cc <_strtod_l+0x29c>)
 8009342:	9213      	str	r2, [sp, #76]	; 0x4c
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	9305      	str	r3, [sp, #20]
 8009348:	4604      	mov	r4, r0
 800934a:	4618      	mov	r0, r3
 800934c:	4688      	mov	r8, r1
 800934e:	f7f6 ff3f 	bl	80001d0 <strlen>
 8009352:	f04f 0a00 	mov.w	sl, #0
 8009356:	4605      	mov	r5, r0
 8009358:	f04f 0b00 	mov.w	fp, #0
 800935c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009362:	781a      	ldrb	r2, [r3, #0]
 8009364:	2a2b      	cmp	r2, #43	; 0x2b
 8009366:	d04e      	beq.n	8009406 <_strtod_l+0xd6>
 8009368:	d83b      	bhi.n	80093e2 <_strtod_l+0xb2>
 800936a:	2a0d      	cmp	r2, #13
 800936c:	d834      	bhi.n	80093d8 <_strtod_l+0xa8>
 800936e:	2a08      	cmp	r2, #8
 8009370:	d834      	bhi.n	80093dc <_strtod_l+0xac>
 8009372:	2a00      	cmp	r2, #0
 8009374:	d03e      	beq.n	80093f4 <_strtod_l+0xc4>
 8009376:	2300      	movs	r3, #0
 8009378:	930a      	str	r3, [sp, #40]	; 0x28
 800937a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800937c:	7833      	ldrb	r3, [r6, #0]
 800937e:	2b30      	cmp	r3, #48	; 0x30
 8009380:	f040 80b0 	bne.w	80094e4 <_strtod_l+0x1b4>
 8009384:	7873      	ldrb	r3, [r6, #1]
 8009386:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800938a:	2b58      	cmp	r3, #88	; 0x58
 800938c:	d168      	bne.n	8009460 <_strtod_l+0x130>
 800938e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	ab18      	add	r3, sp, #96	; 0x60
 8009394:	9702      	str	r7, [sp, #8]
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	4a8d      	ldr	r2, [pc, #564]	; (80095d0 <_strtod_l+0x2a0>)
 800939a:	ab19      	add	r3, sp, #100	; 0x64
 800939c:	a917      	add	r1, sp, #92	; 0x5c
 800939e:	4620      	mov	r0, r4
 80093a0:	f001 ff0c 	bl	800b1bc <__gethex>
 80093a4:	f010 0707 	ands.w	r7, r0, #7
 80093a8:	4605      	mov	r5, r0
 80093aa:	d005      	beq.n	80093b8 <_strtod_l+0x88>
 80093ac:	2f06      	cmp	r7, #6
 80093ae:	d12c      	bne.n	800940a <_strtod_l+0xda>
 80093b0:	3601      	adds	r6, #1
 80093b2:	2300      	movs	r3, #0
 80093b4:	9617      	str	r6, [sp, #92]	; 0x5c
 80093b6:	930a      	str	r3, [sp, #40]	; 0x28
 80093b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f040 8590 	bne.w	8009ee0 <_strtod_l+0xbb0>
 80093c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c2:	b1eb      	cbz	r3, 8009400 <_strtod_l+0xd0>
 80093c4:	4652      	mov	r2, sl
 80093c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80093ca:	ec43 2b10 	vmov	d0, r2, r3
 80093ce:	b01d      	add	sp, #116	; 0x74
 80093d0:	ecbd 8b02 	vpop	{d8}
 80093d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d8:	2a20      	cmp	r2, #32
 80093da:	d1cc      	bne.n	8009376 <_strtod_l+0x46>
 80093dc:	3301      	adds	r3, #1
 80093de:	9317      	str	r3, [sp, #92]	; 0x5c
 80093e0:	e7be      	b.n	8009360 <_strtod_l+0x30>
 80093e2:	2a2d      	cmp	r2, #45	; 0x2d
 80093e4:	d1c7      	bne.n	8009376 <_strtod_l+0x46>
 80093e6:	2201      	movs	r2, #1
 80093e8:	920a      	str	r2, [sp, #40]	; 0x28
 80093ea:	1c5a      	adds	r2, r3, #1
 80093ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80093ee:	785b      	ldrb	r3, [r3, #1]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1c2      	bne.n	800937a <_strtod_l+0x4a>
 80093f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f040 856e 	bne.w	8009edc <_strtod_l+0xbac>
 8009400:	4652      	mov	r2, sl
 8009402:	465b      	mov	r3, fp
 8009404:	e7e1      	b.n	80093ca <_strtod_l+0x9a>
 8009406:	2200      	movs	r2, #0
 8009408:	e7ee      	b.n	80093e8 <_strtod_l+0xb8>
 800940a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800940c:	b13a      	cbz	r2, 800941e <_strtod_l+0xee>
 800940e:	2135      	movs	r1, #53	; 0x35
 8009410:	a81a      	add	r0, sp, #104	; 0x68
 8009412:	f002 fefa 	bl	800c20a <__copybits>
 8009416:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009418:	4620      	mov	r0, r4
 800941a:	f002 fab9 	bl	800b990 <_Bfree>
 800941e:	3f01      	subs	r7, #1
 8009420:	2f04      	cmp	r7, #4
 8009422:	d806      	bhi.n	8009432 <_strtod_l+0x102>
 8009424:	e8df f007 	tbb	[pc, r7]
 8009428:	1714030a 	.word	0x1714030a
 800942c:	0a          	.byte	0x0a
 800942d:	00          	.byte	0x00
 800942e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009432:	0728      	lsls	r0, r5, #28
 8009434:	d5c0      	bpl.n	80093b8 <_strtod_l+0x88>
 8009436:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800943a:	e7bd      	b.n	80093b8 <_strtod_l+0x88>
 800943c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009440:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009442:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009446:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800944a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800944e:	e7f0      	b.n	8009432 <_strtod_l+0x102>
 8009450:	f8df b180 	ldr.w	fp, [pc, #384]	; 80095d4 <_strtod_l+0x2a4>
 8009454:	e7ed      	b.n	8009432 <_strtod_l+0x102>
 8009456:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800945a:	f04f 3aff 	mov.w	sl, #4294967295
 800945e:	e7e8      	b.n	8009432 <_strtod_l+0x102>
 8009460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009462:	1c5a      	adds	r2, r3, #1
 8009464:	9217      	str	r2, [sp, #92]	; 0x5c
 8009466:	785b      	ldrb	r3, [r3, #1]
 8009468:	2b30      	cmp	r3, #48	; 0x30
 800946a:	d0f9      	beq.n	8009460 <_strtod_l+0x130>
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0a3      	beq.n	80093b8 <_strtod_l+0x88>
 8009470:	2301      	movs	r3, #1
 8009472:	f04f 0900 	mov.w	r9, #0
 8009476:	9304      	str	r3, [sp, #16]
 8009478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800947a:	9308      	str	r3, [sp, #32]
 800947c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009480:	464f      	mov	r7, r9
 8009482:	220a      	movs	r2, #10
 8009484:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009486:	7806      	ldrb	r6, [r0, #0]
 8009488:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800948c:	b2d9      	uxtb	r1, r3
 800948e:	2909      	cmp	r1, #9
 8009490:	d92a      	bls.n	80094e8 <_strtod_l+0x1b8>
 8009492:	9905      	ldr	r1, [sp, #20]
 8009494:	462a      	mov	r2, r5
 8009496:	f003 fa2f 	bl	800c8f8 <strncmp>
 800949a:	b398      	cbz	r0, 8009504 <_strtod_l+0x1d4>
 800949c:	2000      	movs	r0, #0
 800949e:	4632      	mov	r2, r6
 80094a0:	463d      	mov	r5, r7
 80094a2:	9005      	str	r0, [sp, #20]
 80094a4:	4603      	mov	r3, r0
 80094a6:	2a65      	cmp	r2, #101	; 0x65
 80094a8:	d001      	beq.n	80094ae <_strtod_l+0x17e>
 80094aa:	2a45      	cmp	r2, #69	; 0x45
 80094ac:	d118      	bne.n	80094e0 <_strtod_l+0x1b0>
 80094ae:	b91d      	cbnz	r5, 80094b8 <_strtod_l+0x188>
 80094b0:	9a04      	ldr	r2, [sp, #16]
 80094b2:	4302      	orrs	r2, r0
 80094b4:	d09e      	beq.n	80093f4 <_strtod_l+0xc4>
 80094b6:	2500      	movs	r5, #0
 80094b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80094bc:	f108 0201 	add.w	r2, r8, #1
 80094c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80094c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80094c6:	2a2b      	cmp	r2, #43	; 0x2b
 80094c8:	d075      	beq.n	80095b6 <_strtod_l+0x286>
 80094ca:	2a2d      	cmp	r2, #45	; 0x2d
 80094cc:	d07b      	beq.n	80095c6 <_strtod_l+0x296>
 80094ce:	f04f 0c00 	mov.w	ip, #0
 80094d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80094d6:	2909      	cmp	r1, #9
 80094d8:	f240 8082 	bls.w	80095e0 <_strtod_l+0x2b0>
 80094dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80094e0:	2600      	movs	r6, #0
 80094e2:	e09d      	b.n	8009620 <_strtod_l+0x2f0>
 80094e4:	2300      	movs	r3, #0
 80094e6:	e7c4      	b.n	8009472 <_strtod_l+0x142>
 80094e8:	2f08      	cmp	r7, #8
 80094ea:	bfd8      	it	le
 80094ec:	9907      	ldrle	r1, [sp, #28]
 80094ee:	f100 0001 	add.w	r0, r0, #1
 80094f2:	bfda      	itte	le
 80094f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80094f8:	9307      	strle	r3, [sp, #28]
 80094fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80094fe:	3701      	adds	r7, #1
 8009500:	9017      	str	r0, [sp, #92]	; 0x5c
 8009502:	e7bf      	b.n	8009484 <_strtod_l+0x154>
 8009504:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009506:	195a      	adds	r2, r3, r5
 8009508:	9217      	str	r2, [sp, #92]	; 0x5c
 800950a:	5d5a      	ldrb	r2, [r3, r5]
 800950c:	2f00      	cmp	r7, #0
 800950e:	d037      	beq.n	8009580 <_strtod_l+0x250>
 8009510:	9005      	str	r0, [sp, #20]
 8009512:	463d      	mov	r5, r7
 8009514:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009518:	2b09      	cmp	r3, #9
 800951a:	d912      	bls.n	8009542 <_strtod_l+0x212>
 800951c:	2301      	movs	r3, #1
 800951e:	e7c2      	b.n	80094a6 <_strtod_l+0x176>
 8009520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009522:	1c5a      	adds	r2, r3, #1
 8009524:	9217      	str	r2, [sp, #92]	; 0x5c
 8009526:	785a      	ldrb	r2, [r3, #1]
 8009528:	3001      	adds	r0, #1
 800952a:	2a30      	cmp	r2, #48	; 0x30
 800952c:	d0f8      	beq.n	8009520 <_strtod_l+0x1f0>
 800952e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009532:	2b08      	cmp	r3, #8
 8009534:	f200 84d9 	bhi.w	8009eea <_strtod_l+0xbba>
 8009538:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800953a:	9005      	str	r0, [sp, #20]
 800953c:	2000      	movs	r0, #0
 800953e:	9308      	str	r3, [sp, #32]
 8009540:	4605      	mov	r5, r0
 8009542:	3a30      	subs	r2, #48	; 0x30
 8009544:	f100 0301 	add.w	r3, r0, #1
 8009548:	d014      	beq.n	8009574 <_strtod_l+0x244>
 800954a:	9905      	ldr	r1, [sp, #20]
 800954c:	4419      	add	r1, r3
 800954e:	9105      	str	r1, [sp, #20]
 8009550:	462b      	mov	r3, r5
 8009552:	eb00 0e05 	add.w	lr, r0, r5
 8009556:	210a      	movs	r1, #10
 8009558:	4573      	cmp	r3, lr
 800955a:	d113      	bne.n	8009584 <_strtod_l+0x254>
 800955c:	182b      	adds	r3, r5, r0
 800955e:	2b08      	cmp	r3, #8
 8009560:	f105 0501 	add.w	r5, r5, #1
 8009564:	4405      	add	r5, r0
 8009566:	dc1c      	bgt.n	80095a2 <_strtod_l+0x272>
 8009568:	9907      	ldr	r1, [sp, #28]
 800956a:	230a      	movs	r3, #10
 800956c:	fb03 2301 	mla	r3, r3, r1, r2
 8009570:	9307      	str	r3, [sp, #28]
 8009572:	2300      	movs	r3, #0
 8009574:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009576:	1c51      	adds	r1, r2, #1
 8009578:	9117      	str	r1, [sp, #92]	; 0x5c
 800957a:	7852      	ldrb	r2, [r2, #1]
 800957c:	4618      	mov	r0, r3
 800957e:	e7c9      	b.n	8009514 <_strtod_l+0x1e4>
 8009580:	4638      	mov	r0, r7
 8009582:	e7d2      	b.n	800952a <_strtod_l+0x1fa>
 8009584:	2b08      	cmp	r3, #8
 8009586:	dc04      	bgt.n	8009592 <_strtod_l+0x262>
 8009588:	9e07      	ldr	r6, [sp, #28]
 800958a:	434e      	muls	r6, r1
 800958c:	9607      	str	r6, [sp, #28]
 800958e:	3301      	adds	r3, #1
 8009590:	e7e2      	b.n	8009558 <_strtod_l+0x228>
 8009592:	f103 0c01 	add.w	ip, r3, #1
 8009596:	f1bc 0f10 	cmp.w	ip, #16
 800959a:	bfd8      	it	le
 800959c:	fb01 f909 	mulle.w	r9, r1, r9
 80095a0:	e7f5      	b.n	800958e <_strtod_l+0x25e>
 80095a2:	2d10      	cmp	r5, #16
 80095a4:	bfdc      	itt	le
 80095a6:	230a      	movle	r3, #10
 80095a8:	fb03 2909 	mlale	r9, r3, r9, r2
 80095ac:	e7e1      	b.n	8009572 <_strtod_l+0x242>
 80095ae:	2300      	movs	r3, #0
 80095b0:	9305      	str	r3, [sp, #20]
 80095b2:	2301      	movs	r3, #1
 80095b4:	e77c      	b.n	80094b0 <_strtod_l+0x180>
 80095b6:	f04f 0c00 	mov.w	ip, #0
 80095ba:	f108 0202 	add.w	r2, r8, #2
 80095be:	9217      	str	r2, [sp, #92]	; 0x5c
 80095c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80095c4:	e785      	b.n	80094d2 <_strtod_l+0x1a2>
 80095c6:	f04f 0c01 	mov.w	ip, #1
 80095ca:	e7f6      	b.n	80095ba <_strtod_l+0x28a>
 80095cc:	0800cf24 	.word	0x0800cf24
 80095d0:	0800cca0 	.word	0x0800cca0
 80095d4:	7ff00000 	.word	0x7ff00000
 80095d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095da:	1c51      	adds	r1, r2, #1
 80095dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80095de:	7852      	ldrb	r2, [r2, #1]
 80095e0:	2a30      	cmp	r2, #48	; 0x30
 80095e2:	d0f9      	beq.n	80095d8 <_strtod_l+0x2a8>
 80095e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80095e8:	2908      	cmp	r1, #8
 80095ea:	f63f af79 	bhi.w	80094e0 <_strtod_l+0x1b0>
 80095ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80095f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095f4:	9206      	str	r2, [sp, #24]
 80095f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095f8:	1c51      	adds	r1, r2, #1
 80095fa:	9117      	str	r1, [sp, #92]	; 0x5c
 80095fc:	7852      	ldrb	r2, [r2, #1]
 80095fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009602:	2e09      	cmp	r6, #9
 8009604:	d937      	bls.n	8009676 <_strtod_l+0x346>
 8009606:	9e06      	ldr	r6, [sp, #24]
 8009608:	1b89      	subs	r1, r1, r6
 800960a:	2908      	cmp	r1, #8
 800960c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009610:	dc02      	bgt.n	8009618 <_strtod_l+0x2e8>
 8009612:	4576      	cmp	r6, lr
 8009614:	bfa8      	it	ge
 8009616:	4676      	movge	r6, lr
 8009618:	f1bc 0f00 	cmp.w	ip, #0
 800961c:	d000      	beq.n	8009620 <_strtod_l+0x2f0>
 800961e:	4276      	negs	r6, r6
 8009620:	2d00      	cmp	r5, #0
 8009622:	d14d      	bne.n	80096c0 <_strtod_l+0x390>
 8009624:	9904      	ldr	r1, [sp, #16]
 8009626:	4301      	orrs	r1, r0
 8009628:	f47f aec6 	bne.w	80093b8 <_strtod_l+0x88>
 800962c:	2b00      	cmp	r3, #0
 800962e:	f47f aee1 	bne.w	80093f4 <_strtod_l+0xc4>
 8009632:	2a69      	cmp	r2, #105	; 0x69
 8009634:	d027      	beq.n	8009686 <_strtod_l+0x356>
 8009636:	dc24      	bgt.n	8009682 <_strtod_l+0x352>
 8009638:	2a49      	cmp	r2, #73	; 0x49
 800963a:	d024      	beq.n	8009686 <_strtod_l+0x356>
 800963c:	2a4e      	cmp	r2, #78	; 0x4e
 800963e:	f47f aed9 	bne.w	80093f4 <_strtod_l+0xc4>
 8009642:	499f      	ldr	r1, [pc, #636]	; (80098c0 <_strtod_l+0x590>)
 8009644:	a817      	add	r0, sp, #92	; 0x5c
 8009646:	f002 f811 	bl	800b66c <__match>
 800964a:	2800      	cmp	r0, #0
 800964c:	f43f aed2 	beq.w	80093f4 <_strtod_l+0xc4>
 8009650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	2b28      	cmp	r3, #40	; 0x28
 8009656:	d12d      	bne.n	80096b4 <_strtod_l+0x384>
 8009658:	499a      	ldr	r1, [pc, #616]	; (80098c4 <_strtod_l+0x594>)
 800965a:	aa1a      	add	r2, sp, #104	; 0x68
 800965c:	a817      	add	r0, sp, #92	; 0x5c
 800965e:	f002 f819 	bl	800b694 <__hexnan>
 8009662:	2805      	cmp	r0, #5
 8009664:	d126      	bne.n	80096b4 <_strtod_l+0x384>
 8009666:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009668:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800966c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009670:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009674:	e6a0      	b.n	80093b8 <_strtod_l+0x88>
 8009676:	210a      	movs	r1, #10
 8009678:	fb01 2e0e 	mla	lr, r1, lr, r2
 800967c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009680:	e7b9      	b.n	80095f6 <_strtod_l+0x2c6>
 8009682:	2a6e      	cmp	r2, #110	; 0x6e
 8009684:	e7db      	b.n	800963e <_strtod_l+0x30e>
 8009686:	4990      	ldr	r1, [pc, #576]	; (80098c8 <_strtod_l+0x598>)
 8009688:	a817      	add	r0, sp, #92	; 0x5c
 800968a:	f001 ffef 	bl	800b66c <__match>
 800968e:	2800      	cmp	r0, #0
 8009690:	f43f aeb0 	beq.w	80093f4 <_strtod_l+0xc4>
 8009694:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009696:	498d      	ldr	r1, [pc, #564]	; (80098cc <_strtod_l+0x59c>)
 8009698:	3b01      	subs	r3, #1
 800969a:	a817      	add	r0, sp, #92	; 0x5c
 800969c:	9317      	str	r3, [sp, #92]	; 0x5c
 800969e:	f001 ffe5 	bl	800b66c <__match>
 80096a2:	b910      	cbnz	r0, 80096aa <_strtod_l+0x37a>
 80096a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096a6:	3301      	adds	r3, #1
 80096a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80096aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 80098dc <_strtod_l+0x5ac>
 80096ae:	f04f 0a00 	mov.w	sl, #0
 80096b2:	e681      	b.n	80093b8 <_strtod_l+0x88>
 80096b4:	4886      	ldr	r0, [pc, #536]	; (80098d0 <_strtod_l+0x5a0>)
 80096b6:	f003 f917 	bl	800c8e8 <nan>
 80096ba:	ec5b ab10 	vmov	sl, fp, d0
 80096be:	e67b      	b.n	80093b8 <_strtod_l+0x88>
 80096c0:	9b05      	ldr	r3, [sp, #20]
 80096c2:	9807      	ldr	r0, [sp, #28]
 80096c4:	1af3      	subs	r3, r6, r3
 80096c6:	2f00      	cmp	r7, #0
 80096c8:	bf08      	it	eq
 80096ca:	462f      	moveq	r7, r5
 80096cc:	2d10      	cmp	r5, #16
 80096ce:	9306      	str	r3, [sp, #24]
 80096d0:	46a8      	mov	r8, r5
 80096d2:	bfa8      	it	ge
 80096d4:	f04f 0810 	movge.w	r8, #16
 80096d8:	f7f6 ff14 	bl	8000504 <__aeabi_ui2d>
 80096dc:	2d09      	cmp	r5, #9
 80096de:	4682      	mov	sl, r0
 80096e0:	468b      	mov	fp, r1
 80096e2:	dd13      	ble.n	800970c <_strtod_l+0x3dc>
 80096e4:	4b7b      	ldr	r3, [pc, #492]	; (80098d4 <_strtod_l+0x5a4>)
 80096e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80096ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80096ee:	f7f6 ff83 	bl	80005f8 <__aeabi_dmul>
 80096f2:	4682      	mov	sl, r0
 80096f4:	4648      	mov	r0, r9
 80096f6:	468b      	mov	fp, r1
 80096f8:	f7f6 ff04 	bl	8000504 <__aeabi_ui2d>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	4650      	mov	r0, sl
 8009702:	4659      	mov	r1, fp
 8009704:	f7f6 fdc2 	bl	800028c <__adddf3>
 8009708:	4682      	mov	sl, r0
 800970a:	468b      	mov	fp, r1
 800970c:	2d0f      	cmp	r5, #15
 800970e:	dc38      	bgt.n	8009782 <_strtod_l+0x452>
 8009710:	9b06      	ldr	r3, [sp, #24]
 8009712:	2b00      	cmp	r3, #0
 8009714:	f43f ae50 	beq.w	80093b8 <_strtod_l+0x88>
 8009718:	dd24      	ble.n	8009764 <_strtod_l+0x434>
 800971a:	2b16      	cmp	r3, #22
 800971c:	dc0b      	bgt.n	8009736 <_strtod_l+0x406>
 800971e:	496d      	ldr	r1, [pc, #436]	; (80098d4 <_strtod_l+0x5a4>)
 8009720:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009728:	4652      	mov	r2, sl
 800972a:	465b      	mov	r3, fp
 800972c:	f7f6 ff64 	bl	80005f8 <__aeabi_dmul>
 8009730:	4682      	mov	sl, r0
 8009732:	468b      	mov	fp, r1
 8009734:	e640      	b.n	80093b8 <_strtod_l+0x88>
 8009736:	9a06      	ldr	r2, [sp, #24]
 8009738:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800973c:	4293      	cmp	r3, r2
 800973e:	db20      	blt.n	8009782 <_strtod_l+0x452>
 8009740:	4c64      	ldr	r4, [pc, #400]	; (80098d4 <_strtod_l+0x5a4>)
 8009742:	f1c5 050f 	rsb	r5, r5, #15
 8009746:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800974a:	4652      	mov	r2, sl
 800974c:	465b      	mov	r3, fp
 800974e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009752:	f7f6 ff51 	bl	80005f8 <__aeabi_dmul>
 8009756:	9b06      	ldr	r3, [sp, #24]
 8009758:	1b5d      	subs	r5, r3, r5
 800975a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800975e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009762:	e7e3      	b.n	800972c <_strtod_l+0x3fc>
 8009764:	9b06      	ldr	r3, [sp, #24]
 8009766:	3316      	adds	r3, #22
 8009768:	db0b      	blt.n	8009782 <_strtod_l+0x452>
 800976a:	9b05      	ldr	r3, [sp, #20]
 800976c:	1b9e      	subs	r6, r3, r6
 800976e:	4b59      	ldr	r3, [pc, #356]	; (80098d4 <_strtod_l+0x5a4>)
 8009770:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009774:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009778:	4650      	mov	r0, sl
 800977a:	4659      	mov	r1, fp
 800977c:	f7f7 f866 	bl	800084c <__aeabi_ddiv>
 8009780:	e7d6      	b.n	8009730 <_strtod_l+0x400>
 8009782:	9b06      	ldr	r3, [sp, #24]
 8009784:	eba5 0808 	sub.w	r8, r5, r8
 8009788:	4498      	add	r8, r3
 800978a:	f1b8 0f00 	cmp.w	r8, #0
 800978e:	dd74      	ble.n	800987a <_strtod_l+0x54a>
 8009790:	f018 030f 	ands.w	r3, r8, #15
 8009794:	d00a      	beq.n	80097ac <_strtod_l+0x47c>
 8009796:	494f      	ldr	r1, [pc, #316]	; (80098d4 <_strtod_l+0x5a4>)
 8009798:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800979c:	4652      	mov	r2, sl
 800979e:	465b      	mov	r3, fp
 80097a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a4:	f7f6 ff28 	bl	80005f8 <__aeabi_dmul>
 80097a8:	4682      	mov	sl, r0
 80097aa:	468b      	mov	fp, r1
 80097ac:	f038 080f 	bics.w	r8, r8, #15
 80097b0:	d04f      	beq.n	8009852 <_strtod_l+0x522>
 80097b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80097b6:	dd22      	ble.n	80097fe <_strtod_l+0x4ce>
 80097b8:	2500      	movs	r5, #0
 80097ba:	462e      	mov	r6, r5
 80097bc:	9507      	str	r5, [sp, #28]
 80097be:	9505      	str	r5, [sp, #20]
 80097c0:	2322      	movs	r3, #34	; 0x22
 80097c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80098dc <_strtod_l+0x5ac>
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	f04f 0a00 	mov.w	sl, #0
 80097cc:	9b07      	ldr	r3, [sp, #28]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f43f adf2 	beq.w	80093b8 <_strtod_l+0x88>
 80097d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097d6:	4620      	mov	r0, r4
 80097d8:	f002 f8da 	bl	800b990 <_Bfree>
 80097dc:	9905      	ldr	r1, [sp, #20]
 80097de:	4620      	mov	r0, r4
 80097e0:	f002 f8d6 	bl	800b990 <_Bfree>
 80097e4:	4631      	mov	r1, r6
 80097e6:	4620      	mov	r0, r4
 80097e8:	f002 f8d2 	bl	800b990 <_Bfree>
 80097ec:	9907      	ldr	r1, [sp, #28]
 80097ee:	4620      	mov	r0, r4
 80097f0:	f002 f8ce 	bl	800b990 <_Bfree>
 80097f4:	4629      	mov	r1, r5
 80097f6:	4620      	mov	r0, r4
 80097f8:	f002 f8ca 	bl	800b990 <_Bfree>
 80097fc:	e5dc      	b.n	80093b8 <_strtod_l+0x88>
 80097fe:	4b36      	ldr	r3, [pc, #216]	; (80098d8 <_strtod_l+0x5a8>)
 8009800:	9304      	str	r3, [sp, #16]
 8009802:	2300      	movs	r3, #0
 8009804:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009808:	4650      	mov	r0, sl
 800980a:	4659      	mov	r1, fp
 800980c:	4699      	mov	r9, r3
 800980e:	f1b8 0f01 	cmp.w	r8, #1
 8009812:	dc21      	bgt.n	8009858 <_strtod_l+0x528>
 8009814:	b10b      	cbz	r3, 800981a <_strtod_l+0x4ea>
 8009816:	4682      	mov	sl, r0
 8009818:	468b      	mov	fp, r1
 800981a:	4b2f      	ldr	r3, [pc, #188]	; (80098d8 <_strtod_l+0x5a8>)
 800981c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009820:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009824:	4652      	mov	r2, sl
 8009826:	465b      	mov	r3, fp
 8009828:	e9d9 0100 	ldrd	r0, r1, [r9]
 800982c:	f7f6 fee4 	bl	80005f8 <__aeabi_dmul>
 8009830:	4b2a      	ldr	r3, [pc, #168]	; (80098dc <_strtod_l+0x5ac>)
 8009832:	460a      	mov	r2, r1
 8009834:	400b      	ands	r3, r1
 8009836:	492a      	ldr	r1, [pc, #168]	; (80098e0 <_strtod_l+0x5b0>)
 8009838:	428b      	cmp	r3, r1
 800983a:	4682      	mov	sl, r0
 800983c:	d8bc      	bhi.n	80097b8 <_strtod_l+0x488>
 800983e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009842:	428b      	cmp	r3, r1
 8009844:	bf86      	itte	hi
 8009846:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80098e4 <_strtod_l+0x5b4>
 800984a:	f04f 3aff 	movhi.w	sl, #4294967295
 800984e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009852:	2300      	movs	r3, #0
 8009854:	9304      	str	r3, [sp, #16]
 8009856:	e084      	b.n	8009962 <_strtod_l+0x632>
 8009858:	f018 0f01 	tst.w	r8, #1
 800985c:	d005      	beq.n	800986a <_strtod_l+0x53a>
 800985e:	9b04      	ldr	r3, [sp, #16]
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	f7f6 fec8 	bl	80005f8 <__aeabi_dmul>
 8009868:	2301      	movs	r3, #1
 800986a:	9a04      	ldr	r2, [sp, #16]
 800986c:	3208      	adds	r2, #8
 800986e:	f109 0901 	add.w	r9, r9, #1
 8009872:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009876:	9204      	str	r2, [sp, #16]
 8009878:	e7c9      	b.n	800980e <_strtod_l+0x4de>
 800987a:	d0ea      	beq.n	8009852 <_strtod_l+0x522>
 800987c:	f1c8 0800 	rsb	r8, r8, #0
 8009880:	f018 020f 	ands.w	r2, r8, #15
 8009884:	d00a      	beq.n	800989c <_strtod_l+0x56c>
 8009886:	4b13      	ldr	r3, [pc, #76]	; (80098d4 <_strtod_l+0x5a4>)
 8009888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800988c:	4650      	mov	r0, sl
 800988e:	4659      	mov	r1, fp
 8009890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009894:	f7f6 ffda 	bl	800084c <__aeabi_ddiv>
 8009898:	4682      	mov	sl, r0
 800989a:	468b      	mov	fp, r1
 800989c:	ea5f 1828 	movs.w	r8, r8, asr #4
 80098a0:	d0d7      	beq.n	8009852 <_strtod_l+0x522>
 80098a2:	f1b8 0f1f 	cmp.w	r8, #31
 80098a6:	dd1f      	ble.n	80098e8 <_strtod_l+0x5b8>
 80098a8:	2500      	movs	r5, #0
 80098aa:	462e      	mov	r6, r5
 80098ac:	9507      	str	r5, [sp, #28]
 80098ae:	9505      	str	r5, [sp, #20]
 80098b0:	2322      	movs	r3, #34	; 0x22
 80098b2:	f04f 0a00 	mov.w	sl, #0
 80098b6:	f04f 0b00 	mov.w	fp, #0
 80098ba:	6023      	str	r3, [r4, #0]
 80098bc:	e786      	b.n	80097cc <_strtod_l+0x49c>
 80098be:	bf00      	nop
 80098c0:	0800cc71 	.word	0x0800cc71
 80098c4:	0800ccb4 	.word	0x0800ccb4
 80098c8:	0800cc69 	.word	0x0800cc69
 80098cc:	0800ce30 	.word	0x0800ce30
 80098d0:	0800cd2b 	.word	0x0800cd2b
 80098d4:	0800cfc0 	.word	0x0800cfc0
 80098d8:	0800cf98 	.word	0x0800cf98
 80098dc:	7ff00000 	.word	0x7ff00000
 80098e0:	7ca00000 	.word	0x7ca00000
 80098e4:	7fefffff 	.word	0x7fefffff
 80098e8:	f018 0310 	ands.w	r3, r8, #16
 80098ec:	bf18      	it	ne
 80098ee:	236a      	movne	r3, #106	; 0x6a
 80098f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009ca0 <_strtod_l+0x970>
 80098f4:	9304      	str	r3, [sp, #16]
 80098f6:	4650      	mov	r0, sl
 80098f8:	4659      	mov	r1, fp
 80098fa:	2300      	movs	r3, #0
 80098fc:	f018 0f01 	tst.w	r8, #1
 8009900:	d004      	beq.n	800990c <_strtod_l+0x5dc>
 8009902:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009906:	f7f6 fe77 	bl	80005f8 <__aeabi_dmul>
 800990a:	2301      	movs	r3, #1
 800990c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009910:	f109 0908 	add.w	r9, r9, #8
 8009914:	d1f2      	bne.n	80098fc <_strtod_l+0x5cc>
 8009916:	b10b      	cbz	r3, 800991c <_strtod_l+0x5ec>
 8009918:	4682      	mov	sl, r0
 800991a:	468b      	mov	fp, r1
 800991c:	9b04      	ldr	r3, [sp, #16]
 800991e:	b1c3      	cbz	r3, 8009952 <_strtod_l+0x622>
 8009920:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009924:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009928:	2b00      	cmp	r3, #0
 800992a:	4659      	mov	r1, fp
 800992c:	dd11      	ble.n	8009952 <_strtod_l+0x622>
 800992e:	2b1f      	cmp	r3, #31
 8009930:	f340 8124 	ble.w	8009b7c <_strtod_l+0x84c>
 8009934:	2b34      	cmp	r3, #52	; 0x34
 8009936:	bfde      	ittt	le
 8009938:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800993c:	f04f 33ff 	movle.w	r3, #4294967295
 8009940:	fa03 f202 	lslle.w	r2, r3, r2
 8009944:	f04f 0a00 	mov.w	sl, #0
 8009948:	bfcc      	ite	gt
 800994a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800994e:	ea02 0b01 	andle.w	fp, r2, r1
 8009952:	2200      	movs	r2, #0
 8009954:	2300      	movs	r3, #0
 8009956:	4650      	mov	r0, sl
 8009958:	4659      	mov	r1, fp
 800995a:	f7f7 f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800995e:	2800      	cmp	r0, #0
 8009960:	d1a2      	bne.n	80098a8 <_strtod_l+0x578>
 8009962:	9b07      	ldr	r3, [sp, #28]
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	9908      	ldr	r1, [sp, #32]
 8009968:	462b      	mov	r3, r5
 800996a:	463a      	mov	r2, r7
 800996c:	4620      	mov	r0, r4
 800996e:	f002 f877 	bl	800ba60 <__s2b>
 8009972:	9007      	str	r0, [sp, #28]
 8009974:	2800      	cmp	r0, #0
 8009976:	f43f af1f 	beq.w	80097b8 <_strtod_l+0x488>
 800997a:	9b05      	ldr	r3, [sp, #20]
 800997c:	1b9e      	subs	r6, r3, r6
 800997e:	9b06      	ldr	r3, [sp, #24]
 8009980:	2b00      	cmp	r3, #0
 8009982:	bfb4      	ite	lt
 8009984:	4633      	movlt	r3, r6
 8009986:	2300      	movge	r3, #0
 8009988:	930c      	str	r3, [sp, #48]	; 0x30
 800998a:	9b06      	ldr	r3, [sp, #24]
 800998c:	2500      	movs	r5, #0
 800998e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009992:	9312      	str	r3, [sp, #72]	; 0x48
 8009994:	462e      	mov	r6, r5
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	4620      	mov	r0, r4
 800999a:	6859      	ldr	r1, [r3, #4]
 800999c:	f001 ffb8 	bl	800b910 <_Balloc>
 80099a0:	9005      	str	r0, [sp, #20]
 80099a2:	2800      	cmp	r0, #0
 80099a4:	f43f af0c 	beq.w	80097c0 <_strtod_l+0x490>
 80099a8:	9b07      	ldr	r3, [sp, #28]
 80099aa:	691a      	ldr	r2, [r3, #16]
 80099ac:	3202      	adds	r2, #2
 80099ae:	f103 010c 	add.w	r1, r3, #12
 80099b2:	0092      	lsls	r2, r2, #2
 80099b4:	300c      	adds	r0, #12
 80099b6:	f7fe fc94 	bl	80082e2 <memcpy>
 80099ba:	ec4b ab10 	vmov	d0, sl, fp
 80099be:	aa1a      	add	r2, sp, #104	; 0x68
 80099c0:	a919      	add	r1, sp, #100	; 0x64
 80099c2:	4620      	mov	r0, r4
 80099c4:	f002 fb92 	bl	800c0ec <__d2b>
 80099c8:	ec4b ab18 	vmov	d8, sl, fp
 80099cc:	9018      	str	r0, [sp, #96]	; 0x60
 80099ce:	2800      	cmp	r0, #0
 80099d0:	f43f aef6 	beq.w	80097c0 <_strtod_l+0x490>
 80099d4:	2101      	movs	r1, #1
 80099d6:	4620      	mov	r0, r4
 80099d8:	f002 f8dc 	bl	800bb94 <__i2b>
 80099dc:	4606      	mov	r6, r0
 80099de:	2800      	cmp	r0, #0
 80099e0:	f43f aeee 	beq.w	80097c0 <_strtod_l+0x490>
 80099e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099e6:	9904      	ldr	r1, [sp, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	bfab      	itete	ge
 80099ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80099ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80099f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80099f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80099f6:	bfac      	ite	ge
 80099f8:	eb03 0902 	addge.w	r9, r3, r2
 80099fc:	1ad7      	sublt	r7, r2, r3
 80099fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009a00:	eba3 0801 	sub.w	r8, r3, r1
 8009a04:	4490      	add	r8, r2
 8009a06:	4ba1      	ldr	r3, [pc, #644]	; (8009c8c <_strtod_l+0x95c>)
 8009a08:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a0c:	4598      	cmp	r8, r3
 8009a0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a12:	f280 80c7 	bge.w	8009ba4 <_strtod_l+0x874>
 8009a16:	eba3 0308 	sub.w	r3, r3, r8
 8009a1a:	2b1f      	cmp	r3, #31
 8009a1c:	eba2 0203 	sub.w	r2, r2, r3
 8009a20:	f04f 0101 	mov.w	r1, #1
 8009a24:	f300 80b1 	bgt.w	8009b8a <_strtod_l+0x85a>
 8009a28:	fa01 f303 	lsl.w	r3, r1, r3
 8009a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a2e:	2300      	movs	r3, #0
 8009a30:	9308      	str	r3, [sp, #32]
 8009a32:	eb09 0802 	add.w	r8, r9, r2
 8009a36:	9b04      	ldr	r3, [sp, #16]
 8009a38:	45c1      	cmp	r9, r8
 8009a3a:	4417      	add	r7, r2
 8009a3c:	441f      	add	r7, r3
 8009a3e:	464b      	mov	r3, r9
 8009a40:	bfa8      	it	ge
 8009a42:	4643      	movge	r3, r8
 8009a44:	42bb      	cmp	r3, r7
 8009a46:	bfa8      	it	ge
 8009a48:	463b      	movge	r3, r7
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bfc2      	ittt	gt
 8009a4e:	eba8 0803 	subgt.w	r8, r8, r3
 8009a52:	1aff      	subgt	r7, r7, r3
 8009a54:	eba9 0903 	subgt.w	r9, r9, r3
 8009a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	dd17      	ble.n	8009a8e <_strtod_l+0x75e>
 8009a5e:	4631      	mov	r1, r6
 8009a60:	461a      	mov	r2, r3
 8009a62:	4620      	mov	r0, r4
 8009a64:	f002 f956 	bl	800bd14 <__pow5mult>
 8009a68:	4606      	mov	r6, r0
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	f43f aea8 	beq.w	80097c0 <_strtod_l+0x490>
 8009a70:	4601      	mov	r1, r0
 8009a72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009a74:	4620      	mov	r0, r4
 8009a76:	f002 f8a3 	bl	800bbc0 <__multiply>
 8009a7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	f43f ae9f 	beq.w	80097c0 <_strtod_l+0x490>
 8009a82:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a84:	4620      	mov	r0, r4
 8009a86:	f001 ff83 	bl	800b990 <_Bfree>
 8009a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a8c:	9318      	str	r3, [sp, #96]	; 0x60
 8009a8e:	f1b8 0f00 	cmp.w	r8, #0
 8009a92:	f300 808c 	bgt.w	8009bae <_strtod_l+0x87e>
 8009a96:	9b06      	ldr	r3, [sp, #24]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	dd08      	ble.n	8009aae <_strtod_l+0x77e>
 8009a9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a9e:	9905      	ldr	r1, [sp, #20]
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f002 f937 	bl	800bd14 <__pow5mult>
 8009aa6:	9005      	str	r0, [sp, #20]
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	f43f ae89 	beq.w	80097c0 <_strtod_l+0x490>
 8009aae:	2f00      	cmp	r7, #0
 8009ab0:	dd08      	ble.n	8009ac4 <_strtod_l+0x794>
 8009ab2:	9905      	ldr	r1, [sp, #20]
 8009ab4:	463a      	mov	r2, r7
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f002 f986 	bl	800bdc8 <__lshift>
 8009abc:	9005      	str	r0, [sp, #20]
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	f43f ae7e 	beq.w	80097c0 <_strtod_l+0x490>
 8009ac4:	f1b9 0f00 	cmp.w	r9, #0
 8009ac8:	dd08      	ble.n	8009adc <_strtod_l+0x7ac>
 8009aca:	4631      	mov	r1, r6
 8009acc:	464a      	mov	r2, r9
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f002 f97a 	bl	800bdc8 <__lshift>
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	f43f ae72 	beq.w	80097c0 <_strtod_l+0x490>
 8009adc:	9a05      	ldr	r2, [sp, #20]
 8009ade:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f002 f9fd 	bl	800bee0 <__mdiff>
 8009ae6:	4605      	mov	r5, r0
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	f43f ae69 	beq.w	80097c0 <_strtod_l+0x490>
 8009aee:	68c3      	ldr	r3, [r0, #12]
 8009af0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009af2:	2300      	movs	r3, #0
 8009af4:	60c3      	str	r3, [r0, #12]
 8009af6:	4631      	mov	r1, r6
 8009af8:	f002 f9d6 	bl	800bea8 <__mcmp>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	da60      	bge.n	8009bc2 <_strtod_l+0x892>
 8009b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b02:	ea53 030a 	orrs.w	r3, r3, sl
 8009b06:	f040 8082 	bne.w	8009c0e <_strtod_l+0x8de>
 8009b0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d17d      	bne.n	8009c0e <_strtod_l+0x8de>
 8009b12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b16:	0d1b      	lsrs	r3, r3, #20
 8009b18:	051b      	lsls	r3, r3, #20
 8009b1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009b1e:	d976      	bls.n	8009c0e <_strtod_l+0x8de>
 8009b20:	696b      	ldr	r3, [r5, #20]
 8009b22:	b913      	cbnz	r3, 8009b2a <_strtod_l+0x7fa>
 8009b24:	692b      	ldr	r3, [r5, #16]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	dd71      	ble.n	8009c0e <_strtod_l+0x8de>
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f002 f94a 	bl	800bdc8 <__lshift>
 8009b34:	4631      	mov	r1, r6
 8009b36:	4605      	mov	r5, r0
 8009b38:	f002 f9b6 	bl	800bea8 <__mcmp>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	dd66      	ble.n	8009c0e <_strtod_l+0x8de>
 8009b40:	9904      	ldr	r1, [sp, #16]
 8009b42:	4a53      	ldr	r2, [pc, #332]	; (8009c90 <_strtod_l+0x960>)
 8009b44:	465b      	mov	r3, fp
 8009b46:	2900      	cmp	r1, #0
 8009b48:	f000 8081 	beq.w	8009c4e <_strtod_l+0x91e>
 8009b4c:	ea02 010b 	and.w	r1, r2, fp
 8009b50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b54:	dc7b      	bgt.n	8009c4e <_strtod_l+0x91e>
 8009b56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b5a:	f77f aea9 	ble.w	80098b0 <_strtod_l+0x580>
 8009b5e:	4b4d      	ldr	r3, [pc, #308]	; (8009c94 <_strtod_l+0x964>)
 8009b60:	4650      	mov	r0, sl
 8009b62:	4659      	mov	r1, fp
 8009b64:	2200      	movs	r2, #0
 8009b66:	f7f6 fd47 	bl	80005f8 <__aeabi_dmul>
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4303      	orrs	r3, r0
 8009b6e:	bf08      	it	eq
 8009b70:	2322      	moveq	r3, #34	; 0x22
 8009b72:	4682      	mov	sl, r0
 8009b74:	468b      	mov	fp, r1
 8009b76:	bf08      	it	eq
 8009b78:	6023      	streq	r3, [r4, #0]
 8009b7a:	e62b      	b.n	80097d4 <_strtod_l+0x4a4>
 8009b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b80:	fa02 f303 	lsl.w	r3, r2, r3
 8009b84:	ea03 0a0a 	and.w	sl, r3, sl
 8009b88:	e6e3      	b.n	8009952 <_strtod_l+0x622>
 8009b8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009b8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009b92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009b96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009b9a:	fa01 f308 	lsl.w	r3, r1, r8
 8009b9e:	9308      	str	r3, [sp, #32]
 8009ba0:	910d      	str	r1, [sp, #52]	; 0x34
 8009ba2:	e746      	b.n	8009a32 <_strtod_l+0x702>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9308      	str	r3, [sp, #32]
 8009ba8:	2301      	movs	r3, #1
 8009baa:	930d      	str	r3, [sp, #52]	; 0x34
 8009bac:	e741      	b.n	8009a32 <_strtod_l+0x702>
 8009bae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009bb0:	4642      	mov	r2, r8
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f002 f908 	bl	800bdc8 <__lshift>
 8009bb8:	9018      	str	r0, [sp, #96]	; 0x60
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	f47f af6b 	bne.w	8009a96 <_strtod_l+0x766>
 8009bc0:	e5fe      	b.n	80097c0 <_strtod_l+0x490>
 8009bc2:	465f      	mov	r7, fp
 8009bc4:	d16e      	bne.n	8009ca4 <_strtod_l+0x974>
 8009bc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009bc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bcc:	b342      	cbz	r2, 8009c20 <_strtod_l+0x8f0>
 8009bce:	4a32      	ldr	r2, [pc, #200]	; (8009c98 <_strtod_l+0x968>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d128      	bne.n	8009c26 <_strtod_l+0x8f6>
 8009bd4:	9b04      	ldr	r3, [sp, #16]
 8009bd6:	4651      	mov	r1, sl
 8009bd8:	b1eb      	cbz	r3, 8009c16 <_strtod_l+0x8e6>
 8009bda:	4b2d      	ldr	r3, [pc, #180]	; (8009c90 <_strtod_l+0x960>)
 8009bdc:	403b      	ands	r3, r7
 8009bde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009be2:	f04f 32ff 	mov.w	r2, #4294967295
 8009be6:	d819      	bhi.n	8009c1c <_strtod_l+0x8ec>
 8009be8:	0d1b      	lsrs	r3, r3, #20
 8009bea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009bee:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf2:	4299      	cmp	r1, r3
 8009bf4:	d117      	bne.n	8009c26 <_strtod_l+0x8f6>
 8009bf6:	4b29      	ldr	r3, [pc, #164]	; (8009c9c <_strtod_l+0x96c>)
 8009bf8:	429f      	cmp	r7, r3
 8009bfa:	d102      	bne.n	8009c02 <_strtod_l+0x8d2>
 8009bfc:	3101      	adds	r1, #1
 8009bfe:	f43f addf 	beq.w	80097c0 <_strtod_l+0x490>
 8009c02:	4b23      	ldr	r3, [pc, #140]	; (8009c90 <_strtod_l+0x960>)
 8009c04:	403b      	ands	r3, r7
 8009c06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009c0a:	f04f 0a00 	mov.w	sl, #0
 8009c0e:	9b04      	ldr	r3, [sp, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1a4      	bne.n	8009b5e <_strtod_l+0x82e>
 8009c14:	e5de      	b.n	80097d4 <_strtod_l+0x4a4>
 8009c16:	f04f 33ff 	mov.w	r3, #4294967295
 8009c1a:	e7ea      	b.n	8009bf2 <_strtod_l+0x8c2>
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	e7e8      	b.n	8009bf2 <_strtod_l+0x8c2>
 8009c20:	ea53 030a 	orrs.w	r3, r3, sl
 8009c24:	d08c      	beq.n	8009b40 <_strtod_l+0x810>
 8009c26:	9b08      	ldr	r3, [sp, #32]
 8009c28:	b1db      	cbz	r3, 8009c62 <_strtod_l+0x932>
 8009c2a:	423b      	tst	r3, r7
 8009c2c:	d0ef      	beq.n	8009c0e <_strtod_l+0x8de>
 8009c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c30:	9a04      	ldr	r2, [sp, #16]
 8009c32:	4650      	mov	r0, sl
 8009c34:	4659      	mov	r1, fp
 8009c36:	b1c3      	cbz	r3, 8009c6a <_strtod_l+0x93a>
 8009c38:	f7ff fb5b 	bl	80092f2 <sulp>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	ec51 0b18 	vmov	r0, r1, d8
 8009c44:	f7f6 fb22 	bl	800028c <__adddf3>
 8009c48:	4682      	mov	sl, r0
 8009c4a:	468b      	mov	fp, r1
 8009c4c:	e7df      	b.n	8009c0e <_strtod_l+0x8de>
 8009c4e:	4013      	ands	r3, r2
 8009c50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009c58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009c5c:	f04f 3aff 	mov.w	sl, #4294967295
 8009c60:	e7d5      	b.n	8009c0e <_strtod_l+0x8de>
 8009c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c64:	ea13 0f0a 	tst.w	r3, sl
 8009c68:	e7e0      	b.n	8009c2c <_strtod_l+0x8fc>
 8009c6a:	f7ff fb42 	bl	80092f2 <sulp>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	ec51 0b18 	vmov	r0, r1, d8
 8009c76:	f7f6 fb07 	bl	8000288 <__aeabi_dsub>
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	4682      	mov	sl, r0
 8009c80:	468b      	mov	fp, r1
 8009c82:	f7f6 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d0c1      	beq.n	8009c0e <_strtod_l+0x8de>
 8009c8a:	e611      	b.n	80098b0 <_strtod_l+0x580>
 8009c8c:	fffffc02 	.word	0xfffffc02
 8009c90:	7ff00000 	.word	0x7ff00000
 8009c94:	39500000 	.word	0x39500000
 8009c98:	000fffff 	.word	0x000fffff
 8009c9c:	7fefffff 	.word	0x7fefffff
 8009ca0:	0800ccc8 	.word	0x0800ccc8
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f002 fa7c 	bl	800c1a4 <__ratio>
 8009cac:	ec59 8b10 	vmov	r8, r9, d0
 8009cb0:	ee10 0a10 	vmov	r0, s0
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009cba:	4649      	mov	r1, r9
 8009cbc:	f7f6 ff18 	bl	8000af0 <__aeabi_dcmple>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d07a      	beq.n	8009dba <_strtod_l+0xa8a>
 8009cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d04a      	beq.n	8009d60 <_strtod_l+0xa30>
 8009cca:	4b95      	ldr	r3, [pc, #596]	; (8009f20 <_strtod_l+0xbf0>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009cd2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009f20 <_strtod_l+0xbf0>
 8009cd6:	f04f 0800 	mov.w	r8, #0
 8009cda:	4b92      	ldr	r3, [pc, #584]	; (8009f24 <_strtod_l+0xbf4>)
 8009cdc:	403b      	ands	r3, r7
 8009cde:	930d      	str	r3, [sp, #52]	; 0x34
 8009ce0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ce2:	4b91      	ldr	r3, [pc, #580]	; (8009f28 <_strtod_l+0xbf8>)
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	f040 80b0 	bne.w	8009e4a <_strtod_l+0xb1a>
 8009cea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009cee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009cf2:	ec4b ab10 	vmov	d0, sl, fp
 8009cf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009cfa:	f002 f97b 	bl	800bff4 <__ulp>
 8009cfe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d02:	ec53 2b10 	vmov	r2, r3, d0
 8009d06:	f7f6 fc77 	bl	80005f8 <__aeabi_dmul>
 8009d0a:	4652      	mov	r2, sl
 8009d0c:	465b      	mov	r3, fp
 8009d0e:	f7f6 fabd 	bl	800028c <__adddf3>
 8009d12:	460b      	mov	r3, r1
 8009d14:	4983      	ldr	r1, [pc, #524]	; (8009f24 <_strtod_l+0xbf4>)
 8009d16:	4a85      	ldr	r2, [pc, #532]	; (8009f2c <_strtod_l+0xbfc>)
 8009d18:	4019      	ands	r1, r3
 8009d1a:	4291      	cmp	r1, r2
 8009d1c:	4682      	mov	sl, r0
 8009d1e:	d960      	bls.n	8009de2 <_strtod_l+0xab2>
 8009d20:	ee18 3a90 	vmov	r3, s17
 8009d24:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d104      	bne.n	8009d36 <_strtod_l+0xa06>
 8009d2c:	ee18 3a10 	vmov	r3, s16
 8009d30:	3301      	adds	r3, #1
 8009d32:	f43f ad45 	beq.w	80097c0 <_strtod_l+0x490>
 8009d36:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009f38 <_strtod_l+0xc08>
 8009d3a:	f04f 3aff 	mov.w	sl, #4294967295
 8009d3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d40:	4620      	mov	r0, r4
 8009d42:	f001 fe25 	bl	800b990 <_Bfree>
 8009d46:	9905      	ldr	r1, [sp, #20]
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f001 fe21 	bl	800b990 <_Bfree>
 8009d4e:	4631      	mov	r1, r6
 8009d50:	4620      	mov	r0, r4
 8009d52:	f001 fe1d 	bl	800b990 <_Bfree>
 8009d56:	4629      	mov	r1, r5
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f001 fe19 	bl	800b990 <_Bfree>
 8009d5e:	e61a      	b.n	8009996 <_strtod_l+0x666>
 8009d60:	f1ba 0f00 	cmp.w	sl, #0
 8009d64:	d11b      	bne.n	8009d9e <_strtod_l+0xa6e>
 8009d66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d6a:	b9f3      	cbnz	r3, 8009daa <_strtod_l+0xa7a>
 8009d6c:	4b6c      	ldr	r3, [pc, #432]	; (8009f20 <_strtod_l+0xbf0>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	4640      	mov	r0, r8
 8009d72:	4649      	mov	r1, r9
 8009d74:	f7f6 feb2 	bl	8000adc <__aeabi_dcmplt>
 8009d78:	b9d0      	cbnz	r0, 8009db0 <_strtod_l+0xa80>
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	4b6c      	ldr	r3, [pc, #432]	; (8009f30 <_strtod_l+0xc00>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	f7f6 fc39 	bl	80005f8 <__aeabi_dmul>
 8009d86:	4680      	mov	r8, r0
 8009d88:	4689      	mov	r9, r1
 8009d8a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d8e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009d92:	9315      	str	r3, [sp, #84]	; 0x54
 8009d94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009d98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d9c:	e79d      	b.n	8009cda <_strtod_l+0x9aa>
 8009d9e:	f1ba 0f01 	cmp.w	sl, #1
 8009da2:	d102      	bne.n	8009daa <_strtod_l+0xa7a>
 8009da4:	2f00      	cmp	r7, #0
 8009da6:	f43f ad83 	beq.w	80098b0 <_strtod_l+0x580>
 8009daa:	4b62      	ldr	r3, [pc, #392]	; (8009f34 <_strtod_l+0xc04>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	e78e      	b.n	8009cce <_strtod_l+0x99e>
 8009db0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009f30 <_strtod_l+0xc00>
 8009db4:	f04f 0800 	mov.w	r8, #0
 8009db8:	e7e7      	b.n	8009d8a <_strtod_l+0xa5a>
 8009dba:	4b5d      	ldr	r3, [pc, #372]	; (8009f30 <_strtod_l+0xc00>)
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f7f6 fc19 	bl	80005f8 <__aeabi_dmul>
 8009dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dc8:	4680      	mov	r8, r0
 8009dca:	4689      	mov	r9, r1
 8009dcc:	b933      	cbnz	r3, 8009ddc <_strtod_l+0xaac>
 8009dce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dd2:	900e      	str	r0, [sp, #56]	; 0x38
 8009dd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009dda:	e7dd      	b.n	8009d98 <_strtod_l+0xa68>
 8009ddc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009de0:	e7f9      	b.n	8009dd6 <_strtod_l+0xaa6>
 8009de2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009de6:	9b04      	ldr	r3, [sp, #16]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1a8      	bne.n	8009d3e <_strtod_l+0xa0e>
 8009dec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009df2:	0d1b      	lsrs	r3, r3, #20
 8009df4:	051b      	lsls	r3, r3, #20
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d1a1      	bne.n	8009d3e <_strtod_l+0xa0e>
 8009dfa:	4640      	mov	r0, r8
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	f7f6 ff5b 	bl	8000cb8 <__aeabi_d2lz>
 8009e02:	f7f6 fbcb 	bl	800059c <__aeabi_l2d>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4640      	mov	r0, r8
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	f7f6 fa3b 	bl	8000288 <__aeabi_dsub>
 8009e12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e18:	ea43 030a 	orr.w	r3, r3, sl
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	4680      	mov	r8, r0
 8009e20:	4689      	mov	r9, r1
 8009e22:	d055      	beq.n	8009ed0 <_strtod_l+0xba0>
 8009e24:	a336      	add	r3, pc, #216	; (adr r3, 8009f00 <_strtod_l+0xbd0>)
 8009e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2a:	f7f6 fe57 	bl	8000adc <__aeabi_dcmplt>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f47f acd0 	bne.w	80097d4 <_strtod_l+0x4a4>
 8009e34:	a334      	add	r3, pc, #208	; (adr r3, 8009f08 <_strtod_l+0xbd8>)
 8009e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	4649      	mov	r1, r9
 8009e3e:	f7f6 fe6b 	bl	8000b18 <__aeabi_dcmpgt>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	f43f af7b 	beq.w	8009d3e <_strtod_l+0xa0e>
 8009e48:	e4c4      	b.n	80097d4 <_strtod_l+0x4a4>
 8009e4a:	9b04      	ldr	r3, [sp, #16]
 8009e4c:	b333      	cbz	r3, 8009e9c <_strtod_l+0xb6c>
 8009e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e50:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e54:	d822      	bhi.n	8009e9c <_strtod_l+0xb6c>
 8009e56:	a32e      	add	r3, pc, #184	; (adr r3, 8009f10 <_strtod_l+0xbe0>)
 8009e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	4649      	mov	r1, r9
 8009e60:	f7f6 fe46 	bl	8000af0 <__aeabi_dcmple>
 8009e64:	b1a0      	cbz	r0, 8009e90 <_strtod_l+0xb60>
 8009e66:	4649      	mov	r1, r9
 8009e68:	4640      	mov	r0, r8
 8009e6a:	f7f6 fe9d 	bl	8000ba8 <__aeabi_d2uiz>
 8009e6e:	2801      	cmp	r0, #1
 8009e70:	bf38      	it	cc
 8009e72:	2001      	movcc	r0, #1
 8009e74:	f7f6 fb46 	bl	8000504 <__aeabi_ui2d>
 8009e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e7a:	4680      	mov	r8, r0
 8009e7c:	4689      	mov	r9, r1
 8009e7e:	bb23      	cbnz	r3, 8009eca <_strtod_l+0xb9a>
 8009e80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e84:	9010      	str	r0, [sp, #64]	; 0x40
 8009e86:	9311      	str	r3, [sp, #68]	; 0x44
 8009e88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e94:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009e98:	1a9b      	subs	r3, r3, r2
 8009e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ea0:	eeb0 0a48 	vmov.f32	s0, s16
 8009ea4:	eef0 0a68 	vmov.f32	s1, s17
 8009ea8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009eac:	f002 f8a2 	bl	800bff4 <__ulp>
 8009eb0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009eb4:	ec53 2b10 	vmov	r2, r3, d0
 8009eb8:	f7f6 fb9e 	bl	80005f8 <__aeabi_dmul>
 8009ebc:	ec53 2b18 	vmov	r2, r3, d8
 8009ec0:	f7f6 f9e4 	bl	800028c <__adddf3>
 8009ec4:	4682      	mov	sl, r0
 8009ec6:	468b      	mov	fp, r1
 8009ec8:	e78d      	b.n	8009de6 <_strtod_l+0xab6>
 8009eca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009ece:	e7db      	b.n	8009e88 <_strtod_l+0xb58>
 8009ed0:	a311      	add	r3, pc, #68	; (adr r3, 8009f18 <_strtod_l+0xbe8>)
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f7f6 fe01 	bl	8000adc <__aeabi_dcmplt>
 8009eda:	e7b2      	b.n	8009e42 <_strtod_l+0xb12>
 8009edc:	2300      	movs	r3, #0
 8009ede:	930a      	str	r3, [sp, #40]	; 0x28
 8009ee0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ee2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	f7ff ba6b 	b.w	80093c0 <_strtod_l+0x90>
 8009eea:	2a65      	cmp	r2, #101	; 0x65
 8009eec:	f43f ab5f 	beq.w	80095ae <_strtod_l+0x27e>
 8009ef0:	2a45      	cmp	r2, #69	; 0x45
 8009ef2:	f43f ab5c 	beq.w	80095ae <_strtod_l+0x27e>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	f7ff bb94 	b.w	8009624 <_strtod_l+0x2f4>
 8009efc:	f3af 8000 	nop.w
 8009f00:	94a03595 	.word	0x94a03595
 8009f04:	3fdfffff 	.word	0x3fdfffff
 8009f08:	35afe535 	.word	0x35afe535
 8009f0c:	3fe00000 	.word	0x3fe00000
 8009f10:	ffc00000 	.word	0xffc00000
 8009f14:	41dfffff 	.word	0x41dfffff
 8009f18:	94a03595 	.word	0x94a03595
 8009f1c:	3fcfffff 	.word	0x3fcfffff
 8009f20:	3ff00000 	.word	0x3ff00000
 8009f24:	7ff00000 	.word	0x7ff00000
 8009f28:	7fe00000 	.word	0x7fe00000
 8009f2c:	7c9fffff 	.word	0x7c9fffff
 8009f30:	3fe00000 	.word	0x3fe00000
 8009f34:	bff00000 	.word	0xbff00000
 8009f38:	7fefffff 	.word	0x7fefffff

08009f3c <_strtod_r>:
 8009f3c:	4b01      	ldr	r3, [pc, #4]	; (8009f44 <_strtod_r+0x8>)
 8009f3e:	f7ff b9f7 	b.w	8009330 <_strtod_l>
 8009f42:	bf00      	nop
 8009f44:	20000078 	.word	0x20000078

08009f48 <_strtol_l.constprop.0>:
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f4e:	d001      	beq.n	8009f54 <_strtol_l.constprop.0+0xc>
 8009f50:	2b24      	cmp	r3, #36	; 0x24
 8009f52:	d906      	bls.n	8009f62 <_strtol_l.constprop.0+0x1a>
 8009f54:	f7fe f8a2 	bl	800809c <__errno>
 8009f58:	2316      	movs	r3, #22
 8009f5a:	6003      	str	r3, [r0, #0]
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a048 <_strtol_l.constprop.0+0x100>
 8009f66:	460d      	mov	r5, r1
 8009f68:	462e      	mov	r6, r5
 8009f6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f6e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009f72:	f017 0708 	ands.w	r7, r7, #8
 8009f76:	d1f7      	bne.n	8009f68 <_strtol_l.constprop.0+0x20>
 8009f78:	2c2d      	cmp	r4, #45	; 0x2d
 8009f7a:	d132      	bne.n	8009fe2 <_strtol_l.constprop.0+0x9a>
 8009f7c:	782c      	ldrb	r4, [r5, #0]
 8009f7e:	2701      	movs	r7, #1
 8009f80:	1cb5      	adds	r5, r6, #2
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d05b      	beq.n	800a03e <_strtol_l.constprop.0+0xf6>
 8009f86:	2b10      	cmp	r3, #16
 8009f88:	d109      	bne.n	8009f9e <_strtol_l.constprop.0+0x56>
 8009f8a:	2c30      	cmp	r4, #48	; 0x30
 8009f8c:	d107      	bne.n	8009f9e <_strtol_l.constprop.0+0x56>
 8009f8e:	782c      	ldrb	r4, [r5, #0]
 8009f90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009f94:	2c58      	cmp	r4, #88	; 0x58
 8009f96:	d14d      	bne.n	800a034 <_strtol_l.constprop.0+0xec>
 8009f98:	786c      	ldrb	r4, [r5, #1]
 8009f9a:	2310      	movs	r3, #16
 8009f9c:	3502      	adds	r5, #2
 8009f9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009fa2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fa6:	f04f 0c00 	mov.w	ip, #0
 8009faa:	fbb8 f9f3 	udiv	r9, r8, r3
 8009fae:	4666      	mov	r6, ip
 8009fb0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009fb4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009fb8:	f1be 0f09 	cmp.w	lr, #9
 8009fbc:	d816      	bhi.n	8009fec <_strtol_l.constprop.0+0xa4>
 8009fbe:	4674      	mov	r4, lr
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	dd24      	ble.n	800a00e <_strtol_l.constprop.0+0xc6>
 8009fc4:	f1bc 0f00 	cmp.w	ip, #0
 8009fc8:	db1e      	blt.n	800a008 <_strtol_l.constprop.0+0xc0>
 8009fca:	45b1      	cmp	r9, r6
 8009fcc:	d31c      	bcc.n	800a008 <_strtol_l.constprop.0+0xc0>
 8009fce:	d101      	bne.n	8009fd4 <_strtol_l.constprop.0+0x8c>
 8009fd0:	45a2      	cmp	sl, r4
 8009fd2:	db19      	blt.n	800a008 <_strtol_l.constprop.0+0xc0>
 8009fd4:	fb06 4603 	mla	r6, r6, r3, r4
 8009fd8:	f04f 0c01 	mov.w	ip, #1
 8009fdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fe0:	e7e8      	b.n	8009fb4 <_strtol_l.constprop.0+0x6c>
 8009fe2:	2c2b      	cmp	r4, #43	; 0x2b
 8009fe4:	bf04      	itt	eq
 8009fe6:	782c      	ldrbeq	r4, [r5, #0]
 8009fe8:	1cb5      	addeq	r5, r6, #2
 8009fea:	e7ca      	b.n	8009f82 <_strtol_l.constprop.0+0x3a>
 8009fec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009ff0:	f1be 0f19 	cmp.w	lr, #25
 8009ff4:	d801      	bhi.n	8009ffa <_strtol_l.constprop.0+0xb2>
 8009ff6:	3c37      	subs	r4, #55	; 0x37
 8009ff8:	e7e2      	b.n	8009fc0 <_strtol_l.constprop.0+0x78>
 8009ffa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009ffe:	f1be 0f19 	cmp.w	lr, #25
 800a002:	d804      	bhi.n	800a00e <_strtol_l.constprop.0+0xc6>
 800a004:	3c57      	subs	r4, #87	; 0x57
 800a006:	e7db      	b.n	8009fc0 <_strtol_l.constprop.0+0x78>
 800a008:	f04f 3cff 	mov.w	ip, #4294967295
 800a00c:	e7e6      	b.n	8009fdc <_strtol_l.constprop.0+0x94>
 800a00e:	f1bc 0f00 	cmp.w	ip, #0
 800a012:	da05      	bge.n	800a020 <_strtol_l.constprop.0+0xd8>
 800a014:	2322      	movs	r3, #34	; 0x22
 800a016:	6003      	str	r3, [r0, #0]
 800a018:	4646      	mov	r6, r8
 800a01a:	b942      	cbnz	r2, 800a02e <_strtol_l.constprop.0+0xe6>
 800a01c:	4630      	mov	r0, r6
 800a01e:	e79e      	b.n	8009f5e <_strtol_l.constprop.0+0x16>
 800a020:	b107      	cbz	r7, 800a024 <_strtol_l.constprop.0+0xdc>
 800a022:	4276      	negs	r6, r6
 800a024:	2a00      	cmp	r2, #0
 800a026:	d0f9      	beq.n	800a01c <_strtol_l.constprop.0+0xd4>
 800a028:	f1bc 0f00 	cmp.w	ip, #0
 800a02c:	d000      	beq.n	800a030 <_strtol_l.constprop.0+0xe8>
 800a02e:	1e69      	subs	r1, r5, #1
 800a030:	6011      	str	r1, [r2, #0]
 800a032:	e7f3      	b.n	800a01c <_strtol_l.constprop.0+0xd4>
 800a034:	2430      	movs	r4, #48	; 0x30
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1b1      	bne.n	8009f9e <_strtol_l.constprop.0+0x56>
 800a03a:	2308      	movs	r3, #8
 800a03c:	e7af      	b.n	8009f9e <_strtol_l.constprop.0+0x56>
 800a03e:	2c30      	cmp	r4, #48	; 0x30
 800a040:	d0a5      	beq.n	8009f8e <_strtol_l.constprop.0+0x46>
 800a042:	230a      	movs	r3, #10
 800a044:	e7ab      	b.n	8009f9e <_strtol_l.constprop.0+0x56>
 800a046:	bf00      	nop
 800a048:	0800cd2d 	.word	0x0800cd2d

0800a04c <_strtol_r>:
 800a04c:	f7ff bf7c 	b.w	8009f48 <_strtol_l.constprop.0>

0800a050 <__swbuf_r>:
 800a050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a052:	460e      	mov	r6, r1
 800a054:	4614      	mov	r4, r2
 800a056:	4605      	mov	r5, r0
 800a058:	b118      	cbz	r0, 800a062 <__swbuf_r+0x12>
 800a05a:	6983      	ldr	r3, [r0, #24]
 800a05c:	b90b      	cbnz	r3, 800a062 <__swbuf_r+0x12>
 800a05e:	f7fe f87b 	bl	8008158 <__sinit>
 800a062:	4b21      	ldr	r3, [pc, #132]	; (800a0e8 <__swbuf_r+0x98>)
 800a064:	429c      	cmp	r4, r3
 800a066:	d12b      	bne.n	800a0c0 <__swbuf_r+0x70>
 800a068:	686c      	ldr	r4, [r5, #4]
 800a06a:	69a3      	ldr	r3, [r4, #24]
 800a06c:	60a3      	str	r3, [r4, #8]
 800a06e:	89a3      	ldrh	r3, [r4, #12]
 800a070:	071a      	lsls	r2, r3, #28
 800a072:	d52f      	bpl.n	800a0d4 <__swbuf_r+0x84>
 800a074:	6923      	ldr	r3, [r4, #16]
 800a076:	b36b      	cbz	r3, 800a0d4 <__swbuf_r+0x84>
 800a078:	6923      	ldr	r3, [r4, #16]
 800a07a:	6820      	ldr	r0, [r4, #0]
 800a07c:	1ac0      	subs	r0, r0, r3
 800a07e:	6963      	ldr	r3, [r4, #20]
 800a080:	b2f6      	uxtb	r6, r6
 800a082:	4283      	cmp	r3, r0
 800a084:	4637      	mov	r7, r6
 800a086:	dc04      	bgt.n	800a092 <__swbuf_r+0x42>
 800a088:	4621      	mov	r1, r4
 800a08a:	4628      	mov	r0, r5
 800a08c:	f000 ffe0 	bl	800b050 <_fflush_r>
 800a090:	bb30      	cbnz	r0, 800a0e0 <__swbuf_r+0x90>
 800a092:	68a3      	ldr	r3, [r4, #8]
 800a094:	3b01      	subs	r3, #1
 800a096:	60a3      	str	r3, [r4, #8]
 800a098:	6823      	ldr	r3, [r4, #0]
 800a09a:	1c5a      	adds	r2, r3, #1
 800a09c:	6022      	str	r2, [r4, #0]
 800a09e:	701e      	strb	r6, [r3, #0]
 800a0a0:	6963      	ldr	r3, [r4, #20]
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	4283      	cmp	r3, r0
 800a0a6:	d004      	beq.n	800a0b2 <__swbuf_r+0x62>
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	07db      	lsls	r3, r3, #31
 800a0ac:	d506      	bpl.n	800a0bc <__swbuf_r+0x6c>
 800a0ae:	2e0a      	cmp	r6, #10
 800a0b0:	d104      	bne.n	800a0bc <__swbuf_r+0x6c>
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f000 ffcb 	bl	800b050 <_fflush_r>
 800a0ba:	b988      	cbnz	r0, 800a0e0 <__swbuf_r+0x90>
 800a0bc:	4638      	mov	r0, r7
 800a0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0c0:	4b0a      	ldr	r3, [pc, #40]	; (800a0ec <__swbuf_r+0x9c>)
 800a0c2:	429c      	cmp	r4, r3
 800a0c4:	d101      	bne.n	800a0ca <__swbuf_r+0x7a>
 800a0c6:	68ac      	ldr	r4, [r5, #8]
 800a0c8:	e7cf      	b.n	800a06a <__swbuf_r+0x1a>
 800a0ca:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <__swbuf_r+0xa0>)
 800a0cc:	429c      	cmp	r4, r3
 800a0ce:	bf08      	it	eq
 800a0d0:	68ec      	ldreq	r4, [r5, #12]
 800a0d2:	e7ca      	b.n	800a06a <__swbuf_r+0x1a>
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f000 f81e 	bl	800a118 <__swsetup_r>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d0cb      	beq.n	800a078 <__swbuf_r+0x28>
 800a0e0:	f04f 37ff 	mov.w	r7, #4294967295
 800a0e4:	e7ea      	b.n	800a0bc <__swbuf_r+0x6c>
 800a0e6:	bf00      	nop
 800a0e8:	0800cc20 	.word	0x0800cc20
 800a0ec:	0800cc40 	.word	0x0800cc40
 800a0f0:	0800cc00 	.word	0x0800cc00

0800a0f4 <_write_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4d07      	ldr	r5, [pc, #28]	; (800a114 <_write_r+0x20>)
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	4608      	mov	r0, r1
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	2200      	movs	r2, #0
 800a100:	602a      	str	r2, [r5, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	f7f7 fb17 	bl	8001736 <_write>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_write_r+0x1e>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_write_r+0x1e>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20001a78 	.word	0x20001a78

0800a118 <__swsetup_r>:
 800a118:	4b32      	ldr	r3, [pc, #200]	; (800a1e4 <__swsetup_r+0xcc>)
 800a11a:	b570      	push	{r4, r5, r6, lr}
 800a11c:	681d      	ldr	r5, [r3, #0]
 800a11e:	4606      	mov	r6, r0
 800a120:	460c      	mov	r4, r1
 800a122:	b125      	cbz	r5, 800a12e <__swsetup_r+0x16>
 800a124:	69ab      	ldr	r3, [r5, #24]
 800a126:	b913      	cbnz	r3, 800a12e <__swsetup_r+0x16>
 800a128:	4628      	mov	r0, r5
 800a12a:	f7fe f815 	bl	8008158 <__sinit>
 800a12e:	4b2e      	ldr	r3, [pc, #184]	; (800a1e8 <__swsetup_r+0xd0>)
 800a130:	429c      	cmp	r4, r3
 800a132:	d10f      	bne.n	800a154 <__swsetup_r+0x3c>
 800a134:	686c      	ldr	r4, [r5, #4]
 800a136:	89a3      	ldrh	r3, [r4, #12]
 800a138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a13c:	0719      	lsls	r1, r3, #28
 800a13e:	d42c      	bmi.n	800a19a <__swsetup_r+0x82>
 800a140:	06dd      	lsls	r5, r3, #27
 800a142:	d411      	bmi.n	800a168 <__swsetup_r+0x50>
 800a144:	2309      	movs	r3, #9
 800a146:	6033      	str	r3, [r6, #0]
 800a148:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a14c:	81a3      	strh	r3, [r4, #12]
 800a14e:	f04f 30ff 	mov.w	r0, #4294967295
 800a152:	e03e      	b.n	800a1d2 <__swsetup_r+0xba>
 800a154:	4b25      	ldr	r3, [pc, #148]	; (800a1ec <__swsetup_r+0xd4>)
 800a156:	429c      	cmp	r4, r3
 800a158:	d101      	bne.n	800a15e <__swsetup_r+0x46>
 800a15a:	68ac      	ldr	r4, [r5, #8]
 800a15c:	e7eb      	b.n	800a136 <__swsetup_r+0x1e>
 800a15e:	4b24      	ldr	r3, [pc, #144]	; (800a1f0 <__swsetup_r+0xd8>)
 800a160:	429c      	cmp	r4, r3
 800a162:	bf08      	it	eq
 800a164:	68ec      	ldreq	r4, [r5, #12]
 800a166:	e7e6      	b.n	800a136 <__swsetup_r+0x1e>
 800a168:	0758      	lsls	r0, r3, #29
 800a16a:	d512      	bpl.n	800a192 <__swsetup_r+0x7a>
 800a16c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a16e:	b141      	cbz	r1, 800a182 <__swsetup_r+0x6a>
 800a170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a174:	4299      	cmp	r1, r3
 800a176:	d002      	beq.n	800a17e <__swsetup_r+0x66>
 800a178:	4630      	mov	r0, r6
 800a17a:	f002 f8a1 	bl	800c2c0 <_free_r>
 800a17e:	2300      	movs	r3, #0
 800a180:	6363      	str	r3, [r4, #52]	; 0x34
 800a182:	89a3      	ldrh	r3, [r4, #12]
 800a184:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a188:	81a3      	strh	r3, [r4, #12]
 800a18a:	2300      	movs	r3, #0
 800a18c:	6063      	str	r3, [r4, #4]
 800a18e:	6923      	ldr	r3, [r4, #16]
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	f043 0308 	orr.w	r3, r3, #8
 800a198:	81a3      	strh	r3, [r4, #12]
 800a19a:	6923      	ldr	r3, [r4, #16]
 800a19c:	b94b      	cbnz	r3, 800a1b2 <__swsetup_r+0x9a>
 800a19e:	89a3      	ldrh	r3, [r4, #12]
 800a1a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1a8:	d003      	beq.n	800a1b2 <__swsetup_r+0x9a>
 800a1aa:	4621      	mov	r1, r4
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f001 fb49 	bl	800b844 <__smakebuf_r>
 800a1b2:	89a0      	ldrh	r0, [r4, #12]
 800a1b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1b8:	f010 0301 	ands.w	r3, r0, #1
 800a1bc:	d00a      	beq.n	800a1d4 <__swsetup_r+0xbc>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60a3      	str	r3, [r4, #8]
 800a1c2:	6963      	ldr	r3, [r4, #20]
 800a1c4:	425b      	negs	r3, r3
 800a1c6:	61a3      	str	r3, [r4, #24]
 800a1c8:	6923      	ldr	r3, [r4, #16]
 800a1ca:	b943      	cbnz	r3, 800a1de <__swsetup_r+0xc6>
 800a1cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1d0:	d1ba      	bne.n	800a148 <__swsetup_r+0x30>
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
 800a1d4:	0781      	lsls	r1, r0, #30
 800a1d6:	bf58      	it	pl
 800a1d8:	6963      	ldrpl	r3, [r4, #20]
 800a1da:	60a3      	str	r3, [r4, #8]
 800a1dc:	e7f4      	b.n	800a1c8 <__swsetup_r+0xb0>
 800a1de:	2000      	movs	r0, #0
 800a1e0:	e7f7      	b.n	800a1d2 <__swsetup_r+0xba>
 800a1e2:	bf00      	nop
 800a1e4:	20000010 	.word	0x20000010
 800a1e8:	0800cc20 	.word	0x0800cc20
 800a1ec:	0800cc40 	.word	0x0800cc40
 800a1f0:	0800cc00 	.word	0x0800cc00

0800a1f4 <__assert_func>:
 800a1f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1f6:	4614      	mov	r4, r2
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	4b09      	ldr	r3, [pc, #36]	; (800a220 <__assert_func+0x2c>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4605      	mov	r5, r0
 800a200:	68d8      	ldr	r0, [r3, #12]
 800a202:	b14c      	cbz	r4, 800a218 <__assert_func+0x24>
 800a204:	4b07      	ldr	r3, [pc, #28]	; (800a224 <__assert_func+0x30>)
 800a206:	9100      	str	r1, [sp, #0]
 800a208:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a20c:	4906      	ldr	r1, [pc, #24]	; (800a228 <__assert_func+0x34>)
 800a20e:	462b      	mov	r3, r5
 800a210:	f000 ff5a 	bl	800b0c8 <fiprintf>
 800a214:	f002 fb91 	bl	800c93a <abort>
 800a218:	4b04      	ldr	r3, [pc, #16]	; (800a22c <__assert_func+0x38>)
 800a21a:	461c      	mov	r4, r3
 800a21c:	e7f3      	b.n	800a206 <__assert_func+0x12>
 800a21e:	bf00      	nop
 800a220:	20000010 	.word	0x20000010
 800a224:	0800ccf0 	.word	0x0800ccf0
 800a228:	0800ccfd 	.word	0x0800ccfd
 800a22c:	0800cd2b 	.word	0x0800cd2b

0800a230 <_close_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4d06      	ldr	r5, [pc, #24]	; (800a24c <_close_r+0x1c>)
 800a234:	2300      	movs	r3, #0
 800a236:	4604      	mov	r4, r0
 800a238:	4608      	mov	r0, r1
 800a23a:	602b      	str	r3, [r5, #0]
 800a23c:	f7f7 fa97 	bl	800176e <_close>
 800a240:	1c43      	adds	r3, r0, #1
 800a242:	d102      	bne.n	800a24a <_close_r+0x1a>
 800a244:	682b      	ldr	r3, [r5, #0]
 800a246:	b103      	cbz	r3, 800a24a <_close_r+0x1a>
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	bd38      	pop	{r3, r4, r5, pc}
 800a24c:	20001a78 	.word	0x20001a78

0800a250 <quorem>:
 800a250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	6903      	ldr	r3, [r0, #16]
 800a256:	690c      	ldr	r4, [r1, #16]
 800a258:	42a3      	cmp	r3, r4
 800a25a:	4607      	mov	r7, r0
 800a25c:	f2c0 8081 	blt.w	800a362 <quorem+0x112>
 800a260:	3c01      	subs	r4, #1
 800a262:	f101 0814 	add.w	r8, r1, #20
 800a266:	f100 0514 	add.w	r5, r0, #20
 800a26a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a26e:	9301      	str	r3, [sp, #4]
 800a270:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a274:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a278:	3301      	adds	r3, #1
 800a27a:	429a      	cmp	r2, r3
 800a27c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a280:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a284:	fbb2 f6f3 	udiv	r6, r2, r3
 800a288:	d331      	bcc.n	800a2ee <quorem+0x9e>
 800a28a:	f04f 0e00 	mov.w	lr, #0
 800a28e:	4640      	mov	r0, r8
 800a290:	46ac      	mov	ip, r5
 800a292:	46f2      	mov	sl, lr
 800a294:	f850 2b04 	ldr.w	r2, [r0], #4
 800a298:	b293      	uxth	r3, r2
 800a29a:	fb06 e303 	mla	r3, r6, r3, lr
 800a29e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	ebaa 0303 	sub.w	r3, sl, r3
 800a2a8:	f8dc a000 	ldr.w	sl, [ip]
 800a2ac:	0c12      	lsrs	r2, r2, #16
 800a2ae:	fa13 f38a 	uxtah	r3, r3, sl
 800a2b2:	fb06 e202 	mla	r2, r6, r2, lr
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	9b00      	ldr	r3, [sp, #0]
 800a2ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a2be:	b292      	uxth	r2, r2
 800a2c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a2c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2c8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a2cc:	4581      	cmp	r9, r0
 800a2ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2d2:	f84c 3b04 	str.w	r3, [ip], #4
 800a2d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a2da:	d2db      	bcs.n	800a294 <quorem+0x44>
 800a2dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a2e0:	b92b      	cbnz	r3, 800a2ee <quorem+0x9e>
 800a2e2:	9b01      	ldr	r3, [sp, #4]
 800a2e4:	3b04      	subs	r3, #4
 800a2e6:	429d      	cmp	r5, r3
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	d32e      	bcc.n	800a34a <quorem+0xfa>
 800a2ec:	613c      	str	r4, [r7, #16]
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	f001 fdda 	bl	800bea8 <__mcmp>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	db24      	blt.n	800a342 <quorem+0xf2>
 800a2f8:	3601      	adds	r6, #1
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f04f 0c00 	mov.w	ip, #0
 800a300:	f858 2b04 	ldr.w	r2, [r8], #4
 800a304:	f8d0 e000 	ldr.w	lr, [r0]
 800a308:	b293      	uxth	r3, r2
 800a30a:	ebac 0303 	sub.w	r3, ip, r3
 800a30e:	0c12      	lsrs	r2, r2, #16
 800a310:	fa13 f38e 	uxtah	r3, r3, lr
 800a314:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a318:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a322:	45c1      	cmp	r9, r8
 800a324:	f840 3b04 	str.w	r3, [r0], #4
 800a328:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a32c:	d2e8      	bcs.n	800a300 <quorem+0xb0>
 800a32e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a336:	b922      	cbnz	r2, 800a342 <quorem+0xf2>
 800a338:	3b04      	subs	r3, #4
 800a33a:	429d      	cmp	r5, r3
 800a33c:	461a      	mov	r2, r3
 800a33e:	d30a      	bcc.n	800a356 <quorem+0x106>
 800a340:	613c      	str	r4, [r7, #16]
 800a342:	4630      	mov	r0, r6
 800a344:	b003      	add	sp, #12
 800a346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a34a:	6812      	ldr	r2, [r2, #0]
 800a34c:	3b04      	subs	r3, #4
 800a34e:	2a00      	cmp	r2, #0
 800a350:	d1cc      	bne.n	800a2ec <quorem+0x9c>
 800a352:	3c01      	subs	r4, #1
 800a354:	e7c7      	b.n	800a2e6 <quorem+0x96>
 800a356:	6812      	ldr	r2, [r2, #0]
 800a358:	3b04      	subs	r3, #4
 800a35a:	2a00      	cmp	r2, #0
 800a35c:	d1f0      	bne.n	800a340 <quorem+0xf0>
 800a35e:	3c01      	subs	r4, #1
 800a360:	e7eb      	b.n	800a33a <quorem+0xea>
 800a362:	2000      	movs	r0, #0
 800a364:	e7ee      	b.n	800a344 <quorem+0xf4>
	...

0800a368 <_dtoa_r>:
 800a368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36c:	ed2d 8b04 	vpush	{d8-d9}
 800a370:	ec57 6b10 	vmov	r6, r7, d0
 800a374:	b093      	sub	sp, #76	; 0x4c
 800a376:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a378:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a37c:	9106      	str	r1, [sp, #24]
 800a37e:	ee10 aa10 	vmov	sl, s0
 800a382:	4604      	mov	r4, r0
 800a384:	9209      	str	r2, [sp, #36]	; 0x24
 800a386:	930c      	str	r3, [sp, #48]	; 0x30
 800a388:	46bb      	mov	fp, r7
 800a38a:	b975      	cbnz	r5, 800a3aa <_dtoa_r+0x42>
 800a38c:	2010      	movs	r0, #16
 800a38e:	f001 fa99 	bl	800b8c4 <malloc>
 800a392:	4602      	mov	r2, r0
 800a394:	6260      	str	r0, [r4, #36]	; 0x24
 800a396:	b920      	cbnz	r0, 800a3a2 <_dtoa_r+0x3a>
 800a398:	4ba7      	ldr	r3, [pc, #668]	; (800a638 <_dtoa_r+0x2d0>)
 800a39a:	21ea      	movs	r1, #234	; 0xea
 800a39c:	48a7      	ldr	r0, [pc, #668]	; (800a63c <_dtoa_r+0x2d4>)
 800a39e:	f7ff ff29 	bl	800a1f4 <__assert_func>
 800a3a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a3a6:	6005      	str	r5, [r0, #0]
 800a3a8:	60c5      	str	r5, [r0, #12]
 800a3aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ac:	6819      	ldr	r1, [r3, #0]
 800a3ae:	b151      	cbz	r1, 800a3c6 <_dtoa_r+0x5e>
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	604a      	str	r2, [r1, #4]
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	4093      	lsls	r3, r2
 800a3b8:	608b      	str	r3, [r1, #8]
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f001 fae8 	bl	800b990 <_Bfree>
 800a3c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	601a      	str	r2, [r3, #0]
 800a3c6:	1e3b      	subs	r3, r7, #0
 800a3c8:	bfaa      	itet	ge
 800a3ca:	2300      	movge	r3, #0
 800a3cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a3d0:	f8c8 3000 	strge.w	r3, [r8]
 800a3d4:	4b9a      	ldr	r3, [pc, #616]	; (800a640 <_dtoa_r+0x2d8>)
 800a3d6:	bfbc      	itt	lt
 800a3d8:	2201      	movlt	r2, #1
 800a3da:	f8c8 2000 	strlt.w	r2, [r8]
 800a3de:	ea33 030b 	bics.w	r3, r3, fp
 800a3e2:	d11b      	bne.n	800a41c <_dtoa_r+0xb4>
 800a3e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3f0:	4333      	orrs	r3, r6
 800a3f2:	f000 8592 	beq.w	800af1a <_dtoa_r+0xbb2>
 800a3f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3f8:	b963      	cbnz	r3, 800a414 <_dtoa_r+0xac>
 800a3fa:	4b92      	ldr	r3, [pc, #584]	; (800a644 <_dtoa_r+0x2dc>)
 800a3fc:	e022      	b.n	800a444 <_dtoa_r+0xdc>
 800a3fe:	4b92      	ldr	r3, [pc, #584]	; (800a648 <_dtoa_r+0x2e0>)
 800a400:	9301      	str	r3, [sp, #4]
 800a402:	3308      	adds	r3, #8
 800a404:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a406:	6013      	str	r3, [r2, #0]
 800a408:	9801      	ldr	r0, [sp, #4]
 800a40a:	b013      	add	sp, #76	; 0x4c
 800a40c:	ecbd 8b04 	vpop	{d8-d9}
 800a410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a414:	4b8b      	ldr	r3, [pc, #556]	; (800a644 <_dtoa_r+0x2dc>)
 800a416:	9301      	str	r3, [sp, #4]
 800a418:	3303      	adds	r3, #3
 800a41a:	e7f3      	b.n	800a404 <_dtoa_r+0x9c>
 800a41c:	2200      	movs	r2, #0
 800a41e:	2300      	movs	r3, #0
 800a420:	4650      	mov	r0, sl
 800a422:	4659      	mov	r1, fp
 800a424:	f7f6 fb50 	bl	8000ac8 <__aeabi_dcmpeq>
 800a428:	ec4b ab19 	vmov	d9, sl, fp
 800a42c:	4680      	mov	r8, r0
 800a42e:	b158      	cbz	r0, 800a448 <_dtoa_r+0xe0>
 800a430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a432:	2301      	movs	r3, #1
 800a434:	6013      	str	r3, [r2, #0]
 800a436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f000 856b 	beq.w	800af14 <_dtoa_r+0xbac>
 800a43e:	4883      	ldr	r0, [pc, #524]	; (800a64c <_dtoa_r+0x2e4>)
 800a440:	6018      	str	r0, [r3, #0]
 800a442:	1e43      	subs	r3, r0, #1
 800a444:	9301      	str	r3, [sp, #4]
 800a446:	e7df      	b.n	800a408 <_dtoa_r+0xa0>
 800a448:	ec4b ab10 	vmov	d0, sl, fp
 800a44c:	aa10      	add	r2, sp, #64	; 0x40
 800a44e:	a911      	add	r1, sp, #68	; 0x44
 800a450:	4620      	mov	r0, r4
 800a452:	f001 fe4b 	bl	800c0ec <__d2b>
 800a456:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a45a:	ee08 0a10 	vmov	s16, r0
 800a45e:	2d00      	cmp	r5, #0
 800a460:	f000 8084 	beq.w	800a56c <_dtoa_r+0x204>
 800a464:	ee19 3a90 	vmov	r3, s19
 800a468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a46c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a470:	4656      	mov	r6, sl
 800a472:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a476:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a47a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a47e:	4b74      	ldr	r3, [pc, #464]	; (800a650 <_dtoa_r+0x2e8>)
 800a480:	2200      	movs	r2, #0
 800a482:	4630      	mov	r0, r6
 800a484:	4639      	mov	r1, r7
 800a486:	f7f5 feff 	bl	8000288 <__aeabi_dsub>
 800a48a:	a365      	add	r3, pc, #404	; (adr r3, 800a620 <_dtoa_r+0x2b8>)
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	f7f6 f8b2 	bl	80005f8 <__aeabi_dmul>
 800a494:	a364      	add	r3, pc, #400	; (adr r3, 800a628 <_dtoa_r+0x2c0>)
 800a496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49a:	f7f5 fef7 	bl	800028c <__adddf3>
 800a49e:	4606      	mov	r6, r0
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	460f      	mov	r7, r1
 800a4a4:	f7f6 f83e 	bl	8000524 <__aeabi_i2d>
 800a4a8:	a361      	add	r3, pc, #388	; (adr r3, 800a630 <_dtoa_r+0x2c8>)
 800a4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ae:	f7f6 f8a3 	bl	80005f8 <__aeabi_dmul>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	4639      	mov	r1, r7
 800a4ba:	f7f5 fee7 	bl	800028c <__adddf3>
 800a4be:	4606      	mov	r6, r0
 800a4c0:	460f      	mov	r7, r1
 800a4c2:	f7f6 fb49 	bl	8000b58 <__aeabi_d2iz>
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	9000      	str	r0, [sp, #0]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	4639      	mov	r1, r7
 800a4d0:	f7f6 fb04 	bl	8000adc <__aeabi_dcmplt>
 800a4d4:	b150      	cbz	r0, 800a4ec <_dtoa_r+0x184>
 800a4d6:	9800      	ldr	r0, [sp, #0]
 800a4d8:	f7f6 f824 	bl	8000524 <__aeabi_i2d>
 800a4dc:	4632      	mov	r2, r6
 800a4de:	463b      	mov	r3, r7
 800a4e0:	f7f6 faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4e4:	b910      	cbnz	r0, 800a4ec <_dtoa_r+0x184>
 800a4e6:	9b00      	ldr	r3, [sp, #0]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	9b00      	ldr	r3, [sp, #0]
 800a4ee:	2b16      	cmp	r3, #22
 800a4f0:	d85a      	bhi.n	800a5a8 <_dtoa_r+0x240>
 800a4f2:	9a00      	ldr	r2, [sp, #0]
 800a4f4:	4b57      	ldr	r3, [pc, #348]	; (800a654 <_dtoa_r+0x2ec>)
 800a4f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	ec51 0b19 	vmov	r0, r1, d9
 800a502:	f7f6 faeb 	bl	8000adc <__aeabi_dcmplt>
 800a506:	2800      	cmp	r0, #0
 800a508:	d050      	beq.n	800a5ac <_dtoa_r+0x244>
 800a50a:	9b00      	ldr	r3, [sp, #0]
 800a50c:	3b01      	subs	r3, #1
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	2300      	movs	r3, #0
 800a512:	930b      	str	r3, [sp, #44]	; 0x2c
 800a514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a516:	1b5d      	subs	r5, r3, r5
 800a518:	1e6b      	subs	r3, r5, #1
 800a51a:	9305      	str	r3, [sp, #20]
 800a51c:	bf45      	ittet	mi
 800a51e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a522:	9304      	strmi	r3, [sp, #16]
 800a524:	2300      	movpl	r3, #0
 800a526:	2300      	movmi	r3, #0
 800a528:	bf4c      	ite	mi
 800a52a:	9305      	strmi	r3, [sp, #20]
 800a52c:	9304      	strpl	r3, [sp, #16]
 800a52e:	9b00      	ldr	r3, [sp, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	db3d      	blt.n	800a5b0 <_dtoa_r+0x248>
 800a534:	9b05      	ldr	r3, [sp, #20]
 800a536:	9a00      	ldr	r2, [sp, #0]
 800a538:	920a      	str	r2, [sp, #40]	; 0x28
 800a53a:	4413      	add	r3, r2
 800a53c:	9305      	str	r3, [sp, #20]
 800a53e:	2300      	movs	r3, #0
 800a540:	9307      	str	r3, [sp, #28]
 800a542:	9b06      	ldr	r3, [sp, #24]
 800a544:	2b09      	cmp	r3, #9
 800a546:	f200 8089 	bhi.w	800a65c <_dtoa_r+0x2f4>
 800a54a:	2b05      	cmp	r3, #5
 800a54c:	bfc4      	itt	gt
 800a54e:	3b04      	subgt	r3, #4
 800a550:	9306      	strgt	r3, [sp, #24]
 800a552:	9b06      	ldr	r3, [sp, #24]
 800a554:	f1a3 0302 	sub.w	r3, r3, #2
 800a558:	bfcc      	ite	gt
 800a55a:	2500      	movgt	r5, #0
 800a55c:	2501      	movle	r5, #1
 800a55e:	2b03      	cmp	r3, #3
 800a560:	f200 8087 	bhi.w	800a672 <_dtoa_r+0x30a>
 800a564:	e8df f003 	tbb	[pc, r3]
 800a568:	59383a2d 	.word	0x59383a2d
 800a56c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a570:	441d      	add	r5, r3
 800a572:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a576:	2b20      	cmp	r3, #32
 800a578:	bfc1      	itttt	gt
 800a57a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a57e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a582:	fa0b f303 	lslgt.w	r3, fp, r3
 800a586:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a58a:	bfda      	itte	le
 800a58c:	f1c3 0320 	rsble	r3, r3, #32
 800a590:	fa06 f003 	lslle.w	r0, r6, r3
 800a594:	4318      	orrgt	r0, r3
 800a596:	f7f5 ffb5 	bl	8000504 <__aeabi_ui2d>
 800a59a:	2301      	movs	r3, #1
 800a59c:	4606      	mov	r6, r0
 800a59e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a5a2:	3d01      	subs	r5, #1
 800a5a4:	930e      	str	r3, [sp, #56]	; 0x38
 800a5a6:	e76a      	b.n	800a47e <_dtoa_r+0x116>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e7b2      	b.n	800a512 <_dtoa_r+0x1aa>
 800a5ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800a5ae:	e7b1      	b.n	800a514 <_dtoa_r+0x1ac>
 800a5b0:	9b04      	ldr	r3, [sp, #16]
 800a5b2:	9a00      	ldr	r2, [sp, #0]
 800a5b4:	1a9b      	subs	r3, r3, r2
 800a5b6:	9304      	str	r3, [sp, #16]
 800a5b8:	4253      	negs	r3, r2
 800a5ba:	9307      	str	r3, [sp, #28]
 800a5bc:	2300      	movs	r3, #0
 800a5be:	930a      	str	r3, [sp, #40]	; 0x28
 800a5c0:	e7bf      	b.n	800a542 <_dtoa_r+0x1da>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	9308      	str	r3, [sp, #32]
 800a5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	dc55      	bgt.n	800a678 <_dtoa_r+0x310>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5d6:	e00c      	b.n	800a5f2 <_dtoa_r+0x28a>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e7f3      	b.n	800a5c4 <_dtoa_r+0x25c>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5e0:	9308      	str	r3, [sp, #32]
 800a5e2:	9b00      	ldr	r3, [sp, #0]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	9302      	str	r3, [sp, #8]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	9303      	str	r3, [sp, #12]
 800a5ee:	bfb8      	it	lt
 800a5f0:	2301      	movlt	r3, #1
 800a5f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	6042      	str	r2, [r0, #4]
 800a5f8:	2204      	movs	r2, #4
 800a5fa:	f102 0614 	add.w	r6, r2, #20
 800a5fe:	429e      	cmp	r6, r3
 800a600:	6841      	ldr	r1, [r0, #4]
 800a602:	d93d      	bls.n	800a680 <_dtoa_r+0x318>
 800a604:	4620      	mov	r0, r4
 800a606:	f001 f983 	bl	800b910 <_Balloc>
 800a60a:	9001      	str	r0, [sp, #4]
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d13b      	bne.n	800a688 <_dtoa_r+0x320>
 800a610:	4b11      	ldr	r3, [pc, #68]	; (800a658 <_dtoa_r+0x2f0>)
 800a612:	4602      	mov	r2, r0
 800a614:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a618:	e6c0      	b.n	800a39c <_dtoa_r+0x34>
 800a61a:	2301      	movs	r3, #1
 800a61c:	e7df      	b.n	800a5de <_dtoa_r+0x276>
 800a61e:	bf00      	nop
 800a620:	636f4361 	.word	0x636f4361
 800a624:	3fd287a7 	.word	0x3fd287a7
 800a628:	8b60c8b3 	.word	0x8b60c8b3
 800a62c:	3fc68a28 	.word	0x3fc68a28
 800a630:	509f79fb 	.word	0x509f79fb
 800a634:	3fd34413 	.word	0x3fd34413
 800a638:	0800ce3a 	.word	0x0800ce3a
 800a63c:	0800ce51 	.word	0x0800ce51
 800a640:	7ff00000 	.word	0x7ff00000
 800a644:	0800ce36 	.word	0x0800ce36
 800a648:	0800ce2d 	.word	0x0800ce2d
 800a64c:	0800cc75 	.word	0x0800cc75
 800a650:	3ff80000 	.word	0x3ff80000
 800a654:	0800cfc0 	.word	0x0800cfc0
 800a658:	0800ceac 	.word	0x0800ceac
 800a65c:	2501      	movs	r5, #1
 800a65e:	2300      	movs	r3, #0
 800a660:	9306      	str	r3, [sp, #24]
 800a662:	9508      	str	r5, [sp, #32]
 800a664:	f04f 33ff 	mov.w	r3, #4294967295
 800a668:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a66c:	2200      	movs	r2, #0
 800a66e:	2312      	movs	r3, #18
 800a670:	e7b0      	b.n	800a5d4 <_dtoa_r+0x26c>
 800a672:	2301      	movs	r3, #1
 800a674:	9308      	str	r3, [sp, #32]
 800a676:	e7f5      	b.n	800a664 <_dtoa_r+0x2fc>
 800a678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a67a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a67e:	e7b8      	b.n	800a5f2 <_dtoa_r+0x28a>
 800a680:	3101      	adds	r1, #1
 800a682:	6041      	str	r1, [r0, #4]
 800a684:	0052      	lsls	r2, r2, #1
 800a686:	e7b8      	b.n	800a5fa <_dtoa_r+0x292>
 800a688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a68a:	9a01      	ldr	r2, [sp, #4]
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	9b03      	ldr	r3, [sp, #12]
 800a690:	2b0e      	cmp	r3, #14
 800a692:	f200 809d 	bhi.w	800a7d0 <_dtoa_r+0x468>
 800a696:	2d00      	cmp	r5, #0
 800a698:	f000 809a 	beq.w	800a7d0 <_dtoa_r+0x468>
 800a69c:	9b00      	ldr	r3, [sp, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	dd32      	ble.n	800a708 <_dtoa_r+0x3a0>
 800a6a2:	4ab7      	ldr	r2, [pc, #732]	; (800a980 <_dtoa_r+0x618>)
 800a6a4:	f003 030f 	and.w	r3, r3, #15
 800a6a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a6ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6b0:	9b00      	ldr	r3, [sp, #0]
 800a6b2:	05d8      	lsls	r0, r3, #23
 800a6b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a6b8:	d516      	bpl.n	800a6e8 <_dtoa_r+0x380>
 800a6ba:	4bb2      	ldr	r3, [pc, #712]	; (800a984 <_dtoa_r+0x61c>)
 800a6bc:	ec51 0b19 	vmov	r0, r1, d9
 800a6c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6c4:	f7f6 f8c2 	bl	800084c <__aeabi_ddiv>
 800a6c8:	f007 070f 	and.w	r7, r7, #15
 800a6cc:	4682      	mov	sl, r0
 800a6ce:	468b      	mov	fp, r1
 800a6d0:	2503      	movs	r5, #3
 800a6d2:	4eac      	ldr	r6, [pc, #688]	; (800a984 <_dtoa_r+0x61c>)
 800a6d4:	b957      	cbnz	r7, 800a6ec <_dtoa_r+0x384>
 800a6d6:	4642      	mov	r2, r8
 800a6d8:	464b      	mov	r3, r9
 800a6da:	4650      	mov	r0, sl
 800a6dc:	4659      	mov	r1, fp
 800a6de:	f7f6 f8b5 	bl	800084c <__aeabi_ddiv>
 800a6e2:	4682      	mov	sl, r0
 800a6e4:	468b      	mov	fp, r1
 800a6e6:	e028      	b.n	800a73a <_dtoa_r+0x3d2>
 800a6e8:	2502      	movs	r5, #2
 800a6ea:	e7f2      	b.n	800a6d2 <_dtoa_r+0x36a>
 800a6ec:	07f9      	lsls	r1, r7, #31
 800a6ee:	d508      	bpl.n	800a702 <_dtoa_r+0x39a>
 800a6f0:	4640      	mov	r0, r8
 800a6f2:	4649      	mov	r1, r9
 800a6f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6f8:	f7f5 ff7e 	bl	80005f8 <__aeabi_dmul>
 800a6fc:	3501      	adds	r5, #1
 800a6fe:	4680      	mov	r8, r0
 800a700:	4689      	mov	r9, r1
 800a702:	107f      	asrs	r7, r7, #1
 800a704:	3608      	adds	r6, #8
 800a706:	e7e5      	b.n	800a6d4 <_dtoa_r+0x36c>
 800a708:	f000 809b 	beq.w	800a842 <_dtoa_r+0x4da>
 800a70c:	9b00      	ldr	r3, [sp, #0]
 800a70e:	4f9d      	ldr	r7, [pc, #628]	; (800a984 <_dtoa_r+0x61c>)
 800a710:	425e      	negs	r6, r3
 800a712:	4b9b      	ldr	r3, [pc, #620]	; (800a980 <_dtoa_r+0x618>)
 800a714:	f006 020f 	and.w	r2, r6, #15
 800a718:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	ec51 0b19 	vmov	r0, r1, d9
 800a724:	f7f5 ff68 	bl	80005f8 <__aeabi_dmul>
 800a728:	1136      	asrs	r6, r6, #4
 800a72a:	4682      	mov	sl, r0
 800a72c:	468b      	mov	fp, r1
 800a72e:	2300      	movs	r3, #0
 800a730:	2502      	movs	r5, #2
 800a732:	2e00      	cmp	r6, #0
 800a734:	d17a      	bne.n	800a82c <_dtoa_r+0x4c4>
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1d3      	bne.n	800a6e2 <_dtoa_r+0x37a>
 800a73a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f000 8082 	beq.w	800a846 <_dtoa_r+0x4de>
 800a742:	4b91      	ldr	r3, [pc, #580]	; (800a988 <_dtoa_r+0x620>)
 800a744:	2200      	movs	r2, #0
 800a746:	4650      	mov	r0, sl
 800a748:	4659      	mov	r1, fp
 800a74a:	f7f6 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800a74e:	2800      	cmp	r0, #0
 800a750:	d079      	beq.n	800a846 <_dtoa_r+0x4de>
 800a752:	9b03      	ldr	r3, [sp, #12]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d076      	beq.n	800a846 <_dtoa_r+0x4de>
 800a758:	9b02      	ldr	r3, [sp, #8]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	dd36      	ble.n	800a7cc <_dtoa_r+0x464>
 800a75e:	9b00      	ldr	r3, [sp, #0]
 800a760:	4650      	mov	r0, sl
 800a762:	4659      	mov	r1, fp
 800a764:	1e5f      	subs	r7, r3, #1
 800a766:	2200      	movs	r2, #0
 800a768:	4b88      	ldr	r3, [pc, #544]	; (800a98c <_dtoa_r+0x624>)
 800a76a:	f7f5 ff45 	bl	80005f8 <__aeabi_dmul>
 800a76e:	9e02      	ldr	r6, [sp, #8]
 800a770:	4682      	mov	sl, r0
 800a772:	468b      	mov	fp, r1
 800a774:	3501      	adds	r5, #1
 800a776:	4628      	mov	r0, r5
 800a778:	f7f5 fed4 	bl	8000524 <__aeabi_i2d>
 800a77c:	4652      	mov	r2, sl
 800a77e:	465b      	mov	r3, fp
 800a780:	f7f5 ff3a 	bl	80005f8 <__aeabi_dmul>
 800a784:	4b82      	ldr	r3, [pc, #520]	; (800a990 <_dtoa_r+0x628>)
 800a786:	2200      	movs	r2, #0
 800a788:	f7f5 fd80 	bl	800028c <__adddf3>
 800a78c:	46d0      	mov	r8, sl
 800a78e:	46d9      	mov	r9, fp
 800a790:	4682      	mov	sl, r0
 800a792:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a796:	2e00      	cmp	r6, #0
 800a798:	d158      	bne.n	800a84c <_dtoa_r+0x4e4>
 800a79a:	4b7e      	ldr	r3, [pc, #504]	; (800a994 <_dtoa_r+0x62c>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	4640      	mov	r0, r8
 800a7a0:	4649      	mov	r1, r9
 800a7a2:	f7f5 fd71 	bl	8000288 <__aeabi_dsub>
 800a7a6:	4652      	mov	r2, sl
 800a7a8:	465b      	mov	r3, fp
 800a7aa:	4680      	mov	r8, r0
 800a7ac:	4689      	mov	r9, r1
 800a7ae:	f7f6 f9b3 	bl	8000b18 <__aeabi_dcmpgt>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	f040 8295 	bne.w	800ace2 <_dtoa_r+0x97a>
 800a7b8:	4652      	mov	r2, sl
 800a7ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a7be:	4640      	mov	r0, r8
 800a7c0:	4649      	mov	r1, r9
 800a7c2:	f7f6 f98b 	bl	8000adc <__aeabi_dcmplt>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	f040 8289 	bne.w	800acde <_dtoa_r+0x976>
 800a7cc:	ec5b ab19 	vmov	sl, fp, d9
 800a7d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f2c0 8148 	blt.w	800aa68 <_dtoa_r+0x700>
 800a7d8:	9a00      	ldr	r2, [sp, #0]
 800a7da:	2a0e      	cmp	r2, #14
 800a7dc:	f300 8144 	bgt.w	800aa68 <_dtoa_r+0x700>
 800a7e0:	4b67      	ldr	r3, [pc, #412]	; (800a980 <_dtoa_r+0x618>)
 800a7e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f280 80d5 	bge.w	800a99c <_dtoa_r+0x634>
 800a7f2:	9b03      	ldr	r3, [sp, #12]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f300 80d1 	bgt.w	800a99c <_dtoa_r+0x634>
 800a7fa:	f040 826f 	bne.w	800acdc <_dtoa_r+0x974>
 800a7fe:	4b65      	ldr	r3, [pc, #404]	; (800a994 <_dtoa_r+0x62c>)
 800a800:	2200      	movs	r2, #0
 800a802:	4640      	mov	r0, r8
 800a804:	4649      	mov	r1, r9
 800a806:	f7f5 fef7 	bl	80005f8 <__aeabi_dmul>
 800a80a:	4652      	mov	r2, sl
 800a80c:	465b      	mov	r3, fp
 800a80e:	f7f6 f979 	bl	8000b04 <__aeabi_dcmpge>
 800a812:	9e03      	ldr	r6, [sp, #12]
 800a814:	4637      	mov	r7, r6
 800a816:	2800      	cmp	r0, #0
 800a818:	f040 8245 	bne.w	800aca6 <_dtoa_r+0x93e>
 800a81c:	9d01      	ldr	r5, [sp, #4]
 800a81e:	2331      	movs	r3, #49	; 0x31
 800a820:	f805 3b01 	strb.w	r3, [r5], #1
 800a824:	9b00      	ldr	r3, [sp, #0]
 800a826:	3301      	adds	r3, #1
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	e240      	b.n	800acae <_dtoa_r+0x946>
 800a82c:	07f2      	lsls	r2, r6, #31
 800a82e:	d505      	bpl.n	800a83c <_dtoa_r+0x4d4>
 800a830:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a834:	f7f5 fee0 	bl	80005f8 <__aeabi_dmul>
 800a838:	3501      	adds	r5, #1
 800a83a:	2301      	movs	r3, #1
 800a83c:	1076      	asrs	r6, r6, #1
 800a83e:	3708      	adds	r7, #8
 800a840:	e777      	b.n	800a732 <_dtoa_r+0x3ca>
 800a842:	2502      	movs	r5, #2
 800a844:	e779      	b.n	800a73a <_dtoa_r+0x3d2>
 800a846:	9f00      	ldr	r7, [sp, #0]
 800a848:	9e03      	ldr	r6, [sp, #12]
 800a84a:	e794      	b.n	800a776 <_dtoa_r+0x40e>
 800a84c:	9901      	ldr	r1, [sp, #4]
 800a84e:	4b4c      	ldr	r3, [pc, #304]	; (800a980 <_dtoa_r+0x618>)
 800a850:	4431      	add	r1, r6
 800a852:	910d      	str	r1, [sp, #52]	; 0x34
 800a854:	9908      	ldr	r1, [sp, #32]
 800a856:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a85a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a85e:	2900      	cmp	r1, #0
 800a860:	d043      	beq.n	800a8ea <_dtoa_r+0x582>
 800a862:	494d      	ldr	r1, [pc, #308]	; (800a998 <_dtoa_r+0x630>)
 800a864:	2000      	movs	r0, #0
 800a866:	f7f5 fff1 	bl	800084c <__aeabi_ddiv>
 800a86a:	4652      	mov	r2, sl
 800a86c:	465b      	mov	r3, fp
 800a86e:	f7f5 fd0b 	bl	8000288 <__aeabi_dsub>
 800a872:	9d01      	ldr	r5, [sp, #4]
 800a874:	4682      	mov	sl, r0
 800a876:	468b      	mov	fp, r1
 800a878:	4649      	mov	r1, r9
 800a87a:	4640      	mov	r0, r8
 800a87c:	f7f6 f96c 	bl	8000b58 <__aeabi_d2iz>
 800a880:	4606      	mov	r6, r0
 800a882:	f7f5 fe4f 	bl	8000524 <__aeabi_i2d>
 800a886:	4602      	mov	r2, r0
 800a888:	460b      	mov	r3, r1
 800a88a:	4640      	mov	r0, r8
 800a88c:	4649      	mov	r1, r9
 800a88e:	f7f5 fcfb 	bl	8000288 <__aeabi_dsub>
 800a892:	3630      	adds	r6, #48	; 0x30
 800a894:	f805 6b01 	strb.w	r6, [r5], #1
 800a898:	4652      	mov	r2, sl
 800a89a:	465b      	mov	r3, fp
 800a89c:	4680      	mov	r8, r0
 800a89e:	4689      	mov	r9, r1
 800a8a0:	f7f6 f91c 	bl	8000adc <__aeabi_dcmplt>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d163      	bne.n	800a970 <_dtoa_r+0x608>
 800a8a8:	4642      	mov	r2, r8
 800a8aa:	464b      	mov	r3, r9
 800a8ac:	4936      	ldr	r1, [pc, #216]	; (800a988 <_dtoa_r+0x620>)
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	f7f5 fcea 	bl	8000288 <__aeabi_dsub>
 800a8b4:	4652      	mov	r2, sl
 800a8b6:	465b      	mov	r3, fp
 800a8b8:	f7f6 f910 	bl	8000adc <__aeabi_dcmplt>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	f040 80b5 	bne.w	800aa2c <_dtoa_r+0x6c4>
 800a8c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8c4:	429d      	cmp	r5, r3
 800a8c6:	d081      	beq.n	800a7cc <_dtoa_r+0x464>
 800a8c8:	4b30      	ldr	r3, [pc, #192]	; (800a98c <_dtoa_r+0x624>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	4650      	mov	r0, sl
 800a8ce:	4659      	mov	r1, fp
 800a8d0:	f7f5 fe92 	bl	80005f8 <__aeabi_dmul>
 800a8d4:	4b2d      	ldr	r3, [pc, #180]	; (800a98c <_dtoa_r+0x624>)
 800a8d6:	4682      	mov	sl, r0
 800a8d8:	468b      	mov	fp, r1
 800a8da:	4640      	mov	r0, r8
 800a8dc:	4649      	mov	r1, r9
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f7f5 fe8a 	bl	80005f8 <__aeabi_dmul>
 800a8e4:	4680      	mov	r8, r0
 800a8e6:	4689      	mov	r9, r1
 800a8e8:	e7c6      	b.n	800a878 <_dtoa_r+0x510>
 800a8ea:	4650      	mov	r0, sl
 800a8ec:	4659      	mov	r1, fp
 800a8ee:	f7f5 fe83 	bl	80005f8 <__aeabi_dmul>
 800a8f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8f4:	9d01      	ldr	r5, [sp, #4]
 800a8f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8f8:	4682      	mov	sl, r0
 800a8fa:	468b      	mov	fp, r1
 800a8fc:	4649      	mov	r1, r9
 800a8fe:	4640      	mov	r0, r8
 800a900:	f7f6 f92a 	bl	8000b58 <__aeabi_d2iz>
 800a904:	4606      	mov	r6, r0
 800a906:	f7f5 fe0d 	bl	8000524 <__aeabi_i2d>
 800a90a:	3630      	adds	r6, #48	; 0x30
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	4640      	mov	r0, r8
 800a912:	4649      	mov	r1, r9
 800a914:	f7f5 fcb8 	bl	8000288 <__aeabi_dsub>
 800a918:	f805 6b01 	strb.w	r6, [r5], #1
 800a91c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a91e:	429d      	cmp	r5, r3
 800a920:	4680      	mov	r8, r0
 800a922:	4689      	mov	r9, r1
 800a924:	f04f 0200 	mov.w	r2, #0
 800a928:	d124      	bne.n	800a974 <_dtoa_r+0x60c>
 800a92a:	4b1b      	ldr	r3, [pc, #108]	; (800a998 <_dtoa_r+0x630>)
 800a92c:	4650      	mov	r0, sl
 800a92e:	4659      	mov	r1, fp
 800a930:	f7f5 fcac 	bl	800028c <__adddf3>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	4640      	mov	r0, r8
 800a93a:	4649      	mov	r1, r9
 800a93c:	f7f6 f8ec 	bl	8000b18 <__aeabi_dcmpgt>
 800a940:	2800      	cmp	r0, #0
 800a942:	d173      	bne.n	800aa2c <_dtoa_r+0x6c4>
 800a944:	4652      	mov	r2, sl
 800a946:	465b      	mov	r3, fp
 800a948:	4913      	ldr	r1, [pc, #76]	; (800a998 <_dtoa_r+0x630>)
 800a94a:	2000      	movs	r0, #0
 800a94c:	f7f5 fc9c 	bl	8000288 <__aeabi_dsub>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4640      	mov	r0, r8
 800a956:	4649      	mov	r1, r9
 800a958:	f7f6 f8c0 	bl	8000adc <__aeabi_dcmplt>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	f43f af35 	beq.w	800a7cc <_dtoa_r+0x464>
 800a962:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a964:	1e6b      	subs	r3, r5, #1
 800a966:	930f      	str	r3, [sp, #60]	; 0x3c
 800a968:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a96c:	2b30      	cmp	r3, #48	; 0x30
 800a96e:	d0f8      	beq.n	800a962 <_dtoa_r+0x5fa>
 800a970:	9700      	str	r7, [sp, #0]
 800a972:	e049      	b.n	800aa08 <_dtoa_r+0x6a0>
 800a974:	4b05      	ldr	r3, [pc, #20]	; (800a98c <_dtoa_r+0x624>)
 800a976:	f7f5 fe3f 	bl	80005f8 <__aeabi_dmul>
 800a97a:	4680      	mov	r8, r0
 800a97c:	4689      	mov	r9, r1
 800a97e:	e7bd      	b.n	800a8fc <_dtoa_r+0x594>
 800a980:	0800cfc0 	.word	0x0800cfc0
 800a984:	0800cf98 	.word	0x0800cf98
 800a988:	3ff00000 	.word	0x3ff00000
 800a98c:	40240000 	.word	0x40240000
 800a990:	401c0000 	.word	0x401c0000
 800a994:	40140000 	.word	0x40140000
 800a998:	3fe00000 	.word	0x3fe00000
 800a99c:	9d01      	ldr	r5, [sp, #4]
 800a99e:	4656      	mov	r6, sl
 800a9a0:	465f      	mov	r7, fp
 800a9a2:	4642      	mov	r2, r8
 800a9a4:	464b      	mov	r3, r9
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	4639      	mov	r1, r7
 800a9aa:	f7f5 ff4f 	bl	800084c <__aeabi_ddiv>
 800a9ae:	f7f6 f8d3 	bl	8000b58 <__aeabi_d2iz>
 800a9b2:	4682      	mov	sl, r0
 800a9b4:	f7f5 fdb6 	bl	8000524 <__aeabi_i2d>
 800a9b8:	4642      	mov	r2, r8
 800a9ba:	464b      	mov	r3, r9
 800a9bc:	f7f5 fe1c 	bl	80005f8 <__aeabi_dmul>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a9cc:	f7f5 fc5c 	bl	8000288 <__aeabi_dsub>
 800a9d0:	f805 6b01 	strb.w	r6, [r5], #1
 800a9d4:	9e01      	ldr	r6, [sp, #4]
 800a9d6:	9f03      	ldr	r7, [sp, #12]
 800a9d8:	1bae      	subs	r6, r5, r6
 800a9da:	42b7      	cmp	r7, r6
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	d135      	bne.n	800aa4e <_dtoa_r+0x6e6>
 800a9e2:	f7f5 fc53 	bl	800028c <__adddf3>
 800a9e6:	4642      	mov	r2, r8
 800a9e8:	464b      	mov	r3, r9
 800a9ea:	4606      	mov	r6, r0
 800a9ec:	460f      	mov	r7, r1
 800a9ee:	f7f6 f893 	bl	8000b18 <__aeabi_dcmpgt>
 800a9f2:	b9d0      	cbnz	r0, 800aa2a <_dtoa_r+0x6c2>
 800a9f4:	4642      	mov	r2, r8
 800a9f6:	464b      	mov	r3, r9
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	f7f6 f864 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa00:	b110      	cbz	r0, 800aa08 <_dtoa_r+0x6a0>
 800aa02:	f01a 0f01 	tst.w	sl, #1
 800aa06:	d110      	bne.n	800aa2a <_dtoa_r+0x6c2>
 800aa08:	4620      	mov	r0, r4
 800aa0a:	ee18 1a10 	vmov	r1, s16
 800aa0e:	f000 ffbf 	bl	800b990 <_Bfree>
 800aa12:	2300      	movs	r3, #0
 800aa14:	9800      	ldr	r0, [sp, #0]
 800aa16:	702b      	strb	r3, [r5, #0]
 800aa18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	6018      	str	r0, [r3, #0]
 800aa1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f43f acf1 	beq.w	800a408 <_dtoa_r+0xa0>
 800aa26:	601d      	str	r5, [r3, #0]
 800aa28:	e4ee      	b.n	800a408 <_dtoa_r+0xa0>
 800aa2a:	9f00      	ldr	r7, [sp, #0]
 800aa2c:	462b      	mov	r3, r5
 800aa2e:	461d      	mov	r5, r3
 800aa30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa34:	2a39      	cmp	r2, #57	; 0x39
 800aa36:	d106      	bne.n	800aa46 <_dtoa_r+0x6de>
 800aa38:	9a01      	ldr	r2, [sp, #4]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d1f7      	bne.n	800aa2e <_dtoa_r+0x6c6>
 800aa3e:	9901      	ldr	r1, [sp, #4]
 800aa40:	2230      	movs	r2, #48	; 0x30
 800aa42:	3701      	adds	r7, #1
 800aa44:	700a      	strb	r2, [r1, #0]
 800aa46:	781a      	ldrb	r2, [r3, #0]
 800aa48:	3201      	adds	r2, #1
 800aa4a:	701a      	strb	r2, [r3, #0]
 800aa4c:	e790      	b.n	800a970 <_dtoa_r+0x608>
 800aa4e:	4ba6      	ldr	r3, [pc, #664]	; (800ace8 <_dtoa_r+0x980>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	f7f5 fdd1 	bl	80005f8 <__aeabi_dmul>
 800aa56:	2200      	movs	r2, #0
 800aa58:	2300      	movs	r3, #0
 800aa5a:	4606      	mov	r6, r0
 800aa5c:	460f      	mov	r7, r1
 800aa5e:	f7f6 f833 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d09d      	beq.n	800a9a2 <_dtoa_r+0x63a>
 800aa66:	e7cf      	b.n	800aa08 <_dtoa_r+0x6a0>
 800aa68:	9a08      	ldr	r2, [sp, #32]
 800aa6a:	2a00      	cmp	r2, #0
 800aa6c:	f000 80d7 	beq.w	800ac1e <_dtoa_r+0x8b6>
 800aa70:	9a06      	ldr	r2, [sp, #24]
 800aa72:	2a01      	cmp	r2, #1
 800aa74:	f300 80ba 	bgt.w	800abec <_dtoa_r+0x884>
 800aa78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa7a:	2a00      	cmp	r2, #0
 800aa7c:	f000 80b2 	beq.w	800abe4 <_dtoa_r+0x87c>
 800aa80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa84:	9e07      	ldr	r6, [sp, #28]
 800aa86:	9d04      	ldr	r5, [sp, #16]
 800aa88:	9a04      	ldr	r2, [sp, #16]
 800aa8a:	441a      	add	r2, r3
 800aa8c:	9204      	str	r2, [sp, #16]
 800aa8e:	9a05      	ldr	r2, [sp, #20]
 800aa90:	2101      	movs	r1, #1
 800aa92:	441a      	add	r2, r3
 800aa94:	4620      	mov	r0, r4
 800aa96:	9205      	str	r2, [sp, #20]
 800aa98:	f001 f87c 	bl	800bb94 <__i2b>
 800aa9c:	4607      	mov	r7, r0
 800aa9e:	2d00      	cmp	r5, #0
 800aaa0:	dd0c      	ble.n	800aabc <_dtoa_r+0x754>
 800aaa2:	9b05      	ldr	r3, [sp, #20]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	dd09      	ble.n	800aabc <_dtoa_r+0x754>
 800aaa8:	42ab      	cmp	r3, r5
 800aaaa:	9a04      	ldr	r2, [sp, #16]
 800aaac:	bfa8      	it	ge
 800aaae:	462b      	movge	r3, r5
 800aab0:	1ad2      	subs	r2, r2, r3
 800aab2:	9204      	str	r2, [sp, #16]
 800aab4:	9a05      	ldr	r2, [sp, #20]
 800aab6:	1aed      	subs	r5, r5, r3
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	9305      	str	r3, [sp, #20]
 800aabc:	9b07      	ldr	r3, [sp, #28]
 800aabe:	b31b      	cbz	r3, 800ab08 <_dtoa_r+0x7a0>
 800aac0:	9b08      	ldr	r3, [sp, #32]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 80af 	beq.w	800ac26 <_dtoa_r+0x8be>
 800aac8:	2e00      	cmp	r6, #0
 800aaca:	dd13      	ble.n	800aaf4 <_dtoa_r+0x78c>
 800aacc:	4639      	mov	r1, r7
 800aace:	4632      	mov	r2, r6
 800aad0:	4620      	mov	r0, r4
 800aad2:	f001 f91f 	bl	800bd14 <__pow5mult>
 800aad6:	ee18 2a10 	vmov	r2, s16
 800aada:	4601      	mov	r1, r0
 800aadc:	4607      	mov	r7, r0
 800aade:	4620      	mov	r0, r4
 800aae0:	f001 f86e 	bl	800bbc0 <__multiply>
 800aae4:	ee18 1a10 	vmov	r1, s16
 800aae8:	4680      	mov	r8, r0
 800aaea:	4620      	mov	r0, r4
 800aaec:	f000 ff50 	bl	800b990 <_Bfree>
 800aaf0:	ee08 8a10 	vmov	s16, r8
 800aaf4:	9b07      	ldr	r3, [sp, #28]
 800aaf6:	1b9a      	subs	r2, r3, r6
 800aaf8:	d006      	beq.n	800ab08 <_dtoa_r+0x7a0>
 800aafa:	ee18 1a10 	vmov	r1, s16
 800aafe:	4620      	mov	r0, r4
 800ab00:	f001 f908 	bl	800bd14 <__pow5mult>
 800ab04:	ee08 0a10 	vmov	s16, r0
 800ab08:	2101      	movs	r1, #1
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f001 f842 	bl	800bb94 <__i2b>
 800ab10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	4606      	mov	r6, r0
 800ab16:	f340 8088 	ble.w	800ac2a <_dtoa_r+0x8c2>
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	4601      	mov	r1, r0
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f001 f8f8 	bl	800bd14 <__pow5mult>
 800ab24:	9b06      	ldr	r3, [sp, #24]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	4606      	mov	r6, r0
 800ab2a:	f340 8081 	ble.w	800ac30 <_dtoa_r+0x8c8>
 800ab2e:	f04f 0800 	mov.w	r8, #0
 800ab32:	6933      	ldr	r3, [r6, #16]
 800ab34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab38:	6918      	ldr	r0, [r3, #16]
 800ab3a:	f000 ffdb 	bl	800baf4 <__hi0bits>
 800ab3e:	f1c0 0020 	rsb	r0, r0, #32
 800ab42:	9b05      	ldr	r3, [sp, #20]
 800ab44:	4418      	add	r0, r3
 800ab46:	f010 001f 	ands.w	r0, r0, #31
 800ab4a:	f000 8092 	beq.w	800ac72 <_dtoa_r+0x90a>
 800ab4e:	f1c0 0320 	rsb	r3, r0, #32
 800ab52:	2b04      	cmp	r3, #4
 800ab54:	f340 808a 	ble.w	800ac6c <_dtoa_r+0x904>
 800ab58:	f1c0 001c 	rsb	r0, r0, #28
 800ab5c:	9b04      	ldr	r3, [sp, #16]
 800ab5e:	4403      	add	r3, r0
 800ab60:	9304      	str	r3, [sp, #16]
 800ab62:	9b05      	ldr	r3, [sp, #20]
 800ab64:	4403      	add	r3, r0
 800ab66:	4405      	add	r5, r0
 800ab68:	9305      	str	r3, [sp, #20]
 800ab6a:	9b04      	ldr	r3, [sp, #16]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	dd07      	ble.n	800ab80 <_dtoa_r+0x818>
 800ab70:	ee18 1a10 	vmov	r1, s16
 800ab74:	461a      	mov	r2, r3
 800ab76:	4620      	mov	r0, r4
 800ab78:	f001 f926 	bl	800bdc8 <__lshift>
 800ab7c:	ee08 0a10 	vmov	s16, r0
 800ab80:	9b05      	ldr	r3, [sp, #20]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	dd05      	ble.n	800ab92 <_dtoa_r+0x82a>
 800ab86:	4631      	mov	r1, r6
 800ab88:	461a      	mov	r2, r3
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f001 f91c 	bl	800bdc8 <__lshift>
 800ab90:	4606      	mov	r6, r0
 800ab92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d06e      	beq.n	800ac76 <_dtoa_r+0x90e>
 800ab98:	ee18 0a10 	vmov	r0, s16
 800ab9c:	4631      	mov	r1, r6
 800ab9e:	f001 f983 	bl	800bea8 <__mcmp>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	da67      	bge.n	800ac76 <_dtoa_r+0x90e>
 800aba6:	9b00      	ldr	r3, [sp, #0]
 800aba8:	3b01      	subs	r3, #1
 800abaa:	ee18 1a10 	vmov	r1, s16
 800abae:	9300      	str	r3, [sp, #0]
 800abb0:	220a      	movs	r2, #10
 800abb2:	2300      	movs	r3, #0
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 ff0d 	bl	800b9d4 <__multadd>
 800abba:	9b08      	ldr	r3, [sp, #32]
 800abbc:	ee08 0a10 	vmov	s16, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f000 81b1 	beq.w	800af28 <_dtoa_r+0xbc0>
 800abc6:	2300      	movs	r3, #0
 800abc8:	4639      	mov	r1, r7
 800abca:	220a      	movs	r2, #10
 800abcc:	4620      	mov	r0, r4
 800abce:	f000 ff01 	bl	800b9d4 <__multadd>
 800abd2:	9b02      	ldr	r3, [sp, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	4607      	mov	r7, r0
 800abd8:	f300 808e 	bgt.w	800acf8 <_dtoa_r+0x990>
 800abdc:	9b06      	ldr	r3, [sp, #24]
 800abde:	2b02      	cmp	r3, #2
 800abe0:	dc51      	bgt.n	800ac86 <_dtoa_r+0x91e>
 800abe2:	e089      	b.n	800acf8 <_dtoa_r+0x990>
 800abe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800abea:	e74b      	b.n	800aa84 <_dtoa_r+0x71c>
 800abec:	9b03      	ldr	r3, [sp, #12]
 800abee:	1e5e      	subs	r6, r3, #1
 800abf0:	9b07      	ldr	r3, [sp, #28]
 800abf2:	42b3      	cmp	r3, r6
 800abf4:	bfbf      	itttt	lt
 800abf6:	9b07      	ldrlt	r3, [sp, #28]
 800abf8:	9607      	strlt	r6, [sp, #28]
 800abfa:	1af2      	sublt	r2, r6, r3
 800abfc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800abfe:	bfb6      	itet	lt
 800ac00:	189b      	addlt	r3, r3, r2
 800ac02:	1b9e      	subge	r6, r3, r6
 800ac04:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ac06:	9b03      	ldr	r3, [sp, #12]
 800ac08:	bfb8      	it	lt
 800ac0a:	2600      	movlt	r6, #0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	bfb7      	itett	lt
 800ac10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ac14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ac18:	1a9d      	sublt	r5, r3, r2
 800ac1a:	2300      	movlt	r3, #0
 800ac1c:	e734      	b.n	800aa88 <_dtoa_r+0x720>
 800ac1e:	9e07      	ldr	r6, [sp, #28]
 800ac20:	9d04      	ldr	r5, [sp, #16]
 800ac22:	9f08      	ldr	r7, [sp, #32]
 800ac24:	e73b      	b.n	800aa9e <_dtoa_r+0x736>
 800ac26:	9a07      	ldr	r2, [sp, #28]
 800ac28:	e767      	b.n	800aafa <_dtoa_r+0x792>
 800ac2a:	9b06      	ldr	r3, [sp, #24]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	dc18      	bgt.n	800ac62 <_dtoa_r+0x8fa>
 800ac30:	f1ba 0f00 	cmp.w	sl, #0
 800ac34:	d115      	bne.n	800ac62 <_dtoa_r+0x8fa>
 800ac36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac3a:	b993      	cbnz	r3, 800ac62 <_dtoa_r+0x8fa>
 800ac3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac40:	0d1b      	lsrs	r3, r3, #20
 800ac42:	051b      	lsls	r3, r3, #20
 800ac44:	b183      	cbz	r3, 800ac68 <_dtoa_r+0x900>
 800ac46:	9b04      	ldr	r3, [sp, #16]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	9304      	str	r3, [sp, #16]
 800ac4c:	9b05      	ldr	r3, [sp, #20]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	9305      	str	r3, [sp, #20]
 800ac52:	f04f 0801 	mov.w	r8, #1
 800ac56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f47f af6a 	bne.w	800ab32 <_dtoa_r+0x7ca>
 800ac5e:	2001      	movs	r0, #1
 800ac60:	e76f      	b.n	800ab42 <_dtoa_r+0x7da>
 800ac62:	f04f 0800 	mov.w	r8, #0
 800ac66:	e7f6      	b.n	800ac56 <_dtoa_r+0x8ee>
 800ac68:	4698      	mov	r8, r3
 800ac6a:	e7f4      	b.n	800ac56 <_dtoa_r+0x8ee>
 800ac6c:	f43f af7d 	beq.w	800ab6a <_dtoa_r+0x802>
 800ac70:	4618      	mov	r0, r3
 800ac72:	301c      	adds	r0, #28
 800ac74:	e772      	b.n	800ab5c <_dtoa_r+0x7f4>
 800ac76:	9b03      	ldr	r3, [sp, #12]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	dc37      	bgt.n	800acec <_dtoa_r+0x984>
 800ac7c:	9b06      	ldr	r3, [sp, #24]
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	dd34      	ble.n	800acec <_dtoa_r+0x984>
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	9302      	str	r3, [sp, #8]
 800ac86:	9b02      	ldr	r3, [sp, #8]
 800ac88:	b96b      	cbnz	r3, 800aca6 <_dtoa_r+0x93e>
 800ac8a:	4631      	mov	r1, r6
 800ac8c:	2205      	movs	r2, #5
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f000 fea0 	bl	800b9d4 <__multadd>
 800ac94:	4601      	mov	r1, r0
 800ac96:	4606      	mov	r6, r0
 800ac98:	ee18 0a10 	vmov	r0, s16
 800ac9c:	f001 f904 	bl	800bea8 <__mcmp>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	f73f adbb 	bgt.w	800a81c <_dtoa_r+0x4b4>
 800aca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca8:	9d01      	ldr	r5, [sp, #4]
 800acaa:	43db      	mvns	r3, r3
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	f04f 0800 	mov.w	r8, #0
 800acb2:	4631      	mov	r1, r6
 800acb4:	4620      	mov	r0, r4
 800acb6:	f000 fe6b 	bl	800b990 <_Bfree>
 800acba:	2f00      	cmp	r7, #0
 800acbc:	f43f aea4 	beq.w	800aa08 <_dtoa_r+0x6a0>
 800acc0:	f1b8 0f00 	cmp.w	r8, #0
 800acc4:	d005      	beq.n	800acd2 <_dtoa_r+0x96a>
 800acc6:	45b8      	cmp	r8, r7
 800acc8:	d003      	beq.n	800acd2 <_dtoa_r+0x96a>
 800acca:	4641      	mov	r1, r8
 800accc:	4620      	mov	r0, r4
 800acce:	f000 fe5f 	bl	800b990 <_Bfree>
 800acd2:	4639      	mov	r1, r7
 800acd4:	4620      	mov	r0, r4
 800acd6:	f000 fe5b 	bl	800b990 <_Bfree>
 800acda:	e695      	b.n	800aa08 <_dtoa_r+0x6a0>
 800acdc:	2600      	movs	r6, #0
 800acde:	4637      	mov	r7, r6
 800ace0:	e7e1      	b.n	800aca6 <_dtoa_r+0x93e>
 800ace2:	9700      	str	r7, [sp, #0]
 800ace4:	4637      	mov	r7, r6
 800ace6:	e599      	b.n	800a81c <_dtoa_r+0x4b4>
 800ace8:	40240000 	.word	0x40240000
 800acec:	9b08      	ldr	r3, [sp, #32]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 80ca 	beq.w	800ae88 <_dtoa_r+0xb20>
 800acf4:	9b03      	ldr	r3, [sp, #12]
 800acf6:	9302      	str	r3, [sp, #8]
 800acf8:	2d00      	cmp	r5, #0
 800acfa:	dd05      	ble.n	800ad08 <_dtoa_r+0x9a0>
 800acfc:	4639      	mov	r1, r7
 800acfe:	462a      	mov	r2, r5
 800ad00:	4620      	mov	r0, r4
 800ad02:	f001 f861 	bl	800bdc8 <__lshift>
 800ad06:	4607      	mov	r7, r0
 800ad08:	f1b8 0f00 	cmp.w	r8, #0
 800ad0c:	d05b      	beq.n	800adc6 <_dtoa_r+0xa5e>
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 fdfd 	bl	800b910 <_Balloc>
 800ad16:	4605      	mov	r5, r0
 800ad18:	b928      	cbnz	r0, 800ad26 <_dtoa_r+0x9be>
 800ad1a:	4b87      	ldr	r3, [pc, #540]	; (800af38 <_dtoa_r+0xbd0>)
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ad22:	f7ff bb3b 	b.w	800a39c <_dtoa_r+0x34>
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	3202      	adds	r2, #2
 800ad2a:	0092      	lsls	r2, r2, #2
 800ad2c:	f107 010c 	add.w	r1, r7, #12
 800ad30:	300c      	adds	r0, #12
 800ad32:	f7fd fad6 	bl	80082e2 <memcpy>
 800ad36:	2201      	movs	r2, #1
 800ad38:	4629      	mov	r1, r5
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f001 f844 	bl	800bdc8 <__lshift>
 800ad40:	9b01      	ldr	r3, [sp, #4]
 800ad42:	f103 0901 	add.w	r9, r3, #1
 800ad46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	9305      	str	r3, [sp, #20]
 800ad4e:	f00a 0301 	and.w	r3, sl, #1
 800ad52:	46b8      	mov	r8, r7
 800ad54:	9304      	str	r3, [sp, #16]
 800ad56:	4607      	mov	r7, r0
 800ad58:	4631      	mov	r1, r6
 800ad5a:	ee18 0a10 	vmov	r0, s16
 800ad5e:	f7ff fa77 	bl	800a250 <quorem>
 800ad62:	4641      	mov	r1, r8
 800ad64:	9002      	str	r0, [sp, #8]
 800ad66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad6a:	ee18 0a10 	vmov	r0, s16
 800ad6e:	f001 f89b 	bl	800bea8 <__mcmp>
 800ad72:	463a      	mov	r2, r7
 800ad74:	9003      	str	r0, [sp, #12]
 800ad76:	4631      	mov	r1, r6
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f001 f8b1 	bl	800bee0 <__mdiff>
 800ad7e:	68c2      	ldr	r2, [r0, #12]
 800ad80:	f109 3bff 	add.w	fp, r9, #4294967295
 800ad84:	4605      	mov	r5, r0
 800ad86:	bb02      	cbnz	r2, 800adca <_dtoa_r+0xa62>
 800ad88:	4601      	mov	r1, r0
 800ad8a:	ee18 0a10 	vmov	r0, s16
 800ad8e:	f001 f88b 	bl	800bea8 <__mcmp>
 800ad92:	4602      	mov	r2, r0
 800ad94:	4629      	mov	r1, r5
 800ad96:	4620      	mov	r0, r4
 800ad98:	9207      	str	r2, [sp, #28]
 800ad9a:	f000 fdf9 	bl	800b990 <_Bfree>
 800ad9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ada2:	ea43 0102 	orr.w	r1, r3, r2
 800ada6:	9b04      	ldr	r3, [sp, #16]
 800ada8:	430b      	orrs	r3, r1
 800adaa:	464d      	mov	r5, r9
 800adac:	d10f      	bne.n	800adce <_dtoa_r+0xa66>
 800adae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800adb2:	d02a      	beq.n	800ae0a <_dtoa_r+0xaa2>
 800adb4:	9b03      	ldr	r3, [sp, #12]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	dd02      	ble.n	800adc0 <_dtoa_r+0xa58>
 800adba:	9b02      	ldr	r3, [sp, #8]
 800adbc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800adc0:	f88b a000 	strb.w	sl, [fp]
 800adc4:	e775      	b.n	800acb2 <_dtoa_r+0x94a>
 800adc6:	4638      	mov	r0, r7
 800adc8:	e7ba      	b.n	800ad40 <_dtoa_r+0x9d8>
 800adca:	2201      	movs	r2, #1
 800adcc:	e7e2      	b.n	800ad94 <_dtoa_r+0xa2c>
 800adce:	9b03      	ldr	r3, [sp, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	db04      	blt.n	800adde <_dtoa_r+0xa76>
 800add4:	9906      	ldr	r1, [sp, #24]
 800add6:	430b      	orrs	r3, r1
 800add8:	9904      	ldr	r1, [sp, #16]
 800adda:	430b      	orrs	r3, r1
 800addc:	d122      	bne.n	800ae24 <_dtoa_r+0xabc>
 800adde:	2a00      	cmp	r2, #0
 800ade0:	ddee      	ble.n	800adc0 <_dtoa_r+0xa58>
 800ade2:	ee18 1a10 	vmov	r1, s16
 800ade6:	2201      	movs	r2, #1
 800ade8:	4620      	mov	r0, r4
 800adea:	f000 ffed 	bl	800bdc8 <__lshift>
 800adee:	4631      	mov	r1, r6
 800adf0:	ee08 0a10 	vmov	s16, r0
 800adf4:	f001 f858 	bl	800bea8 <__mcmp>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	dc03      	bgt.n	800ae04 <_dtoa_r+0xa9c>
 800adfc:	d1e0      	bne.n	800adc0 <_dtoa_r+0xa58>
 800adfe:	f01a 0f01 	tst.w	sl, #1
 800ae02:	d0dd      	beq.n	800adc0 <_dtoa_r+0xa58>
 800ae04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae08:	d1d7      	bne.n	800adba <_dtoa_r+0xa52>
 800ae0a:	2339      	movs	r3, #57	; 0x39
 800ae0c:	f88b 3000 	strb.w	r3, [fp]
 800ae10:	462b      	mov	r3, r5
 800ae12:	461d      	mov	r5, r3
 800ae14:	3b01      	subs	r3, #1
 800ae16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae1a:	2a39      	cmp	r2, #57	; 0x39
 800ae1c:	d071      	beq.n	800af02 <_dtoa_r+0xb9a>
 800ae1e:	3201      	adds	r2, #1
 800ae20:	701a      	strb	r2, [r3, #0]
 800ae22:	e746      	b.n	800acb2 <_dtoa_r+0x94a>
 800ae24:	2a00      	cmp	r2, #0
 800ae26:	dd07      	ble.n	800ae38 <_dtoa_r+0xad0>
 800ae28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae2c:	d0ed      	beq.n	800ae0a <_dtoa_r+0xaa2>
 800ae2e:	f10a 0301 	add.w	r3, sl, #1
 800ae32:	f88b 3000 	strb.w	r3, [fp]
 800ae36:	e73c      	b.n	800acb2 <_dtoa_r+0x94a>
 800ae38:	9b05      	ldr	r3, [sp, #20]
 800ae3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ae3e:	4599      	cmp	r9, r3
 800ae40:	d047      	beq.n	800aed2 <_dtoa_r+0xb6a>
 800ae42:	ee18 1a10 	vmov	r1, s16
 800ae46:	2300      	movs	r3, #0
 800ae48:	220a      	movs	r2, #10
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f000 fdc2 	bl	800b9d4 <__multadd>
 800ae50:	45b8      	cmp	r8, r7
 800ae52:	ee08 0a10 	vmov	s16, r0
 800ae56:	f04f 0300 	mov.w	r3, #0
 800ae5a:	f04f 020a 	mov.w	r2, #10
 800ae5e:	4641      	mov	r1, r8
 800ae60:	4620      	mov	r0, r4
 800ae62:	d106      	bne.n	800ae72 <_dtoa_r+0xb0a>
 800ae64:	f000 fdb6 	bl	800b9d4 <__multadd>
 800ae68:	4680      	mov	r8, r0
 800ae6a:	4607      	mov	r7, r0
 800ae6c:	f109 0901 	add.w	r9, r9, #1
 800ae70:	e772      	b.n	800ad58 <_dtoa_r+0x9f0>
 800ae72:	f000 fdaf 	bl	800b9d4 <__multadd>
 800ae76:	4639      	mov	r1, r7
 800ae78:	4680      	mov	r8, r0
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	220a      	movs	r2, #10
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f000 fda8 	bl	800b9d4 <__multadd>
 800ae84:	4607      	mov	r7, r0
 800ae86:	e7f1      	b.n	800ae6c <_dtoa_r+0xb04>
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	9302      	str	r3, [sp, #8]
 800ae8c:	9d01      	ldr	r5, [sp, #4]
 800ae8e:	ee18 0a10 	vmov	r0, s16
 800ae92:	4631      	mov	r1, r6
 800ae94:	f7ff f9dc 	bl	800a250 <quorem>
 800ae98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae9c:	9b01      	ldr	r3, [sp, #4]
 800ae9e:	f805 ab01 	strb.w	sl, [r5], #1
 800aea2:	1aea      	subs	r2, r5, r3
 800aea4:	9b02      	ldr	r3, [sp, #8]
 800aea6:	4293      	cmp	r3, r2
 800aea8:	dd09      	ble.n	800aebe <_dtoa_r+0xb56>
 800aeaa:	ee18 1a10 	vmov	r1, s16
 800aeae:	2300      	movs	r3, #0
 800aeb0:	220a      	movs	r2, #10
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f000 fd8e 	bl	800b9d4 <__multadd>
 800aeb8:	ee08 0a10 	vmov	s16, r0
 800aebc:	e7e7      	b.n	800ae8e <_dtoa_r+0xb26>
 800aebe:	9b02      	ldr	r3, [sp, #8]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	bfc8      	it	gt
 800aec4:	461d      	movgt	r5, r3
 800aec6:	9b01      	ldr	r3, [sp, #4]
 800aec8:	bfd8      	it	le
 800aeca:	2501      	movle	r5, #1
 800aecc:	441d      	add	r5, r3
 800aece:	f04f 0800 	mov.w	r8, #0
 800aed2:	ee18 1a10 	vmov	r1, s16
 800aed6:	2201      	movs	r2, #1
 800aed8:	4620      	mov	r0, r4
 800aeda:	f000 ff75 	bl	800bdc8 <__lshift>
 800aede:	4631      	mov	r1, r6
 800aee0:	ee08 0a10 	vmov	s16, r0
 800aee4:	f000 ffe0 	bl	800bea8 <__mcmp>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	dc91      	bgt.n	800ae10 <_dtoa_r+0xaa8>
 800aeec:	d102      	bne.n	800aef4 <_dtoa_r+0xb8c>
 800aeee:	f01a 0f01 	tst.w	sl, #1
 800aef2:	d18d      	bne.n	800ae10 <_dtoa_r+0xaa8>
 800aef4:	462b      	mov	r3, r5
 800aef6:	461d      	mov	r5, r3
 800aef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aefc:	2a30      	cmp	r2, #48	; 0x30
 800aefe:	d0fa      	beq.n	800aef6 <_dtoa_r+0xb8e>
 800af00:	e6d7      	b.n	800acb2 <_dtoa_r+0x94a>
 800af02:	9a01      	ldr	r2, [sp, #4]
 800af04:	429a      	cmp	r2, r3
 800af06:	d184      	bne.n	800ae12 <_dtoa_r+0xaaa>
 800af08:	9b00      	ldr	r3, [sp, #0]
 800af0a:	3301      	adds	r3, #1
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	2331      	movs	r3, #49	; 0x31
 800af10:	7013      	strb	r3, [r2, #0]
 800af12:	e6ce      	b.n	800acb2 <_dtoa_r+0x94a>
 800af14:	4b09      	ldr	r3, [pc, #36]	; (800af3c <_dtoa_r+0xbd4>)
 800af16:	f7ff ba95 	b.w	800a444 <_dtoa_r+0xdc>
 800af1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f47f aa6e 	bne.w	800a3fe <_dtoa_r+0x96>
 800af22:	4b07      	ldr	r3, [pc, #28]	; (800af40 <_dtoa_r+0xbd8>)
 800af24:	f7ff ba8e 	b.w	800a444 <_dtoa_r+0xdc>
 800af28:	9b02      	ldr	r3, [sp, #8]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	dcae      	bgt.n	800ae8c <_dtoa_r+0xb24>
 800af2e:	9b06      	ldr	r3, [sp, #24]
 800af30:	2b02      	cmp	r3, #2
 800af32:	f73f aea8 	bgt.w	800ac86 <_dtoa_r+0x91e>
 800af36:	e7a9      	b.n	800ae8c <_dtoa_r+0xb24>
 800af38:	0800ceac 	.word	0x0800ceac
 800af3c:	0800cc74 	.word	0x0800cc74
 800af40:	0800ce2d 	.word	0x0800ce2d

0800af44 <__sflush_r>:
 800af44:	898a      	ldrh	r2, [r1, #12]
 800af46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af4a:	4605      	mov	r5, r0
 800af4c:	0710      	lsls	r0, r2, #28
 800af4e:	460c      	mov	r4, r1
 800af50:	d458      	bmi.n	800b004 <__sflush_r+0xc0>
 800af52:	684b      	ldr	r3, [r1, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	dc05      	bgt.n	800af64 <__sflush_r+0x20>
 800af58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	dc02      	bgt.n	800af64 <__sflush_r+0x20>
 800af5e:	2000      	movs	r0, #0
 800af60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af66:	2e00      	cmp	r6, #0
 800af68:	d0f9      	beq.n	800af5e <__sflush_r+0x1a>
 800af6a:	2300      	movs	r3, #0
 800af6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af70:	682f      	ldr	r7, [r5, #0]
 800af72:	602b      	str	r3, [r5, #0]
 800af74:	d032      	beq.n	800afdc <__sflush_r+0x98>
 800af76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	075a      	lsls	r2, r3, #29
 800af7c:	d505      	bpl.n	800af8a <__sflush_r+0x46>
 800af7e:	6863      	ldr	r3, [r4, #4]
 800af80:	1ac0      	subs	r0, r0, r3
 800af82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af84:	b10b      	cbz	r3, 800af8a <__sflush_r+0x46>
 800af86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af88:	1ac0      	subs	r0, r0, r3
 800af8a:	2300      	movs	r3, #0
 800af8c:	4602      	mov	r2, r0
 800af8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af90:	6a21      	ldr	r1, [r4, #32]
 800af92:	4628      	mov	r0, r5
 800af94:	47b0      	blx	r6
 800af96:	1c43      	adds	r3, r0, #1
 800af98:	89a3      	ldrh	r3, [r4, #12]
 800af9a:	d106      	bne.n	800afaa <__sflush_r+0x66>
 800af9c:	6829      	ldr	r1, [r5, #0]
 800af9e:	291d      	cmp	r1, #29
 800afa0:	d82c      	bhi.n	800affc <__sflush_r+0xb8>
 800afa2:	4a2a      	ldr	r2, [pc, #168]	; (800b04c <__sflush_r+0x108>)
 800afa4:	40ca      	lsrs	r2, r1
 800afa6:	07d6      	lsls	r6, r2, #31
 800afa8:	d528      	bpl.n	800affc <__sflush_r+0xb8>
 800afaa:	2200      	movs	r2, #0
 800afac:	6062      	str	r2, [r4, #4]
 800afae:	04d9      	lsls	r1, r3, #19
 800afb0:	6922      	ldr	r2, [r4, #16]
 800afb2:	6022      	str	r2, [r4, #0]
 800afb4:	d504      	bpl.n	800afc0 <__sflush_r+0x7c>
 800afb6:	1c42      	adds	r2, r0, #1
 800afb8:	d101      	bne.n	800afbe <__sflush_r+0x7a>
 800afba:	682b      	ldr	r3, [r5, #0]
 800afbc:	b903      	cbnz	r3, 800afc0 <__sflush_r+0x7c>
 800afbe:	6560      	str	r0, [r4, #84]	; 0x54
 800afc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afc2:	602f      	str	r7, [r5, #0]
 800afc4:	2900      	cmp	r1, #0
 800afc6:	d0ca      	beq.n	800af5e <__sflush_r+0x1a>
 800afc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afcc:	4299      	cmp	r1, r3
 800afce:	d002      	beq.n	800afd6 <__sflush_r+0x92>
 800afd0:	4628      	mov	r0, r5
 800afd2:	f001 f975 	bl	800c2c0 <_free_r>
 800afd6:	2000      	movs	r0, #0
 800afd8:	6360      	str	r0, [r4, #52]	; 0x34
 800afda:	e7c1      	b.n	800af60 <__sflush_r+0x1c>
 800afdc:	6a21      	ldr	r1, [r4, #32]
 800afde:	2301      	movs	r3, #1
 800afe0:	4628      	mov	r0, r5
 800afe2:	47b0      	blx	r6
 800afe4:	1c41      	adds	r1, r0, #1
 800afe6:	d1c7      	bne.n	800af78 <__sflush_r+0x34>
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d0c4      	beq.n	800af78 <__sflush_r+0x34>
 800afee:	2b1d      	cmp	r3, #29
 800aff0:	d001      	beq.n	800aff6 <__sflush_r+0xb2>
 800aff2:	2b16      	cmp	r3, #22
 800aff4:	d101      	bne.n	800affa <__sflush_r+0xb6>
 800aff6:	602f      	str	r7, [r5, #0]
 800aff8:	e7b1      	b.n	800af5e <__sflush_r+0x1a>
 800affa:	89a3      	ldrh	r3, [r4, #12]
 800affc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b000:	81a3      	strh	r3, [r4, #12]
 800b002:	e7ad      	b.n	800af60 <__sflush_r+0x1c>
 800b004:	690f      	ldr	r7, [r1, #16]
 800b006:	2f00      	cmp	r7, #0
 800b008:	d0a9      	beq.n	800af5e <__sflush_r+0x1a>
 800b00a:	0793      	lsls	r3, r2, #30
 800b00c:	680e      	ldr	r6, [r1, #0]
 800b00e:	bf08      	it	eq
 800b010:	694b      	ldreq	r3, [r1, #20]
 800b012:	600f      	str	r7, [r1, #0]
 800b014:	bf18      	it	ne
 800b016:	2300      	movne	r3, #0
 800b018:	eba6 0807 	sub.w	r8, r6, r7
 800b01c:	608b      	str	r3, [r1, #8]
 800b01e:	f1b8 0f00 	cmp.w	r8, #0
 800b022:	dd9c      	ble.n	800af5e <__sflush_r+0x1a>
 800b024:	6a21      	ldr	r1, [r4, #32]
 800b026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b028:	4643      	mov	r3, r8
 800b02a:	463a      	mov	r2, r7
 800b02c:	4628      	mov	r0, r5
 800b02e:	47b0      	blx	r6
 800b030:	2800      	cmp	r0, #0
 800b032:	dc06      	bgt.n	800b042 <__sflush_r+0xfe>
 800b034:	89a3      	ldrh	r3, [r4, #12]
 800b036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b03a:	81a3      	strh	r3, [r4, #12]
 800b03c:	f04f 30ff 	mov.w	r0, #4294967295
 800b040:	e78e      	b.n	800af60 <__sflush_r+0x1c>
 800b042:	4407      	add	r7, r0
 800b044:	eba8 0800 	sub.w	r8, r8, r0
 800b048:	e7e9      	b.n	800b01e <__sflush_r+0xda>
 800b04a:	bf00      	nop
 800b04c:	20400001 	.word	0x20400001

0800b050 <_fflush_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	690b      	ldr	r3, [r1, #16]
 800b054:	4605      	mov	r5, r0
 800b056:	460c      	mov	r4, r1
 800b058:	b913      	cbnz	r3, 800b060 <_fflush_r+0x10>
 800b05a:	2500      	movs	r5, #0
 800b05c:	4628      	mov	r0, r5
 800b05e:	bd38      	pop	{r3, r4, r5, pc}
 800b060:	b118      	cbz	r0, 800b06a <_fflush_r+0x1a>
 800b062:	6983      	ldr	r3, [r0, #24]
 800b064:	b90b      	cbnz	r3, 800b06a <_fflush_r+0x1a>
 800b066:	f7fd f877 	bl	8008158 <__sinit>
 800b06a:	4b14      	ldr	r3, [pc, #80]	; (800b0bc <_fflush_r+0x6c>)
 800b06c:	429c      	cmp	r4, r3
 800b06e:	d11b      	bne.n	800b0a8 <_fflush_r+0x58>
 800b070:	686c      	ldr	r4, [r5, #4]
 800b072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d0ef      	beq.n	800b05a <_fflush_r+0xa>
 800b07a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b07c:	07d0      	lsls	r0, r2, #31
 800b07e:	d404      	bmi.n	800b08a <_fflush_r+0x3a>
 800b080:	0599      	lsls	r1, r3, #22
 800b082:	d402      	bmi.n	800b08a <_fflush_r+0x3a>
 800b084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b086:	f7fd f92a 	bl	80082de <__retarget_lock_acquire_recursive>
 800b08a:	4628      	mov	r0, r5
 800b08c:	4621      	mov	r1, r4
 800b08e:	f7ff ff59 	bl	800af44 <__sflush_r>
 800b092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b094:	07da      	lsls	r2, r3, #31
 800b096:	4605      	mov	r5, r0
 800b098:	d4e0      	bmi.n	800b05c <_fflush_r+0xc>
 800b09a:	89a3      	ldrh	r3, [r4, #12]
 800b09c:	059b      	lsls	r3, r3, #22
 800b09e:	d4dd      	bmi.n	800b05c <_fflush_r+0xc>
 800b0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0a2:	f7fd f91d 	bl	80082e0 <__retarget_lock_release_recursive>
 800b0a6:	e7d9      	b.n	800b05c <_fflush_r+0xc>
 800b0a8:	4b05      	ldr	r3, [pc, #20]	; (800b0c0 <_fflush_r+0x70>)
 800b0aa:	429c      	cmp	r4, r3
 800b0ac:	d101      	bne.n	800b0b2 <_fflush_r+0x62>
 800b0ae:	68ac      	ldr	r4, [r5, #8]
 800b0b0:	e7df      	b.n	800b072 <_fflush_r+0x22>
 800b0b2:	4b04      	ldr	r3, [pc, #16]	; (800b0c4 <_fflush_r+0x74>)
 800b0b4:	429c      	cmp	r4, r3
 800b0b6:	bf08      	it	eq
 800b0b8:	68ec      	ldreq	r4, [r5, #12]
 800b0ba:	e7da      	b.n	800b072 <_fflush_r+0x22>
 800b0bc:	0800cc20 	.word	0x0800cc20
 800b0c0:	0800cc40 	.word	0x0800cc40
 800b0c4:	0800cc00 	.word	0x0800cc00

0800b0c8 <fiprintf>:
 800b0c8:	b40e      	push	{r1, r2, r3}
 800b0ca:	b503      	push	{r0, r1, lr}
 800b0cc:	4601      	mov	r1, r0
 800b0ce:	ab03      	add	r3, sp, #12
 800b0d0:	4805      	ldr	r0, [pc, #20]	; (800b0e8 <fiprintf+0x20>)
 800b0d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0d6:	6800      	ldr	r0, [r0, #0]
 800b0d8:	9301      	str	r3, [sp, #4]
 800b0da:	f001 fac3 	bl	800c664 <_vfiprintf_r>
 800b0de:	b002      	add	sp, #8
 800b0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0e4:	b003      	add	sp, #12
 800b0e6:	4770      	bx	lr
 800b0e8:	20000010 	.word	0x20000010

0800b0ec <rshift>:
 800b0ec:	6903      	ldr	r3, [r0, #16]
 800b0ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b0f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b0fa:	f100 0414 	add.w	r4, r0, #20
 800b0fe:	dd45      	ble.n	800b18c <rshift+0xa0>
 800b100:	f011 011f 	ands.w	r1, r1, #31
 800b104:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b108:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b10c:	d10c      	bne.n	800b128 <rshift+0x3c>
 800b10e:	f100 0710 	add.w	r7, r0, #16
 800b112:	4629      	mov	r1, r5
 800b114:	42b1      	cmp	r1, r6
 800b116:	d334      	bcc.n	800b182 <rshift+0x96>
 800b118:	1a9b      	subs	r3, r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	1eea      	subs	r2, r5, #3
 800b11e:	4296      	cmp	r6, r2
 800b120:	bf38      	it	cc
 800b122:	2300      	movcc	r3, #0
 800b124:	4423      	add	r3, r4
 800b126:	e015      	b.n	800b154 <rshift+0x68>
 800b128:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b12c:	f1c1 0820 	rsb	r8, r1, #32
 800b130:	40cf      	lsrs	r7, r1
 800b132:	f105 0e04 	add.w	lr, r5, #4
 800b136:	46a1      	mov	r9, r4
 800b138:	4576      	cmp	r6, lr
 800b13a:	46f4      	mov	ip, lr
 800b13c:	d815      	bhi.n	800b16a <rshift+0x7e>
 800b13e:	1a9a      	subs	r2, r3, r2
 800b140:	0092      	lsls	r2, r2, #2
 800b142:	3a04      	subs	r2, #4
 800b144:	3501      	adds	r5, #1
 800b146:	42ae      	cmp	r6, r5
 800b148:	bf38      	it	cc
 800b14a:	2200      	movcc	r2, #0
 800b14c:	18a3      	adds	r3, r4, r2
 800b14e:	50a7      	str	r7, [r4, r2]
 800b150:	b107      	cbz	r7, 800b154 <rshift+0x68>
 800b152:	3304      	adds	r3, #4
 800b154:	1b1a      	subs	r2, r3, r4
 800b156:	42a3      	cmp	r3, r4
 800b158:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b15c:	bf08      	it	eq
 800b15e:	2300      	moveq	r3, #0
 800b160:	6102      	str	r2, [r0, #16]
 800b162:	bf08      	it	eq
 800b164:	6143      	streq	r3, [r0, #20]
 800b166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b16a:	f8dc c000 	ldr.w	ip, [ip]
 800b16e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b172:	ea4c 0707 	orr.w	r7, ip, r7
 800b176:	f849 7b04 	str.w	r7, [r9], #4
 800b17a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b17e:	40cf      	lsrs	r7, r1
 800b180:	e7da      	b.n	800b138 <rshift+0x4c>
 800b182:	f851 cb04 	ldr.w	ip, [r1], #4
 800b186:	f847 cf04 	str.w	ip, [r7, #4]!
 800b18a:	e7c3      	b.n	800b114 <rshift+0x28>
 800b18c:	4623      	mov	r3, r4
 800b18e:	e7e1      	b.n	800b154 <rshift+0x68>

0800b190 <__hexdig_fun>:
 800b190:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b194:	2b09      	cmp	r3, #9
 800b196:	d802      	bhi.n	800b19e <__hexdig_fun+0xe>
 800b198:	3820      	subs	r0, #32
 800b19a:	b2c0      	uxtb	r0, r0
 800b19c:	4770      	bx	lr
 800b19e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b1a2:	2b05      	cmp	r3, #5
 800b1a4:	d801      	bhi.n	800b1aa <__hexdig_fun+0x1a>
 800b1a6:	3847      	subs	r0, #71	; 0x47
 800b1a8:	e7f7      	b.n	800b19a <__hexdig_fun+0xa>
 800b1aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b1ae:	2b05      	cmp	r3, #5
 800b1b0:	d801      	bhi.n	800b1b6 <__hexdig_fun+0x26>
 800b1b2:	3827      	subs	r0, #39	; 0x27
 800b1b4:	e7f1      	b.n	800b19a <__hexdig_fun+0xa>
 800b1b6:	2000      	movs	r0, #0
 800b1b8:	4770      	bx	lr
	...

0800b1bc <__gethex>:
 800b1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c0:	ed2d 8b02 	vpush	{d8}
 800b1c4:	b089      	sub	sp, #36	; 0x24
 800b1c6:	ee08 0a10 	vmov	s16, r0
 800b1ca:	9304      	str	r3, [sp, #16]
 800b1cc:	4bb4      	ldr	r3, [pc, #720]	; (800b4a0 <__gethex+0x2e4>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	468b      	mov	fp, r1
 800b1d6:	4690      	mov	r8, r2
 800b1d8:	f7f4 fffa 	bl	80001d0 <strlen>
 800b1dc:	9b01      	ldr	r3, [sp, #4]
 800b1de:	f8db 2000 	ldr.w	r2, [fp]
 800b1e2:	4403      	add	r3, r0
 800b1e4:	4682      	mov	sl, r0
 800b1e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b1ea:	9305      	str	r3, [sp, #20]
 800b1ec:	1c93      	adds	r3, r2, #2
 800b1ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b1f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b1f6:	32fe      	adds	r2, #254	; 0xfe
 800b1f8:	18d1      	adds	r1, r2, r3
 800b1fa:	461f      	mov	r7, r3
 800b1fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b200:	9100      	str	r1, [sp, #0]
 800b202:	2830      	cmp	r0, #48	; 0x30
 800b204:	d0f8      	beq.n	800b1f8 <__gethex+0x3c>
 800b206:	f7ff ffc3 	bl	800b190 <__hexdig_fun>
 800b20a:	4604      	mov	r4, r0
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d13a      	bne.n	800b286 <__gethex+0xca>
 800b210:	9901      	ldr	r1, [sp, #4]
 800b212:	4652      	mov	r2, sl
 800b214:	4638      	mov	r0, r7
 800b216:	f001 fb6f 	bl	800c8f8 <strncmp>
 800b21a:	4605      	mov	r5, r0
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d168      	bne.n	800b2f2 <__gethex+0x136>
 800b220:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b224:	eb07 060a 	add.w	r6, r7, sl
 800b228:	f7ff ffb2 	bl	800b190 <__hexdig_fun>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d062      	beq.n	800b2f6 <__gethex+0x13a>
 800b230:	4633      	mov	r3, r6
 800b232:	7818      	ldrb	r0, [r3, #0]
 800b234:	2830      	cmp	r0, #48	; 0x30
 800b236:	461f      	mov	r7, r3
 800b238:	f103 0301 	add.w	r3, r3, #1
 800b23c:	d0f9      	beq.n	800b232 <__gethex+0x76>
 800b23e:	f7ff ffa7 	bl	800b190 <__hexdig_fun>
 800b242:	2301      	movs	r3, #1
 800b244:	fab0 f480 	clz	r4, r0
 800b248:	0964      	lsrs	r4, r4, #5
 800b24a:	4635      	mov	r5, r6
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	463a      	mov	r2, r7
 800b250:	4616      	mov	r6, r2
 800b252:	3201      	adds	r2, #1
 800b254:	7830      	ldrb	r0, [r6, #0]
 800b256:	f7ff ff9b 	bl	800b190 <__hexdig_fun>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d1f8      	bne.n	800b250 <__gethex+0x94>
 800b25e:	9901      	ldr	r1, [sp, #4]
 800b260:	4652      	mov	r2, sl
 800b262:	4630      	mov	r0, r6
 800b264:	f001 fb48 	bl	800c8f8 <strncmp>
 800b268:	b980      	cbnz	r0, 800b28c <__gethex+0xd0>
 800b26a:	b94d      	cbnz	r5, 800b280 <__gethex+0xc4>
 800b26c:	eb06 050a 	add.w	r5, r6, sl
 800b270:	462a      	mov	r2, r5
 800b272:	4616      	mov	r6, r2
 800b274:	3201      	adds	r2, #1
 800b276:	7830      	ldrb	r0, [r6, #0]
 800b278:	f7ff ff8a 	bl	800b190 <__hexdig_fun>
 800b27c:	2800      	cmp	r0, #0
 800b27e:	d1f8      	bne.n	800b272 <__gethex+0xb6>
 800b280:	1bad      	subs	r5, r5, r6
 800b282:	00ad      	lsls	r5, r5, #2
 800b284:	e004      	b.n	800b290 <__gethex+0xd4>
 800b286:	2400      	movs	r4, #0
 800b288:	4625      	mov	r5, r4
 800b28a:	e7e0      	b.n	800b24e <__gethex+0x92>
 800b28c:	2d00      	cmp	r5, #0
 800b28e:	d1f7      	bne.n	800b280 <__gethex+0xc4>
 800b290:	7833      	ldrb	r3, [r6, #0]
 800b292:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b296:	2b50      	cmp	r3, #80	; 0x50
 800b298:	d13b      	bne.n	800b312 <__gethex+0x156>
 800b29a:	7873      	ldrb	r3, [r6, #1]
 800b29c:	2b2b      	cmp	r3, #43	; 0x2b
 800b29e:	d02c      	beq.n	800b2fa <__gethex+0x13e>
 800b2a0:	2b2d      	cmp	r3, #45	; 0x2d
 800b2a2:	d02e      	beq.n	800b302 <__gethex+0x146>
 800b2a4:	1c71      	adds	r1, r6, #1
 800b2a6:	f04f 0900 	mov.w	r9, #0
 800b2aa:	7808      	ldrb	r0, [r1, #0]
 800b2ac:	f7ff ff70 	bl	800b190 <__hexdig_fun>
 800b2b0:	1e43      	subs	r3, r0, #1
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	2b18      	cmp	r3, #24
 800b2b6:	d82c      	bhi.n	800b312 <__gethex+0x156>
 800b2b8:	f1a0 0210 	sub.w	r2, r0, #16
 800b2bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b2c0:	f7ff ff66 	bl	800b190 <__hexdig_fun>
 800b2c4:	1e43      	subs	r3, r0, #1
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	2b18      	cmp	r3, #24
 800b2ca:	d91d      	bls.n	800b308 <__gethex+0x14c>
 800b2cc:	f1b9 0f00 	cmp.w	r9, #0
 800b2d0:	d000      	beq.n	800b2d4 <__gethex+0x118>
 800b2d2:	4252      	negs	r2, r2
 800b2d4:	4415      	add	r5, r2
 800b2d6:	f8cb 1000 	str.w	r1, [fp]
 800b2da:	b1e4      	cbz	r4, 800b316 <__gethex+0x15a>
 800b2dc:	9b00      	ldr	r3, [sp, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	bf14      	ite	ne
 800b2e2:	2700      	movne	r7, #0
 800b2e4:	2706      	moveq	r7, #6
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	b009      	add	sp, #36	; 0x24
 800b2ea:	ecbd 8b02 	vpop	{d8}
 800b2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f2:	463e      	mov	r6, r7
 800b2f4:	4625      	mov	r5, r4
 800b2f6:	2401      	movs	r4, #1
 800b2f8:	e7ca      	b.n	800b290 <__gethex+0xd4>
 800b2fa:	f04f 0900 	mov.w	r9, #0
 800b2fe:	1cb1      	adds	r1, r6, #2
 800b300:	e7d3      	b.n	800b2aa <__gethex+0xee>
 800b302:	f04f 0901 	mov.w	r9, #1
 800b306:	e7fa      	b.n	800b2fe <__gethex+0x142>
 800b308:	230a      	movs	r3, #10
 800b30a:	fb03 0202 	mla	r2, r3, r2, r0
 800b30e:	3a10      	subs	r2, #16
 800b310:	e7d4      	b.n	800b2bc <__gethex+0x100>
 800b312:	4631      	mov	r1, r6
 800b314:	e7df      	b.n	800b2d6 <__gethex+0x11a>
 800b316:	1bf3      	subs	r3, r6, r7
 800b318:	3b01      	subs	r3, #1
 800b31a:	4621      	mov	r1, r4
 800b31c:	2b07      	cmp	r3, #7
 800b31e:	dc0b      	bgt.n	800b338 <__gethex+0x17c>
 800b320:	ee18 0a10 	vmov	r0, s16
 800b324:	f000 faf4 	bl	800b910 <_Balloc>
 800b328:	4604      	mov	r4, r0
 800b32a:	b940      	cbnz	r0, 800b33e <__gethex+0x182>
 800b32c:	4b5d      	ldr	r3, [pc, #372]	; (800b4a4 <__gethex+0x2e8>)
 800b32e:	4602      	mov	r2, r0
 800b330:	21de      	movs	r1, #222	; 0xde
 800b332:	485d      	ldr	r0, [pc, #372]	; (800b4a8 <__gethex+0x2ec>)
 800b334:	f7fe ff5e 	bl	800a1f4 <__assert_func>
 800b338:	3101      	adds	r1, #1
 800b33a:	105b      	asrs	r3, r3, #1
 800b33c:	e7ee      	b.n	800b31c <__gethex+0x160>
 800b33e:	f100 0914 	add.w	r9, r0, #20
 800b342:	f04f 0b00 	mov.w	fp, #0
 800b346:	f1ca 0301 	rsb	r3, sl, #1
 800b34a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b34e:	f8cd b000 	str.w	fp, [sp]
 800b352:	9306      	str	r3, [sp, #24]
 800b354:	42b7      	cmp	r7, r6
 800b356:	d340      	bcc.n	800b3da <__gethex+0x21e>
 800b358:	9802      	ldr	r0, [sp, #8]
 800b35a:	9b00      	ldr	r3, [sp, #0]
 800b35c:	f840 3b04 	str.w	r3, [r0], #4
 800b360:	eba0 0009 	sub.w	r0, r0, r9
 800b364:	1080      	asrs	r0, r0, #2
 800b366:	0146      	lsls	r6, r0, #5
 800b368:	6120      	str	r0, [r4, #16]
 800b36a:	4618      	mov	r0, r3
 800b36c:	f000 fbc2 	bl	800baf4 <__hi0bits>
 800b370:	1a30      	subs	r0, r6, r0
 800b372:	f8d8 6000 	ldr.w	r6, [r8]
 800b376:	42b0      	cmp	r0, r6
 800b378:	dd63      	ble.n	800b442 <__gethex+0x286>
 800b37a:	1b87      	subs	r7, r0, r6
 800b37c:	4639      	mov	r1, r7
 800b37e:	4620      	mov	r0, r4
 800b380:	f000 ff66 	bl	800c250 <__any_on>
 800b384:	4682      	mov	sl, r0
 800b386:	b1a8      	cbz	r0, 800b3b4 <__gethex+0x1f8>
 800b388:	1e7b      	subs	r3, r7, #1
 800b38a:	1159      	asrs	r1, r3, #5
 800b38c:	f003 021f 	and.w	r2, r3, #31
 800b390:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b394:	f04f 0a01 	mov.w	sl, #1
 800b398:	fa0a f202 	lsl.w	r2, sl, r2
 800b39c:	420a      	tst	r2, r1
 800b39e:	d009      	beq.n	800b3b4 <__gethex+0x1f8>
 800b3a0:	4553      	cmp	r3, sl
 800b3a2:	dd05      	ble.n	800b3b0 <__gethex+0x1f4>
 800b3a4:	1eb9      	subs	r1, r7, #2
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f000 ff52 	bl	800c250 <__any_on>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d145      	bne.n	800b43c <__gethex+0x280>
 800b3b0:	f04f 0a02 	mov.w	sl, #2
 800b3b4:	4639      	mov	r1, r7
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f7ff fe98 	bl	800b0ec <rshift>
 800b3bc:	443d      	add	r5, r7
 800b3be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3c2:	42ab      	cmp	r3, r5
 800b3c4:	da4c      	bge.n	800b460 <__gethex+0x2a4>
 800b3c6:	ee18 0a10 	vmov	r0, s16
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	f000 fae0 	bl	800b990 <_Bfree>
 800b3d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	6013      	str	r3, [r2, #0]
 800b3d6:	27a3      	movs	r7, #163	; 0xa3
 800b3d8:	e785      	b.n	800b2e6 <__gethex+0x12a>
 800b3da:	1e73      	subs	r3, r6, #1
 800b3dc:	9a05      	ldr	r2, [sp, #20]
 800b3de:	9303      	str	r3, [sp, #12]
 800b3e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d019      	beq.n	800b41c <__gethex+0x260>
 800b3e8:	f1bb 0f20 	cmp.w	fp, #32
 800b3ec:	d107      	bne.n	800b3fe <__gethex+0x242>
 800b3ee:	9b02      	ldr	r3, [sp, #8]
 800b3f0:	9a00      	ldr	r2, [sp, #0]
 800b3f2:	f843 2b04 	str.w	r2, [r3], #4
 800b3f6:	9302      	str	r3, [sp, #8]
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	469b      	mov	fp, r3
 800b3fe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b402:	f7ff fec5 	bl	800b190 <__hexdig_fun>
 800b406:	9b00      	ldr	r3, [sp, #0]
 800b408:	f000 000f 	and.w	r0, r0, #15
 800b40c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b410:	4303      	orrs	r3, r0
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	f10b 0b04 	add.w	fp, fp, #4
 800b418:	9b03      	ldr	r3, [sp, #12]
 800b41a:	e00d      	b.n	800b438 <__gethex+0x27c>
 800b41c:	9b03      	ldr	r3, [sp, #12]
 800b41e:	9a06      	ldr	r2, [sp, #24]
 800b420:	4413      	add	r3, r2
 800b422:	42bb      	cmp	r3, r7
 800b424:	d3e0      	bcc.n	800b3e8 <__gethex+0x22c>
 800b426:	4618      	mov	r0, r3
 800b428:	9901      	ldr	r1, [sp, #4]
 800b42a:	9307      	str	r3, [sp, #28]
 800b42c:	4652      	mov	r2, sl
 800b42e:	f001 fa63 	bl	800c8f8 <strncmp>
 800b432:	9b07      	ldr	r3, [sp, #28]
 800b434:	2800      	cmp	r0, #0
 800b436:	d1d7      	bne.n	800b3e8 <__gethex+0x22c>
 800b438:	461e      	mov	r6, r3
 800b43a:	e78b      	b.n	800b354 <__gethex+0x198>
 800b43c:	f04f 0a03 	mov.w	sl, #3
 800b440:	e7b8      	b.n	800b3b4 <__gethex+0x1f8>
 800b442:	da0a      	bge.n	800b45a <__gethex+0x29e>
 800b444:	1a37      	subs	r7, r6, r0
 800b446:	4621      	mov	r1, r4
 800b448:	ee18 0a10 	vmov	r0, s16
 800b44c:	463a      	mov	r2, r7
 800b44e:	f000 fcbb 	bl	800bdc8 <__lshift>
 800b452:	1bed      	subs	r5, r5, r7
 800b454:	4604      	mov	r4, r0
 800b456:	f100 0914 	add.w	r9, r0, #20
 800b45a:	f04f 0a00 	mov.w	sl, #0
 800b45e:	e7ae      	b.n	800b3be <__gethex+0x202>
 800b460:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b464:	42a8      	cmp	r0, r5
 800b466:	dd72      	ble.n	800b54e <__gethex+0x392>
 800b468:	1b45      	subs	r5, r0, r5
 800b46a:	42ae      	cmp	r6, r5
 800b46c:	dc36      	bgt.n	800b4dc <__gethex+0x320>
 800b46e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b472:	2b02      	cmp	r3, #2
 800b474:	d02a      	beq.n	800b4cc <__gethex+0x310>
 800b476:	2b03      	cmp	r3, #3
 800b478:	d02c      	beq.n	800b4d4 <__gethex+0x318>
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d11c      	bne.n	800b4b8 <__gethex+0x2fc>
 800b47e:	42ae      	cmp	r6, r5
 800b480:	d11a      	bne.n	800b4b8 <__gethex+0x2fc>
 800b482:	2e01      	cmp	r6, #1
 800b484:	d112      	bne.n	800b4ac <__gethex+0x2f0>
 800b486:	9a04      	ldr	r2, [sp, #16]
 800b488:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b48c:	6013      	str	r3, [r2, #0]
 800b48e:	2301      	movs	r3, #1
 800b490:	6123      	str	r3, [r4, #16]
 800b492:	f8c9 3000 	str.w	r3, [r9]
 800b496:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b498:	2762      	movs	r7, #98	; 0x62
 800b49a:	601c      	str	r4, [r3, #0]
 800b49c:	e723      	b.n	800b2e6 <__gethex+0x12a>
 800b49e:	bf00      	nop
 800b4a0:	0800cf24 	.word	0x0800cf24
 800b4a4:	0800ceac 	.word	0x0800ceac
 800b4a8:	0800cebd 	.word	0x0800cebd
 800b4ac:	1e71      	subs	r1, r6, #1
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f000 fece 	bl	800c250 <__any_on>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d1e6      	bne.n	800b486 <__gethex+0x2ca>
 800b4b8:	ee18 0a10 	vmov	r0, s16
 800b4bc:	4621      	mov	r1, r4
 800b4be:	f000 fa67 	bl	800b990 <_Bfree>
 800b4c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	6013      	str	r3, [r2, #0]
 800b4c8:	2750      	movs	r7, #80	; 0x50
 800b4ca:	e70c      	b.n	800b2e6 <__gethex+0x12a>
 800b4cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1f2      	bne.n	800b4b8 <__gethex+0x2fc>
 800b4d2:	e7d8      	b.n	800b486 <__gethex+0x2ca>
 800b4d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1d5      	bne.n	800b486 <__gethex+0x2ca>
 800b4da:	e7ed      	b.n	800b4b8 <__gethex+0x2fc>
 800b4dc:	1e6f      	subs	r7, r5, #1
 800b4de:	f1ba 0f00 	cmp.w	sl, #0
 800b4e2:	d131      	bne.n	800b548 <__gethex+0x38c>
 800b4e4:	b127      	cbz	r7, 800b4f0 <__gethex+0x334>
 800b4e6:	4639      	mov	r1, r7
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f000 feb1 	bl	800c250 <__any_on>
 800b4ee:	4682      	mov	sl, r0
 800b4f0:	117b      	asrs	r3, r7, #5
 800b4f2:	2101      	movs	r1, #1
 800b4f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b4f8:	f007 071f 	and.w	r7, r7, #31
 800b4fc:	fa01 f707 	lsl.w	r7, r1, r7
 800b500:	421f      	tst	r7, r3
 800b502:	4629      	mov	r1, r5
 800b504:	4620      	mov	r0, r4
 800b506:	bf18      	it	ne
 800b508:	f04a 0a02 	orrne.w	sl, sl, #2
 800b50c:	1b76      	subs	r6, r6, r5
 800b50e:	f7ff fded 	bl	800b0ec <rshift>
 800b512:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b516:	2702      	movs	r7, #2
 800b518:	f1ba 0f00 	cmp.w	sl, #0
 800b51c:	d048      	beq.n	800b5b0 <__gethex+0x3f4>
 800b51e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b522:	2b02      	cmp	r3, #2
 800b524:	d015      	beq.n	800b552 <__gethex+0x396>
 800b526:	2b03      	cmp	r3, #3
 800b528:	d017      	beq.n	800b55a <__gethex+0x39e>
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d109      	bne.n	800b542 <__gethex+0x386>
 800b52e:	f01a 0f02 	tst.w	sl, #2
 800b532:	d006      	beq.n	800b542 <__gethex+0x386>
 800b534:	f8d9 0000 	ldr.w	r0, [r9]
 800b538:	ea4a 0a00 	orr.w	sl, sl, r0
 800b53c:	f01a 0f01 	tst.w	sl, #1
 800b540:	d10e      	bne.n	800b560 <__gethex+0x3a4>
 800b542:	f047 0710 	orr.w	r7, r7, #16
 800b546:	e033      	b.n	800b5b0 <__gethex+0x3f4>
 800b548:	f04f 0a01 	mov.w	sl, #1
 800b54c:	e7d0      	b.n	800b4f0 <__gethex+0x334>
 800b54e:	2701      	movs	r7, #1
 800b550:	e7e2      	b.n	800b518 <__gethex+0x35c>
 800b552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b554:	f1c3 0301 	rsb	r3, r3, #1
 800b558:	9315      	str	r3, [sp, #84]	; 0x54
 800b55a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d0f0      	beq.n	800b542 <__gethex+0x386>
 800b560:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b564:	f104 0314 	add.w	r3, r4, #20
 800b568:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b56c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b570:	f04f 0c00 	mov.w	ip, #0
 800b574:	4618      	mov	r0, r3
 800b576:	f853 2b04 	ldr.w	r2, [r3], #4
 800b57a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b57e:	d01c      	beq.n	800b5ba <__gethex+0x3fe>
 800b580:	3201      	adds	r2, #1
 800b582:	6002      	str	r2, [r0, #0]
 800b584:	2f02      	cmp	r7, #2
 800b586:	f104 0314 	add.w	r3, r4, #20
 800b58a:	d13f      	bne.n	800b60c <__gethex+0x450>
 800b58c:	f8d8 2000 	ldr.w	r2, [r8]
 800b590:	3a01      	subs	r2, #1
 800b592:	42b2      	cmp	r2, r6
 800b594:	d10a      	bne.n	800b5ac <__gethex+0x3f0>
 800b596:	1171      	asrs	r1, r6, #5
 800b598:	2201      	movs	r2, #1
 800b59a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b59e:	f006 061f 	and.w	r6, r6, #31
 800b5a2:	fa02 f606 	lsl.w	r6, r2, r6
 800b5a6:	421e      	tst	r6, r3
 800b5a8:	bf18      	it	ne
 800b5aa:	4617      	movne	r7, r2
 800b5ac:	f047 0720 	orr.w	r7, r7, #32
 800b5b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5b2:	601c      	str	r4, [r3, #0]
 800b5b4:	9b04      	ldr	r3, [sp, #16]
 800b5b6:	601d      	str	r5, [r3, #0]
 800b5b8:	e695      	b.n	800b2e6 <__gethex+0x12a>
 800b5ba:	4299      	cmp	r1, r3
 800b5bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b5c0:	d8d8      	bhi.n	800b574 <__gethex+0x3b8>
 800b5c2:	68a3      	ldr	r3, [r4, #8]
 800b5c4:	459b      	cmp	fp, r3
 800b5c6:	db19      	blt.n	800b5fc <__gethex+0x440>
 800b5c8:	6861      	ldr	r1, [r4, #4]
 800b5ca:	ee18 0a10 	vmov	r0, s16
 800b5ce:	3101      	adds	r1, #1
 800b5d0:	f000 f99e 	bl	800b910 <_Balloc>
 800b5d4:	4681      	mov	r9, r0
 800b5d6:	b918      	cbnz	r0, 800b5e0 <__gethex+0x424>
 800b5d8:	4b1a      	ldr	r3, [pc, #104]	; (800b644 <__gethex+0x488>)
 800b5da:	4602      	mov	r2, r0
 800b5dc:	2184      	movs	r1, #132	; 0x84
 800b5de:	e6a8      	b.n	800b332 <__gethex+0x176>
 800b5e0:	6922      	ldr	r2, [r4, #16]
 800b5e2:	3202      	adds	r2, #2
 800b5e4:	f104 010c 	add.w	r1, r4, #12
 800b5e8:	0092      	lsls	r2, r2, #2
 800b5ea:	300c      	adds	r0, #12
 800b5ec:	f7fc fe79 	bl	80082e2 <memcpy>
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	ee18 0a10 	vmov	r0, s16
 800b5f6:	f000 f9cb 	bl	800b990 <_Bfree>
 800b5fa:	464c      	mov	r4, r9
 800b5fc:	6923      	ldr	r3, [r4, #16]
 800b5fe:	1c5a      	adds	r2, r3, #1
 800b600:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b604:	6122      	str	r2, [r4, #16]
 800b606:	2201      	movs	r2, #1
 800b608:	615a      	str	r2, [r3, #20]
 800b60a:	e7bb      	b.n	800b584 <__gethex+0x3c8>
 800b60c:	6922      	ldr	r2, [r4, #16]
 800b60e:	455a      	cmp	r2, fp
 800b610:	dd0b      	ble.n	800b62a <__gethex+0x46e>
 800b612:	2101      	movs	r1, #1
 800b614:	4620      	mov	r0, r4
 800b616:	f7ff fd69 	bl	800b0ec <rshift>
 800b61a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b61e:	3501      	adds	r5, #1
 800b620:	42ab      	cmp	r3, r5
 800b622:	f6ff aed0 	blt.w	800b3c6 <__gethex+0x20a>
 800b626:	2701      	movs	r7, #1
 800b628:	e7c0      	b.n	800b5ac <__gethex+0x3f0>
 800b62a:	f016 061f 	ands.w	r6, r6, #31
 800b62e:	d0fa      	beq.n	800b626 <__gethex+0x46a>
 800b630:	4453      	add	r3, sl
 800b632:	f1c6 0620 	rsb	r6, r6, #32
 800b636:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b63a:	f000 fa5b 	bl	800baf4 <__hi0bits>
 800b63e:	42b0      	cmp	r0, r6
 800b640:	dbe7      	blt.n	800b612 <__gethex+0x456>
 800b642:	e7f0      	b.n	800b626 <__gethex+0x46a>
 800b644:	0800ceac 	.word	0x0800ceac

0800b648 <L_shift>:
 800b648:	f1c2 0208 	rsb	r2, r2, #8
 800b64c:	0092      	lsls	r2, r2, #2
 800b64e:	b570      	push	{r4, r5, r6, lr}
 800b650:	f1c2 0620 	rsb	r6, r2, #32
 800b654:	6843      	ldr	r3, [r0, #4]
 800b656:	6804      	ldr	r4, [r0, #0]
 800b658:	fa03 f506 	lsl.w	r5, r3, r6
 800b65c:	432c      	orrs	r4, r5
 800b65e:	40d3      	lsrs	r3, r2
 800b660:	6004      	str	r4, [r0, #0]
 800b662:	f840 3f04 	str.w	r3, [r0, #4]!
 800b666:	4288      	cmp	r0, r1
 800b668:	d3f4      	bcc.n	800b654 <L_shift+0xc>
 800b66a:	bd70      	pop	{r4, r5, r6, pc}

0800b66c <__match>:
 800b66c:	b530      	push	{r4, r5, lr}
 800b66e:	6803      	ldr	r3, [r0, #0]
 800b670:	3301      	adds	r3, #1
 800b672:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b676:	b914      	cbnz	r4, 800b67e <__match+0x12>
 800b678:	6003      	str	r3, [r0, #0]
 800b67a:	2001      	movs	r0, #1
 800b67c:	bd30      	pop	{r4, r5, pc}
 800b67e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b682:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b686:	2d19      	cmp	r5, #25
 800b688:	bf98      	it	ls
 800b68a:	3220      	addls	r2, #32
 800b68c:	42a2      	cmp	r2, r4
 800b68e:	d0f0      	beq.n	800b672 <__match+0x6>
 800b690:	2000      	movs	r0, #0
 800b692:	e7f3      	b.n	800b67c <__match+0x10>

0800b694 <__hexnan>:
 800b694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b698:	680b      	ldr	r3, [r1, #0]
 800b69a:	115e      	asrs	r6, r3, #5
 800b69c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b6a0:	f013 031f 	ands.w	r3, r3, #31
 800b6a4:	b087      	sub	sp, #28
 800b6a6:	bf18      	it	ne
 800b6a8:	3604      	addne	r6, #4
 800b6aa:	2500      	movs	r5, #0
 800b6ac:	1f37      	subs	r7, r6, #4
 800b6ae:	4690      	mov	r8, r2
 800b6b0:	6802      	ldr	r2, [r0, #0]
 800b6b2:	9301      	str	r3, [sp, #4]
 800b6b4:	4682      	mov	sl, r0
 800b6b6:	f846 5c04 	str.w	r5, [r6, #-4]
 800b6ba:	46b9      	mov	r9, r7
 800b6bc:	463c      	mov	r4, r7
 800b6be:	9502      	str	r5, [sp, #8]
 800b6c0:	46ab      	mov	fp, r5
 800b6c2:	7851      	ldrb	r1, [r2, #1]
 800b6c4:	1c53      	adds	r3, r2, #1
 800b6c6:	9303      	str	r3, [sp, #12]
 800b6c8:	b341      	cbz	r1, 800b71c <__hexnan+0x88>
 800b6ca:	4608      	mov	r0, r1
 800b6cc:	9205      	str	r2, [sp, #20]
 800b6ce:	9104      	str	r1, [sp, #16]
 800b6d0:	f7ff fd5e 	bl	800b190 <__hexdig_fun>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d14f      	bne.n	800b778 <__hexnan+0xe4>
 800b6d8:	9904      	ldr	r1, [sp, #16]
 800b6da:	9a05      	ldr	r2, [sp, #20]
 800b6dc:	2920      	cmp	r1, #32
 800b6de:	d818      	bhi.n	800b712 <__hexnan+0x7e>
 800b6e0:	9b02      	ldr	r3, [sp, #8]
 800b6e2:	459b      	cmp	fp, r3
 800b6e4:	dd13      	ble.n	800b70e <__hexnan+0x7a>
 800b6e6:	454c      	cmp	r4, r9
 800b6e8:	d206      	bcs.n	800b6f8 <__hexnan+0x64>
 800b6ea:	2d07      	cmp	r5, #7
 800b6ec:	dc04      	bgt.n	800b6f8 <__hexnan+0x64>
 800b6ee:	462a      	mov	r2, r5
 800b6f0:	4649      	mov	r1, r9
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f7ff ffa8 	bl	800b648 <L_shift>
 800b6f8:	4544      	cmp	r4, r8
 800b6fa:	d950      	bls.n	800b79e <__hexnan+0x10a>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f1a4 0904 	sub.w	r9, r4, #4
 800b702:	f844 3c04 	str.w	r3, [r4, #-4]
 800b706:	f8cd b008 	str.w	fp, [sp, #8]
 800b70a:	464c      	mov	r4, r9
 800b70c:	461d      	mov	r5, r3
 800b70e:	9a03      	ldr	r2, [sp, #12]
 800b710:	e7d7      	b.n	800b6c2 <__hexnan+0x2e>
 800b712:	2929      	cmp	r1, #41	; 0x29
 800b714:	d156      	bne.n	800b7c4 <__hexnan+0x130>
 800b716:	3202      	adds	r2, #2
 800b718:	f8ca 2000 	str.w	r2, [sl]
 800b71c:	f1bb 0f00 	cmp.w	fp, #0
 800b720:	d050      	beq.n	800b7c4 <__hexnan+0x130>
 800b722:	454c      	cmp	r4, r9
 800b724:	d206      	bcs.n	800b734 <__hexnan+0xa0>
 800b726:	2d07      	cmp	r5, #7
 800b728:	dc04      	bgt.n	800b734 <__hexnan+0xa0>
 800b72a:	462a      	mov	r2, r5
 800b72c:	4649      	mov	r1, r9
 800b72e:	4620      	mov	r0, r4
 800b730:	f7ff ff8a 	bl	800b648 <L_shift>
 800b734:	4544      	cmp	r4, r8
 800b736:	d934      	bls.n	800b7a2 <__hexnan+0x10e>
 800b738:	f1a8 0204 	sub.w	r2, r8, #4
 800b73c:	4623      	mov	r3, r4
 800b73e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b742:	f842 1f04 	str.w	r1, [r2, #4]!
 800b746:	429f      	cmp	r7, r3
 800b748:	d2f9      	bcs.n	800b73e <__hexnan+0xaa>
 800b74a:	1b3b      	subs	r3, r7, r4
 800b74c:	f023 0303 	bic.w	r3, r3, #3
 800b750:	3304      	adds	r3, #4
 800b752:	3401      	adds	r4, #1
 800b754:	3e03      	subs	r6, #3
 800b756:	42b4      	cmp	r4, r6
 800b758:	bf88      	it	hi
 800b75a:	2304      	movhi	r3, #4
 800b75c:	4443      	add	r3, r8
 800b75e:	2200      	movs	r2, #0
 800b760:	f843 2b04 	str.w	r2, [r3], #4
 800b764:	429f      	cmp	r7, r3
 800b766:	d2fb      	bcs.n	800b760 <__hexnan+0xcc>
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	b91b      	cbnz	r3, 800b774 <__hexnan+0xe0>
 800b76c:	4547      	cmp	r7, r8
 800b76e:	d127      	bne.n	800b7c0 <__hexnan+0x12c>
 800b770:	2301      	movs	r3, #1
 800b772:	603b      	str	r3, [r7, #0]
 800b774:	2005      	movs	r0, #5
 800b776:	e026      	b.n	800b7c6 <__hexnan+0x132>
 800b778:	3501      	adds	r5, #1
 800b77a:	2d08      	cmp	r5, #8
 800b77c:	f10b 0b01 	add.w	fp, fp, #1
 800b780:	dd06      	ble.n	800b790 <__hexnan+0xfc>
 800b782:	4544      	cmp	r4, r8
 800b784:	d9c3      	bls.n	800b70e <__hexnan+0x7a>
 800b786:	2300      	movs	r3, #0
 800b788:	f844 3c04 	str.w	r3, [r4, #-4]
 800b78c:	2501      	movs	r5, #1
 800b78e:	3c04      	subs	r4, #4
 800b790:	6822      	ldr	r2, [r4, #0]
 800b792:	f000 000f 	and.w	r0, r0, #15
 800b796:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b79a:	6022      	str	r2, [r4, #0]
 800b79c:	e7b7      	b.n	800b70e <__hexnan+0x7a>
 800b79e:	2508      	movs	r5, #8
 800b7a0:	e7b5      	b.n	800b70e <__hexnan+0x7a>
 800b7a2:	9b01      	ldr	r3, [sp, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d0df      	beq.n	800b768 <__hexnan+0xd4>
 800b7a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ac:	f1c3 0320 	rsb	r3, r3, #32
 800b7b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b7b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b7b8:	401a      	ands	r2, r3
 800b7ba:	f846 2c04 	str.w	r2, [r6, #-4]
 800b7be:	e7d3      	b.n	800b768 <__hexnan+0xd4>
 800b7c0:	3f04      	subs	r7, #4
 800b7c2:	e7d1      	b.n	800b768 <__hexnan+0xd4>
 800b7c4:	2004      	movs	r0, #4
 800b7c6:	b007      	add	sp, #28
 800b7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7cc <_localeconv_r>:
 800b7cc:	4800      	ldr	r0, [pc, #0]	; (800b7d0 <_localeconv_r+0x4>)
 800b7ce:	4770      	bx	lr
 800b7d0:	20000168 	.word	0x20000168

0800b7d4 <_lseek_r>:
 800b7d4:	b538      	push	{r3, r4, r5, lr}
 800b7d6:	4d07      	ldr	r5, [pc, #28]	; (800b7f4 <_lseek_r+0x20>)
 800b7d8:	4604      	mov	r4, r0
 800b7da:	4608      	mov	r0, r1
 800b7dc:	4611      	mov	r1, r2
 800b7de:	2200      	movs	r2, #0
 800b7e0:	602a      	str	r2, [r5, #0]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	f7f5 ffea 	bl	80017bc <_lseek>
 800b7e8:	1c43      	adds	r3, r0, #1
 800b7ea:	d102      	bne.n	800b7f2 <_lseek_r+0x1e>
 800b7ec:	682b      	ldr	r3, [r5, #0]
 800b7ee:	b103      	cbz	r3, 800b7f2 <_lseek_r+0x1e>
 800b7f0:	6023      	str	r3, [r4, #0]
 800b7f2:	bd38      	pop	{r3, r4, r5, pc}
 800b7f4:	20001a78 	.word	0x20001a78

0800b7f8 <__swhatbuf_r>:
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	460e      	mov	r6, r1
 800b7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b800:	2900      	cmp	r1, #0
 800b802:	b096      	sub	sp, #88	; 0x58
 800b804:	4614      	mov	r4, r2
 800b806:	461d      	mov	r5, r3
 800b808:	da08      	bge.n	800b81c <__swhatbuf_r+0x24>
 800b80a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b80e:	2200      	movs	r2, #0
 800b810:	602a      	str	r2, [r5, #0]
 800b812:	061a      	lsls	r2, r3, #24
 800b814:	d410      	bmi.n	800b838 <__swhatbuf_r+0x40>
 800b816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b81a:	e00e      	b.n	800b83a <__swhatbuf_r+0x42>
 800b81c:	466a      	mov	r2, sp
 800b81e:	f001 f893 	bl	800c948 <_fstat_r>
 800b822:	2800      	cmp	r0, #0
 800b824:	dbf1      	blt.n	800b80a <__swhatbuf_r+0x12>
 800b826:	9a01      	ldr	r2, [sp, #4]
 800b828:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b82c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b830:	425a      	negs	r2, r3
 800b832:	415a      	adcs	r2, r3
 800b834:	602a      	str	r2, [r5, #0]
 800b836:	e7ee      	b.n	800b816 <__swhatbuf_r+0x1e>
 800b838:	2340      	movs	r3, #64	; 0x40
 800b83a:	2000      	movs	r0, #0
 800b83c:	6023      	str	r3, [r4, #0]
 800b83e:	b016      	add	sp, #88	; 0x58
 800b840:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b844 <__smakebuf_r>:
 800b844:	898b      	ldrh	r3, [r1, #12]
 800b846:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b848:	079d      	lsls	r5, r3, #30
 800b84a:	4606      	mov	r6, r0
 800b84c:	460c      	mov	r4, r1
 800b84e:	d507      	bpl.n	800b860 <__smakebuf_r+0x1c>
 800b850:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	6123      	str	r3, [r4, #16]
 800b858:	2301      	movs	r3, #1
 800b85a:	6163      	str	r3, [r4, #20]
 800b85c:	b002      	add	sp, #8
 800b85e:	bd70      	pop	{r4, r5, r6, pc}
 800b860:	ab01      	add	r3, sp, #4
 800b862:	466a      	mov	r2, sp
 800b864:	f7ff ffc8 	bl	800b7f8 <__swhatbuf_r>
 800b868:	9900      	ldr	r1, [sp, #0]
 800b86a:	4605      	mov	r5, r0
 800b86c:	4630      	mov	r0, r6
 800b86e:	f7fc fd6f 	bl	8008350 <_malloc_r>
 800b872:	b948      	cbnz	r0, 800b888 <__smakebuf_r+0x44>
 800b874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b878:	059a      	lsls	r2, r3, #22
 800b87a:	d4ef      	bmi.n	800b85c <__smakebuf_r+0x18>
 800b87c:	f023 0303 	bic.w	r3, r3, #3
 800b880:	f043 0302 	orr.w	r3, r3, #2
 800b884:	81a3      	strh	r3, [r4, #12]
 800b886:	e7e3      	b.n	800b850 <__smakebuf_r+0xc>
 800b888:	4b0d      	ldr	r3, [pc, #52]	; (800b8c0 <__smakebuf_r+0x7c>)
 800b88a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	6020      	str	r0, [r4, #0]
 800b890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b894:	81a3      	strh	r3, [r4, #12]
 800b896:	9b00      	ldr	r3, [sp, #0]
 800b898:	6163      	str	r3, [r4, #20]
 800b89a:	9b01      	ldr	r3, [sp, #4]
 800b89c:	6120      	str	r0, [r4, #16]
 800b89e:	b15b      	cbz	r3, 800b8b8 <__smakebuf_r+0x74>
 800b8a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	f001 f861 	bl	800c96c <_isatty_r>
 800b8aa:	b128      	cbz	r0, 800b8b8 <__smakebuf_r+0x74>
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	f023 0303 	bic.w	r3, r3, #3
 800b8b2:	f043 0301 	orr.w	r3, r3, #1
 800b8b6:	81a3      	strh	r3, [r4, #12]
 800b8b8:	89a0      	ldrh	r0, [r4, #12]
 800b8ba:	4305      	orrs	r5, r0
 800b8bc:	81a5      	strh	r5, [r4, #12]
 800b8be:	e7cd      	b.n	800b85c <__smakebuf_r+0x18>
 800b8c0:	080080f1 	.word	0x080080f1

0800b8c4 <malloc>:
 800b8c4:	4b02      	ldr	r3, [pc, #8]	; (800b8d0 <malloc+0xc>)
 800b8c6:	4601      	mov	r1, r0
 800b8c8:	6818      	ldr	r0, [r3, #0]
 800b8ca:	f7fc bd41 	b.w	8008350 <_malloc_r>
 800b8ce:	bf00      	nop
 800b8d0:	20000010 	.word	0x20000010

0800b8d4 <__ascii_mbtowc>:
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	b901      	cbnz	r1, 800b8da <__ascii_mbtowc+0x6>
 800b8d8:	a901      	add	r1, sp, #4
 800b8da:	b142      	cbz	r2, 800b8ee <__ascii_mbtowc+0x1a>
 800b8dc:	b14b      	cbz	r3, 800b8f2 <__ascii_mbtowc+0x1e>
 800b8de:	7813      	ldrb	r3, [r2, #0]
 800b8e0:	600b      	str	r3, [r1, #0]
 800b8e2:	7812      	ldrb	r2, [r2, #0]
 800b8e4:	1e10      	subs	r0, r2, #0
 800b8e6:	bf18      	it	ne
 800b8e8:	2001      	movne	r0, #1
 800b8ea:	b002      	add	sp, #8
 800b8ec:	4770      	bx	lr
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	e7fb      	b.n	800b8ea <__ascii_mbtowc+0x16>
 800b8f2:	f06f 0001 	mvn.w	r0, #1
 800b8f6:	e7f8      	b.n	800b8ea <__ascii_mbtowc+0x16>

0800b8f8 <__malloc_lock>:
 800b8f8:	4801      	ldr	r0, [pc, #4]	; (800b900 <__malloc_lock+0x8>)
 800b8fa:	f7fc bcf0 	b.w	80082de <__retarget_lock_acquire_recursive>
 800b8fe:	bf00      	nop
 800b900:	20001a6c 	.word	0x20001a6c

0800b904 <__malloc_unlock>:
 800b904:	4801      	ldr	r0, [pc, #4]	; (800b90c <__malloc_unlock+0x8>)
 800b906:	f7fc bceb 	b.w	80082e0 <__retarget_lock_release_recursive>
 800b90a:	bf00      	nop
 800b90c:	20001a6c 	.word	0x20001a6c

0800b910 <_Balloc>:
 800b910:	b570      	push	{r4, r5, r6, lr}
 800b912:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b914:	4604      	mov	r4, r0
 800b916:	460d      	mov	r5, r1
 800b918:	b976      	cbnz	r6, 800b938 <_Balloc+0x28>
 800b91a:	2010      	movs	r0, #16
 800b91c:	f7ff ffd2 	bl	800b8c4 <malloc>
 800b920:	4602      	mov	r2, r0
 800b922:	6260      	str	r0, [r4, #36]	; 0x24
 800b924:	b920      	cbnz	r0, 800b930 <_Balloc+0x20>
 800b926:	4b18      	ldr	r3, [pc, #96]	; (800b988 <_Balloc+0x78>)
 800b928:	4818      	ldr	r0, [pc, #96]	; (800b98c <_Balloc+0x7c>)
 800b92a:	2166      	movs	r1, #102	; 0x66
 800b92c:	f7fe fc62 	bl	800a1f4 <__assert_func>
 800b930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b934:	6006      	str	r6, [r0, #0]
 800b936:	60c6      	str	r6, [r0, #12]
 800b938:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b93a:	68f3      	ldr	r3, [r6, #12]
 800b93c:	b183      	cbz	r3, 800b960 <_Balloc+0x50>
 800b93e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b946:	b9b8      	cbnz	r0, 800b978 <_Balloc+0x68>
 800b948:	2101      	movs	r1, #1
 800b94a:	fa01 f605 	lsl.w	r6, r1, r5
 800b94e:	1d72      	adds	r2, r6, #5
 800b950:	0092      	lsls	r2, r2, #2
 800b952:	4620      	mov	r0, r4
 800b954:	f000 fc9d 	bl	800c292 <_calloc_r>
 800b958:	b160      	cbz	r0, 800b974 <_Balloc+0x64>
 800b95a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b95e:	e00e      	b.n	800b97e <_Balloc+0x6e>
 800b960:	2221      	movs	r2, #33	; 0x21
 800b962:	2104      	movs	r1, #4
 800b964:	4620      	mov	r0, r4
 800b966:	f000 fc94 	bl	800c292 <_calloc_r>
 800b96a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b96c:	60f0      	str	r0, [r6, #12]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1e4      	bne.n	800b93e <_Balloc+0x2e>
 800b974:	2000      	movs	r0, #0
 800b976:	bd70      	pop	{r4, r5, r6, pc}
 800b978:	6802      	ldr	r2, [r0, #0]
 800b97a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b97e:	2300      	movs	r3, #0
 800b980:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b984:	e7f7      	b.n	800b976 <_Balloc+0x66>
 800b986:	bf00      	nop
 800b988:	0800ce3a 	.word	0x0800ce3a
 800b98c:	0800cf38 	.word	0x0800cf38

0800b990 <_Bfree>:
 800b990:	b570      	push	{r4, r5, r6, lr}
 800b992:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b994:	4605      	mov	r5, r0
 800b996:	460c      	mov	r4, r1
 800b998:	b976      	cbnz	r6, 800b9b8 <_Bfree+0x28>
 800b99a:	2010      	movs	r0, #16
 800b99c:	f7ff ff92 	bl	800b8c4 <malloc>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	6268      	str	r0, [r5, #36]	; 0x24
 800b9a4:	b920      	cbnz	r0, 800b9b0 <_Bfree+0x20>
 800b9a6:	4b09      	ldr	r3, [pc, #36]	; (800b9cc <_Bfree+0x3c>)
 800b9a8:	4809      	ldr	r0, [pc, #36]	; (800b9d0 <_Bfree+0x40>)
 800b9aa:	218a      	movs	r1, #138	; 0x8a
 800b9ac:	f7fe fc22 	bl	800a1f4 <__assert_func>
 800b9b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9b4:	6006      	str	r6, [r0, #0]
 800b9b6:	60c6      	str	r6, [r0, #12]
 800b9b8:	b13c      	cbz	r4, 800b9ca <_Bfree+0x3a>
 800b9ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b9bc:	6862      	ldr	r2, [r4, #4]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9c4:	6021      	str	r1, [r4, #0]
 800b9c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9ca:	bd70      	pop	{r4, r5, r6, pc}
 800b9cc:	0800ce3a 	.word	0x0800ce3a
 800b9d0:	0800cf38 	.word	0x0800cf38

0800b9d4 <__multadd>:
 800b9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d8:	690d      	ldr	r5, [r1, #16]
 800b9da:	4607      	mov	r7, r0
 800b9dc:	460c      	mov	r4, r1
 800b9de:	461e      	mov	r6, r3
 800b9e0:	f101 0c14 	add.w	ip, r1, #20
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	f8dc 3000 	ldr.w	r3, [ip]
 800b9ea:	b299      	uxth	r1, r3
 800b9ec:	fb02 6101 	mla	r1, r2, r1, r6
 800b9f0:	0c1e      	lsrs	r6, r3, #16
 800b9f2:	0c0b      	lsrs	r3, r1, #16
 800b9f4:	fb02 3306 	mla	r3, r2, r6, r3
 800b9f8:	b289      	uxth	r1, r1
 800b9fa:	3001      	adds	r0, #1
 800b9fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba00:	4285      	cmp	r5, r0
 800ba02:	f84c 1b04 	str.w	r1, [ip], #4
 800ba06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba0a:	dcec      	bgt.n	800b9e6 <__multadd+0x12>
 800ba0c:	b30e      	cbz	r6, 800ba52 <__multadd+0x7e>
 800ba0e:	68a3      	ldr	r3, [r4, #8]
 800ba10:	42ab      	cmp	r3, r5
 800ba12:	dc19      	bgt.n	800ba48 <__multadd+0x74>
 800ba14:	6861      	ldr	r1, [r4, #4]
 800ba16:	4638      	mov	r0, r7
 800ba18:	3101      	adds	r1, #1
 800ba1a:	f7ff ff79 	bl	800b910 <_Balloc>
 800ba1e:	4680      	mov	r8, r0
 800ba20:	b928      	cbnz	r0, 800ba2e <__multadd+0x5a>
 800ba22:	4602      	mov	r2, r0
 800ba24:	4b0c      	ldr	r3, [pc, #48]	; (800ba58 <__multadd+0x84>)
 800ba26:	480d      	ldr	r0, [pc, #52]	; (800ba5c <__multadd+0x88>)
 800ba28:	21b5      	movs	r1, #181	; 0xb5
 800ba2a:	f7fe fbe3 	bl	800a1f4 <__assert_func>
 800ba2e:	6922      	ldr	r2, [r4, #16]
 800ba30:	3202      	adds	r2, #2
 800ba32:	f104 010c 	add.w	r1, r4, #12
 800ba36:	0092      	lsls	r2, r2, #2
 800ba38:	300c      	adds	r0, #12
 800ba3a:	f7fc fc52 	bl	80082e2 <memcpy>
 800ba3e:	4621      	mov	r1, r4
 800ba40:	4638      	mov	r0, r7
 800ba42:	f7ff ffa5 	bl	800b990 <_Bfree>
 800ba46:	4644      	mov	r4, r8
 800ba48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba4c:	3501      	adds	r5, #1
 800ba4e:	615e      	str	r6, [r3, #20]
 800ba50:	6125      	str	r5, [r4, #16]
 800ba52:	4620      	mov	r0, r4
 800ba54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba58:	0800ceac 	.word	0x0800ceac
 800ba5c:	0800cf38 	.word	0x0800cf38

0800ba60 <__s2b>:
 800ba60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba64:	460c      	mov	r4, r1
 800ba66:	4615      	mov	r5, r2
 800ba68:	461f      	mov	r7, r3
 800ba6a:	2209      	movs	r2, #9
 800ba6c:	3308      	adds	r3, #8
 800ba6e:	4606      	mov	r6, r0
 800ba70:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba74:	2100      	movs	r1, #0
 800ba76:	2201      	movs	r2, #1
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	db09      	blt.n	800ba90 <__s2b+0x30>
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	f7ff ff47 	bl	800b910 <_Balloc>
 800ba82:	b940      	cbnz	r0, 800ba96 <__s2b+0x36>
 800ba84:	4602      	mov	r2, r0
 800ba86:	4b19      	ldr	r3, [pc, #100]	; (800baec <__s2b+0x8c>)
 800ba88:	4819      	ldr	r0, [pc, #100]	; (800baf0 <__s2b+0x90>)
 800ba8a:	21ce      	movs	r1, #206	; 0xce
 800ba8c:	f7fe fbb2 	bl	800a1f4 <__assert_func>
 800ba90:	0052      	lsls	r2, r2, #1
 800ba92:	3101      	adds	r1, #1
 800ba94:	e7f0      	b.n	800ba78 <__s2b+0x18>
 800ba96:	9b08      	ldr	r3, [sp, #32]
 800ba98:	6143      	str	r3, [r0, #20]
 800ba9a:	2d09      	cmp	r5, #9
 800ba9c:	f04f 0301 	mov.w	r3, #1
 800baa0:	6103      	str	r3, [r0, #16]
 800baa2:	dd16      	ble.n	800bad2 <__s2b+0x72>
 800baa4:	f104 0909 	add.w	r9, r4, #9
 800baa8:	46c8      	mov	r8, r9
 800baaa:	442c      	add	r4, r5
 800baac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bab0:	4601      	mov	r1, r0
 800bab2:	3b30      	subs	r3, #48	; 0x30
 800bab4:	220a      	movs	r2, #10
 800bab6:	4630      	mov	r0, r6
 800bab8:	f7ff ff8c 	bl	800b9d4 <__multadd>
 800babc:	45a0      	cmp	r8, r4
 800babe:	d1f5      	bne.n	800baac <__s2b+0x4c>
 800bac0:	f1a5 0408 	sub.w	r4, r5, #8
 800bac4:	444c      	add	r4, r9
 800bac6:	1b2d      	subs	r5, r5, r4
 800bac8:	1963      	adds	r3, r4, r5
 800baca:	42bb      	cmp	r3, r7
 800bacc:	db04      	blt.n	800bad8 <__s2b+0x78>
 800bace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bad2:	340a      	adds	r4, #10
 800bad4:	2509      	movs	r5, #9
 800bad6:	e7f6      	b.n	800bac6 <__s2b+0x66>
 800bad8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800badc:	4601      	mov	r1, r0
 800bade:	3b30      	subs	r3, #48	; 0x30
 800bae0:	220a      	movs	r2, #10
 800bae2:	4630      	mov	r0, r6
 800bae4:	f7ff ff76 	bl	800b9d4 <__multadd>
 800bae8:	e7ee      	b.n	800bac8 <__s2b+0x68>
 800baea:	bf00      	nop
 800baec:	0800ceac 	.word	0x0800ceac
 800baf0:	0800cf38 	.word	0x0800cf38

0800baf4 <__hi0bits>:
 800baf4:	0c03      	lsrs	r3, r0, #16
 800baf6:	041b      	lsls	r3, r3, #16
 800baf8:	b9d3      	cbnz	r3, 800bb30 <__hi0bits+0x3c>
 800bafa:	0400      	lsls	r0, r0, #16
 800bafc:	2310      	movs	r3, #16
 800bafe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bb02:	bf04      	itt	eq
 800bb04:	0200      	lsleq	r0, r0, #8
 800bb06:	3308      	addeq	r3, #8
 800bb08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bb0c:	bf04      	itt	eq
 800bb0e:	0100      	lsleq	r0, r0, #4
 800bb10:	3304      	addeq	r3, #4
 800bb12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bb16:	bf04      	itt	eq
 800bb18:	0080      	lsleq	r0, r0, #2
 800bb1a:	3302      	addeq	r3, #2
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	db05      	blt.n	800bb2c <__hi0bits+0x38>
 800bb20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bb24:	f103 0301 	add.w	r3, r3, #1
 800bb28:	bf08      	it	eq
 800bb2a:	2320      	moveq	r3, #32
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	4770      	bx	lr
 800bb30:	2300      	movs	r3, #0
 800bb32:	e7e4      	b.n	800bafe <__hi0bits+0xa>

0800bb34 <__lo0bits>:
 800bb34:	6803      	ldr	r3, [r0, #0]
 800bb36:	f013 0207 	ands.w	r2, r3, #7
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	d00b      	beq.n	800bb56 <__lo0bits+0x22>
 800bb3e:	07da      	lsls	r2, r3, #31
 800bb40:	d423      	bmi.n	800bb8a <__lo0bits+0x56>
 800bb42:	0798      	lsls	r0, r3, #30
 800bb44:	bf49      	itett	mi
 800bb46:	085b      	lsrmi	r3, r3, #1
 800bb48:	089b      	lsrpl	r3, r3, #2
 800bb4a:	2001      	movmi	r0, #1
 800bb4c:	600b      	strmi	r3, [r1, #0]
 800bb4e:	bf5c      	itt	pl
 800bb50:	600b      	strpl	r3, [r1, #0]
 800bb52:	2002      	movpl	r0, #2
 800bb54:	4770      	bx	lr
 800bb56:	b298      	uxth	r0, r3
 800bb58:	b9a8      	cbnz	r0, 800bb86 <__lo0bits+0x52>
 800bb5a:	0c1b      	lsrs	r3, r3, #16
 800bb5c:	2010      	movs	r0, #16
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	b90a      	cbnz	r2, 800bb66 <__lo0bits+0x32>
 800bb62:	3008      	adds	r0, #8
 800bb64:	0a1b      	lsrs	r3, r3, #8
 800bb66:	071a      	lsls	r2, r3, #28
 800bb68:	bf04      	itt	eq
 800bb6a:	091b      	lsreq	r3, r3, #4
 800bb6c:	3004      	addeq	r0, #4
 800bb6e:	079a      	lsls	r2, r3, #30
 800bb70:	bf04      	itt	eq
 800bb72:	089b      	lsreq	r3, r3, #2
 800bb74:	3002      	addeq	r0, #2
 800bb76:	07da      	lsls	r2, r3, #31
 800bb78:	d403      	bmi.n	800bb82 <__lo0bits+0x4e>
 800bb7a:	085b      	lsrs	r3, r3, #1
 800bb7c:	f100 0001 	add.w	r0, r0, #1
 800bb80:	d005      	beq.n	800bb8e <__lo0bits+0x5a>
 800bb82:	600b      	str	r3, [r1, #0]
 800bb84:	4770      	bx	lr
 800bb86:	4610      	mov	r0, r2
 800bb88:	e7e9      	b.n	800bb5e <__lo0bits+0x2a>
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	4770      	bx	lr
 800bb8e:	2020      	movs	r0, #32
 800bb90:	4770      	bx	lr
	...

0800bb94 <__i2b>:
 800bb94:	b510      	push	{r4, lr}
 800bb96:	460c      	mov	r4, r1
 800bb98:	2101      	movs	r1, #1
 800bb9a:	f7ff feb9 	bl	800b910 <_Balloc>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	b928      	cbnz	r0, 800bbae <__i2b+0x1a>
 800bba2:	4b05      	ldr	r3, [pc, #20]	; (800bbb8 <__i2b+0x24>)
 800bba4:	4805      	ldr	r0, [pc, #20]	; (800bbbc <__i2b+0x28>)
 800bba6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bbaa:	f7fe fb23 	bl	800a1f4 <__assert_func>
 800bbae:	2301      	movs	r3, #1
 800bbb0:	6144      	str	r4, [r0, #20]
 800bbb2:	6103      	str	r3, [r0, #16]
 800bbb4:	bd10      	pop	{r4, pc}
 800bbb6:	bf00      	nop
 800bbb8:	0800ceac 	.word	0x0800ceac
 800bbbc:	0800cf38 	.word	0x0800cf38

0800bbc0 <__multiply>:
 800bbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc4:	4691      	mov	r9, r2
 800bbc6:	690a      	ldr	r2, [r1, #16]
 800bbc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	bfb8      	it	lt
 800bbd0:	460b      	movlt	r3, r1
 800bbd2:	460c      	mov	r4, r1
 800bbd4:	bfbc      	itt	lt
 800bbd6:	464c      	movlt	r4, r9
 800bbd8:	4699      	movlt	r9, r3
 800bbda:	6927      	ldr	r7, [r4, #16]
 800bbdc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bbe0:	68a3      	ldr	r3, [r4, #8]
 800bbe2:	6861      	ldr	r1, [r4, #4]
 800bbe4:	eb07 060a 	add.w	r6, r7, sl
 800bbe8:	42b3      	cmp	r3, r6
 800bbea:	b085      	sub	sp, #20
 800bbec:	bfb8      	it	lt
 800bbee:	3101      	addlt	r1, #1
 800bbf0:	f7ff fe8e 	bl	800b910 <_Balloc>
 800bbf4:	b930      	cbnz	r0, 800bc04 <__multiply+0x44>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	4b44      	ldr	r3, [pc, #272]	; (800bd0c <__multiply+0x14c>)
 800bbfa:	4845      	ldr	r0, [pc, #276]	; (800bd10 <__multiply+0x150>)
 800bbfc:	f240 115d 	movw	r1, #349	; 0x15d
 800bc00:	f7fe faf8 	bl	800a1f4 <__assert_func>
 800bc04:	f100 0514 	add.w	r5, r0, #20
 800bc08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc0c:	462b      	mov	r3, r5
 800bc0e:	2200      	movs	r2, #0
 800bc10:	4543      	cmp	r3, r8
 800bc12:	d321      	bcc.n	800bc58 <__multiply+0x98>
 800bc14:	f104 0314 	add.w	r3, r4, #20
 800bc18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bc1c:	f109 0314 	add.w	r3, r9, #20
 800bc20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bc24:	9202      	str	r2, [sp, #8]
 800bc26:	1b3a      	subs	r2, r7, r4
 800bc28:	3a15      	subs	r2, #21
 800bc2a:	f022 0203 	bic.w	r2, r2, #3
 800bc2e:	3204      	adds	r2, #4
 800bc30:	f104 0115 	add.w	r1, r4, #21
 800bc34:	428f      	cmp	r7, r1
 800bc36:	bf38      	it	cc
 800bc38:	2204      	movcc	r2, #4
 800bc3a:	9201      	str	r2, [sp, #4]
 800bc3c:	9a02      	ldr	r2, [sp, #8]
 800bc3e:	9303      	str	r3, [sp, #12]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d80c      	bhi.n	800bc5e <__multiply+0x9e>
 800bc44:	2e00      	cmp	r6, #0
 800bc46:	dd03      	ble.n	800bc50 <__multiply+0x90>
 800bc48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d05a      	beq.n	800bd06 <__multiply+0x146>
 800bc50:	6106      	str	r6, [r0, #16]
 800bc52:	b005      	add	sp, #20
 800bc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc58:	f843 2b04 	str.w	r2, [r3], #4
 800bc5c:	e7d8      	b.n	800bc10 <__multiply+0x50>
 800bc5e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc62:	f1ba 0f00 	cmp.w	sl, #0
 800bc66:	d024      	beq.n	800bcb2 <__multiply+0xf2>
 800bc68:	f104 0e14 	add.w	lr, r4, #20
 800bc6c:	46a9      	mov	r9, r5
 800bc6e:	f04f 0c00 	mov.w	ip, #0
 800bc72:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc76:	f8d9 1000 	ldr.w	r1, [r9]
 800bc7a:	fa1f fb82 	uxth.w	fp, r2
 800bc7e:	b289      	uxth	r1, r1
 800bc80:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc88:	f8d9 2000 	ldr.w	r2, [r9]
 800bc8c:	4461      	add	r1, ip
 800bc8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc92:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc9a:	b289      	uxth	r1, r1
 800bc9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bca0:	4577      	cmp	r7, lr
 800bca2:	f849 1b04 	str.w	r1, [r9], #4
 800bca6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bcaa:	d8e2      	bhi.n	800bc72 <__multiply+0xb2>
 800bcac:	9a01      	ldr	r2, [sp, #4]
 800bcae:	f845 c002 	str.w	ip, [r5, r2]
 800bcb2:	9a03      	ldr	r2, [sp, #12]
 800bcb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bcb8:	3304      	adds	r3, #4
 800bcba:	f1b9 0f00 	cmp.w	r9, #0
 800bcbe:	d020      	beq.n	800bd02 <__multiply+0x142>
 800bcc0:	6829      	ldr	r1, [r5, #0]
 800bcc2:	f104 0c14 	add.w	ip, r4, #20
 800bcc6:	46ae      	mov	lr, r5
 800bcc8:	f04f 0a00 	mov.w	sl, #0
 800bccc:	f8bc b000 	ldrh.w	fp, [ip]
 800bcd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bcd4:	fb09 220b 	mla	r2, r9, fp, r2
 800bcd8:	4492      	add	sl, r2
 800bcda:	b289      	uxth	r1, r1
 800bcdc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bce0:	f84e 1b04 	str.w	r1, [lr], #4
 800bce4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bce8:	f8be 1000 	ldrh.w	r1, [lr]
 800bcec:	0c12      	lsrs	r2, r2, #16
 800bcee:	fb09 1102 	mla	r1, r9, r2, r1
 800bcf2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bcf6:	4567      	cmp	r7, ip
 800bcf8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bcfc:	d8e6      	bhi.n	800bccc <__multiply+0x10c>
 800bcfe:	9a01      	ldr	r2, [sp, #4]
 800bd00:	50a9      	str	r1, [r5, r2]
 800bd02:	3504      	adds	r5, #4
 800bd04:	e79a      	b.n	800bc3c <__multiply+0x7c>
 800bd06:	3e01      	subs	r6, #1
 800bd08:	e79c      	b.n	800bc44 <__multiply+0x84>
 800bd0a:	bf00      	nop
 800bd0c:	0800ceac 	.word	0x0800ceac
 800bd10:	0800cf38 	.word	0x0800cf38

0800bd14 <__pow5mult>:
 800bd14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd18:	4615      	mov	r5, r2
 800bd1a:	f012 0203 	ands.w	r2, r2, #3
 800bd1e:	4606      	mov	r6, r0
 800bd20:	460f      	mov	r7, r1
 800bd22:	d007      	beq.n	800bd34 <__pow5mult+0x20>
 800bd24:	4c25      	ldr	r4, [pc, #148]	; (800bdbc <__pow5mult+0xa8>)
 800bd26:	3a01      	subs	r2, #1
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd2e:	f7ff fe51 	bl	800b9d4 <__multadd>
 800bd32:	4607      	mov	r7, r0
 800bd34:	10ad      	asrs	r5, r5, #2
 800bd36:	d03d      	beq.n	800bdb4 <__pow5mult+0xa0>
 800bd38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd3a:	b97c      	cbnz	r4, 800bd5c <__pow5mult+0x48>
 800bd3c:	2010      	movs	r0, #16
 800bd3e:	f7ff fdc1 	bl	800b8c4 <malloc>
 800bd42:	4602      	mov	r2, r0
 800bd44:	6270      	str	r0, [r6, #36]	; 0x24
 800bd46:	b928      	cbnz	r0, 800bd54 <__pow5mult+0x40>
 800bd48:	4b1d      	ldr	r3, [pc, #116]	; (800bdc0 <__pow5mult+0xac>)
 800bd4a:	481e      	ldr	r0, [pc, #120]	; (800bdc4 <__pow5mult+0xb0>)
 800bd4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd50:	f7fe fa50 	bl	800a1f4 <__assert_func>
 800bd54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd58:	6004      	str	r4, [r0, #0]
 800bd5a:	60c4      	str	r4, [r0, #12]
 800bd5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd64:	b94c      	cbnz	r4, 800bd7a <__pow5mult+0x66>
 800bd66:	f240 2171 	movw	r1, #625	; 0x271
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f7ff ff12 	bl	800bb94 <__i2b>
 800bd70:	2300      	movs	r3, #0
 800bd72:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd76:	4604      	mov	r4, r0
 800bd78:	6003      	str	r3, [r0, #0]
 800bd7a:	f04f 0900 	mov.w	r9, #0
 800bd7e:	07eb      	lsls	r3, r5, #31
 800bd80:	d50a      	bpl.n	800bd98 <__pow5mult+0x84>
 800bd82:	4639      	mov	r1, r7
 800bd84:	4622      	mov	r2, r4
 800bd86:	4630      	mov	r0, r6
 800bd88:	f7ff ff1a 	bl	800bbc0 <__multiply>
 800bd8c:	4639      	mov	r1, r7
 800bd8e:	4680      	mov	r8, r0
 800bd90:	4630      	mov	r0, r6
 800bd92:	f7ff fdfd 	bl	800b990 <_Bfree>
 800bd96:	4647      	mov	r7, r8
 800bd98:	106d      	asrs	r5, r5, #1
 800bd9a:	d00b      	beq.n	800bdb4 <__pow5mult+0xa0>
 800bd9c:	6820      	ldr	r0, [r4, #0]
 800bd9e:	b938      	cbnz	r0, 800bdb0 <__pow5mult+0x9c>
 800bda0:	4622      	mov	r2, r4
 800bda2:	4621      	mov	r1, r4
 800bda4:	4630      	mov	r0, r6
 800bda6:	f7ff ff0b 	bl	800bbc0 <__multiply>
 800bdaa:	6020      	str	r0, [r4, #0]
 800bdac:	f8c0 9000 	str.w	r9, [r0]
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	e7e4      	b.n	800bd7e <__pow5mult+0x6a>
 800bdb4:	4638      	mov	r0, r7
 800bdb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdba:	bf00      	nop
 800bdbc:	0800d088 	.word	0x0800d088
 800bdc0:	0800ce3a 	.word	0x0800ce3a
 800bdc4:	0800cf38 	.word	0x0800cf38

0800bdc8 <__lshift>:
 800bdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdcc:	460c      	mov	r4, r1
 800bdce:	6849      	ldr	r1, [r1, #4]
 800bdd0:	6923      	ldr	r3, [r4, #16]
 800bdd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bdd6:	68a3      	ldr	r3, [r4, #8]
 800bdd8:	4607      	mov	r7, r0
 800bdda:	4691      	mov	r9, r2
 800bddc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bde0:	f108 0601 	add.w	r6, r8, #1
 800bde4:	42b3      	cmp	r3, r6
 800bde6:	db0b      	blt.n	800be00 <__lshift+0x38>
 800bde8:	4638      	mov	r0, r7
 800bdea:	f7ff fd91 	bl	800b910 <_Balloc>
 800bdee:	4605      	mov	r5, r0
 800bdf0:	b948      	cbnz	r0, 800be06 <__lshift+0x3e>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	4b2a      	ldr	r3, [pc, #168]	; (800bea0 <__lshift+0xd8>)
 800bdf6:	482b      	ldr	r0, [pc, #172]	; (800bea4 <__lshift+0xdc>)
 800bdf8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bdfc:	f7fe f9fa 	bl	800a1f4 <__assert_func>
 800be00:	3101      	adds	r1, #1
 800be02:	005b      	lsls	r3, r3, #1
 800be04:	e7ee      	b.n	800bde4 <__lshift+0x1c>
 800be06:	2300      	movs	r3, #0
 800be08:	f100 0114 	add.w	r1, r0, #20
 800be0c:	f100 0210 	add.w	r2, r0, #16
 800be10:	4618      	mov	r0, r3
 800be12:	4553      	cmp	r3, sl
 800be14:	db37      	blt.n	800be86 <__lshift+0xbe>
 800be16:	6920      	ldr	r0, [r4, #16]
 800be18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be1c:	f104 0314 	add.w	r3, r4, #20
 800be20:	f019 091f 	ands.w	r9, r9, #31
 800be24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800be2c:	d02f      	beq.n	800be8e <__lshift+0xc6>
 800be2e:	f1c9 0e20 	rsb	lr, r9, #32
 800be32:	468a      	mov	sl, r1
 800be34:	f04f 0c00 	mov.w	ip, #0
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	fa02 f209 	lsl.w	r2, r2, r9
 800be3e:	ea42 020c 	orr.w	r2, r2, ip
 800be42:	f84a 2b04 	str.w	r2, [sl], #4
 800be46:	f853 2b04 	ldr.w	r2, [r3], #4
 800be4a:	4298      	cmp	r0, r3
 800be4c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800be50:	d8f2      	bhi.n	800be38 <__lshift+0x70>
 800be52:	1b03      	subs	r3, r0, r4
 800be54:	3b15      	subs	r3, #21
 800be56:	f023 0303 	bic.w	r3, r3, #3
 800be5a:	3304      	adds	r3, #4
 800be5c:	f104 0215 	add.w	r2, r4, #21
 800be60:	4290      	cmp	r0, r2
 800be62:	bf38      	it	cc
 800be64:	2304      	movcc	r3, #4
 800be66:	f841 c003 	str.w	ip, [r1, r3]
 800be6a:	f1bc 0f00 	cmp.w	ip, #0
 800be6e:	d001      	beq.n	800be74 <__lshift+0xac>
 800be70:	f108 0602 	add.w	r6, r8, #2
 800be74:	3e01      	subs	r6, #1
 800be76:	4638      	mov	r0, r7
 800be78:	612e      	str	r6, [r5, #16]
 800be7a:	4621      	mov	r1, r4
 800be7c:	f7ff fd88 	bl	800b990 <_Bfree>
 800be80:	4628      	mov	r0, r5
 800be82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be86:	f842 0f04 	str.w	r0, [r2, #4]!
 800be8a:	3301      	adds	r3, #1
 800be8c:	e7c1      	b.n	800be12 <__lshift+0x4a>
 800be8e:	3904      	subs	r1, #4
 800be90:	f853 2b04 	ldr.w	r2, [r3], #4
 800be94:	f841 2f04 	str.w	r2, [r1, #4]!
 800be98:	4298      	cmp	r0, r3
 800be9a:	d8f9      	bhi.n	800be90 <__lshift+0xc8>
 800be9c:	e7ea      	b.n	800be74 <__lshift+0xac>
 800be9e:	bf00      	nop
 800bea0:	0800ceac 	.word	0x0800ceac
 800bea4:	0800cf38 	.word	0x0800cf38

0800bea8 <__mcmp>:
 800bea8:	b530      	push	{r4, r5, lr}
 800beaa:	6902      	ldr	r2, [r0, #16]
 800beac:	690c      	ldr	r4, [r1, #16]
 800beae:	1b12      	subs	r2, r2, r4
 800beb0:	d10e      	bne.n	800bed0 <__mcmp+0x28>
 800beb2:	f100 0314 	add.w	r3, r0, #20
 800beb6:	3114      	adds	r1, #20
 800beb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bebc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bec0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bec4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bec8:	42a5      	cmp	r5, r4
 800beca:	d003      	beq.n	800bed4 <__mcmp+0x2c>
 800becc:	d305      	bcc.n	800beda <__mcmp+0x32>
 800bece:	2201      	movs	r2, #1
 800bed0:	4610      	mov	r0, r2
 800bed2:	bd30      	pop	{r4, r5, pc}
 800bed4:	4283      	cmp	r3, r0
 800bed6:	d3f3      	bcc.n	800bec0 <__mcmp+0x18>
 800bed8:	e7fa      	b.n	800bed0 <__mcmp+0x28>
 800beda:	f04f 32ff 	mov.w	r2, #4294967295
 800bede:	e7f7      	b.n	800bed0 <__mcmp+0x28>

0800bee0 <__mdiff>:
 800bee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee4:	460c      	mov	r4, r1
 800bee6:	4606      	mov	r6, r0
 800bee8:	4611      	mov	r1, r2
 800beea:	4620      	mov	r0, r4
 800beec:	4690      	mov	r8, r2
 800beee:	f7ff ffdb 	bl	800bea8 <__mcmp>
 800bef2:	1e05      	subs	r5, r0, #0
 800bef4:	d110      	bne.n	800bf18 <__mdiff+0x38>
 800bef6:	4629      	mov	r1, r5
 800bef8:	4630      	mov	r0, r6
 800befa:	f7ff fd09 	bl	800b910 <_Balloc>
 800befe:	b930      	cbnz	r0, 800bf0e <__mdiff+0x2e>
 800bf00:	4b3a      	ldr	r3, [pc, #232]	; (800bfec <__mdiff+0x10c>)
 800bf02:	4602      	mov	r2, r0
 800bf04:	f240 2132 	movw	r1, #562	; 0x232
 800bf08:	4839      	ldr	r0, [pc, #228]	; (800bff0 <__mdiff+0x110>)
 800bf0a:	f7fe f973 	bl	800a1f4 <__assert_func>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf18:	bfa4      	itt	ge
 800bf1a:	4643      	movge	r3, r8
 800bf1c:	46a0      	movge	r8, r4
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf24:	bfa6      	itte	ge
 800bf26:	461c      	movge	r4, r3
 800bf28:	2500      	movge	r5, #0
 800bf2a:	2501      	movlt	r5, #1
 800bf2c:	f7ff fcf0 	bl	800b910 <_Balloc>
 800bf30:	b920      	cbnz	r0, 800bf3c <__mdiff+0x5c>
 800bf32:	4b2e      	ldr	r3, [pc, #184]	; (800bfec <__mdiff+0x10c>)
 800bf34:	4602      	mov	r2, r0
 800bf36:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf3a:	e7e5      	b.n	800bf08 <__mdiff+0x28>
 800bf3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf40:	6926      	ldr	r6, [r4, #16]
 800bf42:	60c5      	str	r5, [r0, #12]
 800bf44:	f104 0914 	add.w	r9, r4, #20
 800bf48:	f108 0514 	add.w	r5, r8, #20
 800bf4c:	f100 0e14 	add.w	lr, r0, #20
 800bf50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bf54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf58:	f108 0210 	add.w	r2, r8, #16
 800bf5c:	46f2      	mov	sl, lr
 800bf5e:	2100      	movs	r1, #0
 800bf60:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf68:	fa1f f883 	uxth.w	r8, r3
 800bf6c:	fa11 f18b 	uxtah	r1, r1, fp
 800bf70:	0c1b      	lsrs	r3, r3, #16
 800bf72:	eba1 0808 	sub.w	r8, r1, r8
 800bf76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf7e:	fa1f f888 	uxth.w	r8, r8
 800bf82:	1419      	asrs	r1, r3, #16
 800bf84:	454e      	cmp	r6, r9
 800bf86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf8a:	f84a 3b04 	str.w	r3, [sl], #4
 800bf8e:	d8e7      	bhi.n	800bf60 <__mdiff+0x80>
 800bf90:	1b33      	subs	r3, r6, r4
 800bf92:	3b15      	subs	r3, #21
 800bf94:	f023 0303 	bic.w	r3, r3, #3
 800bf98:	3304      	adds	r3, #4
 800bf9a:	3415      	adds	r4, #21
 800bf9c:	42a6      	cmp	r6, r4
 800bf9e:	bf38      	it	cc
 800bfa0:	2304      	movcc	r3, #4
 800bfa2:	441d      	add	r5, r3
 800bfa4:	4473      	add	r3, lr
 800bfa6:	469e      	mov	lr, r3
 800bfa8:	462e      	mov	r6, r5
 800bfaa:	4566      	cmp	r6, ip
 800bfac:	d30e      	bcc.n	800bfcc <__mdiff+0xec>
 800bfae:	f10c 0203 	add.w	r2, ip, #3
 800bfb2:	1b52      	subs	r2, r2, r5
 800bfb4:	f022 0203 	bic.w	r2, r2, #3
 800bfb8:	3d03      	subs	r5, #3
 800bfba:	45ac      	cmp	ip, r5
 800bfbc:	bf38      	it	cc
 800bfbe:	2200      	movcc	r2, #0
 800bfc0:	441a      	add	r2, r3
 800bfc2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bfc6:	b17b      	cbz	r3, 800bfe8 <__mdiff+0x108>
 800bfc8:	6107      	str	r7, [r0, #16]
 800bfca:	e7a3      	b.n	800bf14 <__mdiff+0x34>
 800bfcc:	f856 8b04 	ldr.w	r8, [r6], #4
 800bfd0:	fa11 f288 	uxtah	r2, r1, r8
 800bfd4:	1414      	asrs	r4, r2, #16
 800bfd6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bfda:	b292      	uxth	r2, r2
 800bfdc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bfe0:	f84e 2b04 	str.w	r2, [lr], #4
 800bfe4:	1421      	asrs	r1, r4, #16
 800bfe6:	e7e0      	b.n	800bfaa <__mdiff+0xca>
 800bfe8:	3f01      	subs	r7, #1
 800bfea:	e7ea      	b.n	800bfc2 <__mdiff+0xe2>
 800bfec:	0800ceac 	.word	0x0800ceac
 800bff0:	0800cf38 	.word	0x0800cf38

0800bff4 <__ulp>:
 800bff4:	b082      	sub	sp, #8
 800bff6:	ed8d 0b00 	vstr	d0, [sp]
 800bffa:	9b01      	ldr	r3, [sp, #4]
 800bffc:	4912      	ldr	r1, [pc, #72]	; (800c048 <__ulp+0x54>)
 800bffe:	4019      	ands	r1, r3
 800c000:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c004:	2900      	cmp	r1, #0
 800c006:	dd05      	ble.n	800c014 <__ulp+0x20>
 800c008:	2200      	movs	r2, #0
 800c00a:	460b      	mov	r3, r1
 800c00c:	ec43 2b10 	vmov	d0, r2, r3
 800c010:	b002      	add	sp, #8
 800c012:	4770      	bx	lr
 800c014:	4249      	negs	r1, r1
 800c016:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c01a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c01e:	f04f 0200 	mov.w	r2, #0
 800c022:	f04f 0300 	mov.w	r3, #0
 800c026:	da04      	bge.n	800c032 <__ulp+0x3e>
 800c028:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c02c:	fa41 f300 	asr.w	r3, r1, r0
 800c030:	e7ec      	b.n	800c00c <__ulp+0x18>
 800c032:	f1a0 0114 	sub.w	r1, r0, #20
 800c036:	291e      	cmp	r1, #30
 800c038:	bfda      	itte	le
 800c03a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c03e:	fa20 f101 	lsrle.w	r1, r0, r1
 800c042:	2101      	movgt	r1, #1
 800c044:	460a      	mov	r2, r1
 800c046:	e7e1      	b.n	800c00c <__ulp+0x18>
 800c048:	7ff00000 	.word	0x7ff00000

0800c04c <__b2d>:
 800c04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04e:	6905      	ldr	r5, [r0, #16]
 800c050:	f100 0714 	add.w	r7, r0, #20
 800c054:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c058:	1f2e      	subs	r6, r5, #4
 800c05a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c05e:	4620      	mov	r0, r4
 800c060:	f7ff fd48 	bl	800baf4 <__hi0bits>
 800c064:	f1c0 0320 	rsb	r3, r0, #32
 800c068:	280a      	cmp	r0, #10
 800c06a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c0e8 <__b2d+0x9c>
 800c06e:	600b      	str	r3, [r1, #0]
 800c070:	dc14      	bgt.n	800c09c <__b2d+0x50>
 800c072:	f1c0 0e0b 	rsb	lr, r0, #11
 800c076:	fa24 f10e 	lsr.w	r1, r4, lr
 800c07a:	42b7      	cmp	r7, r6
 800c07c:	ea41 030c 	orr.w	r3, r1, ip
 800c080:	bf34      	ite	cc
 800c082:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c086:	2100      	movcs	r1, #0
 800c088:	3015      	adds	r0, #21
 800c08a:	fa04 f000 	lsl.w	r0, r4, r0
 800c08e:	fa21 f10e 	lsr.w	r1, r1, lr
 800c092:	ea40 0201 	orr.w	r2, r0, r1
 800c096:	ec43 2b10 	vmov	d0, r2, r3
 800c09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c09c:	42b7      	cmp	r7, r6
 800c09e:	bf3a      	itte	cc
 800c0a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c0a4:	f1a5 0608 	subcc.w	r6, r5, #8
 800c0a8:	2100      	movcs	r1, #0
 800c0aa:	380b      	subs	r0, #11
 800c0ac:	d017      	beq.n	800c0de <__b2d+0x92>
 800c0ae:	f1c0 0c20 	rsb	ip, r0, #32
 800c0b2:	fa04 f500 	lsl.w	r5, r4, r0
 800c0b6:	42be      	cmp	r6, r7
 800c0b8:	fa21 f40c 	lsr.w	r4, r1, ip
 800c0bc:	ea45 0504 	orr.w	r5, r5, r4
 800c0c0:	bf8c      	ite	hi
 800c0c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c0c6:	2400      	movls	r4, #0
 800c0c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c0cc:	fa01 f000 	lsl.w	r0, r1, r0
 800c0d0:	fa24 f40c 	lsr.w	r4, r4, ip
 800c0d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c0d8:	ea40 0204 	orr.w	r2, r0, r4
 800c0dc:	e7db      	b.n	800c096 <__b2d+0x4a>
 800c0de:	ea44 030c 	orr.w	r3, r4, ip
 800c0e2:	460a      	mov	r2, r1
 800c0e4:	e7d7      	b.n	800c096 <__b2d+0x4a>
 800c0e6:	bf00      	nop
 800c0e8:	3ff00000 	.word	0x3ff00000

0800c0ec <__d2b>:
 800c0ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0f0:	4689      	mov	r9, r1
 800c0f2:	2101      	movs	r1, #1
 800c0f4:	ec57 6b10 	vmov	r6, r7, d0
 800c0f8:	4690      	mov	r8, r2
 800c0fa:	f7ff fc09 	bl	800b910 <_Balloc>
 800c0fe:	4604      	mov	r4, r0
 800c100:	b930      	cbnz	r0, 800c110 <__d2b+0x24>
 800c102:	4602      	mov	r2, r0
 800c104:	4b25      	ldr	r3, [pc, #148]	; (800c19c <__d2b+0xb0>)
 800c106:	4826      	ldr	r0, [pc, #152]	; (800c1a0 <__d2b+0xb4>)
 800c108:	f240 310a 	movw	r1, #778	; 0x30a
 800c10c:	f7fe f872 	bl	800a1f4 <__assert_func>
 800c110:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c114:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c118:	bb35      	cbnz	r5, 800c168 <__d2b+0x7c>
 800c11a:	2e00      	cmp	r6, #0
 800c11c:	9301      	str	r3, [sp, #4]
 800c11e:	d028      	beq.n	800c172 <__d2b+0x86>
 800c120:	4668      	mov	r0, sp
 800c122:	9600      	str	r6, [sp, #0]
 800c124:	f7ff fd06 	bl	800bb34 <__lo0bits>
 800c128:	9900      	ldr	r1, [sp, #0]
 800c12a:	b300      	cbz	r0, 800c16e <__d2b+0x82>
 800c12c:	9a01      	ldr	r2, [sp, #4]
 800c12e:	f1c0 0320 	rsb	r3, r0, #32
 800c132:	fa02 f303 	lsl.w	r3, r2, r3
 800c136:	430b      	orrs	r3, r1
 800c138:	40c2      	lsrs	r2, r0
 800c13a:	6163      	str	r3, [r4, #20]
 800c13c:	9201      	str	r2, [sp, #4]
 800c13e:	9b01      	ldr	r3, [sp, #4]
 800c140:	61a3      	str	r3, [r4, #24]
 800c142:	2b00      	cmp	r3, #0
 800c144:	bf14      	ite	ne
 800c146:	2202      	movne	r2, #2
 800c148:	2201      	moveq	r2, #1
 800c14a:	6122      	str	r2, [r4, #16]
 800c14c:	b1d5      	cbz	r5, 800c184 <__d2b+0x98>
 800c14e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c152:	4405      	add	r5, r0
 800c154:	f8c9 5000 	str.w	r5, [r9]
 800c158:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c15c:	f8c8 0000 	str.w	r0, [r8]
 800c160:	4620      	mov	r0, r4
 800c162:	b003      	add	sp, #12
 800c164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c16c:	e7d5      	b.n	800c11a <__d2b+0x2e>
 800c16e:	6161      	str	r1, [r4, #20]
 800c170:	e7e5      	b.n	800c13e <__d2b+0x52>
 800c172:	a801      	add	r0, sp, #4
 800c174:	f7ff fcde 	bl	800bb34 <__lo0bits>
 800c178:	9b01      	ldr	r3, [sp, #4]
 800c17a:	6163      	str	r3, [r4, #20]
 800c17c:	2201      	movs	r2, #1
 800c17e:	6122      	str	r2, [r4, #16]
 800c180:	3020      	adds	r0, #32
 800c182:	e7e3      	b.n	800c14c <__d2b+0x60>
 800c184:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c188:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c18c:	f8c9 0000 	str.w	r0, [r9]
 800c190:	6918      	ldr	r0, [r3, #16]
 800c192:	f7ff fcaf 	bl	800baf4 <__hi0bits>
 800c196:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c19a:	e7df      	b.n	800c15c <__d2b+0x70>
 800c19c:	0800ceac 	.word	0x0800ceac
 800c1a0:	0800cf38 	.word	0x0800cf38

0800c1a4 <__ratio>:
 800c1a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a8:	4688      	mov	r8, r1
 800c1aa:	4669      	mov	r1, sp
 800c1ac:	4681      	mov	r9, r0
 800c1ae:	f7ff ff4d 	bl	800c04c <__b2d>
 800c1b2:	a901      	add	r1, sp, #4
 800c1b4:	4640      	mov	r0, r8
 800c1b6:	ec55 4b10 	vmov	r4, r5, d0
 800c1ba:	f7ff ff47 	bl	800c04c <__b2d>
 800c1be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c1c6:	eba3 0c02 	sub.w	ip, r3, r2
 800c1ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c1ce:	1a9b      	subs	r3, r3, r2
 800c1d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c1d4:	ec51 0b10 	vmov	r0, r1, d0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	bfd6      	itet	le
 800c1dc:	460a      	movle	r2, r1
 800c1de:	462a      	movgt	r2, r5
 800c1e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c1e4:	468b      	mov	fp, r1
 800c1e6:	462f      	mov	r7, r5
 800c1e8:	bfd4      	ite	le
 800c1ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c1ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	ee10 2a10 	vmov	r2, s0
 800c1f8:	465b      	mov	r3, fp
 800c1fa:	4639      	mov	r1, r7
 800c1fc:	f7f4 fb26 	bl	800084c <__aeabi_ddiv>
 800c200:	ec41 0b10 	vmov	d0, r0, r1
 800c204:	b003      	add	sp, #12
 800c206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c20a <__copybits>:
 800c20a:	3901      	subs	r1, #1
 800c20c:	b570      	push	{r4, r5, r6, lr}
 800c20e:	1149      	asrs	r1, r1, #5
 800c210:	6914      	ldr	r4, [r2, #16]
 800c212:	3101      	adds	r1, #1
 800c214:	f102 0314 	add.w	r3, r2, #20
 800c218:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c21c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c220:	1f05      	subs	r5, r0, #4
 800c222:	42a3      	cmp	r3, r4
 800c224:	d30c      	bcc.n	800c240 <__copybits+0x36>
 800c226:	1aa3      	subs	r3, r4, r2
 800c228:	3b11      	subs	r3, #17
 800c22a:	f023 0303 	bic.w	r3, r3, #3
 800c22e:	3211      	adds	r2, #17
 800c230:	42a2      	cmp	r2, r4
 800c232:	bf88      	it	hi
 800c234:	2300      	movhi	r3, #0
 800c236:	4418      	add	r0, r3
 800c238:	2300      	movs	r3, #0
 800c23a:	4288      	cmp	r0, r1
 800c23c:	d305      	bcc.n	800c24a <__copybits+0x40>
 800c23e:	bd70      	pop	{r4, r5, r6, pc}
 800c240:	f853 6b04 	ldr.w	r6, [r3], #4
 800c244:	f845 6f04 	str.w	r6, [r5, #4]!
 800c248:	e7eb      	b.n	800c222 <__copybits+0x18>
 800c24a:	f840 3b04 	str.w	r3, [r0], #4
 800c24e:	e7f4      	b.n	800c23a <__copybits+0x30>

0800c250 <__any_on>:
 800c250:	f100 0214 	add.w	r2, r0, #20
 800c254:	6900      	ldr	r0, [r0, #16]
 800c256:	114b      	asrs	r3, r1, #5
 800c258:	4298      	cmp	r0, r3
 800c25a:	b510      	push	{r4, lr}
 800c25c:	db11      	blt.n	800c282 <__any_on+0x32>
 800c25e:	dd0a      	ble.n	800c276 <__any_on+0x26>
 800c260:	f011 011f 	ands.w	r1, r1, #31
 800c264:	d007      	beq.n	800c276 <__any_on+0x26>
 800c266:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c26a:	fa24 f001 	lsr.w	r0, r4, r1
 800c26e:	fa00 f101 	lsl.w	r1, r0, r1
 800c272:	428c      	cmp	r4, r1
 800c274:	d10b      	bne.n	800c28e <__any_on+0x3e>
 800c276:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d803      	bhi.n	800c286 <__any_on+0x36>
 800c27e:	2000      	movs	r0, #0
 800c280:	bd10      	pop	{r4, pc}
 800c282:	4603      	mov	r3, r0
 800c284:	e7f7      	b.n	800c276 <__any_on+0x26>
 800c286:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c28a:	2900      	cmp	r1, #0
 800c28c:	d0f5      	beq.n	800c27a <__any_on+0x2a>
 800c28e:	2001      	movs	r0, #1
 800c290:	e7f6      	b.n	800c280 <__any_on+0x30>

0800c292 <_calloc_r>:
 800c292:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c294:	fba1 2402 	umull	r2, r4, r1, r2
 800c298:	b94c      	cbnz	r4, 800c2ae <_calloc_r+0x1c>
 800c29a:	4611      	mov	r1, r2
 800c29c:	9201      	str	r2, [sp, #4]
 800c29e:	f7fc f857 	bl	8008350 <_malloc_r>
 800c2a2:	9a01      	ldr	r2, [sp, #4]
 800c2a4:	4605      	mov	r5, r0
 800c2a6:	b930      	cbnz	r0, 800c2b6 <_calloc_r+0x24>
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	b003      	add	sp, #12
 800c2ac:	bd30      	pop	{r4, r5, pc}
 800c2ae:	220c      	movs	r2, #12
 800c2b0:	6002      	str	r2, [r0, #0]
 800c2b2:	2500      	movs	r5, #0
 800c2b4:	e7f8      	b.n	800c2a8 <_calloc_r+0x16>
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	f7fc f821 	bl	80082fe <memset>
 800c2bc:	e7f4      	b.n	800c2a8 <_calloc_r+0x16>
	...

0800c2c0 <_free_r>:
 800c2c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2c2:	2900      	cmp	r1, #0
 800c2c4:	d044      	beq.n	800c350 <_free_r+0x90>
 800c2c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ca:	9001      	str	r0, [sp, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f1a1 0404 	sub.w	r4, r1, #4
 800c2d2:	bfb8      	it	lt
 800c2d4:	18e4      	addlt	r4, r4, r3
 800c2d6:	f7ff fb0f 	bl	800b8f8 <__malloc_lock>
 800c2da:	4a1e      	ldr	r2, [pc, #120]	; (800c354 <_free_r+0x94>)
 800c2dc:	9801      	ldr	r0, [sp, #4]
 800c2de:	6813      	ldr	r3, [r2, #0]
 800c2e0:	b933      	cbnz	r3, 800c2f0 <_free_r+0x30>
 800c2e2:	6063      	str	r3, [r4, #4]
 800c2e4:	6014      	str	r4, [r2, #0]
 800c2e6:	b003      	add	sp, #12
 800c2e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2ec:	f7ff bb0a 	b.w	800b904 <__malloc_unlock>
 800c2f0:	42a3      	cmp	r3, r4
 800c2f2:	d908      	bls.n	800c306 <_free_r+0x46>
 800c2f4:	6825      	ldr	r5, [r4, #0]
 800c2f6:	1961      	adds	r1, r4, r5
 800c2f8:	428b      	cmp	r3, r1
 800c2fa:	bf01      	itttt	eq
 800c2fc:	6819      	ldreq	r1, [r3, #0]
 800c2fe:	685b      	ldreq	r3, [r3, #4]
 800c300:	1949      	addeq	r1, r1, r5
 800c302:	6021      	streq	r1, [r4, #0]
 800c304:	e7ed      	b.n	800c2e2 <_free_r+0x22>
 800c306:	461a      	mov	r2, r3
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	b10b      	cbz	r3, 800c310 <_free_r+0x50>
 800c30c:	42a3      	cmp	r3, r4
 800c30e:	d9fa      	bls.n	800c306 <_free_r+0x46>
 800c310:	6811      	ldr	r1, [r2, #0]
 800c312:	1855      	adds	r5, r2, r1
 800c314:	42a5      	cmp	r5, r4
 800c316:	d10b      	bne.n	800c330 <_free_r+0x70>
 800c318:	6824      	ldr	r4, [r4, #0]
 800c31a:	4421      	add	r1, r4
 800c31c:	1854      	adds	r4, r2, r1
 800c31e:	42a3      	cmp	r3, r4
 800c320:	6011      	str	r1, [r2, #0]
 800c322:	d1e0      	bne.n	800c2e6 <_free_r+0x26>
 800c324:	681c      	ldr	r4, [r3, #0]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	6053      	str	r3, [r2, #4]
 800c32a:	4421      	add	r1, r4
 800c32c:	6011      	str	r1, [r2, #0]
 800c32e:	e7da      	b.n	800c2e6 <_free_r+0x26>
 800c330:	d902      	bls.n	800c338 <_free_r+0x78>
 800c332:	230c      	movs	r3, #12
 800c334:	6003      	str	r3, [r0, #0]
 800c336:	e7d6      	b.n	800c2e6 <_free_r+0x26>
 800c338:	6825      	ldr	r5, [r4, #0]
 800c33a:	1961      	adds	r1, r4, r5
 800c33c:	428b      	cmp	r3, r1
 800c33e:	bf04      	itt	eq
 800c340:	6819      	ldreq	r1, [r3, #0]
 800c342:	685b      	ldreq	r3, [r3, #4]
 800c344:	6063      	str	r3, [r4, #4]
 800c346:	bf04      	itt	eq
 800c348:	1949      	addeq	r1, r1, r5
 800c34a:	6021      	streq	r1, [r4, #0]
 800c34c:	6054      	str	r4, [r2, #4]
 800c34e:	e7ca      	b.n	800c2e6 <_free_r+0x26>
 800c350:	b003      	add	sp, #12
 800c352:	bd30      	pop	{r4, r5, pc}
 800c354:	20001a70 	.word	0x20001a70

0800c358 <__ssputs_r>:
 800c358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c35c:	688e      	ldr	r6, [r1, #8]
 800c35e:	429e      	cmp	r6, r3
 800c360:	4682      	mov	sl, r0
 800c362:	460c      	mov	r4, r1
 800c364:	4690      	mov	r8, r2
 800c366:	461f      	mov	r7, r3
 800c368:	d838      	bhi.n	800c3dc <__ssputs_r+0x84>
 800c36a:	898a      	ldrh	r2, [r1, #12]
 800c36c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c370:	d032      	beq.n	800c3d8 <__ssputs_r+0x80>
 800c372:	6825      	ldr	r5, [r4, #0]
 800c374:	6909      	ldr	r1, [r1, #16]
 800c376:	eba5 0901 	sub.w	r9, r5, r1
 800c37a:	6965      	ldr	r5, [r4, #20]
 800c37c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c380:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c384:	3301      	adds	r3, #1
 800c386:	444b      	add	r3, r9
 800c388:	106d      	asrs	r5, r5, #1
 800c38a:	429d      	cmp	r5, r3
 800c38c:	bf38      	it	cc
 800c38e:	461d      	movcc	r5, r3
 800c390:	0553      	lsls	r3, r2, #21
 800c392:	d531      	bpl.n	800c3f8 <__ssputs_r+0xa0>
 800c394:	4629      	mov	r1, r5
 800c396:	f7fb ffdb 	bl	8008350 <_malloc_r>
 800c39a:	4606      	mov	r6, r0
 800c39c:	b950      	cbnz	r0, 800c3b4 <__ssputs_r+0x5c>
 800c39e:	230c      	movs	r3, #12
 800c3a0:	f8ca 3000 	str.w	r3, [sl]
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3aa:	81a3      	strh	r3, [r4, #12]
 800c3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3b4:	6921      	ldr	r1, [r4, #16]
 800c3b6:	464a      	mov	r2, r9
 800c3b8:	f7fb ff93 	bl	80082e2 <memcpy>
 800c3bc:	89a3      	ldrh	r3, [r4, #12]
 800c3be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3c6:	81a3      	strh	r3, [r4, #12]
 800c3c8:	6126      	str	r6, [r4, #16]
 800c3ca:	6165      	str	r5, [r4, #20]
 800c3cc:	444e      	add	r6, r9
 800c3ce:	eba5 0509 	sub.w	r5, r5, r9
 800c3d2:	6026      	str	r6, [r4, #0]
 800c3d4:	60a5      	str	r5, [r4, #8]
 800c3d6:	463e      	mov	r6, r7
 800c3d8:	42be      	cmp	r6, r7
 800c3da:	d900      	bls.n	800c3de <__ssputs_r+0x86>
 800c3dc:	463e      	mov	r6, r7
 800c3de:	6820      	ldr	r0, [r4, #0]
 800c3e0:	4632      	mov	r2, r6
 800c3e2:	4641      	mov	r1, r8
 800c3e4:	f000 fad2 	bl	800c98c <memmove>
 800c3e8:	68a3      	ldr	r3, [r4, #8]
 800c3ea:	1b9b      	subs	r3, r3, r6
 800c3ec:	60a3      	str	r3, [r4, #8]
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	4433      	add	r3, r6
 800c3f2:	6023      	str	r3, [r4, #0]
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	e7db      	b.n	800c3b0 <__ssputs_r+0x58>
 800c3f8:	462a      	mov	r2, r5
 800c3fa:	f000 fae1 	bl	800c9c0 <_realloc_r>
 800c3fe:	4606      	mov	r6, r0
 800c400:	2800      	cmp	r0, #0
 800c402:	d1e1      	bne.n	800c3c8 <__ssputs_r+0x70>
 800c404:	6921      	ldr	r1, [r4, #16]
 800c406:	4650      	mov	r0, sl
 800c408:	f7ff ff5a 	bl	800c2c0 <_free_r>
 800c40c:	e7c7      	b.n	800c39e <__ssputs_r+0x46>
	...

0800c410 <_svfiprintf_r>:
 800c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	4698      	mov	r8, r3
 800c416:	898b      	ldrh	r3, [r1, #12]
 800c418:	061b      	lsls	r3, r3, #24
 800c41a:	b09d      	sub	sp, #116	; 0x74
 800c41c:	4607      	mov	r7, r0
 800c41e:	460d      	mov	r5, r1
 800c420:	4614      	mov	r4, r2
 800c422:	d50e      	bpl.n	800c442 <_svfiprintf_r+0x32>
 800c424:	690b      	ldr	r3, [r1, #16]
 800c426:	b963      	cbnz	r3, 800c442 <_svfiprintf_r+0x32>
 800c428:	2140      	movs	r1, #64	; 0x40
 800c42a:	f7fb ff91 	bl	8008350 <_malloc_r>
 800c42e:	6028      	str	r0, [r5, #0]
 800c430:	6128      	str	r0, [r5, #16]
 800c432:	b920      	cbnz	r0, 800c43e <_svfiprintf_r+0x2e>
 800c434:	230c      	movs	r3, #12
 800c436:	603b      	str	r3, [r7, #0]
 800c438:	f04f 30ff 	mov.w	r0, #4294967295
 800c43c:	e0d1      	b.n	800c5e2 <_svfiprintf_r+0x1d2>
 800c43e:	2340      	movs	r3, #64	; 0x40
 800c440:	616b      	str	r3, [r5, #20]
 800c442:	2300      	movs	r3, #0
 800c444:	9309      	str	r3, [sp, #36]	; 0x24
 800c446:	2320      	movs	r3, #32
 800c448:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c44c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c450:	2330      	movs	r3, #48	; 0x30
 800c452:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c5fc <_svfiprintf_r+0x1ec>
 800c456:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c45a:	f04f 0901 	mov.w	r9, #1
 800c45e:	4623      	mov	r3, r4
 800c460:	469a      	mov	sl, r3
 800c462:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c466:	b10a      	cbz	r2, 800c46c <_svfiprintf_r+0x5c>
 800c468:	2a25      	cmp	r2, #37	; 0x25
 800c46a:	d1f9      	bne.n	800c460 <_svfiprintf_r+0x50>
 800c46c:	ebba 0b04 	subs.w	fp, sl, r4
 800c470:	d00b      	beq.n	800c48a <_svfiprintf_r+0x7a>
 800c472:	465b      	mov	r3, fp
 800c474:	4622      	mov	r2, r4
 800c476:	4629      	mov	r1, r5
 800c478:	4638      	mov	r0, r7
 800c47a:	f7ff ff6d 	bl	800c358 <__ssputs_r>
 800c47e:	3001      	adds	r0, #1
 800c480:	f000 80aa 	beq.w	800c5d8 <_svfiprintf_r+0x1c8>
 800c484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c486:	445a      	add	r2, fp
 800c488:	9209      	str	r2, [sp, #36]	; 0x24
 800c48a:	f89a 3000 	ldrb.w	r3, [sl]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f000 80a2 	beq.w	800c5d8 <_svfiprintf_r+0x1c8>
 800c494:	2300      	movs	r3, #0
 800c496:	f04f 32ff 	mov.w	r2, #4294967295
 800c49a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c49e:	f10a 0a01 	add.w	sl, sl, #1
 800c4a2:	9304      	str	r3, [sp, #16]
 800c4a4:	9307      	str	r3, [sp, #28]
 800c4a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4aa:	931a      	str	r3, [sp, #104]	; 0x68
 800c4ac:	4654      	mov	r4, sl
 800c4ae:	2205      	movs	r2, #5
 800c4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b4:	4851      	ldr	r0, [pc, #324]	; (800c5fc <_svfiprintf_r+0x1ec>)
 800c4b6:	f7f3 fe93 	bl	80001e0 <memchr>
 800c4ba:	9a04      	ldr	r2, [sp, #16]
 800c4bc:	b9d8      	cbnz	r0, 800c4f6 <_svfiprintf_r+0xe6>
 800c4be:	06d0      	lsls	r0, r2, #27
 800c4c0:	bf44      	itt	mi
 800c4c2:	2320      	movmi	r3, #32
 800c4c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4c8:	0711      	lsls	r1, r2, #28
 800c4ca:	bf44      	itt	mi
 800c4cc:	232b      	movmi	r3, #43	; 0x2b
 800c4ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c4d8:	d015      	beq.n	800c506 <_svfiprintf_r+0xf6>
 800c4da:	9a07      	ldr	r2, [sp, #28]
 800c4dc:	4654      	mov	r4, sl
 800c4de:	2000      	movs	r0, #0
 800c4e0:	f04f 0c0a 	mov.w	ip, #10
 800c4e4:	4621      	mov	r1, r4
 800c4e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4ea:	3b30      	subs	r3, #48	; 0x30
 800c4ec:	2b09      	cmp	r3, #9
 800c4ee:	d94e      	bls.n	800c58e <_svfiprintf_r+0x17e>
 800c4f0:	b1b0      	cbz	r0, 800c520 <_svfiprintf_r+0x110>
 800c4f2:	9207      	str	r2, [sp, #28]
 800c4f4:	e014      	b.n	800c520 <_svfiprintf_r+0x110>
 800c4f6:	eba0 0308 	sub.w	r3, r0, r8
 800c4fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c4fe:	4313      	orrs	r3, r2
 800c500:	9304      	str	r3, [sp, #16]
 800c502:	46a2      	mov	sl, r4
 800c504:	e7d2      	b.n	800c4ac <_svfiprintf_r+0x9c>
 800c506:	9b03      	ldr	r3, [sp, #12]
 800c508:	1d19      	adds	r1, r3, #4
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	9103      	str	r1, [sp, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	bfbb      	ittet	lt
 800c512:	425b      	neglt	r3, r3
 800c514:	f042 0202 	orrlt.w	r2, r2, #2
 800c518:	9307      	strge	r3, [sp, #28]
 800c51a:	9307      	strlt	r3, [sp, #28]
 800c51c:	bfb8      	it	lt
 800c51e:	9204      	strlt	r2, [sp, #16]
 800c520:	7823      	ldrb	r3, [r4, #0]
 800c522:	2b2e      	cmp	r3, #46	; 0x2e
 800c524:	d10c      	bne.n	800c540 <_svfiprintf_r+0x130>
 800c526:	7863      	ldrb	r3, [r4, #1]
 800c528:	2b2a      	cmp	r3, #42	; 0x2a
 800c52a:	d135      	bne.n	800c598 <_svfiprintf_r+0x188>
 800c52c:	9b03      	ldr	r3, [sp, #12]
 800c52e:	1d1a      	adds	r2, r3, #4
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	9203      	str	r2, [sp, #12]
 800c534:	2b00      	cmp	r3, #0
 800c536:	bfb8      	it	lt
 800c538:	f04f 33ff 	movlt.w	r3, #4294967295
 800c53c:	3402      	adds	r4, #2
 800c53e:	9305      	str	r3, [sp, #20]
 800c540:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c60c <_svfiprintf_r+0x1fc>
 800c544:	7821      	ldrb	r1, [r4, #0]
 800c546:	2203      	movs	r2, #3
 800c548:	4650      	mov	r0, sl
 800c54a:	f7f3 fe49 	bl	80001e0 <memchr>
 800c54e:	b140      	cbz	r0, 800c562 <_svfiprintf_r+0x152>
 800c550:	2340      	movs	r3, #64	; 0x40
 800c552:	eba0 000a 	sub.w	r0, r0, sl
 800c556:	fa03 f000 	lsl.w	r0, r3, r0
 800c55a:	9b04      	ldr	r3, [sp, #16]
 800c55c:	4303      	orrs	r3, r0
 800c55e:	3401      	adds	r4, #1
 800c560:	9304      	str	r3, [sp, #16]
 800c562:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c566:	4826      	ldr	r0, [pc, #152]	; (800c600 <_svfiprintf_r+0x1f0>)
 800c568:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c56c:	2206      	movs	r2, #6
 800c56e:	f7f3 fe37 	bl	80001e0 <memchr>
 800c572:	2800      	cmp	r0, #0
 800c574:	d038      	beq.n	800c5e8 <_svfiprintf_r+0x1d8>
 800c576:	4b23      	ldr	r3, [pc, #140]	; (800c604 <_svfiprintf_r+0x1f4>)
 800c578:	bb1b      	cbnz	r3, 800c5c2 <_svfiprintf_r+0x1b2>
 800c57a:	9b03      	ldr	r3, [sp, #12]
 800c57c:	3307      	adds	r3, #7
 800c57e:	f023 0307 	bic.w	r3, r3, #7
 800c582:	3308      	adds	r3, #8
 800c584:	9303      	str	r3, [sp, #12]
 800c586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c588:	4433      	add	r3, r6
 800c58a:	9309      	str	r3, [sp, #36]	; 0x24
 800c58c:	e767      	b.n	800c45e <_svfiprintf_r+0x4e>
 800c58e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c592:	460c      	mov	r4, r1
 800c594:	2001      	movs	r0, #1
 800c596:	e7a5      	b.n	800c4e4 <_svfiprintf_r+0xd4>
 800c598:	2300      	movs	r3, #0
 800c59a:	3401      	adds	r4, #1
 800c59c:	9305      	str	r3, [sp, #20]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	f04f 0c0a 	mov.w	ip, #10
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5aa:	3a30      	subs	r2, #48	; 0x30
 800c5ac:	2a09      	cmp	r2, #9
 800c5ae:	d903      	bls.n	800c5b8 <_svfiprintf_r+0x1a8>
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d0c5      	beq.n	800c540 <_svfiprintf_r+0x130>
 800c5b4:	9105      	str	r1, [sp, #20]
 800c5b6:	e7c3      	b.n	800c540 <_svfiprintf_r+0x130>
 800c5b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5bc:	4604      	mov	r4, r0
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e7f0      	b.n	800c5a4 <_svfiprintf_r+0x194>
 800c5c2:	ab03      	add	r3, sp, #12
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	462a      	mov	r2, r5
 800c5c8:	4b0f      	ldr	r3, [pc, #60]	; (800c608 <_svfiprintf_r+0x1f8>)
 800c5ca:	a904      	add	r1, sp, #16
 800c5cc:	4638      	mov	r0, r7
 800c5ce:	f7fb ffd3 	bl	8008578 <_printf_float>
 800c5d2:	1c42      	adds	r2, r0, #1
 800c5d4:	4606      	mov	r6, r0
 800c5d6:	d1d6      	bne.n	800c586 <_svfiprintf_r+0x176>
 800c5d8:	89ab      	ldrh	r3, [r5, #12]
 800c5da:	065b      	lsls	r3, r3, #25
 800c5dc:	f53f af2c 	bmi.w	800c438 <_svfiprintf_r+0x28>
 800c5e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5e2:	b01d      	add	sp, #116	; 0x74
 800c5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e8:	ab03      	add	r3, sp, #12
 800c5ea:	9300      	str	r3, [sp, #0]
 800c5ec:	462a      	mov	r2, r5
 800c5ee:	4b06      	ldr	r3, [pc, #24]	; (800c608 <_svfiprintf_r+0x1f8>)
 800c5f0:	a904      	add	r1, sp, #16
 800c5f2:	4638      	mov	r0, r7
 800c5f4:	f7fc fa64 	bl	8008ac0 <_printf_i>
 800c5f8:	e7eb      	b.n	800c5d2 <_svfiprintf_r+0x1c2>
 800c5fa:	bf00      	nop
 800c5fc:	0800d094 	.word	0x0800d094
 800c600:	0800d09e 	.word	0x0800d09e
 800c604:	08008579 	.word	0x08008579
 800c608:	0800c359 	.word	0x0800c359
 800c60c:	0800d09a 	.word	0x0800d09a

0800c610 <__sfputc_r>:
 800c610:	6893      	ldr	r3, [r2, #8]
 800c612:	3b01      	subs	r3, #1
 800c614:	2b00      	cmp	r3, #0
 800c616:	b410      	push	{r4}
 800c618:	6093      	str	r3, [r2, #8]
 800c61a:	da08      	bge.n	800c62e <__sfputc_r+0x1e>
 800c61c:	6994      	ldr	r4, [r2, #24]
 800c61e:	42a3      	cmp	r3, r4
 800c620:	db01      	blt.n	800c626 <__sfputc_r+0x16>
 800c622:	290a      	cmp	r1, #10
 800c624:	d103      	bne.n	800c62e <__sfputc_r+0x1e>
 800c626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c62a:	f7fd bd11 	b.w	800a050 <__swbuf_r>
 800c62e:	6813      	ldr	r3, [r2, #0]
 800c630:	1c58      	adds	r0, r3, #1
 800c632:	6010      	str	r0, [r2, #0]
 800c634:	7019      	strb	r1, [r3, #0]
 800c636:	4608      	mov	r0, r1
 800c638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <__sfputs_r>:
 800c63e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c640:	4606      	mov	r6, r0
 800c642:	460f      	mov	r7, r1
 800c644:	4614      	mov	r4, r2
 800c646:	18d5      	adds	r5, r2, r3
 800c648:	42ac      	cmp	r4, r5
 800c64a:	d101      	bne.n	800c650 <__sfputs_r+0x12>
 800c64c:	2000      	movs	r0, #0
 800c64e:	e007      	b.n	800c660 <__sfputs_r+0x22>
 800c650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c654:	463a      	mov	r2, r7
 800c656:	4630      	mov	r0, r6
 800c658:	f7ff ffda 	bl	800c610 <__sfputc_r>
 800c65c:	1c43      	adds	r3, r0, #1
 800c65e:	d1f3      	bne.n	800c648 <__sfputs_r+0xa>
 800c660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c664 <_vfiprintf_r>:
 800c664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c668:	460d      	mov	r5, r1
 800c66a:	b09d      	sub	sp, #116	; 0x74
 800c66c:	4614      	mov	r4, r2
 800c66e:	4698      	mov	r8, r3
 800c670:	4606      	mov	r6, r0
 800c672:	b118      	cbz	r0, 800c67c <_vfiprintf_r+0x18>
 800c674:	6983      	ldr	r3, [r0, #24]
 800c676:	b90b      	cbnz	r3, 800c67c <_vfiprintf_r+0x18>
 800c678:	f7fb fd6e 	bl	8008158 <__sinit>
 800c67c:	4b89      	ldr	r3, [pc, #548]	; (800c8a4 <_vfiprintf_r+0x240>)
 800c67e:	429d      	cmp	r5, r3
 800c680:	d11b      	bne.n	800c6ba <_vfiprintf_r+0x56>
 800c682:	6875      	ldr	r5, [r6, #4]
 800c684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c686:	07d9      	lsls	r1, r3, #31
 800c688:	d405      	bmi.n	800c696 <_vfiprintf_r+0x32>
 800c68a:	89ab      	ldrh	r3, [r5, #12]
 800c68c:	059a      	lsls	r2, r3, #22
 800c68e:	d402      	bmi.n	800c696 <_vfiprintf_r+0x32>
 800c690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c692:	f7fb fe24 	bl	80082de <__retarget_lock_acquire_recursive>
 800c696:	89ab      	ldrh	r3, [r5, #12]
 800c698:	071b      	lsls	r3, r3, #28
 800c69a:	d501      	bpl.n	800c6a0 <_vfiprintf_r+0x3c>
 800c69c:	692b      	ldr	r3, [r5, #16]
 800c69e:	b9eb      	cbnz	r3, 800c6dc <_vfiprintf_r+0x78>
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	f7fd fd38 	bl	800a118 <__swsetup_r>
 800c6a8:	b1c0      	cbz	r0, 800c6dc <_vfiprintf_r+0x78>
 800c6aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ac:	07dc      	lsls	r4, r3, #31
 800c6ae:	d50e      	bpl.n	800c6ce <_vfiprintf_r+0x6a>
 800c6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b4:	b01d      	add	sp, #116	; 0x74
 800c6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ba:	4b7b      	ldr	r3, [pc, #492]	; (800c8a8 <_vfiprintf_r+0x244>)
 800c6bc:	429d      	cmp	r5, r3
 800c6be:	d101      	bne.n	800c6c4 <_vfiprintf_r+0x60>
 800c6c0:	68b5      	ldr	r5, [r6, #8]
 800c6c2:	e7df      	b.n	800c684 <_vfiprintf_r+0x20>
 800c6c4:	4b79      	ldr	r3, [pc, #484]	; (800c8ac <_vfiprintf_r+0x248>)
 800c6c6:	429d      	cmp	r5, r3
 800c6c8:	bf08      	it	eq
 800c6ca:	68f5      	ldreq	r5, [r6, #12]
 800c6cc:	e7da      	b.n	800c684 <_vfiprintf_r+0x20>
 800c6ce:	89ab      	ldrh	r3, [r5, #12]
 800c6d0:	0598      	lsls	r0, r3, #22
 800c6d2:	d4ed      	bmi.n	800c6b0 <_vfiprintf_r+0x4c>
 800c6d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6d6:	f7fb fe03 	bl	80082e0 <__retarget_lock_release_recursive>
 800c6da:	e7e9      	b.n	800c6b0 <_vfiprintf_r+0x4c>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e0:	2320      	movs	r3, #32
 800c6e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6ea:	2330      	movs	r3, #48	; 0x30
 800c6ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c8b0 <_vfiprintf_r+0x24c>
 800c6f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6f4:	f04f 0901 	mov.w	r9, #1
 800c6f8:	4623      	mov	r3, r4
 800c6fa:	469a      	mov	sl, r3
 800c6fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c700:	b10a      	cbz	r2, 800c706 <_vfiprintf_r+0xa2>
 800c702:	2a25      	cmp	r2, #37	; 0x25
 800c704:	d1f9      	bne.n	800c6fa <_vfiprintf_r+0x96>
 800c706:	ebba 0b04 	subs.w	fp, sl, r4
 800c70a:	d00b      	beq.n	800c724 <_vfiprintf_r+0xc0>
 800c70c:	465b      	mov	r3, fp
 800c70e:	4622      	mov	r2, r4
 800c710:	4629      	mov	r1, r5
 800c712:	4630      	mov	r0, r6
 800c714:	f7ff ff93 	bl	800c63e <__sfputs_r>
 800c718:	3001      	adds	r0, #1
 800c71a:	f000 80aa 	beq.w	800c872 <_vfiprintf_r+0x20e>
 800c71e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c720:	445a      	add	r2, fp
 800c722:	9209      	str	r2, [sp, #36]	; 0x24
 800c724:	f89a 3000 	ldrb.w	r3, [sl]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f000 80a2 	beq.w	800c872 <_vfiprintf_r+0x20e>
 800c72e:	2300      	movs	r3, #0
 800c730:	f04f 32ff 	mov.w	r2, #4294967295
 800c734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c738:	f10a 0a01 	add.w	sl, sl, #1
 800c73c:	9304      	str	r3, [sp, #16]
 800c73e:	9307      	str	r3, [sp, #28]
 800c740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c744:	931a      	str	r3, [sp, #104]	; 0x68
 800c746:	4654      	mov	r4, sl
 800c748:	2205      	movs	r2, #5
 800c74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c74e:	4858      	ldr	r0, [pc, #352]	; (800c8b0 <_vfiprintf_r+0x24c>)
 800c750:	f7f3 fd46 	bl	80001e0 <memchr>
 800c754:	9a04      	ldr	r2, [sp, #16]
 800c756:	b9d8      	cbnz	r0, 800c790 <_vfiprintf_r+0x12c>
 800c758:	06d1      	lsls	r1, r2, #27
 800c75a:	bf44      	itt	mi
 800c75c:	2320      	movmi	r3, #32
 800c75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c762:	0713      	lsls	r3, r2, #28
 800c764:	bf44      	itt	mi
 800c766:	232b      	movmi	r3, #43	; 0x2b
 800c768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c76c:	f89a 3000 	ldrb.w	r3, [sl]
 800c770:	2b2a      	cmp	r3, #42	; 0x2a
 800c772:	d015      	beq.n	800c7a0 <_vfiprintf_r+0x13c>
 800c774:	9a07      	ldr	r2, [sp, #28]
 800c776:	4654      	mov	r4, sl
 800c778:	2000      	movs	r0, #0
 800c77a:	f04f 0c0a 	mov.w	ip, #10
 800c77e:	4621      	mov	r1, r4
 800c780:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c784:	3b30      	subs	r3, #48	; 0x30
 800c786:	2b09      	cmp	r3, #9
 800c788:	d94e      	bls.n	800c828 <_vfiprintf_r+0x1c4>
 800c78a:	b1b0      	cbz	r0, 800c7ba <_vfiprintf_r+0x156>
 800c78c:	9207      	str	r2, [sp, #28]
 800c78e:	e014      	b.n	800c7ba <_vfiprintf_r+0x156>
 800c790:	eba0 0308 	sub.w	r3, r0, r8
 800c794:	fa09 f303 	lsl.w	r3, r9, r3
 800c798:	4313      	orrs	r3, r2
 800c79a:	9304      	str	r3, [sp, #16]
 800c79c:	46a2      	mov	sl, r4
 800c79e:	e7d2      	b.n	800c746 <_vfiprintf_r+0xe2>
 800c7a0:	9b03      	ldr	r3, [sp, #12]
 800c7a2:	1d19      	adds	r1, r3, #4
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	9103      	str	r1, [sp, #12]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	bfbb      	ittet	lt
 800c7ac:	425b      	neglt	r3, r3
 800c7ae:	f042 0202 	orrlt.w	r2, r2, #2
 800c7b2:	9307      	strge	r3, [sp, #28]
 800c7b4:	9307      	strlt	r3, [sp, #28]
 800c7b6:	bfb8      	it	lt
 800c7b8:	9204      	strlt	r2, [sp, #16]
 800c7ba:	7823      	ldrb	r3, [r4, #0]
 800c7bc:	2b2e      	cmp	r3, #46	; 0x2e
 800c7be:	d10c      	bne.n	800c7da <_vfiprintf_r+0x176>
 800c7c0:	7863      	ldrb	r3, [r4, #1]
 800c7c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c7c4:	d135      	bne.n	800c832 <_vfiprintf_r+0x1ce>
 800c7c6:	9b03      	ldr	r3, [sp, #12]
 800c7c8:	1d1a      	adds	r2, r3, #4
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	9203      	str	r2, [sp, #12]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	bfb8      	it	lt
 800c7d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7d6:	3402      	adds	r4, #2
 800c7d8:	9305      	str	r3, [sp, #20]
 800c7da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c8c0 <_vfiprintf_r+0x25c>
 800c7de:	7821      	ldrb	r1, [r4, #0]
 800c7e0:	2203      	movs	r2, #3
 800c7e2:	4650      	mov	r0, sl
 800c7e4:	f7f3 fcfc 	bl	80001e0 <memchr>
 800c7e8:	b140      	cbz	r0, 800c7fc <_vfiprintf_r+0x198>
 800c7ea:	2340      	movs	r3, #64	; 0x40
 800c7ec:	eba0 000a 	sub.w	r0, r0, sl
 800c7f0:	fa03 f000 	lsl.w	r0, r3, r0
 800c7f4:	9b04      	ldr	r3, [sp, #16]
 800c7f6:	4303      	orrs	r3, r0
 800c7f8:	3401      	adds	r4, #1
 800c7fa:	9304      	str	r3, [sp, #16]
 800c7fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c800:	482c      	ldr	r0, [pc, #176]	; (800c8b4 <_vfiprintf_r+0x250>)
 800c802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c806:	2206      	movs	r2, #6
 800c808:	f7f3 fcea 	bl	80001e0 <memchr>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	d03f      	beq.n	800c890 <_vfiprintf_r+0x22c>
 800c810:	4b29      	ldr	r3, [pc, #164]	; (800c8b8 <_vfiprintf_r+0x254>)
 800c812:	bb1b      	cbnz	r3, 800c85c <_vfiprintf_r+0x1f8>
 800c814:	9b03      	ldr	r3, [sp, #12]
 800c816:	3307      	adds	r3, #7
 800c818:	f023 0307 	bic.w	r3, r3, #7
 800c81c:	3308      	adds	r3, #8
 800c81e:	9303      	str	r3, [sp, #12]
 800c820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c822:	443b      	add	r3, r7
 800c824:	9309      	str	r3, [sp, #36]	; 0x24
 800c826:	e767      	b.n	800c6f8 <_vfiprintf_r+0x94>
 800c828:	fb0c 3202 	mla	r2, ip, r2, r3
 800c82c:	460c      	mov	r4, r1
 800c82e:	2001      	movs	r0, #1
 800c830:	e7a5      	b.n	800c77e <_vfiprintf_r+0x11a>
 800c832:	2300      	movs	r3, #0
 800c834:	3401      	adds	r4, #1
 800c836:	9305      	str	r3, [sp, #20]
 800c838:	4619      	mov	r1, r3
 800c83a:	f04f 0c0a 	mov.w	ip, #10
 800c83e:	4620      	mov	r0, r4
 800c840:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c844:	3a30      	subs	r2, #48	; 0x30
 800c846:	2a09      	cmp	r2, #9
 800c848:	d903      	bls.n	800c852 <_vfiprintf_r+0x1ee>
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d0c5      	beq.n	800c7da <_vfiprintf_r+0x176>
 800c84e:	9105      	str	r1, [sp, #20]
 800c850:	e7c3      	b.n	800c7da <_vfiprintf_r+0x176>
 800c852:	fb0c 2101 	mla	r1, ip, r1, r2
 800c856:	4604      	mov	r4, r0
 800c858:	2301      	movs	r3, #1
 800c85a:	e7f0      	b.n	800c83e <_vfiprintf_r+0x1da>
 800c85c:	ab03      	add	r3, sp, #12
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	462a      	mov	r2, r5
 800c862:	4b16      	ldr	r3, [pc, #88]	; (800c8bc <_vfiprintf_r+0x258>)
 800c864:	a904      	add	r1, sp, #16
 800c866:	4630      	mov	r0, r6
 800c868:	f7fb fe86 	bl	8008578 <_printf_float>
 800c86c:	4607      	mov	r7, r0
 800c86e:	1c78      	adds	r0, r7, #1
 800c870:	d1d6      	bne.n	800c820 <_vfiprintf_r+0x1bc>
 800c872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c874:	07d9      	lsls	r1, r3, #31
 800c876:	d405      	bmi.n	800c884 <_vfiprintf_r+0x220>
 800c878:	89ab      	ldrh	r3, [r5, #12]
 800c87a:	059a      	lsls	r2, r3, #22
 800c87c:	d402      	bmi.n	800c884 <_vfiprintf_r+0x220>
 800c87e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c880:	f7fb fd2e 	bl	80082e0 <__retarget_lock_release_recursive>
 800c884:	89ab      	ldrh	r3, [r5, #12]
 800c886:	065b      	lsls	r3, r3, #25
 800c888:	f53f af12 	bmi.w	800c6b0 <_vfiprintf_r+0x4c>
 800c88c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c88e:	e711      	b.n	800c6b4 <_vfiprintf_r+0x50>
 800c890:	ab03      	add	r3, sp, #12
 800c892:	9300      	str	r3, [sp, #0]
 800c894:	462a      	mov	r2, r5
 800c896:	4b09      	ldr	r3, [pc, #36]	; (800c8bc <_vfiprintf_r+0x258>)
 800c898:	a904      	add	r1, sp, #16
 800c89a:	4630      	mov	r0, r6
 800c89c:	f7fc f910 	bl	8008ac0 <_printf_i>
 800c8a0:	e7e4      	b.n	800c86c <_vfiprintf_r+0x208>
 800c8a2:	bf00      	nop
 800c8a4:	0800cc20 	.word	0x0800cc20
 800c8a8:	0800cc40 	.word	0x0800cc40
 800c8ac:	0800cc00 	.word	0x0800cc00
 800c8b0:	0800d094 	.word	0x0800d094
 800c8b4:	0800d09e 	.word	0x0800d09e
 800c8b8:	08008579 	.word	0x08008579
 800c8bc:	0800c63f 	.word	0x0800c63f
 800c8c0:	0800d09a 	.word	0x0800d09a

0800c8c4 <_read_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	4d07      	ldr	r5, [pc, #28]	; (800c8e4 <_read_r+0x20>)
 800c8c8:	4604      	mov	r4, r0
 800c8ca:	4608      	mov	r0, r1
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	602a      	str	r2, [r5, #0]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	f7f4 ff12 	bl	80016fc <_read>
 800c8d8:	1c43      	adds	r3, r0, #1
 800c8da:	d102      	bne.n	800c8e2 <_read_r+0x1e>
 800c8dc:	682b      	ldr	r3, [r5, #0]
 800c8de:	b103      	cbz	r3, 800c8e2 <_read_r+0x1e>
 800c8e0:	6023      	str	r3, [r4, #0]
 800c8e2:	bd38      	pop	{r3, r4, r5, pc}
 800c8e4:	20001a78 	.word	0x20001a78

0800c8e8 <nan>:
 800c8e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c8f0 <nan+0x8>
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	00000000 	.word	0x00000000
 800c8f4:	7ff80000 	.word	0x7ff80000

0800c8f8 <strncmp>:
 800c8f8:	b510      	push	{r4, lr}
 800c8fa:	b17a      	cbz	r2, 800c91c <strncmp+0x24>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	3901      	subs	r1, #1
 800c900:	1884      	adds	r4, r0, r2
 800c902:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c906:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c90a:	4290      	cmp	r0, r2
 800c90c:	d101      	bne.n	800c912 <strncmp+0x1a>
 800c90e:	42a3      	cmp	r3, r4
 800c910:	d101      	bne.n	800c916 <strncmp+0x1e>
 800c912:	1a80      	subs	r0, r0, r2
 800c914:	bd10      	pop	{r4, pc}
 800c916:	2800      	cmp	r0, #0
 800c918:	d1f3      	bne.n	800c902 <strncmp+0xa>
 800c91a:	e7fa      	b.n	800c912 <strncmp+0x1a>
 800c91c:	4610      	mov	r0, r2
 800c91e:	e7f9      	b.n	800c914 <strncmp+0x1c>

0800c920 <__ascii_wctomb>:
 800c920:	b149      	cbz	r1, 800c936 <__ascii_wctomb+0x16>
 800c922:	2aff      	cmp	r2, #255	; 0xff
 800c924:	bf85      	ittet	hi
 800c926:	238a      	movhi	r3, #138	; 0x8a
 800c928:	6003      	strhi	r3, [r0, #0]
 800c92a:	700a      	strbls	r2, [r1, #0]
 800c92c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c930:	bf98      	it	ls
 800c932:	2001      	movls	r0, #1
 800c934:	4770      	bx	lr
 800c936:	4608      	mov	r0, r1
 800c938:	4770      	bx	lr

0800c93a <abort>:
 800c93a:	b508      	push	{r3, lr}
 800c93c:	2006      	movs	r0, #6
 800c93e:	f000 f897 	bl	800ca70 <raise>
 800c942:	2001      	movs	r0, #1
 800c944:	f7f4 fed0 	bl	80016e8 <_exit>

0800c948 <_fstat_r>:
 800c948:	b538      	push	{r3, r4, r5, lr}
 800c94a:	4d07      	ldr	r5, [pc, #28]	; (800c968 <_fstat_r+0x20>)
 800c94c:	2300      	movs	r3, #0
 800c94e:	4604      	mov	r4, r0
 800c950:	4608      	mov	r0, r1
 800c952:	4611      	mov	r1, r2
 800c954:	602b      	str	r3, [r5, #0]
 800c956:	f7f4 ff16 	bl	8001786 <_fstat>
 800c95a:	1c43      	adds	r3, r0, #1
 800c95c:	d102      	bne.n	800c964 <_fstat_r+0x1c>
 800c95e:	682b      	ldr	r3, [r5, #0]
 800c960:	b103      	cbz	r3, 800c964 <_fstat_r+0x1c>
 800c962:	6023      	str	r3, [r4, #0]
 800c964:	bd38      	pop	{r3, r4, r5, pc}
 800c966:	bf00      	nop
 800c968:	20001a78 	.word	0x20001a78

0800c96c <_isatty_r>:
 800c96c:	b538      	push	{r3, r4, r5, lr}
 800c96e:	4d06      	ldr	r5, [pc, #24]	; (800c988 <_isatty_r+0x1c>)
 800c970:	2300      	movs	r3, #0
 800c972:	4604      	mov	r4, r0
 800c974:	4608      	mov	r0, r1
 800c976:	602b      	str	r3, [r5, #0]
 800c978:	f7f4 ff15 	bl	80017a6 <_isatty>
 800c97c:	1c43      	adds	r3, r0, #1
 800c97e:	d102      	bne.n	800c986 <_isatty_r+0x1a>
 800c980:	682b      	ldr	r3, [r5, #0]
 800c982:	b103      	cbz	r3, 800c986 <_isatty_r+0x1a>
 800c984:	6023      	str	r3, [r4, #0]
 800c986:	bd38      	pop	{r3, r4, r5, pc}
 800c988:	20001a78 	.word	0x20001a78

0800c98c <memmove>:
 800c98c:	4288      	cmp	r0, r1
 800c98e:	b510      	push	{r4, lr}
 800c990:	eb01 0402 	add.w	r4, r1, r2
 800c994:	d902      	bls.n	800c99c <memmove+0x10>
 800c996:	4284      	cmp	r4, r0
 800c998:	4623      	mov	r3, r4
 800c99a:	d807      	bhi.n	800c9ac <memmove+0x20>
 800c99c:	1e43      	subs	r3, r0, #1
 800c99e:	42a1      	cmp	r1, r4
 800c9a0:	d008      	beq.n	800c9b4 <memmove+0x28>
 800c9a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9aa:	e7f8      	b.n	800c99e <memmove+0x12>
 800c9ac:	4402      	add	r2, r0
 800c9ae:	4601      	mov	r1, r0
 800c9b0:	428a      	cmp	r2, r1
 800c9b2:	d100      	bne.n	800c9b6 <memmove+0x2a>
 800c9b4:	bd10      	pop	{r4, pc}
 800c9b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9be:	e7f7      	b.n	800c9b0 <memmove+0x24>

0800c9c0 <_realloc_r>:
 800c9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c4:	4680      	mov	r8, r0
 800c9c6:	4614      	mov	r4, r2
 800c9c8:	460e      	mov	r6, r1
 800c9ca:	b921      	cbnz	r1, 800c9d6 <_realloc_r+0x16>
 800c9cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	f7fb bcbd 	b.w	8008350 <_malloc_r>
 800c9d6:	b92a      	cbnz	r2, 800c9e4 <_realloc_r+0x24>
 800c9d8:	f7ff fc72 	bl	800c2c0 <_free_r>
 800c9dc:	4625      	mov	r5, r4
 800c9de:	4628      	mov	r0, r5
 800c9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9e4:	f000 f860 	bl	800caa8 <_malloc_usable_size_r>
 800c9e8:	4284      	cmp	r4, r0
 800c9ea:	4607      	mov	r7, r0
 800c9ec:	d802      	bhi.n	800c9f4 <_realloc_r+0x34>
 800c9ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c9f2:	d812      	bhi.n	800ca1a <_realloc_r+0x5a>
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	4640      	mov	r0, r8
 800c9f8:	f7fb fcaa 	bl	8008350 <_malloc_r>
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d0ed      	beq.n	800c9de <_realloc_r+0x1e>
 800ca02:	42bc      	cmp	r4, r7
 800ca04:	4622      	mov	r2, r4
 800ca06:	4631      	mov	r1, r6
 800ca08:	bf28      	it	cs
 800ca0a:	463a      	movcs	r2, r7
 800ca0c:	f7fb fc69 	bl	80082e2 <memcpy>
 800ca10:	4631      	mov	r1, r6
 800ca12:	4640      	mov	r0, r8
 800ca14:	f7ff fc54 	bl	800c2c0 <_free_r>
 800ca18:	e7e1      	b.n	800c9de <_realloc_r+0x1e>
 800ca1a:	4635      	mov	r5, r6
 800ca1c:	e7df      	b.n	800c9de <_realloc_r+0x1e>

0800ca1e <_raise_r>:
 800ca1e:	291f      	cmp	r1, #31
 800ca20:	b538      	push	{r3, r4, r5, lr}
 800ca22:	4604      	mov	r4, r0
 800ca24:	460d      	mov	r5, r1
 800ca26:	d904      	bls.n	800ca32 <_raise_r+0x14>
 800ca28:	2316      	movs	r3, #22
 800ca2a:	6003      	str	r3, [r0, #0]
 800ca2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca30:	bd38      	pop	{r3, r4, r5, pc}
 800ca32:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca34:	b112      	cbz	r2, 800ca3c <_raise_r+0x1e>
 800ca36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca3a:	b94b      	cbnz	r3, 800ca50 <_raise_r+0x32>
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f000 f831 	bl	800caa4 <_getpid_r>
 800ca42:	462a      	mov	r2, r5
 800ca44:	4601      	mov	r1, r0
 800ca46:	4620      	mov	r0, r4
 800ca48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca4c:	f000 b818 	b.w	800ca80 <_kill_r>
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d00a      	beq.n	800ca6a <_raise_r+0x4c>
 800ca54:	1c59      	adds	r1, r3, #1
 800ca56:	d103      	bne.n	800ca60 <_raise_r+0x42>
 800ca58:	2316      	movs	r3, #22
 800ca5a:	6003      	str	r3, [r0, #0]
 800ca5c:	2001      	movs	r0, #1
 800ca5e:	e7e7      	b.n	800ca30 <_raise_r+0x12>
 800ca60:	2400      	movs	r4, #0
 800ca62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca66:	4628      	mov	r0, r5
 800ca68:	4798      	blx	r3
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	e7e0      	b.n	800ca30 <_raise_r+0x12>
	...

0800ca70 <raise>:
 800ca70:	4b02      	ldr	r3, [pc, #8]	; (800ca7c <raise+0xc>)
 800ca72:	4601      	mov	r1, r0
 800ca74:	6818      	ldr	r0, [r3, #0]
 800ca76:	f7ff bfd2 	b.w	800ca1e <_raise_r>
 800ca7a:	bf00      	nop
 800ca7c:	20000010 	.word	0x20000010

0800ca80 <_kill_r>:
 800ca80:	b538      	push	{r3, r4, r5, lr}
 800ca82:	4d07      	ldr	r5, [pc, #28]	; (800caa0 <_kill_r+0x20>)
 800ca84:	2300      	movs	r3, #0
 800ca86:	4604      	mov	r4, r0
 800ca88:	4608      	mov	r0, r1
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	602b      	str	r3, [r5, #0]
 800ca8e:	f7f4 fe1b 	bl	80016c8 <_kill>
 800ca92:	1c43      	adds	r3, r0, #1
 800ca94:	d102      	bne.n	800ca9c <_kill_r+0x1c>
 800ca96:	682b      	ldr	r3, [r5, #0]
 800ca98:	b103      	cbz	r3, 800ca9c <_kill_r+0x1c>
 800ca9a:	6023      	str	r3, [r4, #0]
 800ca9c:	bd38      	pop	{r3, r4, r5, pc}
 800ca9e:	bf00      	nop
 800caa0:	20001a78 	.word	0x20001a78

0800caa4 <_getpid_r>:
 800caa4:	f7f4 be08 	b.w	80016b8 <_getpid>

0800caa8 <_malloc_usable_size_r>:
 800caa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caac:	1f18      	subs	r0, r3, #4
 800caae:	2b00      	cmp	r3, #0
 800cab0:	bfbc      	itt	lt
 800cab2:	580b      	ldrlt	r3, [r1, r0]
 800cab4:	18c0      	addlt	r0, r0, r3
 800cab6:	4770      	bx	lr

0800cab8 <_init>:
 800cab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caba:	bf00      	nop
 800cabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cabe:	bc08      	pop	{r3}
 800cac0:	469e      	mov	lr, r3
 800cac2:	4770      	bx	lr

0800cac4 <_fini>:
 800cac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac6:	bf00      	nop
 800cac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caca:	bc08      	pop	{r3}
 800cacc:	469e      	mov	lr, r3
 800cace:	4770      	bx	lr
