
assignment2_mx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800f0f0  0800f0f0  0001f0f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6a0  0800f6a0  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6a0  0800f6a0  0001f6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6a8  0800f6a8  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6a8  0800f6a8  0001f6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6ac  0800f6ac  0001f6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800f6b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000081b4  20000268  0800f918  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00004204  2000841c  0800f918  0002841c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   000252ea  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057a0  00000000  00000000  00045582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e28  00000000  00000000  0004ad28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b80  00000000  00000000  0004cb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e048  00000000  00000000  0004e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000281b5  00000000  00000000  0007c718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104d54  00000000  00000000  000a48cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a9621  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f2c  00000000  00000000  001a9674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f0d8 	.word	0x0800f0d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	0800f0d8 	.word	0x0800f0d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_DMA_Init+0x48>)
 8001000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <MX_DMA_Init+0x48>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6493      	str	r3, [r2, #72]	; 0x48
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <MX_DMA_Init+0x48>)
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2105      	movs	r1, #5
 800101a:	200e      	movs	r0, #14
 800101c:	f001 fd78 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001020:	200e      	movs	r0, #14
 8001022:	f001 fd91 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2105      	movs	r1, #5
 800102a:	200f      	movs	r0, #15
 800102c:	f001 fd70 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001030:	200f      	movs	r0, #15
 8001032:	f001 fd89 	bl	8002b48 <HAL_NVIC_EnableIRQ>

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4a07      	ldr	r2, [pc, #28]	; (8001088 <vApplicationGetIdleTaskMemory+0x2c>)
 800106c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <vApplicationGetIdleTaskMemory+0x30>)
 8001072:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200002a4 	.word	0x200002a4
 800108c:	20000358 	.word	0x20000358

08001090 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4a07      	ldr	r2, [pc, #28]	; (80010bc <vApplicationGetTimerTaskMemory+0x2c>)
 80010a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <vApplicationGetTimerTaskMemory+0x30>)
 80010a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20000558 	.word	0x20000558
 80010c0:	2000060c 	.word	0x2000060c

080010c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af02      	add	r7, sp, #8
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	UART1_queue = xQueueCreate(5,sizeof(queue_UART_msg_t*));
 80010ca:	2200      	movs	r2, #0
 80010cc:	2104      	movs	r1, #4
 80010ce:	2005      	movs	r0, #5
 80010d0:	f006 ff44 	bl	8007f5c <xQueueGenericCreate>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a30      	ldr	r2, [pc, #192]	; (8001198 <MX_FREERTOS_Init+0xd4>)
 80010d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 512);
 80010da:	4b30      	ldr	r3, [pc, #192]	; (800119c <MX_FREERTOS_Init+0xd8>)
 80010dc:	463c      	mov	r4, r7
 80010de:	461d      	mov	r5, r3
 80010e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010ec:	463b      	mov	r3, r7
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f006 fd3f 	bl	8007b74 <osThreadCreate>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <MX_FREERTOS_Init+0xdc>)
 80010fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  BaseType_t status =0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
//	if (UART1_queue != NULL){
		//error somehow? lol
	  status = xTaskCreate(lis_task, "lis_task", 512, (void*)1,
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <MX_FREERTOS_Init+0xe0>)
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	2305      	movs	r3, #5
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110e:	4926      	ldr	r1, [pc, #152]	; (80011a8 <MX_FREERTOS_Init+0xe4>)
 8001110:	4826      	ldr	r0, [pc, #152]	; (80011ac <MX_FREERTOS_Init+0xe8>)
 8001112:	f007 fbc2 	bl	800889a <xTaskCreate>
 8001116:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &lis_task_handle);
	  status = xTaskCreate(uart1_task, "uart_task", 512, (void*)1,
 8001118:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <MX_FREERTOS_Init+0xec>)
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	2305      	movs	r3, #5
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001126:	4923      	ldr	r1, [pc, #140]	; (80011b4 <MX_FREERTOS_Init+0xf0>)
 8001128:	4823      	ldr	r0, [pc, #140]	; (80011b8 <MX_FREERTOS_Init+0xf4>)
 800112a:	f007 fbb6 	bl	800889a <xTaskCreate>
 800112e:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &uart1_task_handle);
	  status = xTaskCreate(lps_task, "lps_task", 512, (void*)1,
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <MX_FREERTOS_Init+0xf8>)
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	2305      	movs	r3, #5
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800113e:	4920      	ldr	r1, [pc, #128]	; (80011c0 <MX_FREERTOS_Init+0xfc>)
 8001140:	4820      	ldr	r0, [pc, #128]	; (80011c4 <MX_FREERTOS_Init+0x100>)
 8001142:	f007 fbaa 	bl	800889a <xTaskCreate>
 8001146:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &lps_task_handle);
	  status = xTaskCreate(hts_task, "hts_task", 512, (void*)1,
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_FREERTOS_Init+0x104>)
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	2305      	movs	r3, #5
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001156:	491d      	ldr	r1, [pc, #116]	; (80011cc <MX_FREERTOS_Init+0x108>)
 8001158:	481d      	ldr	r0, [pc, #116]	; (80011d0 <MX_FREERTOS_Init+0x10c>)
 800115a:	f007 fb9e 	bl	800889a <xTaskCreate>
 800115e:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &hts_task_handle);
	  status = xTaskCreate(lsm_task, "lsm_task", 512, (void*)1,
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_FREERTOS_Init+0x110>)
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	2305      	movs	r3, #5
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2301      	movs	r3, #1
 800116a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116e:	491a      	ldr	r1, [pc, #104]	; (80011d8 <MX_FREERTOS_Init+0x114>)
 8001170:	481a      	ldr	r0, [pc, #104]	; (80011dc <MX_FREERTOS_Init+0x118>)
 8001172:	f007 fb92 	bl	800889a <xTaskCreate>
 8001176:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &lsm_task_handle);
	  status = xTaskCreate(buzzer_task, "buzzer_task", 512, (void*)1,
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_FREERTOS_Init+0x11c>)
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	2305      	movs	r3, #5
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001186:	4917      	ldr	r1, [pc, #92]	; (80011e4 <MX_FREERTOS_Init+0x120>)
 8001188:	4817      	ldr	r0, [pc, #92]	; (80011e8 <MX_FREERTOS_Init+0x124>)
 800118a:	f007 fb86 	bl	800889a <xTaskCreate>
 800118e:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &buzzer_task_handle);
//	}
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bdb0      	pop	{r4, r5, r7, pc}
 8001198:	2000029c 	.word	0x2000029c
 800119c:	0800f144 	.word	0x0800f144
 80011a0:	200002a0 	.word	0x200002a0
 80011a4:	20000288 	.word	0x20000288
 80011a8:	0800f0fc 	.word	0x0800f0fc
 80011ac:	08001af9 	.word	0x08001af9
 80011b0:	20000284 	.word	0x20000284
 80011b4:	0800f108 	.word	0x0800f108
 80011b8:	08001d21 	.word	0x08001d21
 80011bc:	2000028c 	.word	0x2000028c
 80011c0:	0800f114 	.word	0x0800f114
 80011c4:	08001b3d 	.word	0x08001b3d
 80011c8:	20000294 	.word	0x20000294
 80011cc:	0800f120 	.word	0x0800f120
 80011d0:	08001ad7 	.word	0x08001ad7
 80011d4:	20000290 	.word	0x20000290
 80011d8:	0800f12c 	.word	0x0800f12c
 80011dc:	08001b61 	.word	0x08001b61
 80011e0:	20000298 	.word	0x20000298
 80011e4:	0800f138 	.word	0x0800f138
 80011e8:	08001a55 	.word	0x08001a55

080011ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f006 fd09 	bl	8007c0c <osDelay>
 80011fa:	e7fb      	b.n	80011f4 <StartDefaultTask+0x8>

080011fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_GPIO_Init+0x68>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <MX_GPIO_Init+0x68>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_GPIO_Init+0x68>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_GPIO_Init+0x68>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <MX_GPIO_Init+0x68>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_GPIO_Init+0x68>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 8001242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001246:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124c:	2301      	movs	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	4619      	mov	r1, r3
 8001256:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_GPIO_Init+0x6c>)
 8001258:	f001 fefa 	bl	8003050 <HAL_GPIO_Init>

}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021000 	.word	0x40021000
 8001268:	48000800 	.word	0x48000800

0800126c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001270:	f001 fb5e 	bl	8002930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001274:	f000 f80d 	bl	8001292 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001278:	f7ff ffc0 	bl	80011fc <MX_GPIO_Init>
  MX_DMA_Init();
 800127c:	f7ff febc 	bl	8000ff8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001280:	f000 face 	bl	8001820 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001284:	f000 fa1a 	bl	80016bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001288:	f7ff ff1c 	bl	80010c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800128c:	f006 fc6b 	bl	8007b66 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001290:	e7fe      	b.n	8001290 <main+0x24>

08001292 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b096      	sub	sp, #88	; 0x58
 8001296:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2244      	movs	r2, #68	; 0x44
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f009 fb3c 	bl	800a91e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012b8:	f002 fe74 	bl	8003fa4 <HAL_PWREx_ControlVoltageScaling>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012c2:	f000 f83d 	bl	8001340 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c6:	2302      	movs	r3, #2
 80012c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d0:	2310      	movs	r3, #16
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 feb7 	bl	8004050 <HAL_RCC_OscConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80012e8:	f000 f82a 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ec:	230f      	movs	r3, #15
 80012ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012f0:	2301      	movs	r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fa7f 	bl	8004808 <HAL_RCC_ClockConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001310:	f000 f816 	bl	8001340 <Error_Handler>
  }
}
 8001314:	bf00      	nop
 8001316:	3758      	adds	r7, #88	; 0x58
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800132e:	f001 fb17 	bl	8002960 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40001000 	.word	0x40001000

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	e7fe      	b.n	8001348 <Error_Handler+0x8>
	...

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_MspInit+0x4c>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_MspInit+0x4c>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6613      	str	r3, [r2, #96]	; 0x60
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_MspInit+0x4c>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_MspInit+0x4c>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_MspInit+0x4c>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6593      	str	r3, [r2, #88]	; 0x58
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_MspInit+0x4c>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	210f      	movs	r1, #15
 8001386:	f06f 0001 	mvn.w	r0, #1
 800138a:	f001 fbc1 	bl	8002b10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08e      	sub	sp, #56	; 0x38
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013aa:	4b34      	ldr	r3, [pc, #208]	; (800147c <HAL_InitTick+0xe0>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	4a33      	ldr	r2, [pc, #204]	; (800147c <HAL_InitTick+0xe0>)
 80013b0:	f043 0310 	orr.w	r3, r3, #16
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
 80013b6:	4b31      	ldr	r3, [pc, #196]	; (800147c <HAL_InitTick+0xe0>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013c2:	f107 0210 	add.w	r2, r7, #16
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 fbdf 	bl	8004b90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d103      	bne.n	80013e4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013dc:	f003 fbac 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 80013e0:	6378      	str	r0, [r7, #52]	; 0x34
 80013e2:	e004      	b.n	80013ee <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013e4:	f003 fba8 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 80013e8:	4603      	mov	r3, r0
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f0:	4a23      	ldr	r2, [pc, #140]	; (8001480 <HAL_InitTick+0xe4>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	0c9b      	lsrs	r3, r3, #18
 80013f8:	3b01      	subs	r3, #1
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013fc:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_InitTick+0xe8>)
 80013fe:	4a22      	ldr	r2, [pc, #136]	; (8001488 <HAL_InitTick+0xec>)
 8001400:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_InitTick+0xe8>)
 8001404:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001408:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800140a:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <HAL_InitTick+0xe8>)
 800140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_InitTick+0xe8>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_InitTick+0xe8>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_InitTick+0xe8>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <HAL_InitTick+0xe8>)
 8001424:	f004 f902 	bl	800562c <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800142e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001432:	2b00      	cmp	r3, #0
 8001434:	d11b      	bne.n	800146e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001436:	4813      	ldr	r0, [pc, #76]	; (8001484 <HAL_InitTick+0xe8>)
 8001438:	f004 f95a 	bl	80056f0 <HAL_TIM_Base_Start_IT>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001442:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001446:	2b00      	cmp	r3, #0
 8001448:	d111      	bne.n	800146e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800144a:	2036      	movs	r0, #54	; 0x36
 800144c:	f001 fb7c 	bl	8002b48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	d808      	bhi.n	8001468 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001456:	2200      	movs	r2, #0
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	2036      	movs	r0, #54	; 0x36
 800145c:	f001 fb58 	bl	8002b10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001460:	4a0a      	ldr	r2, [pc, #40]	; (800148c <HAL_InitTick+0xf0>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e002      	b.n	800146e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800146e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001472:	4618      	mov	r0, r3
 8001474:	3738      	adds	r7, #56	; 0x38
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
 8001480:	431bde83 	.word	0x431bde83
 8001484:	20000a0c 	.word	0x20000a0c
 8001488:	40001000 	.word	0x40001000
 800148c:	20000088 	.word	0x20000088

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <DMA1_Channel4_IRQHandler+0x10>)
 80014c2:	f001 fce6 	bl	8002e92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000b74 	.word	0x20000b74

080014d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <DMA1_Channel5_IRQHandler+0x10>)
 80014d6:	f001 fcdc 	bl	8002e92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000b2c 	.word	0x20000b2c

080014e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <USART1_IRQHandler+0x10>)
 80014ea:	f005 fa45 	bl	8006978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000aa8 	.word	0x20000aa8

080014f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <TIM6_DAC_IRQHandler+0x10>)
 80014fe:	f004 fac5 	bl	8005a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000a0c 	.word	0x20000a0c

0800150c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return 1;
 8001510:	2301      	movs	r3, #1
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_kill>:

int _kill(int pid, int sig)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001526:	f009 f8c9 	bl	800a6bc <__errno>
 800152a:	4603      	mov	r3, r0
 800152c:	2216      	movs	r2, #22
 800152e:	601a      	str	r2, [r3, #0]
  return -1;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_exit>:

void _exit (int status)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ffe7 	bl	800151c <_kill>
  while (1) {}    /* Make sure we hang here */
 800154e:	e7fe      	b.n	800154e <_exit+0x12>

08001550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e00a      	b.n	8001578 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001562:	f3af 8000 	nop.w
 8001566:	4601      	mov	r1, r0
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	60ba      	str	r2, [r7, #8]
 800156e:	b2ca      	uxtb	r2, r1
 8001570:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf0      	blt.n	8001562 <_read+0x12>
  }

  return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e009      	b.n	80015b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60ba      	str	r2, [r7, #8]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbf1      	blt.n	800159c <_write+0x12>
  }
  return len;
 80015b8:	687b      	ldr	r3, [r7, #4]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_close>:

int _close(int file)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ea:	605a      	str	r2, [r3, #4]
  return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_isatty>:

int _isatty(int file)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f009 f82e 	bl	800a6bc <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20018000 	.word	0x20018000
 800168c:	00003000 	.word	0x00003000
 8001690:	20000a58 	.word	0x20000a58
 8001694:	20008420 	.word	0x20008420

08001698 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <SystemInit+0x20>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <SystemInit+0x20>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ce:	463b      	mov	r3, r7
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
 80016dc:	615a      	str	r2, [r3, #20]
 80016de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <MX_TIM3_Init+0xac>)
 80016e2:	4a22      	ldr	r2, [pc, #136]	; (800176c <MX_TIM3_Init+0xb0>)
 80016e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <MX_TIM3_Init+0xac>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <MX_TIM3_Init+0xac>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4545;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <MX_TIM3_Init+0xac>)
 80016f4:	f241 12c1 	movw	r2, #4545	; 0x11c1
 80016f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <MX_TIM3_Init+0xac>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <MX_TIM3_Init+0xac>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001706:	4818      	ldr	r0, [pc, #96]	; (8001768 <MX_TIM3_Init+0xac>)
 8001708:	f004 f862 	bl	80057d0 <HAL_TIM_PWM_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001712:	f7ff fe15 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	4810      	ldr	r0, [pc, #64]	; (8001768 <MX_TIM3_Init+0xac>)
 8001726:	f004 ffa3 	bl	8006670 <HAL_TIMEx_MasterConfigSynchronization>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001730:	f7ff fe06 	bl	8001340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001734:	2360      	movs	r3, #96	; 0x60
 8001736:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	2208      	movs	r2, #8
 8001748:	4619      	mov	r1, r3
 800174a:	4807      	ldr	r0, [pc, #28]	; (8001768 <MX_TIM3_Init+0xac>)
 800174c:	f004 fabe 	bl	8005ccc <HAL_TIM_PWM_ConfigChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001756:	f7ff fdf3 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800175a:	4803      	ldr	r0, [pc, #12]	; (8001768 <MX_TIM3_Init+0xac>)
 800175c:	f000 f828 	bl	80017b0 <HAL_TIM_MspPostInit>

}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000a5c 	.word	0x20000a5c
 800176c:	40000400 	.word	0x40000400

08001770 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_TIM_PWM_MspInit+0x38>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d10b      	bne.n	800179a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_TIM_PWM_MspInit+0x3c>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_TIM_PWM_MspInit+0x3c>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6593      	str	r3, [r2, #88]	; 0x58
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_TIM_PWM_MspInit+0x3c>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40000400 	.word	0x40000400
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a11      	ldr	r2, [pc, #68]	; (8001814 <HAL_TIM_MspPostInit+0x64>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d11b      	bne.n	800180a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_TIM_MspPostInit+0x68>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <HAL_TIM_MspPostInit+0x68>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_TIM_MspPostInit+0x68>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ea:	2301      	movs	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <HAL_TIM_MspPostInit+0x6c>)
 8001806:	f001 fc23 	bl	8003050 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40000400 	.word	0x40000400
 8001818:	40021000 	.word	0x40021000
 800181c:	48000400 	.word	0x48000400

08001820 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_USART1_UART_Init+0x58>)
 8001826:	4a15      	ldr	r2, [pc, #84]	; (800187c <MX_USART1_UART_Init+0x5c>)
 8001828:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <MX_USART1_UART_Init+0x58>)
 800182c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001830:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_USART1_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_USART1_UART_Init+0x58>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_USART1_UART_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_USART1_UART_Init+0x58>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <MX_USART1_UART_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_USART1_UART_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <MX_USART1_UART_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_USART1_UART_Init+0x58>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_USART1_UART_Init+0x58>)
 8001864:	f004 ffaa 	bl	80067bc <HAL_UART_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800186e:	f7ff fd67 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000aa8 	.word	0x20000aa8
 800187c:	40013800 	.word	0x40013800

08001880 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b0ac      	sub	sp, #176	; 0xb0
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2288      	movs	r2, #136	; 0x88
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f009 f83c 	bl	800a91e <memset>
  if(uartHandle->Instance==USART1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a4e      	ldr	r2, [pc, #312]	; (80019e4 <HAL_UART_MspInit+0x164>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	f040 8095 	bne.w	80019dc <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018b2:	2301      	movs	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018b6:	2300      	movs	r3, #0
 80018b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 f9f8 	bl	8004cb4 <HAL_RCCEx_PeriphCLKConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018ca:	f7ff fd39 	bl	8001340 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ce:	4b46      	ldr	r3, [pc, #280]	; (80019e8 <HAL_UART_MspInit+0x168>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	4a45      	ldr	r2, [pc, #276]	; (80019e8 <HAL_UART_MspInit+0x168>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	6613      	str	r3, [r2, #96]	; 0x60
 80018da:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <HAL_UART_MspInit+0x168>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <HAL_UART_MspInit+0x168>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	4a3f      	ldr	r2, [pc, #252]	; (80019e8 <HAL_UART_MspInit+0x168>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f2:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <HAL_UART_MspInit+0x168>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018fe:	23c0      	movs	r3, #192	; 0xc0
 8001900:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001916:	2307      	movs	r3, #7
 8001918:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001920:	4619      	mov	r1, r3
 8001922:	4832      	ldr	r0, [pc, #200]	; (80019ec <HAL_UART_MspInit+0x16c>)
 8001924:	f001 fb94 	bl	8003050 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001928:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <HAL_UART_MspInit+0x170>)
 800192a:	4a32      	ldr	r2, [pc, #200]	; (80019f4 <HAL_UART_MspInit+0x174>)
 800192c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800192e:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <HAL_UART_MspInit+0x170>)
 8001930:	2202      	movs	r2, #2
 8001932:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <HAL_UART_MspInit+0x170>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_UART_MspInit+0x170>)
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001940:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <HAL_UART_MspInit+0x170>)
 8001942:	2280      	movs	r2, #128	; 0x80
 8001944:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001946:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_UART_MspInit+0x170>)
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800194c:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <HAL_UART_MspInit+0x170>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001952:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_UART_MspInit+0x170>)
 8001954:	2220      	movs	r2, #32
 8001956:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_UART_MspInit+0x170>)
 800195a:	2200      	movs	r2, #0
 800195c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800195e:	4824      	ldr	r0, [pc, #144]	; (80019f0 <HAL_UART_MspInit+0x170>)
 8001960:	f001 f900 	bl	8002b64 <HAL_DMA_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800196a:	f7ff fce9 	bl	8001340 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <HAL_UART_MspInit+0x170>)
 8001972:	671a      	str	r2, [r3, #112]	; 0x70
 8001974:	4a1e      	ldr	r2, [pc, #120]	; (80019f0 <HAL_UART_MspInit+0x170>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_UART_MspInit+0x178>)
 800197c:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <HAL_UART_MspInit+0x17c>)
 800197e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_UART_MspInit+0x178>)
 8001982:	2202      	movs	r2, #2
 8001984:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_UART_MspInit+0x178>)
 8001988:	2210      	movs	r2, #16
 800198a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198c:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <HAL_UART_MspInit+0x178>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_UART_MspInit+0x178>)
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_UART_MspInit+0x178>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_UART_MspInit+0x178>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_UART_MspInit+0x178>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_UART_MspInit+0x178>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80019b0:	4811      	ldr	r0, [pc, #68]	; (80019f8 <HAL_UART_MspInit+0x178>)
 80019b2:	f001 f8d7 	bl	8002b64 <HAL_DMA_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 80019bc:	f7ff fcc0 	bl	8001340 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <HAL_UART_MspInit+0x178>)
 80019c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80019c6:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <HAL_UART_MspInit+0x178>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2105      	movs	r1, #5
 80019d0:	2025      	movs	r0, #37	; 0x25
 80019d2:	f001 f89d 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019d6:	2025      	movs	r0, #37	; 0x25
 80019d8:	f001 f8b6 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019dc:	bf00      	nop
 80019de:	37b0      	adds	r7, #176	; 0xb0
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40013800 	.word	0x40013800
 80019e8:	40021000 	.word	0x40021000
 80019ec:	48000400 	.word	0x48000400
 80019f0:	20000b2c 	.word	0x20000b2c
 80019f4:	40020058 	.word	0x40020058
 80019f8:	20000b74 	.word	0x20000b74
 80019fc:	40020044 	.word	0x40020044

08001a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a04:	f7ff fe48 	bl	8001698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0a:	490d      	ldr	r1, [pc, #52]	; (8001a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <LoopForever+0xe>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a20:	4c0a      	ldr	r4, [pc, #40]	; (8001a4c <LoopForever+0x16>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f008 ff41 	bl	800a8b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a32:	f7ff fc1b 	bl	800126c <main>

08001a36 <LoopForever>:

LoopForever:
    b LoopForever
 8001a36:	e7fe      	b.n	8001a36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 8001a44:	0800f6b0 	.word	0x0800f6b0
  ldr r2, =_sbss
 8001a48:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8001a4c:	2000841c 	.word	0x2000841c

08001a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_2_IRQHandler>
	...

08001a54 <buzzer_task>:
#include "buzzer_task.h"




void buzzer_task(void* pvParameters){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

	  htim3.Instance->ARR = 100;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <buzzer_task+0x70>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2264      	movs	r2, #100	; 0x64
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
	  htim3.Instance->CCR3 = 2;
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <buzzer_task+0x70>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_PRESCALER(&htim3, 400);
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <buzzer_task+0x70>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001a76:	2108      	movs	r1, #8
 8001a78:	4812      	ldr	r0, [pc, #72]	; (8001ac4 <buzzer_task+0x70>)
 8001a7a:	f003 ff01 	bl	8005880 <HAL_TIM_PWM_Start>
	  uint16_t presc = 200;
 8001a7e:	23c8      	movs	r3, #200	; 0xc8
 8001a80:	81fb      	strh	r3, [r7, #14]
	  int dir = 1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]

	  while (presc > 0){
 8001a86:	e014      	b.n	8001ab2 <buzzer_task+0x5e>
		  presc += dir;
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	89fb      	ldrh	r3, [r7, #14]
 8001a8e:	4413      	add	r3, r2
 8001a90:	81fb      	strh	r3, [r7, #14]
	  __HAL_TIM_SET_PRESCALER(&htim3, presc);
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <buzzer_task+0x70>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	89fa      	ldrh	r2, [r7, #14]
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
	  	  vTaskDelay(5);
 8001a9a:	2005      	movs	r0, #5
 8001a9c:	f007 f8d0 	bl	8008c40 <vTaskDelay>
		  if (presc < 42 || presc > 200 ){
 8001aa0:	89fb      	ldrh	r3, [r7, #14]
 8001aa2:	2b29      	cmp	r3, #41	; 0x29
 8001aa4:	d902      	bls.n	8001aac <buzzer_task+0x58>
 8001aa6:	89fb      	ldrh	r3, [r7, #14]
 8001aa8:	2bc8      	cmp	r3, #200	; 0xc8
 8001aaa:	d902      	bls.n	8001ab2 <buzzer_task+0x5e>
			  dir = -dir;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	425b      	negs	r3, r3
 8001ab0:	60bb      	str	r3, [r7, #8]
	  while (presc > 0){
 8001ab2:	89fb      	ldrh	r3, [r7, #14]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1e7      	bne.n	8001a88 <buzzer_task+0x34>
		  }
	  }

}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000a5c 	.word	0x20000a5c

08001ac8 <hts_loop>:
hts_data_t temphum_data;
void hts_init(){

}

void hts_loop(){
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <hts_task>:

void hts_task(void* pvParameters){
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
	BSP_TSENSOR_Init();
 8001ade:	f000 fb3d 	bl	800215c <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 8001ae2:	f000 fb1b 	bl	800211c <BSP_HSENSOR_Init>
	vTaskDelay(5);
 8001ae6:	2005      	movs	r0, #5
 8001ae8:	f007 f8aa 	bl	8008c40 <vTaskDelay>
	while(1){

		hts_loop();
 8001aec:	f7ff ffec 	bl	8001ac8 <hts_loop>
		vTaskDelay(5);
 8001af0:	2005      	movs	r0, #5
 8001af2:	f007 f8a5 	bl	8008c40 <vTaskDelay>
		hts_loop();
 8001af6:	e7f9      	b.n	8001aec <hts_task+0x16>

08001af8 <lis_task>:

void lis_loop(){

}

void lis_task(void* pvParameters){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	vTaskDelay(5);
 8001b00:	2005      	movs	r0, #5
 8001b02:	f007 f89d 	bl	8008c40 <vTaskDelay>
	uint8_t toggle = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
	while(1){
		vTaskDelay(5);
 8001b0a:	2005      	movs	r0, #5
 8001b0c:	f007 f898 	bl	8008c40 <vTaskDelay>
		toggle = !toggle;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bf0c      	ite	eq
 8001b16:	2301      	moveq	r3, #1
 8001b18:	2300      	movne	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(5);
 8001b1e:	e7f4      	b.n	8001b0a <lis_task+0x12>

08001b20 <lps_init>:
#include "lps_task.h"


lps_data_t pressure_data;

void lps_init(){
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <lps_loop>:

void lps_loop(){
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <lps_task>:

void lps_task(void* argument){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	lps_init();
 8001b44:	f7ff ffec 	bl	8001b20 <lps_init>
	vTaskDelay(5);
 8001b48:	2005      	movs	r0, #5
 8001b4a:	f007 f879 	bl	8008c40 <vTaskDelay>
	while(1){
		lps_loop();
 8001b4e:	f7ff ffee 	bl	8001b2e <lps_loop>
		vTaskDelay(5);
 8001b52:	2005      	movs	r0, #5
 8001b54:	f007 f874 	bl	8008c40 <vTaskDelay>
		lps_loop();
 8001b58:	e7f9      	b.n	8001b4e <lps_task+0x12>
 8001b5a:	0000      	movs	r0, r0
 8001b5c:	0000      	movs	r0, r0
	...

08001b60 <lsm_task>:

axis_data_t accel_data;
axis_data_t gyro_data;


void lsm_task(void* argument){
 8001b60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b64:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8001b68:	af04      	add	r7, sp, #16
 8001b6a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001b6e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001b72:	6018      	str	r0, [r3, #0]
	BSP_ACCELERO_Init();
 8001b74:	f000 fa3a 	bl	8001fec <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8001b78:	f000 fa8e 	bl	8002098 <BSP_GYRO_Init>

	char tx_buffer[256];
	int tx_len;
	int16_t accel_data_i16[3] = { 0 };
 8001b7c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001b80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	809a      	strh	r2, [r3, #4]
	float accel_data[3] = {0.5, 0.5, 0.5};			// array to store the x, y and z readings.
 8001b8a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001b8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b92:	4a61      	ldr	r2, [pc, #388]	; (8001d18 <lsm_task+0x1b8>)
 8001b94:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(1){
		TickType_t last_wake_time = xTaskGetTickCount();
 8001b9a:	f007 f99f 	bl	8008edc <xTaskGetTickCount>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001ba4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ba8:	601a      	str	r2, [r3, #0]
		BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
 8001baa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 fa5a 	bl	8002068 <BSP_ACCELERO_AccGetXYZ>
		// the function above returns 16 bit integers which are acceleration in mg (9.8/1000 m/s^2).
//		// Converting to float to print the actual acceleration.
		accel_data[0] = (float)accel_data_i16[0] * (9.8/1000.0f);
 8001bb4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001bb8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc8:	ee17 0a90 	vmov	r0, s15
 8001bcc:	f7fe fcbc 	bl	8000548 <__aeabi_f2d>
 8001bd0:	a34f      	add	r3, pc, #316	; (adr r3, 8001d10 <lsm_task+0x1b0>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe fd0f 	bl	80005f8 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7ff f801 	bl	8000be8 <__aeabi_d2f>
 8001be6:	4602      	mov	r2, r0
 8001be8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001bec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bf0:	601a      	str	r2, [r3, #0]
		accel_data[1] = (float)accel_data_i16[1] * (9.8/1000.0f);
 8001bf2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001bf6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001bfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c06:	ee17 0a90 	vmov	r0, s15
 8001c0a:	f7fe fc9d 	bl	8000548 <__aeabi_f2d>
 8001c0e:	a340      	add	r3, pc, #256	; (adr r3, 8001d10 <lsm_task+0x1b0>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fcf0 	bl	80005f8 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe ffe2 	bl	8000be8 <__aeabi_d2f>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001c2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c2e:	605a      	str	r2, [r3, #4]
		accel_data[2] = (float)accel_data_i16[2] * (9.8/1000.0f);
 8001c30:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001c34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c44:	ee17 0a90 	vmov	r0, s15
 8001c48:	f7fe fc7e 	bl	8000548 <__aeabi_f2d>
 8001c4c:	a330      	add	r3, pc, #192	; (adr r3, 8001d10 <lsm_task+0x1b0>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fcd1 	bl	80005f8 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe ffc3 	bl	8000be8 <__aeabi_d2f>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001c68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c6c:	609a      	str	r2, [r3, #8]
		tx_len = sprintf((char*)tx_buffer,"AccelX : %f; Accel Y: %f; Accel Z: %f\n", accel_data[0], accel_data[1], accel_data[2]);
 8001c6e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001c72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc65 	bl	8000548 <__aeabi_f2d>
 8001c7e:	4680      	mov	r8, r0
 8001c80:	4689      	mov	r9, r1
 8001c82:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001c86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc5b 	bl	8000548 <__aeabi_f2d>
 8001c92:	4604      	mov	r4, r0
 8001c94:	460d      	mov	r5, r1
 8001c96:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001c9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc51 	bl	8000548 <__aeabi_f2d>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001cae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cb2:	e9cd 4500 	strd	r4, r5, [sp]
 8001cb6:	4642      	mov	r2, r8
 8001cb8:	464b      	mov	r3, r9
 8001cba:	4918      	ldr	r1, [pc, #96]	; (8001d1c <lsm_task+0x1bc>)
 8001cbc:	f009 fdc6 	bl	800b84c <siprintf>
 8001cc0:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
		queue_UART_msg_t accelero_send;
		memcpy(accelero_send.uart_chars, tx_buffer, tx_len);
 8001cc4:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001cc8:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f008 fe15 	bl	800a902 <memcpy>
		accelero_send.char_len = tx_len;
 8001cd8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001ce2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001ce6:	805a      	strh	r2, [r3, #2]
		accelero_send.type = TX;
 8001ce8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001cec:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
		queue_UART_msg_t *accelero_pter = &accelero_send;
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
//		xQueueSendToBack(UART1_queue,&accelero_pter,0);
		vTaskDelayUntil(&last_wake_time, 100);
 8001cfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d00:	2164      	movs	r1, #100	; 0x64
 8001d02:	4618      	mov	r0, r3
 8001d04:	f006 ff1e 	bl	8008b44 <vTaskDelayUntil>
	while(1){
 8001d08:	e747      	b.n	8001b9a <lsm_task+0x3a>
 8001d0a:	bf00      	nop
 8001d0c:	f3af 8000 	nop.w
 8001d10:	bc01a36f 	.word	0xbc01a36f
 8001d14:	3f841205 	.word	0x3f841205
 8001d18:	0800f188 	.word	0x0800f188
 8001d1c:	0800f160 	.word	0x0800f160

08001d20 <uart1_task>:
#include "uart1_task.h"




void uart1_task(void* pvParameters){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	//init code
	queue_UART_msg_t *uart_q;
	while(1){
		//running code
//		xQueueReceive(UART1_queue, (void *)&uart_q, 10000);
		if (uart_q->type == TX){
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <uart1_task+0x20>
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)uart_q->uart_chars, uart_q->char_len);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1d19      	adds	r1, r3, #4
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	885b      	ldrh	r3, [r3, #2]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4803      	ldr	r0, [pc, #12]	; (8001d48 <uart1_task+0x28>)
 8001d3c:	f004 fd8c 	bl	8006858 <HAL_UART_Transmit_DMA>
		}
		vTaskDelay(1);
 8001d40:	2001      	movs	r0, #1
 8001d42:	f006 ff7d 	bl	8008c40 <vTaskDelay>
		if (uart_q->type == TX){
 8001d46:	e7ef      	b.n	8001d28 <uart1_task+0x8>
 8001d48:	20000aa8 	.word	0x20000aa8

08001d4c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001d54:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <I2Cx_MspInit+0xa8>)
 8001d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d58:	4a26      	ldr	r2, [pc, #152]	; (8001df4 <I2Cx_MspInit+0xa8>)
 8001d5a:	f043 0302 	orr.w	r3, r3, #2
 8001d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d60:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <I2Cx_MspInit+0xa8>)
 8001d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001d6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d70:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001d72:	2312      	movs	r3, #18
 8001d74:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	481b      	ldr	r0, [pc, #108]	; (8001df8 <I2Cx_MspInit+0xac>)
 8001d8a:	f001 f961 	bl	8003050 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	4619      	mov	r1, r3
 8001d94:	4818      	ldr	r0, [pc, #96]	; (8001df8 <I2Cx_MspInit+0xac>)
 8001d96:	f001 f95b 	bl	8003050 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <I2Cx_MspInit+0xa8>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <I2Cx_MspInit+0xa8>)
 8001da0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001da4:	6593      	str	r3, [r2, #88]	; 0x58
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <I2Cx_MspInit+0xa8>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <I2Cx_MspInit+0xa8>)
 8001db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db6:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <I2Cx_MspInit+0xa8>)
 8001db8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dbc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <I2Cx_MspInit+0xa8>)
 8001dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc2:	4a0c      	ldr	r2, [pc, #48]	; (8001df4 <I2Cx_MspInit+0xa8>)
 8001dc4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dc8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	210f      	movs	r1, #15
 8001dce:	2021      	movs	r0, #33	; 0x21
 8001dd0:	f000 fe9e 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001dd4:	2021      	movs	r0, #33	; 0x21
 8001dd6:	f000 feb7 	bl	8002b48 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	210f      	movs	r1, #15
 8001dde:	2022      	movs	r0, #34	; 0x22
 8001de0:	f000 fe96 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001de4:	2022      	movs	r0, #34	; 0x22
 8001de6:	f000 feaf 	bl	8002b48 <HAL_NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3728      	adds	r7, #40	; 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	48000400 	.word	0x48000400

08001dfc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <I2Cx_Init+0x54>)
 8001e08:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a11      	ldr	r2, [pc, #68]	; (8001e54 <I2Cx_Init+0x58>)
 8001e0e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff89 	bl	8001d4c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f001 fab2 	bl	80033a4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001e40:	2100      	movs	r1, #0
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f002 f854 	bl	8003ef0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40005800 	.word	0x40005800
 8001e54:	00702681 	.word	0x00702681

08001e58 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af04      	add	r7, sp, #16
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	4608      	mov	r0, r1
 8001e62:	4611      	mov	r1, r2
 8001e64:	461a      	mov	r2, r3
 8001e66:	4603      	mov	r3, r0
 8001e68:	72fb      	strb	r3, [r7, #11]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	813b      	strh	r3, [r7, #8]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e76:	7afb      	ldrb	r3, [r7, #11]
 8001e78:	b299      	uxth	r1, r3
 8001e7a:	88f8      	ldrh	r0, [r7, #6]
 8001e7c:	893a      	ldrh	r2, [r7, #8]
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	9302      	str	r3, [sp, #8]
 8001e84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f001 fc6e 	bl	8003770 <HAL_I2C_Mem_Read>
 8001e94:	4603      	mov	r3, r0
 8001e96:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e98:	7dfb      	ldrb	r3, [r7, #23]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001e9e:	7afb      	ldrb	r3, [r7, #11]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f832 	bl	8001f0c <I2Cx_Error>
  }
  return status;
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b08a      	sub	sp, #40	; 0x28
 8001eb6:	af04      	add	r7, sp, #16
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	4608      	mov	r0, r1
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	72fb      	strb	r3, [r7, #11]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	813b      	strh	r3, [r7, #8]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ed0:	7afb      	ldrb	r3, [r7, #11]
 8001ed2:	b299      	uxth	r1, r3
 8001ed4:	88f8      	ldrh	r0, [r7, #6]
 8001ed6:	893a      	ldrh	r2, [r7, #8]
 8001ed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001edc:	9302      	str	r3, [sp, #8]
 8001ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f001 fb2d 	bl	8003548 <HAL_I2C_Mem_Write>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d004      	beq.n	8001f02 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001ef8:	7afb      	ldrb	r3, [r7, #11]
 8001efa:	4619      	mov	r1, r3
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f805 	bl	8001f0c <I2Cx_Error>
  }
  return status;
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f001 fad2 	bl	80034c2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ff6c 	bl	8001dfc <I2Cx_Init>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <SENSOR_IO_Init+0x10>)
 8001f32:	f7ff ff63 	bl	8001dfc <I2Cx_Init>
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000bbc 	.word	0x20000bbc

08001f40 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	71bb      	strb	r3, [r7, #6]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001f52:	79bb      	ldrb	r3, [r7, #6]
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	79f9      	ldrb	r1, [r7, #7]
 8001f58:	2301      	movs	r3, #1
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	1d7b      	adds	r3, r7, #5
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2301      	movs	r3, #1
 8001f62:	4803      	ldr	r0, [pc, #12]	; (8001f70 <SENSOR_IO_Write+0x30>)
 8001f64:	f7ff ffa5 	bl	8001eb2 <I2Cx_WriteMultiple>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000bbc 	.word	0x20000bbc

08001f74 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	460a      	mov	r2, r1
 8001f7e:	71fb      	strb	r3, [r7, #7]
 8001f80:	4613      	mov	r3, r2
 8001f82:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001f88:	79bb      	ldrb	r3, [r7, #6]
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	79f9      	ldrb	r1, [r7, #7]
 8001f8e:	2301      	movs	r3, #1
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	f107 030f 	add.w	r3, r7, #15
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	4804      	ldr	r0, [pc, #16]	; (8001fac <SENSOR_IO_Read+0x38>)
 8001f9c:	f7ff ff5c 	bl	8001e58 <I2Cx_ReadMultiple>

  return read_value;
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000bbc 	.word	0x20000bbc

08001fb0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	603a      	str	r2, [r7, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	71bb      	strb	r3, [r7, #6]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001fc6:	79bb      	ldrb	r3, [r7, #6]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	79f9      	ldrb	r1, [r7, #7]
 8001fcc:	88bb      	ldrh	r3, [r7, #4]
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <SENSOR_IO_ReadMultiple+0x38>)
 8001fd8:	f7ff ff3e 	bl	8001e58 <I2Cx_ReadMultiple>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b29b      	uxth	r3, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000bbc 	.word	0x20000bbc

08001fec <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001ffa:	4b19      	ldr	r3, [pc, #100]	; (8002060 <BSP_ACCELERO_Init+0x74>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	4798      	blx	r3
 8002000:	4603      	mov	r3, r0
 8002002:	2b6a      	cmp	r3, #106	; 0x6a
 8002004:	d002      	beq.n	800200c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
 800200a:	e024      	b.n	8002056 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800200c:	4b15      	ldr	r3, [pc, #84]	; (8002064 <BSP_ACCELERO_Init+0x78>)
 800200e:	4a14      	ldr	r2, [pc, #80]	; (8002060 <BSP_ACCELERO_Init+0x74>)
 8002010:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002012:	2330      	movs	r3, #48	; 0x30
 8002014:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800201a:	2300      	movs	r3, #0
 800201c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800201e:	2340      	movs	r3, #64	; 0x40
 8002020:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800202a:	797a      	ldrb	r2, [r7, #5]
 800202c:	7abb      	ldrb	r3, [r7, #10]
 800202e:	4313      	orrs	r3, r2
 8002030:	b2db      	uxtb	r3, r3
 8002032:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002034:	7a3b      	ldrb	r3, [r7, #8]
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	b2db      	uxtb	r3, r3
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	b21a      	sxth	r2, r3
 8002040:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	b21b      	sxth	r3, r3
 8002048:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <BSP_ACCELERO_Init+0x78>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	89ba      	ldrh	r2, [r7, #12]
 8002052:	4610      	mov	r0, r2
 8002054:	4798      	blx	r3
  }  

  return ret;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000020 	.word	0x20000020
 8002064:	20000c10 	.word	0x20000c10

08002068 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d009      	beq.n	800208c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	2b00      	cmp	r3, #0
 8002080:	d004      	beq.n	800208c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8002082:	4b04      	ldr	r3, [pc, #16]	; (8002094 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
    }
  }
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000c10 	.word	0x20000c10

08002098 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80020a2:	2300      	movs	r3, #0
 80020a4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80020a6:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <BSP_GYRO_Init+0x7c>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4798      	blx	r3
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b6a      	cmp	r3, #106	; 0x6a
 80020b0:	d002      	beq.n	80020b8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	e028      	b.n	800210a <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80020b8:	4b17      	ldr	r3, [pc, #92]	; (8002118 <BSP_GYRO_Init+0x80>)
 80020ba:	4a16      	ldr	r2, [pc, #88]	; (8002114 <BSP_GYRO_Init+0x7c>)
 80020bc:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80020c2:	2330      	movs	r3, #48	; 0x30
 80020c4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80020ce:	2340      	movs	r3, #64	; 0x40
 80020d0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80020d6:	230c      	movs	r3, #12
 80020d8:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80020da:	7aba      	ldrb	r2, [r7, #10]
 80020dc:	797b      	ldrb	r3, [r7, #5]
 80020de:	4313      	orrs	r3, r2
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80020e4:	7a3b      	ldrb	r3, [r7, #8]
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	b21a      	sxth	r2, r3
 80020f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <BSP_GYRO_Init+0x80>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	89ba      	ldrh	r2, [r7, #12]
 8002102:	4610      	mov	r0, r2
 8002104:	4798      	blx	r3
    
    ret = GYRO_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000054 	.word	0x20000054
 8002118:	20000c14 	.word	0x20000c14

0800211c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <BSP_HSENSOR_Init+0x38>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	20be      	movs	r0, #190	; 0xbe
 8002128:	4798      	blx	r3
 800212a:	4603      	mov	r3, r0
 800212c:	2bbc      	cmp	r3, #188	; 0xbc
 800212e:	d002      	beq.n	8002136 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	e009      	b.n	800214a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <BSP_HSENSOR_Init+0x3c>)
 8002138:	4a06      	ldr	r2, [pc, #24]	; (8002154 <BSP_HSENSOR_Init+0x38>)
 800213a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <BSP_HSENSOR_Init+0x3c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	20be      	movs	r0, #190	; 0xbe
 8002144:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800214a:	687b      	ldr	r3, [r7, #4]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000004 	.word	0x20000004
 8002158:	20000c18 	.word	0x20000c18

0800215c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <BSP_TSENSOR_Init+0x30>)
 8002168:	4a09      	ldr	r2, [pc, #36]	; (8002190 <BSP_TSENSOR_Init+0x34>)
 800216a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800216c:	f7ff fede 	bl	8001f2c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <BSP_TSENSOR_Init+0x30>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2100      	movs	r1, #0
 8002178:	20be      	movs	r0, #190	; 0xbe
 800217a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002180:	79fb      	ldrb	r3, [r7, #7]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000c1c 	.word	0x20000c1c
 8002190:	20000010 	.word	0x20000010

08002194 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2120      	movs	r1, #32
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fee5 	bl	8001f74 <SENSOR_IO_Read>
 80021aa:	4603      	mov	r3, r0
 80021ac:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	f023 0304 	bic.w	r3, r3, #4
 80021b4:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	f023 0303 	bic.w	r3, r3, #3
 80021c4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021d4:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	2120      	movs	r1, #32
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff feae 	bl	8001f40 <SENSOR_IO_Write>
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80021f6:	2300      	movs	r3, #0
 80021f8:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80021fa:	f7ff fe97 	bl	8001f2c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	210f      	movs	r1, #15
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff feb5 	bl	8001f74 <SENSOR_IO_Read>
 800220a:	4603      	mov	r3, r0
 800220c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	b2d8      	uxtb	r0, r3
 8002226:	f107 020c 	add.w	r2, r7, #12
 800222a:	2302      	movs	r3, #2
 800222c:	21b0      	movs	r1, #176	; 0xb0
 800222e:	f7ff febf 	bl	8001fb0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002232:	7b3b      	ldrb	r3, [r7, #12]
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800223a:	7b7b      	ldrb	r3, [r7, #13]
 800223c:	085b      	lsrs	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	b2d8      	uxtb	r0, r3
 8002246:	f107 020c 	add.w	r2, r7, #12
 800224a:	2302      	movs	r3, #2
 800224c:	21b6      	movs	r1, #182	; 0xb6
 800224e:	f7ff feaf 	bl	8001fb0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002252:	7b7b      	ldrb	r3, [r7, #13]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	b21a      	sxth	r2, r3
 8002258:	7b3b      	ldrb	r3, [r7, #12]
 800225a:	b21b      	sxth	r3, r3
 800225c:	4313      	orrs	r3, r2
 800225e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	b2d8      	uxtb	r0, r3
 8002264:	f107 020c 	add.w	r2, r7, #12
 8002268:	2302      	movs	r3, #2
 800226a:	21ba      	movs	r1, #186	; 0xba
 800226c:	f7ff fea0 	bl	8001fb0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002270:	7b7b      	ldrb	r3, [r7, #13]
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	b21a      	sxth	r2, r3
 8002276:	7b3b      	ldrb	r3, [r7, #12]
 8002278:	b21b      	sxth	r3, r3
 800227a:	4313      	orrs	r3, r2
 800227c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	b2d8      	uxtb	r0, r3
 8002282:	f107 020c 	add.w	r2, r7, #12
 8002286:	2302      	movs	r3, #2
 8002288:	21a8      	movs	r1, #168	; 0xa8
 800228a:	f7ff fe91 	bl	8001fb0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800228e:	7b7b      	ldrb	r3, [r7, #13]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	b21a      	sxth	r2, r3
 8002294:	7b3b      	ldrb	r3, [r7, #12]
 8002296:	b21b      	sxth	r3, r3
 8002298:	4313      	orrs	r3, r2
 800229a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800229c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80022a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ae:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80022b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	ee07 3a90 	vmov	s15, r3
 80022bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80022c4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80022c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ea:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80022ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80022f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022fa:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80022fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002302:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002348 <HTS221_H_ReadHumidity+0x130>
 8002306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230e:	dd01      	ble.n	8002314 <HTS221_H_ReadHumidity+0xfc>
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HTS221_H_ReadHumidity+0x134>)
 8002312:	e00a      	b.n	800232a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002314:	edd7 7a04 	vldr	s15, [r7, #16]
 8002318:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002320:	d502      	bpl.n	8002328 <HTS221_H_ReadHumidity+0x110>
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e000      	b.n	800232a <HTS221_H_ReadHumidity+0x112>
 8002328:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800232a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800232c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002330:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002334:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002338:	eef0 7a66 	vmov.f32	s15, s13
}
 800233c:	eeb0 0a67 	vmov.f32	s0, s15
 8002340:	3720      	adds	r7, #32
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	447a0000 	.word	0x447a0000
 800234c:	447a0000 	.word	0x447a0000

08002350 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2120      	movs	r1, #32
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fe06 	bl	8001f74 <SENSOR_IO_Read>
 8002368:	4603      	mov	r3, r0
 800236a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	f023 0303 	bic.w	r3, r3, #3
 8002382:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002392:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	2120      	movs	r1, #32
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fdcf 	bl	8001f40 <SENSOR_IO_Write>
}
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b088      	sub	sp, #32
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	b2d8      	uxtb	r0, r3
 80023b8:	f107 0208 	add.w	r2, r7, #8
 80023bc:	2302      	movs	r3, #2
 80023be:	21b2      	movs	r1, #178	; 0xb2
 80023c0:	f7ff fdf6 	bl	8001fb0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2135      	movs	r1, #53	; 0x35
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fdd2 	bl	8001f74 <SENSOR_IO_Read>
 80023d0:	4603      	mov	r3, r0
 80023d2:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80023d4:	7ffb      	ldrb	r3, [r7, #31]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	b21b      	sxth	r3, r3
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	b21a      	sxth	r2, r3
 80023e0:	7a3b      	ldrb	r3, [r7, #8]
 80023e2:	b21b      	sxth	r3, r3
 80023e4:	4313      	orrs	r3, r2
 80023e6:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80023e8:	7ffb      	ldrb	r3, [r7, #31]
 80023ea:	019b      	lsls	r3, r3, #6
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	7a7b      	ldrb	r3, [r7, #9]
 80023f6:	b21b      	sxth	r3, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80023fc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002400:	10db      	asrs	r3, r3, #3
 8002402:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002404:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002408:	10db      	asrs	r3, r3, #3
 800240a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	b2d8      	uxtb	r0, r3
 8002410:	f107 0208 	add.w	r2, r7, #8
 8002414:	2304      	movs	r3, #4
 8002416:	21bc      	movs	r1, #188	; 0xbc
 8002418:	f7ff fdca 	bl	8001fb0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800241c:	7a7b      	ldrb	r3, [r7, #9]
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	b21a      	sxth	r2, r3
 8002422:	7a3b      	ldrb	r3, [r7, #8]
 8002424:	b21b      	sxth	r3, r3
 8002426:	4313      	orrs	r3, r2
 8002428:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800242a:	7afb      	ldrb	r3, [r7, #11]
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	b21a      	sxth	r2, r3
 8002430:	7abb      	ldrb	r3, [r7, #10]
 8002432:	b21b      	sxth	r3, r3
 8002434:	4313      	orrs	r3, r2
 8002436:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	b2d8      	uxtb	r0, r3
 800243c:	f107 0208 	add.w	r2, r7, #8
 8002440:	2302      	movs	r3, #2
 8002442:	21aa      	movs	r1, #170	; 0xaa
 8002444:	f7ff fdb4 	bl	8001fb0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002448:	7a7b      	ldrb	r3, [r7, #9]
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	b21a      	sxth	r2, r3
 800244e:	7a3b      	ldrb	r3, [r7, #8]
 8002450:	b21b      	sxth	r3, r3
 8002452:	4313      	orrs	r3, r2
 8002454:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002456:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800245a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002468:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800246c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800247a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800247e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002482:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002494:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a4:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	ee07 3a90 	vmov	s15, r3
}
 80024ae:	eeb0 0a67 	vmov.f32	s0, s15
 80024b2:	3720      	adds	r7, #32
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80024c6:	2110      	movs	r1, #16
 80024c8:	20d4      	movs	r0, #212	; 0xd4
 80024ca:	f7ff fd53 	bl	8001f74 <SENSOR_IO_Read>
 80024ce:	4603      	mov	r3, r0
 80024d0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80024d6:	7bbb      	ldrb	r3, [r7, #14]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80024de:	7bba      	ldrb	r2, [r7, #14]
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80024e6:	7bbb      	ldrb	r3, [r7, #14]
 80024e8:	461a      	mov	r2, r3
 80024ea:	2110      	movs	r1, #16
 80024ec:	20d4      	movs	r0, #212	; 0xd4
 80024ee:	f7ff fd27 	bl	8001f40 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80024f2:	2112      	movs	r1, #18
 80024f4:	20d4      	movs	r0, #212	; 0xd4
 80024f6:	f7ff fd3d 	bl	8001f74 <SENSOR_IO_Read>
 80024fa:	4603      	mov	r3, r0
 80024fc:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	b29b      	uxth	r3, r3
 8002504:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002506:	7bbb      	ldrb	r3, [r7, #14]
 8002508:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800250c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800250e:	7bba      	ldrb	r2, [r7, #14]
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	4313      	orrs	r3, r2
 8002514:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002516:	7bbb      	ldrb	r3, [r7, #14]
 8002518:	461a      	mov	r2, r3
 800251a:	2112      	movs	r1, #18
 800251c:	20d4      	movs	r0, #212	; 0xd4
 800251e:	f7ff fd0f 	bl	8001f40 <SENSOR_IO_Write>


  /* Read INT1_CTRL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8002522:	210d      	movs	r1, #13
 8002524:	20d4      	movs	r0, #212	; 0xd4
 8002526:	f7ff fd25 	bl	8001f74 <SENSOR_IO_Read>
 800252a:	4603      	mov	r3, r0
 800252c:	73bb      	strb	r3, [r7, #14]
  tmp |= (1 | 1<< 1); //set ACC drdy and gyro drdy on int pin1
 800252e:	7bbb      	ldrb	r3, [r7, #14]
 8002530:	f043 0303 	orr.w	r3, r3, #3
 8002534:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8002536:	7bbb      	ldrb	r3, [r7, #14]
 8002538:	461a      	mov	r2, r3
 800253a:	210d      	movs	r1, #13
 800253c:	20d4      	movs	r0, #212	; 0xd4
 800253e:	f7ff fcff 	bl	8001f40 <SENSOR_IO_Write>
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002550:	2300      	movs	r3, #0
 8002552:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002554:	2110      	movs	r1, #16
 8002556:	20d4      	movs	r0, #212	; 0xd4
 8002558:	f7ff fd0c 	bl	8001f74 <SENSOR_IO_Read>
 800255c:	4603      	mov	r3, r0
 800255e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	461a      	mov	r2, r3
 800256c:	2110      	movs	r1, #16
 800256e:	20d4      	movs	r0, #212	; 0xd4
 8002570:	f7ff fce6 	bl	8001f40 <SENSOR_IO_Write>
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002580:	f7ff fcd4 	bl	8001f2c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002584:	210f      	movs	r1, #15
 8002586:	20d4      	movs	r0, #212	; 0xd4
 8002588:	f7ff fcf4 	bl	8001f74 <SENSOR_IO_Read>
 800258c:	4603      	mov	r3, r0
}
 800258e:	4618      	mov	r0, r3
 8002590:	bd80      	pop	{r7, pc}

08002592 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80025a0:	2115      	movs	r1, #21
 80025a2:	20d4      	movs	r0, #212	; 0xd4
 80025a4:	f7ff fce6 	bl	8001f74 <SENSOR_IO_Read>
 80025a8:	4603      	mov	r3, r0
 80025aa:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	f023 0310 	bic.w	r3, r3, #16
 80025b2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	f043 0310 	orr.w	r3, r3, #16
 80025c0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	461a      	mov	r2, r3
 80025c6:	2115      	movs	r1, #21
 80025c8:	20d4      	movs	r0, #212	; 0xd4
 80025ca:	f7ff fcb9 	bl	8001f40 <SENSOR_IO_Write>
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80025ee:	2110      	movs	r1, #16
 80025f0:	20d4      	movs	r0, #212	; 0xd4
 80025f2:	f7ff fcbf 	bl	8001f74 <SENSOR_IO_Read>
 80025f6:	4603      	mov	r3, r0
 80025f8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80025fa:	f107 0208 	add.w	r2, r7, #8
 80025fe:	2306      	movs	r3, #6
 8002600:	2128      	movs	r1, #40	; 0x28
 8002602:	20d4      	movs	r0, #212	; 0xd4
 8002604:	f7ff fcd4 	bl	8001fb0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002608:	2300      	movs	r3, #0
 800260a:	77fb      	strb	r3, [r7, #31]
 800260c:	e01c      	b.n	8002648 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800260e:	7ffb      	ldrb	r3, [r7, #31]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	3301      	adds	r3, #1
 8002614:	3320      	adds	r3, #32
 8002616:	443b      	add	r3, r7
 8002618:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800261c:	b29b      	uxth	r3, r3
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	b29a      	uxth	r2, r3
 8002622:	7ffb      	ldrb	r3, [r7, #31]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	3320      	adds	r3, #32
 8002628:	443b      	add	r3, r7
 800262a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800262e:	b29b      	uxth	r3, r3
 8002630:	4413      	add	r3, r2
 8002632:	b29a      	uxth	r2, r3
 8002634:	7ffb      	ldrb	r3, [r7, #31]
 8002636:	b212      	sxth	r2, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	3320      	adds	r3, #32
 800263c:	443b      	add	r3, r7
 800263e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002642:	7ffb      	ldrb	r3, [r7, #31]
 8002644:	3301      	adds	r3, #1
 8002646:	77fb      	strb	r3, [r7, #31]
 8002648:	7ffb      	ldrb	r3, [r7, #31]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d9df      	bls.n	800260e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800264e:	7dfb      	ldrb	r3, [r7, #23]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d829      	bhi.n	80026ac <LSM6DSL_AccReadXYZ+0xd4>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <LSM6DSL_AccReadXYZ+0x88>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	08002695 	.word	0x08002695
 8002664:	080026ad 	.word	0x080026ad
 8002668:	080026ad 	.word	0x080026ad
 800266c:	080026ad 	.word	0x080026ad
 8002670:	080026a7 	.word	0x080026a7
 8002674:	080026ad 	.word	0x080026ad
 8002678:	080026ad 	.word	0x080026ad
 800267c:	080026ad 	.word	0x080026ad
 8002680:	0800269b 	.word	0x0800269b
 8002684:	080026ad 	.word	0x080026ad
 8002688:	080026ad 	.word	0x080026ad
 800268c:	080026ad 	.word	0x080026ad
 8002690:	080026a1 	.word	0x080026a1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002694:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <LSM6DSL_AccReadXYZ+0x120>)
 8002696:	61bb      	str	r3, [r7, #24]
    break;
 8002698:	e008      	b.n	80026ac <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <LSM6DSL_AccReadXYZ+0x124>)
 800269c:	61bb      	str	r3, [r7, #24]
    break;
 800269e:	e005      	b.n	80026ac <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80026a0:	4b17      	ldr	r3, [pc, #92]	; (8002700 <LSM6DSL_AccReadXYZ+0x128>)
 80026a2:	61bb      	str	r3, [r7, #24]
    break;
 80026a4:	e002      	b.n	80026ac <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <LSM6DSL_AccReadXYZ+0x12c>)
 80026a8:	61bb      	str	r3, [r7, #24]
    break;    
 80026aa:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	77fb      	strb	r3, [r7, #31]
 80026b0:	e01a      	b.n	80026e8 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80026b2:	7ffb      	ldrb	r3, [r7, #31]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	3320      	adds	r3, #32
 80026b8:	443b      	add	r3, r7
 80026ba:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80026ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ce:	7ffb      	ldrb	r3, [r7, #31]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026da:	ee17 2a90 	vmov	r2, s15
 80026de:	b212      	sxth	r2, r2
 80026e0:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80026e2:	7ffb      	ldrb	r3, [r7, #31]
 80026e4:	3301      	adds	r3, #1
 80026e6:	77fb      	strb	r3, [r7, #31]
 80026e8:	7ffb      	ldrb	r3, [r7, #31]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d9e1      	bls.n	80026b2 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	3720      	adds	r7, #32
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	3d79db23 	.word	0x3d79db23
 80026fc:	3df9db23 	.word	0x3df9db23
 8002700:	3e79db23 	.word	0x3e79db23
 8002704:	3ef9db23 	.word	0x3ef9db23

08002708 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002716:	2111      	movs	r1, #17
 8002718:	20d4      	movs	r0, #212	; 0xd4
 800271a:	f7ff fc2b 	bl	8001f74 <SENSOR_IO_Read>
 800271e:	4603      	mov	r3, r0
 8002720:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002726:	7bbb      	ldrb	r3, [r7, #14]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800272e:	7bba      	ldrb	r2, [r7, #14]
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	4313      	orrs	r3, r2
 8002734:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002736:	7bbb      	ldrb	r3, [r7, #14]
 8002738:	461a      	mov	r2, r3
 800273a:	2111      	movs	r1, #17
 800273c:	20d4      	movs	r0, #212	; 0xd4
 800273e:	f7ff fbff 	bl	8001f40 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002742:	2112      	movs	r1, #18
 8002744:	20d4      	movs	r0, #212	; 0xd4
 8002746:	f7ff fc15 	bl	8001f74 <SENSOR_IO_Read>
 800274a:	4603      	mov	r3, r0
 800274c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	b29b      	uxth	r3, r3
 8002754:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002756:	7bbb      	ldrb	r3, [r7, #14]
 8002758:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800275c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800275e:	7bba      	ldrb	r2, [r7, #14]
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	4313      	orrs	r3, r2
 8002764:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002766:	7bbb      	ldrb	r3, [r7, #14]
 8002768:	461a      	mov	r2, r3
 800276a:	2112      	movs	r1, #18
 800276c:	20d4      	movs	r0, #212	; 0xd4
 800276e:	f7ff fbe7 	bl	8001f40 <SENSOR_IO_Write>
}
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002780:	2300      	movs	r3, #0
 8002782:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002784:	2111      	movs	r1, #17
 8002786:	20d4      	movs	r0, #212	; 0xd4
 8002788:	f7ff fbf4 	bl	8001f74 <SENSOR_IO_Read>
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	461a      	mov	r2, r3
 800279c:	2111      	movs	r1, #17
 800279e:	20d4      	movs	r0, #212	; 0xd4
 80027a0:	f7ff fbce 	bl	8001f40 <SENSOR_IO_Write>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80027b0:	f7ff fbbc 	bl	8001f2c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80027b4:	210f      	movs	r1, #15
 80027b6:	20d4      	movs	r0, #212	; 0xd4
 80027b8:	f7ff fbdc 	bl	8001f74 <SENSOR_IO_Read>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80027d0:	2116      	movs	r1, #22
 80027d2:	20d4      	movs	r0, #212	; 0xd4
 80027d4:	f7ff fbce 	bl	8001f74 <SENSOR_IO_Read>
 80027d8:	4603      	mov	r3, r0
 80027da:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027e2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027f0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	461a      	mov	r2, r3
 80027f6:	2116      	movs	r1, #22
 80027f8:	20d4      	movs	r0, #212	; 0xd4
 80027fa:	f7ff fba1 	bl	8001f40 <SENSOR_IO_Write>
}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8002810:	2300      	movs	r3, #0
 8002812:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800281e:	2111      	movs	r1, #17
 8002820:	20d4      	movs	r0, #212	; 0xd4
 8002822:	f7ff fba7 	bl	8001f74 <SENSOR_IO_Read>
 8002826:	4603      	mov	r3, r0
 8002828:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800282a:	f107 0208 	add.w	r2, r7, #8
 800282e:	2306      	movs	r3, #6
 8002830:	2122      	movs	r1, #34	; 0x22
 8002832:	20d4      	movs	r0, #212	; 0xd4
 8002834:	f7ff fbbc 	bl	8001fb0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002838:	2300      	movs	r3, #0
 800283a:	77fb      	strb	r3, [r7, #31]
 800283c:	e01c      	b.n	8002878 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800283e:	7ffb      	ldrb	r3, [r7, #31]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	3301      	adds	r3, #1
 8002844:	3320      	adds	r3, #32
 8002846:	443b      	add	r3, r7
 8002848:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800284c:	b29b      	uxth	r3, r3
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	b29a      	uxth	r2, r3
 8002852:	7ffb      	ldrb	r3, [r7, #31]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	3320      	adds	r3, #32
 8002858:	443b      	add	r3, r7
 800285a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800285e:	b29b      	uxth	r3, r3
 8002860:	4413      	add	r3, r2
 8002862:	b29a      	uxth	r2, r3
 8002864:	7ffb      	ldrb	r3, [r7, #31]
 8002866:	b212      	sxth	r2, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	3320      	adds	r3, #32
 800286c:	443b      	add	r3, r7
 800286e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002872:	7ffb      	ldrb	r3, [r7, #31]
 8002874:	3301      	adds	r3, #1
 8002876:	77fb      	strb	r3, [r7, #31]
 8002878:	7ffb      	ldrb	r3, [r7, #31]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d9df      	bls.n	800283e <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b0c      	cmp	r3, #12
 8002886:	d829      	bhi.n	80028dc <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8002888:	a201      	add	r2, pc, #4	; (adr r2, 8002890 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 800288a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288e:	bf00      	nop
 8002890:	080028c5 	.word	0x080028c5
 8002894:	080028dd 	.word	0x080028dd
 8002898:	080028dd 	.word	0x080028dd
 800289c:	080028dd 	.word	0x080028dd
 80028a0:	080028cb 	.word	0x080028cb
 80028a4:	080028dd 	.word	0x080028dd
 80028a8:	080028dd 	.word	0x080028dd
 80028ac:	080028dd 	.word	0x080028dd
 80028b0:	080028d1 	.word	0x080028d1
 80028b4:	080028dd 	.word	0x080028dd
 80028b8:	080028dd 	.word	0x080028dd
 80028bc:	080028dd 	.word	0x080028dd
 80028c0:	080028d7 	.word	0x080028d7
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80028c6:	61bb      	str	r3, [r7, #24]
    break;
 80028c8:	e008      	b.n	80028dc <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80028cc:	61bb      	str	r3, [r7, #24]
    break;
 80028ce:	e005      	b.n	80028dc <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80028d0:	4b15      	ldr	r3, [pc, #84]	; (8002928 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80028d2:	61bb      	str	r3, [r7, #24]
    break;
 80028d4:	e002      	b.n	80028dc <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80028d8:	61bb      	str	r3, [r7, #24]
    break;    
 80028da:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80028dc:	2300      	movs	r3, #0
 80028de:	77fb      	strb	r3, [r7, #31]
 80028e0:	e016      	b.n	8002910 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80028e2:	7ffb      	ldrb	r3, [r7, #31]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	3320      	adds	r3, #32
 80028e8:	443b      	add	r3, r7
 80028ea:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f6:	7ffb      	ldrb	r3, [r7, #31]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002906:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800290a:	7ffb      	ldrb	r3, [r7, #31]
 800290c:	3301      	adds	r3, #1
 800290e:	77fb      	strb	r3, [r7, #31]
 8002910:	7ffb      	ldrb	r3, [r7, #31]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d9e5      	bls.n	80028e2 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8002916:	bf00      	nop
 8002918:	bf00      	nop
 800291a:	3720      	adds	r7, #32
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	410c0000 	.word	0x410c0000
 8002924:	418c0000 	.word	0x418c0000
 8002928:	420c0000 	.word	0x420c0000
 800292c:	428c0000 	.word	0x428c0000

08002930 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293a:	2003      	movs	r0, #3
 800293c:	f000 f8dd 	bl	8002afa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002940:	200f      	movs	r0, #15
 8002942:	f7fe fd2b 	bl	800139c <HAL_InitTick>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	71fb      	strb	r3, [r7, #7]
 8002950:	e001      	b.n	8002956 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002952:	f7fe fcfb 	bl	800134c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002956:	79fb      	ldrb	r3, [r7, #7]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_IncTick+0x20>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_IncTick+0x24>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4413      	add	r3, r2
 8002970:	4a04      	ldr	r2, [pc, #16]	; (8002984 <HAL_IncTick+0x24>)
 8002972:	6013      	str	r3, [r2, #0]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	2000008c 	.word	0x2000008c
 8002984:	20000c20 	.word	0x20000c20

08002988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return uwTick;
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_GetTick+0x14>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000c20 	.word	0x20000c20

080029a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <__NVIC_SetPriorityGrouping+0x44>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029bc:	4013      	ands	r3, r2
 80029be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <__NVIC_SetPriorityGrouping+0x44>)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	60d3      	str	r3, [r2, #12]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029ec:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <__NVIC_GetPriorityGrouping+0x18>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	0a1b      	lsrs	r3, r3, #8
 80029f2:	f003 0307 	and.w	r3, r3, #7
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	db0b      	blt.n	8002a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	f003 021f 	and.w	r2, r3, #31
 8002a1c:	4907      	ldr	r1, [pc, #28]	; (8002a3c <__NVIC_EnableIRQ+0x38>)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	2001      	movs	r0, #1
 8002a26:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000e100 	.word	0xe000e100

08002a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	db0a      	blt.n	8002a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	490c      	ldr	r1, [pc, #48]	; (8002a8c <__NVIC_SetPriority+0x4c>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	440b      	add	r3, r1
 8002a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a68:	e00a      	b.n	8002a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4908      	ldr	r1, [pc, #32]	; (8002a90 <__NVIC_SetPriority+0x50>)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	3b04      	subs	r3, #4
 8002a78:	0112      	lsls	r2, r2, #4
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	761a      	strb	r2, [r3, #24]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000e100 	.word	0xe000e100
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	; 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f1c3 0307 	rsb	r3, r3, #7
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	bf28      	it	cs
 8002ab2:	2304      	movcs	r3, #4
 8002ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d902      	bls.n	8002ac4 <NVIC_EncodePriority+0x30>
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3b03      	subs	r3, #3
 8002ac2:	e000      	b.n	8002ac6 <NVIC_EncodePriority+0x32>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002adc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	43d9      	mvns	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	4313      	orrs	r3, r2
         );
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3724      	adds	r7, #36	; 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ff4c 	bl	80029a0 <__NVIC_SetPriorityGrouping>
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b22:	f7ff ff61 	bl	80029e8 <__NVIC_GetPriorityGrouping>
 8002b26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	6978      	ldr	r0, [r7, #20]
 8002b2e:	f7ff ffb1 	bl	8002a94 <NVIC_EncodePriority>
 8002b32:	4602      	mov	r2, r0
 8002b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ff80 	bl	8002a40 <__NVIC_SetPriority>
}
 8002b40:	bf00      	nop
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff54 	bl	8002a04 <__NVIC_EnableIRQ>
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e098      	b.n	8002ca8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b4d      	ldr	r3, [pc, #308]	; (8002cb4 <HAL_DMA_Init+0x150>)
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d80f      	bhi.n	8002ba2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b4b      	ldr	r3, [pc, #300]	; (8002cb8 <HAL_DMA_Init+0x154>)
 8002b8a:	4413      	add	r3, r2
 8002b8c:	4a4b      	ldr	r2, [pc, #300]	; (8002cbc <HAL_DMA_Init+0x158>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	009a      	lsls	r2, r3, #2
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a48      	ldr	r2, [pc, #288]	; (8002cc0 <HAL_DMA_Init+0x15c>)
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40
 8002ba0:	e00e      	b.n	8002bc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <HAL_DMA_Init+0x160>)
 8002baa:	4413      	add	r3, r2
 8002bac:	4a43      	ldr	r2, [pc, #268]	; (8002cbc <HAL_DMA_Init+0x158>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	009a      	lsls	r2, r3, #2
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a42      	ldr	r2, [pc, #264]	; (8002cc8 <HAL_DMA_Init+0x164>)
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c1a:	d039      	beq.n	8002c90 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	4a27      	ldr	r2, [pc, #156]	; (8002cc0 <HAL_DMA_Init+0x15c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d11a      	bne.n	8002c5c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c26:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <HAL_DMA_Init+0x168>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	f003 031c 	and.w	r3, r3, #28
 8002c32:	210f      	movs	r1, #15
 8002c34:	fa01 f303 	lsl.w	r3, r1, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	4924      	ldr	r1, [pc, #144]	; (8002ccc <HAL_DMA_Init+0x168>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002c40:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <HAL_DMA_Init+0x168>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4c:	f003 031c 	and.w	r3, r3, #28
 8002c50:	fa01 f303 	lsl.w	r3, r1, r3
 8002c54:	491d      	ldr	r1, [pc, #116]	; (8002ccc <HAL_DMA_Init+0x168>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
 8002c5a:	e019      	b.n	8002c90 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c5c:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <HAL_DMA_Init+0x16c>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	f003 031c 	and.w	r3, r3, #28
 8002c68:	210f      	movs	r1, #15
 8002c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	4917      	ldr	r1, [pc, #92]	; (8002cd0 <HAL_DMA_Init+0x16c>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002c76:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_DMA_Init+0x16c>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f003 031c 	and.w	r3, r3, #28
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	4911      	ldr	r1, [pc, #68]	; (8002cd0 <HAL_DMA_Init+0x16c>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	40020407 	.word	0x40020407
 8002cb8:	bffdfff8 	.word	0xbffdfff8
 8002cbc:	cccccccd 	.word	0xcccccccd
 8002cc0:	40020000 	.word	0x40020000
 8002cc4:	bffdfbf8 	.word	0xbffdfbf8
 8002cc8:	40020400 	.word	0x40020400
 8002ccc:	400200a8 	.word	0x400200a8
 8002cd0:	400204a8 	.word	0x400204a8

08002cd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_DMA_Start_IT+0x20>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e04b      	b.n	8002d8c <HAL_DMA_Start_IT+0xb8>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d13a      	bne.n	8002d7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0201 	bic.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f95f 	bl	8002ff0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 020e 	orr.w	r2, r2, #14
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e00f      	b.n	8002d6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0204 	bic.w	r2, r2, #4
 8002d5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 020a 	orr.w	r2, r2, #10
 8002d6a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e005      	b.n	8002d8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
 8002d88:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d008      	beq.n	8002dbe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2204      	movs	r2, #4
 8002db0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e022      	b.n	8002e04 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 020e 	bic.w	r2, r2, #14
 8002dcc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f003 021c 	and.w	r2, r3, #28
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f202 	lsl.w	r2, r1, r2
 8002df0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d005      	beq.n	8002e34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	e029      	b.n	8002e88 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 020e 	bic.w	r2, r2, #14
 8002e42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	f003 021c 	and.w	r2, r3, #28
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	2101      	movs	r1, #1
 8002e62:	fa01 f202 	lsl.w	r2, r1, r2
 8002e66:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4798      	blx	r3
    }
  }
  return status;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f003 031c 	and.w	r3, r3, #28
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d026      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x7a>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d021      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d107      	bne.n	8002ee6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0204 	bic.w	r2, r2, #4
 8002ee4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f003 021c 	and.w	r2, r3, #28
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d071      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002f0a:	e06c      	b.n	8002fe6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	f003 031c 	and.w	r3, r3, #28
 8002f14:	2202      	movs	r2, #2
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02e      	beq.n	8002f7e <HAL_DMA_IRQHandler+0xec>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d029      	beq.n	8002f7e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 020a 	bic.w	r2, r2, #10
 8002f46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	f003 021c 	and.w	r2, r3, #28
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d038      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f7c:	e033      	b.n	8002fe6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	f003 031c 	and.w	r3, r3, #28
 8002f86:	2208      	movs	r2, #8
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d02a      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x156>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d025      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 020e 	bic.w	r2, r2, #14
 8002faa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	f003 021c 	and.w	r2, r3, #28
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d004      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fe6:	bf00      	nop
 8002fe8:	bf00      	nop
}
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f003 021c 	and.w	r2, r3, #28
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2101      	movs	r1, #1
 800300c:	fa01 f202 	lsl.w	r2, r1, r2
 8003010:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b10      	cmp	r3, #16
 8003020:	d108      	bne.n	8003034 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003032:	e007      	b.n	8003044 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	60da      	str	r2, [r3, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800305e:	e17f      	b.n	8003360 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2101      	movs	r1, #1
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8171 	beq.w	800335a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d005      	beq.n	8003090 <HAL_GPIO_Init+0x40>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d130      	bne.n	80030f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030c6:	2201      	movs	r2, #1
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4013      	ands	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	091b      	lsrs	r3, r3, #4
 80030dc:	f003 0201 	and.w	r2, r3, #1
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d118      	bne.n	8003130 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003104:	2201      	movs	r2, #1
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	f003 0201 	and.w	r2, r3, #1
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b03      	cmp	r3, #3
 800313a:	d017      	beq.n	800316c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d123      	bne.n	80031c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	08da      	lsrs	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3208      	adds	r2, #8
 8003180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003184:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	220f      	movs	r2, #15
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	08da      	lsrs	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3208      	adds	r2, #8
 80031ba:	6939      	ldr	r1, [r7, #16]
 80031bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	2203      	movs	r2, #3
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0203 	and.w	r2, r3, #3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80ac 	beq.w	800335a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003202:	4b5f      	ldr	r3, [pc, #380]	; (8003380 <HAL_GPIO_Init+0x330>)
 8003204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003206:	4a5e      	ldr	r2, [pc, #376]	; (8003380 <HAL_GPIO_Init+0x330>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6613      	str	r3, [r2, #96]	; 0x60
 800320e:	4b5c      	ldr	r3, [pc, #368]	; (8003380 <HAL_GPIO_Init+0x330>)
 8003210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800321a:	4a5a      	ldr	r2, [pc, #360]	; (8003384 <HAL_GPIO_Init+0x334>)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	3302      	adds	r3, #2
 8003222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003226:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	220f      	movs	r2, #15
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003244:	d025      	beq.n	8003292 <HAL_GPIO_Init+0x242>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a4f      	ldr	r2, [pc, #316]	; (8003388 <HAL_GPIO_Init+0x338>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01f      	beq.n	800328e <HAL_GPIO_Init+0x23e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a4e      	ldr	r2, [pc, #312]	; (800338c <HAL_GPIO_Init+0x33c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d019      	beq.n	800328a <HAL_GPIO_Init+0x23a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a4d      	ldr	r2, [pc, #308]	; (8003390 <HAL_GPIO_Init+0x340>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_GPIO_Init+0x236>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a4c      	ldr	r2, [pc, #304]	; (8003394 <HAL_GPIO_Init+0x344>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00d      	beq.n	8003282 <HAL_GPIO_Init+0x232>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a4b      	ldr	r2, [pc, #300]	; (8003398 <HAL_GPIO_Init+0x348>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d007      	beq.n	800327e <HAL_GPIO_Init+0x22e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4a      	ldr	r2, [pc, #296]	; (800339c <HAL_GPIO_Init+0x34c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d101      	bne.n	800327a <HAL_GPIO_Init+0x22a>
 8003276:	2306      	movs	r3, #6
 8003278:	e00c      	b.n	8003294 <HAL_GPIO_Init+0x244>
 800327a:	2307      	movs	r3, #7
 800327c:	e00a      	b.n	8003294 <HAL_GPIO_Init+0x244>
 800327e:	2305      	movs	r3, #5
 8003280:	e008      	b.n	8003294 <HAL_GPIO_Init+0x244>
 8003282:	2304      	movs	r3, #4
 8003284:	e006      	b.n	8003294 <HAL_GPIO_Init+0x244>
 8003286:	2303      	movs	r3, #3
 8003288:	e004      	b.n	8003294 <HAL_GPIO_Init+0x244>
 800328a:	2302      	movs	r3, #2
 800328c:	e002      	b.n	8003294 <HAL_GPIO_Init+0x244>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_GPIO_Init+0x244>
 8003292:	2300      	movs	r3, #0
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	f002 0203 	and.w	r2, r2, #3
 800329a:	0092      	lsls	r2, r2, #2
 800329c:	4093      	lsls	r3, r2
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032a4:	4937      	ldr	r1, [pc, #220]	; (8003384 <HAL_GPIO_Init+0x334>)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	3302      	adds	r3, #2
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032b2:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <HAL_GPIO_Init+0x350>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4013      	ands	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032d6:	4a32      	ldr	r2, [pc, #200]	; (80033a0 <HAL_GPIO_Init+0x350>)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032dc:	4b30      	ldr	r3, [pc, #192]	; (80033a0 <HAL_GPIO_Init+0x350>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003300:	4a27      	ldr	r2, [pc, #156]	; (80033a0 <HAL_GPIO_Init+0x350>)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003306:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <HAL_GPIO_Init+0x350>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	43db      	mvns	r3, r3
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4013      	ands	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800332a:	4a1d      	ldr	r2, [pc, #116]	; (80033a0 <HAL_GPIO_Init+0x350>)
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_GPIO_Init+0x350>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	43db      	mvns	r3, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003354:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <HAL_GPIO_Init+0x350>)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	3301      	adds	r3, #1
 800335e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	fa22 f303 	lsr.w	r3, r2, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	f47f ae78 	bne.w	8003060 <HAL_GPIO_Init+0x10>
  }
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000
 8003384:	40010000 	.word	0x40010000
 8003388:	48000400 	.word	0x48000400
 800338c:	48000800 	.word	0x48000800
 8003390:	48000c00 	.word	0x48000c00
 8003394:	48001000 	.word	0x48001000
 8003398:	48001400 	.word	0x48001400
 800339c:	48001800 	.word	0x48001800
 80033a0:	40010400 	.word	0x40010400

080033a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e081      	b.n	80034ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f8a8 	bl	8003520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2224      	movs	r2, #36	; 0x24
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0201 	bic.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003404:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d107      	bne.n	800341e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	e006      	b.n	800342c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800342a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d104      	bne.n	800343e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800343c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800344c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003450:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003460:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69d9      	ldr	r1, [r3, #28]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1a      	ldr	r2, [r3, #32]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e021      	b.n	8003518 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2224      	movs	r2, #36	; 0x24
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0201 	bic.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f821 	bl	8003534 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	4608      	mov	r0, r1
 8003552:	4611      	mov	r1, r2
 8003554:	461a      	mov	r2, r3
 8003556:	4603      	mov	r3, r0
 8003558:	817b      	strh	r3, [r7, #10]
 800355a:	460b      	mov	r3, r1
 800355c:	813b      	strh	r3, [r7, #8]
 800355e:	4613      	mov	r3, r2
 8003560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b20      	cmp	r3, #32
 800356c:	f040 80f9 	bne.w	8003762 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_I2C_Mem_Write+0x34>
 8003576:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0ed      	b.n	8003764 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_I2C_Mem_Write+0x4e>
 8003592:	2302      	movs	r3, #2
 8003594:	e0e6      	b.n	8003764 <HAL_I2C_Mem_Write+0x21c>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800359e:	f7ff f9f3 	bl	8002988 <HAL_GetTick>
 80035a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	2319      	movs	r3, #25
 80035aa:	2201      	movs	r2, #1
 80035ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fac3 	bl	8003b3c <I2C_WaitOnFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0d1      	b.n	8003764 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2221      	movs	r2, #33	; 0x21
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2240      	movs	r2, #64	; 0x40
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a3a      	ldr	r2, [r7, #32]
 80035da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035e8:	88f8      	ldrh	r0, [r7, #6]
 80035ea:	893a      	ldrh	r2, [r7, #8]
 80035ec:	8979      	ldrh	r1, [r7, #10]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	4603      	mov	r3, r0
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f9d3 	bl	80039a4 <I2C_RequestMemoryWrite>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0a9      	b.n	8003764 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	2bff      	cmp	r3, #255	; 0xff
 8003618:	d90e      	bls.n	8003638 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	22ff      	movs	r2, #255	; 0xff
 800361e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003624:	b2da      	uxtb	r2, r3
 8003626:	8979      	ldrh	r1, [r7, #10]
 8003628:	2300      	movs	r3, #0
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fc2b 	bl	8003e8c <I2C_TransferConfig>
 8003636:	e00f      	b.n	8003658 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	b2da      	uxtb	r2, r3
 8003648:	8979      	ldrh	r1, [r7, #10]
 800364a:	2300      	movs	r3, #0
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fc1a 	bl	8003e8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 faad 	bl	8003bbc <I2C_WaitOnTXISFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e07b      	b.n	8003764 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d034      	beq.n	8003710 <HAL_I2C_Mem_Write+0x1c8>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d130      	bne.n	8003710 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	2200      	movs	r2, #0
 80036b6:	2180      	movs	r1, #128	; 0x80
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fa3f 	bl	8003b3c <I2C_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e04d      	b.n	8003764 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2bff      	cmp	r3, #255	; 0xff
 80036d0:	d90e      	bls.n	80036f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	22ff      	movs	r2, #255	; 0xff
 80036d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	8979      	ldrh	r1, [r7, #10]
 80036e0:	2300      	movs	r3, #0
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fbcf 	bl	8003e8c <I2C_TransferConfig>
 80036ee:	e00f      	b.n	8003710 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	8979      	ldrh	r1, [r7, #10]
 8003702:	2300      	movs	r3, #0
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 fbbe 	bl	8003e8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d19e      	bne.n	8003658 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fa8c 	bl	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e01a      	b.n	8003764 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2220      	movs	r2, #32
 8003734:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <HAL_I2C_Mem_Write+0x224>)
 8003742:	400b      	ands	r3, r1
 8003744:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e000      	b.n	8003764 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003762:	2302      	movs	r3, #2
  }
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	fe00e800 	.word	0xfe00e800

08003770 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	4608      	mov	r0, r1
 800377a:	4611      	mov	r1, r2
 800377c:	461a      	mov	r2, r3
 800377e:	4603      	mov	r3, r0
 8003780:	817b      	strh	r3, [r7, #10]
 8003782:	460b      	mov	r3, r1
 8003784:	813b      	strh	r3, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	f040 80fd 	bne.w	8003992 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_I2C_Mem_Read+0x34>
 800379e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d105      	bne.n	80037b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0f1      	b.n	8003994 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_I2C_Mem_Read+0x4e>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e0ea      	b.n	8003994 <HAL_I2C_Mem_Read+0x224>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037c6:	f7ff f8df 	bl	8002988 <HAL_GetTick>
 80037ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	2319      	movs	r3, #25
 80037d2:	2201      	movs	r2, #1
 80037d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f9af 	bl	8003b3c <I2C_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0d5      	b.n	8003994 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2222      	movs	r2, #34	; 0x22
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2240      	movs	r2, #64	; 0x40
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a3a      	ldr	r2, [r7, #32]
 8003802:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003808:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003810:	88f8      	ldrh	r0, [r7, #6]
 8003812:	893a      	ldrh	r2, [r7, #8]
 8003814:	8979      	ldrh	r1, [r7, #10]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	4603      	mov	r3, r0
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f913 	bl	8003a4c <I2C_RequestMemoryRead>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0ad      	b.n	8003994 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	2bff      	cmp	r3, #255	; 0xff
 8003840:	d90e      	bls.n	8003860 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	22ff      	movs	r2, #255	; 0xff
 8003846:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384c:	b2da      	uxtb	r2, r3
 800384e:	8979      	ldrh	r1, [r7, #10]
 8003850:	4b52      	ldr	r3, [pc, #328]	; (800399c <HAL_I2C_Mem_Read+0x22c>)
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 fb17 	bl	8003e8c <I2C_TransferConfig>
 800385e:	e00f      	b.n	8003880 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	b2da      	uxtb	r2, r3
 8003870:	8979      	ldrh	r1, [r7, #10]
 8003872:	4b4a      	ldr	r3, [pc, #296]	; (800399c <HAL_I2C_Mem_Read+0x22c>)
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fb06 	bl	8003e8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	2200      	movs	r2, #0
 8003888:	2104      	movs	r1, #4
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f956 	bl	8003b3c <I2C_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e07c      	b.n	8003994 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d034      	beq.n	8003940 <HAL_I2C_Mem_Read+0x1d0>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d130      	bne.n	8003940 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	2200      	movs	r2, #0
 80038e6:	2180      	movs	r1, #128	; 0x80
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f927 	bl	8003b3c <I2C_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e04d      	b.n	8003994 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2bff      	cmp	r3, #255	; 0xff
 8003900:	d90e      	bls.n	8003920 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	22ff      	movs	r2, #255	; 0xff
 8003906:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390c:	b2da      	uxtb	r2, r3
 800390e:	8979      	ldrh	r1, [r7, #10]
 8003910:	2300      	movs	r3, #0
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fab7 	bl	8003e8c <I2C_TransferConfig>
 800391e:	e00f      	b.n	8003940 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392e:	b2da      	uxtb	r2, r3
 8003930:	8979      	ldrh	r1, [r7, #10]
 8003932:	2300      	movs	r3, #0
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 faa6 	bl	8003e8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d19a      	bne.n	8003880 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f974 	bl	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e01a      	b.n	8003994 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2220      	movs	r2, #32
 8003964:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_I2C_Mem_Read+0x230>)
 8003972:	400b      	ands	r3, r1
 8003974:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e000      	b.n	8003994 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003992:	2302      	movs	r3, #2
  }
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	80002400 	.word	0x80002400
 80039a0:	fe00e800 	.word	0xfe00e800

080039a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	817b      	strh	r3, [r7, #10]
 80039b6:	460b      	mov	r3, r1
 80039b8:	813b      	strh	r3, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	8979      	ldrh	r1, [r7, #10]
 80039c4:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <I2C_RequestMemoryWrite+0xa4>)
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 fa5d 	bl	8003e8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f8f0 	bl	8003bbc <I2C_WaitOnTXISFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e02c      	b.n	8003a40 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d105      	bne.n	80039f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039ec:	893b      	ldrh	r3, [r7, #8]
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	629a      	str	r2, [r3, #40]	; 0x28
 80039f6:	e015      	b.n	8003a24 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039f8:	893b      	ldrh	r3, [r7, #8]
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	69b9      	ldr	r1, [r7, #24]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f8d6 	bl	8003bbc <I2C_WaitOnTXISFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e012      	b.n	8003a40 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a1a:	893b      	ldrh	r3, [r7, #8]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2180      	movs	r1, #128	; 0x80
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f884 	bl	8003b3c <I2C_WaitOnFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	80002000 	.word	0x80002000

08003a4c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	4608      	mov	r0, r1
 8003a56:	4611      	mov	r1, r2
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	817b      	strh	r3, [r7, #10]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	813b      	strh	r3, [r7, #8]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	8979      	ldrh	r1, [r7, #10]
 8003a6c:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <I2C_RequestMemoryRead+0xa4>)
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	2300      	movs	r3, #0
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fa0a 	bl	8003e8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	69b9      	ldr	r1, [r7, #24]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f89d 	bl	8003bbc <I2C_WaitOnTXISFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e02c      	b.n	8003ae6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d105      	bne.n	8003a9e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a92:	893b      	ldrh	r3, [r7, #8]
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a9c:	e015      	b.n	8003aca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a9e:	893b      	ldrh	r3, [r7, #8]
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	69b9      	ldr	r1, [r7, #24]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f883 	bl	8003bbc <I2C_WaitOnTXISFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e012      	b.n	8003ae6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac0:	893b      	ldrh	r3, [r7, #8]
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2140      	movs	r1, #64	; 0x40
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f831 	bl	8003b3c <I2C_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	80002000 	.word	0x80002000

08003af4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d103      	bne.n	8003b12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d007      	beq.n	8003b30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	619a      	str	r2, [r3, #24]
  }
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b4c:	e022      	b.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d01e      	beq.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b56:	f7fe ff17 	bl	8002988 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d113      	bne.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e00f      	b.n	8003bb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d0cd      	beq.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bc8:	e02c      	b.n	8003c24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f870 	bl	8003cb4 <I2C_IsErrorOccurred>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e02a      	b.n	8003c34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d01e      	beq.n	8003c24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be6:	f7fe fecf 	bl	8002988 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d302      	bcc.n	8003bfc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d113      	bne.n	8003c24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	f043 0220 	orr.w	r2, r3, #32
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e007      	b.n	8003c34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d1cb      	bne.n	8003bca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c48:	e028      	b.n	8003c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f830 	bl	8003cb4 <I2C_IsErrorOccurred>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e026      	b.n	8003cac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5e:	f7fe fe93 	bl	8002988 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d302      	bcc.n	8003c74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d113      	bne.n	8003c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	f043 0220 	orr.w	r2, r3, #32
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e007      	b.n	8003cac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d1cf      	bne.n	8003c4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d075      	beq.n	8003dcc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2210      	movs	r2, #16
 8003ce6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ce8:	e056      	b.n	8003d98 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d052      	beq.n	8003d98 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cf2:	f7fe fe49 	bl	8002988 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d302      	bcc.n	8003d08 <I2C_IsErrorOccurred+0x54>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d147      	bne.n	8003d98 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d2a:	d12e      	bne.n	8003d8a <I2C_IsErrorOccurred+0xd6>
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d32:	d02a      	beq.n	8003d8a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003d34:	7cfb      	ldrb	r3, [r7, #19]
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d027      	beq.n	8003d8a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d4a:	f7fe fe1d 	bl	8002988 <HAL_GetTick>
 8003d4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d50:	e01b      	b.n	8003d8a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d52:	f7fe fe19 	bl	8002988 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b19      	cmp	r3, #25
 8003d5e:	d914      	bls.n	8003d8a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	f043 0220 	orr.w	r2, r3, #32
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d1dc      	bne.n	8003d52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d003      	beq.n	8003dae <I2C_IsErrorOccurred+0xfa>
 8003da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d09d      	beq.n	8003cea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d103      	bne.n	8003dbe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f043 0304 	orr.w	r3, r3, #4
 8003dc4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00b      	beq.n	8003e18 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	f043 0308 	orr.w	r3, r3, #8
 8003e06:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01c      	beq.n	8003e7c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7ff fe56 	bl	8003af4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <I2C_IsErrorOccurred+0x1d4>)
 8003e54:	400b      	ands	r3, r1
 8003e56:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3728      	adds	r7, #40	; 0x28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	fe00e800 	.word	0xfe00e800

08003e8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	817b      	strh	r3, [r7, #10]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e9e:	897b      	ldrh	r3, [r7, #10]
 8003ea0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ea4:	7a7b      	ldrb	r3, [r7, #9]
 8003ea6:	041b      	lsls	r3, r3, #16
 8003ea8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	0d5b      	lsrs	r3, r3, #21
 8003ec6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003eca:	4b08      	ldr	r3, [pc, #32]	; (8003eec <I2C_TransferConfig+0x60>)
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	ea02 0103 	and.w	r1, r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	03ff63ff 	.word	0x03ff63ff

08003ef0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d138      	bne.n	8003f78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e032      	b.n	8003f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2224      	movs	r2, #36	; 0x24
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6819      	ldr	r1, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e000      	b.n	8003f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f78:	2302      	movs	r3, #2
  }
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40007000 	.word	0x40007000

08003fa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb2:	d130      	bne.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fb4:	4b23      	ldr	r3, [pc, #140]	; (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc0:	d038      	beq.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fc2:	4b20      	ldr	r3, [pc, #128]	; (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fca:	4a1e      	ldr	r2, [pc, #120]	; (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2232      	movs	r2, #50	; 0x32
 8003fd8:	fb02 f303 	mul.w	r3, r2, r3
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	; (800404c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	0c9b      	lsrs	r3, r3, #18
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fe8:	e002      	b.n	8003ff0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffc:	d102      	bne.n	8004004 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f2      	bne.n	8003fea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004010:	d110      	bne.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e00f      	b.n	8004036 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004016:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800401e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004022:	d007      	beq.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004024:	4b07      	ldr	r3, [pc, #28]	; (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800402c:	4a05      	ldr	r2, [pc, #20]	; (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800402e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004032:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40007000 	.word	0x40007000
 8004048:	20000000 	.word	0x20000000
 800404c:	431bde83 	.word	0x431bde83

08004050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e3ca      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004062:	4b97      	ldr	r3, [pc, #604]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800406c:	4b94      	ldr	r3, [pc, #592]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80e4 	beq.w	800424c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <HAL_RCC_OscConfig+0x4a>
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b0c      	cmp	r3, #12
 800408e:	f040 808b 	bne.w	80041a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b01      	cmp	r3, #1
 8004096:	f040 8087 	bne.w	80041a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800409a:	4b89      	ldr	r3, [pc, #548]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_RCC_OscConfig+0x62>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e3a2      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1a      	ldr	r2, [r3, #32]
 80040b6:	4b82      	ldr	r3, [pc, #520]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <HAL_RCC_OscConfig+0x7c>
 80040c2:	4b7f      	ldr	r3, [pc, #508]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ca:	e005      	b.n	80040d8 <HAL_RCC_OscConfig+0x88>
 80040cc:	4b7c      	ldr	r3, [pc, #496]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d8:	4293      	cmp	r3, r2
 80040da:	d223      	bcs.n	8004124 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fd87 	bl	8004bf4 <RCC_SetFlashLatencyFromMSIRange>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e383      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040f0:	4b73      	ldr	r3, [pc, #460]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a72      	ldr	r2, [pc, #456]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80040f6:	f043 0308 	orr.w	r3, r3, #8
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	4b70      	ldr	r3, [pc, #448]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	496d      	ldr	r1, [pc, #436]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800410e:	4b6c      	ldr	r3, [pc, #432]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	4968      	ldr	r1, [pc, #416]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 800411e:	4313      	orrs	r3, r2
 8004120:	604b      	str	r3, [r1, #4]
 8004122:	e025      	b.n	8004170 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004124:	4b66      	ldr	r3, [pc, #408]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a65      	ldr	r2, [pc, #404]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 800412a:	f043 0308 	orr.w	r3, r3, #8
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b63      	ldr	r3, [pc, #396]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	4960      	ldr	r1, [pc, #384]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004142:	4b5f      	ldr	r3, [pc, #380]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	495b      	ldr	r1, [pc, #364]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004152:	4313      	orrs	r3, r2
 8004154:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d109      	bne.n	8004170 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fd47 	bl	8004bf4 <RCC_SetFlashLatencyFromMSIRange>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e343      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004170:	f000 fc4a 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 8004174:	4602      	mov	r2, r0
 8004176:	4b52      	ldr	r3, [pc, #328]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	091b      	lsrs	r3, r3, #4
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	4950      	ldr	r1, [pc, #320]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004182:	5ccb      	ldrb	r3, [r1, r3]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
 800418c:	4a4e      	ldr	r2, [pc, #312]	; (80042c8 <HAL_RCC_OscConfig+0x278>)
 800418e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004190:	4b4e      	ldr	r3, [pc, #312]	; (80042cc <HAL_RCC_OscConfig+0x27c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f7fd f901 	bl	800139c <HAL_InitTick>
 800419a:	4603      	mov	r3, r0
 800419c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d052      	beq.n	800424a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	e327      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d032      	beq.n	8004216 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041b0:	4b43      	ldr	r3, [pc, #268]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a42      	ldr	r2, [pc, #264]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041bc:	f7fe fbe4 	bl	8002988 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041c4:	f7fe fbe0 	bl	8002988 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e310      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041d6:	4b3a      	ldr	r3, [pc, #232]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041e2:	4b37      	ldr	r3, [pc, #220]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a36      	ldr	r2, [pc, #216]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041e8:	f043 0308 	orr.w	r3, r3, #8
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	4931      	ldr	r1, [pc, #196]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004200:	4b2f      	ldr	r3, [pc, #188]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	492c      	ldr	r1, [pc, #176]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004210:	4313      	orrs	r3, r2
 8004212:	604b      	str	r3, [r1, #4]
 8004214:	e01a      	b.n	800424c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004216:	4b2a      	ldr	r3, [pc, #168]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a29      	ldr	r2, [pc, #164]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 800421c:	f023 0301 	bic.w	r3, r3, #1
 8004220:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004222:	f7fe fbb1 	bl	8002988 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800422a:	f7fe fbad 	bl	8002988 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e2dd      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800423c:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f0      	bne.n	800422a <HAL_RCC_OscConfig+0x1da>
 8004248:	e000      	b.n	800424c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800424a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d074      	beq.n	8004342 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2b08      	cmp	r3, #8
 800425c:	d005      	beq.n	800426a <HAL_RCC_OscConfig+0x21a>
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b0c      	cmp	r3, #12
 8004262:	d10e      	bne.n	8004282 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d10b      	bne.n	8004282 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426a:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d064      	beq.n	8004340 <HAL_RCC_OscConfig+0x2f0>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d160      	bne.n	8004340 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e2ba      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428a:	d106      	bne.n	800429a <HAL_RCC_OscConfig+0x24a>
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a0b      	ldr	r2, [pc, #44]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	e026      	b.n	80042e8 <HAL_RCC_OscConfig+0x298>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a2:	d115      	bne.n	80042d0 <HAL_RCC_OscConfig+0x280>
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a05      	ldr	r2, [pc, #20]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80042aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a02      	ldr	r2, [pc, #8]	; (80042c0 <HAL_RCC_OscConfig+0x270>)
 80042b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	e014      	b.n	80042e8 <HAL_RCC_OscConfig+0x298>
 80042be:	bf00      	nop
 80042c0:	40021000 	.word	0x40021000
 80042c4:	0800f1ac 	.word	0x0800f1ac
 80042c8:	20000000 	.word	0x20000000
 80042cc:	20000088 	.word	0x20000088
 80042d0:	4ba0      	ldr	r3, [pc, #640]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a9f      	ldr	r2, [pc, #636]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 80042d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	4b9d      	ldr	r3, [pc, #628]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a9c      	ldr	r2, [pc, #624]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 80042e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d013      	beq.n	8004318 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fe fb4a 	bl	8002988 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f8:	f7fe fb46 	bl	8002988 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	; 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e276      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800430a:	4b92      	ldr	r3, [pc, #584]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0x2a8>
 8004316:	e014      	b.n	8004342 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004318:	f7fe fb36 	bl	8002988 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004320:	f7fe fb32 	bl	8002988 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	; 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e262      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004332:	4b88      	ldr	r3, [pc, #544]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x2d0>
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d060      	beq.n	8004410 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b04      	cmp	r3, #4
 8004352:	d005      	beq.n	8004360 <HAL_RCC_OscConfig+0x310>
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b0c      	cmp	r3, #12
 8004358:	d119      	bne.n	800438e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d116      	bne.n	800438e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004360:	4b7c      	ldr	r3, [pc, #496]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_RCC_OscConfig+0x328>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e23f      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004378:	4b76      	ldr	r3, [pc, #472]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	061b      	lsls	r3, r3, #24
 8004386:	4973      	ldr	r1, [pc, #460]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800438c:	e040      	b.n	8004410 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d023      	beq.n	80043de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004396:	4b6f      	ldr	r3, [pc, #444]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a6e      	ldr	r2, [pc, #440]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 800439c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a2:	f7fe faf1 	bl	8002988 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043aa:	f7fe faed 	bl	8002988 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e21d      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043bc:	4b65      	ldr	r3, [pc, #404]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c8:	4b62      	ldr	r3, [pc, #392]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	061b      	lsls	r3, r3, #24
 80043d6:	495f      	ldr	r1, [pc, #380]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	604b      	str	r3, [r1, #4]
 80043dc:	e018      	b.n	8004410 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043de:	4b5d      	ldr	r3, [pc, #372]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a5c      	ldr	r2, [pc, #368]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 80043e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ea:	f7fe facd 	bl	8002988 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f2:	f7fe fac9 	bl	8002988 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e1f9      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004404:	4b53      	ldr	r3, [pc, #332]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d03c      	beq.n	8004496 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01c      	beq.n	800445e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004424:	4b4b      	ldr	r3, [pc, #300]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 8004426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800442a:	4a4a      	ldr	r2, [pc, #296]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004434:	f7fe faa8 	bl	8002988 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443c:	f7fe faa4 	bl	8002988 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e1d4      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800444e:	4b41      	ldr	r3, [pc, #260]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 8004450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ef      	beq.n	800443c <HAL_RCC_OscConfig+0x3ec>
 800445c:	e01b      	b.n	8004496 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445e:	4b3d      	ldr	r3, [pc, #244]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 8004460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004464:	4a3b      	ldr	r2, [pc, #236]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446e:	f7fe fa8b 	bl	8002988 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004476:	f7fe fa87 	bl	8002988 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e1b7      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004488:	4b32      	ldr	r3, [pc, #200]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 800448a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1ef      	bne.n	8004476 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80a6 	beq.w	80045f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a4:	2300      	movs	r3, #0
 80044a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044a8:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 80044aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10d      	bne.n	80044d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b4:	4b27      	ldr	r3, [pc, #156]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	4a26      	ldr	r2, [pc, #152]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 80044ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044be:	6593      	str	r3, [r2, #88]	; 0x58
 80044c0:	4b24      	ldr	r3, [pc, #144]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044cc:	2301      	movs	r3, #1
 80044ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d0:	4b21      	ldr	r3, [pc, #132]	; (8004558 <HAL_RCC_OscConfig+0x508>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d118      	bne.n	800450e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044dc:	4b1e      	ldr	r3, [pc, #120]	; (8004558 <HAL_RCC_OscConfig+0x508>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <HAL_RCC_OscConfig+0x508>)
 80044e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e8:	f7fe fa4e 	bl	8002988 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f0:	f7fe fa4a 	bl	8002988 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e17a      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004502:	4b15      	ldr	r3, [pc, #84]	; (8004558 <HAL_RCC_OscConfig+0x508>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d108      	bne.n	8004528 <HAL_RCC_OscConfig+0x4d8>
 8004516:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	4a0d      	ldr	r2, [pc, #52]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004526:	e029      	b.n	800457c <HAL_RCC_OscConfig+0x52c>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b05      	cmp	r3, #5
 800452e:	d115      	bne.n	800455c <HAL_RCC_OscConfig+0x50c>
 8004530:	4b08      	ldr	r3, [pc, #32]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	4a07      	ldr	r2, [pc, #28]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 8004538:	f043 0304 	orr.w	r3, r3, #4
 800453c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	4a03      	ldr	r2, [pc, #12]	; (8004554 <HAL_RCC_OscConfig+0x504>)
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004550:	e014      	b.n	800457c <HAL_RCC_OscConfig+0x52c>
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
 8004558:	40007000 	.word	0x40007000
 800455c:	4b9c      	ldr	r3, [pc, #624]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004562:	4a9b      	ldr	r2, [pc, #620]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800456c:	4b98      	ldr	r3, [pc, #608]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004572:	4a97      	ldr	r2, [pc, #604]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 8004574:	f023 0304 	bic.w	r3, r3, #4
 8004578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d016      	beq.n	80045b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004584:	f7fe fa00 	bl	8002988 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800458a:	e00a      	b.n	80045a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458c:	f7fe f9fc 	bl	8002988 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	; 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e12a      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a2:	4b8b      	ldr	r3, [pc, #556]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0ed      	beq.n	800458c <HAL_RCC_OscConfig+0x53c>
 80045b0:	e015      	b.n	80045de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b2:	f7fe f9e9 	bl	8002988 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fe f9e5 	bl	8002988 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e113      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045d0:	4b7f      	ldr	r3, [pc, #508]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1ed      	bne.n	80045ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045de:	7ffb      	ldrb	r3, [r7, #31]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d105      	bne.n	80045f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e4:	4b7a      	ldr	r3, [pc, #488]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	4a79      	ldr	r2, [pc, #484]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 80045ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80fe 	beq.w	80047f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	2b02      	cmp	r3, #2
 8004600:	f040 80d0 	bne.w	80047a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004604:	4b72      	ldr	r3, [pc, #456]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f003 0203 	and.w	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	429a      	cmp	r2, r3
 8004616:	d130      	bne.n	800467a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	3b01      	subs	r3, #1
 8004624:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d127      	bne.n	800467a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004634:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d11f      	bne.n	800467a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004644:	2a07      	cmp	r2, #7
 8004646:	bf14      	ite	ne
 8004648:	2201      	movne	r2, #1
 800464a:	2200      	moveq	r2, #0
 800464c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800464e:	4293      	cmp	r3, r2
 8004650:	d113      	bne.n	800467a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	3b01      	subs	r3, #1
 8004660:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d109      	bne.n	800467a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	3b01      	subs	r3, #1
 8004674:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d06e      	beq.n	8004758 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	2b0c      	cmp	r3, #12
 800467e:	d069      	beq.n	8004754 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004680:	4b53      	ldr	r3, [pc, #332]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800468c:	4b50      	ldr	r3, [pc, #320]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0ad      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800469c:	4b4c      	ldr	r3, [pc, #304]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a4b      	ldr	r2, [pc, #300]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 80046a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046a8:	f7fe f96e 	bl	8002988 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b0:	f7fe f96a 	bl	8002988 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e09a      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c2:	4b43      	ldr	r3, [pc, #268]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ce:	4b40      	ldr	r3, [pc, #256]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	4b40      	ldr	r3, [pc, #256]	; (80047d4 <HAL_RCC_OscConfig+0x784>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046de:	3a01      	subs	r2, #1
 80046e0:	0112      	lsls	r2, r2, #4
 80046e2:	4311      	orrs	r1, r2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046e8:	0212      	lsls	r2, r2, #8
 80046ea:	4311      	orrs	r1, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046f0:	0852      	lsrs	r2, r2, #1
 80046f2:	3a01      	subs	r2, #1
 80046f4:	0552      	lsls	r2, r2, #21
 80046f6:	4311      	orrs	r1, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046fc:	0852      	lsrs	r2, r2, #1
 80046fe:	3a01      	subs	r2, #1
 8004700:	0652      	lsls	r2, r2, #25
 8004702:	4311      	orrs	r1, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004708:	0912      	lsrs	r2, r2, #4
 800470a:	0452      	lsls	r2, r2, #17
 800470c:	430a      	orrs	r2, r1
 800470e:	4930      	ldr	r1, [pc, #192]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 8004710:	4313      	orrs	r3, r2
 8004712:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004714:	4b2e      	ldr	r3, [pc, #184]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2d      	ldr	r2, [pc, #180]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 800471a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800471e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004720:	4b2b      	ldr	r3, [pc, #172]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	4a2a      	ldr	r2, [pc, #168]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 8004726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800472a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800472c:	f7fe f92c 	bl	8002988 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004734:	f7fe f928 	bl	8002988 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e058      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004746:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004752:	e050      	b.n	80047f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e04f      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004758:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d148      	bne.n	80047f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004764:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a19      	ldr	r2, [pc, #100]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 800476a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800476e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004770:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 8004776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800477a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800477c:	f7fe f904 	bl	8002988 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004784:	f7fe f900 	bl	8002988 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e030      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004796:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0x734>
 80047a2:	e028      	b.n	80047f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b0c      	cmp	r3, #12
 80047a8:	d023      	beq.n	80047f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047aa:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <HAL_RCC_OscConfig+0x780>)
 80047b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fe f8e7 	bl	8002988 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047bc:	e00c      	b.n	80047d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047be:	f7fe f8e3 	bl	8002988 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d905      	bls.n	80047d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e013      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
 80047d0:	40021000 	.word	0x40021000
 80047d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d8:	4b09      	ldr	r3, [pc, #36]	; (8004800 <HAL_RCC_OscConfig+0x7b0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1ec      	bne.n	80047be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80047e4:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_RCC_OscConfig+0x7b0>)
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	4905      	ldr	r1, [pc, #20]	; (8004800 <HAL_RCC_OscConfig+0x7b0>)
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_RCC_OscConfig+0x7b4>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	60cb      	str	r3, [r1, #12]
 80047f0:	e001      	b.n	80047f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3720      	adds	r7, #32
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40021000 	.word	0x40021000
 8004804:	feeefffc 	.word	0xfeeefffc

08004808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0e7      	b.n	80049ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800481c:	4b75      	ldr	r3, [pc, #468]	; (80049f4 <HAL_RCC_ClockConfig+0x1ec>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d910      	bls.n	800484c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b72      	ldr	r3, [pc, #456]	; (80049f4 <HAL_RCC_ClockConfig+0x1ec>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 0207 	bic.w	r2, r3, #7
 8004832:	4970      	ldr	r1, [pc, #448]	; (80049f4 <HAL_RCC_ClockConfig+0x1ec>)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b6e      	ldr	r3, [pc, #440]	; (80049f4 <HAL_RCC_ClockConfig+0x1ec>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0cf      	b.n	80049ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d010      	beq.n	800487a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	4b66      	ldr	r3, [pc, #408]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004864:	429a      	cmp	r2, r3
 8004866:	d908      	bls.n	800487a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004868:	4b63      	ldr	r3, [pc, #396]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4960      	ldr	r1, [pc, #384]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004876:	4313      	orrs	r3, r2
 8004878:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d04c      	beq.n	8004920 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b03      	cmp	r3, #3
 800488c:	d107      	bne.n	800489e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488e:	4b5a      	ldr	r3, [pc, #360]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d121      	bne.n	80048de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e0a6      	b.n	80049ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d107      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048a6:	4b54      	ldr	r3, [pc, #336]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d115      	bne.n	80048de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e09a      	b.n	80049ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d107      	bne.n	80048ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048be:	4b4e      	ldr	r3, [pc, #312]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e08e      	b.n	80049ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ce:	4b4a      	ldr	r3, [pc, #296]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e086      	b.n	80049ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048de:	4b46      	ldr	r3, [pc, #280]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f023 0203 	bic.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4943      	ldr	r1, [pc, #268]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f0:	f7fe f84a 	bl	8002988 <HAL_GetTick>
 80048f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f6:	e00a      	b.n	800490e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f8:	f7fe f846 	bl	8002988 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	; 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e06e      	b.n	80049ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	4b3a      	ldr	r3, [pc, #232]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 020c 	and.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	429a      	cmp	r2, r3
 800491e:	d1eb      	bne.n	80048f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d010      	beq.n	800494e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	4b31      	ldr	r3, [pc, #196]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004938:	429a      	cmp	r2, r3
 800493a:	d208      	bcs.n	800494e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800493c:	4b2e      	ldr	r3, [pc, #184]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	492b      	ldr	r1, [pc, #172]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800494e:	4b29      	ldr	r3, [pc, #164]	; (80049f4 <HAL_RCC_ClockConfig+0x1ec>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d210      	bcs.n	800497e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495c:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <HAL_RCC_ClockConfig+0x1ec>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f023 0207 	bic.w	r2, r3, #7
 8004964:	4923      	ldr	r1, [pc, #140]	; (80049f4 <HAL_RCC_ClockConfig+0x1ec>)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	4313      	orrs	r3, r2
 800496a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496c:	4b21      	ldr	r3, [pc, #132]	; (80049f4 <HAL_RCC_ClockConfig+0x1ec>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d001      	beq.n	800497e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e036      	b.n	80049ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800498a:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	4918      	ldr	r1, [pc, #96]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 8004998:	4313      	orrs	r3, r2
 800499a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d009      	beq.n	80049bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049a8:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4910      	ldr	r1, [pc, #64]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049bc:	f000 f824 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 80049c0:	4602      	mov	r2, r0
 80049c2:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <HAL_RCC_ClockConfig+0x1f0>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	091b      	lsrs	r3, r3, #4
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	490b      	ldr	r1, [pc, #44]	; (80049fc <HAL_RCC_ClockConfig+0x1f4>)
 80049ce:	5ccb      	ldrb	r3, [r1, r3]
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
 80049d8:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <HAL_RCC_ClockConfig+0x1f8>)
 80049da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <HAL_RCC_ClockConfig+0x1fc>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fc fcdb 	bl	800139c <HAL_InitTick>
 80049e6:	4603      	mov	r3, r0
 80049e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80049ea:	7afb      	ldrb	r3, [r7, #11]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40022000 	.word	0x40022000
 80049f8:	40021000 	.word	0x40021000
 80049fc:	0800f1ac 	.word	0x0800f1ac
 8004a00:	20000000 	.word	0x20000000
 8004a04:	20000088 	.word	0x20000088

08004a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b089      	sub	sp, #36	; 0x24
 8004a0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	2300      	movs	r3, #0
 8004a14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a16:	4b3e      	ldr	r3, [pc, #248]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a20:	4b3b      	ldr	r3, [pc, #236]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_RCC_GetSysClockFreq+0x34>
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d121      	bne.n	8004a7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d11e      	bne.n	8004a7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a3c:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d107      	bne.n	8004a58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a48:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a4e:	0a1b      	lsrs	r3, r3, #8
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	61fb      	str	r3, [r7, #28]
 8004a56:	e005      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a58:	4b2d      	ldr	r3, [pc, #180]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a64:	4a2b      	ldr	r2, [pc, #172]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10d      	bne.n	8004a90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a78:	e00a      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d102      	bne.n	8004a86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a80:	4b25      	ldr	r3, [pc, #148]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	e004      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d101      	bne.n	8004a90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a8c:	4b23      	ldr	r3, [pc, #140]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x114>)
 8004a8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	2b0c      	cmp	r3, #12
 8004a94:	d134      	bne.n	8004b00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a96:	4b1e      	ldr	r3, [pc, #120]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d003      	beq.n	8004aae <HAL_RCC_GetSysClockFreq+0xa6>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d003      	beq.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xac>
 8004aac:	e005      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004aae:	4b1a      	ldr	r3, [pc, #104]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ab0:	617b      	str	r3, [r7, #20]
      break;
 8004ab2:	e005      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ab4:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ab6:	617b      	str	r3, [r7, #20]
      break;
 8004ab8:	e002      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	617b      	str	r3, [r7, #20]
      break;
 8004abe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ac0:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	3301      	adds	r3, #1
 8004acc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	0a1b      	lsrs	r3, r3, #8
 8004ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	fb03 f202 	mul.w	r2, r3, r2
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ae6:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	0e5b      	lsrs	r3, r3, #25
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	3301      	adds	r3, #1
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b00:	69bb      	ldr	r3, [r7, #24]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3724      	adds	r7, #36	; 0x24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40021000 	.word	0x40021000
 8004b14:	0800f1c4 	.word	0x0800f1c4
 8004b18:	00f42400 	.word	0x00f42400
 8004b1c:	007a1200 	.word	0x007a1200

08004b20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b24:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b26:	681b      	ldr	r3, [r3, #0]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000000 	.word	0x20000000

08004b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b3c:	f7ff fff0 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b40:	4602      	mov	r2, r0
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	4904      	ldr	r1, [pc, #16]	; (8004b60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b4e:	5ccb      	ldrb	r3, [r1, r3]
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	0800f1bc 	.word	0x0800f1bc

08004b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b68:	f7ff ffda 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	0adb      	lsrs	r3, r3, #11
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	4904      	ldr	r1, [pc, #16]	; (8004b8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b7a:	5ccb      	ldrb	r3, [r1, r3]
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	0800f1bc 	.word	0x0800f1bc

08004b90 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	220f      	movs	r2, #15
 8004b9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_RCC_GetClockConfig+0x5c>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0203 	and.w	r2, r3, #3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004bac:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <HAL_RCC_GetClockConfig+0x5c>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <HAL_RCC_GetClockConfig+0x5c>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004bc4:	4b09      	ldr	r3, [pc, #36]	; (8004bec <HAL_RCC_GetClockConfig+0x5c>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	08db      	lsrs	r3, r3, #3
 8004bca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004bd2:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <HAL_RCC_GetClockConfig+0x60>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0207 	and.w	r2, r3, #7
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	601a      	str	r2, [r3, #0]
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40022000 	.word	0x40022000

08004bf4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c00:	4b2a      	ldr	r3, [pc, #168]	; (8004cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c0c:	f7ff f9bc 	bl	8003f88 <HAL_PWREx_GetVoltageRange>
 8004c10:	6178      	str	r0, [r7, #20]
 8004c12:	e014      	b.n	8004c3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c14:	4b25      	ldr	r3, [pc, #148]	; (8004cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c18:	4a24      	ldr	r2, [pc, #144]	; (8004cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c20:	4b22      	ldr	r3, [pc, #136]	; (8004cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c2c:	f7ff f9ac 	bl	8003f88 <HAL_PWREx_GetVoltageRange>
 8004c30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c32:	4b1e      	ldr	r3, [pc, #120]	; (8004cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	4a1d      	ldr	r2, [pc, #116]	; (8004cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c44:	d10b      	bne.n	8004c5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b80      	cmp	r3, #128	; 0x80
 8004c4a:	d919      	bls.n	8004c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2ba0      	cmp	r3, #160	; 0xa0
 8004c50:	d902      	bls.n	8004c58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c52:	2302      	movs	r3, #2
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	e013      	b.n	8004c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c58:	2301      	movs	r3, #1
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	e010      	b.n	8004c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b80      	cmp	r3, #128	; 0x80
 8004c62:	d902      	bls.n	8004c6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c64:	2303      	movs	r3, #3
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	e00a      	b.n	8004c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b80      	cmp	r3, #128	; 0x80
 8004c6e:	d102      	bne.n	8004c76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c70:	2302      	movs	r3, #2
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	e004      	b.n	8004c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b70      	cmp	r3, #112	; 0x70
 8004c7a:	d101      	bne.n	8004c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f023 0207 	bic.w	r2, r3, #7
 8004c88:	4909      	ldr	r1, [pc, #36]	; (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d001      	beq.n	8004ca2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	40022000 	.word	0x40022000

08004cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d041      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cd8:	d02a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004cda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cde:	d824      	bhi.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ce0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ce4:	d008      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ce6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cea:	d81e      	bhi.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf4:	d010      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cf6:	e018      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cf8:	4b86      	ldr	r3, [pc, #536]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4a85      	ldr	r2, [pc, #532]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d04:	e015      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fabb 	bl	8005288 <RCCEx_PLLSAI1_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d16:	e00c      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3320      	adds	r3, #32
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fba6 	bl	8005470 <RCCEx_PLLSAI2_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d28:	e003      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	74fb      	strb	r3, [r7, #19]
      break;
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d38:	4b76      	ldr	r3, [pc, #472]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d46:	4973      	ldr	r1, [pc, #460]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d4e:	e001      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d50:	7cfb      	ldrb	r3, [r7, #19]
 8004d52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d041      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d68:	d02a      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d6e:	d824      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d74:	d008      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d7a:	d81e      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d84:	d010      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d86:	e018      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d88:	4b62      	ldr	r3, [pc, #392]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4a61      	ldr	r2, [pc, #388]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d94:	e015      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fa73 	bl	8005288 <RCCEx_PLLSAI1_Config>
 8004da2:	4603      	mov	r3, r0
 8004da4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004da6:	e00c      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3320      	adds	r3, #32
 8004dac:	2100      	movs	r1, #0
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fb5e 	bl	8005470 <RCCEx_PLLSAI2_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004db8:	e003      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	74fb      	strb	r3, [r7, #19]
      break;
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dc2:	7cfb      	ldrb	r3, [r7, #19]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10b      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dc8:	4b52      	ldr	r3, [pc, #328]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dd6:	494f      	ldr	r1, [pc, #316]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004dde:	e001      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de0:	7cfb      	ldrb	r3, [r7, #19]
 8004de2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80a0 	beq.w	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df2:	2300      	movs	r3, #0
 8004df4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004df6:	4b47      	ldr	r3, [pc, #284]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00d      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e0c:	4b41      	ldr	r3, [pc, #260]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e10:	4a40      	ldr	r2, [pc, #256]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e16:	6593      	str	r3, [r2, #88]	; 0x58
 8004e18:	4b3e      	ldr	r3, [pc, #248]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e24:	2301      	movs	r3, #1
 8004e26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e28:	4b3b      	ldr	r3, [pc, #236]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a3a      	ldr	r2, [pc, #232]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e34:	f7fd fda8 	bl	8002988 <HAL_GetTick>
 8004e38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e3a:	e009      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3c:	f7fd fda4 	bl	8002988 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d902      	bls.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	74fb      	strb	r3, [r7, #19]
        break;
 8004e4e:	e005      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e50:	4b31      	ldr	r3, [pc, #196]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0ef      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e5c:	7cfb      	ldrb	r3, [r7, #19]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d15c      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e62:	4b2c      	ldr	r3, [pc, #176]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01f      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d019      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e80:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e8c:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e92:	4a20      	ldr	r2, [pc, #128]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e9c:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea2:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004eac:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d016      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebe:	f7fd fd63 	bl	8002988 <HAL_GetTick>
 8004ec2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ec4:	e00b      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec6:	f7fd fd5f 	bl	8002988 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d902      	bls.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	74fb      	strb	r3, [r7, #19]
            break;
 8004edc:	e006      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ede:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0ec      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef2:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f02:	4904      	ldr	r1, [pc, #16]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f0a:	e009      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f0c:	7cfb      	ldrb	r3, [r7, #19]
 8004f0e:	74bb      	strb	r3, [r7, #18]
 8004f10:	e006      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f12:	bf00      	nop
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1c:	7cfb      	ldrb	r3, [r7, #19]
 8004f1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f20:	7c7b      	ldrb	r3, [r7, #17]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d105      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f26:	4b9e      	ldr	r3, [pc, #632]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	4a9d      	ldr	r2, [pc, #628]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f3e:	4b98      	ldr	r3, [pc, #608]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	f023 0203 	bic.w	r2, r3, #3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	4994      	ldr	r1, [pc, #592]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f60:	4b8f      	ldr	r3, [pc, #572]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f023 020c 	bic.w	r2, r3, #12
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	498c      	ldr	r1, [pc, #560]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f82:	4b87      	ldr	r3, [pc, #540]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	4983      	ldr	r1, [pc, #524]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fa4:	4b7e      	ldr	r3, [pc, #504]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004faa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb2:	497b      	ldr	r1, [pc, #492]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fc6:	4b76      	ldr	r3, [pc, #472]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd4:	4972      	ldr	r1, [pc, #456]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fe8:	4b6d      	ldr	r3, [pc, #436]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff6:	496a      	ldr	r1, [pc, #424]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800500a:	4b65      	ldr	r3, [pc, #404]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005018:	4961      	ldr	r1, [pc, #388]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800502c:	4b5c      	ldr	r3, [pc, #368]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005032:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503a:	4959      	ldr	r1, [pc, #356]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800504e:	4b54      	ldr	r3, [pc, #336]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005054:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505c:	4950      	ldr	r1, [pc, #320]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005070:	4b4b      	ldr	r3, [pc, #300]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005076:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507e:	4948      	ldr	r1, [pc, #288]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005092:	4b43      	ldr	r3, [pc, #268]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	493f      	ldr	r1, [pc, #252]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d028      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050b4:	4b3a      	ldr	r3, [pc, #232]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c2:	4937      	ldr	r1, [pc, #220]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050d2:	d106      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050d4:	4b32      	ldr	r3, [pc, #200]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4a31      	ldr	r2, [pc, #196]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050de:	60d3      	str	r3, [r2, #12]
 80050e0:	e011      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050ea:	d10c      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3304      	adds	r3, #4
 80050f0:	2101      	movs	r1, #1
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f8c8 	bl	8005288 <RCCEx_PLLSAI1_Config>
 80050f8:	4603      	mov	r3, r0
 80050fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050fc:	7cfb      	ldrb	r3, [r7, #19]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005102:	7cfb      	ldrb	r3, [r7, #19]
 8005104:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d028      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005112:	4b23      	ldr	r3, [pc, #140]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005118:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005120:	491f      	ldr	r1, [pc, #124]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005130:	d106      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005132:	4b1b      	ldr	r3, [pc, #108]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	4a1a      	ldr	r2, [pc, #104]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800513c:	60d3      	str	r3, [r2, #12]
 800513e:	e011      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005148:	d10c      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3304      	adds	r3, #4
 800514e:	2101      	movs	r1, #1
 8005150:	4618      	mov	r0, r3
 8005152:	f000 f899 	bl	8005288 <RCCEx_PLLSAI1_Config>
 8005156:	4603      	mov	r3, r0
 8005158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800515a:	7cfb      	ldrb	r3, [r7, #19]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005160:	7cfb      	ldrb	r3, [r7, #19]
 8005162:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d02b      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517e:	4908      	ldr	r1, [pc, #32]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800518e:	d109      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005190:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4a02      	ldr	r2, [pc, #8]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800519a:	60d3      	str	r3, [r2, #12]
 800519c:	e014      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800519e:	bf00      	nop
 80051a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051ac:	d10c      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	2101      	movs	r1, #1
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 f867 	bl	8005288 <RCCEx_PLLSAI1_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051be:	7cfb      	ldrb	r3, [r7, #19]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d02f      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051d4:	4b2b      	ldr	r3, [pc, #172]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051e2:	4928      	ldr	r1, [pc, #160]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051f2:	d10d      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3304      	adds	r3, #4
 80051f8:	2102      	movs	r1, #2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f844 	bl	8005288 <RCCEx_PLLSAI1_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005204:	7cfb      	ldrb	r3, [r7, #19]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d014      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800520a:	7cfb      	ldrb	r3, [r7, #19]
 800520c:	74bb      	strb	r3, [r7, #18]
 800520e:	e011      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005218:	d10c      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3320      	adds	r3, #32
 800521e:	2102      	movs	r1, #2
 8005220:	4618      	mov	r0, r3
 8005222:	f000 f925 	bl	8005470 <RCCEx_PLLSAI2_Config>
 8005226:	4603      	mov	r3, r0
 8005228:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800522a:	7cfb      	ldrb	r3, [r7, #19]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005230:	7cfb      	ldrb	r3, [r7, #19]
 8005232:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005240:	4b10      	ldr	r3, [pc, #64]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005246:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800524e:	490d      	ldr	r1, [pc, #52]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005262:	4b08      	ldr	r3, [pc, #32]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005268:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005272:	4904      	ldr	r1, [pc, #16]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800527a:	7cbb      	ldrb	r3, [r7, #18]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40021000 	.word	0x40021000

08005288 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005296:	4b75      	ldr	r3, [pc, #468]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d018      	beq.n	80052d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052a2:	4b72      	ldr	r3, [pc, #456]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0203 	and.w	r2, r3, #3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d10d      	bne.n	80052ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
       ||
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80052ba:	4b6c      	ldr	r3, [pc, #432]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	091b      	lsrs	r3, r3, #4
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
       ||
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d047      	beq.n	800535e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
 80052d2:	e044      	b.n	800535e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d018      	beq.n	800530e <RCCEx_PLLSAI1_Config+0x86>
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d825      	bhi.n	800532c <RCCEx_PLLSAI1_Config+0xa4>
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d002      	beq.n	80052ea <RCCEx_PLLSAI1_Config+0x62>
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d009      	beq.n	80052fc <RCCEx_PLLSAI1_Config+0x74>
 80052e8:	e020      	b.n	800532c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052ea:	4b60      	ldr	r3, [pc, #384]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d11d      	bne.n	8005332 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052fa:	e01a      	b.n	8005332 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052fc:	4b5b      	ldr	r3, [pc, #364]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005304:	2b00      	cmp	r3, #0
 8005306:	d116      	bne.n	8005336 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800530c:	e013      	b.n	8005336 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800530e:	4b57      	ldr	r3, [pc, #348]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10f      	bne.n	800533a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800531a:	4b54      	ldr	r3, [pc, #336]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800532a:	e006      	b.n	800533a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]
      break;
 8005330:	e004      	b.n	800533c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005332:	bf00      	nop
 8005334:	e002      	b.n	800533c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005336:	bf00      	nop
 8005338:	e000      	b.n	800533c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800533a:	bf00      	nop
    }

    if(status == HAL_OK)
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10d      	bne.n	800535e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005342:	4b4a      	ldr	r3, [pc, #296]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6819      	ldr	r1, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	3b01      	subs	r3, #1
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	430b      	orrs	r3, r1
 8005358:	4944      	ldr	r1, [pc, #272]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 800535a:	4313      	orrs	r3, r2
 800535c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d17d      	bne.n	8005460 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005364:	4b41      	ldr	r3, [pc, #260]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a40      	ldr	r2, [pc, #256]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 800536a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800536e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005370:	f7fd fb0a 	bl	8002988 <HAL_GetTick>
 8005374:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005376:	e009      	b.n	800538c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005378:	f7fd fb06 	bl	8002988 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d902      	bls.n	800538c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	73fb      	strb	r3, [r7, #15]
        break;
 800538a:	e005      	b.n	8005398 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800538c:	4b37      	ldr	r3, [pc, #220]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1ef      	bne.n	8005378 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d160      	bne.n	8005460 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d111      	bne.n	80053c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053a4:	4b31      	ldr	r3, [pc, #196]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80053ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6892      	ldr	r2, [r2, #8]
 80053b4:	0211      	lsls	r1, r2, #8
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68d2      	ldr	r2, [r2, #12]
 80053ba:	0912      	lsrs	r2, r2, #4
 80053bc:	0452      	lsls	r2, r2, #17
 80053be:	430a      	orrs	r2, r1
 80053c0:	492a      	ldr	r1, [pc, #168]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	610b      	str	r3, [r1, #16]
 80053c6:	e027      	b.n	8005418 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d112      	bne.n	80053f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053ce:	4b27      	ldr	r3, [pc, #156]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80053d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6892      	ldr	r2, [r2, #8]
 80053de:	0211      	lsls	r1, r2, #8
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6912      	ldr	r2, [r2, #16]
 80053e4:	0852      	lsrs	r2, r2, #1
 80053e6:	3a01      	subs	r2, #1
 80053e8:	0552      	lsls	r2, r2, #21
 80053ea:	430a      	orrs	r2, r1
 80053ec:	491f      	ldr	r1, [pc, #124]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	610b      	str	r3, [r1, #16]
 80053f2:	e011      	b.n	8005418 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053f4:	4b1d      	ldr	r3, [pc, #116]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80053fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6892      	ldr	r2, [r2, #8]
 8005404:	0211      	lsls	r1, r2, #8
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6952      	ldr	r2, [r2, #20]
 800540a:	0852      	lsrs	r2, r2, #1
 800540c:	3a01      	subs	r2, #1
 800540e:	0652      	lsls	r2, r2, #25
 8005410:	430a      	orrs	r2, r1
 8005412:	4916      	ldr	r1, [pc, #88]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005414:	4313      	orrs	r3, r2
 8005416:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a13      	ldr	r2, [pc, #76]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 800541e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005422:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005424:	f7fd fab0 	bl	8002988 <HAL_GetTick>
 8005428:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800542a:	e009      	b.n	8005440 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800542c:	f7fd faac 	bl	8002988 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d902      	bls.n	8005440 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	73fb      	strb	r3, [r7, #15]
          break;
 800543e:	e005      	b.n	800544c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005440:	4b0a      	ldr	r3, [pc, #40]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0ef      	beq.n	800542c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	4904      	ldr	r1, [pc, #16]	; (800546c <RCCEx_PLLSAI1_Config+0x1e4>)
 800545c:	4313      	orrs	r3, r2
 800545e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40021000 	.word	0x40021000

08005470 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800547e:	4b6a      	ldr	r3, [pc, #424]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d018      	beq.n	80054bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800548a:	4b67      	ldr	r3, [pc, #412]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f003 0203 	and.w	r2, r3, #3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d10d      	bne.n	80054b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
       ||
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80054a2:	4b61      	ldr	r3, [pc, #388]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	091b      	lsrs	r3, r3, #4
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
       ||
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d047      	beq.n	8005546 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	73fb      	strb	r3, [r7, #15]
 80054ba:	e044      	b.n	8005546 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d018      	beq.n	80054f6 <RCCEx_PLLSAI2_Config+0x86>
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d825      	bhi.n	8005514 <RCCEx_PLLSAI2_Config+0xa4>
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d002      	beq.n	80054d2 <RCCEx_PLLSAI2_Config+0x62>
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d009      	beq.n	80054e4 <RCCEx_PLLSAI2_Config+0x74>
 80054d0:	e020      	b.n	8005514 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054d2:	4b55      	ldr	r3, [pc, #340]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d11d      	bne.n	800551a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054e2:	e01a      	b.n	800551a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054e4:	4b50      	ldr	r3, [pc, #320]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d116      	bne.n	800551e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054f4:	e013      	b.n	800551e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054f6:	4b4c      	ldr	r3, [pc, #304]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10f      	bne.n	8005522 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005502:	4b49      	ldr	r3, [pc, #292]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005512:	e006      	b.n	8005522 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
      break;
 8005518:	e004      	b.n	8005524 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800551a:	bf00      	nop
 800551c:	e002      	b.n	8005524 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800551e:	bf00      	nop
 8005520:	e000      	b.n	8005524 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005522:	bf00      	nop
    }

    if(status == HAL_OK)
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10d      	bne.n	8005546 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800552a:	4b3f      	ldr	r3, [pc, #252]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6819      	ldr	r1, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	3b01      	subs	r3, #1
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	430b      	orrs	r3, r1
 8005540:	4939      	ldr	r1, [pc, #228]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005542:	4313      	orrs	r3, r2
 8005544:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005546:	7bfb      	ldrb	r3, [r7, #15]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d167      	bne.n	800561c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800554c:	4b36      	ldr	r3, [pc, #216]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a35      	ldr	r2, [pc, #212]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005558:	f7fd fa16 	bl	8002988 <HAL_GetTick>
 800555c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800555e:	e009      	b.n	8005574 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005560:	f7fd fa12 	bl	8002988 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d902      	bls.n	8005574 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	73fb      	strb	r3, [r7, #15]
        break;
 8005572:	e005      	b.n	8005580 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005574:	4b2c      	ldr	r3, [pc, #176]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ef      	bne.n	8005560 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d14a      	bne.n	800561c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d111      	bne.n	80055b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800558c:	4b26      	ldr	r3, [pc, #152]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6892      	ldr	r2, [r2, #8]
 800559c:	0211      	lsls	r1, r2, #8
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	68d2      	ldr	r2, [r2, #12]
 80055a2:	0912      	lsrs	r2, r2, #4
 80055a4:	0452      	lsls	r2, r2, #17
 80055a6:	430a      	orrs	r2, r1
 80055a8:	491f      	ldr	r1, [pc, #124]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	614b      	str	r3, [r1, #20]
 80055ae:	e011      	b.n	80055d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055b0:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6892      	ldr	r2, [r2, #8]
 80055c0:	0211      	lsls	r1, r2, #8
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6912      	ldr	r2, [r2, #16]
 80055c6:	0852      	lsrs	r2, r2, #1
 80055c8:	3a01      	subs	r2, #1
 80055ca:	0652      	lsls	r2, r2, #25
 80055cc:	430a      	orrs	r2, r1
 80055ce:	4916      	ldr	r1, [pc, #88]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80055d4:	4b14      	ldr	r3, [pc, #80]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a13      	ldr	r2, [pc, #76]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e0:	f7fd f9d2 	bl	8002988 <HAL_GetTick>
 80055e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055e6:	e009      	b.n	80055fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055e8:	f7fd f9ce 	bl	8002988 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d902      	bls.n	80055fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	73fb      	strb	r3, [r7, #15]
          break;
 80055fa:	e005      	b.n	8005608 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055fc:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0ef      	beq.n	80055e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800560e:	4b06      	ldr	r3, [pc, #24]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005610:	695a      	ldr	r2, [r3, #20]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	4904      	ldr	r1, [pc, #16]	; (8005628 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005618:	4313      	orrs	r3, r2
 800561a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40021000 	.word	0x40021000

0800562c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e049      	b.n	80056d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f841 	bl	80056da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3304      	adds	r3, #4
 8005668:	4619      	mov	r1, r3
 800566a:	4610      	mov	r0, r2
 800566c:	f000 fc6a 	bl	8005f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
	...

080056f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	d001      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e04f      	b.n	80057a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a23      	ldr	r2, [pc, #140]	; (80057b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01d      	beq.n	8005766 <HAL_TIM_Base_Start_IT+0x76>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005732:	d018      	beq.n	8005766 <HAL_TIM_Base_Start_IT+0x76>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1f      	ldr	r2, [pc, #124]	; (80057b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <HAL_TIM_Base_Start_IT+0x76>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1e      	ldr	r2, [pc, #120]	; (80057bc <HAL_TIM_Base_Start_IT+0xcc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <HAL_TIM_Base_Start_IT+0x76>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d009      	beq.n	8005766 <HAL_TIM_Base_Start_IT+0x76>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1b      	ldr	r2, [pc, #108]	; (80057c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <HAL_TIM_Base_Start_IT+0x76>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a19      	ldr	r2, [pc, #100]	; (80057c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d115      	bne.n	8005792 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	4b17      	ldr	r3, [pc, #92]	; (80057cc <HAL_TIM_Base_Start_IT+0xdc>)
 800576e:	4013      	ands	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b06      	cmp	r3, #6
 8005776:	d015      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0xb4>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577e:	d011      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005790:	e008      	b.n	80057a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0201 	orr.w	r2, r2, #1
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	e000      	b.n	80057a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	40012c00 	.word	0x40012c00
 80057b8:	40000400 	.word	0x40000400
 80057bc:	40000800 	.word	0x40000800
 80057c0:	40000c00 	.word	0x40000c00
 80057c4:	40013400 	.word	0x40013400
 80057c8:	40014000 	.word	0x40014000
 80057cc:	00010007 	.word	0x00010007

080057d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e049      	b.n	8005876 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fb ffba 	bl	8001770 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3304      	adds	r3, #4
 800580c:	4619      	mov	r1, r3
 800580e:	4610      	mov	r0, r2
 8005810:	f000 fb98 	bl	8005f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
	...

08005880 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d109      	bne.n	80058a4 <HAL_TIM_PWM_Start+0x24>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	bf14      	ite	ne
 800589c:	2301      	movne	r3, #1
 800589e:	2300      	moveq	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e03c      	b.n	800591e <HAL_TIM_PWM_Start+0x9e>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d109      	bne.n	80058be <HAL_TIM_PWM_Start+0x3e>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	bf14      	ite	ne
 80058b6:	2301      	movne	r3, #1
 80058b8:	2300      	moveq	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	e02f      	b.n	800591e <HAL_TIM_PWM_Start+0x9e>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d109      	bne.n	80058d8 <HAL_TIM_PWM_Start+0x58>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	e022      	b.n	800591e <HAL_TIM_PWM_Start+0x9e>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b0c      	cmp	r3, #12
 80058dc:	d109      	bne.n	80058f2 <HAL_TIM_PWM_Start+0x72>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	bf14      	ite	ne
 80058ea:	2301      	movne	r3, #1
 80058ec:	2300      	moveq	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	e015      	b.n	800591e <HAL_TIM_PWM_Start+0x9e>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b10      	cmp	r3, #16
 80058f6:	d109      	bne.n	800590c <HAL_TIM_PWM_Start+0x8c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	e008      	b.n	800591e <HAL_TIM_PWM_Start+0x9e>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e09c      	b.n	8005a60 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d104      	bne.n	8005936 <HAL_TIM_PWM_Start+0xb6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005934:	e023      	b.n	800597e <HAL_TIM_PWM_Start+0xfe>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b04      	cmp	r3, #4
 800593a:	d104      	bne.n	8005946 <HAL_TIM_PWM_Start+0xc6>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005944:	e01b      	b.n	800597e <HAL_TIM_PWM_Start+0xfe>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d104      	bne.n	8005956 <HAL_TIM_PWM_Start+0xd6>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005954:	e013      	b.n	800597e <HAL_TIM_PWM_Start+0xfe>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b0c      	cmp	r3, #12
 800595a:	d104      	bne.n	8005966 <HAL_TIM_PWM_Start+0xe6>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005964:	e00b      	b.n	800597e <HAL_TIM_PWM_Start+0xfe>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b10      	cmp	r3, #16
 800596a:	d104      	bne.n	8005976 <HAL_TIM_PWM_Start+0xf6>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005974:	e003      	b.n	800597e <HAL_TIM_PWM_Start+0xfe>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2201      	movs	r2, #1
 8005984:	6839      	ldr	r1, [r7, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fe4c 	bl	8006624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a35      	ldr	r2, [pc, #212]	; (8005a68 <HAL_TIM_PWM_Start+0x1e8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d013      	beq.n	80059be <HAL_TIM_PWM_Start+0x13e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a34      	ldr	r2, [pc, #208]	; (8005a6c <HAL_TIM_PWM_Start+0x1ec>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00e      	beq.n	80059be <HAL_TIM_PWM_Start+0x13e>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a32      	ldr	r2, [pc, #200]	; (8005a70 <HAL_TIM_PWM_Start+0x1f0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d009      	beq.n	80059be <HAL_TIM_PWM_Start+0x13e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a31      	ldr	r2, [pc, #196]	; (8005a74 <HAL_TIM_PWM_Start+0x1f4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d004      	beq.n	80059be <HAL_TIM_PWM_Start+0x13e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a2f      	ldr	r2, [pc, #188]	; (8005a78 <HAL_TIM_PWM_Start+0x1f8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d101      	bne.n	80059c2 <HAL_TIM_PWM_Start+0x142>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <HAL_TIM_PWM_Start+0x144>
 80059c2:	2300      	movs	r3, #0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d007      	beq.n	80059d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a22      	ldr	r2, [pc, #136]	; (8005a68 <HAL_TIM_PWM_Start+0x1e8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01d      	beq.n	8005a1e <HAL_TIM_PWM_Start+0x19e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ea:	d018      	beq.n	8005a1e <HAL_TIM_PWM_Start+0x19e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a22      	ldr	r2, [pc, #136]	; (8005a7c <HAL_TIM_PWM_Start+0x1fc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d013      	beq.n	8005a1e <HAL_TIM_PWM_Start+0x19e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a21      	ldr	r2, [pc, #132]	; (8005a80 <HAL_TIM_PWM_Start+0x200>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00e      	beq.n	8005a1e <HAL_TIM_PWM_Start+0x19e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a1f      	ldr	r2, [pc, #124]	; (8005a84 <HAL_TIM_PWM_Start+0x204>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d009      	beq.n	8005a1e <HAL_TIM_PWM_Start+0x19e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a17      	ldr	r2, [pc, #92]	; (8005a6c <HAL_TIM_PWM_Start+0x1ec>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d004      	beq.n	8005a1e <HAL_TIM_PWM_Start+0x19e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a15      	ldr	r2, [pc, #84]	; (8005a70 <HAL_TIM_PWM_Start+0x1f0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d115      	bne.n	8005a4a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	4b18      	ldr	r3, [pc, #96]	; (8005a88 <HAL_TIM_PWM_Start+0x208>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b06      	cmp	r3, #6
 8005a2e:	d015      	beq.n	8005a5c <HAL_TIM_PWM_Start+0x1dc>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a36:	d011      	beq.n	8005a5c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a48:	e008      	b.n	8005a5c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0201 	orr.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	e000      	b.n	8005a5e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40012c00 	.word	0x40012c00
 8005a6c:	40013400 	.word	0x40013400
 8005a70:	40014000 	.word	0x40014000
 8005a74:	40014400 	.word	0x40014400
 8005a78:	40014800 	.word	0x40014800
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800
 8005a84:	40000c00 	.word	0x40000c00
 8005a88:	00010007 	.word	0x00010007

08005a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d122      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d11b      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0202 	mvn.w	r2, #2
 8005ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fa1a 	bl	8005f08 <HAL_TIM_IC_CaptureCallback>
 8005ad4:	e005      	b.n	8005ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa0c 	bl	8005ef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fa1d 	bl	8005f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d122      	bne.n	8005b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d11b      	bne.n	8005b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0204 	mvn.w	r2, #4
 8005b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2202      	movs	r2, #2
 8005b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f9f0 	bl	8005f08 <HAL_TIM_IC_CaptureCallback>
 8005b28:	e005      	b.n	8005b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f9e2 	bl	8005ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f9f3 	bl	8005f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d122      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d11b      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0208 	mvn.w	r2, #8
 8005b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2204      	movs	r2, #4
 8005b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f9c6 	bl	8005f08 <HAL_TIM_IC_CaptureCallback>
 8005b7c:	e005      	b.n	8005b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f9b8 	bl	8005ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f9c9 	bl	8005f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f003 0310 	and.w	r3, r3, #16
 8005b9a:	2b10      	cmp	r3, #16
 8005b9c:	d122      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b10      	cmp	r3, #16
 8005baa:	d11b      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0210 	mvn.w	r2, #16
 8005bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2208      	movs	r2, #8
 8005bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f99c 	bl	8005f08 <HAL_TIM_IC_CaptureCallback>
 8005bd0:	e005      	b.n	8005bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f98e 	bl	8005ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f99f 	bl	8005f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d10e      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d107      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0201 	mvn.w	r2, #1
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fb fb86 	bl	800131c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1a:	2b80      	cmp	r3, #128	; 0x80
 8005c1c:	d10e      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c28:	2b80      	cmp	r3, #128	; 0x80
 8005c2a:	d107      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fdac 	bl	8006794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c4a:	d10e      	bne.n	8005c6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c56:	2b80      	cmp	r3, #128	; 0x80
 8005c58:	d107      	bne.n	8005c6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fd9f 	bl	80067a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c74:	2b40      	cmp	r3, #64	; 0x40
 8005c76:	d10e      	bne.n	8005c96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b40      	cmp	r3, #64	; 0x40
 8005c84:	d107      	bne.n	8005c96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f94d 	bl	8005f30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d10e      	bne.n	8005cc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	d107      	bne.n	8005cc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f06f 0220 	mvn.w	r2, #32
 8005cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fd5f 	bl	8006780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cc2:	bf00      	nop
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e0ff      	b.n	8005eea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b14      	cmp	r3, #20
 8005cf6:	f200 80f0 	bhi.w	8005eda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005cfa:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d00:	08005d55 	.word	0x08005d55
 8005d04:	08005edb 	.word	0x08005edb
 8005d08:	08005edb 	.word	0x08005edb
 8005d0c:	08005edb 	.word	0x08005edb
 8005d10:	08005d95 	.word	0x08005d95
 8005d14:	08005edb 	.word	0x08005edb
 8005d18:	08005edb 	.word	0x08005edb
 8005d1c:	08005edb 	.word	0x08005edb
 8005d20:	08005dd7 	.word	0x08005dd7
 8005d24:	08005edb 	.word	0x08005edb
 8005d28:	08005edb 	.word	0x08005edb
 8005d2c:	08005edb 	.word	0x08005edb
 8005d30:	08005e17 	.word	0x08005e17
 8005d34:	08005edb 	.word	0x08005edb
 8005d38:	08005edb 	.word	0x08005edb
 8005d3c:	08005edb 	.word	0x08005edb
 8005d40:	08005e59 	.word	0x08005e59
 8005d44:	08005edb 	.word	0x08005edb
 8005d48:	08005edb 	.word	0x08005edb
 8005d4c:	08005edb 	.word	0x08005edb
 8005d50:	08005e99 	.word	0x08005e99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f98c 	bl	8006078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0208 	orr.w	r2, r2, #8
 8005d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0204 	bic.w	r2, r2, #4
 8005d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6999      	ldr	r1, [r3, #24]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	619a      	str	r2, [r3, #24]
      break;
 8005d92:	e0a5      	b.n	8005ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 f9fc 	bl	8006198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6999      	ldr	r1, [r3, #24]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	021a      	lsls	r2, r3, #8
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	619a      	str	r2, [r3, #24]
      break;
 8005dd4:	e084      	b.n	8005ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fa65 	bl	80062ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69da      	ldr	r2, [r3, #28]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f042 0208 	orr.w	r2, r2, #8
 8005df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69da      	ldr	r2, [r3, #28]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0204 	bic.w	r2, r2, #4
 8005e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69d9      	ldr	r1, [r3, #28]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	61da      	str	r2, [r3, #28]
      break;
 8005e14:	e064      	b.n	8005ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 facd 	bl	80063bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69da      	ldr	r2, [r3, #28]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69d9      	ldr	r1, [r3, #28]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	021a      	lsls	r2, r3, #8
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	61da      	str	r2, [r3, #28]
      break;
 8005e56:	e043      	b.n	8005ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fb16 	bl	8006490 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0208 	orr.w	r2, r2, #8
 8005e72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0204 	bic.w	r2, r2, #4
 8005e82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e96:	e023      	b.n	8005ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fb5a 	bl	8006558 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	021a      	lsls	r2, r3, #8
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ed8:	e002      	b.n	8005ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	75fb      	strb	r3, [r7, #23]
      break;
 8005ede:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop

08005ef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a40      	ldr	r2, [pc, #256]	; (8006058 <TIM_Base_SetConfig+0x114>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d013      	beq.n	8005f84 <TIM_Base_SetConfig+0x40>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f62:	d00f      	beq.n	8005f84 <TIM_Base_SetConfig+0x40>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a3d      	ldr	r2, [pc, #244]	; (800605c <TIM_Base_SetConfig+0x118>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d00b      	beq.n	8005f84 <TIM_Base_SetConfig+0x40>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a3c      	ldr	r2, [pc, #240]	; (8006060 <TIM_Base_SetConfig+0x11c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d007      	beq.n	8005f84 <TIM_Base_SetConfig+0x40>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a3b      	ldr	r2, [pc, #236]	; (8006064 <TIM_Base_SetConfig+0x120>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d003      	beq.n	8005f84 <TIM_Base_SetConfig+0x40>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a3a      	ldr	r2, [pc, #232]	; (8006068 <TIM_Base_SetConfig+0x124>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d108      	bne.n	8005f96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a2f      	ldr	r2, [pc, #188]	; (8006058 <TIM_Base_SetConfig+0x114>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d01f      	beq.n	8005fde <TIM_Base_SetConfig+0x9a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa4:	d01b      	beq.n	8005fde <TIM_Base_SetConfig+0x9a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a2c      	ldr	r2, [pc, #176]	; (800605c <TIM_Base_SetConfig+0x118>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d017      	beq.n	8005fde <TIM_Base_SetConfig+0x9a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a2b      	ldr	r2, [pc, #172]	; (8006060 <TIM_Base_SetConfig+0x11c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <TIM_Base_SetConfig+0x9a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a2a      	ldr	r2, [pc, #168]	; (8006064 <TIM_Base_SetConfig+0x120>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00f      	beq.n	8005fde <TIM_Base_SetConfig+0x9a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a29      	ldr	r2, [pc, #164]	; (8006068 <TIM_Base_SetConfig+0x124>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00b      	beq.n	8005fde <TIM_Base_SetConfig+0x9a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a28      	ldr	r2, [pc, #160]	; (800606c <TIM_Base_SetConfig+0x128>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d007      	beq.n	8005fde <TIM_Base_SetConfig+0x9a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a27      	ldr	r2, [pc, #156]	; (8006070 <TIM_Base_SetConfig+0x12c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d003      	beq.n	8005fde <TIM_Base_SetConfig+0x9a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a26      	ldr	r2, [pc, #152]	; (8006074 <TIM_Base_SetConfig+0x130>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d108      	bne.n	8005ff0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a10      	ldr	r2, [pc, #64]	; (8006058 <TIM_Base_SetConfig+0x114>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00f      	beq.n	800603c <TIM_Base_SetConfig+0xf8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a12      	ldr	r2, [pc, #72]	; (8006068 <TIM_Base_SetConfig+0x124>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00b      	beq.n	800603c <TIM_Base_SetConfig+0xf8>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a11      	ldr	r2, [pc, #68]	; (800606c <TIM_Base_SetConfig+0x128>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d007      	beq.n	800603c <TIM_Base_SetConfig+0xf8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a10      	ldr	r2, [pc, #64]	; (8006070 <TIM_Base_SetConfig+0x12c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d003      	beq.n	800603c <TIM_Base_SetConfig+0xf8>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a0f      	ldr	r2, [pc, #60]	; (8006074 <TIM_Base_SetConfig+0x130>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d103      	bne.n	8006044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	615a      	str	r2, [r3, #20]
}
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40012c00 	.word	0x40012c00
 800605c:	40000400 	.word	0x40000400
 8006060:	40000800 	.word	0x40000800
 8006064:	40000c00 	.word	0x40000c00
 8006068:	40013400 	.word	0x40013400
 800606c:	40014000 	.word	0x40014000
 8006070:	40014400 	.word	0x40014400
 8006074:	40014800 	.word	0x40014800

08006078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f023 0201 	bic.w	r2, r3, #1
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0303 	bic.w	r3, r3, #3
 80060b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 0302 	bic.w	r3, r3, #2
 80060c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a2c      	ldr	r2, [pc, #176]	; (8006184 <TIM_OC1_SetConfig+0x10c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00f      	beq.n	80060f8 <TIM_OC1_SetConfig+0x80>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a2b      	ldr	r2, [pc, #172]	; (8006188 <TIM_OC1_SetConfig+0x110>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00b      	beq.n	80060f8 <TIM_OC1_SetConfig+0x80>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a2a      	ldr	r2, [pc, #168]	; (800618c <TIM_OC1_SetConfig+0x114>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d007      	beq.n	80060f8 <TIM_OC1_SetConfig+0x80>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a29      	ldr	r2, [pc, #164]	; (8006190 <TIM_OC1_SetConfig+0x118>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d003      	beq.n	80060f8 <TIM_OC1_SetConfig+0x80>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a28      	ldr	r2, [pc, #160]	; (8006194 <TIM_OC1_SetConfig+0x11c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d10c      	bne.n	8006112 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f023 0308 	bic.w	r3, r3, #8
 80060fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f023 0304 	bic.w	r3, r3, #4
 8006110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a1b      	ldr	r2, [pc, #108]	; (8006184 <TIM_OC1_SetConfig+0x10c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00f      	beq.n	800613a <TIM_OC1_SetConfig+0xc2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a1a      	ldr	r2, [pc, #104]	; (8006188 <TIM_OC1_SetConfig+0x110>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00b      	beq.n	800613a <TIM_OC1_SetConfig+0xc2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a19      	ldr	r2, [pc, #100]	; (800618c <TIM_OC1_SetConfig+0x114>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d007      	beq.n	800613a <TIM_OC1_SetConfig+0xc2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a18      	ldr	r2, [pc, #96]	; (8006190 <TIM_OC1_SetConfig+0x118>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_OC1_SetConfig+0xc2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a17      	ldr	r2, [pc, #92]	; (8006194 <TIM_OC1_SetConfig+0x11c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d111      	bne.n	800615e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	621a      	str	r2, [r3, #32]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40013400 	.word	0x40013400
 800618c:	40014000 	.word	0x40014000
 8006190:	40014400 	.word	0x40014400
 8006194:	40014800 	.word	0x40014800

08006198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	f023 0210 	bic.w	r2, r3, #16
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	021b      	lsls	r3, r3, #8
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f023 0320 	bic.w	r3, r3, #32
 80061e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a28      	ldr	r2, [pc, #160]	; (8006298 <TIM_OC2_SetConfig+0x100>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d003      	beq.n	8006204 <TIM_OC2_SetConfig+0x6c>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a27      	ldr	r2, [pc, #156]	; (800629c <TIM_OC2_SetConfig+0x104>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d10d      	bne.n	8006220 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800620a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a1d      	ldr	r2, [pc, #116]	; (8006298 <TIM_OC2_SetConfig+0x100>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00f      	beq.n	8006248 <TIM_OC2_SetConfig+0xb0>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a1c      	ldr	r2, [pc, #112]	; (800629c <TIM_OC2_SetConfig+0x104>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00b      	beq.n	8006248 <TIM_OC2_SetConfig+0xb0>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a1b      	ldr	r2, [pc, #108]	; (80062a0 <TIM_OC2_SetConfig+0x108>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d007      	beq.n	8006248 <TIM_OC2_SetConfig+0xb0>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <TIM_OC2_SetConfig+0x10c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d003      	beq.n	8006248 <TIM_OC2_SetConfig+0xb0>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a19      	ldr	r2, [pc, #100]	; (80062a8 <TIM_OC2_SetConfig+0x110>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d113      	bne.n	8006270 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800624e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006256:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	621a      	str	r2, [r3, #32]
}
 800628a:	bf00      	nop
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40012c00 	.word	0x40012c00
 800629c:	40013400 	.word	0x40013400
 80062a0:	40014000 	.word	0x40014000
 80062a4:	40014400 	.word	0x40014400
 80062a8:	40014800 	.word	0x40014800

080062ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a27      	ldr	r2, [pc, #156]	; (80063a8 <TIM_OC3_SetConfig+0xfc>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_OC3_SetConfig+0x6a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a26      	ldr	r2, [pc, #152]	; (80063ac <TIM_OC3_SetConfig+0x100>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d10d      	bne.n	8006332 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800631c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a1c      	ldr	r2, [pc, #112]	; (80063a8 <TIM_OC3_SetConfig+0xfc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00f      	beq.n	800635a <TIM_OC3_SetConfig+0xae>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a1b      	ldr	r2, [pc, #108]	; (80063ac <TIM_OC3_SetConfig+0x100>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d00b      	beq.n	800635a <TIM_OC3_SetConfig+0xae>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a1a      	ldr	r2, [pc, #104]	; (80063b0 <TIM_OC3_SetConfig+0x104>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d007      	beq.n	800635a <TIM_OC3_SetConfig+0xae>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a19      	ldr	r2, [pc, #100]	; (80063b4 <TIM_OC3_SetConfig+0x108>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d003      	beq.n	800635a <TIM_OC3_SetConfig+0xae>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a18      	ldr	r2, [pc, #96]	; (80063b8 <TIM_OC3_SetConfig+0x10c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d113      	bne.n	8006382 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	621a      	str	r2, [r3, #32]
}
 800639c:	bf00      	nop
 800639e:	371c      	adds	r7, #28
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40013400 	.word	0x40013400
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400
 80063b8:	40014800 	.word	0x40014800

080063bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	021b      	lsls	r3, r3, #8
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800640a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	031b      	lsls	r3, r3, #12
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a18      	ldr	r2, [pc, #96]	; (800647c <TIM_OC4_SetConfig+0xc0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00f      	beq.n	8006440 <TIM_OC4_SetConfig+0x84>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a17      	ldr	r2, [pc, #92]	; (8006480 <TIM_OC4_SetConfig+0xc4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00b      	beq.n	8006440 <TIM_OC4_SetConfig+0x84>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a16      	ldr	r2, [pc, #88]	; (8006484 <TIM_OC4_SetConfig+0xc8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d007      	beq.n	8006440 <TIM_OC4_SetConfig+0x84>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a15      	ldr	r2, [pc, #84]	; (8006488 <TIM_OC4_SetConfig+0xcc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d003      	beq.n	8006440 <TIM_OC4_SetConfig+0x84>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a14      	ldr	r2, [pc, #80]	; (800648c <TIM_OC4_SetConfig+0xd0>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d109      	bne.n	8006454 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006446:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	019b      	lsls	r3, r3, #6
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	621a      	str	r2, [r3, #32]
}
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40012c00 	.word	0x40012c00
 8006480:	40013400 	.word	0x40013400
 8006484:	40014000 	.word	0x40014000
 8006488:	40014400 	.word	0x40014400
 800648c:	40014800 	.word	0x40014800

08006490 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	041b      	lsls	r3, r3, #16
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a17      	ldr	r2, [pc, #92]	; (8006544 <TIM_OC5_SetConfig+0xb4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00f      	beq.n	800650a <TIM_OC5_SetConfig+0x7a>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a16      	ldr	r2, [pc, #88]	; (8006548 <TIM_OC5_SetConfig+0xb8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00b      	beq.n	800650a <TIM_OC5_SetConfig+0x7a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a15      	ldr	r2, [pc, #84]	; (800654c <TIM_OC5_SetConfig+0xbc>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d007      	beq.n	800650a <TIM_OC5_SetConfig+0x7a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a14      	ldr	r2, [pc, #80]	; (8006550 <TIM_OC5_SetConfig+0xc0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d003      	beq.n	800650a <TIM_OC5_SetConfig+0x7a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a13      	ldr	r2, [pc, #76]	; (8006554 <TIM_OC5_SetConfig+0xc4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d109      	bne.n	800651e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006510:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	021b      	lsls	r3, r3, #8
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	4313      	orrs	r3, r2
 800651c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	621a      	str	r2, [r3, #32]
}
 8006538:	bf00      	nop
 800653a:	371c      	adds	r7, #28
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	40012c00 	.word	0x40012c00
 8006548:	40013400 	.word	0x40013400
 800654c:	40014000 	.word	0x40014000
 8006550:	40014400 	.word	0x40014400
 8006554:	40014800 	.word	0x40014800

08006558 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800659e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	051b      	lsls	r3, r3, #20
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a18      	ldr	r2, [pc, #96]	; (8006610 <TIM_OC6_SetConfig+0xb8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00f      	beq.n	80065d4 <TIM_OC6_SetConfig+0x7c>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a17      	ldr	r2, [pc, #92]	; (8006614 <TIM_OC6_SetConfig+0xbc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00b      	beq.n	80065d4 <TIM_OC6_SetConfig+0x7c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a16      	ldr	r2, [pc, #88]	; (8006618 <TIM_OC6_SetConfig+0xc0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d007      	beq.n	80065d4 <TIM_OC6_SetConfig+0x7c>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a15      	ldr	r2, [pc, #84]	; (800661c <TIM_OC6_SetConfig+0xc4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d003      	beq.n	80065d4 <TIM_OC6_SetConfig+0x7c>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a14      	ldr	r2, [pc, #80]	; (8006620 <TIM_OC6_SetConfig+0xc8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d109      	bne.n	80065e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	029b      	lsls	r3, r3, #10
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	621a      	str	r2, [r3, #32]
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40012c00 	.word	0x40012c00
 8006614:	40013400 	.word	0x40013400
 8006618:	40014000 	.word	0x40014000
 800661c:	40014400 	.word	0x40014400
 8006620:	40014800 	.word	0x40014800

08006624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f003 031f 	and.w	r3, r3, #31
 8006636:	2201      	movs	r2, #1
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a1a      	ldr	r2, [r3, #32]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	43db      	mvns	r3, r3
 8006646:	401a      	ands	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a1a      	ldr	r2, [r3, #32]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	fa01 f303 	lsl.w	r3, r1, r3
 800665c:	431a      	orrs	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	621a      	str	r2, [r3, #32]
}
 8006662:	bf00      	nop
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
	...

08006670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006684:	2302      	movs	r3, #2
 8006686:	e068      	b.n	800675a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a2e      	ldr	r2, [pc, #184]	; (8006768 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d004      	beq.n	80066bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a2d      	ldr	r2, [pc, #180]	; (800676c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d108      	bne.n	80066ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	4313      	orrs	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a1e      	ldr	r2, [pc, #120]	; (8006768 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d01d      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066fa:	d018      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1b      	ldr	r2, [pc, #108]	; (8006770 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d013      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a1a      	ldr	r2, [pc, #104]	; (8006774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00e      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a18      	ldr	r2, [pc, #96]	; (8006778 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d009      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a13      	ldr	r2, [pc, #76]	; (800676c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d004      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a14      	ldr	r2, [pc, #80]	; (800677c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d10c      	bne.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	4313      	orrs	r3, r2
 800673e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40012c00 	.word	0x40012c00
 800676c:	40013400 	.word	0x40013400
 8006770:	40000400 	.word	0x40000400
 8006774:	40000800 	.word	0x40000800
 8006778:	40000c00 	.word	0x40000c00
 800677c:	40014000 	.word	0x40014000

08006780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e040      	b.n	8006850 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d106      	bne.n	80067e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7fb f84e 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2224      	movs	r2, #36	; 0x24
 80067e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 0201 	bic.w	r2, r2, #1
 80067f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fbc8 	bl	8006f90 <UART_SetConfig>
 8006800:	4603      	mov	r3, r0
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e022      	b.n	8006850 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fe74 	bl	8007500 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689a      	ldr	r2, [r3, #8]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006836:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0201 	orr.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fefb 	bl	8007644 <UART_CheckIdleState>
 800684e:	4603      	mov	r3, r0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b08a      	sub	sp, #40	; 0x28
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	4613      	mov	r3, r2
 8006864:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800686a:	2b20      	cmp	r3, #32
 800686c:	d178      	bne.n	8006960 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <HAL_UART_Transmit_DMA+0x22>
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e071      	b.n	8006962 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_UART_Transmit_DMA+0x34>
 8006888:	2302      	movs	r3, #2
 800688a:	e06a      	b.n	8006962 <HAL_UART_Transmit_DMA+0x10a>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	88fa      	ldrh	r2, [r7, #6]
 800689e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	88fa      	ldrh	r2, [r7, #6]
 80068a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2221      	movs	r2, #33	; 0x21
 80068b6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d02b      	beq.n	8006918 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c4:	4a29      	ldr	r2, [pc, #164]	; (800696c <HAL_UART_Transmit_DMA+0x114>)
 80068c6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068cc:	4a28      	ldr	r2, [pc, #160]	; (8006970 <HAL_UART_Transmit_DMA+0x118>)
 80068ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d4:	4a27      	ldr	r2, [pc, #156]	; (8006974 <HAL_UART_Transmit_DMA+0x11c>)
 80068d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068dc:	2200      	movs	r2, #0
 80068de:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e8:	4619      	mov	r1, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3328      	adds	r3, #40	; 0x28
 80068f0:	461a      	mov	r2, r3
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	f7fc f9ee 	bl	8002cd4 <HAL_DMA_Start_IT>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2210      	movs	r2, #16
 8006902:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2220      	movs	r2, #32
 8006912:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e024      	b.n	8006962 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2240      	movs	r2, #64	; 0x40
 800691e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3308      	adds	r3, #8
 800692e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	613b      	str	r3, [r7, #16]
   return(result);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3308      	adds	r3, #8
 8006946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006948:	623a      	str	r2, [r7, #32]
 800694a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	69f9      	ldr	r1, [r7, #28]
 800694e:	6a3a      	ldr	r2, [r7, #32]
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	61bb      	str	r3, [r7, #24]
   return(result);
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e5      	bne.n	8006928 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	e000      	b.n	8006962 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006960:	2302      	movs	r3, #2
  }
}
 8006962:	4618      	mov	r0, r3
 8006964:	3728      	adds	r7, #40	; 0x28
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	08007971 	.word	0x08007971
 8006970:	08007a0b 	.word	0x08007a0b
 8006974:	08007a27 	.word	0x08007a27

08006978 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b0ba      	sub	sp, #232	; 0xe8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800699e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80069a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80069a6:	4013      	ands	r3, r2
 80069a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80069ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d115      	bne.n	80069e0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80069b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00f      	beq.n	80069e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80069c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d009      	beq.n	80069e0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 82a6 	beq.w	8006f22 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	4798      	blx	r3
      }
      return;
 80069de:	e2a0      	b.n	8006f22 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80069e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 8117 	beq.w	8006c18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80069ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80069f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80069fa:	4b85      	ldr	r3, [pc, #532]	; (8006c10 <HAL_UART_IRQHandler+0x298>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 810a 	beq.w	8006c18 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d011      	beq.n	8006a34 <HAL_UART_IRQHandler+0xbc>
 8006a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00b      	beq.n	8006a34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2201      	movs	r2, #1
 8006a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a2a:	f043 0201 	orr.w	r2, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d011      	beq.n	8006a64 <HAL_UART_IRQHandler+0xec>
 8006a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00b      	beq.n	8006a64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2202      	movs	r2, #2
 8006a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a5a:	f043 0204 	orr.w	r2, r3, #4
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d011      	beq.n	8006a94 <HAL_UART_IRQHandler+0x11c>
 8006a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2204      	movs	r2, #4
 8006a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a8a:	f043 0202 	orr.w	r2, r3, #2
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d017      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa4:	f003 0320 	and.w	r3, r3, #32
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d105      	bne.n	8006ab8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00b      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2208      	movs	r2, #8
 8006abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac6:	f043 0208 	orr.w	r2, r3, #8
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d012      	beq.n	8006b02 <HAL_UART_IRQHandler+0x18a>
 8006adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00c      	beq.n	8006b02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006af0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006af8:	f043 0220 	orr.w	r2, r3, #32
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 820c 	beq.w	8006f26 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00d      	beq.n	8006b36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d007      	beq.n	8006b36 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4a:	2b40      	cmp	r3, #64	; 0x40
 8006b4c:	d005      	beq.n	8006b5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d04f      	beq.n	8006bfa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fea5 	bl	80078aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6a:	2b40      	cmp	r3, #64	; 0x40
 8006b6c:	d141      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3308      	adds	r3, #8
 8006b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3308      	adds	r3, #8
 8006b96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ba6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1d9      	bne.n	8006b6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d013      	beq.n	8006bea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc6:	4a13      	ldr	r2, [pc, #76]	; (8006c14 <HAL_UART_IRQHandler+0x29c>)
 8006bc8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fc f91e 	bl	8002e10 <HAL_DMA_Abort_IT>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d017      	beq.n	8006c0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006be4:	4610      	mov	r0, r2
 8006be6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be8:	e00f      	b.n	8006c0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f9ba 	bl	8006f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf0:	e00b      	b.n	8006c0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f9b6 	bl	8006f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf8:	e007      	b.n	8006c0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f9b2 	bl	8006f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006c08:	e18d      	b.n	8006f26 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0a:	bf00      	nop
    return;
 8006c0c:	e18b      	b.n	8006f26 <HAL_UART_IRQHandler+0x5ae>
 8006c0e:	bf00      	nop
 8006c10:	04000120 	.word	0x04000120
 8006c14:	08007aa3 	.word	0x08007aa3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	f040 8146 	bne.w	8006eae <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c26:	f003 0310 	and.w	r3, r3, #16
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 813f 	beq.w	8006eae <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c34:	f003 0310 	and.w	r3, r3, #16
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 8138 	beq.w	8006eae <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2210      	movs	r2, #16
 8006c44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c50:	2b40      	cmp	r3, #64	; 0x40
 8006c52:	f040 80b4 	bne.w	8006dbe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 815f 	beq.w	8006f2a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c76:	429a      	cmp	r2, r3
 8006c78:	f080 8157 	bcs.w	8006f2a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f040 8085 	bne.w	8006da2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cc6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1da      	bne.n	8006c98 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cf4:	f023 0301 	bic.w	r3, r3, #1
 8006cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3308      	adds	r3, #8
 8006d02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e1      	bne.n	8006ce2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3308      	adds	r3, #8
 8006d24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e3      	bne.n	8006d1e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d72:	f023 0310 	bic.w	r3, r3, #16
 8006d76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d84:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d86:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e4      	bne.n	8006d62 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fb fff9 	bl	8002d94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f8de 	bl	8006f78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dbc:	e0b5      	b.n	8006f2a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 80a7 	beq.w	8006f2e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 80a2 	beq.w	8006f2e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e4      	bne.n	8006dea <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3308      	adds	r3, #8
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	623b      	str	r3, [r7, #32]
   return(result);
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	f023 0301 	bic.w	r3, r3, #1
 8006e36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3308      	adds	r3, #8
 8006e40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e44:	633a      	str	r2, [r7, #48]	; 0x30
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e3      	bne.n	8006e20 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 0310 	bic.w	r3, r3, #16
 8006e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e90:	69b9      	ldr	r1, [r7, #24]
 8006e92:	69fa      	ldr	r2, [r7, #28]
 8006e94:	e841 2300 	strex	r3, r2, [r1]
 8006e98:	617b      	str	r3, [r7, #20]
   return(result);
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1e4      	bne.n	8006e6a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f866 	bl	8006f78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006eac:	e03f      	b.n	8006f2e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00e      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x560>
 8006eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d008      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ece:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fe26 	bl	8007b22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ed6:	e02d      	b.n	8006f34 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00e      	beq.n	8006f02 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01c      	beq.n	8006f32 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
    }
    return;
 8006f00:	e017      	b.n	8006f32 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d012      	beq.n	8006f34 <HAL_UART_IRQHandler+0x5bc>
 8006f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00c      	beq.n	8006f34 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fdd7 	bl	8007ace <UART_EndTransmit_IT>
    return;
 8006f20:	e008      	b.n	8006f34 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006f22:	bf00      	nop
 8006f24:	e006      	b.n	8006f34 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006f26:	bf00      	nop
 8006f28:	e004      	b.n	8006f34 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006f2a:	bf00      	nop
 8006f2c:	e002      	b.n	8006f34 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006f2e:	bf00      	nop
 8006f30:	e000      	b.n	8006f34 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006f32:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006f34:	37e8      	adds	r7, #232	; 0xe8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop

08006f3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f94:	b08a      	sub	sp, #40	; 0x28
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	4ba4      	ldr	r3, [pc, #656]	; (8007250 <UART_SetConfig+0x2c0>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	6812      	ldr	r2, [r2, #0]
 8006fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a99      	ldr	r2, [pc, #612]	; (8007254 <UART_SetConfig+0x2c4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800700c:	430a      	orrs	r2, r1
 800700e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a90      	ldr	r2, [pc, #576]	; (8007258 <UART_SetConfig+0x2c8>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d126      	bne.n	8007068 <UART_SetConfig+0xd8>
 800701a:	4b90      	ldr	r3, [pc, #576]	; (800725c <UART_SetConfig+0x2cc>)
 800701c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007020:	f003 0303 	and.w	r3, r3, #3
 8007024:	2b03      	cmp	r3, #3
 8007026:	d81b      	bhi.n	8007060 <UART_SetConfig+0xd0>
 8007028:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <UART_SetConfig+0xa0>)
 800702a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702e:	bf00      	nop
 8007030:	08007041 	.word	0x08007041
 8007034:	08007051 	.word	0x08007051
 8007038:	08007049 	.word	0x08007049
 800703c:	08007059 	.word	0x08007059
 8007040:	2301      	movs	r3, #1
 8007042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007046:	e116      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007048:	2302      	movs	r3, #2
 800704a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800704e:	e112      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007050:	2304      	movs	r3, #4
 8007052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007056:	e10e      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007058:	2308      	movs	r3, #8
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705e:	e10a      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007060:	2310      	movs	r3, #16
 8007062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007066:	e106      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a7c      	ldr	r2, [pc, #496]	; (8007260 <UART_SetConfig+0x2d0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d138      	bne.n	80070e4 <UART_SetConfig+0x154>
 8007072:	4b7a      	ldr	r3, [pc, #488]	; (800725c <UART_SetConfig+0x2cc>)
 8007074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007078:	f003 030c 	and.w	r3, r3, #12
 800707c:	2b0c      	cmp	r3, #12
 800707e:	d82d      	bhi.n	80070dc <UART_SetConfig+0x14c>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <UART_SetConfig+0xf8>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070bd 	.word	0x080070bd
 800708c:	080070dd 	.word	0x080070dd
 8007090:	080070dd 	.word	0x080070dd
 8007094:	080070dd 	.word	0x080070dd
 8007098:	080070cd 	.word	0x080070cd
 800709c:	080070dd 	.word	0x080070dd
 80070a0:	080070dd 	.word	0x080070dd
 80070a4:	080070dd 	.word	0x080070dd
 80070a8:	080070c5 	.word	0x080070c5
 80070ac:	080070dd 	.word	0x080070dd
 80070b0:	080070dd 	.word	0x080070dd
 80070b4:	080070dd 	.word	0x080070dd
 80070b8:	080070d5 	.word	0x080070d5
 80070bc:	2300      	movs	r3, #0
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c2:	e0d8      	b.n	8007276 <UART_SetConfig+0x2e6>
 80070c4:	2302      	movs	r3, #2
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ca:	e0d4      	b.n	8007276 <UART_SetConfig+0x2e6>
 80070cc:	2304      	movs	r3, #4
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d2:	e0d0      	b.n	8007276 <UART_SetConfig+0x2e6>
 80070d4:	2308      	movs	r3, #8
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070da:	e0cc      	b.n	8007276 <UART_SetConfig+0x2e6>
 80070dc:	2310      	movs	r3, #16
 80070de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070e2:	e0c8      	b.n	8007276 <UART_SetConfig+0x2e6>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a5e      	ldr	r2, [pc, #376]	; (8007264 <UART_SetConfig+0x2d4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d125      	bne.n	800713a <UART_SetConfig+0x1aa>
 80070ee:	4b5b      	ldr	r3, [pc, #364]	; (800725c <UART_SetConfig+0x2cc>)
 80070f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070f8:	2b30      	cmp	r3, #48	; 0x30
 80070fa:	d016      	beq.n	800712a <UART_SetConfig+0x19a>
 80070fc:	2b30      	cmp	r3, #48	; 0x30
 80070fe:	d818      	bhi.n	8007132 <UART_SetConfig+0x1a2>
 8007100:	2b20      	cmp	r3, #32
 8007102:	d00a      	beq.n	800711a <UART_SetConfig+0x18a>
 8007104:	2b20      	cmp	r3, #32
 8007106:	d814      	bhi.n	8007132 <UART_SetConfig+0x1a2>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <UART_SetConfig+0x182>
 800710c:	2b10      	cmp	r3, #16
 800710e:	d008      	beq.n	8007122 <UART_SetConfig+0x192>
 8007110:	e00f      	b.n	8007132 <UART_SetConfig+0x1a2>
 8007112:	2300      	movs	r3, #0
 8007114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007118:	e0ad      	b.n	8007276 <UART_SetConfig+0x2e6>
 800711a:	2302      	movs	r3, #2
 800711c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007120:	e0a9      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007122:	2304      	movs	r3, #4
 8007124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007128:	e0a5      	b.n	8007276 <UART_SetConfig+0x2e6>
 800712a:	2308      	movs	r3, #8
 800712c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007130:	e0a1      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007132:	2310      	movs	r3, #16
 8007134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007138:	e09d      	b.n	8007276 <UART_SetConfig+0x2e6>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a4a      	ldr	r2, [pc, #296]	; (8007268 <UART_SetConfig+0x2d8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d125      	bne.n	8007190 <UART_SetConfig+0x200>
 8007144:	4b45      	ldr	r3, [pc, #276]	; (800725c <UART_SetConfig+0x2cc>)
 8007146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800714a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800714e:	2bc0      	cmp	r3, #192	; 0xc0
 8007150:	d016      	beq.n	8007180 <UART_SetConfig+0x1f0>
 8007152:	2bc0      	cmp	r3, #192	; 0xc0
 8007154:	d818      	bhi.n	8007188 <UART_SetConfig+0x1f8>
 8007156:	2b80      	cmp	r3, #128	; 0x80
 8007158:	d00a      	beq.n	8007170 <UART_SetConfig+0x1e0>
 800715a:	2b80      	cmp	r3, #128	; 0x80
 800715c:	d814      	bhi.n	8007188 <UART_SetConfig+0x1f8>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <UART_SetConfig+0x1d8>
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d008      	beq.n	8007178 <UART_SetConfig+0x1e8>
 8007166:	e00f      	b.n	8007188 <UART_SetConfig+0x1f8>
 8007168:	2300      	movs	r3, #0
 800716a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800716e:	e082      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007170:	2302      	movs	r3, #2
 8007172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007176:	e07e      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007178:	2304      	movs	r3, #4
 800717a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800717e:	e07a      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007180:	2308      	movs	r3, #8
 8007182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007186:	e076      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007188:	2310      	movs	r3, #16
 800718a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800718e:	e072      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a35      	ldr	r2, [pc, #212]	; (800726c <UART_SetConfig+0x2dc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d12a      	bne.n	80071f0 <UART_SetConfig+0x260>
 800719a:	4b30      	ldr	r3, [pc, #192]	; (800725c <UART_SetConfig+0x2cc>)
 800719c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071a8:	d01a      	beq.n	80071e0 <UART_SetConfig+0x250>
 80071aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ae:	d81b      	bhi.n	80071e8 <UART_SetConfig+0x258>
 80071b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b4:	d00c      	beq.n	80071d0 <UART_SetConfig+0x240>
 80071b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ba:	d815      	bhi.n	80071e8 <UART_SetConfig+0x258>
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <UART_SetConfig+0x238>
 80071c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c4:	d008      	beq.n	80071d8 <UART_SetConfig+0x248>
 80071c6:	e00f      	b.n	80071e8 <UART_SetConfig+0x258>
 80071c8:	2300      	movs	r3, #0
 80071ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ce:	e052      	b.n	8007276 <UART_SetConfig+0x2e6>
 80071d0:	2302      	movs	r3, #2
 80071d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071d6:	e04e      	b.n	8007276 <UART_SetConfig+0x2e6>
 80071d8:	2304      	movs	r3, #4
 80071da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071de:	e04a      	b.n	8007276 <UART_SetConfig+0x2e6>
 80071e0:	2308      	movs	r3, #8
 80071e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e6:	e046      	b.n	8007276 <UART_SetConfig+0x2e6>
 80071e8:	2310      	movs	r3, #16
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ee:	e042      	b.n	8007276 <UART_SetConfig+0x2e6>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a17      	ldr	r2, [pc, #92]	; (8007254 <UART_SetConfig+0x2c4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d13a      	bne.n	8007270 <UART_SetConfig+0x2e0>
 80071fa:	4b18      	ldr	r3, [pc, #96]	; (800725c <UART_SetConfig+0x2cc>)
 80071fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007200:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007204:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007208:	d01a      	beq.n	8007240 <UART_SetConfig+0x2b0>
 800720a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800720e:	d81b      	bhi.n	8007248 <UART_SetConfig+0x2b8>
 8007210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007214:	d00c      	beq.n	8007230 <UART_SetConfig+0x2a0>
 8007216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800721a:	d815      	bhi.n	8007248 <UART_SetConfig+0x2b8>
 800721c:	2b00      	cmp	r3, #0
 800721e:	d003      	beq.n	8007228 <UART_SetConfig+0x298>
 8007220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007224:	d008      	beq.n	8007238 <UART_SetConfig+0x2a8>
 8007226:	e00f      	b.n	8007248 <UART_SetConfig+0x2b8>
 8007228:	2300      	movs	r3, #0
 800722a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800722e:	e022      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007230:	2302      	movs	r3, #2
 8007232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007236:	e01e      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007238:	2304      	movs	r3, #4
 800723a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800723e:	e01a      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007240:	2308      	movs	r3, #8
 8007242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007246:	e016      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007248:	2310      	movs	r3, #16
 800724a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800724e:	e012      	b.n	8007276 <UART_SetConfig+0x2e6>
 8007250:	efff69f3 	.word	0xefff69f3
 8007254:	40008000 	.word	0x40008000
 8007258:	40013800 	.word	0x40013800
 800725c:	40021000 	.word	0x40021000
 8007260:	40004400 	.word	0x40004400
 8007264:	40004800 	.word	0x40004800
 8007268:	40004c00 	.word	0x40004c00
 800726c:	40005000 	.word	0x40005000
 8007270:	2310      	movs	r3, #16
 8007272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a9f      	ldr	r2, [pc, #636]	; (80074f8 <UART_SetConfig+0x568>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d17a      	bne.n	8007376 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007284:	2b08      	cmp	r3, #8
 8007286:	d824      	bhi.n	80072d2 <UART_SetConfig+0x342>
 8007288:	a201      	add	r2, pc, #4	; (adr r2, 8007290 <UART_SetConfig+0x300>)
 800728a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728e:	bf00      	nop
 8007290:	080072b5 	.word	0x080072b5
 8007294:	080072d3 	.word	0x080072d3
 8007298:	080072bd 	.word	0x080072bd
 800729c:	080072d3 	.word	0x080072d3
 80072a0:	080072c3 	.word	0x080072c3
 80072a4:	080072d3 	.word	0x080072d3
 80072a8:	080072d3 	.word	0x080072d3
 80072ac:	080072d3 	.word	0x080072d3
 80072b0:	080072cb 	.word	0x080072cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b4:	f7fd fc40 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 80072b8:	61f8      	str	r0, [r7, #28]
        break;
 80072ba:	e010      	b.n	80072de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072bc:	4b8f      	ldr	r3, [pc, #572]	; (80074fc <UART_SetConfig+0x56c>)
 80072be:	61fb      	str	r3, [r7, #28]
        break;
 80072c0:	e00d      	b.n	80072de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072c2:	f7fd fba1 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 80072c6:	61f8      	str	r0, [r7, #28]
        break;
 80072c8:	e009      	b.n	80072de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ce:	61fb      	str	r3, [r7, #28]
        break;
 80072d0:	e005      	b.n	80072de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80072dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 80fb 	beq.w	80074dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	4413      	add	r3, r2
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d305      	bcc.n	8007302 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d903      	bls.n	800730a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007308:	e0e8      	b.n	80074dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	2200      	movs	r2, #0
 800730e:	461c      	mov	r4, r3
 8007310:	4615      	mov	r5, r2
 8007312:	f04f 0200 	mov.w	r2, #0
 8007316:	f04f 0300 	mov.w	r3, #0
 800731a:	022b      	lsls	r3, r5, #8
 800731c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007320:	0222      	lsls	r2, r4, #8
 8007322:	68f9      	ldr	r1, [r7, #12]
 8007324:	6849      	ldr	r1, [r1, #4]
 8007326:	0849      	lsrs	r1, r1, #1
 8007328:	2000      	movs	r0, #0
 800732a:	4688      	mov	r8, r1
 800732c:	4681      	mov	r9, r0
 800732e:	eb12 0a08 	adds.w	sl, r2, r8
 8007332:	eb43 0b09 	adc.w	fp, r3, r9
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	603b      	str	r3, [r7, #0]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007344:	4650      	mov	r0, sl
 8007346:	4659      	mov	r1, fp
 8007348:	f7f9 fc9e 	bl	8000c88 <__aeabi_uldivmod>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4613      	mov	r3, r2
 8007352:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800735a:	d308      	bcc.n	800736e <UART_SetConfig+0x3de>
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007362:	d204      	bcs.n	800736e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	60da      	str	r2, [r3, #12]
 800736c:	e0b6      	b.n	80074dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007374:	e0b2      	b.n	80074dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800737e:	d15e      	bne.n	800743e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007380:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007384:	2b08      	cmp	r3, #8
 8007386:	d828      	bhi.n	80073da <UART_SetConfig+0x44a>
 8007388:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <UART_SetConfig+0x400>)
 800738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738e:	bf00      	nop
 8007390:	080073b5 	.word	0x080073b5
 8007394:	080073bd 	.word	0x080073bd
 8007398:	080073c5 	.word	0x080073c5
 800739c:	080073db 	.word	0x080073db
 80073a0:	080073cb 	.word	0x080073cb
 80073a4:	080073db 	.word	0x080073db
 80073a8:	080073db 	.word	0x080073db
 80073ac:	080073db 	.word	0x080073db
 80073b0:	080073d3 	.word	0x080073d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b4:	f7fd fbc0 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 80073b8:	61f8      	str	r0, [r7, #28]
        break;
 80073ba:	e014      	b.n	80073e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073bc:	f7fd fbd2 	bl	8004b64 <HAL_RCC_GetPCLK2Freq>
 80073c0:	61f8      	str	r0, [r7, #28]
        break;
 80073c2:	e010      	b.n	80073e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073c4:	4b4d      	ldr	r3, [pc, #308]	; (80074fc <UART_SetConfig+0x56c>)
 80073c6:	61fb      	str	r3, [r7, #28]
        break;
 80073c8:	e00d      	b.n	80073e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ca:	f7fd fb1d 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 80073ce:	61f8      	str	r0, [r7, #28]
        break;
 80073d0:	e009      	b.n	80073e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d6:	61fb      	str	r3, [r7, #28]
        break;
 80073d8:	e005      	b.n	80073e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80073e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d077      	beq.n	80074dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	005a      	lsls	r2, r3, #1
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	085b      	lsrs	r3, r3, #1
 80073f6:	441a      	add	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007400:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	2b0f      	cmp	r3, #15
 8007406:	d916      	bls.n	8007436 <UART_SetConfig+0x4a6>
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800740e:	d212      	bcs.n	8007436 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	b29b      	uxth	r3, r3
 8007414:	f023 030f 	bic.w	r3, r3, #15
 8007418:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	085b      	lsrs	r3, r3, #1
 800741e:	b29b      	uxth	r3, r3
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	b29a      	uxth	r2, r3
 8007426:	8afb      	ldrh	r3, [r7, #22]
 8007428:	4313      	orrs	r3, r2
 800742a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	8afa      	ldrh	r2, [r7, #22]
 8007432:	60da      	str	r2, [r3, #12]
 8007434:	e052      	b.n	80074dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800743c:	e04e      	b.n	80074dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800743e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007442:	2b08      	cmp	r3, #8
 8007444:	d827      	bhi.n	8007496 <UART_SetConfig+0x506>
 8007446:	a201      	add	r2, pc, #4	; (adr r2, 800744c <UART_SetConfig+0x4bc>)
 8007448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744c:	08007471 	.word	0x08007471
 8007450:	08007479 	.word	0x08007479
 8007454:	08007481 	.word	0x08007481
 8007458:	08007497 	.word	0x08007497
 800745c:	08007487 	.word	0x08007487
 8007460:	08007497 	.word	0x08007497
 8007464:	08007497 	.word	0x08007497
 8007468:	08007497 	.word	0x08007497
 800746c:	0800748f 	.word	0x0800748f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007470:	f7fd fb62 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 8007474:	61f8      	str	r0, [r7, #28]
        break;
 8007476:	e014      	b.n	80074a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007478:	f7fd fb74 	bl	8004b64 <HAL_RCC_GetPCLK2Freq>
 800747c:	61f8      	str	r0, [r7, #28]
        break;
 800747e:	e010      	b.n	80074a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007480:	4b1e      	ldr	r3, [pc, #120]	; (80074fc <UART_SetConfig+0x56c>)
 8007482:	61fb      	str	r3, [r7, #28]
        break;
 8007484:	e00d      	b.n	80074a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007486:	f7fd fabf 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 800748a:	61f8      	str	r0, [r7, #28]
        break;
 800748c:	e009      	b.n	80074a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800748e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007492:	61fb      	str	r3, [r7, #28]
        break;
 8007494:	e005      	b.n	80074a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80074a0:	bf00      	nop
    }

    if (pclk != 0U)
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d019      	beq.n	80074dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	085a      	lsrs	r2, r3, #1
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	441a      	add	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	2b0f      	cmp	r3, #15
 80074c0:	d909      	bls.n	80074d6 <UART_SetConfig+0x546>
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c8:	d205      	bcs.n	80074d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	60da      	str	r2, [r3, #12]
 80074d4:	e002      	b.n	80074dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80074e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3728      	adds	r7, #40	; 0x28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074f6:	bf00      	nop
 80074f8:	40008000 	.word	0x40008000
 80074fc:	00f42400 	.word	0x00f42400

08007500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00a      	beq.n	800756e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	f003 0308 	and.w	r3, r3, #8
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01a      	beq.n	8007616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075fe:	d10a      	bne.n	8007616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	605a      	str	r2, [r3, #4]
  }
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af02      	add	r7, sp, #8
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007654:	f7fb f998 	bl	8002988 <HAL_GetTick>
 8007658:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b08      	cmp	r3, #8
 8007666:	d10e      	bne.n	8007686 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f82d 	bl	80076d6 <UART_WaitOnFlagUntilTimeout>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e023      	b.n	80076ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b04      	cmp	r3, #4
 8007692:	d10e      	bne.n	80076b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f817 	bl	80076d6 <UART_WaitOnFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e00d      	b.n	80076ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2220      	movs	r2, #32
 80076b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2220      	movs	r2, #32
 80076bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b09c      	sub	sp, #112	; 0x70
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	603b      	str	r3, [r7, #0]
 80076e2:	4613      	mov	r3, r2
 80076e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e6:	e0a5      	b.n	8007834 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	f000 80a1 	beq.w	8007834 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f2:	f7fb f949 	bl	8002988 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80076fe:	429a      	cmp	r2, r3
 8007700:	d302      	bcc.n	8007708 <UART_WaitOnFlagUntilTimeout+0x32>
 8007702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007704:	2b00      	cmp	r3, #0
 8007706:	d13e      	bne.n	8007786 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007718:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800771c:	667b      	str	r3, [r7, #100]	; 0x64
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007728:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800772c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e6      	bne.n	8007708 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3308      	adds	r3, #8
 8007740:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	f023 0301 	bic.w	r3, r3, #1
 8007750:	663b      	str	r3, [r7, #96]	; 0x60
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3308      	adds	r3, #8
 8007758:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800775a:	64ba      	str	r2, [r7, #72]	; 0x48
 800775c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e5      	bne.n	800773a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2220      	movs	r2, #32
 8007772:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2220      	movs	r2, #32
 8007778:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e067      	b.n	8007856 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0304 	and.w	r3, r3, #4
 8007790:	2b00      	cmp	r3, #0
 8007792:	d04f      	beq.n	8007834 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800779e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077a2:	d147      	bne.n	8007834 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077cc:	637b      	str	r3, [r7, #52]	; 0x34
 80077ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e6      	bne.n	80077ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3308      	adds	r3, #8
 80077e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	613b      	str	r3, [r7, #16]
   return(result);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f023 0301 	bic.w	r3, r3, #1
 80077f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3308      	adds	r3, #8
 80077fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007800:	623a      	str	r2, [r7, #32]
 8007802:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	69f9      	ldr	r1, [r7, #28]
 8007806:	6a3a      	ldr	r2, [r7, #32]
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	61bb      	str	r3, [r7, #24]
   return(result);
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e5      	bne.n	80077e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2220      	movs	r2, #32
 800781e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2220      	movs	r2, #32
 8007824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e010      	b.n	8007856 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69da      	ldr	r2, [r3, #28]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	4013      	ands	r3, r2
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	429a      	cmp	r2, r3
 8007842:	bf0c      	ite	eq
 8007844:	2301      	moveq	r3, #1
 8007846:	2300      	movne	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	461a      	mov	r2, r3
 800784c:	79fb      	ldrb	r3, [r7, #7]
 800784e:	429a      	cmp	r2, r3
 8007850:	f43f af4a 	beq.w	80076e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3770      	adds	r7, #112	; 0x70
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800785e:	b480      	push	{r7}
 8007860:	b089      	sub	sp, #36	; 0x24
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	60bb      	str	r3, [r7, #8]
   return(result);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800787a:	61fb      	str	r3, [r7, #28]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	461a      	mov	r2, r3
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	61bb      	str	r3, [r7, #24]
 8007886:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	6979      	ldr	r1, [r7, #20]
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	613b      	str	r3, [r7, #16]
   return(result);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e6      	bne.n	8007866 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2220      	movs	r2, #32
 800789c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800789e:	bf00      	nop
 80078a0:	3724      	adds	r7, #36	; 0x24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b095      	sub	sp, #84	; 0x54
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ba:	e853 3f00 	ldrex	r3, [r3]
 80078be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	461a      	mov	r2, r3
 80078ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078d0:	643b      	str	r3, [r7, #64]	; 0x40
 80078d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078d8:	e841 2300 	strex	r3, r2, [r1]
 80078dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1e6      	bne.n	80078b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3308      	adds	r3, #8
 80078ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f023 0301 	bic.w	r3, r3, #1
 80078fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3308      	adds	r3, #8
 8007902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007904:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800790a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e5      	bne.n	80078e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800791c:	2b01      	cmp	r3, #1
 800791e:	d118      	bne.n	8007952 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	60bb      	str	r3, [r7, #8]
   return(result);
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	f023 0310 	bic.w	r3, r3, #16
 8007934:	647b      	str	r3, [r7, #68]	; 0x44
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800793e:	61bb      	str	r3, [r7, #24]
 8007940:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6979      	ldr	r1, [r7, #20]
 8007944:	69ba      	ldr	r2, [r7, #24]
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	613b      	str	r3, [r7, #16]
   return(result);
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e6      	bne.n	8007920 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2220      	movs	r2, #32
 8007956:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007964:	bf00      	nop
 8007966:	3754      	adds	r7, #84	; 0x54
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b090      	sub	sp, #64	; 0x40
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b00      	cmp	r3, #0
 800798a:	d137      	bne.n	80079fc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800798c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798e:	2200      	movs	r2, #0
 8007990:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3308      	adds	r3, #8
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	623b      	str	r3, [r7, #32]
   return(result);
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80079ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b4:	633a      	str	r2, [r7, #48]	; 0x30
 80079b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079bc:	e841 2300 	strex	r3, r2, [r1]
 80079c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1e5      	bne.n	8007994 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079dc:	637b      	str	r3, [r7, #52]	; 0x34
 80079de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e6:	61fb      	str	r3, [r7, #28]
 80079e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	69b9      	ldr	r1, [r7, #24]
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	617b      	str	r3, [r7, #20]
   return(result);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e6      	bne.n	80079c8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079fa:	e002      	b.n	8007a02 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80079fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80079fe:	f7ff fa9d 	bl	8006f3c <HAL_UART_TxCpltCallback>
}
 8007a02:	bf00      	nop
 8007a04:	3740      	adds	r7, #64	; 0x40
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a16:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f7ff fa99 	bl	8006f50 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a1e:	bf00      	nop
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b086      	sub	sp, #24
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a32:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a38:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4a:	2b80      	cmp	r3, #128	; 0x80
 8007a4c:	d109      	bne.n	8007a62 <UART_DMAError+0x3c>
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2b21      	cmp	r3, #33	; 0x21
 8007a52:	d106      	bne.n	8007a62 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007a5c:	6978      	ldr	r0, [r7, #20]
 8007a5e:	f7ff fefe 	bl	800785e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6c:	2b40      	cmp	r3, #64	; 0x40
 8007a6e:	d109      	bne.n	8007a84 <UART_DMAError+0x5e>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b22      	cmp	r3, #34	; 0x22
 8007a74:	d106      	bne.n	8007a84 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007a7e:	6978      	ldr	r0, [r7, #20]
 8007a80:	f7ff ff13 	bl	80078aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a8a:	f043 0210 	orr.w	r2, r3, #16
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a94:	6978      	ldr	r0, [r7, #20]
 8007a96:	f7ff fa65 	bl	8006f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a9a:	bf00      	nop
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b084      	sub	sp, #16
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f7ff fa4f 	bl	8006f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ac6:	bf00      	nop
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b088      	sub	sp, #32
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aea:	61fb      	str	r3, [r7, #28]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	61bb      	str	r3, [r7, #24]
 8007af6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6979      	ldr	r1, [r7, #20]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	613b      	str	r3, [r7, #16]
   return(result);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e6      	bne.n	8007ad6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff fa11 	bl	8006f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b1a:	bf00      	nop
 8007b1c:	3720      	adds	r7, #32
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b085      	sub	sp, #20
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007b40:	2300      	movs	r3, #0
 8007b42:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b48:	2b84      	cmp	r3, #132	; 0x84
 8007b4a:	d005      	beq.n	8007b58 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007b4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4413      	add	r3, r2
 8007b54:	3303      	adds	r3, #3
 8007b56:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007b58:	68fb      	ldr	r3, [r7, #12]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b6a:	f001 f89d 	bl	8008ca8 <vTaskStartScheduler>
  
  return osOK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b76:	b089      	sub	sp, #36	; 0x24
 8007b78:	af04      	add	r7, sp, #16
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d020      	beq.n	8007bc8 <osThreadCreate+0x54>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d01c      	beq.n	8007bc8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685c      	ldr	r4, [r3, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681d      	ldr	r5, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691e      	ldr	r6, [r3, #16]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff ffc8 	bl	8007b36 <makeFreeRtosPriority>
 8007ba6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bb0:	9202      	str	r2, [sp, #8]
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	9100      	str	r1, [sp, #0]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	4632      	mov	r2, r6
 8007bba:	4629      	mov	r1, r5
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f000 fe0f 	bl	80087e0 <xTaskCreateStatic>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	e01c      	b.n	8007c02 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685c      	ldr	r4, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bd4:	b29e      	uxth	r6, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7ff ffaa 	bl	8007b36 <makeFreeRtosPriority>
 8007be2:	4602      	mov	r2, r0
 8007be4:	f107 030c 	add.w	r3, r7, #12
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	9200      	str	r2, [sp, #0]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	4632      	mov	r2, r6
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f000 fe51 	bl	800889a <xTaskCreate>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d001      	beq.n	8007c02 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e000      	b.n	8007c04 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007c02:	68fb      	ldr	r3, [r7, #12]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c0c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <osDelay+0x16>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	e000      	b.n	8007c24 <osDelay+0x18>
 8007c22:	2301      	movs	r3, #1
 8007c24:	4618      	mov	r0, r3
 8007c26:	f001 f80b 	bl	8008c40 <vTaskDelay>
  
  return osOK;
 8007c2a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f103 0208 	add.w	r2, r3, #8
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f04f 32ff 	mov.w	r2, #4294967295
 8007c4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f103 0208 	add.w	r2, r3, #8
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f103 0208 	add.w	r2, r3, #8
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b085      	sub	sp, #20
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	689a      	ldr	r2, [r3, #8]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	601a      	str	r2, [r3, #0]
}
 8007cca:	bf00      	nop
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b085      	sub	sp, #20
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cec:	d103      	bne.n	8007cf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	e00c      	b.n	8007d10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	e002      	b.n	8007d04 <vListInsert+0x2e>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d2f6      	bcs.n	8007cfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	601a      	str	r2, [r3, #0]
}
 8007d3c:	bf00      	nop
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	6892      	ldr	r2, [r2, #8]
 8007d5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	6852      	ldr	r2, [r2, #4]
 8007d68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d103      	bne.n	8007d7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	1e5a      	subs	r2, r3, #1
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10a      	bne.n	8007dc6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007dc6:	f002 f96d 	bl	800a0a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd2:	68f9      	ldr	r1, [r7, #12]
 8007dd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007dd6:	fb01 f303 	mul.w	r3, r1, r3
 8007dda:	441a      	add	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df6:	3b01      	subs	r3, #1
 8007df8:	68f9      	ldr	r1, [r7, #12]
 8007dfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007dfc:	fb01 f303 	mul.w	r3, r1, r3
 8007e00:	441a      	add	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	22ff      	movs	r2, #255	; 0xff
 8007e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	22ff      	movs	r2, #255	; 0xff
 8007e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d114      	bne.n	8007e46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01a      	beq.n	8007e5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3310      	adds	r3, #16
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f001 f9f7 	bl	800921c <xTaskRemoveFromEventList>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d012      	beq.n	8007e5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e34:	4b0c      	ldr	r3, [pc, #48]	; (8007e68 <xQueueGenericReset+0xcc>)
 8007e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	e009      	b.n	8007e5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3310      	adds	r3, #16
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fef2 	bl	8007c34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3324      	adds	r3, #36	; 0x24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff feed 	bl	8007c34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e5a:	f002 f953 	bl	800a104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e5e:	2301      	movs	r3, #1
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08e      	sub	sp, #56	; 0x38
 8007e70:	af02      	add	r7, sp, #8
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10a      	bne.n	8007e96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e92:	bf00      	nop
 8007e94:	e7fe      	b.n	8007e94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10a      	bne.n	8007eb2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eae:	bf00      	nop
 8007eb0:	e7fe      	b.n	8007eb0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <xQueueGenericCreateStatic+0x52>
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <xQueueGenericCreateStatic+0x56>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e000      	b.n	8007ec4 <xQueueGenericCreateStatic+0x58>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	623b      	str	r3, [r7, #32]
}
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d102      	bne.n	8007eea <xQueueGenericCreateStatic+0x7e>
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <xQueueGenericCreateStatic+0x82>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e000      	b.n	8007ef0 <xQueueGenericCreateStatic+0x84>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	61fb      	str	r3, [r7, #28]
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f0a:	2348      	movs	r3, #72	; 0x48
 8007f0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b48      	cmp	r3, #72	; 0x48
 8007f12:	d00a      	beq.n	8007f2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	61bb      	str	r3, [r7, #24]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00d      	beq.n	8007f52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	4613      	mov	r3, r2
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	68b9      	ldr	r1, [r7, #8]
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 f83f 	bl	8007fd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3730      	adds	r7, #48	; 0x30
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08a      	sub	sp, #40	; 0x28
 8007f60:	af02      	add	r7, sp, #8
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	4613      	mov	r3, r2
 8007f68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10a      	bne.n	8007f86 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	613b      	str	r3, [r7, #16]
}
 8007f82:	bf00      	nop
 8007f84:	e7fe      	b.n	8007f84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	fb02 f303 	mul.w	r3, r2, r3
 8007f8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	3348      	adds	r3, #72	; 0x48
 8007f94:	4618      	mov	r0, r3
 8007f96:	f002 f9a7 	bl	800a2e8 <pvPortMalloc>
 8007f9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d011      	beq.n	8007fc6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	3348      	adds	r3, #72	; 0x48
 8007faa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fb4:	79fa      	ldrb	r2, [r7, #7]
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 f805 	bl	8007fd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007fc6:	69bb      	ldr	r3, [r7, #24]
	}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3720      	adds	r7, #32
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d103      	bne.n	8007fec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	e002      	b.n	8007ff2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ffe:	2101      	movs	r1, #1
 8008000:	69b8      	ldr	r0, [r7, #24]
 8008002:	f7ff fecb 	bl	8007d9c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008006:	bf00      	nop
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08e      	sub	sp, #56	; 0x38
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800801e:	2300      	movs	r3, #0
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <xQueueGenericSend+0x32>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d103      	bne.n	8008050 <xQueueGenericSend+0x40>
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <xQueueGenericSend+0x44>
 8008050:	2301      	movs	r3, #1
 8008052:	e000      	b.n	8008056 <xQueueGenericSend+0x46>
 8008054:	2300      	movs	r3, #0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <xQueueGenericSend+0x60>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800806c:	bf00      	nop
 800806e:	e7fe      	b.n	800806e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d103      	bne.n	800807e <xQueueGenericSend+0x6e>
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807a:	2b01      	cmp	r3, #1
 800807c:	d101      	bne.n	8008082 <xQueueGenericSend+0x72>
 800807e:	2301      	movs	r3, #1
 8008080:	e000      	b.n	8008084 <xQueueGenericSend+0x74>
 8008082:	2300      	movs	r3, #0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10a      	bne.n	800809e <xQueueGenericSend+0x8e>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	623b      	str	r3, [r7, #32]
}
 800809a:	bf00      	nop
 800809c:	e7fe      	b.n	800809c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800809e:	f001 fa7d 	bl	800959c <xTaskGetSchedulerState>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d102      	bne.n	80080ae <xQueueGenericSend+0x9e>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <xQueueGenericSend+0xa2>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e000      	b.n	80080b4 <xQueueGenericSend+0xa4>
 80080b2:	2300      	movs	r3, #0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10a      	bne.n	80080ce <xQueueGenericSend+0xbe>
	__asm volatile
 80080b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	61fb      	str	r3, [r7, #28]
}
 80080ca:	bf00      	nop
 80080cc:	e7fe      	b.n	80080cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ce:	f001 ffe9 	bl	800a0a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080da:	429a      	cmp	r2, r3
 80080dc:	d302      	bcc.n	80080e4 <xQueueGenericSend+0xd4>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d129      	bne.n	8008138 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	68b9      	ldr	r1, [r7, #8]
 80080e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ea:	f000 fa0b 	bl	8008504 <prvCopyDataToQueue>
 80080ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d010      	beq.n	800811a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	3324      	adds	r3, #36	; 0x24
 80080fc:	4618      	mov	r0, r3
 80080fe:	f001 f88d 	bl	800921c <xTaskRemoveFromEventList>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d013      	beq.n	8008130 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008108:	4b3f      	ldr	r3, [pc, #252]	; (8008208 <xQueueGenericSend+0x1f8>)
 800810a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	e00a      	b.n	8008130 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811c:	2b00      	cmp	r3, #0
 800811e:	d007      	beq.n	8008130 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008120:	4b39      	ldr	r3, [pc, #228]	; (8008208 <xQueueGenericSend+0x1f8>)
 8008122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008130:	f001 ffe8 	bl	800a104 <vPortExitCritical>
				return pdPASS;
 8008134:	2301      	movs	r3, #1
 8008136:	e063      	b.n	8008200 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800813e:	f001 ffe1 	bl	800a104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008142:	2300      	movs	r3, #0
 8008144:	e05c      	b.n	8008200 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008148:	2b00      	cmp	r3, #0
 800814a:	d106      	bne.n	800815a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800814c:	f107 0314 	add.w	r3, r7, #20
 8008150:	4618      	mov	r0, r3
 8008152:	f001 f8c5 	bl	80092e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008156:	2301      	movs	r3, #1
 8008158:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800815a:	f001 ffd3 	bl	800a104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800815e:	f000 fe13 	bl	8008d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008162:	f001 ff9f 	bl	800a0a4 <vPortEnterCritical>
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800816c:	b25b      	sxtb	r3, r3
 800816e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008172:	d103      	bne.n	800817c <xQueueGenericSend+0x16c>
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008182:	b25b      	sxtb	r3, r3
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008188:	d103      	bne.n	8008192 <xQueueGenericSend+0x182>
 800818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008192:	f001 ffb7 	bl	800a104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008196:	1d3a      	adds	r2, r7, #4
 8008198:	f107 0314 	add.w	r3, r7, #20
 800819c:	4611      	mov	r1, r2
 800819e:	4618      	mov	r0, r3
 80081a0:	f001 f8b4 	bl	800930c <xTaskCheckForTimeOut>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d124      	bne.n	80081f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ac:	f000 faa2 	bl	80086f4 <prvIsQueueFull>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d018      	beq.n	80081e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	3310      	adds	r3, #16
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	4611      	mov	r1, r2
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 ffdc 	bl	800917c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081c6:	f000 fa2d 	bl	8008624 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081ca:	f000 fdeb 	bl	8008da4 <xTaskResumeAll>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f47f af7c 	bne.w	80080ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <xQueueGenericSend+0x1f8>)
 80081d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	e772      	b.n	80080ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ea:	f000 fa1b 	bl	8008624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ee:	f000 fdd9 	bl	8008da4 <xTaskResumeAll>
 80081f2:	e76c      	b.n	80080ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081f6:	f000 fa15 	bl	8008624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081fa:	f000 fdd3 	bl	8008da4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008200:	4618      	mov	r0, r3
 8008202:	3738      	adds	r7, #56	; 0x38
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	e000ed04 	.word	0xe000ed04

0800820c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b090      	sub	sp, #64	; 0x40
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d103      	bne.n	8008248 <xQueueGenericSendFromISR+0x3c>
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <xQueueGenericSendFromISR+0x40>
 8008248:	2301      	movs	r3, #1
 800824a:	e000      	b.n	800824e <xQueueGenericSendFromISR+0x42>
 800824c:	2300      	movs	r3, #0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10a      	bne.n	8008268 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d103      	bne.n	8008276 <xQueueGenericSendFromISR+0x6a>
 800826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008272:	2b01      	cmp	r3, #1
 8008274:	d101      	bne.n	800827a <xQueueGenericSendFromISR+0x6e>
 8008276:	2301      	movs	r3, #1
 8008278:	e000      	b.n	800827c <xQueueGenericSendFromISR+0x70>
 800827a:	2300      	movs	r3, #0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10a      	bne.n	8008296 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	623b      	str	r3, [r7, #32]
}
 8008292:	bf00      	nop
 8008294:	e7fe      	b.n	8008294 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008296:	f001 ffe7 	bl	800a268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800829a:	f3ef 8211 	mrs	r2, BASEPRI
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	61fa      	str	r2, [r7, #28]
 80082b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082be:	429a      	cmp	r2, r3
 80082c0:	d302      	bcc.n	80082c8 <xQueueGenericSendFromISR+0xbc>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d12f      	bne.n	8008328 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082de:	f000 f911 	bl	8008504 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ea:	d112      	bne.n	8008312 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d016      	beq.n	8008322 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	3324      	adds	r3, #36	; 0x24
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 ff8f 	bl	800921c <xTaskRemoveFromEventList>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00e      	beq.n	8008322 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00b      	beq.n	8008322 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	e007      	b.n	8008322 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008312:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008316:	3301      	adds	r3, #1
 8008318:	b2db      	uxtb	r3, r3
 800831a:	b25a      	sxtb	r2, r3
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008322:	2301      	movs	r3, #1
 8008324:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008326:	e001      	b.n	800832c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008328:	2300      	movs	r3, #0
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800832c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008336:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800833a:	4618      	mov	r0, r3
 800833c:	3740      	adds	r7, #64	; 0x40
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08c      	sub	sp, #48	; 0x30
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008350:	2300      	movs	r3, #0
 8008352:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10a      	bne.n	8008374 <xQueueReceive+0x30>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	623b      	str	r3, [r7, #32]
}
 8008370:	bf00      	nop
 8008372:	e7fe      	b.n	8008372 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d103      	bne.n	8008382 <xQueueReceive+0x3e>
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <xQueueReceive+0x42>
 8008382:	2301      	movs	r3, #1
 8008384:	e000      	b.n	8008388 <xQueueReceive+0x44>
 8008386:	2300      	movs	r3, #0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <xQueueReceive+0x5e>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	61fb      	str	r3, [r7, #28]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083a2:	f001 f8fb 	bl	800959c <xTaskGetSchedulerState>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d102      	bne.n	80083b2 <xQueueReceive+0x6e>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <xQueueReceive+0x72>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <xQueueReceive+0x74>
 80083b6:	2300      	movs	r3, #0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10a      	bne.n	80083d2 <xQueueReceive+0x8e>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	61bb      	str	r3, [r7, #24]
}
 80083ce:	bf00      	nop
 80083d0:	e7fe      	b.n	80083d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083d2:	f001 fe67 	bl	800a0a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d01f      	beq.n	8008422 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e6:	f000 f8f7 	bl	80085d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	1e5a      	subs	r2, r3, #1
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00f      	beq.n	800841a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	3310      	adds	r3, #16
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 ff0c 	bl	800921c <xTaskRemoveFromEventList>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800840a:	4b3d      	ldr	r3, [pc, #244]	; (8008500 <xQueueReceive+0x1bc>)
 800840c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800841a:	f001 fe73 	bl	800a104 <vPortExitCritical>
				return pdPASS;
 800841e:	2301      	movs	r3, #1
 8008420:	e069      	b.n	80084f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d103      	bne.n	8008430 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008428:	f001 fe6c 	bl	800a104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800842c:	2300      	movs	r3, #0
 800842e:	e062      	b.n	80084f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008432:	2b00      	cmp	r3, #0
 8008434:	d106      	bne.n	8008444 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008436:	f107 0310 	add.w	r3, r7, #16
 800843a:	4618      	mov	r0, r3
 800843c:	f000 ff50 	bl	80092e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008440:	2301      	movs	r3, #1
 8008442:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008444:	f001 fe5e 	bl	800a104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008448:	f000 fc9e 	bl	8008d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800844c:	f001 fe2a 	bl	800a0a4 <vPortEnterCritical>
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008456:	b25b      	sxtb	r3, r3
 8008458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845c:	d103      	bne.n	8008466 <xQueueReceive+0x122>
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800846c:	b25b      	sxtb	r3, r3
 800846e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008472:	d103      	bne.n	800847c <xQueueReceive+0x138>
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800847c:	f001 fe42 	bl	800a104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008480:	1d3a      	adds	r2, r7, #4
 8008482:	f107 0310 	add.w	r3, r7, #16
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f000 ff3f 	bl	800930c <xTaskCheckForTimeOut>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d123      	bne.n	80084dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008496:	f000 f917 	bl	80086c8 <prvIsQueueEmpty>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d017      	beq.n	80084d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a2:	3324      	adds	r3, #36	; 0x24
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	4611      	mov	r1, r2
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 fe67 	bl	800917c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b0:	f000 f8b8 	bl	8008624 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084b4:	f000 fc76 	bl	8008da4 <xTaskResumeAll>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d189      	bne.n	80083d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80084be:	4b10      	ldr	r3, [pc, #64]	; (8008500 <xQueueReceive+0x1bc>)
 80084c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	e780      	b.n	80083d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d2:	f000 f8a7 	bl	8008624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084d6:	f000 fc65 	bl	8008da4 <xTaskResumeAll>
 80084da:	e77a      	b.n	80083d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084de:	f000 f8a1 	bl	8008624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084e2:	f000 fc5f 	bl	8008da4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e8:	f000 f8ee 	bl	80086c8 <prvIsQueueEmpty>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f43f af6f 	beq.w	80083d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3730      	adds	r7, #48	; 0x30
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	e000ed04 	.word	0xe000ed04

08008504 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008510:	2300      	movs	r3, #0
 8008512:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10d      	bne.n	800853e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d14d      	bne.n	80085c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	4618      	mov	r0, r3
 8008530:	f001 f852 	bl	80095d8 <xTaskPriorityDisinherit>
 8008534:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	609a      	str	r2, [r3, #8]
 800853c:	e043      	b.n	80085c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d119      	bne.n	8008578 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6858      	ldr	r0, [r3, #4]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	461a      	mov	r2, r3
 800854e:	68b9      	ldr	r1, [r7, #8]
 8008550:	f002 f9d7 	bl	800a902 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	441a      	add	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	429a      	cmp	r2, r3
 800856c:	d32b      	bcc.n	80085c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	605a      	str	r2, [r3, #4]
 8008576:	e026      	b.n	80085c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	68d8      	ldr	r0, [r3, #12]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008580:	461a      	mov	r2, r3
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	f002 f9bd 	bl	800a902 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008590:	425b      	negs	r3, r3
 8008592:	441a      	add	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	68da      	ldr	r2, [r3, #12]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d207      	bcs.n	80085b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ac:	425b      	negs	r3, r3
 80085ae:	441a      	add	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d105      	bne.n	80085c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1c5a      	adds	r2, r3, #1
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80085ce:	697b      	ldr	r3, [r7, #20]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d018      	beq.n	800861c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	441a      	add	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	429a      	cmp	r2, r3
 8008602:	d303      	bcc.n	800860c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68d9      	ldr	r1, [r3, #12]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008614:	461a      	mov	r2, r3
 8008616:	6838      	ldr	r0, [r7, #0]
 8008618:	f002 f973 	bl	800a902 <memcpy>
	}
}
 800861c:	bf00      	nop
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800862c:	f001 fd3a 	bl	800a0a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008636:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008638:	e011      	b.n	800865e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	2b00      	cmp	r3, #0
 8008640:	d012      	beq.n	8008668 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	3324      	adds	r3, #36	; 0x24
 8008646:	4618      	mov	r0, r3
 8008648:	f000 fde8 	bl	800921c <xTaskRemoveFromEventList>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008652:	f000 febd 	bl	80093d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	3b01      	subs	r3, #1
 800865a:	b2db      	uxtb	r3, r3
 800865c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800865e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008662:	2b00      	cmp	r3, #0
 8008664:	dce9      	bgt.n	800863a <prvUnlockQueue+0x16>
 8008666:	e000      	b.n	800866a <prvUnlockQueue+0x46>
					break;
 8008668:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	22ff      	movs	r2, #255	; 0xff
 800866e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008672:	f001 fd47 	bl	800a104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008676:	f001 fd15 	bl	800a0a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008680:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008682:	e011      	b.n	80086a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d012      	beq.n	80086b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3310      	adds	r3, #16
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fdc3 	bl	800921c <xTaskRemoveFromEventList>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d001      	beq.n	80086a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800869c:	f000 fe98 	bl	80093d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	dce9      	bgt.n	8008684 <prvUnlockQueue+0x60>
 80086b0:	e000      	b.n	80086b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	22ff      	movs	r2, #255	; 0xff
 80086b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80086bc:	f001 fd22 	bl	800a104 <vPortExitCritical>
}
 80086c0:	bf00      	nop
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086d0:	f001 fce8 	bl	800a0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086dc:	2301      	movs	r3, #1
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	e001      	b.n	80086e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086e6:	f001 fd0d 	bl	800a104 <vPortExitCritical>

	return xReturn;
 80086ea:	68fb      	ldr	r3, [r7, #12]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086fc:	f001 fcd2 	bl	800a0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008708:	429a      	cmp	r2, r3
 800870a:	d102      	bne.n	8008712 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800870c:	2301      	movs	r3, #1
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	e001      	b.n	8008716 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008716:	f001 fcf5 	bl	800a104 <vPortExitCritical>

	return xReturn;
 800871a:	68fb      	ldr	r3, [r7, #12]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	e014      	b.n	800875e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008734:	4a0f      	ldr	r2, [pc, #60]	; (8008774 <vQueueAddToRegistry+0x50>)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10b      	bne.n	8008758 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008740:	490c      	ldr	r1, [pc, #48]	; (8008774 <vQueueAddToRegistry+0x50>)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800874a:	4a0a      	ldr	r2, [pc, #40]	; (8008774 <vQueueAddToRegistry+0x50>)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	4413      	add	r3, r2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008756:	e006      	b.n	8008766 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	3301      	adds	r3, #1
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b07      	cmp	r3, #7
 8008762:	d9e7      	bls.n	8008734 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008764:	bf00      	nop
 8008766:	bf00      	nop
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	20000c24 	.word	0x20000c24

08008778 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008788:	f001 fc8c 	bl	800a0a4 <vPortEnterCritical>
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008792:	b25b      	sxtb	r3, r3
 8008794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008798:	d103      	bne.n	80087a2 <vQueueWaitForMessageRestricted+0x2a>
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087a8:	b25b      	sxtb	r3, r3
 80087aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ae:	d103      	bne.n	80087b8 <vQueueWaitForMessageRestricted+0x40>
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087b8:	f001 fca4 	bl	800a104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d106      	bne.n	80087d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	3324      	adds	r3, #36	; 0x24
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	68b9      	ldr	r1, [r7, #8]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 fcf9 	bl	80091c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087d2:	6978      	ldr	r0, [r7, #20]
 80087d4:	f7ff ff26 	bl	8008624 <prvUnlockQueue>
	}
 80087d8:	bf00      	nop
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08e      	sub	sp, #56	; 0x38
 80087e4:	af04      	add	r7, sp, #16
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10a      	bne.n	800880a <xTaskCreateStatic+0x2a>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	623b      	str	r3, [r7, #32]
}
 8008806:	bf00      	nop
 8008808:	e7fe      	b.n	8008808 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10a      	bne.n	8008826 <xTaskCreateStatic+0x46>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	61fb      	str	r3, [r7, #28]
}
 8008822:	bf00      	nop
 8008824:	e7fe      	b.n	8008824 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008826:	23b4      	movs	r3, #180	; 0xb4
 8008828:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	2bb4      	cmp	r3, #180	; 0xb4
 800882e:	d00a      	beq.n	8008846 <xTaskCreateStatic+0x66>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	61bb      	str	r3, [r7, #24]
}
 8008842:	bf00      	nop
 8008844:	e7fe      	b.n	8008844 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008846:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884a:	2b00      	cmp	r3, #0
 800884c:	d01e      	beq.n	800888c <xTaskCreateStatic+0xac>
 800884e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01b      	beq.n	800888c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008856:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800885c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	2202      	movs	r2, #2
 8008862:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008866:	2300      	movs	r3, #0
 8008868:	9303      	str	r3, [sp, #12]
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	9302      	str	r3, [sp, #8]
 800886e:	f107 0314 	add.w	r3, r7, #20
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	68b9      	ldr	r1, [r7, #8]
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 f850 	bl	8008924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008886:	f000 f8f3 	bl	8008a70 <prvAddNewTaskToReadyList>
 800888a:	e001      	b.n	8008890 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800888c:	2300      	movs	r3, #0
 800888e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008890:	697b      	ldr	r3, [r7, #20]
	}
 8008892:	4618      	mov	r0, r3
 8008894:	3728      	adds	r7, #40	; 0x28
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800889a:	b580      	push	{r7, lr}
 800889c:	b08c      	sub	sp, #48	; 0x30
 800889e:	af04      	add	r7, sp, #16
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	603b      	str	r3, [r7, #0]
 80088a6:	4613      	mov	r3, r2
 80088a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088aa:	88fb      	ldrh	r3, [r7, #6]
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f001 fd1a 	bl	800a2e8 <pvPortMalloc>
 80088b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00e      	beq.n	80088da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088bc:	20b4      	movs	r0, #180	; 0xb4
 80088be:	f001 fd13 	bl	800a2e8 <pvPortMalloc>
 80088c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	697a      	ldr	r2, [r7, #20]
 80088ce:	631a      	str	r2, [r3, #48]	; 0x30
 80088d0:	e005      	b.n	80088de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088d2:	6978      	ldr	r0, [r7, #20]
 80088d4:	f001 fdd4 	bl	800a480 <vPortFree>
 80088d8:	e001      	b.n	80088de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088da:	2300      	movs	r3, #0
 80088dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d017      	beq.n	8008914 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088ec:	88fa      	ldrh	r2, [r7, #6]
 80088ee:	2300      	movs	r3, #0
 80088f0:	9303      	str	r3, [sp, #12]
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	9302      	str	r3, [sp, #8]
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	9301      	str	r3, [sp, #4]
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 f80e 	bl	8008924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008908:	69f8      	ldr	r0, [r7, #28]
 800890a:	f000 f8b1 	bl	8008a70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800890e:	2301      	movs	r3, #1
 8008910:	61bb      	str	r3, [r7, #24]
 8008912:	e002      	b.n	800891a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008914:	f04f 33ff 	mov.w	r3, #4294967295
 8008918:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800891a:	69bb      	ldr	r3, [r7, #24]
	}
 800891c:	4618      	mov	r0, r3
 800891e:	3720      	adds	r7, #32
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b088      	sub	sp, #32
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	461a      	mov	r2, r3
 800893c:	21a5      	movs	r1, #165	; 0xa5
 800893e:	f001 ffee 	bl	800a91e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800894c:	3b01      	subs	r3, #1
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	f023 0307 	bic.w	r3, r3, #7
 800895a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	f003 0307 	and.w	r3, r3, #7
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	617b      	str	r3, [r7, #20]
}
 8008978:	bf00      	nop
 800897a:	e7fe      	b.n	800897a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d01f      	beq.n	80089c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008982:	2300      	movs	r3, #0
 8008984:	61fb      	str	r3, [r7, #28]
 8008986:	e012      	b.n	80089ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	4413      	add	r3, r2
 800898e:	7819      	ldrb	r1, [r3, #0]
 8008990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	4413      	add	r3, r2
 8008996:	3334      	adds	r3, #52	; 0x34
 8008998:	460a      	mov	r2, r1
 800899a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d006      	beq.n	80089b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	3301      	adds	r3, #1
 80089ac:	61fb      	str	r3, [r7, #28]
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	2b0f      	cmp	r3, #15
 80089b2:	d9e9      	bls.n	8008988 <prvInitialiseNewTask+0x64>
 80089b4:	e000      	b.n	80089b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80089b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089c0:	e003      	b.n	80089ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089cc:	2b06      	cmp	r3, #6
 80089ce:	d901      	bls.n	80089d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089d0:	2306      	movs	r3, #6
 80089d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	2200      	movs	r2, #0
 80089e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	3304      	adds	r3, #4
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff f942 	bl	8007c74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	3318      	adds	r3, #24
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7ff f93d 	bl	8007c74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	f1c3 0207 	rsb	r2, r3, #7
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a22:	334c      	adds	r3, #76	; 0x4c
 8008a24:	2260      	movs	r2, #96	; 0x60
 8008a26:	2100      	movs	r1, #0
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f001 ff78 	bl	800a91e <memset>
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	4a0c      	ldr	r2, [pc, #48]	; (8008a64 <prvInitialiseNewTask+0x140>)
 8008a32:	651a      	str	r2, [r3, #80]	; 0x50
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	4a0c      	ldr	r2, [pc, #48]	; (8008a68 <prvInitialiseNewTask+0x144>)
 8008a38:	655a      	str	r2, [r3, #84]	; 0x54
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3c:	4a0b      	ldr	r2, [pc, #44]	; (8008a6c <prvInitialiseNewTask+0x148>)
 8008a3e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	68f9      	ldr	r1, [r7, #12]
 8008a44:	69b8      	ldr	r0, [r7, #24]
 8008a46:	f001 fa01 	bl	8009e4c <pxPortInitialiseStack>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a5c:	bf00      	nop
 8008a5e:	3720      	adds	r7, #32
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	0800f214 	.word	0x0800f214
 8008a68:	0800f234 	.word	0x0800f234
 8008a6c:	0800f1f4 	.word	0x0800f1f4

08008a70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a78:	f001 fb14 	bl	800a0a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a7c:	4b2a      	ldr	r3, [pc, #168]	; (8008b28 <prvAddNewTaskToReadyList+0xb8>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3301      	adds	r3, #1
 8008a82:	4a29      	ldr	r2, [pc, #164]	; (8008b28 <prvAddNewTaskToReadyList+0xb8>)
 8008a84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a86:	4b29      	ldr	r3, [pc, #164]	; (8008b2c <prvAddNewTaskToReadyList+0xbc>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d109      	bne.n	8008aa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a8e:	4a27      	ldr	r2, [pc, #156]	; (8008b2c <prvAddNewTaskToReadyList+0xbc>)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a94:	4b24      	ldr	r3, [pc, #144]	; (8008b28 <prvAddNewTaskToReadyList+0xb8>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d110      	bne.n	8008abe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a9c:	f000 fcbc 	bl	8009418 <prvInitialiseTaskLists>
 8008aa0:	e00d      	b.n	8008abe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008aa2:	4b23      	ldr	r3, [pc, #140]	; (8008b30 <prvAddNewTaskToReadyList+0xc0>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d109      	bne.n	8008abe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008aaa:	4b20      	ldr	r3, [pc, #128]	; (8008b2c <prvAddNewTaskToReadyList+0xbc>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d802      	bhi.n	8008abe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ab8:	4a1c      	ldr	r2, [pc, #112]	; (8008b2c <prvAddNewTaskToReadyList+0xbc>)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008abe:	4b1d      	ldr	r3, [pc, #116]	; (8008b34 <prvAddNewTaskToReadyList+0xc4>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	4a1b      	ldr	r2, [pc, #108]	; (8008b34 <prvAddNewTaskToReadyList+0xc4>)
 8008ac6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	2201      	movs	r2, #1
 8008ace:	409a      	lsls	r2, r3
 8008ad0:	4b19      	ldr	r3, [pc, #100]	; (8008b38 <prvAddNewTaskToReadyList+0xc8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	4a18      	ldr	r2, [pc, #96]	; (8008b38 <prvAddNewTaskToReadyList+0xc8>)
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4a15      	ldr	r2, [pc, #84]	; (8008b3c <prvAddNewTaskToReadyList+0xcc>)
 8008ae8:	441a      	add	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	3304      	adds	r3, #4
 8008aee:	4619      	mov	r1, r3
 8008af0:	4610      	mov	r0, r2
 8008af2:	f7ff f8cc 	bl	8007c8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008af6:	f001 fb05 	bl	800a104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008afa:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <prvAddNewTaskToReadyList+0xc0>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00e      	beq.n	8008b20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b02:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <prvAddNewTaskToReadyList+0xbc>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d207      	bcs.n	8008b20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b10:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <prvAddNewTaskToReadyList+0xd0>)
 8008b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b16:	601a      	str	r2, [r3, #0]
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	20000d64 	.word	0x20000d64
 8008b2c:	20000c64 	.word	0x20000c64
 8008b30:	20000d70 	.word	0x20000d70
 8008b34:	20000d80 	.word	0x20000d80
 8008b38:	20000d6c 	.word	0x20000d6c
 8008b3c:	20000c68 	.word	0x20000c68
 8008b40:	e000ed04 	.word	0xe000ed04

08008b44 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08a      	sub	sp, #40	; 0x28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <vTaskDelayUntil+0x2a>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	617b      	str	r3, [r7, #20]
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10a      	bne.n	8008b8a <vTaskDelayUntil+0x46>
	__asm volatile
 8008b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	613b      	str	r3, [r7, #16]
}
 8008b86:	bf00      	nop
 8008b88:	e7fe      	b.n	8008b88 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008b8a:	4b2a      	ldr	r3, [pc, #168]	; (8008c34 <vTaskDelayUntil+0xf0>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00a      	beq.n	8008ba8 <vTaskDelayUntil+0x64>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	60fb      	str	r3, [r7, #12]
}
 8008ba4:	bf00      	nop
 8008ba6:	e7fe      	b.n	8008ba6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008ba8:	f000 f8ee 	bl	8008d88 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008bac:	4b22      	ldr	r3, [pc, #136]	; (8008c38 <vTaskDelayUntil+0xf4>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	4413      	add	r3, r2
 8008bba:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6a3a      	ldr	r2, [r7, #32]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d20b      	bcs.n	8008bde <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69fa      	ldr	r2, [r7, #28]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d211      	bcs.n	8008bf4 <vTaskDelayUntil+0xb0>
 8008bd0:	69fa      	ldr	r2, [r7, #28]
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d90d      	bls.n	8008bf4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
 8008bdc:	e00a      	b.n	8008bf4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	69fa      	ldr	r2, [r7, #28]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d303      	bcc.n	8008bf0 <vTaskDelayUntil+0xac>
 8008be8:	69fa      	ldr	r2, [r7, #28]
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d901      	bls.n	8008bf4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	69fa      	ldr	r2, [r7, #28]
 8008bf8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d006      	beq.n	8008c0e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008c00:	69fa      	ldr	r2, [r7, #28]
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2100      	movs	r1, #0
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 fd6b 	bl	80096e4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008c0e:	f000 f8c9 	bl	8008da4 <xTaskResumeAll>
 8008c12:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d107      	bne.n	8008c2a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008c1a:	4b08      	ldr	r3, [pc, #32]	; (8008c3c <vTaskDelayUntil+0xf8>)
 8008c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c2a:	bf00      	nop
 8008c2c:	3728      	adds	r7, #40	; 0x28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20000d8c 	.word	0x20000d8c
 8008c38:	20000d68 	.word	0x20000d68
 8008c3c:	e000ed04 	.word	0xe000ed04

08008c40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d017      	beq.n	8008c82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c52:	4b13      	ldr	r3, [pc, #76]	; (8008ca0 <vTaskDelay+0x60>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00a      	beq.n	8008c70 <vTaskDelay+0x30>
	__asm volatile
 8008c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	60bb      	str	r3, [r7, #8]
}
 8008c6c:	bf00      	nop
 8008c6e:	e7fe      	b.n	8008c6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c70:	f000 f88a 	bl	8008d88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c74:	2100      	movs	r1, #0
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fd34 	bl	80096e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c7c:	f000 f892 	bl	8008da4 <xTaskResumeAll>
 8008c80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d107      	bne.n	8008c98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008c88:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <vTaskDelay+0x64>)
 8008c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c8e:	601a      	str	r2, [r3, #0]
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c98:	bf00      	nop
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	20000d8c 	.word	0x20000d8c
 8008ca4:	e000ed04 	.word	0xe000ed04

08008ca8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08a      	sub	sp, #40	; 0x28
 8008cac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008cb6:	463a      	mov	r2, r7
 8008cb8:	1d39      	adds	r1, r7, #4
 8008cba:	f107 0308 	add.w	r3, r7, #8
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7f8 f9cc 	bl	800105c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	9202      	str	r2, [sp, #8]
 8008ccc:	9301      	str	r3, [sp, #4]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	460a      	mov	r2, r1
 8008cd6:	4924      	ldr	r1, [pc, #144]	; (8008d68 <vTaskStartScheduler+0xc0>)
 8008cd8:	4824      	ldr	r0, [pc, #144]	; (8008d6c <vTaskStartScheduler+0xc4>)
 8008cda:	f7ff fd81 	bl	80087e0 <xTaskCreateStatic>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	4a23      	ldr	r2, [pc, #140]	; (8008d70 <vTaskStartScheduler+0xc8>)
 8008ce2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ce4:	4b22      	ldr	r3, [pc, #136]	; (8008d70 <vTaskStartScheduler+0xc8>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cec:	2301      	movs	r3, #1
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	e001      	b.n	8008cf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d102      	bne.n	8008d02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008cfc:	f000 fd58 	bl	80097b0 <xTimerCreateTimerTask>
 8008d00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d11b      	bne.n	8008d40 <vTaskStartScheduler+0x98>
	__asm volatile
 8008d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0c:	f383 8811 	msr	BASEPRI, r3
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	613b      	str	r3, [r7, #16]
}
 8008d1a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d1c:	4b15      	ldr	r3, [pc, #84]	; (8008d74 <vTaskStartScheduler+0xcc>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	334c      	adds	r3, #76	; 0x4c
 8008d22:	4a15      	ldr	r2, [pc, #84]	; (8008d78 <vTaskStartScheduler+0xd0>)
 8008d24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d26:	4b15      	ldr	r3, [pc, #84]	; (8008d7c <vTaskStartScheduler+0xd4>)
 8008d28:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d2e:	4b14      	ldr	r3, [pc, #80]	; (8008d80 <vTaskStartScheduler+0xd8>)
 8008d30:	2201      	movs	r2, #1
 8008d32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d34:	4b13      	ldr	r3, [pc, #76]	; (8008d84 <vTaskStartScheduler+0xdc>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d3a:	f001 f911 	bl	8009f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d3e:	e00e      	b.n	8008d5e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d46:	d10a      	bne.n	8008d5e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	60fb      	str	r3, [r7, #12]
}
 8008d5a:	bf00      	nop
 8008d5c:	e7fe      	b.n	8008d5c <vTaskStartScheduler+0xb4>
}
 8008d5e:	bf00      	nop
 8008d60:	3718      	adds	r7, #24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	0800f194 	.word	0x0800f194
 8008d6c:	080093e9 	.word	0x080093e9
 8008d70:	20000d88 	.word	0x20000d88
 8008d74:	20000c64 	.word	0x20000c64
 8008d78:	20000094 	.word	0x20000094
 8008d7c:	20000d84 	.word	0x20000d84
 8008d80:	20000d70 	.word	0x20000d70
 8008d84:	20000d68 	.word	0x20000d68

08008d88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d8c:	4b04      	ldr	r3, [pc, #16]	; (8008da0 <vTaskSuspendAll+0x18>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	3301      	adds	r3, #1
 8008d92:	4a03      	ldr	r2, [pc, #12]	; (8008da0 <vTaskSuspendAll+0x18>)
 8008d94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d96:	bf00      	nop
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	20000d8c 	.word	0x20000d8c

08008da4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008db2:	4b41      	ldr	r3, [pc, #260]	; (8008eb8 <xTaskResumeAll+0x114>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10a      	bne.n	8008dd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	603b      	str	r3, [r7, #0]
}
 8008dcc:	bf00      	nop
 8008dce:	e7fe      	b.n	8008dce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008dd0:	f001 f968 	bl	800a0a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008dd4:	4b38      	ldr	r3, [pc, #224]	; (8008eb8 <xTaskResumeAll+0x114>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	4a37      	ldr	r2, [pc, #220]	; (8008eb8 <xTaskResumeAll+0x114>)
 8008ddc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dde:	4b36      	ldr	r3, [pc, #216]	; (8008eb8 <xTaskResumeAll+0x114>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d161      	bne.n	8008eaa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008de6:	4b35      	ldr	r3, [pc, #212]	; (8008ebc <xTaskResumeAll+0x118>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d05d      	beq.n	8008eaa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dee:	e02e      	b.n	8008e4e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008df0:	4b33      	ldr	r3, [pc, #204]	; (8008ec0 <xTaskResumeAll+0x11c>)
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	3318      	adds	r3, #24
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fe ffa3 	bl	8007d48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3304      	adds	r3, #4
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe ff9e 	bl	8007d48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e10:	2201      	movs	r2, #1
 8008e12:	409a      	lsls	r2, r3
 8008e14:	4b2b      	ldr	r3, [pc, #172]	; (8008ec4 <xTaskResumeAll+0x120>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	4a2a      	ldr	r2, [pc, #168]	; (8008ec4 <xTaskResumeAll+0x120>)
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4a27      	ldr	r2, [pc, #156]	; (8008ec8 <xTaskResumeAll+0x124>)
 8008e2c:	441a      	add	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3304      	adds	r3, #4
 8008e32:	4619      	mov	r1, r3
 8008e34:	4610      	mov	r0, r2
 8008e36:	f7fe ff2a 	bl	8007c8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3e:	4b23      	ldr	r3, [pc, #140]	; (8008ecc <xTaskResumeAll+0x128>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d302      	bcc.n	8008e4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008e48:	4b21      	ldr	r3, [pc, #132]	; (8008ed0 <xTaskResumeAll+0x12c>)
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e4e:	4b1c      	ldr	r3, [pc, #112]	; (8008ec0 <xTaskResumeAll+0x11c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1cc      	bne.n	8008df0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e5c:	f000 fb7e 	bl	800955c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e60:	4b1c      	ldr	r3, [pc, #112]	; (8008ed4 <xTaskResumeAll+0x130>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d010      	beq.n	8008e8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e6c:	f000 f846 	bl	8008efc <xTaskIncrementTick>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008e76:	4b16      	ldr	r3, [pc, #88]	; (8008ed0 <xTaskResumeAll+0x12c>)
 8008e78:	2201      	movs	r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1f1      	bne.n	8008e6c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008e88:	4b12      	ldr	r3, [pc, #72]	; (8008ed4 <xTaskResumeAll+0x130>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e8e:	4b10      	ldr	r3, [pc, #64]	; (8008ed0 <xTaskResumeAll+0x12c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d009      	beq.n	8008eaa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e96:	2301      	movs	r3, #1
 8008e98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e9a:	4b0f      	ldr	r3, [pc, #60]	; (8008ed8 <xTaskResumeAll+0x134>)
 8008e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008eaa:	f001 f92b 	bl	800a104 <vPortExitCritical>

	return xAlreadyYielded;
 8008eae:	68bb      	ldr	r3, [r7, #8]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	20000d8c 	.word	0x20000d8c
 8008ebc:	20000d64 	.word	0x20000d64
 8008ec0:	20000d24 	.word	0x20000d24
 8008ec4:	20000d6c 	.word	0x20000d6c
 8008ec8:	20000c68 	.word	0x20000c68
 8008ecc:	20000c64 	.word	0x20000c64
 8008ed0:	20000d78 	.word	0x20000d78
 8008ed4:	20000d74 	.word	0x20000d74
 8008ed8:	e000ed04 	.word	0xe000ed04

08008edc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ee2:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <xTaskGetTickCount+0x1c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ee8:	687b      	ldr	r3, [r7, #4]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	20000d68 	.word	0x20000d68

08008efc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f02:	2300      	movs	r3, #0
 8008f04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f06:	4b4e      	ldr	r3, [pc, #312]	; (8009040 <xTaskIncrementTick+0x144>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f040 808e 	bne.w	800902c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f10:	4b4c      	ldr	r3, [pc, #304]	; (8009044 <xTaskIncrementTick+0x148>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3301      	adds	r3, #1
 8008f16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f18:	4a4a      	ldr	r2, [pc, #296]	; (8009044 <xTaskIncrementTick+0x148>)
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d120      	bne.n	8008f66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f24:	4b48      	ldr	r3, [pc, #288]	; (8009048 <xTaskIncrementTick+0x14c>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00a      	beq.n	8008f44 <xTaskIncrementTick+0x48>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	603b      	str	r3, [r7, #0]
}
 8008f40:	bf00      	nop
 8008f42:	e7fe      	b.n	8008f42 <xTaskIncrementTick+0x46>
 8008f44:	4b40      	ldr	r3, [pc, #256]	; (8009048 <xTaskIncrementTick+0x14c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	60fb      	str	r3, [r7, #12]
 8008f4a:	4b40      	ldr	r3, [pc, #256]	; (800904c <xTaskIncrementTick+0x150>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a3e      	ldr	r2, [pc, #248]	; (8009048 <xTaskIncrementTick+0x14c>)
 8008f50:	6013      	str	r3, [r2, #0]
 8008f52:	4a3e      	ldr	r2, [pc, #248]	; (800904c <xTaskIncrementTick+0x150>)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	4b3d      	ldr	r3, [pc, #244]	; (8009050 <xTaskIncrementTick+0x154>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	4a3c      	ldr	r2, [pc, #240]	; (8009050 <xTaskIncrementTick+0x154>)
 8008f60:	6013      	str	r3, [r2, #0]
 8008f62:	f000 fafb 	bl	800955c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f66:	4b3b      	ldr	r3, [pc, #236]	; (8009054 <xTaskIncrementTick+0x158>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d348      	bcc.n	8009002 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f70:	4b35      	ldr	r3, [pc, #212]	; (8009048 <xTaskIncrementTick+0x14c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d104      	bne.n	8008f84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f7a:	4b36      	ldr	r3, [pc, #216]	; (8009054 <xTaskIncrementTick+0x158>)
 8008f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f80:	601a      	str	r2, [r3, #0]
					break;
 8008f82:	e03e      	b.n	8009002 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f84:	4b30      	ldr	r3, [pc, #192]	; (8009048 <xTaskIncrementTick+0x14c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d203      	bcs.n	8008fa4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f9c:	4a2d      	ldr	r2, [pc, #180]	; (8009054 <xTaskIncrementTick+0x158>)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fa2:	e02e      	b.n	8009002 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fe fecd 	bl	8007d48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d004      	beq.n	8008fc0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	3318      	adds	r3, #24
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe fec4 	bl	8007d48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	409a      	lsls	r2, r3
 8008fc8:	4b23      	ldr	r3, [pc, #140]	; (8009058 <xTaskIncrementTick+0x15c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	4a22      	ldr	r2, [pc, #136]	; (8009058 <xTaskIncrementTick+0x15c>)
 8008fd0:	6013      	str	r3, [r2, #0]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4a1f      	ldr	r2, [pc, #124]	; (800905c <xTaskIncrementTick+0x160>)
 8008fe0:	441a      	add	r2, r3
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4610      	mov	r0, r2
 8008fea:	f7fe fe50 	bl	8007c8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff2:	4b1b      	ldr	r3, [pc, #108]	; (8009060 <xTaskIncrementTick+0x164>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d3b9      	bcc.n	8008f70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009000:	e7b6      	b.n	8008f70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009002:	4b17      	ldr	r3, [pc, #92]	; (8009060 <xTaskIncrementTick+0x164>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009008:	4914      	ldr	r1, [pc, #80]	; (800905c <xTaskIncrementTick+0x160>)
 800900a:	4613      	mov	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4413      	add	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	440b      	add	r3, r1
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d901      	bls.n	800901e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800901a:	2301      	movs	r3, #1
 800901c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800901e:	4b11      	ldr	r3, [pc, #68]	; (8009064 <xTaskIncrementTick+0x168>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d007      	beq.n	8009036 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009026:	2301      	movs	r3, #1
 8009028:	617b      	str	r3, [r7, #20]
 800902a:	e004      	b.n	8009036 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800902c:	4b0e      	ldr	r3, [pc, #56]	; (8009068 <xTaskIncrementTick+0x16c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3301      	adds	r3, #1
 8009032:	4a0d      	ldr	r2, [pc, #52]	; (8009068 <xTaskIncrementTick+0x16c>)
 8009034:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009036:	697b      	ldr	r3, [r7, #20]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3718      	adds	r7, #24
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	20000d8c 	.word	0x20000d8c
 8009044:	20000d68 	.word	0x20000d68
 8009048:	20000d1c 	.word	0x20000d1c
 800904c:	20000d20 	.word	0x20000d20
 8009050:	20000d7c 	.word	0x20000d7c
 8009054:	20000d84 	.word	0x20000d84
 8009058:	20000d6c 	.word	0x20000d6c
 800905c:	20000c68 	.word	0x20000c68
 8009060:	20000c64 	.word	0x20000c64
 8009064:	20000d78 	.word	0x20000d78
 8009068:	20000d74 	.word	0x20000d74

0800906c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b088      	sub	sp, #32
 8009070:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009072:	4b3c      	ldr	r3, [pc, #240]	; (8009164 <vTaskSwitchContext+0xf8>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d003      	beq.n	8009082 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800907a:	4b3b      	ldr	r3, [pc, #236]	; (8009168 <vTaskSwitchContext+0xfc>)
 800907c:	2201      	movs	r2, #1
 800907e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009080:	e06b      	b.n	800915a <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 8009082:	4b39      	ldr	r3, [pc, #228]	; (8009168 <vTaskSwitchContext+0xfc>)
 8009084:	2200      	movs	r2, #0
 8009086:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009088:	4b38      	ldr	r3, [pc, #224]	; (800916c <vTaskSwitchContext+0x100>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908e:	61fb      	str	r3, [r7, #28]
 8009090:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009094:	61bb      	str	r3, [r7, #24]
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	429a      	cmp	r2, r3
 800909e:	d111      	bne.n	80090c4 <vTaskSwitchContext+0x58>
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	3304      	adds	r3, #4
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	69ba      	ldr	r2, [r7, #24]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d10b      	bne.n	80090c4 <vTaskSwitchContext+0x58>
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	3308      	adds	r3, #8
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69ba      	ldr	r2, [r7, #24]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d105      	bne.n	80090c4 <vTaskSwitchContext+0x58>
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	330c      	adds	r3, #12
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d008      	beq.n	80090d6 <vTaskSwitchContext+0x6a>
 80090c4:	4b29      	ldr	r3, [pc, #164]	; (800916c <vTaskSwitchContext+0x100>)
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	4b28      	ldr	r3, [pc, #160]	; (800916c <vTaskSwitchContext+0x100>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3334      	adds	r3, #52	; 0x34
 80090ce:	4619      	mov	r1, r3
 80090d0:	4610      	mov	r0, r2
 80090d2:	f7f7 ffb7 	bl	8001044 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d6:	4b26      	ldr	r3, [pc, #152]	; (8009170 <vTaskSwitchContext+0x104>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	fab3 f383 	clz	r3, r3
 80090e2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	f1c3 031f 	rsb	r3, r3, #31
 80090ea:	617b      	str	r3, [r7, #20]
 80090ec:	4921      	ldr	r1, [pc, #132]	; (8009174 <vTaskSwitchContext+0x108>)
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	440b      	add	r3, r1
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10a      	bne.n	8009116 <vTaskSwitchContext+0xaa>
	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	607b      	str	r3, [r7, #4]
}
 8009112:	bf00      	nop
 8009114:	e7fe      	b.n	8009114 <vTaskSwitchContext+0xa8>
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	4613      	mov	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4a14      	ldr	r2, [pc, #80]	; (8009174 <vTaskSwitchContext+0x108>)
 8009122:	4413      	add	r3, r2
 8009124:	613b      	str	r3, [r7, #16]
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	605a      	str	r2, [r3, #4]
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	685a      	ldr	r2, [r3, #4]
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	3308      	adds	r3, #8
 8009138:	429a      	cmp	r2, r3
 800913a:	d104      	bne.n	8009146 <vTaskSwitchContext+0xda>
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	605a      	str	r2, [r3, #4]
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	4a07      	ldr	r2, [pc, #28]	; (800916c <vTaskSwitchContext+0x100>)
 800914e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009150:	4b06      	ldr	r3, [pc, #24]	; (800916c <vTaskSwitchContext+0x100>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	334c      	adds	r3, #76	; 0x4c
 8009156:	4a08      	ldr	r2, [pc, #32]	; (8009178 <vTaskSwitchContext+0x10c>)
 8009158:	6013      	str	r3, [r2, #0]
}
 800915a:	bf00      	nop
 800915c:	3720      	adds	r7, #32
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	20000d8c 	.word	0x20000d8c
 8009168:	20000d78 	.word	0x20000d78
 800916c:	20000c64 	.word	0x20000c64
 8009170:	20000d6c 	.word	0x20000d6c
 8009174:	20000c68 	.word	0x20000c68
 8009178:	20000094 	.word	0x20000094

0800917c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10a      	bne.n	80091a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	60fb      	str	r3, [r7, #12]
}
 800919e:	bf00      	nop
 80091a0:	e7fe      	b.n	80091a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091a2:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <vTaskPlaceOnEventList+0x44>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3318      	adds	r3, #24
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7fe fd93 	bl	8007cd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091b0:	2101      	movs	r1, #1
 80091b2:	6838      	ldr	r0, [r7, #0]
 80091b4:	f000 fa96 	bl	80096e4 <prvAddCurrentTaskToDelayedList>
}
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	20000c64 	.word	0x20000c64

080091c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10a      	bne.n	80091ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	617b      	str	r3, [r7, #20]
}
 80091e8:	bf00      	nop
 80091ea:	e7fe      	b.n	80091ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091ec:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <vTaskPlaceOnEventListRestricted+0x54>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3318      	adds	r3, #24
 80091f2:	4619      	mov	r1, r3
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7fe fd4a 	bl	8007c8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009200:	f04f 33ff 	mov.w	r3, #4294967295
 8009204:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	68b8      	ldr	r0, [r7, #8]
 800920a:	f000 fa6b 	bl	80096e4 <prvAddCurrentTaskToDelayedList>
	}
 800920e:	bf00      	nop
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20000c64 	.word	0x20000c64

0800921c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10a      	bne.n	8009248 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	60fb      	str	r3, [r7, #12]
}
 8009244:	bf00      	nop
 8009246:	e7fe      	b.n	8009246 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	3318      	adds	r3, #24
 800924c:	4618      	mov	r0, r3
 800924e:	f7fe fd7b 	bl	8007d48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009252:	4b1d      	ldr	r3, [pc, #116]	; (80092c8 <xTaskRemoveFromEventList+0xac>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d11c      	bne.n	8009294 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	3304      	adds	r3, #4
 800925e:	4618      	mov	r0, r3
 8009260:	f7fe fd72 	bl	8007d48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009268:	2201      	movs	r2, #1
 800926a:	409a      	lsls	r2, r3
 800926c:	4b17      	ldr	r3, [pc, #92]	; (80092cc <xTaskRemoveFromEventList+0xb0>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4313      	orrs	r3, r2
 8009272:	4a16      	ldr	r2, [pc, #88]	; (80092cc <xTaskRemoveFromEventList+0xb0>)
 8009274:	6013      	str	r3, [r2, #0]
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927a:	4613      	mov	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4a13      	ldr	r2, [pc, #76]	; (80092d0 <xTaskRemoveFromEventList+0xb4>)
 8009284:	441a      	add	r2, r3
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	3304      	adds	r3, #4
 800928a:	4619      	mov	r1, r3
 800928c:	4610      	mov	r0, r2
 800928e:	f7fe fcfe 	bl	8007c8e <vListInsertEnd>
 8009292:	e005      	b.n	80092a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	3318      	adds	r3, #24
 8009298:	4619      	mov	r1, r3
 800929a:	480e      	ldr	r0, [pc, #56]	; (80092d4 <xTaskRemoveFromEventList+0xb8>)
 800929c:	f7fe fcf7 	bl	8007c8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a4:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <xTaskRemoveFromEventList+0xbc>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d905      	bls.n	80092ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092ae:	2301      	movs	r3, #1
 80092b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092b2:	4b0a      	ldr	r3, [pc, #40]	; (80092dc <xTaskRemoveFromEventList+0xc0>)
 80092b4:	2201      	movs	r2, #1
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	e001      	b.n	80092be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80092ba:	2300      	movs	r3, #0
 80092bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80092be:	697b      	ldr	r3, [r7, #20]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20000d8c 	.word	0x20000d8c
 80092cc:	20000d6c 	.word	0x20000d6c
 80092d0:	20000c68 	.word	0x20000c68
 80092d4:	20000d24 	.word	0x20000d24
 80092d8:	20000c64 	.word	0x20000c64
 80092dc:	20000d78 	.word	0x20000d78

080092e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092e8:	4b06      	ldr	r3, [pc, #24]	; (8009304 <vTaskInternalSetTimeOutState+0x24>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092f0:	4b05      	ldr	r3, [pc, #20]	; (8009308 <vTaskInternalSetTimeOutState+0x28>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	605a      	str	r2, [r3, #4]
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	20000d7c 	.word	0x20000d7c
 8009308:	20000d68 	.word	0x20000d68

0800930c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b088      	sub	sp, #32
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10a      	bne.n	8009332 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800931c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009320:	f383 8811 	msr	BASEPRI, r3
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	613b      	str	r3, [r7, #16]
}
 800932e:	bf00      	nop
 8009330:	e7fe      	b.n	8009330 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10a      	bne.n	800934e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	60fb      	str	r3, [r7, #12]
}
 800934a:	bf00      	nop
 800934c:	e7fe      	b.n	800934c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800934e:	f000 fea9 	bl	800a0a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009352:	4b1d      	ldr	r3, [pc, #116]	; (80093c8 <xTaskCheckForTimeOut+0xbc>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936a:	d102      	bne.n	8009372 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800936c:	2300      	movs	r3, #0
 800936e:	61fb      	str	r3, [r7, #28]
 8009370:	e023      	b.n	80093ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	4b15      	ldr	r3, [pc, #84]	; (80093cc <xTaskCheckForTimeOut+0xc0>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	429a      	cmp	r2, r3
 800937c:	d007      	beq.n	800938e <xTaskCheckForTimeOut+0x82>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	69ba      	ldr	r2, [r7, #24]
 8009384:	429a      	cmp	r2, r3
 8009386:	d302      	bcc.n	800938e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009388:	2301      	movs	r3, #1
 800938a:	61fb      	str	r3, [r7, #28]
 800938c:	e015      	b.n	80093ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	429a      	cmp	r2, r3
 8009396:	d20b      	bcs.n	80093b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	1ad2      	subs	r2, r2, r3
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f7ff ff9b 	bl	80092e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093aa:	2300      	movs	r3, #0
 80093ac:	61fb      	str	r3, [r7, #28]
 80093ae:	e004      	b.n	80093ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093b6:	2301      	movs	r3, #1
 80093b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093ba:	f000 fea3 	bl	800a104 <vPortExitCritical>

	return xReturn;
 80093be:	69fb      	ldr	r3, [r7, #28]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3720      	adds	r7, #32
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	20000d68 	.word	0x20000d68
 80093cc:	20000d7c 	.word	0x20000d7c

080093d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093d0:	b480      	push	{r7}
 80093d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093d4:	4b03      	ldr	r3, [pc, #12]	; (80093e4 <vTaskMissedYield+0x14>)
 80093d6:	2201      	movs	r2, #1
 80093d8:	601a      	str	r2, [r3, #0]
}
 80093da:	bf00      	nop
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr
 80093e4:	20000d78 	.word	0x20000d78

080093e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093f0:	f000 f852 	bl	8009498 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093f4:	4b06      	ldr	r3, [pc, #24]	; (8009410 <prvIdleTask+0x28>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d9f9      	bls.n	80093f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80093fc:	4b05      	ldr	r3, [pc, #20]	; (8009414 <prvIdleTask+0x2c>)
 80093fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800940c:	e7f0      	b.n	80093f0 <prvIdleTask+0x8>
 800940e:	bf00      	nop
 8009410:	20000c68 	.word	0x20000c68
 8009414:	e000ed04 	.word	0xe000ed04

08009418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800941e:	2300      	movs	r3, #0
 8009420:	607b      	str	r3, [r7, #4]
 8009422:	e00c      	b.n	800943e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	4613      	mov	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4a12      	ldr	r2, [pc, #72]	; (8009478 <prvInitialiseTaskLists+0x60>)
 8009430:	4413      	add	r3, r2
 8009432:	4618      	mov	r0, r3
 8009434:	f7fe fbfe 	bl	8007c34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3301      	adds	r3, #1
 800943c:	607b      	str	r3, [r7, #4]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b06      	cmp	r3, #6
 8009442:	d9ef      	bls.n	8009424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009444:	480d      	ldr	r0, [pc, #52]	; (800947c <prvInitialiseTaskLists+0x64>)
 8009446:	f7fe fbf5 	bl	8007c34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800944a:	480d      	ldr	r0, [pc, #52]	; (8009480 <prvInitialiseTaskLists+0x68>)
 800944c:	f7fe fbf2 	bl	8007c34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009450:	480c      	ldr	r0, [pc, #48]	; (8009484 <prvInitialiseTaskLists+0x6c>)
 8009452:	f7fe fbef 	bl	8007c34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009456:	480c      	ldr	r0, [pc, #48]	; (8009488 <prvInitialiseTaskLists+0x70>)
 8009458:	f7fe fbec 	bl	8007c34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800945c:	480b      	ldr	r0, [pc, #44]	; (800948c <prvInitialiseTaskLists+0x74>)
 800945e:	f7fe fbe9 	bl	8007c34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009462:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <prvInitialiseTaskLists+0x78>)
 8009464:	4a05      	ldr	r2, [pc, #20]	; (800947c <prvInitialiseTaskLists+0x64>)
 8009466:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009468:	4b0a      	ldr	r3, [pc, #40]	; (8009494 <prvInitialiseTaskLists+0x7c>)
 800946a:	4a05      	ldr	r2, [pc, #20]	; (8009480 <prvInitialiseTaskLists+0x68>)
 800946c:	601a      	str	r2, [r3, #0]
}
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20000c68 	.word	0x20000c68
 800947c:	20000cf4 	.word	0x20000cf4
 8009480:	20000d08 	.word	0x20000d08
 8009484:	20000d24 	.word	0x20000d24
 8009488:	20000d38 	.word	0x20000d38
 800948c:	20000d50 	.word	0x20000d50
 8009490:	20000d1c 	.word	0x20000d1c
 8009494:	20000d20 	.word	0x20000d20

08009498 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800949e:	e019      	b.n	80094d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094a0:	f000 fe00 	bl	800a0a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094a4:	4b10      	ldr	r3, [pc, #64]	; (80094e8 <prvCheckTasksWaitingTermination+0x50>)
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe fc49 	bl	8007d48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094b6:	4b0d      	ldr	r3, [pc, #52]	; (80094ec <prvCheckTasksWaitingTermination+0x54>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3b01      	subs	r3, #1
 80094bc:	4a0b      	ldr	r2, [pc, #44]	; (80094ec <prvCheckTasksWaitingTermination+0x54>)
 80094be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094c0:	4b0b      	ldr	r3, [pc, #44]	; (80094f0 <prvCheckTasksWaitingTermination+0x58>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	4a0a      	ldr	r2, [pc, #40]	; (80094f0 <prvCheckTasksWaitingTermination+0x58>)
 80094c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094ca:	f000 fe1b 	bl	800a104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f810 	bl	80094f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094d4:	4b06      	ldr	r3, [pc, #24]	; (80094f0 <prvCheckTasksWaitingTermination+0x58>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1e1      	bne.n	80094a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094dc:	bf00      	nop
 80094de:	bf00      	nop
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	20000d38 	.word	0x20000d38
 80094ec:	20000d64 	.word	0x20000d64
 80094f0:	20000d4c 	.word	0x20000d4c

080094f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	334c      	adds	r3, #76	; 0x4c
 8009500:	4618      	mov	r0, r3
 8009502:	f002 f931 	bl	800b768 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800950c:	2b00      	cmp	r3, #0
 800950e:	d108      	bne.n	8009522 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009514:	4618      	mov	r0, r3
 8009516:	f000 ffb3 	bl	800a480 <vPortFree>
				vPortFree( pxTCB );
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 ffb0 	bl	800a480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009520:	e018      	b.n	8009554 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009528:	2b01      	cmp	r3, #1
 800952a:	d103      	bne.n	8009534 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 ffa7 	bl	800a480 <vPortFree>
	}
 8009532:	e00f      	b.n	8009554 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800953a:	2b02      	cmp	r3, #2
 800953c:	d00a      	beq.n	8009554 <prvDeleteTCB+0x60>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	60fb      	str	r3, [r7, #12]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <prvDeleteTCB+0x5e>
	}
 8009554:	bf00      	nop
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009562:	4b0c      	ldr	r3, [pc, #48]	; (8009594 <prvResetNextTaskUnblockTime+0x38>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d104      	bne.n	8009576 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800956c:	4b0a      	ldr	r3, [pc, #40]	; (8009598 <prvResetNextTaskUnblockTime+0x3c>)
 800956e:	f04f 32ff 	mov.w	r2, #4294967295
 8009572:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009574:	e008      	b.n	8009588 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009576:	4b07      	ldr	r3, [pc, #28]	; (8009594 <prvResetNextTaskUnblockTime+0x38>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	4a04      	ldr	r2, [pc, #16]	; (8009598 <prvResetNextTaskUnblockTime+0x3c>)
 8009586:	6013      	str	r3, [r2, #0]
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	20000d1c 	.word	0x20000d1c
 8009598:	20000d84 	.word	0x20000d84

0800959c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095a2:	4b0b      	ldr	r3, [pc, #44]	; (80095d0 <xTaskGetSchedulerState+0x34>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d102      	bne.n	80095b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095aa:	2301      	movs	r3, #1
 80095ac:	607b      	str	r3, [r7, #4]
 80095ae:	e008      	b.n	80095c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095b0:	4b08      	ldr	r3, [pc, #32]	; (80095d4 <xTaskGetSchedulerState+0x38>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d102      	bne.n	80095be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095b8:	2302      	movs	r3, #2
 80095ba:	607b      	str	r3, [r7, #4]
 80095bc:	e001      	b.n	80095c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095be:	2300      	movs	r3, #0
 80095c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095c2:	687b      	ldr	r3, [r7, #4]
	}
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	20000d70 	.word	0x20000d70
 80095d4:	20000d8c 	.word	0x20000d8c

080095d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095e4:	2300      	movs	r3, #0
 80095e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d06e      	beq.n	80096cc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095ee:	4b3a      	ldr	r3, [pc, #232]	; (80096d8 <xTaskPriorityDisinherit+0x100>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d00a      	beq.n	800960e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	60fb      	str	r3, [r7, #12]
}
 800960a:	bf00      	nop
 800960c:	e7fe      	b.n	800960c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10a      	bne.n	800962c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	60bb      	str	r3, [r7, #8]
}
 8009628:	bf00      	nop
 800962a:	e7fe      	b.n	800962a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009630:	1e5a      	subs	r2, r3, #1
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963e:	429a      	cmp	r2, r3
 8009640:	d044      	beq.n	80096cc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009646:	2b00      	cmp	r3, #0
 8009648:	d140      	bne.n	80096cc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	3304      	adds	r3, #4
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fb7a 	bl	8007d48 <uxListRemove>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d115      	bne.n	8009686 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965e:	491f      	ldr	r1, [pc, #124]	; (80096dc <xTaskPriorityDisinherit+0x104>)
 8009660:	4613      	mov	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4413      	add	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	440b      	add	r3, r1
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10a      	bne.n	8009686 <xTaskPriorityDisinherit+0xae>
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009674:	2201      	movs	r2, #1
 8009676:	fa02 f303 	lsl.w	r3, r2, r3
 800967a:	43da      	mvns	r2, r3
 800967c:	4b18      	ldr	r3, [pc, #96]	; (80096e0 <xTaskPriorityDisinherit+0x108>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4013      	ands	r3, r2
 8009682:	4a17      	ldr	r2, [pc, #92]	; (80096e0 <xTaskPriorityDisinherit+0x108>)
 8009684:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009692:	f1c3 0207 	rsb	r2, r3, #7
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969e:	2201      	movs	r2, #1
 80096a0:	409a      	lsls	r2, r3
 80096a2:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <xTaskPriorityDisinherit+0x108>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	4a0d      	ldr	r2, [pc, #52]	; (80096e0 <xTaskPriorityDisinherit+0x108>)
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b0:	4613      	mov	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4413      	add	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4a08      	ldr	r2, [pc, #32]	; (80096dc <xTaskPriorityDisinherit+0x104>)
 80096ba:	441a      	add	r2, r3
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	3304      	adds	r3, #4
 80096c0:	4619      	mov	r1, r3
 80096c2:	4610      	mov	r0, r2
 80096c4:	f7fe fae3 	bl	8007c8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096c8:	2301      	movs	r3, #1
 80096ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096cc:	697b      	ldr	r3, [r7, #20]
	}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3718      	adds	r7, #24
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20000c64 	.word	0x20000c64
 80096dc:	20000c68 	.word	0x20000c68
 80096e0:	20000d6c 	.word	0x20000d6c

080096e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096ee:	4b29      	ldr	r3, [pc, #164]	; (8009794 <prvAddCurrentTaskToDelayedList+0xb0>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096f4:	4b28      	ldr	r3, [pc, #160]	; (8009798 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3304      	adds	r3, #4
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe fb24 	bl	8007d48 <uxListRemove>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10b      	bne.n	800971e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009706:	4b24      	ldr	r3, [pc, #144]	; (8009798 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970c:	2201      	movs	r2, #1
 800970e:	fa02 f303 	lsl.w	r3, r2, r3
 8009712:	43da      	mvns	r2, r3
 8009714:	4b21      	ldr	r3, [pc, #132]	; (800979c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4013      	ands	r3, r2
 800971a:	4a20      	ldr	r2, [pc, #128]	; (800979c <prvAddCurrentTaskToDelayedList+0xb8>)
 800971c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009724:	d10a      	bne.n	800973c <prvAddCurrentTaskToDelayedList+0x58>
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d007      	beq.n	800973c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800972c:	4b1a      	ldr	r3, [pc, #104]	; (8009798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3304      	adds	r3, #4
 8009732:	4619      	mov	r1, r3
 8009734:	481a      	ldr	r0, [pc, #104]	; (80097a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009736:	f7fe faaa 	bl	8007c8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800973a:	e026      	b.n	800978a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4413      	add	r3, r2
 8009742:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009744:	4b14      	ldr	r3, [pc, #80]	; (8009798 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	429a      	cmp	r2, r3
 8009752:	d209      	bcs.n	8009768 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009754:	4b13      	ldr	r3, [pc, #76]	; (80097a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	4b0f      	ldr	r3, [pc, #60]	; (8009798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3304      	adds	r3, #4
 800975e:	4619      	mov	r1, r3
 8009760:	4610      	mov	r0, r2
 8009762:	f7fe fab8 	bl	8007cd6 <vListInsert>
}
 8009766:	e010      	b.n	800978a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009768:	4b0f      	ldr	r3, [pc, #60]	; (80097a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	4b0a      	ldr	r3, [pc, #40]	; (8009798 <prvAddCurrentTaskToDelayedList+0xb4>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3304      	adds	r3, #4
 8009772:	4619      	mov	r1, r3
 8009774:	4610      	mov	r0, r2
 8009776:	f7fe faae 	bl	8007cd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800977a:	4b0c      	ldr	r3, [pc, #48]	; (80097ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	429a      	cmp	r2, r3
 8009782:	d202      	bcs.n	800978a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009784:	4a09      	ldr	r2, [pc, #36]	; (80097ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	6013      	str	r3, [r2, #0]
}
 800978a:	bf00      	nop
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20000d68 	.word	0x20000d68
 8009798:	20000c64 	.word	0x20000c64
 800979c:	20000d6c 	.word	0x20000d6c
 80097a0:	20000d50 	.word	0x20000d50
 80097a4:	20000d20 	.word	0x20000d20
 80097a8:	20000d1c 	.word	0x20000d1c
 80097ac:	20000d84 	.word	0x20000d84

080097b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b08a      	sub	sp, #40	; 0x28
 80097b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80097ba:	f000 fb07 	bl	8009dcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80097be:	4b1c      	ldr	r3, [pc, #112]	; (8009830 <xTimerCreateTimerTask+0x80>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d021      	beq.n	800980a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80097ca:	2300      	movs	r3, #0
 80097cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80097ce:	1d3a      	adds	r2, r7, #4
 80097d0:	f107 0108 	add.w	r1, r7, #8
 80097d4:	f107 030c 	add.w	r3, r7, #12
 80097d8:	4618      	mov	r0, r3
 80097da:	f7f7 fc59 	bl	8001090 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80097de:	6879      	ldr	r1, [r7, #4]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	9202      	str	r2, [sp, #8]
 80097e6:	9301      	str	r3, [sp, #4]
 80097e8:	2302      	movs	r3, #2
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	2300      	movs	r3, #0
 80097ee:	460a      	mov	r2, r1
 80097f0:	4910      	ldr	r1, [pc, #64]	; (8009834 <xTimerCreateTimerTask+0x84>)
 80097f2:	4811      	ldr	r0, [pc, #68]	; (8009838 <xTimerCreateTimerTask+0x88>)
 80097f4:	f7fe fff4 	bl	80087e0 <xTaskCreateStatic>
 80097f8:	4603      	mov	r3, r0
 80097fa:	4a10      	ldr	r2, [pc, #64]	; (800983c <xTimerCreateTimerTask+0x8c>)
 80097fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80097fe:	4b0f      	ldr	r3, [pc, #60]	; (800983c <xTimerCreateTimerTask+0x8c>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009806:	2301      	movs	r3, #1
 8009808:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10a      	bne.n	8009826 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	613b      	str	r3, [r7, #16]
}
 8009822:	bf00      	nop
 8009824:	e7fe      	b.n	8009824 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009826:	697b      	ldr	r3, [r7, #20]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	20000dc0 	.word	0x20000dc0
 8009834:	0800f19c 	.word	0x0800f19c
 8009838:	08009975 	.word	0x08009975
 800983c:	20000dc4 	.word	0x20000dc4

08009840 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b08a      	sub	sp, #40	; 0x28
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
 800984c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800984e:	2300      	movs	r3, #0
 8009850:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10a      	bne.n	800986e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	623b      	str	r3, [r7, #32]
}
 800986a:	bf00      	nop
 800986c:	e7fe      	b.n	800986c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800986e:	4b1a      	ldr	r3, [pc, #104]	; (80098d8 <xTimerGenericCommand+0x98>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d02a      	beq.n	80098cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2b05      	cmp	r3, #5
 8009886:	dc18      	bgt.n	80098ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009888:	f7ff fe88 	bl	800959c <xTaskGetSchedulerState>
 800988c:	4603      	mov	r3, r0
 800988e:	2b02      	cmp	r3, #2
 8009890:	d109      	bne.n	80098a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009892:	4b11      	ldr	r3, [pc, #68]	; (80098d8 <xTimerGenericCommand+0x98>)
 8009894:	6818      	ldr	r0, [r3, #0]
 8009896:	f107 0110 	add.w	r1, r7, #16
 800989a:	2300      	movs	r3, #0
 800989c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800989e:	f7fe fbb7 	bl	8008010 <xQueueGenericSend>
 80098a2:	6278      	str	r0, [r7, #36]	; 0x24
 80098a4:	e012      	b.n	80098cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80098a6:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <xTimerGenericCommand+0x98>)
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	f107 0110 	add.w	r1, r7, #16
 80098ae:	2300      	movs	r3, #0
 80098b0:	2200      	movs	r2, #0
 80098b2:	f7fe fbad 	bl	8008010 <xQueueGenericSend>
 80098b6:	6278      	str	r0, [r7, #36]	; 0x24
 80098b8:	e008      	b.n	80098cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80098ba:	4b07      	ldr	r3, [pc, #28]	; (80098d8 <xTimerGenericCommand+0x98>)
 80098bc:	6818      	ldr	r0, [r3, #0]
 80098be:	f107 0110 	add.w	r1, r7, #16
 80098c2:	2300      	movs	r3, #0
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	f7fe fca1 	bl	800820c <xQueueGenericSendFromISR>
 80098ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3728      	adds	r7, #40	; 0x28
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20000dc0 	.word	0x20000dc0

080098dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af02      	add	r7, sp, #8
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098e6:	4b22      	ldr	r3, [pc, #136]	; (8009970 <prvProcessExpiredTimer+0x94>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fe fa27 	bl	8007d48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009900:	f003 0304 	and.w	r3, r3, #4
 8009904:	2b00      	cmp	r3, #0
 8009906:	d022      	beq.n	800994e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	699a      	ldr	r2, [r3, #24]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	18d1      	adds	r1, r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	6978      	ldr	r0, [r7, #20]
 8009916:	f000 f8d1 	bl	8009abc <prvInsertTimerInActiveList>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d01f      	beq.n	8009960 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009920:	2300      	movs	r3, #0
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	2300      	movs	r3, #0
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	2100      	movs	r1, #0
 800992a:	6978      	ldr	r0, [r7, #20]
 800992c:	f7ff ff88 	bl	8009840 <xTimerGenericCommand>
 8009930:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d113      	bne.n	8009960 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	60fb      	str	r3, [r7, #12]
}
 800994a:	bf00      	nop
 800994c:	e7fe      	b.n	800994c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009954:	f023 0301 	bic.w	r3, r3, #1
 8009958:	b2da      	uxtb	r2, r3
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	6978      	ldr	r0, [r7, #20]
 8009966:	4798      	blx	r3
}
 8009968:	bf00      	nop
 800996a:	3718      	adds	r7, #24
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	20000db8 	.word	0x20000db8

08009974 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800997c:	f107 0308 	add.w	r3, r7, #8
 8009980:	4618      	mov	r0, r3
 8009982:	f000 f857 	bl	8009a34 <prvGetNextExpireTime>
 8009986:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	4619      	mov	r1, r3
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 f803 	bl	8009998 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009992:	f000 f8d5 	bl	8009b40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009996:	e7f1      	b.n	800997c <prvTimerTask+0x8>

08009998 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80099a2:	f7ff f9f1 	bl	8008d88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099a6:	f107 0308 	add.w	r3, r7, #8
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 f866 	bl	8009a7c <prvSampleTimeNow>
 80099b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d130      	bne.n	8009a1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10a      	bne.n	80099d4 <prvProcessTimerOrBlockTask+0x3c>
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d806      	bhi.n	80099d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80099c6:	f7ff f9ed 	bl	8008da4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80099ca:	68f9      	ldr	r1, [r7, #12]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7ff ff85 	bl	80098dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80099d2:	e024      	b.n	8009a1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d008      	beq.n	80099ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80099da:	4b13      	ldr	r3, [pc, #76]	; (8009a28 <prvProcessTimerOrBlockTask+0x90>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <prvProcessTimerOrBlockTask+0x50>
 80099e4:	2301      	movs	r3, #1
 80099e6:	e000      	b.n	80099ea <prvProcessTimerOrBlockTask+0x52>
 80099e8:	2300      	movs	r3, #0
 80099ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80099ec:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <prvProcessTimerOrBlockTask+0x94>)
 80099ee:	6818      	ldr	r0, [r3, #0]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	4619      	mov	r1, r3
 80099fa:	f7fe febd 	bl	8008778 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80099fe:	f7ff f9d1 	bl	8008da4 <xTaskResumeAll>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10a      	bne.n	8009a1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a08:	4b09      	ldr	r3, [pc, #36]	; (8009a30 <prvProcessTimerOrBlockTask+0x98>)
 8009a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a0e:	601a      	str	r2, [r3, #0]
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	f3bf 8f6f 	isb	sy
}
 8009a18:	e001      	b.n	8009a1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a1a:	f7ff f9c3 	bl	8008da4 <xTaskResumeAll>
}
 8009a1e:	bf00      	nop
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20000dbc 	.word	0x20000dbc
 8009a2c:	20000dc0 	.word	0x20000dc0
 8009a30:	e000ed04 	.word	0xe000ed04

08009a34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a3c:	4b0e      	ldr	r3, [pc, #56]	; (8009a78 <prvGetNextExpireTime+0x44>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <prvGetNextExpireTime+0x16>
 8009a46:	2201      	movs	r2, #1
 8009a48:	e000      	b.n	8009a4c <prvGetNextExpireTime+0x18>
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d105      	bne.n	8009a64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a58:	4b07      	ldr	r3, [pc, #28]	; (8009a78 <prvGetNextExpireTime+0x44>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	60fb      	str	r3, [r7, #12]
 8009a62:	e001      	b.n	8009a68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a64:	2300      	movs	r3, #0
 8009a66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a68:	68fb      	ldr	r3, [r7, #12]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	20000db8 	.word	0x20000db8

08009a7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a84:	f7ff fa2a 	bl	8008edc <xTaskGetTickCount>
 8009a88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a8a:	4b0b      	ldr	r3, [pc, #44]	; (8009ab8 <prvSampleTimeNow+0x3c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d205      	bcs.n	8009aa0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a94:	f000 f936 	bl	8009d04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	e002      	b.n	8009aa6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009aa6:	4a04      	ldr	r2, [pc, #16]	; (8009ab8 <prvSampleTimeNow+0x3c>)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009aac:	68fb      	ldr	r3, [r7, #12]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20000dc8 	.word	0x20000dc8

08009abc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
 8009ac8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009aca:	2300      	movs	r3, #0
 8009acc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d812      	bhi.n	8009b08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	1ad2      	subs	r2, r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d302      	bcc.n	8009af6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009af0:	2301      	movs	r3, #1
 8009af2:	617b      	str	r3, [r7, #20]
 8009af4:	e01b      	b.n	8009b2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009af6:	4b10      	ldr	r3, [pc, #64]	; (8009b38 <prvInsertTimerInActiveList+0x7c>)
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3304      	adds	r3, #4
 8009afe:	4619      	mov	r1, r3
 8009b00:	4610      	mov	r0, r2
 8009b02:	f7fe f8e8 	bl	8007cd6 <vListInsert>
 8009b06:	e012      	b.n	8009b2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d206      	bcs.n	8009b1e <prvInsertTimerInActiveList+0x62>
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d302      	bcc.n	8009b1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	e007      	b.n	8009b2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b1e:	4b07      	ldr	r3, [pc, #28]	; (8009b3c <prvInsertTimerInActiveList+0x80>)
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	3304      	adds	r3, #4
 8009b26:	4619      	mov	r1, r3
 8009b28:	4610      	mov	r0, r2
 8009b2a:	f7fe f8d4 	bl	8007cd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b2e:	697b      	ldr	r3, [r7, #20]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3718      	adds	r7, #24
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	20000dbc 	.word	0x20000dbc
 8009b3c:	20000db8 	.word	0x20000db8

08009b40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08e      	sub	sp, #56	; 0x38
 8009b44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b46:	e0ca      	b.n	8009cde <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	da18      	bge.n	8009b80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b4e:	1d3b      	adds	r3, r7, #4
 8009b50:	3304      	adds	r3, #4
 8009b52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d10a      	bne.n	8009b70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	61fb      	str	r3, [r7, #28]
}
 8009b6c:	bf00      	nop
 8009b6e:	e7fe      	b.n	8009b6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b76:	6850      	ldr	r0, [r2, #4]
 8009b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b7a:	6892      	ldr	r2, [r2, #8]
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f2c0 80aa 	blt.w	8009cdc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8e:	695b      	ldr	r3, [r3, #20]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d004      	beq.n	8009b9e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b96:	3304      	adds	r3, #4
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe f8d5 	bl	8007d48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b9e:	463b      	mov	r3, r7
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7ff ff6b 	bl	8009a7c <prvSampleTimeNow>
 8009ba6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b09      	cmp	r3, #9
 8009bac:	f200 8097 	bhi.w	8009cde <prvProcessReceivedCommands+0x19e>
 8009bb0:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <prvProcessReceivedCommands+0x78>)
 8009bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb6:	bf00      	nop
 8009bb8:	08009be1 	.word	0x08009be1
 8009bbc:	08009be1 	.word	0x08009be1
 8009bc0:	08009be1 	.word	0x08009be1
 8009bc4:	08009c55 	.word	0x08009c55
 8009bc8:	08009c69 	.word	0x08009c69
 8009bcc:	08009cb3 	.word	0x08009cb3
 8009bd0:	08009be1 	.word	0x08009be1
 8009bd4:	08009be1 	.word	0x08009be1
 8009bd8:	08009c55 	.word	0x08009c55
 8009bdc:	08009c69 	.word	0x08009c69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009be6:	f043 0301 	orr.w	r3, r3, #1
 8009bea:	b2da      	uxtb	r2, r3
 8009bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	18d1      	adds	r1, r2, r3
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c00:	f7ff ff5c 	bl	8009abc <prvInsertTimerInActiveList>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d069      	beq.n	8009cde <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c18:	f003 0304 	and.w	r3, r3, #4
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d05e      	beq.n	8009cde <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	441a      	add	r2, r3
 8009c28:	2300      	movs	r3, #0
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	2100      	movs	r1, #0
 8009c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c32:	f7ff fe05 	bl	8009840 <xTimerGenericCommand>
 8009c36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d14f      	bne.n	8009cde <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	61bb      	str	r3, [r7, #24]
}
 8009c50:	bf00      	nop
 8009c52:	e7fe      	b.n	8009c52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c5a:	f023 0301 	bic.w	r3, r3, #1
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8009c66:	e03a      	b.n	8009cde <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c6e:	f043 0301 	orr.w	r3, r3, #1
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10a      	bne.n	8009c9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	617b      	str	r3, [r7, #20]
}
 8009c9a:	bf00      	nop
 8009c9c:	e7fe      	b.n	8009c9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca0:	699a      	ldr	r2, [r3, #24]
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	18d1      	adds	r1, r2, r3
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cac:	f7ff ff06 	bl	8009abc <prvInsertTimerInActiveList>
					break;
 8009cb0:	e015      	b.n	8009cde <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009cb8:	f003 0302 	and.w	r3, r3, #2
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d103      	bne.n	8009cc8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc2:	f000 fbdd 	bl	800a480 <vPortFree>
 8009cc6:	e00a      	b.n	8009cde <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009cce:	f023 0301 	bic.w	r3, r3, #1
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009cda:	e000      	b.n	8009cde <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009cdc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cde:	4b08      	ldr	r3, [pc, #32]	; (8009d00 <prvProcessReceivedCommands+0x1c0>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	1d39      	adds	r1, r7, #4
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fe fb2c 	bl	8008344 <xQueueReceive>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f47f af2a 	bne.w	8009b48 <prvProcessReceivedCommands+0x8>
	}
}
 8009cf4:	bf00      	nop
 8009cf6:	bf00      	nop
 8009cf8:	3730      	adds	r7, #48	; 0x30
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000dc0 	.word	0x20000dc0

08009d04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b088      	sub	sp, #32
 8009d08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d0a:	e048      	b.n	8009d9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d0c:	4b2d      	ldr	r3, [pc, #180]	; (8009dc4 <prvSwitchTimerLists+0xc0>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d16:	4b2b      	ldr	r3, [pc, #172]	; (8009dc4 <prvSwitchTimerLists+0xc0>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	3304      	adds	r3, #4
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fe f80f 	bl	8007d48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d38:	f003 0304 	and.w	r3, r3, #4
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d02e      	beq.n	8009d9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	4413      	add	r3, r2
 8009d48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d90e      	bls.n	8009d70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d5e:	4b19      	ldr	r3, [pc, #100]	; (8009dc4 <prvSwitchTimerLists+0xc0>)
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	3304      	adds	r3, #4
 8009d66:	4619      	mov	r1, r3
 8009d68:	4610      	mov	r0, r2
 8009d6a:	f7fd ffb4 	bl	8007cd6 <vListInsert>
 8009d6e:	e016      	b.n	8009d9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d70:	2300      	movs	r3, #0
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	2300      	movs	r3, #0
 8009d76:	693a      	ldr	r2, [r7, #16]
 8009d78:	2100      	movs	r1, #0
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f7ff fd60 	bl	8009840 <xTimerGenericCommand>
 8009d80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10a      	bne.n	8009d9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	603b      	str	r3, [r7, #0]
}
 8009d9a:	bf00      	nop
 8009d9c:	e7fe      	b.n	8009d9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d9e:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <prvSwitchTimerLists+0xc0>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1b1      	bne.n	8009d0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009da8:	4b06      	ldr	r3, [pc, #24]	; (8009dc4 <prvSwitchTimerLists+0xc0>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009dae:	4b06      	ldr	r3, [pc, #24]	; (8009dc8 <prvSwitchTimerLists+0xc4>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a04      	ldr	r2, [pc, #16]	; (8009dc4 <prvSwitchTimerLists+0xc0>)
 8009db4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009db6:	4a04      	ldr	r2, [pc, #16]	; (8009dc8 <prvSwitchTimerLists+0xc4>)
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	6013      	str	r3, [r2, #0]
}
 8009dbc:	bf00      	nop
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20000db8 	.word	0x20000db8
 8009dc8:	20000dbc 	.word	0x20000dbc

08009dcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009dd2:	f000 f967 	bl	800a0a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009dd6:	4b15      	ldr	r3, [pc, #84]	; (8009e2c <prvCheckForValidListAndQueue+0x60>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d120      	bne.n	8009e20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009dde:	4814      	ldr	r0, [pc, #80]	; (8009e30 <prvCheckForValidListAndQueue+0x64>)
 8009de0:	f7fd ff28 	bl	8007c34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009de4:	4813      	ldr	r0, [pc, #76]	; (8009e34 <prvCheckForValidListAndQueue+0x68>)
 8009de6:	f7fd ff25 	bl	8007c34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009dea:	4b13      	ldr	r3, [pc, #76]	; (8009e38 <prvCheckForValidListAndQueue+0x6c>)
 8009dec:	4a10      	ldr	r2, [pc, #64]	; (8009e30 <prvCheckForValidListAndQueue+0x64>)
 8009dee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009df0:	4b12      	ldr	r3, [pc, #72]	; (8009e3c <prvCheckForValidListAndQueue+0x70>)
 8009df2:	4a10      	ldr	r2, [pc, #64]	; (8009e34 <prvCheckForValidListAndQueue+0x68>)
 8009df4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009df6:	2300      	movs	r3, #0
 8009df8:	9300      	str	r3, [sp, #0]
 8009dfa:	4b11      	ldr	r3, [pc, #68]	; (8009e40 <prvCheckForValidListAndQueue+0x74>)
 8009dfc:	4a11      	ldr	r2, [pc, #68]	; (8009e44 <prvCheckForValidListAndQueue+0x78>)
 8009dfe:	2110      	movs	r1, #16
 8009e00:	200a      	movs	r0, #10
 8009e02:	f7fe f833 	bl	8007e6c <xQueueGenericCreateStatic>
 8009e06:	4603      	mov	r3, r0
 8009e08:	4a08      	ldr	r2, [pc, #32]	; (8009e2c <prvCheckForValidListAndQueue+0x60>)
 8009e0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e0c:	4b07      	ldr	r3, [pc, #28]	; (8009e2c <prvCheckForValidListAndQueue+0x60>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d005      	beq.n	8009e20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e14:	4b05      	ldr	r3, [pc, #20]	; (8009e2c <prvCheckForValidListAndQueue+0x60>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	490b      	ldr	r1, [pc, #44]	; (8009e48 <prvCheckForValidListAndQueue+0x7c>)
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fe fc82 	bl	8008724 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e20:	f000 f970 	bl	800a104 <vPortExitCritical>
}
 8009e24:	bf00      	nop
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20000dc0 	.word	0x20000dc0
 8009e30:	20000d90 	.word	0x20000d90
 8009e34:	20000da4 	.word	0x20000da4
 8009e38:	20000db8 	.word	0x20000db8
 8009e3c:	20000dbc 	.word	0x20000dbc
 8009e40:	20000e6c 	.word	0x20000e6c
 8009e44:	20000dcc 	.word	0x20000dcc
 8009e48:	0800f1a4 	.word	0x0800f1a4

08009e4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	3b04      	subs	r3, #4
 8009e5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3b04      	subs	r3, #4
 8009e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f023 0201 	bic.w	r2, r3, #1
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3b04      	subs	r3, #4
 8009e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e7c:	4a0c      	ldr	r2, [pc, #48]	; (8009eb0 <pxPortInitialiseStack+0x64>)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	3b14      	subs	r3, #20
 8009e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3b04      	subs	r3, #4
 8009e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f06f 0202 	mvn.w	r2, #2
 8009e9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	3b20      	subs	r3, #32
 8009ea0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	08009eb5 	.word	0x08009eb5

08009eb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ebe:	4b12      	ldr	r3, [pc, #72]	; (8009f08 <prvTaskExitError+0x54>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec6:	d00a      	beq.n	8009ede <prvTaskExitError+0x2a>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	60fb      	str	r3, [r7, #12]
}
 8009eda:	bf00      	nop
 8009edc:	e7fe      	b.n	8009edc <prvTaskExitError+0x28>
	__asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	60bb      	str	r3, [r7, #8]
}
 8009ef0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ef2:	bf00      	nop
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d0fc      	beq.n	8009ef4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009efa:	bf00      	nop
 8009efc:	bf00      	nop
 8009efe:	3714      	adds	r7, #20
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	20000090 	.word	0x20000090
 8009f0c:	00000000 	.word	0x00000000

08009f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f10:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <pxCurrentTCBConst2>)
 8009f12:	6819      	ldr	r1, [r3, #0]
 8009f14:	6808      	ldr	r0, [r1, #0]
 8009f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1a:	f380 8809 	msr	PSP, r0
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f04f 0000 	mov.w	r0, #0
 8009f26:	f380 8811 	msr	BASEPRI, r0
 8009f2a:	4770      	bx	lr
 8009f2c:	f3af 8000 	nop.w

08009f30 <pxCurrentTCBConst2>:
 8009f30:	20000c64 	.word	0x20000c64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop

08009f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f38:	4808      	ldr	r0, [pc, #32]	; (8009f5c <prvPortStartFirstTask+0x24>)
 8009f3a:	6800      	ldr	r0, [r0, #0]
 8009f3c:	6800      	ldr	r0, [r0, #0]
 8009f3e:	f380 8808 	msr	MSP, r0
 8009f42:	f04f 0000 	mov.w	r0, #0
 8009f46:	f380 8814 	msr	CONTROL, r0
 8009f4a:	b662      	cpsie	i
 8009f4c:	b661      	cpsie	f
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	df00      	svc	0
 8009f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f5a:	bf00      	nop
 8009f5c:	e000ed08 	.word	0xe000ed08

08009f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f66:	4b46      	ldr	r3, [pc, #280]	; (800a080 <xPortStartScheduler+0x120>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a46      	ldr	r2, [pc, #280]	; (800a084 <xPortStartScheduler+0x124>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d10a      	bne.n	8009f86 <xPortStartScheduler+0x26>
	__asm volatile
 8009f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	613b      	str	r3, [r7, #16]
}
 8009f82:	bf00      	nop
 8009f84:	e7fe      	b.n	8009f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f86:	4b3e      	ldr	r3, [pc, #248]	; (800a080 <xPortStartScheduler+0x120>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a3f      	ldr	r2, [pc, #252]	; (800a088 <xPortStartScheduler+0x128>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d10a      	bne.n	8009fa6 <xPortStartScheduler+0x46>
	__asm volatile
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	60fb      	str	r3, [r7, #12]
}
 8009fa2:	bf00      	nop
 8009fa4:	e7fe      	b.n	8009fa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009fa6:	4b39      	ldr	r3, [pc, #228]	; (800a08c <xPortStartScheduler+0x12c>)
 8009fa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	22ff      	movs	r2, #255	; 0xff
 8009fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009fc8:	b2da      	uxtb	r2, r3
 8009fca:	4b31      	ldr	r3, [pc, #196]	; (800a090 <xPortStartScheduler+0x130>)
 8009fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fce:	4b31      	ldr	r3, [pc, #196]	; (800a094 <xPortStartScheduler+0x134>)
 8009fd0:	2207      	movs	r2, #7
 8009fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fd4:	e009      	b.n	8009fea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009fd6:	4b2f      	ldr	r3, [pc, #188]	; (800a094 <xPortStartScheduler+0x134>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	4a2d      	ldr	r2, [pc, #180]	; (800a094 <xPortStartScheduler+0x134>)
 8009fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009fe0:	78fb      	ldrb	r3, [r7, #3]
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	005b      	lsls	r3, r3, #1
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fea:	78fb      	ldrb	r3, [r7, #3]
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ff2:	2b80      	cmp	r3, #128	; 0x80
 8009ff4:	d0ef      	beq.n	8009fd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ff6:	4b27      	ldr	r3, [pc, #156]	; (800a094 <xPortStartScheduler+0x134>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f1c3 0307 	rsb	r3, r3, #7
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d00a      	beq.n	800a018 <xPortStartScheduler+0xb8>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	60bb      	str	r3, [r7, #8]
}
 800a014:	bf00      	nop
 800a016:	e7fe      	b.n	800a016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a018:	4b1e      	ldr	r3, [pc, #120]	; (800a094 <xPortStartScheduler+0x134>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	021b      	lsls	r3, r3, #8
 800a01e:	4a1d      	ldr	r2, [pc, #116]	; (800a094 <xPortStartScheduler+0x134>)
 800a020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a022:	4b1c      	ldr	r3, [pc, #112]	; (800a094 <xPortStartScheduler+0x134>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a02a:	4a1a      	ldr	r2, [pc, #104]	; (800a094 <xPortStartScheduler+0x134>)
 800a02c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	b2da      	uxtb	r2, r3
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a036:	4b18      	ldr	r3, [pc, #96]	; (800a098 <xPortStartScheduler+0x138>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a17      	ldr	r2, [pc, #92]	; (800a098 <xPortStartScheduler+0x138>)
 800a03c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a042:	4b15      	ldr	r3, [pc, #84]	; (800a098 <xPortStartScheduler+0x138>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a14      	ldr	r2, [pc, #80]	; (800a098 <xPortStartScheduler+0x138>)
 800a048:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 800a04c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a04e:	f000 f8dd 	bl	800a20c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a052:	4b12      	ldr	r3, [pc, #72]	; (800a09c <xPortStartScheduler+0x13c>)
 800a054:	2200      	movs	r2, #0
 800a056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a058:	f000 f8fc 	bl	800a254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a05c:	4b10      	ldr	r3, [pc, #64]	; (800a0a0 <xPortStartScheduler+0x140>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a0f      	ldr	r2, [pc, #60]	; (800a0a0 <xPortStartScheduler+0x140>)
 800a062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a068:	f7ff ff66 	bl	8009f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a06c:	f7fe fffe 	bl	800906c <vTaskSwitchContext>
	prvTaskExitError();
 800a070:	f7ff ff20 	bl	8009eb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	e000ed00 	.word	0xe000ed00
 800a084:	410fc271 	.word	0x410fc271
 800a088:	410fc270 	.word	0x410fc270
 800a08c:	e000e400 	.word	0xe000e400
 800a090:	20000eb4 	.word	0x20000eb4
 800a094:	20000eb8 	.word	0x20000eb8
 800a098:	e000ed20 	.word	0xe000ed20
 800a09c:	20000090 	.word	0x20000090
 800a0a0:	e000ef34 	.word	0xe000ef34

0800a0a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	607b      	str	r3, [r7, #4]
}
 800a0bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0be:	4b0f      	ldr	r3, [pc, #60]	; (800a0fc <vPortEnterCritical+0x58>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	4a0d      	ldr	r2, [pc, #52]	; (800a0fc <vPortEnterCritical+0x58>)
 800a0c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0c8:	4b0c      	ldr	r3, [pc, #48]	; (800a0fc <vPortEnterCritical+0x58>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d10f      	bne.n	800a0f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0d0:	4b0b      	ldr	r3, [pc, #44]	; (800a100 <vPortEnterCritical+0x5c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	603b      	str	r3, [r7, #0]
}
 800a0ec:	bf00      	nop
 800a0ee:	e7fe      	b.n	800a0ee <vPortEnterCritical+0x4a>
	}
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	20000090 	.word	0x20000090
 800a100:	e000ed04 	.word	0xe000ed04

0800a104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a10a:	4b12      	ldr	r3, [pc, #72]	; (800a154 <vPortExitCritical+0x50>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10a      	bne.n	800a128 <vPortExitCritical+0x24>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	607b      	str	r3, [r7, #4]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a128:	4b0a      	ldr	r3, [pc, #40]	; (800a154 <vPortExitCritical+0x50>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3b01      	subs	r3, #1
 800a12e:	4a09      	ldr	r2, [pc, #36]	; (800a154 <vPortExitCritical+0x50>)
 800a130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a132:	4b08      	ldr	r3, [pc, #32]	; (800a154 <vPortExitCritical+0x50>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d105      	bne.n	800a146 <vPortExitCritical+0x42>
 800a13a:	2300      	movs	r3, #0
 800a13c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	f383 8811 	msr	BASEPRI, r3
}
 800a144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20000090 	.word	0x20000090
	...

0800a160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a160:	f3ef 8009 	mrs	r0, PSP
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	4b15      	ldr	r3, [pc, #84]	; (800a1c0 <pxCurrentTCBConst>)
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	f01e 0f10 	tst.w	lr, #16
 800a170:	bf08      	it	eq
 800a172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17a:	6010      	str	r0, [r2, #0]
 800a17c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a180:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a184:	f380 8811 	msr	BASEPRI, r0
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f7fe ff6c 	bl	800906c <vTaskSwitchContext>
 800a194:	f04f 0000 	mov.w	r0, #0
 800a198:	f380 8811 	msr	BASEPRI, r0
 800a19c:	bc09      	pop	{r0, r3}
 800a19e:	6819      	ldr	r1, [r3, #0]
 800a1a0:	6808      	ldr	r0, [r1, #0]
 800a1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a6:	f01e 0f10 	tst.w	lr, #16
 800a1aa:	bf08      	it	eq
 800a1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a1b0:	f380 8809 	msr	PSP, r0
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	f3af 8000 	nop.w

0800a1c0 <pxCurrentTCBConst>:
 800a1c0:	20000c64 	.word	0x20000c64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop

0800a1c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	607b      	str	r3, [r7, #4]
}
 800a1e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1e2:	f7fe fe8b 	bl	8008efc <xTaskIncrementTick>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1ec:	4b06      	ldr	r3, [pc, #24]	; (800a208 <SysTick_Handler+0x40>)
 800a1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	f383 8811 	msr	BASEPRI, r3
}
 800a1fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	e000ed04 	.word	0xe000ed04

0800a20c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a210:	4b0b      	ldr	r3, [pc, #44]	; (800a240 <vPortSetupTimerInterrupt+0x34>)
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a216:	4b0b      	ldr	r3, [pc, #44]	; (800a244 <vPortSetupTimerInterrupt+0x38>)
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a21c:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <vPortSetupTimerInterrupt+0x3c>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a0a      	ldr	r2, [pc, #40]	; (800a24c <vPortSetupTimerInterrupt+0x40>)
 800a222:	fba2 2303 	umull	r2, r3, r2, r3
 800a226:	099b      	lsrs	r3, r3, #6
 800a228:	4a09      	ldr	r2, [pc, #36]	; (800a250 <vPortSetupTimerInterrupt+0x44>)
 800a22a:	3b01      	subs	r3, #1
 800a22c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a22e:	4b04      	ldr	r3, [pc, #16]	; (800a240 <vPortSetupTimerInterrupt+0x34>)
 800a230:	2207      	movs	r2, #7
 800a232:	601a      	str	r2, [r3, #0]
}
 800a234:	bf00      	nop
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	e000e010 	.word	0xe000e010
 800a244:	e000e018 	.word	0xe000e018
 800a248:	20000000 	.word	0x20000000
 800a24c:	10624dd3 	.word	0x10624dd3
 800a250:	e000e014 	.word	0xe000e014

0800a254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a264 <vPortEnableVFP+0x10>
 800a258:	6801      	ldr	r1, [r0, #0]
 800a25a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a25e:	6001      	str	r1, [r0, #0]
 800a260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a262:	bf00      	nop
 800a264:	e000ed88 	.word	0xe000ed88

0800a268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a26e:	f3ef 8305 	mrs	r3, IPSR
 800a272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2b0f      	cmp	r3, #15
 800a278:	d914      	bls.n	800a2a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a27a:	4a17      	ldr	r2, [pc, #92]	; (800a2d8 <vPortValidateInterruptPriority+0x70>)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	4413      	add	r3, r2
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a284:	4b15      	ldr	r3, [pc, #84]	; (800a2dc <vPortValidateInterruptPriority+0x74>)
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	7afa      	ldrb	r2, [r7, #11]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d20a      	bcs.n	800a2a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	607b      	str	r3, [r7, #4]
}
 800a2a0:	bf00      	nop
 800a2a2:	e7fe      	b.n	800a2a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a2a4:	4b0e      	ldr	r3, [pc, #56]	; (800a2e0 <vPortValidateInterruptPriority+0x78>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a2ac:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <vPortValidateInterruptPriority+0x7c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d90a      	bls.n	800a2ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	603b      	str	r3, [r7, #0]
}
 800a2c6:	bf00      	nop
 800a2c8:	e7fe      	b.n	800a2c8 <vPortValidateInterruptPriority+0x60>
	}
 800a2ca:	bf00      	nop
 800a2cc:	3714      	adds	r7, #20
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	e000e3f0 	.word	0xe000e3f0
 800a2dc:	20000eb4 	.word	0x20000eb4
 800a2e0:	e000ed0c 	.word	0xe000ed0c
 800a2e4:	20000eb8 	.word	0x20000eb8

0800a2e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b08a      	sub	sp, #40	; 0x28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2f4:	f7fe fd48 	bl	8008d88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2f8:	4b5b      	ldr	r3, [pc, #364]	; (800a468 <pvPortMalloc+0x180>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a300:	f000 f920 	bl	800a544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a304:	4b59      	ldr	r3, [pc, #356]	; (800a46c <pvPortMalloc+0x184>)
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4013      	ands	r3, r2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f040 8093 	bne.w	800a438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d01d      	beq.n	800a354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a318:	2208      	movs	r2, #8
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4413      	add	r3, r2
 800a31e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f003 0307 	and.w	r3, r3, #7
 800a326:	2b00      	cmp	r3, #0
 800a328:	d014      	beq.n	800a354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f023 0307 	bic.w	r3, r3, #7
 800a330:	3308      	adds	r3, #8
 800a332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00a      	beq.n	800a354 <pvPortMalloc+0x6c>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	617b      	str	r3, [r7, #20]
}
 800a350:	bf00      	nop
 800a352:	e7fe      	b.n	800a352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d06e      	beq.n	800a438 <pvPortMalloc+0x150>
 800a35a:	4b45      	ldr	r3, [pc, #276]	; (800a470 <pvPortMalloc+0x188>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	429a      	cmp	r2, r3
 800a362:	d869      	bhi.n	800a438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a364:	4b43      	ldr	r3, [pc, #268]	; (800a474 <pvPortMalloc+0x18c>)
 800a366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a368:	4b42      	ldr	r3, [pc, #264]	; (800a474 <pvPortMalloc+0x18c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a36e:	e004      	b.n	800a37a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	429a      	cmp	r2, r3
 800a382:	d903      	bls.n	800a38c <pvPortMalloc+0xa4>
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1f1      	bne.n	800a370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a38c:	4b36      	ldr	r3, [pc, #216]	; (800a468 <pvPortMalloc+0x180>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a392:	429a      	cmp	r2, r3
 800a394:	d050      	beq.n	800a438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2208      	movs	r2, #8
 800a39c:	4413      	add	r3, r2
 800a39e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	6a3b      	ldr	r3, [r7, #32]
 800a3a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	1ad2      	subs	r2, r2, r3
 800a3b0:	2308      	movs	r3, #8
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d91f      	bls.n	800a3f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4413      	add	r3, r2
 800a3be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	f003 0307 	and.w	r3, r3, #7
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00a      	beq.n	800a3e0 <pvPortMalloc+0xf8>
	__asm volatile
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	613b      	str	r3, [r7, #16]
}
 800a3dc:	bf00      	nop
 800a3de:	e7fe      	b.n	800a3de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	1ad2      	subs	r2, r2, r3
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3f2:	69b8      	ldr	r0, [r7, #24]
 800a3f4:	f000 f908 	bl	800a608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3f8:	4b1d      	ldr	r3, [pc, #116]	; (800a470 <pvPortMalloc+0x188>)
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	4a1b      	ldr	r2, [pc, #108]	; (800a470 <pvPortMalloc+0x188>)
 800a404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a406:	4b1a      	ldr	r3, [pc, #104]	; (800a470 <pvPortMalloc+0x188>)
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	4b1b      	ldr	r3, [pc, #108]	; (800a478 <pvPortMalloc+0x190>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d203      	bcs.n	800a41a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a412:	4b17      	ldr	r3, [pc, #92]	; (800a470 <pvPortMalloc+0x188>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a18      	ldr	r2, [pc, #96]	; (800a478 <pvPortMalloc+0x190>)
 800a418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	4b13      	ldr	r3, [pc, #76]	; (800a46c <pvPortMalloc+0x184>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	431a      	orrs	r2, r3
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	2200      	movs	r2, #0
 800a42c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a42e:	4b13      	ldr	r3, [pc, #76]	; (800a47c <pvPortMalloc+0x194>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3301      	adds	r3, #1
 800a434:	4a11      	ldr	r2, [pc, #68]	; (800a47c <pvPortMalloc+0x194>)
 800a436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a438:	f7fe fcb4 	bl	8008da4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	f003 0307 	and.w	r3, r3, #7
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00a      	beq.n	800a45c <pvPortMalloc+0x174>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	60fb      	str	r3, [r7, #12]
}
 800a458:	bf00      	nop
 800a45a:	e7fe      	b.n	800a45a <pvPortMalloc+0x172>
	return pvReturn;
 800a45c:	69fb      	ldr	r3, [r7, #28]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3728      	adds	r7, #40	; 0x28
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	200083f4 	.word	0x200083f4
 800a46c:	20008408 	.word	0x20008408
 800a470:	200083f8 	.word	0x200083f8
 800a474:	200083ec 	.word	0x200083ec
 800a478:	200083fc 	.word	0x200083fc
 800a47c:	20008400 	.word	0x20008400

0800a480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d04d      	beq.n	800a52e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a492:	2308      	movs	r3, #8
 800a494:	425b      	negs	r3, r3
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	4413      	add	r3, r2
 800a49a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	685a      	ldr	r2, [r3, #4]
 800a4a4:	4b24      	ldr	r3, [pc, #144]	; (800a538 <vPortFree+0xb8>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10a      	bne.n	800a4c4 <vPortFree+0x44>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	60fb      	str	r3, [r7, #12]
}
 800a4c0:	bf00      	nop
 800a4c2:	e7fe      	b.n	800a4c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00a      	beq.n	800a4e2 <vPortFree+0x62>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	60bb      	str	r3, [r7, #8]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	4b14      	ldr	r3, [pc, #80]	; (800a538 <vPortFree+0xb8>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d01e      	beq.n	800a52e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d11a      	bne.n	800a52e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	4b0e      	ldr	r3, [pc, #56]	; (800a538 <vPortFree+0xb8>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	43db      	mvns	r3, r3
 800a502:	401a      	ands	r2, r3
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a508:	f7fe fc3e 	bl	8008d88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	4b0a      	ldr	r3, [pc, #40]	; (800a53c <vPortFree+0xbc>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4413      	add	r3, r2
 800a516:	4a09      	ldr	r2, [pc, #36]	; (800a53c <vPortFree+0xbc>)
 800a518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a51a:	6938      	ldr	r0, [r7, #16]
 800a51c:	f000 f874 	bl	800a608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a520:	4b07      	ldr	r3, [pc, #28]	; (800a540 <vPortFree+0xc0>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3301      	adds	r3, #1
 800a526:	4a06      	ldr	r2, [pc, #24]	; (800a540 <vPortFree+0xc0>)
 800a528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a52a:	f7fe fc3b 	bl	8008da4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a52e:	bf00      	nop
 800a530:	3718      	adds	r7, #24
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	20008408 	.word	0x20008408
 800a53c:	200083f8 	.word	0x200083f8
 800a540:	20008404 	.word	0x20008404

0800a544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a54a:	f247 5330 	movw	r3, #30000	; 0x7530
 800a54e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a550:	4b27      	ldr	r3, [pc, #156]	; (800a5f0 <prvHeapInit+0xac>)
 800a552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f003 0307 	and.w	r3, r3, #7
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00c      	beq.n	800a578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3307      	adds	r3, #7
 800a562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f023 0307 	bic.w	r3, r3, #7
 800a56a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	4a1f      	ldr	r2, [pc, #124]	; (800a5f0 <prvHeapInit+0xac>)
 800a574:	4413      	add	r3, r2
 800a576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a57c:	4a1d      	ldr	r2, [pc, #116]	; (800a5f4 <prvHeapInit+0xb0>)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a582:	4b1c      	ldr	r3, [pc, #112]	; (800a5f4 <prvHeapInit+0xb0>)
 800a584:	2200      	movs	r2, #0
 800a586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	4413      	add	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a590:	2208      	movs	r2, #8
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	1a9b      	subs	r3, r3, r2
 800a596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f023 0307 	bic.w	r3, r3, #7
 800a59e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	4a15      	ldr	r2, [pc, #84]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5a6:	4b14      	ldr	r3, [pc, #80]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5ae:	4b12      	ldr	r3, [pc, #72]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	1ad2      	subs	r2, r2, r3
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5c4:	4b0c      	ldr	r3, [pc, #48]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	4a0a      	ldr	r2, [pc, #40]	; (800a5fc <prvHeapInit+0xb8>)
 800a5d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	4a09      	ldr	r2, [pc, #36]	; (800a600 <prvHeapInit+0xbc>)
 800a5da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5dc:	4b09      	ldr	r3, [pc, #36]	; (800a604 <prvHeapInit+0xc0>)
 800a5de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a5e2:	601a      	str	r2, [r3, #0]
}
 800a5e4:	bf00      	nop
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	20000ebc 	.word	0x20000ebc
 800a5f4:	200083ec 	.word	0x200083ec
 800a5f8:	200083f4 	.word	0x200083f4
 800a5fc:	200083fc 	.word	0x200083fc
 800a600:	200083f8 	.word	0x200083f8
 800a604:	20008408 	.word	0x20008408

0800a608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a610:	4b28      	ldr	r3, [pc, #160]	; (800a6b4 <prvInsertBlockIntoFreeList+0xac>)
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	e002      	b.n	800a61c <prvInsertBlockIntoFreeList+0x14>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	429a      	cmp	r2, r3
 800a624:	d8f7      	bhi.n	800a616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	4413      	add	r3, r2
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	429a      	cmp	r2, r3
 800a636:	d108      	bne.n	800a64a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	441a      	add	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	441a      	add	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d118      	bne.n	800a690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	4b15      	ldr	r3, [pc, #84]	; (800a6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	429a      	cmp	r2, r3
 800a668:	d00d      	beq.n	800a686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	441a      	add	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	e008      	b.n	800a698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a686:	4b0c      	ldr	r3, [pc, #48]	; (800a6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	e003      	b.n	800a698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d002      	beq.n	800a6a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6a6:	bf00      	nop
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	200083ec 	.word	0x200083ec
 800a6b8:	200083f4 	.word	0x200083f4

0800a6bc <__errno>:
 800a6bc:	4b01      	ldr	r3, [pc, #4]	; (800a6c4 <__errno+0x8>)
 800a6be:	6818      	ldr	r0, [r3, #0]
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	20000094 	.word	0x20000094

0800a6c8 <std>:
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	b510      	push	{r4, lr}
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	e9c0 3300 	strd	r3, r3, [r0]
 800a6d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6d6:	6083      	str	r3, [r0, #8]
 800a6d8:	8181      	strh	r1, [r0, #12]
 800a6da:	6643      	str	r3, [r0, #100]	; 0x64
 800a6dc:	81c2      	strh	r2, [r0, #14]
 800a6de:	6183      	str	r3, [r0, #24]
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	2208      	movs	r2, #8
 800a6e4:	305c      	adds	r0, #92	; 0x5c
 800a6e6:	f000 f91a 	bl	800a91e <memset>
 800a6ea:	4b05      	ldr	r3, [pc, #20]	; (800a700 <std+0x38>)
 800a6ec:	6263      	str	r3, [r4, #36]	; 0x24
 800a6ee:	4b05      	ldr	r3, [pc, #20]	; (800a704 <std+0x3c>)
 800a6f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6f2:	4b05      	ldr	r3, [pc, #20]	; (800a708 <std+0x40>)
 800a6f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6f6:	4b05      	ldr	r3, [pc, #20]	; (800a70c <std+0x44>)
 800a6f8:	6224      	str	r4, [r4, #32]
 800a6fa:	6323      	str	r3, [r4, #48]	; 0x30
 800a6fc:	bd10      	pop	{r4, pc}
 800a6fe:	bf00      	nop
 800a700:	0800b88d 	.word	0x0800b88d
 800a704:	0800b8af 	.word	0x0800b8af
 800a708:	0800b8e7 	.word	0x0800b8e7
 800a70c:	0800b90b 	.word	0x0800b90b

0800a710 <_cleanup_r>:
 800a710:	4901      	ldr	r1, [pc, #4]	; (800a718 <_cleanup_r+0x8>)
 800a712:	f000 b8af 	b.w	800a874 <_fwalk_reent>
 800a716:	bf00      	nop
 800a718:	0800d671 	.word	0x0800d671

0800a71c <__sfmoreglue>:
 800a71c:	b570      	push	{r4, r5, r6, lr}
 800a71e:	2268      	movs	r2, #104	; 0x68
 800a720:	1e4d      	subs	r5, r1, #1
 800a722:	4355      	muls	r5, r2
 800a724:	460e      	mov	r6, r1
 800a726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a72a:	f000 f921 	bl	800a970 <_malloc_r>
 800a72e:	4604      	mov	r4, r0
 800a730:	b140      	cbz	r0, 800a744 <__sfmoreglue+0x28>
 800a732:	2100      	movs	r1, #0
 800a734:	e9c0 1600 	strd	r1, r6, [r0]
 800a738:	300c      	adds	r0, #12
 800a73a:	60a0      	str	r0, [r4, #8]
 800a73c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a740:	f000 f8ed 	bl	800a91e <memset>
 800a744:	4620      	mov	r0, r4
 800a746:	bd70      	pop	{r4, r5, r6, pc}

0800a748 <__sfp_lock_acquire>:
 800a748:	4801      	ldr	r0, [pc, #4]	; (800a750 <__sfp_lock_acquire+0x8>)
 800a74a:	f000 b8d8 	b.w	800a8fe <__retarget_lock_acquire_recursive>
 800a74e:	bf00      	nop
 800a750:	2000840d 	.word	0x2000840d

0800a754 <__sfp_lock_release>:
 800a754:	4801      	ldr	r0, [pc, #4]	; (800a75c <__sfp_lock_release+0x8>)
 800a756:	f000 b8d3 	b.w	800a900 <__retarget_lock_release_recursive>
 800a75a:	bf00      	nop
 800a75c:	2000840d 	.word	0x2000840d

0800a760 <__sinit_lock_acquire>:
 800a760:	4801      	ldr	r0, [pc, #4]	; (800a768 <__sinit_lock_acquire+0x8>)
 800a762:	f000 b8cc 	b.w	800a8fe <__retarget_lock_acquire_recursive>
 800a766:	bf00      	nop
 800a768:	2000840e 	.word	0x2000840e

0800a76c <__sinit_lock_release>:
 800a76c:	4801      	ldr	r0, [pc, #4]	; (800a774 <__sinit_lock_release+0x8>)
 800a76e:	f000 b8c7 	b.w	800a900 <__retarget_lock_release_recursive>
 800a772:	bf00      	nop
 800a774:	2000840e 	.word	0x2000840e

0800a778 <__sinit>:
 800a778:	b510      	push	{r4, lr}
 800a77a:	4604      	mov	r4, r0
 800a77c:	f7ff fff0 	bl	800a760 <__sinit_lock_acquire>
 800a780:	69a3      	ldr	r3, [r4, #24]
 800a782:	b11b      	cbz	r3, 800a78c <__sinit+0x14>
 800a784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a788:	f7ff bff0 	b.w	800a76c <__sinit_lock_release>
 800a78c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a790:	6523      	str	r3, [r4, #80]	; 0x50
 800a792:	4b13      	ldr	r3, [pc, #76]	; (800a7e0 <__sinit+0x68>)
 800a794:	4a13      	ldr	r2, [pc, #76]	; (800a7e4 <__sinit+0x6c>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	62a2      	str	r2, [r4, #40]	; 0x28
 800a79a:	42a3      	cmp	r3, r4
 800a79c:	bf04      	itt	eq
 800a79e:	2301      	moveq	r3, #1
 800a7a0:	61a3      	streq	r3, [r4, #24]
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f000 f820 	bl	800a7e8 <__sfp>
 800a7a8:	6060      	str	r0, [r4, #4]
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f000 f81c 	bl	800a7e8 <__sfp>
 800a7b0:	60a0      	str	r0, [r4, #8]
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 f818 	bl	800a7e8 <__sfp>
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	60e0      	str	r0, [r4, #12]
 800a7bc:	2104      	movs	r1, #4
 800a7be:	6860      	ldr	r0, [r4, #4]
 800a7c0:	f7ff ff82 	bl	800a6c8 <std>
 800a7c4:	68a0      	ldr	r0, [r4, #8]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	2109      	movs	r1, #9
 800a7ca:	f7ff ff7d 	bl	800a6c8 <std>
 800a7ce:	68e0      	ldr	r0, [r4, #12]
 800a7d0:	2202      	movs	r2, #2
 800a7d2:	2112      	movs	r1, #18
 800a7d4:	f7ff ff78 	bl	800a6c8 <std>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	61a3      	str	r3, [r4, #24]
 800a7dc:	e7d2      	b.n	800a784 <__sinit+0xc>
 800a7de:	bf00      	nop
 800a7e0:	0800f254 	.word	0x0800f254
 800a7e4:	0800a711 	.word	0x0800a711

0800a7e8 <__sfp>:
 800a7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ea:	4607      	mov	r7, r0
 800a7ec:	f7ff ffac 	bl	800a748 <__sfp_lock_acquire>
 800a7f0:	4b1e      	ldr	r3, [pc, #120]	; (800a86c <__sfp+0x84>)
 800a7f2:	681e      	ldr	r6, [r3, #0]
 800a7f4:	69b3      	ldr	r3, [r6, #24]
 800a7f6:	b913      	cbnz	r3, 800a7fe <__sfp+0x16>
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7ff ffbd 	bl	800a778 <__sinit>
 800a7fe:	3648      	adds	r6, #72	; 0x48
 800a800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a804:	3b01      	subs	r3, #1
 800a806:	d503      	bpl.n	800a810 <__sfp+0x28>
 800a808:	6833      	ldr	r3, [r6, #0]
 800a80a:	b30b      	cbz	r3, 800a850 <__sfp+0x68>
 800a80c:	6836      	ldr	r6, [r6, #0]
 800a80e:	e7f7      	b.n	800a800 <__sfp+0x18>
 800a810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a814:	b9d5      	cbnz	r5, 800a84c <__sfp+0x64>
 800a816:	4b16      	ldr	r3, [pc, #88]	; (800a870 <__sfp+0x88>)
 800a818:	60e3      	str	r3, [r4, #12]
 800a81a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a81e:	6665      	str	r5, [r4, #100]	; 0x64
 800a820:	f000 f86c 	bl	800a8fc <__retarget_lock_init_recursive>
 800a824:	f7ff ff96 	bl	800a754 <__sfp_lock_release>
 800a828:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a82c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a830:	6025      	str	r5, [r4, #0]
 800a832:	61a5      	str	r5, [r4, #24]
 800a834:	2208      	movs	r2, #8
 800a836:	4629      	mov	r1, r5
 800a838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a83c:	f000 f86f 	bl	800a91e <memset>
 800a840:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a844:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a848:	4620      	mov	r0, r4
 800a84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a84c:	3468      	adds	r4, #104	; 0x68
 800a84e:	e7d9      	b.n	800a804 <__sfp+0x1c>
 800a850:	2104      	movs	r1, #4
 800a852:	4638      	mov	r0, r7
 800a854:	f7ff ff62 	bl	800a71c <__sfmoreglue>
 800a858:	4604      	mov	r4, r0
 800a85a:	6030      	str	r0, [r6, #0]
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d1d5      	bne.n	800a80c <__sfp+0x24>
 800a860:	f7ff ff78 	bl	800a754 <__sfp_lock_release>
 800a864:	230c      	movs	r3, #12
 800a866:	603b      	str	r3, [r7, #0]
 800a868:	e7ee      	b.n	800a848 <__sfp+0x60>
 800a86a:	bf00      	nop
 800a86c:	0800f254 	.word	0x0800f254
 800a870:	ffff0001 	.word	0xffff0001

0800a874 <_fwalk_reent>:
 800a874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a878:	4606      	mov	r6, r0
 800a87a:	4688      	mov	r8, r1
 800a87c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a880:	2700      	movs	r7, #0
 800a882:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a886:	f1b9 0901 	subs.w	r9, r9, #1
 800a88a:	d505      	bpl.n	800a898 <_fwalk_reent+0x24>
 800a88c:	6824      	ldr	r4, [r4, #0]
 800a88e:	2c00      	cmp	r4, #0
 800a890:	d1f7      	bne.n	800a882 <_fwalk_reent+0xe>
 800a892:	4638      	mov	r0, r7
 800a894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a898:	89ab      	ldrh	r3, [r5, #12]
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d907      	bls.n	800a8ae <_fwalk_reent+0x3a>
 800a89e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	d003      	beq.n	800a8ae <_fwalk_reent+0x3a>
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	47c0      	blx	r8
 800a8ac:	4307      	orrs	r7, r0
 800a8ae:	3568      	adds	r5, #104	; 0x68
 800a8b0:	e7e9      	b.n	800a886 <_fwalk_reent+0x12>
	...

0800a8b4 <__libc_init_array>:
 800a8b4:	b570      	push	{r4, r5, r6, lr}
 800a8b6:	4d0d      	ldr	r5, [pc, #52]	; (800a8ec <__libc_init_array+0x38>)
 800a8b8:	4c0d      	ldr	r4, [pc, #52]	; (800a8f0 <__libc_init_array+0x3c>)
 800a8ba:	1b64      	subs	r4, r4, r5
 800a8bc:	10a4      	asrs	r4, r4, #2
 800a8be:	2600      	movs	r6, #0
 800a8c0:	42a6      	cmp	r6, r4
 800a8c2:	d109      	bne.n	800a8d8 <__libc_init_array+0x24>
 800a8c4:	4d0b      	ldr	r5, [pc, #44]	; (800a8f4 <__libc_init_array+0x40>)
 800a8c6:	4c0c      	ldr	r4, [pc, #48]	; (800a8f8 <__libc_init_array+0x44>)
 800a8c8:	f004 fc06 	bl	800f0d8 <_init>
 800a8cc:	1b64      	subs	r4, r4, r5
 800a8ce:	10a4      	asrs	r4, r4, #2
 800a8d0:	2600      	movs	r6, #0
 800a8d2:	42a6      	cmp	r6, r4
 800a8d4:	d105      	bne.n	800a8e2 <__libc_init_array+0x2e>
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}
 800a8d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8dc:	4798      	blx	r3
 800a8de:	3601      	adds	r6, #1
 800a8e0:	e7ee      	b.n	800a8c0 <__libc_init_array+0xc>
 800a8e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8e6:	4798      	blx	r3
 800a8e8:	3601      	adds	r6, #1
 800a8ea:	e7f2      	b.n	800a8d2 <__libc_init_array+0x1e>
 800a8ec:	0800f6a8 	.word	0x0800f6a8
 800a8f0:	0800f6a8 	.word	0x0800f6a8
 800a8f4:	0800f6a8 	.word	0x0800f6a8
 800a8f8:	0800f6ac 	.word	0x0800f6ac

0800a8fc <__retarget_lock_init_recursive>:
 800a8fc:	4770      	bx	lr

0800a8fe <__retarget_lock_acquire_recursive>:
 800a8fe:	4770      	bx	lr

0800a900 <__retarget_lock_release_recursive>:
 800a900:	4770      	bx	lr

0800a902 <memcpy>:
 800a902:	440a      	add	r2, r1
 800a904:	4291      	cmp	r1, r2
 800a906:	f100 33ff 	add.w	r3, r0, #4294967295
 800a90a:	d100      	bne.n	800a90e <memcpy+0xc>
 800a90c:	4770      	bx	lr
 800a90e:	b510      	push	{r4, lr}
 800a910:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a914:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a918:	4291      	cmp	r1, r2
 800a91a:	d1f9      	bne.n	800a910 <memcpy+0xe>
 800a91c:	bd10      	pop	{r4, pc}

0800a91e <memset>:
 800a91e:	4402      	add	r2, r0
 800a920:	4603      	mov	r3, r0
 800a922:	4293      	cmp	r3, r2
 800a924:	d100      	bne.n	800a928 <memset+0xa>
 800a926:	4770      	bx	lr
 800a928:	f803 1b01 	strb.w	r1, [r3], #1
 800a92c:	e7f9      	b.n	800a922 <memset+0x4>
	...

0800a930 <sbrk_aligned>:
 800a930:	b570      	push	{r4, r5, r6, lr}
 800a932:	4e0e      	ldr	r6, [pc, #56]	; (800a96c <sbrk_aligned+0x3c>)
 800a934:	460c      	mov	r4, r1
 800a936:	6831      	ldr	r1, [r6, #0]
 800a938:	4605      	mov	r5, r0
 800a93a:	b911      	cbnz	r1, 800a942 <sbrk_aligned+0x12>
 800a93c:	f000 ff70 	bl	800b820 <_sbrk_r>
 800a940:	6030      	str	r0, [r6, #0]
 800a942:	4621      	mov	r1, r4
 800a944:	4628      	mov	r0, r5
 800a946:	f000 ff6b 	bl	800b820 <_sbrk_r>
 800a94a:	1c43      	adds	r3, r0, #1
 800a94c:	d00a      	beq.n	800a964 <sbrk_aligned+0x34>
 800a94e:	1cc4      	adds	r4, r0, #3
 800a950:	f024 0403 	bic.w	r4, r4, #3
 800a954:	42a0      	cmp	r0, r4
 800a956:	d007      	beq.n	800a968 <sbrk_aligned+0x38>
 800a958:	1a21      	subs	r1, r4, r0
 800a95a:	4628      	mov	r0, r5
 800a95c:	f000 ff60 	bl	800b820 <_sbrk_r>
 800a960:	3001      	adds	r0, #1
 800a962:	d101      	bne.n	800a968 <sbrk_aligned+0x38>
 800a964:	f04f 34ff 	mov.w	r4, #4294967295
 800a968:	4620      	mov	r0, r4
 800a96a:	bd70      	pop	{r4, r5, r6, pc}
 800a96c:	20008414 	.word	0x20008414

0800a970 <_malloc_r>:
 800a970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a974:	1ccd      	adds	r5, r1, #3
 800a976:	f025 0503 	bic.w	r5, r5, #3
 800a97a:	3508      	adds	r5, #8
 800a97c:	2d0c      	cmp	r5, #12
 800a97e:	bf38      	it	cc
 800a980:	250c      	movcc	r5, #12
 800a982:	2d00      	cmp	r5, #0
 800a984:	4607      	mov	r7, r0
 800a986:	db01      	blt.n	800a98c <_malloc_r+0x1c>
 800a988:	42a9      	cmp	r1, r5
 800a98a:	d905      	bls.n	800a998 <_malloc_r+0x28>
 800a98c:	230c      	movs	r3, #12
 800a98e:	603b      	str	r3, [r7, #0]
 800a990:	2600      	movs	r6, #0
 800a992:	4630      	mov	r0, r6
 800a994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a998:	4e2e      	ldr	r6, [pc, #184]	; (800aa54 <_malloc_r+0xe4>)
 800a99a:	f003 fabd 	bl	800df18 <__malloc_lock>
 800a99e:	6833      	ldr	r3, [r6, #0]
 800a9a0:	461c      	mov	r4, r3
 800a9a2:	bb34      	cbnz	r4, 800a9f2 <_malloc_r+0x82>
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	f7ff ffc2 	bl	800a930 <sbrk_aligned>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	d14d      	bne.n	800aa4e <_malloc_r+0xde>
 800a9b2:	6834      	ldr	r4, [r6, #0]
 800a9b4:	4626      	mov	r6, r4
 800a9b6:	2e00      	cmp	r6, #0
 800a9b8:	d140      	bne.n	800aa3c <_malloc_r+0xcc>
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	4631      	mov	r1, r6
 800a9be:	4638      	mov	r0, r7
 800a9c0:	eb04 0803 	add.w	r8, r4, r3
 800a9c4:	f000 ff2c 	bl	800b820 <_sbrk_r>
 800a9c8:	4580      	cmp	r8, r0
 800a9ca:	d13a      	bne.n	800aa42 <_malloc_r+0xd2>
 800a9cc:	6821      	ldr	r1, [r4, #0]
 800a9ce:	3503      	adds	r5, #3
 800a9d0:	1a6d      	subs	r5, r5, r1
 800a9d2:	f025 0503 	bic.w	r5, r5, #3
 800a9d6:	3508      	adds	r5, #8
 800a9d8:	2d0c      	cmp	r5, #12
 800a9da:	bf38      	it	cc
 800a9dc:	250c      	movcc	r5, #12
 800a9de:	4629      	mov	r1, r5
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	f7ff ffa5 	bl	800a930 <sbrk_aligned>
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	d02b      	beq.n	800aa42 <_malloc_r+0xd2>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	442b      	add	r3, r5
 800a9ee:	6023      	str	r3, [r4, #0]
 800a9f0:	e00e      	b.n	800aa10 <_malloc_r+0xa0>
 800a9f2:	6822      	ldr	r2, [r4, #0]
 800a9f4:	1b52      	subs	r2, r2, r5
 800a9f6:	d41e      	bmi.n	800aa36 <_malloc_r+0xc6>
 800a9f8:	2a0b      	cmp	r2, #11
 800a9fa:	d916      	bls.n	800aa2a <_malloc_r+0xba>
 800a9fc:	1961      	adds	r1, r4, r5
 800a9fe:	42a3      	cmp	r3, r4
 800aa00:	6025      	str	r5, [r4, #0]
 800aa02:	bf18      	it	ne
 800aa04:	6059      	strne	r1, [r3, #4]
 800aa06:	6863      	ldr	r3, [r4, #4]
 800aa08:	bf08      	it	eq
 800aa0a:	6031      	streq	r1, [r6, #0]
 800aa0c:	5162      	str	r2, [r4, r5]
 800aa0e:	604b      	str	r3, [r1, #4]
 800aa10:	4638      	mov	r0, r7
 800aa12:	f104 060b 	add.w	r6, r4, #11
 800aa16:	f003 fa85 	bl	800df24 <__malloc_unlock>
 800aa1a:	f026 0607 	bic.w	r6, r6, #7
 800aa1e:	1d23      	adds	r3, r4, #4
 800aa20:	1af2      	subs	r2, r6, r3
 800aa22:	d0b6      	beq.n	800a992 <_malloc_r+0x22>
 800aa24:	1b9b      	subs	r3, r3, r6
 800aa26:	50a3      	str	r3, [r4, r2]
 800aa28:	e7b3      	b.n	800a992 <_malloc_r+0x22>
 800aa2a:	6862      	ldr	r2, [r4, #4]
 800aa2c:	42a3      	cmp	r3, r4
 800aa2e:	bf0c      	ite	eq
 800aa30:	6032      	streq	r2, [r6, #0]
 800aa32:	605a      	strne	r2, [r3, #4]
 800aa34:	e7ec      	b.n	800aa10 <_malloc_r+0xa0>
 800aa36:	4623      	mov	r3, r4
 800aa38:	6864      	ldr	r4, [r4, #4]
 800aa3a:	e7b2      	b.n	800a9a2 <_malloc_r+0x32>
 800aa3c:	4634      	mov	r4, r6
 800aa3e:	6876      	ldr	r6, [r6, #4]
 800aa40:	e7b9      	b.n	800a9b6 <_malloc_r+0x46>
 800aa42:	230c      	movs	r3, #12
 800aa44:	603b      	str	r3, [r7, #0]
 800aa46:	4638      	mov	r0, r7
 800aa48:	f003 fa6c 	bl	800df24 <__malloc_unlock>
 800aa4c:	e7a1      	b.n	800a992 <_malloc_r+0x22>
 800aa4e:	6025      	str	r5, [r4, #0]
 800aa50:	e7de      	b.n	800aa10 <_malloc_r+0xa0>
 800aa52:	bf00      	nop
 800aa54:	20008410 	.word	0x20008410

0800aa58 <__cvt>:
 800aa58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa5c:	ec55 4b10 	vmov	r4, r5, d0
 800aa60:	2d00      	cmp	r5, #0
 800aa62:	460e      	mov	r6, r1
 800aa64:	4619      	mov	r1, r3
 800aa66:	462b      	mov	r3, r5
 800aa68:	bfbb      	ittet	lt
 800aa6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aa6e:	461d      	movlt	r5, r3
 800aa70:	2300      	movge	r3, #0
 800aa72:	232d      	movlt	r3, #45	; 0x2d
 800aa74:	700b      	strb	r3, [r1, #0]
 800aa76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aa7c:	4691      	mov	r9, r2
 800aa7e:	f023 0820 	bic.w	r8, r3, #32
 800aa82:	bfbc      	itt	lt
 800aa84:	4622      	movlt	r2, r4
 800aa86:	4614      	movlt	r4, r2
 800aa88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa8c:	d005      	beq.n	800aa9a <__cvt+0x42>
 800aa8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aa92:	d100      	bne.n	800aa96 <__cvt+0x3e>
 800aa94:	3601      	adds	r6, #1
 800aa96:	2102      	movs	r1, #2
 800aa98:	e000      	b.n	800aa9c <__cvt+0x44>
 800aa9a:	2103      	movs	r1, #3
 800aa9c:	ab03      	add	r3, sp, #12
 800aa9e:	9301      	str	r3, [sp, #4]
 800aaa0:	ab02      	add	r3, sp, #8
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	ec45 4b10 	vmov	d0, r4, r5
 800aaa8:	4653      	mov	r3, sl
 800aaaa:	4632      	mov	r2, r6
 800aaac:	f001 ff6c 	bl	800c988 <_dtoa_r>
 800aab0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aab4:	4607      	mov	r7, r0
 800aab6:	d102      	bne.n	800aabe <__cvt+0x66>
 800aab8:	f019 0f01 	tst.w	r9, #1
 800aabc:	d022      	beq.n	800ab04 <__cvt+0xac>
 800aabe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aac2:	eb07 0906 	add.w	r9, r7, r6
 800aac6:	d110      	bne.n	800aaea <__cvt+0x92>
 800aac8:	783b      	ldrb	r3, [r7, #0]
 800aaca:	2b30      	cmp	r3, #48	; 0x30
 800aacc:	d10a      	bne.n	800aae4 <__cvt+0x8c>
 800aace:	2200      	movs	r2, #0
 800aad0:	2300      	movs	r3, #0
 800aad2:	4620      	mov	r0, r4
 800aad4:	4629      	mov	r1, r5
 800aad6:	f7f5 fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 800aada:	b918      	cbnz	r0, 800aae4 <__cvt+0x8c>
 800aadc:	f1c6 0601 	rsb	r6, r6, #1
 800aae0:	f8ca 6000 	str.w	r6, [sl]
 800aae4:	f8da 3000 	ldr.w	r3, [sl]
 800aae8:	4499      	add	r9, r3
 800aaea:	2200      	movs	r2, #0
 800aaec:	2300      	movs	r3, #0
 800aaee:	4620      	mov	r0, r4
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	f7f5 ffe9 	bl	8000ac8 <__aeabi_dcmpeq>
 800aaf6:	b108      	cbz	r0, 800aafc <__cvt+0xa4>
 800aaf8:	f8cd 900c 	str.w	r9, [sp, #12]
 800aafc:	2230      	movs	r2, #48	; 0x30
 800aafe:	9b03      	ldr	r3, [sp, #12]
 800ab00:	454b      	cmp	r3, r9
 800ab02:	d307      	bcc.n	800ab14 <__cvt+0xbc>
 800ab04:	9b03      	ldr	r3, [sp, #12]
 800ab06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab08:	1bdb      	subs	r3, r3, r7
 800ab0a:	4638      	mov	r0, r7
 800ab0c:	6013      	str	r3, [r2, #0]
 800ab0e:	b004      	add	sp, #16
 800ab10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab14:	1c59      	adds	r1, r3, #1
 800ab16:	9103      	str	r1, [sp, #12]
 800ab18:	701a      	strb	r2, [r3, #0]
 800ab1a:	e7f0      	b.n	800aafe <__cvt+0xa6>

0800ab1c <__exponent>:
 800ab1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2900      	cmp	r1, #0
 800ab22:	bfb8      	it	lt
 800ab24:	4249      	neglt	r1, r1
 800ab26:	f803 2b02 	strb.w	r2, [r3], #2
 800ab2a:	bfb4      	ite	lt
 800ab2c:	222d      	movlt	r2, #45	; 0x2d
 800ab2e:	222b      	movge	r2, #43	; 0x2b
 800ab30:	2909      	cmp	r1, #9
 800ab32:	7042      	strb	r2, [r0, #1]
 800ab34:	dd2a      	ble.n	800ab8c <__exponent+0x70>
 800ab36:	f10d 0407 	add.w	r4, sp, #7
 800ab3a:	46a4      	mov	ip, r4
 800ab3c:	270a      	movs	r7, #10
 800ab3e:	46a6      	mov	lr, r4
 800ab40:	460a      	mov	r2, r1
 800ab42:	fb91 f6f7 	sdiv	r6, r1, r7
 800ab46:	fb07 1516 	mls	r5, r7, r6, r1
 800ab4a:	3530      	adds	r5, #48	; 0x30
 800ab4c:	2a63      	cmp	r2, #99	; 0x63
 800ab4e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ab56:	4631      	mov	r1, r6
 800ab58:	dcf1      	bgt.n	800ab3e <__exponent+0x22>
 800ab5a:	3130      	adds	r1, #48	; 0x30
 800ab5c:	f1ae 0502 	sub.w	r5, lr, #2
 800ab60:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ab64:	1c44      	adds	r4, r0, #1
 800ab66:	4629      	mov	r1, r5
 800ab68:	4561      	cmp	r1, ip
 800ab6a:	d30a      	bcc.n	800ab82 <__exponent+0x66>
 800ab6c:	f10d 0209 	add.w	r2, sp, #9
 800ab70:	eba2 020e 	sub.w	r2, r2, lr
 800ab74:	4565      	cmp	r5, ip
 800ab76:	bf88      	it	hi
 800ab78:	2200      	movhi	r2, #0
 800ab7a:	4413      	add	r3, r2
 800ab7c:	1a18      	subs	r0, r3, r0
 800ab7e:	b003      	add	sp, #12
 800ab80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab86:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ab8a:	e7ed      	b.n	800ab68 <__exponent+0x4c>
 800ab8c:	2330      	movs	r3, #48	; 0x30
 800ab8e:	3130      	adds	r1, #48	; 0x30
 800ab90:	7083      	strb	r3, [r0, #2]
 800ab92:	70c1      	strb	r1, [r0, #3]
 800ab94:	1d03      	adds	r3, r0, #4
 800ab96:	e7f1      	b.n	800ab7c <__exponent+0x60>

0800ab98 <_printf_float>:
 800ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9c:	ed2d 8b02 	vpush	{d8}
 800aba0:	b08d      	sub	sp, #52	; 0x34
 800aba2:	460c      	mov	r4, r1
 800aba4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aba8:	4616      	mov	r6, r2
 800abaa:	461f      	mov	r7, r3
 800abac:	4605      	mov	r5, r0
 800abae:	f003 f91d 	bl	800ddec <_localeconv_r>
 800abb2:	f8d0 a000 	ldr.w	sl, [r0]
 800abb6:	4650      	mov	r0, sl
 800abb8:	f7f5 fb0a 	bl	80001d0 <strlen>
 800abbc:	2300      	movs	r3, #0
 800abbe:	930a      	str	r3, [sp, #40]	; 0x28
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	9305      	str	r3, [sp, #20]
 800abc4:	f8d8 3000 	ldr.w	r3, [r8]
 800abc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800abcc:	3307      	adds	r3, #7
 800abce:	f023 0307 	bic.w	r3, r3, #7
 800abd2:	f103 0208 	add.w	r2, r3, #8
 800abd6:	f8c8 2000 	str.w	r2, [r8]
 800abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800abe2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800abe6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800abea:	9307      	str	r3, [sp, #28]
 800abec:	f8cd 8018 	str.w	r8, [sp, #24]
 800abf0:	ee08 0a10 	vmov	s16, r0
 800abf4:	4b9f      	ldr	r3, [pc, #636]	; (800ae74 <_printf_float+0x2dc>)
 800abf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abfa:	f04f 32ff 	mov.w	r2, #4294967295
 800abfe:	f7f5 ff95 	bl	8000b2c <__aeabi_dcmpun>
 800ac02:	bb88      	cbnz	r0, 800ac68 <_printf_float+0xd0>
 800ac04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac08:	4b9a      	ldr	r3, [pc, #616]	; (800ae74 <_printf_float+0x2dc>)
 800ac0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac0e:	f7f5 ff6f 	bl	8000af0 <__aeabi_dcmple>
 800ac12:	bb48      	cbnz	r0, 800ac68 <_printf_float+0xd0>
 800ac14:	2200      	movs	r2, #0
 800ac16:	2300      	movs	r3, #0
 800ac18:	4640      	mov	r0, r8
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	f7f5 ff5e 	bl	8000adc <__aeabi_dcmplt>
 800ac20:	b110      	cbz	r0, 800ac28 <_printf_float+0x90>
 800ac22:	232d      	movs	r3, #45	; 0x2d
 800ac24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac28:	4b93      	ldr	r3, [pc, #588]	; (800ae78 <_printf_float+0x2e0>)
 800ac2a:	4894      	ldr	r0, [pc, #592]	; (800ae7c <_printf_float+0x2e4>)
 800ac2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ac30:	bf94      	ite	ls
 800ac32:	4698      	movls	r8, r3
 800ac34:	4680      	movhi	r8, r0
 800ac36:	2303      	movs	r3, #3
 800ac38:	6123      	str	r3, [r4, #16]
 800ac3a:	9b05      	ldr	r3, [sp, #20]
 800ac3c:	f023 0204 	bic.w	r2, r3, #4
 800ac40:	6022      	str	r2, [r4, #0]
 800ac42:	f04f 0900 	mov.w	r9, #0
 800ac46:	9700      	str	r7, [sp, #0]
 800ac48:	4633      	mov	r3, r6
 800ac4a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	4628      	mov	r0, r5
 800ac50:	f000 f9d8 	bl	800b004 <_printf_common>
 800ac54:	3001      	adds	r0, #1
 800ac56:	f040 8090 	bne.w	800ad7a <_printf_float+0x1e2>
 800ac5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5e:	b00d      	add	sp, #52	; 0x34
 800ac60:	ecbd 8b02 	vpop	{d8}
 800ac64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac68:	4642      	mov	r2, r8
 800ac6a:	464b      	mov	r3, r9
 800ac6c:	4640      	mov	r0, r8
 800ac6e:	4649      	mov	r1, r9
 800ac70:	f7f5 ff5c 	bl	8000b2c <__aeabi_dcmpun>
 800ac74:	b140      	cbz	r0, 800ac88 <_printf_float+0xf0>
 800ac76:	464b      	mov	r3, r9
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	bfbc      	itt	lt
 800ac7c:	232d      	movlt	r3, #45	; 0x2d
 800ac7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ac82:	487f      	ldr	r0, [pc, #508]	; (800ae80 <_printf_float+0x2e8>)
 800ac84:	4b7f      	ldr	r3, [pc, #508]	; (800ae84 <_printf_float+0x2ec>)
 800ac86:	e7d1      	b.n	800ac2c <_printf_float+0x94>
 800ac88:	6863      	ldr	r3, [r4, #4]
 800ac8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ac8e:	9206      	str	r2, [sp, #24]
 800ac90:	1c5a      	adds	r2, r3, #1
 800ac92:	d13f      	bne.n	800ad14 <_printf_float+0x17c>
 800ac94:	2306      	movs	r3, #6
 800ac96:	6063      	str	r3, [r4, #4]
 800ac98:	9b05      	ldr	r3, [sp, #20]
 800ac9a:	6861      	ldr	r1, [r4, #4]
 800ac9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aca0:	2300      	movs	r3, #0
 800aca2:	9303      	str	r3, [sp, #12]
 800aca4:	ab0a      	add	r3, sp, #40	; 0x28
 800aca6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800acaa:	ab09      	add	r3, sp, #36	; 0x24
 800acac:	ec49 8b10 	vmov	d0, r8, r9
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	6022      	str	r2, [r4, #0]
 800acb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800acb8:	4628      	mov	r0, r5
 800acba:	f7ff fecd 	bl	800aa58 <__cvt>
 800acbe:	9b06      	ldr	r3, [sp, #24]
 800acc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acc2:	2b47      	cmp	r3, #71	; 0x47
 800acc4:	4680      	mov	r8, r0
 800acc6:	d108      	bne.n	800acda <_printf_float+0x142>
 800acc8:	1cc8      	adds	r0, r1, #3
 800acca:	db02      	blt.n	800acd2 <_printf_float+0x13a>
 800accc:	6863      	ldr	r3, [r4, #4]
 800acce:	4299      	cmp	r1, r3
 800acd0:	dd41      	ble.n	800ad56 <_printf_float+0x1be>
 800acd2:	f1ab 0b02 	sub.w	fp, fp, #2
 800acd6:	fa5f fb8b 	uxtb.w	fp, fp
 800acda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800acde:	d820      	bhi.n	800ad22 <_printf_float+0x18a>
 800ace0:	3901      	subs	r1, #1
 800ace2:	465a      	mov	r2, fp
 800ace4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ace8:	9109      	str	r1, [sp, #36]	; 0x24
 800acea:	f7ff ff17 	bl	800ab1c <__exponent>
 800acee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acf0:	1813      	adds	r3, r2, r0
 800acf2:	2a01      	cmp	r2, #1
 800acf4:	4681      	mov	r9, r0
 800acf6:	6123      	str	r3, [r4, #16]
 800acf8:	dc02      	bgt.n	800ad00 <_printf_float+0x168>
 800acfa:	6822      	ldr	r2, [r4, #0]
 800acfc:	07d2      	lsls	r2, r2, #31
 800acfe:	d501      	bpl.n	800ad04 <_printf_float+0x16c>
 800ad00:	3301      	adds	r3, #1
 800ad02:	6123      	str	r3, [r4, #16]
 800ad04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d09c      	beq.n	800ac46 <_printf_float+0xae>
 800ad0c:	232d      	movs	r3, #45	; 0x2d
 800ad0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad12:	e798      	b.n	800ac46 <_printf_float+0xae>
 800ad14:	9a06      	ldr	r2, [sp, #24]
 800ad16:	2a47      	cmp	r2, #71	; 0x47
 800ad18:	d1be      	bne.n	800ac98 <_printf_float+0x100>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1bc      	bne.n	800ac98 <_printf_float+0x100>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e7b9      	b.n	800ac96 <_printf_float+0xfe>
 800ad22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ad26:	d118      	bne.n	800ad5a <_printf_float+0x1c2>
 800ad28:	2900      	cmp	r1, #0
 800ad2a:	6863      	ldr	r3, [r4, #4]
 800ad2c:	dd0b      	ble.n	800ad46 <_printf_float+0x1ae>
 800ad2e:	6121      	str	r1, [r4, #16]
 800ad30:	b913      	cbnz	r3, 800ad38 <_printf_float+0x1a0>
 800ad32:	6822      	ldr	r2, [r4, #0]
 800ad34:	07d0      	lsls	r0, r2, #31
 800ad36:	d502      	bpl.n	800ad3e <_printf_float+0x1a6>
 800ad38:	3301      	adds	r3, #1
 800ad3a:	440b      	add	r3, r1
 800ad3c:	6123      	str	r3, [r4, #16]
 800ad3e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad40:	f04f 0900 	mov.w	r9, #0
 800ad44:	e7de      	b.n	800ad04 <_printf_float+0x16c>
 800ad46:	b913      	cbnz	r3, 800ad4e <_printf_float+0x1b6>
 800ad48:	6822      	ldr	r2, [r4, #0]
 800ad4a:	07d2      	lsls	r2, r2, #31
 800ad4c:	d501      	bpl.n	800ad52 <_printf_float+0x1ba>
 800ad4e:	3302      	adds	r3, #2
 800ad50:	e7f4      	b.n	800ad3c <_printf_float+0x1a4>
 800ad52:	2301      	movs	r3, #1
 800ad54:	e7f2      	b.n	800ad3c <_printf_float+0x1a4>
 800ad56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ad5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad5c:	4299      	cmp	r1, r3
 800ad5e:	db05      	blt.n	800ad6c <_printf_float+0x1d4>
 800ad60:	6823      	ldr	r3, [r4, #0]
 800ad62:	6121      	str	r1, [r4, #16]
 800ad64:	07d8      	lsls	r0, r3, #31
 800ad66:	d5ea      	bpl.n	800ad3e <_printf_float+0x1a6>
 800ad68:	1c4b      	adds	r3, r1, #1
 800ad6a:	e7e7      	b.n	800ad3c <_printf_float+0x1a4>
 800ad6c:	2900      	cmp	r1, #0
 800ad6e:	bfd4      	ite	le
 800ad70:	f1c1 0202 	rsble	r2, r1, #2
 800ad74:	2201      	movgt	r2, #1
 800ad76:	4413      	add	r3, r2
 800ad78:	e7e0      	b.n	800ad3c <_printf_float+0x1a4>
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	055a      	lsls	r2, r3, #21
 800ad7e:	d407      	bmi.n	800ad90 <_printf_float+0x1f8>
 800ad80:	6923      	ldr	r3, [r4, #16]
 800ad82:	4642      	mov	r2, r8
 800ad84:	4631      	mov	r1, r6
 800ad86:	4628      	mov	r0, r5
 800ad88:	47b8      	blx	r7
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	d12c      	bne.n	800ade8 <_printf_float+0x250>
 800ad8e:	e764      	b.n	800ac5a <_printf_float+0xc2>
 800ad90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad94:	f240 80e0 	bls.w	800af58 <_printf_float+0x3c0>
 800ad98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f7f5 fe92 	bl	8000ac8 <__aeabi_dcmpeq>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d034      	beq.n	800ae12 <_printf_float+0x27a>
 800ada8:	4a37      	ldr	r2, [pc, #220]	; (800ae88 <_printf_float+0x2f0>)
 800adaa:	2301      	movs	r3, #1
 800adac:	4631      	mov	r1, r6
 800adae:	4628      	mov	r0, r5
 800adb0:	47b8      	blx	r7
 800adb2:	3001      	adds	r0, #1
 800adb4:	f43f af51 	beq.w	800ac5a <_printf_float+0xc2>
 800adb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adbc:	429a      	cmp	r2, r3
 800adbe:	db02      	blt.n	800adc6 <_printf_float+0x22e>
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	07d8      	lsls	r0, r3, #31
 800adc4:	d510      	bpl.n	800ade8 <_printf_float+0x250>
 800adc6:	ee18 3a10 	vmov	r3, s16
 800adca:	4652      	mov	r2, sl
 800adcc:	4631      	mov	r1, r6
 800adce:	4628      	mov	r0, r5
 800add0:	47b8      	blx	r7
 800add2:	3001      	adds	r0, #1
 800add4:	f43f af41 	beq.w	800ac5a <_printf_float+0xc2>
 800add8:	f04f 0800 	mov.w	r8, #0
 800addc:	f104 091a 	add.w	r9, r4, #26
 800ade0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade2:	3b01      	subs	r3, #1
 800ade4:	4543      	cmp	r3, r8
 800ade6:	dc09      	bgt.n	800adfc <_printf_float+0x264>
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	079b      	lsls	r3, r3, #30
 800adec:	f100 8105 	bmi.w	800affa <_printf_float+0x462>
 800adf0:	68e0      	ldr	r0, [r4, #12]
 800adf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adf4:	4298      	cmp	r0, r3
 800adf6:	bfb8      	it	lt
 800adf8:	4618      	movlt	r0, r3
 800adfa:	e730      	b.n	800ac5e <_printf_float+0xc6>
 800adfc:	2301      	movs	r3, #1
 800adfe:	464a      	mov	r2, r9
 800ae00:	4631      	mov	r1, r6
 800ae02:	4628      	mov	r0, r5
 800ae04:	47b8      	blx	r7
 800ae06:	3001      	adds	r0, #1
 800ae08:	f43f af27 	beq.w	800ac5a <_printf_float+0xc2>
 800ae0c:	f108 0801 	add.w	r8, r8, #1
 800ae10:	e7e6      	b.n	800ade0 <_printf_float+0x248>
 800ae12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	dc39      	bgt.n	800ae8c <_printf_float+0x2f4>
 800ae18:	4a1b      	ldr	r2, [pc, #108]	; (800ae88 <_printf_float+0x2f0>)
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	4631      	mov	r1, r6
 800ae1e:	4628      	mov	r0, r5
 800ae20:	47b8      	blx	r7
 800ae22:	3001      	adds	r0, #1
 800ae24:	f43f af19 	beq.w	800ac5a <_printf_float+0xc2>
 800ae28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	d102      	bne.n	800ae36 <_printf_float+0x29e>
 800ae30:	6823      	ldr	r3, [r4, #0]
 800ae32:	07d9      	lsls	r1, r3, #31
 800ae34:	d5d8      	bpl.n	800ade8 <_printf_float+0x250>
 800ae36:	ee18 3a10 	vmov	r3, s16
 800ae3a:	4652      	mov	r2, sl
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4628      	mov	r0, r5
 800ae40:	47b8      	blx	r7
 800ae42:	3001      	adds	r0, #1
 800ae44:	f43f af09 	beq.w	800ac5a <_printf_float+0xc2>
 800ae48:	f04f 0900 	mov.w	r9, #0
 800ae4c:	f104 0a1a 	add.w	sl, r4, #26
 800ae50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae52:	425b      	negs	r3, r3
 800ae54:	454b      	cmp	r3, r9
 800ae56:	dc01      	bgt.n	800ae5c <_printf_float+0x2c4>
 800ae58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae5a:	e792      	b.n	800ad82 <_printf_float+0x1ea>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	4652      	mov	r2, sl
 800ae60:	4631      	mov	r1, r6
 800ae62:	4628      	mov	r0, r5
 800ae64:	47b8      	blx	r7
 800ae66:	3001      	adds	r0, #1
 800ae68:	f43f aef7 	beq.w	800ac5a <_printf_float+0xc2>
 800ae6c:	f109 0901 	add.w	r9, r9, #1
 800ae70:	e7ee      	b.n	800ae50 <_printf_float+0x2b8>
 800ae72:	bf00      	nop
 800ae74:	7fefffff 	.word	0x7fefffff
 800ae78:	0800f258 	.word	0x0800f258
 800ae7c:	0800f25c 	.word	0x0800f25c
 800ae80:	0800f264 	.word	0x0800f264
 800ae84:	0800f260 	.word	0x0800f260
 800ae88:	0800f268 	.word	0x0800f268
 800ae8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae90:	429a      	cmp	r2, r3
 800ae92:	bfa8      	it	ge
 800ae94:	461a      	movge	r2, r3
 800ae96:	2a00      	cmp	r2, #0
 800ae98:	4691      	mov	r9, r2
 800ae9a:	dc37      	bgt.n	800af0c <_printf_float+0x374>
 800ae9c:	f04f 0b00 	mov.w	fp, #0
 800aea0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aea4:	f104 021a 	add.w	r2, r4, #26
 800aea8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aeaa:	9305      	str	r3, [sp, #20]
 800aeac:	eba3 0309 	sub.w	r3, r3, r9
 800aeb0:	455b      	cmp	r3, fp
 800aeb2:	dc33      	bgt.n	800af1c <_printf_float+0x384>
 800aeb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	db3b      	blt.n	800af34 <_printf_float+0x39c>
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	07da      	lsls	r2, r3, #31
 800aec0:	d438      	bmi.n	800af34 <_printf_float+0x39c>
 800aec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aec4:	9a05      	ldr	r2, [sp, #20]
 800aec6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aec8:	1a9a      	subs	r2, r3, r2
 800aeca:	eba3 0901 	sub.w	r9, r3, r1
 800aece:	4591      	cmp	r9, r2
 800aed0:	bfa8      	it	ge
 800aed2:	4691      	movge	r9, r2
 800aed4:	f1b9 0f00 	cmp.w	r9, #0
 800aed8:	dc35      	bgt.n	800af46 <_printf_float+0x3ae>
 800aeda:	f04f 0800 	mov.w	r8, #0
 800aede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aee2:	f104 0a1a 	add.w	sl, r4, #26
 800aee6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aeea:	1a9b      	subs	r3, r3, r2
 800aeec:	eba3 0309 	sub.w	r3, r3, r9
 800aef0:	4543      	cmp	r3, r8
 800aef2:	f77f af79 	ble.w	800ade8 <_printf_float+0x250>
 800aef6:	2301      	movs	r3, #1
 800aef8:	4652      	mov	r2, sl
 800aefa:	4631      	mov	r1, r6
 800aefc:	4628      	mov	r0, r5
 800aefe:	47b8      	blx	r7
 800af00:	3001      	adds	r0, #1
 800af02:	f43f aeaa 	beq.w	800ac5a <_printf_float+0xc2>
 800af06:	f108 0801 	add.w	r8, r8, #1
 800af0a:	e7ec      	b.n	800aee6 <_printf_float+0x34e>
 800af0c:	4613      	mov	r3, r2
 800af0e:	4631      	mov	r1, r6
 800af10:	4642      	mov	r2, r8
 800af12:	4628      	mov	r0, r5
 800af14:	47b8      	blx	r7
 800af16:	3001      	adds	r0, #1
 800af18:	d1c0      	bne.n	800ae9c <_printf_float+0x304>
 800af1a:	e69e      	b.n	800ac5a <_printf_float+0xc2>
 800af1c:	2301      	movs	r3, #1
 800af1e:	4631      	mov	r1, r6
 800af20:	4628      	mov	r0, r5
 800af22:	9205      	str	r2, [sp, #20]
 800af24:	47b8      	blx	r7
 800af26:	3001      	adds	r0, #1
 800af28:	f43f ae97 	beq.w	800ac5a <_printf_float+0xc2>
 800af2c:	9a05      	ldr	r2, [sp, #20]
 800af2e:	f10b 0b01 	add.w	fp, fp, #1
 800af32:	e7b9      	b.n	800aea8 <_printf_float+0x310>
 800af34:	ee18 3a10 	vmov	r3, s16
 800af38:	4652      	mov	r2, sl
 800af3a:	4631      	mov	r1, r6
 800af3c:	4628      	mov	r0, r5
 800af3e:	47b8      	blx	r7
 800af40:	3001      	adds	r0, #1
 800af42:	d1be      	bne.n	800aec2 <_printf_float+0x32a>
 800af44:	e689      	b.n	800ac5a <_printf_float+0xc2>
 800af46:	9a05      	ldr	r2, [sp, #20]
 800af48:	464b      	mov	r3, r9
 800af4a:	4442      	add	r2, r8
 800af4c:	4631      	mov	r1, r6
 800af4e:	4628      	mov	r0, r5
 800af50:	47b8      	blx	r7
 800af52:	3001      	adds	r0, #1
 800af54:	d1c1      	bne.n	800aeda <_printf_float+0x342>
 800af56:	e680      	b.n	800ac5a <_printf_float+0xc2>
 800af58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af5a:	2a01      	cmp	r2, #1
 800af5c:	dc01      	bgt.n	800af62 <_printf_float+0x3ca>
 800af5e:	07db      	lsls	r3, r3, #31
 800af60:	d538      	bpl.n	800afd4 <_printf_float+0x43c>
 800af62:	2301      	movs	r3, #1
 800af64:	4642      	mov	r2, r8
 800af66:	4631      	mov	r1, r6
 800af68:	4628      	mov	r0, r5
 800af6a:	47b8      	blx	r7
 800af6c:	3001      	adds	r0, #1
 800af6e:	f43f ae74 	beq.w	800ac5a <_printf_float+0xc2>
 800af72:	ee18 3a10 	vmov	r3, s16
 800af76:	4652      	mov	r2, sl
 800af78:	4631      	mov	r1, r6
 800af7a:	4628      	mov	r0, r5
 800af7c:	47b8      	blx	r7
 800af7e:	3001      	adds	r0, #1
 800af80:	f43f ae6b 	beq.w	800ac5a <_printf_float+0xc2>
 800af84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af88:	2200      	movs	r2, #0
 800af8a:	2300      	movs	r3, #0
 800af8c:	f7f5 fd9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800af90:	b9d8      	cbnz	r0, 800afca <_printf_float+0x432>
 800af92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af94:	f108 0201 	add.w	r2, r8, #1
 800af98:	3b01      	subs	r3, #1
 800af9a:	4631      	mov	r1, r6
 800af9c:	4628      	mov	r0, r5
 800af9e:	47b8      	blx	r7
 800afa0:	3001      	adds	r0, #1
 800afa2:	d10e      	bne.n	800afc2 <_printf_float+0x42a>
 800afa4:	e659      	b.n	800ac5a <_printf_float+0xc2>
 800afa6:	2301      	movs	r3, #1
 800afa8:	4652      	mov	r2, sl
 800afaa:	4631      	mov	r1, r6
 800afac:	4628      	mov	r0, r5
 800afae:	47b8      	blx	r7
 800afb0:	3001      	adds	r0, #1
 800afb2:	f43f ae52 	beq.w	800ac5a <_printf_float+0xc2>
 800afb6:	f108 0801 	add.w	r8, r8, #1
 800afba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afbc:	3b01      	subs	r3, #1
 800afbe:	4543      	cmp	r3, r8
 800afc0:	dcf1      	bgt.n	800afa6 <_printf_float+0x40e>
 800afc2:	464b      	mov	r3, r9
 800afc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800afc8:	e6dc      	b.n	800ad84 <_printf_float+0x1ec>
 800afca:	f04f 0800 	mov.w	r8, #0
 800afce:	f104 0a1a 	add.w	sl, r4, #26
 800afd2:	e7f2      	b.n	800afba <_printf_float+0x422>
 800afd4:	2301      	movs	r3, #1
 800afd6:	4642      	mov	r2, r8
 800afd8:	e7df      	b.n	800af9a <_printf_float+0x402>
 800afda:	2301      	movs	r3, #1
 800afdc:	464a      	mov	r2, r9
 800afde:	4631      	mov	r1, r6
 800afe0:	4628      	mov	r0, r5
 800afe2:	47b8      	blx	r7
 800afe4:	3001      	adds	r0, #1
 800afe6:	f43f ae38 	beq.w	800ac5a <_printf_float+0xc2>
 800afea:	f108 0801 	add.w	r8, r8, #1
 800afee:	68e3      	ldr	r3, [r4, #12]
 800aff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aff2:	1a5b      	subs	r3, r3, r1
 800aff4:	4543      	cmp	r3, r8
 800aff6:	dcf0      	bgt.n	800afda <_printf_float+0x442>
 800aff8:	e6fa      	b.n	800adf0 <_printf_float+0x258>
 800affa:	f04f 0800 	mov.w	r8, #0
 800affe:	f104 0919 	add.w	r9, r4, #25
 800b002:	e7f4      	b.n	800afee <_printf_float+0x456>

0800b004 <_printf_common>:
 800b004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b008:	4616      	mov	r6, r2
 800b00a:	4699      	mov	r9, r3
 800b00c:	688a      	ldr	r2, [r1, #8]
 800b00e:	690b      	ldr	r3, [r1, #16]
 800b010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b014:	4293      	cmp	r3, r2
 800b016:	bfb8      	it	lt
 800b018:	4613      	movlt	r3, r2
 800b01a:	6033      	str	r3, [r6, #0]
 800b01c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b020:	4607      	mov	r7, r0
 800b022:	460c      	mov	r4, r1
 800b024:	b10a      	cbz	r2, 800b02a <_printf_common+0x26>
 800b026:	3301      	adds	r3, #1
 800b028:	6033      	str	r3, [r6, #0]
 800b02a:	6823      	ldr	r3, [r4, #0]
 800b02c:	0699      	lsls	r1, r3, #26
 800b02e:	bf42      	ittt	mi
 800b030:	6833      	ldrmi	r3, [r6, #0]
 800b032:	3302      	addmi	r3, #2
 800b034:	6033      	strmi	r3, [r6, #0]
 800b036:	6825      	ldr	r5, [r4, #0]
 800b038:	f015 0506 	ands.w	r5, r5, #6
 800b03c:	d106      	bne.n	800b04c <_printf_common+0x48>
 800b03e:	f104 0a19 	add.w	sl, r4, #25
 800b042:	68e3      	ldr	r3, [r4, #12]
 800b044:	6832      	ldr	r2, [r6, #0]
 800b046:	1a9b      	subs	r3, r3, r2
 800b048:	42ab      	cmp	r3, r5
 800b04a:	dc26      	bgt.n	800b09a <_printf_common+0x96>
 800b04c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b050:	1e13      	subs	r3, r2, #0
 800b052:	6822      	ldr	r2, [r4, #0]
 800b054:	bf18      	it	ne
 800b056:	2301      	movne	r3, #1
 800b058:	0692      	lsls	r2, r2, #26
 800b05a:	d42b      	bmi.n	800b0b4 <_printf_common+0xb0>
 800b05c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b060:	4649      	mov	r1, r9
 800b062:	4638      	mov	r0, r7
 800b064:	47c0      	blx	r8
 800b066:	3001      	adds	r0, #1
 800b068:	d01e      	beq.n	800b0a8 <_printf_common+0xa4>
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	68e5      	ldr	r5, [r4, #12]
 800b06e:	6832      	ldr	r2, [r6, #0]
 800b070:	f003 0306 	and.w	r3, r3, #6
 800b074:	2b04      	cmp	r3, #4
 800b076:	bf08      	it	eq
 800b078:	1aad      	subeq	r5, r5, r2
 800b07a:	68a3      	ldr	r3, [r4, #8]
 800b07c:	6922      	ldr	r2, [r4, #16]
 800b07e:	bf0c      	ite	eq
 800b080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b084:	2500      	movne	r5, #0
 800b086:	4293      	cmp	r3, r2
 800b088:	bfc4      	itt	gt
 800b08a:	1a9b      	subgt	r3, r3, r2
 800b08c:	18ed      	addgt	r5, r5, r3
 800b08e:	2600      	movs	r6, #0
 800b090:	341a      	adds	r4, #26
 800b092:	42b5      	cmp	r5, r6
 800b094:	d11a      	bne.n	800b0cc <_printf_common+0xc8>
 800b096:	2000      	movs	r0, #0
 800b098:	e008      	b.n	800b0ac <_printf_common+0xa8>
 800b09a:	2301      	movs	r3, #1
 800b09c:	4652      	mov	r2, sl
 800b09e:	4649      	mov	r1, r9
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	47c0      	blx	r8
 800b0a4:	3001      	adds	r0, #1
 800b0a6:	d103      	bne.n	800b0b0 <_printf_common+0xac>
 800b0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b0:	3501      	adds	r5, #1
 800b0b2:	e7c6      	b.n	800b042 <_printf_common+0x3e>
 800b0b4:	18e1      	adds	r1, r4, r3
 800b0b6:	1c5a      	adds	r2, r3, #1
 800b0b8:	2030      	movs	r0, #48	; 0x30
 800b0ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0be:	4422      	add	r2, r4
 800b0c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0c8:	3302      	adds	r3, #2
 800b0ca:	e7c7      	b.n	800b05c <_printf_common+0x58>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	4622      	mov	r2, r4
 800b0d0:	4649      	mov	r1, r9
 800b0d2:	4638      	mov	r0, r7
 800b0d4:	47c0      	blx	r8
 800b0d6:	3001      	adds	r0, #1
 800b0d8:	d0e6      	beq.n	800b0a8 <_printf_common+0xa4>
 800b0da:	3601      	adds	r6, #1
 800b0dc:	e7d9      	b.n	800b092 <_printf_common+0x8e>
	...

0800b0e0 <_printf_i>:
 800b0e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e4:	7e0f      	ldrb	r7, [r1, #24]
 800b0e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0e8:	2f78      	cmp	r7, #120	; 0x78
 800b0ea:	4691      	mov	r9, r2
 800b0ec:	4680      	mov	r8, r0
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	469a      	mov	sl, r3
 800b0f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0f6:	d807      	bhi.n	800b108 <_printf_i+0x28>
 800b0f8:	2f62      	cmp	r7, #98	; 0x62
 800b0fa:	d80a      	bhi.n	800b112 <_printf_i+0x32>
 800b0fc:	2f00      	cmp	r7, #0
 800b0fe:	f000 80d8 	beq.w	800b2b2 <_printf_i+0x1d2>
 800b102:	2f58      	cmp	r7, #88	; 0x58
 800b104:	f000 80a3 	beq.w	800b24e <_printf_i+0x16e>
 800b108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b10c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b110:	e03a      	b.n	800b188 <_printf_i+0xa8>
 800b112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b116:	2b15      	cmp	r3, #21
 800b118:	d8f6      	bhi.n	800b108 <_printf_i+0x28>
 800b11a:	a101      	add	r1, pc, #4	; (adr r1, 800b120 <_printf_i+0x40>)
 800b11c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b120:	0800b179 	.word	0x0800b179
 800b124:	0800b18d 	.word	0x0800b18d
 800b128:	0800b109 	.word	0x0800b109
 800b12c:	0800b109 	.word	0x0800b109
 800b130:	0800b109 	.word	0x0800b109
 800b134:	0800b109 	.word	0x0800b109
 800b138:	0800b18d 	.word	0x0800b18d
 800b13c:	0800b109 	.word	0x0800b109
 800b140:	0800b109 	.word	0x0800b109
 800b144:	0800b109 	.word	0x0800b109
 800b148:	0800b109 	.word	0x0800b109
 800b14c:	0800b299 	.word	0x0800b299
 800b150:	0800b1bd 	.word	0x0800b1bd
 800b154:	0800b27b 	.word	0x0800b27b
 800b158:	0800b109 	.word	0x0800b109
 800b15c:	0800b109 	.word	0x0800b109
 800b160:	0800b2bb 	.word	0x0800b2bb
 800b164:	0800b109 	.word	0x0800b109
 800b168:	0800b1bd 	.word	0x0800b1bd
 800b16c:	0800b109 	.word	0x0800b109
 800b170:	0800b109 	.word	0x0800b109
 800b174:	0800b283 	.word	0x0800b283
 800b178:	682b      	ldr	r3, [r5, #0]
 800b17a:	1d1a      	adds	r2, r3, #4
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	602a      	str	r2, [r5, #0]
 800b180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b188:	2301      	movs	r3, #1
 800b18a:	e0a3      	b.n	800b2d4 <_printf_i+0x1f4>
 800b18c:	6820      	ldr	r0, [r4, #0]
 800b18e:	6829      	ldr	r1, [r5, #0]
 800b190:	0606      	lsls	r6, r0, #24
 800b192:	f101 0304 	add.w	r3, r1, #4
 800b196:	d50a      	bpl.n	800b1ae <_printf_i+0xce>
 800b198:	680e      	ldr	r6, [r1, #0]
 800b19a:	602b      	str	r3, [r5, #0]
 800b19c:	2e00      	cmp	r6, #0
 800b19e:	da03      	bge.n	800b1a8 <_printf_i+0xc8>
 800b1a0:	232d      	movs	r3, #45	; 0x2d
 800b1a2:	4276      	negs	r6, r6
 800b1a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1a8:	485e      	ldr	r0, [pc, #376]	; (800b324 <_printf_i+0x244>)
 800b1aa:	230a      	movs	r3, #10
 800b1ac:	e019      	b.n	800b1e2 <_printf_i+0x102>
 800b1ae:	680e      	ldr	r6, [r1, #0]
 800b1b0:	602b      	str	r3, [r5, #0]
 800b1b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1b6:	bf18      	it	ne
 800b1b8:	b236      	sxthne	r6, r6
 800b1ba:	e7ef      	b.n	800b19c <_printf_i+0xbc>
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	6820      	ldr	r0, [r4, #0]
 800b1c0:	1d19      	adds	r1, r3, #4
 800b1c2:	6029      	str	r1, [r5, #0]
 800b1c4:	0601      	lsls	r1, r0, #24
 800b1c6:	d501      	bpl.n	800b1cc <_printf_i+0xec>
 800b1c8:	681e      	ldr	r6, [r3, #0]
 800b1ca:	e002      	b.n	800b1d2 <_printf_i+0xf2>
 800b1cc:	0646      	lsls	r6, r0, #25
 800b1ce:	d5fb      	bpl.n	800b1c8 <_printf_i+0xe8>
 800b1d0:	881e      	ldrh	r6, [r3, #0]
 800b1d2:	4854      	ldr	r0, [pc, #336]	; (800b324 <_printf_i+0x244>)
 800b1d4:	2f6f      	cmp	r7, #111	; 0x6f
 800b1d6:	bf0c      	ite	eq
 800b1d8:	2308      	moveq	r3, #8
 800b1da:	230a      	movne	r3, #10
 800b1dc:	2100      	movs	r1, #0
 800b1de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1e2:	6865      	ldr	r5, [r4, #4]
 800b1e4:	60a5      	str	r5, [r4, #8]
 800b1e6:	2d00      	cmp	r5, #0
 800b1e8:	bfa2      	ittt	ge
 800b1ea:	6821      	ldrge	r1, [r4, #0]
 800b1ec:	f021 0104 	bicge.w	r1, r1, #4
 800b1f0:	6021      	strge	r1, [r4, #0]
 800b1f2:	b90e      	cbnz	r6, 800b1f8 <_printf_i+0x118>
 800b1f4:	2d00      	cmp	r5, #0
 800b1f6:	d04d      	beq.n	800b294 <_printf_i+0x1b4>
 800b1f8:	4615      	mov	r5, r2
 800b1fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1fe:	fb03 6711 	mls	r7, r3, r1, r6
 800b202:	5dc7      	ldrb	r7, [r0, r7]
 800b204:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b208:	4637      	mov	r7, r6
 800b20a:	42bb      	cmp	r3, r7
 800b20c:	460e      	mov	r6, r1
 800b20e:	d9f4      	bls.n	800b1fa <_printf_i+0x11a>
 800b210:	2b08      	cmp	r3, #8
 800b212:	d10b      	bne.n	800b22c <_printf_i+0x14c>
 800b214:	6823      	ldr	r3, [r4, #0]
 800b216:	07de      	lsls	r6, r3, #31
 800b218:	d508      	bpl.n	800b22c <_printf_i+0x14c>
 800b21a:	6923      	ldr	r3, [r4, #16]
 800b21c:	6861      	ldr	r1, [r4, #4]
 800b21e:	4299      	cmp	r1, r3
 800b220:	bfde      	ittt	le
 800b222:	2330      	movle	r3, #48	; 0x30
 800b224:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b228:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b22c:	1b52      	subs	r2, r2, r5
 800b22e:	6122      	str	r2, [r4, #16]
 800b230:	f8cd a000 	str.w	sl, [sp]
 800b234:	464b      	mov	r3, r9
 800b236:	aa03      	add	r2, sp, #12
 800b238:	4621      	mov	r1, r4
 800b23a:	4640      	mov	r0, r8
 800b23c:	f7ff fee2 	bl	800b004 <_printf_common>
 800b240:	3001      	adds	r0, #1
 800b242:	d14c      	bne.n	800b2de <_printf_i+0x1fe>
 800b244:	f04f 30ff 	mov.w	r0, #4294967295
 800b248:	b004      	add	sp, #16
 800b24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b24e:	4835      	ldr	r0, [pc, #212]	; (800b324 <_printf_i+0x244>)
 800b250:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b254:	6829      	ldr	r1, [r5, #0]
 800b256:	6823      	ldr	r3, [r4, #0]
 800b258:	f851 6b04 	ldr.w	r6, [r1], #4
 800b25c:	6029      	str	r1, [r5, #0]
 800b25e:	061d      	lsls	r5, r3, #24
 800b260:	d514      	bpl.n	800b28c <_printf_i+0x1ac>
 800b262:	07df      	lsls	r7, r3, #31
 800b264:	bf44      	itt	mi
 800b266:	f043 0320 	orrmi.w	r3, r3, #32
 800b26a:	6023      	strmi	r3, [r4, #0]
 800b26c:	b91e      	cbnz	r6, 800b276 <_printf_i+0x196>
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	f023 0320 	bic.w	r3, r3, #32
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	2310      	movs	r3, #16
 800b278:	e7b0      	b.n	800b1dc <_printf_i+0xfc>
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	f043 0320 	orr.w	r3, r3, #32
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	2378      	movs	r3, #120	; 0x78
 800b284:	4828      	ldr	r0, [pc, #160]	; (800b328 <_printf_i+0x248>)
 800b286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b28a:	e7e3      	b.n	800b254 <_printf_i+0x174>
 800b28c:	0659      	lsls	r1, r3, #25
 800b28e:	bf48      	it	mi
 800b290:	b2b6      	uxthmi	r6, r6
 800b292:	e7e6      	b.n	800b262 <_printf_i+0x182>
 800b294:	4615      	mov	r5, r2
 800b296:	e7bb      	b.n	800b210 <_printf_i+0x130>
 800b298:	682b      	ldr	r3, [r5, #0]
 800b29a:	6826      	ldr	r6, [r4, #0]
 800b29c:	6961      	ldr	r1, [r4, #20]
 800b29e:	1d18      	adds	r0, r3, #4
 800b2a0:	6028      	str	r0, [r5, #0]
 800b2a2:	0635      	lsls	r5, r6, #24
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	d501      	bpl.n	800b2ac <_printf_i+0x1cc>
 800b2a8:	6019      	str	r1, [r3, #0]
 800b2aa:	e002      	b.n	800b2b2 <_printf_i+0x1d2>
 800b2ac:	0670      	lsls	r0, r6, #25
 800b2ae:	d5fb      	bpl.n	800b2a8 <_printf_i+0x1c8>
 800b2b0:	8019      	strh	r1, [r3, #0]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	6123      	str	r3, [r4, #16]
 800b2b6:	4615      	mov	r5, r2
 800b2b8:	e7ba      	b.n	800b230 <_printf_i+0x150>
 800b2ba:	682b      	ldr	r3, [r5, #0]
 800b2bc:	1d1a      	adds	r2, r3, #4
 800b2be:	602a      	str	r2, [r5, #0]
 800b2c0:	681d      	ldr	r5, [r3, #0]
 800b2c2:	6862      	ldr	r2, [r4, #4]
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	f7f4 ff8a 	bl	80001e0 <memchr>
 800b2cc:	b108      	cbz	r0, 800b2d2 <_printf_i+0x1f2>
 800b2ce:	1b40      	subs	r0, r0, r5
 800b2d0:	6060      	str	r0, [r4, #4]
 800b2d2:	6863      	ldr	r3, [r4, #4]
 800b2d4:	6123      	str	r3, [r4, #16]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2dc:	e7a8      	b.n	800b230 <_printf_i+0x150>
 800b2de:	6923      	ldr	r3, [r4, #16]
 800b2e0:	462a      	mov	r2, r5
 800b2e2:	4649      	mov	r1, r9
 800b2e4:	4640      	mov	r0, r8
 800b2e6:	47d0      	blx	sl
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	d0ab      	beq.n	800b244 <_printf_i+0x164>
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	079b      	lsls	r3, r3, #30
 800b2f0:	d413      	bmi.n	800b31a <_printf_i+0x23a>
 800b2f2:	68e0      	ldr	r0, [r4, #12]
 800b2f4:	9b03      	ldr	r3, [sp, #12]
 800b2f6:	4298      	cmp	r0, r3
 800b2f8:	bfb8      	it	lt
 800b2fa:	4618      	movlt	r0, r3
 800b2fc:	e7a4      	b.n	800b248 <_printf_i+0x168>
 800b2fe:	2301      	movs	r3, #1
 800b300:	4632      	mov	r2, r6
 800b302:	4649      	mov	r1, r9
 800b304:	4640      	mov	r0, r8
 800b306:	47d0      	blx	sl
 800b308:	3001      	adds	r0, #1
 800b30a:	d09b      	beq.n	800b244 <_printf_i+0x164>
 800b30c:	3501      	adds	r5, #1
 800b30e:	68e3      	ldr	r3, [r4, #12]
 800b310:	9903      	ldr	r1, [sp, #12]
 800b312:	1a5b      	subs	r3, r3, r1
 800b314:	42ab      	cmp	r3, r5
 800b316:	dcf2      	bgt.n	800b2fe <_printf_i+0x21e>
 800b318:	e7eb      	b.n	800b2f2 <_printf_i+0x212>
 800b31a:	2500      	movs	r5, #0
 800b31c:	f104 0619 	add.w	r6, r4, #25
 800b320:	e7f5      	b.n	800b30e <_printf_i+0x22e>
 800b322:	bf00      	nop
 800b324:	0800f26a 	.word	0x0800f26a
 800b328:	0800f27b 	.word	0x0800f27b

0800b32c <_scanf_float>:
 800b32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b330:	b087      	sub	sp, #28
 800b332:	4617      	mov	r7, r2
 800b334:	9303      	str	r3, [sp, #12]
 800b336:	688b      	ldr	r3, [r1, #8]
 800b338:	1e5a      	subs	r2, r3, #1
 800b33a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b33e:	bf83      	ittte	hi
 800b340:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b344:	195b      	addhi	r3, r3, r5
 800b346:	9302      	strhi	r3, [sp, #8]
 800b348:	2300      	movls	r3, #0
 800b34a:	bf86      	itte	hi
 800b34c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b350:	608b      	strhi	r3, [r1, #8]
 800b352:	9302      	strls	r3, [sp, #8]
 800b354:	680b      	ldr	r3, [r1, #0]
 800b356:	468b      	mov	fp, r1
 800b358:	2500      	movs	r5, #0
 800b35a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b35e:	f84b 3b1c 	str.w	r3, [fp], #28
 800b362:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b366:	4680      	mov	r8, r0
 800b368:	460c      	mov	r4, r1
 800b36a:	465e      	mov	r6, fp
 800b36c:	46aa      	mov	sl, r5
 800b36e:	46a9      	mov	r9, r5
 800b370:	9501      	str	r5, [sp, #4]
 800b372:	68a2      	ldr	r2, [r4, #8]
 800b374:	b152      	cbz	r2, 800b38c <_scanf_float+0x60>
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2b4e      	cmp	r3, #78	; 0x4e
 800b37c:	d864      	bhi.n	800b448 <_scanf_float+0x11c>
 800b37e:	2b40      	cmp	r3, #64	; 0x40
 800b380:	d83c      	bhi.n	800b3fc <_scanf_float+0xd0>
 800b382:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b386:	b2c8      	uxtb	r0, r1
 800b388:	280e      	cmp	r0, #14
 800b38a:	d93a      	bls.n	800b402 <_scanf_float+0xd6>
 800b38c:	f1b9 0f00 	cmp.w	r9, #0
 800b390:	d003      	beq.n	800b39a <_scanf_float+0x6e>
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b398:	6023      	str	r3, [r4, #0]
 800b39a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b39e:	f1ba 0f01 	cmp.w	sl, #1
 800b3a2:	f200 8113 	bhi.w	800b5cc <_scanf_float+0x2a0>
 800b3a6:	455e      	cmp	r6, fp
 800b3a8:	f200 8105 	bhi.w	800b5b6 <_scanf_float+0x28a>
 800b3ac:	2501      	movs	r5, #1
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	b007      	add	sp, #28
 800b3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b3ba:	2a0d      	cmp	r2, #13
 800b3bc:	d8e6      	bhi.n	800b38c <_scanf_float+0x60>
 800b3be:	a101      	add	r1, pc, #4	; (adr r1, 800b3c4 <_scanf_float+0x98>)
 800b3c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b3c4:	0800b503 	.word	0x0800b503
 800b3c8:	0800b38d 	.word	0x0800b38d
 800b3cc:	0800b38d 	.word	0x0800b38d
 800b3d0:	0800b38d 	.word	0x0800b38d
 800b3d4:	0800b563 	.word	0x0800b563
 800b3d8:	0800b53b 	.word	0x0800b53b
 800b3dc:	0800b38d 	.word	0x0800b38d
 800b3e0:	0800b38d 	.word	0x0800b38d
 800b3e4:	0800b511 	.word	0x0800b511
 800b3e8:	0800b38d 	.word	0x0800b38d
 800b3ec:	0800b38d 	.word	0x0800b38d
 800b3f0:	0800b38d 	.word	0x0800b38d
 800b3f4:	0800b38d 	.word	0x0800b38d
 800b3f8:	0800b4c9 	.word	0x0800b4c9
 800b3fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b400:	e7db      	b.n	800b3ba <_scanf_float+0x8e>
 800b402:	290e      	cmp	r1, #14
 800b404:	d8c2      	bhi.n	800b38c <_scanf_float+0x60>
 800b406:	a001      	add	r0, pc, #4	; (adr r0, 800b40c <_scanf_float+0xe0>)
 800b408:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b40c:	0800b4bb 	.word	0x0800b4bb
 800b410:	0800b38d 	.word	0x0800b38d
 800b414:	0800b4bb 	.word	0x0800b4bb
 800b418:	0800b54f 	.word	0x0800b54f
 800b41c:	0800b38d 	.word	0x0800b38d
 800b420:	0800b469 	.word	0x0800b469
 800b424:	0800b4a5 	.word	0x0800b4a5
 800b428:	0800b4a5 	.word	0x0800b4a5
 800b42c:	0800b4a5 	.word	0x0800b4a5
 800b430:	0800b4a5 	.word	0x0800b4a5
 800b434:	0800b4a5 	.word	0x0800b4a5
 800b438:	0800b4a5 	.word	0x0800b4a5
 800b43c:	0800b4a5 	.word	0x0800b4a5
 800b440:	0800b4a5 	.word	0x0800b4a5
 800b444:	0800b4a5 	.word	0x0800b4a5
 800b448:	2b6e      	cmp	r3, #110	; 0x6e
 800b44a:	d809      	bhi.n	800b460 <_scanf_float+0x134>
 800b44c:	2b60      	cmp	r3, #96	; 0x60
 800b44e:	d8b2      	bhi.n	800b3b6 <_scanf_float+0x8a>
 800b450:	2b54      	cmp	r3, #84	; 0x54
 800b452:	d077      	beq.n	800b544 <_scanf_float+0x218>
 800b454:	2b59      	cmp	r3, #89	; 0x59
 800b456:	d199      	bne.n	800b38c <_scanf_float+0x60>
 800b458:	2d07      	cmp	r5, #7
 800b45a:	d197      	bne.n	800b38c <_scanf_float+0x60>
 800b45c:	2508      	movs	r5, #8
 800b45e:	e029      	b.n	800b4b4 <_scanf_float+0x188>
 800b460:	2b74      	cmp	r3, #116	; 0x74
 800b462:	d06f      	beq.n	800b544 <_scanf_float+0x218>
 800b464:	2b79      	cmp	r3, #121	; 0x79
 800b466:	e7f6      	b.n	800b456 <_scanf_float+0x12a>
 800b468:	6821      	ldr	r1, [r4, #0]
 800b46a:	05c8      	lsls	r0, r1, #23
 800b46c:	d51a      	bpl.n	800b4a4 <_scanf_float+0x178>
 800b46e:	9b02      	ldr	r3, [sp, #8]
 800b470:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b474:	6021      	str	r1, [r4, #0]
 800b476:	f109 0901 	add.w	r9, r9, #1
 800b47a:	b11b      	cbz	r3, 800b484 <_scanf_float+0x158>
 800b47c:	3b01      	subs	r3, #1
 800b47e:	3201      	adds	r2, #1
 800b480:	9302      	str	r3, [sp, #8]
 800b482:	60a2      	str	r2, [r4, #8]
 800b484:	68a3      	ldr	r3, [r4, #8]
 800b486:	3b01      	subs	r3, #1
 800b488:	60a3      	str	r3, [r4, #8]
 800b48a:	6923      	ldr	r3, [r4, #16]
 800b48c:	3301      	adds	r3, #1
 800b48e:	6123      	str	r3, [r4, #16]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	3b01      	subs	r3, #1
 800b494:	2b00      	cmp	r3, #0
 800b496:	607b      	str	r3, [r7, #4]
 800b498:	f340 8084 	ble.w	800b5a4 <_scanf_float+0x278>
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	603b      	str	r3, [r7, #0]
 800b4a2:	e766      	b.n	800b372 <_scanf_float+0x46>
 800b4a4:	eb1a 0f05 	cmn.w	sl, r5
 800b4a8:	f47f af70 	bne.w	800b38c <_scanf_float+0x60>
 800b4ac:	6822      	ldr	r2, [r4, #0]
 800b4ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b4b2:	6022      	str	r2, [r4, #0]
 800b4b4:	f806 3b01 	strb.w	r3, [r6], #1
 800b4b8:	e7e4      	b.n	800b484 <_scanf_float+0x158>
 800b4ba:	6822      	ldr	r2, [r4, #0]
 800b4bc:	0610      	lsls	r0, r2, #24
 800b4be:	f57f af65 	bpl.w	800b38c <_scanf_float+0x60>
 800b4c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4c6:	e7f4      	b.n	800b4b2 <_scanf_float+0x186>
 800b4c8:	f1ba 0f00 	cmp.w	sl, #0
 800b4cc:	d10e      	bne.n	800b4ec <_scanf_float+0x1c0>
 800b4ce:	f1b9 0f00 	cmp.w	r9, #0
 800b4d2:	d10e      	bne.n	800b4f2 <_scanf_float+0x1c6>
 800b4d4:	6822      	ldr	r2, [r4, #0]
 800b4d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b4da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b4de:	d108      	bne.n	800b4f2 <_scanf_float+0x1c6>
 800b4e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b4e4:	6022      	str	r2, [r4, #0]
 800b4e6:	f04f 0a01 	mov.w	sl, #1
 800b4ea:	e7e3      	b.n	800b4b4 <_scanf_float+0x188>
 800b4ec:	f1ba 0f02 	cmp.w	sl, #2
 800b4f0:	d055      	beq.n	800b59e <_scanf_float+0x272>
 800b4f2:	2d01      	cmp	r5, #1
 800b4f4:	d002      	beq.n	800b4fc <_scanf_float+0x1d0>
 800b4f6:	2d04      	cmp	r5, #4
 800b4f8:	f47f af48 	bne.w	800b38c <_scanf_float+0x60>
 800b4fc:	3501      	adds	r5, #1
 800b4fe:	b2ed      	uxtb	r5, r5
 800b500:	e7d8      	b.n	800b4b4 <_scanf_float+0x188>
 800b502:	f1ba 0f01 	cmp.w	sl, #1
 800b506:	f47f af41 	bne.w	800b38c <_scanf_float+0x60>
 800b50a:	f04f 0a02 	mov.w	sl, #2
 800b50e:	e7d1      	b.n	800b4b4 <_scanf_float+0x188>
 800b510:	b97d      	cbnz	r5, 800b532 <_scanf_float+0x206>
 800b512:	f1b9 0f00 	cmp.w	r9, #0
 800b516:	f47f af3c 	bne.w	800b392 <_scanf_float+0x66>
 800b51a:	6822      	ldr	r2, [r4, #0]
 800b51c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b520:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b524:	f47f af39 	bne.w	800b39a <_scanf_float+0x6e>
 800b528:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b52c:	6022      	str	r2, [r4, #0]
 800b52e:	2501      	movs	r5, #1
 800b530:	e7c0      	b.n	800b4b4 <_scanf_float+0x188>
 800b532:	2d03      	cmp	r5, #3
 800b534:	d0e2      	beq.n	800b4fc <_scanf_float+0x1d0>
 800b536:	2d05      	cmp	r5, #5
 800b538:	e7de      	b.n	800b4f8 <_scanf_float+0x1cc>
 800b53a:	2d02      	cmp	r5, #2
 800b53c:	f47f af26 	bne.w	800b38c <_scanf_float+0x60>
 800b540:	2503      	movs	r5, #3
 800b542:	e7b7      	b.n	800b4b4 <_scanf_float+0x188>
 800b544:	2d06      	cmp	r5, #6
 800b546:	f47f af21 	bne.w	800b38c <_scanf_float+0x60>
 800b54a:	2507      	movs	r5, #7
 800b54c:	e7b2      	b.n	800b4b4 <_scanf_float+0x188>
 800b54e:	6822      	ldr	r2, [r4, #0]
 800b550:	0591      	lsls	r1, r2, #22
 800b552:	f57f af1b 	bpl.w	800b38c <_scanf_float+0x60>
 800b556:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b55a:	6022      	str	r2, [r4, #0]
 800b55c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b560:	e7a8      	b.n	800b4b4 <_scanf_float+0x188>
 800b562:	6822      	ldr	r2, [r4, #0]
 800b564:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b568:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b56c:	d006      	beq.n	800b57c <_scanf_float+0x250>
 800b56e:	0550      	lsls	r0, r2, #21
 800b570:	f57f af0c 	bpl.w	800b38c <_scanf_float+0x60>
 800b574:	f1b9 0f00 	cmp.w	r9, #0
 800b578:	f43f af0f 	beq.w	800b39a <_scanf_float+0x6e>
 800b57c:	0591      	lsls	r1, r2, #22
 800b57e:	bf58      	it	pl
 800b580:	9901      	ldrpl	r1, [sp, #4]
 800b582:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b586:	bf58      	it	pl
 800b588:	eba9 0101 	subpl.w	r1, r9, r1
 800b58c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b590:	bf58      	it	pl
 800b592:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b596:	6022      	str	r2, [r4, #0]
 800b598:	f04f 0900 	mov.w	r9, #0
 800b59c:	e78a      	b.n	800b4b4 <_scanf_float+0x188>
 800b59e:	f04f 0a03 	mov.w	sl, #3
 800b5a2:	e787      	b.n	800b4b4 <_scanf_float+0x188>
 800b5a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	4640      	mov	r0, r8
 800b5ac:	4798      	blx	r3
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	f43f aedf 	beq.w	800b372 <_scanf_float+0x46>
 800b5b4:	e6ea      	b.n	800b38c <_scanf_float+0x60>
 800b5b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b5be:	463a      	mov	r2, r7
 800b5c0:	4640      	mov	r0, r8
 800b5c2:	4798      	blx	r3
 800b5c4:	6923      	ldr	r3, [r4, #16]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	6123      	str	r3, [r4, #16]
 800b5ca:	e6ec      	b.n	800b3a6 <_scanf_float+0x7a>
 800b5cc:	1e6b      	subs	r3, r5, #1
 800b5ce:	2b06      	cmp	r3, #6
 800b5d0:	d825      	bhi.n	800b61e <_scanf_float+0x2f2>
 800b5d2:	2d02      	cmp	r5, #2
 800b5d4:	d836      	bhi.n	800b644 <_scanf_float+0x318>
 800b5d6:	455e      	cmp	r6, fp
 800b5d8:	f67f aee8 	bls.w	800b3ac <_scanf_float+0x80>
 800b5dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b5e4:	463a      	mov	r2, r7
 800b5e6:	4640      	mov	r0, r8
 800b5e8:	4798      	blx	r3
 800b5ea:	6923      	ldr	r3, [r4, #16]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	6123      	str	r3, [r4, #16]
 800b5f0:	e7f1      	b.n	800b5d6 <_scanf_float+0x2aa>
 800b5f2:	9802      	ldr	r0, [sp, #8]
 800b5f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b5fc:	9002      	str	r0, [sp, #8]
 800b5fe:	463a      	mov	r2, r7
 800b600:	4640      	mov	r0, r8
 800b602:	4798      	blx	r3
 800b604:	6923      	ldr	r3, [r4, #16]
 800b606:	3b01      	subs	r3, #1
 800b608:	6123      	str	r3, [r4, #16]
 800b60a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b60e:	fa5f fa8a 	uxtb.w	sl, sl
 800b612:	f1ba 0f02 	cmp.w	sl, #2
 800b616:	d1ec      	bne.n	800b5f2 <_scanf_float+0x2c6>
 800b618:	3d03      	subs	r5, #3
 800b61a:	b2ed      	uxtb	r5, r5
 800b61c:	1b76      	subs	r6, r6, r5
 800b61e:	6823      	ldr	r3, [r4, #0]
 800b620:	05da      	lsls	r2, r3, #23
 800b622:	d52f      	bpl.n	800b684 <_scanf_float+0x358>
 800b624:	055b      	lsls	r3, r3, #21
 800b626:	d510      	bpl.n	800b64a <_scanf_float+0x31e>
 800b628:	455e      	cmp	r6, fp
 800b62a:	f67f aebf 	bls.w	800b3ac <_scanf_float+0x80>
 800b62e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b632:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b636:	463a      	mov	r2, r7
 800b638:	4640      	mov	r0, r8
 800b63a:	4798      	blx	r3
 800b63c:	6923      	ldr	r3, [r4, #16]
 800b63e:	3b01      	subs	r3, #1
 800b640:	6123      	str	r3, [r4, #16]
 800b642:	e7f1      	b.n	800b628 <_scanf_float+0x2fc>
 800b644:	46aa      	mov	sl, r5
 800b646:	9602      	str	r6, [sp, #8]
 800b648:	e7df      	b.n	800b60a <_scanf_float+0x2de>
 800b64a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b64e:	6923      	ldr	r3, [r4, #16]
 800b650:	2965      	cmp	r1, #101	; 0x65
 800b652:	f103 33ff 	add.w	r3, r3, #4294967295
 800b656:	f106 35ff 	add.w	r5, r6, #4294967295
 800b65a:	6123      	str	r3, [r4, #16]
 800b65c:	d00c      	beq.n	800b678 <_scanf_float+0x34c>
 800b65e:	2945      	cmp	r1, #69	; 0x45
 800b660:	d00a      	beq.n	800b678 <_scanf_float+0x34c>
 800b662:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b666:	463a      	mov	r2, r7
 800b668:	4640      	mov	r0, r8
 800b66a:	4798      	blx	r3
 800b66c:	6923      	ldr	r3, [r4, #16]
 800b66e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b672:	3b01      	subs	r3, #1
 800b674:	1eb5      	subs	r5, r6, #2
 800b676:	6123      	str	r3, [r4, #16]
 800b678:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b67c:	463a      	mov	r2, r7
 800b67e:	4640      	mov	r0, r8
 800b680:	4798      	blx	r3
 800b682:	462e      	mov	r6, r5
 800b684:	6825      	ldr	r5, [r4, #0]
 800b686:	f015 0510 	ands.w	r5, r5, #16
 800b68a:	d159      	bne.n	800b740 <_scanf_float+0x414>
 800b68c:	7035      	strb	r5, [r6, #0]
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b698:	d11b      	bne.n	800b6d2 <_scanf_float+0x3a6>
 800b69a:	9b01      	ldr	r3, [sp, #4]
 800b69c:	454b      	cmp	r3, r9
 800b69e:	eba3 0209 	sub.w	r2, r3, r9
 800b6a2:	d123      	bne.n	800b6ec <_scanf_float+0x3c0>
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	4659      	mov	r1, fp
 800b6a8:	4640      	mov	r0, r8
 800b6aa:	f000 ff57 	bl	800c55c <_strtod_r>
 800b6ae:	6822      	ldr	r2, [r4, #0]
 800b6b0:	9b03      	ldr	r3, [sp, #12]
 800b6b2:	f012 0f02 	tst.w	r2, #2
 800b6b6:	ec57 6b10 	vmov	r6, r7, d0
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	d021      	beq.n	800b702 <_scanf_float+0x3d6>
 800b6be:	9903      	ldr	r1, [sp, #12]
 800b6c0:	1d1a      	adds	r2, r3, #4
 800b6c2:	600a      	str	r2, [r1, #0]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	e9c3 6700 	strd	r6, r7, [r3]
 800b6ca:	68e3      	ldr	r3, [r4, #12]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	60e3      	str	r3, [r4, #12]
 800b6d0:	e66d      	b.n	800b3ae <_scanf_float+0x82>
 800b6d2:	9b04      	ldr	r3, [sp, #16]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d0e5      	beq.n	800b6a4 <_scanf_float+0x378>
 800b6d8:	9905      	ldr	r1, [sp, #20]
 800b6da:	230a      	movs	r3, #10
 800b6dc:	462a      	mov	r2, r5
 800b6de:	3101      	adds	r1, #1
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	f000 ffc3 	bl	800c66c <_strtol_r>
 800b6e6:	9b04      	ldr	r3, [sp, #16]
 800b6e8:	9e05      	ldr	r6, [sp, #20]
 800b6ea:	1ac2      	subs	r2, r0, r3
 800b6ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b6f0:	429e      	cmp	r6, r3
 800b6f2:	bf28      	it	cs
 800b6f4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b6f8:	4912      	ldr	r1, [pc, #72]	; (800b744 <_scanf_float+0x418>)
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	f000 f8a6 	bl	800b84c <siprintf>
 800b700:	e7d0      	b.n	800b6a4 <_scanf_float+0x378>
 800b702:	9903      	ldr	r1, [sp, #12]
 800b704:	f012 0f04 	tst.w	r2, #4
 800b708:	f103 0204 	add.w	r2, r3, #4
 800b70c:	600a      	str	r2, [r1, #0]
 800b70e:	d1d9      	bne.n	800b6c4 <_scanf_float+0x398>
 800b710:	f8d3 8000 	ldr.w	r8, [r3]
 800b714:	ee10 2a10 	vmov	r2, s0
 800b718:	ee10 0a10 	vmov	r0, s0
 800b71c:	463b      	mov	r3, r7
 800b71e:	4639      	mov	r1, r7
 800b720:	f7f5 fa04 	bl	8000b2c <__aeabi_dcmpun>
 800b724:	b128      	cbz	r0, 800b732 <_scanf_float+0x406>
 800b726:	4808      	ldr	r0, [pc, #32]	; (800b748 <_scanf_float+0x41c>)
 800b728:	f000 f88a 	bl	800b840 <nanf>
 800b72c:	ed88 0a00 	vstr	s0, [r8]
 800b730:	e7cb      	b.n	800b6ca <_scanf_float+0x39e>
 800b732:	4630      	mov	r0, r6
 800b734:	4639      	mov	r1, r7
 800b736:	f7f5 fa57 	bl	8000be8 <__aeabi_d2f>
 800b73a:	f8c8 0000 	str.w	r0, [r8]
 800b73e:	e7c4      	b.n	800b6ca <_scanf_float+0x39e>
 800b740:	2500      	movs	r5, #0
 800b742:	e634      	b.n	800b3ae <_scanf_float+0x82>
 800b744:	0800f28c 	.word	0x0800f28c
 800b748:	0800f323 	.word	0x0800f323

0800b74c <cleanup_glue>:
 800b74c:	b538      	push	{r3, r4, r5, lr}
 800b74e:	460c      	mov	r4, r1
 800b750:	6809      	ldr	r1, [r1, #0]
 800b752:	4605      	mov	r5, r0
 800b754:	b109      	cbz	r1, 800b75a <cleanup_glue+0xe>
 800b756:	f7ff fff9 	bl	800b74c <cleanup_glue>
 800b75a:	4621      	mov	r1, r4
 800b75c:	4628      	mov	r0, r5
 800b75e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b762:	f003 b8bd 	b.w	800e8e0 <_free_r>
	...

0800b768 <_reclaim_reent>:
 800b768:	4b2c      	ldr	r3, [pc, #176]	; (800b81c <_reclaim_reent+0xb4>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4283      	cmp	r3, r0
 800b76e:	b570      	push	{r4, r5, r6, lr}
 800b770:	4604      	mov	r4, r0
 800b772:	d051      	beq.n	800b818 <_reclaim_reent+0xb0>
 800b774:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b776:	b143      	cbz	r3, 800b78a <_reclaim_reent+0x22>
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d14a      	bne.n	800b814 <_reclaim_reent+0xac>
 800b77e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b780:	6819      	ldr	r1, [r3, #0]
 800b782:	b111      	cbz	r1, 800b78a <_reclaim_reent+0x22>
 800b784:	4620      	mov	r0, r4
 800b786:	f003 f8ab 	bl	800e8e0 <_free_r>
 800b78a:	6961      	ldr	r1, [r4, #20]
 800b78c:	b111      	cbz	r1, 800b794 <_reclaim_reent+0x2c>
 800b78e:	4620      	mov	r0, r4
 800b790:	f003 f8a6 	bl	800e8e0 <_free_r>
 800b794:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b796:	b111      	cbz	r1, 800b79e <_reclaim_reent+0x36>
 800b798:	4620      	mov	r0, r4
 800b79a:	f003 f8a1 	bl	800e8e0 <_free_r>
 800b79e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b7a0:	b111      	cbz	r1, 800b7a8 <_reclaim_reent+0x40>
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f003 f89c 	bl	800e8e0 <_free_r>
 800b7a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b7aa:	b111      	cbz	r1, 800b7b2 <_reclaim_reent+0x4a>
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f003 f897 	bl	800e8e0 <_free_r>
 800b7b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b7b4:	b111      	cbz	r1, 800b7bc <_reclaim_reent+0x54>
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f003 f892 	bl	800e8e0 <_free_r>
 800b7bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b7be:	b111      	cbz	r1, 800b7c6 <_reclaim_reent+0x5e>
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f003 f88d 	bl	800e8e0 <_free_r>
 800b7c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b7c8:	b111      	cbz	r1, 800b7d0 <_reclaim_reent+0x68>
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f003 f888 	bl	800e8e0 <_free_r>
 800b7d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7d2:	b111      	cbz	r1, 800b7da <_reclaim_reent+0x72>
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f003 f883 	bl	800e8e0 <_free_r>
 800b7da:	69a3      	ldr	r3, [r4, #24]
 800b7dc:	b1e3      	cbz	r3, 800b818 <_reclaim_reent+0xb0>
 800b7de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	4798      	blx	r3
 800b7e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b7e6:	b1b9      	cbz	r1, 800b818 <_reclaim_reent+0xb0>
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7ee:	f7ff bfad 	b.w	800b74c <cleanup_glue>
 800b7f2:	5949      	ldr	r1, [r1, r5]
 800b7f4:	b941      	cbnz	r1, 800b808 <_reclaim_reent+0xa0>
 800b7f6:	3504      	adds	r5, #4
 800b7f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7fa:	2d80      	cmp	r5, #128	; 0x80
 800b7fc:	68d9      	ldr	r1, [r3, #12]
 800b7fe:	d1f8      	bne.n	800b7f2 <_reclaim_reent+0x8a>
 800b800:	4620      	mov	r0, r4
 800b802:	f003 f86d 	bl	800e8e0 <_free_r>
 800b806:	e7ba      	b.n	800b77e <_reclaim_reent+0x16>
 800b808:	680e      	ldr	r6, [r1, #0]
 800b80a:	4620      	mov	r0, r4
 800b80c:	f003 f868 	bl	800e8e0 <_free_r>
 800b810:	4631      	mov	r1, r6
 800b812:	e7ef      	b.n	800b7f4 <_reclaim_reent+0x8c>
 800b814:	2500      	movs	r5, #0
 800b816:	e7ef      	b.n	800b7f8 <_reclaim_reent+0x90>
 800b818:	bd70      	pop	{r4, r5, r6, pc}
 800b81a:	bf00      	nop
 800b81c:	20000094 	.word	0x20000094

0800b820 <_sbrk_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	4d06      	ldr	r5, [pc, #24]	; (800b83c <_sbrk_r+0x1c>)
 800b824:	2300      	movs	r3, #0
 800b826:	4604      	mov	r4, r0
 800b828:	4608      	mov	r0, r1
 800b82a:	602b      	str	r3, [r5, #0]
 800b82c:	f7f5 fefe 	bl	800162c <_sbrk>
 800b830:	1c43      	adds	r3, r0, #1
 800b832:	d102      	bne.n	800b83a <_sbrk_r+0x1a>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	b103      	cbz	r3, 800b83a <_sbrk_r+0x1a>
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	bd38      	pop	{r3, r4, r5, pc}
 800b83c:	20008418 	.word	0x20008418

0800b840 <nanf>:
 800b840:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b848 <nanf+0x8>
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	7fc00000 	.word	0x7fc00000

0800b84c <siprintf>:
 800b84c:	b40e      	push	{r1, r2, r3}
 800b84e:	b500      	push	{lr}
 800b850:	b09c      	sub	sp, #112	; 0x70
 800b852:	ab1d      	add	r3, sp, #116	; 0x74
 800b854:	9002      	str	r0, [sp, #8]
 800b856:	9006      	str	r0, [sp, #24]
 800b858:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b85c:	4809      	ldr	r0, [pc, #36]	; (800b884 <siprintf+0x38>)
 800b85e:	9107      	str	r1, [sp, #28]
 800b860:	9104      	str	r1, [sp, #16]
 800b862:	4909      	ldr	r1, [pc, #36]	; (800b888 <siprintf+0x3c>)
 800b864:	f853 2b04 	ldr.w	r2, [r3], #4
 800b868:	9105      	str	r1, [sp, #20]
 800b86a:	6800      	ldr	r0, [r0, #0]
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	a902      	add	r1, sp, #8
 800b870:	f003 f8de 	bl	800ea30 <_svfiprintf_r>
 800b874:	9b02      	ldr	r3, [sp, #8]
 800b876:	2200      	movs	r2, #0
 800b878:	701a      	strb	r2, [r3, #0]
 800b87a:	b01c      	add	sp, #112	; 0x70
 800b87c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b880:	b003      	add	sp, #12
 800b882:	4770      	bx	lr
 800b884:	20000094 	.word	0x20000094
 800b888:	ffff0208 	.word	0xffff0208

0800b88c <__sread>:
 800b88c:	b510      	push	{r4, lr}
 800b88e:	460c      	mov	r4, r1
 800b890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b894:	f003 fb26 	bl	800eee4 <_read_r>
 800b898:	2800      	cmp	r0, #0
 800b89a:	bfab      	itete	ge
 800b89c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b89e:	89a3      	ldrhlt	r3, [r4, #12]
 800b8a0:	181b      	addge	r3, r3, r0
 800b8a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8a6:	bfac      	ite	ge
 800b8a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8aa:	81a3      	strhlt	r3, [r4, #12]
 800b8ac:	bd10      	pop	{r4, pc}

0800b8ae <__swrite>:
 800b8ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b2:	461f      	mov	r7, r3
 800b8b4:	898b      	ldrh	r3, [r1, #12]
 800b8b6:	05db      	lsls	r3, r3, #23
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	4616      	mov	r6, r2
 800b8be:	d505      	bpl.n	800b8cc <__swrite+0x1e>
 800b8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8c4:	2302      	movs	r3, #2
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f002 fa94 	bl	800ddf4 <_lseek_r>
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8d6:	81a3      	strh	r3, [r4, #12]
 800b8d8:	4632      	mov	r2, r6
 800b8da:	463b      	mov	r3, r7
 800b8dc:	4628      	mov	r0, r5
 800b8de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e2:	f000 bf17 	b.w	800c714 <_write_r>

0800b8e6 <__sseek>:
 800b8e6:	b510      	push	{r4, lr}
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ee:	f002 fa81 	bl	800ddf4 <_lseek_r>
 800b8f2:	1c43      	adds	r3, r0, #1
 800b8f4:	89a3      	ldrh	r3, [r4, #12]
 800b8f6:	bf15      	itete	ne
 800b8f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b902:	81a3      	strheq	r3, [r4, #12]
 800b904:	bf18      	it	ne
 800b906:	81a3      	strhne	r3, [r4, #12]
 800b908:	bd10      	pop	{r4, pc}

0800b90a <__sclose>:
 800b90a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b90e:	f000 bf9f 	b.w	800c850 <_close_r>

0800b912 <sulp>:
 800b912:	b570      	push	{r4, r5, r6, lr}
 800b914:	4604      	mov	r4, r0
 800b916:	460d      	mov	r5, r1
 800b918:	ec45 4b10 	vmov	d0, r4, r5
 800b91c:	4616      	mov	r6, r2
 800b91e:	f002 fe79 	bl	800e614 <__ulp>
 800b922:	ec51 0b10 	vmov	r0, r1, d0
 800b926:	b17e      	cbz	r6, 800b948 <sulp+0x36>
 800b928:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b92c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b930:	2b00      	cmp	r3, #0
 800b932:	dd09      	ble.n	800b948 <sulp+0x36>
 800b934:	051b      	lsls	r3, r3, #20
 800b936:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b93a:	2400      	movs	r4, #0
 800b93c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b940:	4622      	mov	r2, r4
 800b942:	462b      	mov	r3, r5
 800b944:	f7f4 fe58 	bl	80005f8 <__aeabi_dmul>
 800b948:	bd70      	pop	{r4, r5, r6, pc}
 800b94a:	0000      	movs	r0, r0
 800b94c:	0000      	movs	r0, r0
	...

0800b950 <_strtod_l>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	ed2d 8b02 	vpush	{d8}
 800b958:	b09d      	sub	sp, #116	; 0x74
 800b95a:	461f      	mov	r7, r3
 800b95c:	2300      	movs	r3, #0
 800b95e:	9318      	str	r3, [sp, #96]	; 0x60
 800b960:	4ba2      	ldr	r3, [pc, #648]	; (800bbec <_strtod_l+0x29c>)
 800b962:	9213      	str	r2, [sp, #76]	; 0x4c
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	9305      	str	r3, [sp, #20]
 800b968:	4604      	mov	r4, r0
 800b96a:	4618      	mov	r0, r3
 800b96c:	4688      	mov	r8, r1
 800b96e:	f7f4 fc2f 	bl	80001d0 <strlen>
 800b972:	f04f 0a00 	mov.w	sl, #0
 800b976:	4605      	mov	r5, r0
 800b978:	f04f 0b00 	mov.w	fp, #0
 800b97c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b980:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b982:	781a      	ldrb	r2, [r3, #0]
 800b984:	2a2b      	cmp	r2, #43	; 0x2b
 800b986:	d04e      	beq.n	800ba26 <_strtod_l+0xd6>
 800b988:	d83b      	bhi.n	800ba02 <_strtod_l+0xb2>
 800b98a:	2a0d      	cmp	r2, #13
 800b98c:	d834      	bhi.n	800b9f8 <_strtod_l+0xa8>
 800b98e:	2a08      	cmp	r2, #8
 800b990:	d834      	bhi.n	800b9fc <_strtod_l+0xac>
 800b992:	2a00      	cmp	r2, #0
 800b994:	d03e      	beq.n	800ba14 <_strtod_l+0xc4>
 800b996:	2300      	movs	r3, #0
 800b998:	930a      	str	r3, [sp, #40]	; 0x28
 800b99a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b99c:	7833      	ldrb	r3, [r6, #0]
 800b99e:	2b30      	cmp	r3, #48	; 0x30
 800b9a0:	f040 80b0 	bne.w	800bb04 <_strtod_l+0x1b4>
 800b9a4:	7873      	ldrb	r3, [r6, #1]
 800b9a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b9aa:	2b58      	cmp	r3, #88	; 0x58
 800b9ac:	d168      	bne.n	800ba80 <_strtod_l+0x130>
 800b9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	ab18      	add	r3, sp, #96	; 0x60
 800b9b4:	9702      	str	r7, [sp, #8]
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	4a8d      	ldr	r2, [pc, #564]	; (800bbf0 <_strtod_l+0x2a0>)
 800b9ba:	ab19      	add	r3, sp, #100	; 0x64
 800b9bc:	a917      	add	r1, sp, #92	; 0x5c
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f001 ff0c 	bl	800d7dc <__gethex>
 800b9c4:	f010 0707 	ands.w	r7, r0, #7
 800b9c8:	4605      	mov	r5, r0
 800b9ca:	d005      	beq.n	800b9d8 <_strtod_l+0x88>
 800b9cc:	2f06      	cmp	r7, #6
 800b9ce:	d12c      	bne.n	800ba2a <_strtod_l+0xda>
 800b9d0:	3601      	adds	r6, #1
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	9617      	str	r6, [sp, #92]	; 0x5c
 800b9d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b9d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f040 8590 	bne.w	800c500 <_strtod_l+0xbb0>
 800b9e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9e2:	b1eb      	cbz	r3, 800ba20 <_strtod_l+0xd0>
 800b9e4:	4652      	mov	r2, sl
 800b9e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b9ea:	ec43 2b10 	vmov	d0, r2, r3
 800b9ee:	b01d      	add	sp, #116	; 0x74
 800b9f0:	ecbd 8b02 	vpop	{d8}
 800b9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f8:	2a20      	cmp	r2, #32
 800b9fa:	d1cc      	bne.n	800b996 <_strtod_l+0x46>
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800ba00:	e7be      	b.n	800b980 <_strtod_l+0x30>
 800ba02:	2a2d      	cmp	r2, #45	; 0x2d
 800ba04:	d1c7      	bne.n	800b996 <_strtod_l+0x46>
 800ba06:	2201      	movs	r2, #1
 800ba08:	920a      	str	r2, [sp, #40]	; 0x28
 800ba0a:	1c5a      	adds	r2, r3, #1
 800ba0c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba0e:	785b      	ldrb	r3, [r3, #1]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1c2      	bne.n	800b99a <_strtod_l+0x4a>
 800ba14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba16:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f040 856e 	bne.w	800c4fc <_strtod_l+0xbac>
 800ba20:	4652      	mov	r2, sl
 800ba22:	465b      	mov	r3, fp
 800ba24:	e7e1      	b.n	800b9ea <_strtod_l+0x9a>
 800ba26:	2200      	movs	r2, #0
 800ba28:	e7ee      	b.n	800ba08 <_strtod_l+0xb8>
 800ba2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ba2c:	b13a      	cbz	r2, 800ba3e <_strtod_l+0xee>
 800ba2e:	2135      	movs	r1, #53	; 0x35
 800ba30:	a81a      	add	r0, sp, #104	; 0x68
 800ba32:	f002 fefa 	bl	800e82a <__copybits>
 800ba36:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f002 fab9 	bl	800dfb0 <_Bfree>
 800ba3e:	3f01      	subs	r7, #1
 800ba40:	2f04      	cmp	r7, #4
 800ba42:	d806      	bhi.n	800ba52 <_strtod_l+0x102>
 800ba44:	e8df f007 	tbb	[pc, r7]
 800ba48:	1714030a 	.word	0x1714030a
 800ba4c:	0a          	.byte	0x0a
 800ba4d:	00          	.byte	0x00
 800ba4e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ba52:	0728      	lsls	r0, r5, #28
 800ba54:	d5c0      	bpl.n	800b9d8 <_strtod_l+0x88>
 800ba56:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ba5a:	e7bd      	b.n	800b9d8 <_strtod_l+0x88>
 800ba5c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ba60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ba62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ba66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ba6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ba6e:	e7f0      	b.n	800ba52 <_strtod_l+0x102>
 800ba70:	f8df b180 	ldr.w	fp, [pc, #384]	; 800bbf4 <_strtod_l+0x2a4>
 800ba74:	e7ed      	b.n	800ba52 <_strtod_l+0x102>
 800ba76:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ba7a:	f04f 3aff 	mov.w	sl, #4294967295
 800ba7e:	e7e8      	b.n	800ba52 <_strtod_l+0x102>
 800ba80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba82:	1c5a      	adds	r2, r3, #1
 800ba84:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba86:	785b      	ldrb	r3, [r3, #1]
 800ba88:	2b30      	cmp	r3, #48	; 0x30
 800ba8a:	d0f9      	beq.n	800ba80 <_strtod_l+0x130>
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d0a3      	beq.n	800b9d8 <_strtod_l+0x88>
 800ba90:	2301      	movs	r3, #1
 800ba92:	f04f 0900 	mov.w	r9, #0
 800ba96:	9304      	str	r3, [sp, #16]
 800ba98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba9a:	9308      	str	r3, [sp, #32]
 800ba9c:	f8cd 901c 	str.w	r9, [sp, #28]
 800baa0:	464f      	mov	r7, r9
 800baa2:	220a      	movs	r2, #10
 800baa4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800baa6:	7806      	ldrb	r6, [r0, #0]
 800baa8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800baac:	b2d9      	uxtb	r1, r3
 800baae:	2909      	cmp	r1, #9
 800bab0:	d92a      	bls.n	800bb08 <_strtod_l+0x1b8>
 800bab2:	9905      	ldr	r1, [sp, #20]
 800bab4:	462a      	mov	r2, r5
 800bab6:	f003 fa2f 	bl	800ef18 <strncmp>
 800baba:	b398      	cbz	r0, 800bb24 <_strtod_l+0x1d4>
 800babc:	2000      	movs	r0, #0
 800babe:	4632      	mov	r2, r6
 800bac0:	463d      	mov	r5, r7
 800bac2:	9005      	str	r0, [sp, #20]
 800bac4:	4603      	mov	r3, r0
 800bac6:	2a65      	cmp	r2, #101	; 0x65
 800bac8:	d001      	beq.n	800bace <_strtod_l+0x17e>
 800baca:	2a45      	cmp	r2, #69	; 0x45
 800bacc:	d118      	bne.n	800bb00 <_strtod_l+0x1b0>
 800bace:	b91d      	cbnz	r5, 800bad8 <_strtod_l+0x188>
 800bad0:	9a04      	ldr	r2, [sp, #16]
 800bad2:	4302      	orrs	r2, r0
 800bad4:	d09e      	beq.n	800ba14 <_strtod_l+0xc4>
 800bad6:	2500      	movs	r5, #0
 800bad8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800badc:	f108 0201 	add.w	r2, r8, #1
 800bae0:	9217      	str	r2, [sp, #92]	; 0x5c
 800bae2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bae6:	2a2b      	cmp	r2, #43	; 0x2b
 800bae8:	d075      	beq.n	800bbd6 <_strtod_l+0x286>
 800baea:	2a2d      	cmp	r2, #45	; 0x2d
 800baec:	d07b      	beq.n	800bbe6 <_strtod_l+0x296>
 800baee:	f04f 0c00 	mov.w	ip, #0
 800baf2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800baf6:	2909      	cmp	r1, #9
 800baf8:	f240 8082 	bls.w	800bc00 <_strtod_l+0x2b0>
 800bafc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bb00:	2600      	movs	r6, #0
 800bb02:	e09d      	b.n	800bc40 <_strtod_l+0x2f0>
 800bb04:	2300      	movs	r3, #0
 800bb06:	e7c4      	b.n	800ba92 <_strtod_l+0x142>
 800bb08:	2f08      	cmp	r7, #8
 800bb0a:	bfd8      	it	le
 800bb0c:	9907      	ldrle	r1, [sp, #28]
 800bb0e:	f100 0001 	add.w	r0, r0, #1
 800bb12:	bfda      	itte	le
 800bb14:	fb02 3301 	mlale	r3, r2, r1, r3
 800bb18:	9307      	strle	r3, [sp, #28]
 800bb1a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bb1e:	3701      	adds	r7, #1
 800bb20:	9017      	str	r0, [sp, #92]	; 0x5c
 800bb22:	e7bf      	b.n	800baa4 <_strtod_l+0x154>
 800bb24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb26:	195a      	adds	r2, r3, r5
 800bb28:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb2a:	5d5a      	ldrb	r2, [r3, r5]
 800bb2c:	2f00      	cmp	r7, #0
 800bb2e:	d037      	beq.n	800bba0 <_strtod_l+0x250>
 800bb30:	9005      	str	r0, [sp, #20]
 800bb32:	463d      	mov	r5, r7
 800bb34:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bb38:	2b09      	cmp	r3, #9
 800bb3a:	d912      	bls.n	800bb62 <_strtod_l+0x212>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e7c2      	b.n	800bac6 <_strtod_l+0x176>
 800bb40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb42:	1c5a      	adds	r2, r3, #1
 800bb44:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb46:	785a      	ldrb	r2, [r3, #1]
 800bb48:	3001      	adds	r0, #1
 800bb4a:	2a30      	cmp	r2, #48	; 0x30
 800bb4c:	d0f8      	beq.n	800bb40 <_strtod_l+0x1f0>
 800bb4e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bb52:	2b08      	cmp	r3, #8
 800bb54:	f200 84d9 	bhi.w	800c50a <_strtod_l+0xbba>
 800bb58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb5a:	9005      	str	r0, [sp, #20]
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	9308      	str	r3, [sp, #32]
 800bb60:	4605      	mov	r5, r0
 800bb62:	3a30      	subs	r2, #48	; 0x30
 800bb64:	f100 0301 	add.w	r3, r0, #1
 800bb68:	d014      	beq.n	800bb94 <_strtod_l+0x244>
 800bb6a:	9905      	ldr	r1, [sp, #20]
 800bb6c:	4419      	add	r1, r3
 800bb6e:	9105      	str	r1, [sp, #20]
 800bb70:	462b      	mov	r3, r5
 800bb72:	eb00 0e05 	add.w	lr, r0, r5
 800bb76:	210a      	movs	r1, #10
 800bb78:	4573      	cmp	r3, lr
 800bb7a:	d113      	bne.n	800bba4 <_strtod_l+0x254>
 800bb7c:	182b      	adds	r3, r5, r0
 800bb7e:	2b08      	cmp	r3, #8
 800bb80:	f105 0501 	add.w	r5, r5, #1
 800bb84:	4405      	add	r5, r0
 800bb86:	dc1c      	bgt.n	800bbc2 <_strtod_l+0x272>
 800bb88:	9907      	ldr	r1, [sp, #28]
 800bb8a:	230a      	movs	r3, #10
 800bb8c:	fb03 2301 	mla	r3, r3, r1, r2
 800bb90:	9307      	str	r3, [sp, #28]
 800bb92:	2300      	movs	r3, #0
 800bb94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bb96:	1c51      	adds	r1, r2, #1
 800bb98:	9117      	str	r1, [sp, #92]	; 0x5c
 800bb9a:	7852      	ldrb	r2, [r2, #1]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	e7c9      	b.n	800bb34 <_strtod_l+0x1e4>
 800bba0:	4638      	mov	r0, r7
 800bba2:	e7d2      	b.n	800bb4a <_strtod_l+0x1fa>
 800bba4:	2b08      	cmp	r3, #8
 800bba6:	dc04      	bgt.n	800bbb2 <_strtod_l+0x262>
 800bba8:	9e07      	ldr	r6, [sp, #28]
 800bbaa:	434e      	muls	r6, r1
 800bbac:	9607      	str	r6, [sp, #28]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	e7e2      	b.n	800bb78 <_strtod_l+0x228>
 800bbb2:	f103 0c01 	add.w	ip, r3, #1
 800bbb6:	f1bc 0f10 	cmp.w	ip, #16
 800bbba:	bfd8      	it	le
 800bbbc:	fb01 f909 	mulle.w	r9, r1, r9
 800bbc0:	e7f5      	b.n	800bbae <_strtod_l+0x25e>
 800bbc2:	2d10      	cmp	r5, #16
 800bbc4:	bfdc      	itt	le
 800bbc6:	230a      	movle	r3, #10
 800bbc8:	fb03 2909 	mlale	r9, r3, r9, r2
 800bbcc:	e7e1      	b.n	800bb92 <_strtod_l+0x242>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	9305      	str	r3, [sp, #20]
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e77c      	b.n	800bad0 <_strtod_l+0x180>
 800bbd6:	f04f 0c00 	mov.w	ip, #0
 800bbda:	f108 0202 	add.w	r2, r8, #2
 800bbde:	9217      	str	r2, [sp, #92]	; 0x5c
 800bbe0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bbe4:	e785      	b.n	800baf2 <_strtod_l+0x1a2>
 800bbe6:	f04f 0c01 	mov.w	ip, #1
 800bbea:	e7f6      	b.n	800bbda <_strtod_l+0x28a>
 800bbec:	0800f51c 	.word	0x0800f51c
 800bbf0:	0800f294 	.word	0x0800f294
 800bbf4:	7ff00000 	.word	0x7ff00000
 800bbf8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bbfa:	1c51      	adds	r1, r2, #1
 800bbfc:	9117      	str	r1, [sp, #92]	; 0x5c
 800bbfe:	7852      	ldrb	r2, [r2, #1]
 800bc00:	2a30      	cmp	r2, #48	; 0x30
 800bc02:	d0f9      	beq.n	800bbf8 <_strtod_l+0x2a8>
 800bc04:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bc08:	2908      	cmp	r1, #8
 800bc0a:	f63f af79 	bhi.w	800bb00 <_strtod_l+0x1b0>
 800bc0e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bc12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bc14:	9206      	str	r2, [sp, #24]
 800bc16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bc18:	1c51      	adds	r1, r2, #1
 800bc1a:	9117      	str	r1, [sp, #92]	; 0x5c
 800bc1c:	7852      	ldrb	r2, [r2, #1]
 800bc1e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bc22:	2e09      	cmp	r6, #9
 800bc24:	d937      	bls.n	800bc96 <_strtod_l+0x346>
 800bc26:	9e06      	ldr	r6, [sp, #24]
 800bc28:	1b89      	subs	r1, r1, r6
 800bc2a:	2908      	cmp	r1, #8
 800bc2c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bc30:	dc02      	bgt.n	800bc38 <_strtod_l+0x2e8>
 800bc32:	4576      	cmp	r6, lr
 800bc34:	bfa8      	it	ge
 800bc36:	4676      	movge	r6, lr
 800bc38:	f1bc 0f00 	cmp.w	ip, #0
 800bc3c:	d000      	beq.n	800bc40 <_strtod_l+0x2f0>
 800bc3e:	4276      	negs	r6, r6
 800bc40:	2d00      	cmp	r5, #0
 800bc42:	d14d      	bne.n	800bce0 <_strtod_l+0x390>
 800bc44:	9904      	ldr	r1, [sp, #16]
 800bc46:	4301      	orrs	r1, r0
 800bc48:	f47f aec6 	bne.w	800b9d8 <_strtod_l+0x88>
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f47f aee1 	bne.w	800ba14 <_strtod_l+0xc4>
 800bc52:	2a69      	cmp	r2, #105	; 0x69
 800bc54:	d027      	beq.n	800bca6 <_strtod_l+0x356>
 800bc56:	dc24      	bgt.n	800bca2 <_strtod_l+0x352>
 800bc58:	2a49      	cmp	r2, #73	; 0x49
 800bc5a:	d024      	beq.n	800bca6 <_strtod_l+0x356>
 800bc5c:	2a4e      	cmp	r2, #78	; 0x4e
 800bc5e:	f47f aed9 	bne.w	800ba14 <_strtod_l+0xc4>
 800bc62:	499f      	ldr	r1, [pc, #636]	; (800bee0 <_strtod_l+0x590>)
 800bc64:	a817      	add	r0, sp, #92	; 0x5c
 800bc66:	f002 f811 	bl	800dc8c <__match>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	f43f aed2 	beq.w	800ba14 <_strtod_l+0xc4>
 800bc70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	2b28      	cmp	r3, #40	; 0x28
 800bc76:	d12d      	bne.n	800bcd4 <_strtod_l+0x384>
 800bc78:	499a      	ldr	r1, [pc, #616]	; (800bee4 <_strtod_l+0x594>)
 800bc7a:	aa1a      	add	r2, sp, #104	; 0x68
 800bc7c:	a817      	add	r0, sp, #92	; 0x5c
 800bc7e:	f002 f819 	bl	800dcb4 <__hexnan>
 800bc82:	2805      	cmp	r0, #5
 800bc84:	d126      	bne.n	800bcd4 <_strtod_l+0x384>
 800bc86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc88:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800bc8c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bc90:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bc94:	e6a0      	b.n	800b9d8 <_strtod_l+0x88>
 800bc96:	210a      	movs	r1, #10
 800bc98:	fb01 2e0e 	mla	lr, r1, lr, r2
 800bc9c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bca0:	e7b9      	b.n	800bc16 <_strtod_l+0x2c6>
 800bca2:	2a6e      	cmp	r2, #110	; 0x6e
 800bca4:	e7db      	b.n	800bc5e <_strtod_l+0x30e>
 800bca6:	4990      	ldr	r1, [pc, #576]	; (800bee8 <_strtod_l+0x598>)
 800bca8:	a817      	add	r0, sp, #92	; 0x5c
 800bcaa:	f001 ffef 	bl	800dc8c <__match>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	f43f aeb0 	beq.w	800ba14 <_strtod_l+0xc4>
 800bcb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bcb6:	498d      	ldr	r1, [pc, #564]	; (800beec <_strtod_l+0x59c>)
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	a817      	add	r0, sp, #92	; 0x5c
 800bcbc:	9317      	str	r3, [sp, #92]	; 0x5c
 800bcbe:	f001 ffe5 	bl	800dc8c <__match>
 800bcc2:	b910      	cbnz	r0, 800bcca <_strtod_l+0x37a>
 800bcc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	9317      	str	r3, [sp, #92]	; 0x5c
 800bcca:	f8df b230 	ldr.w	fp, [pc, #560]	; 800befc <_strtod_l+0x5ac>
 800bcce:	f04f 0a00 	mov.w	sl, #0
 800bcd2:	e681      	b.n	800b9d8 <_strtod_l+0x88>
 800bcd4:	4886      	ldr	r0, [pc, #536]	; (800bef0 <_strtod_l+0x5a0>)
 800bcd6:	f003 f917 	bl	800ef08 <nan>
 800bcda:	ec5b ab10 	vmov	sl, fp, d0
 800bcde:	e67b      	b.n	800b9d8 <_strtod_l+0x88>
 800bce0:	9b05      	ldr	r3, [sp, #20]
 800bce2:	9807      	ldr	r0, [sp, #28]
 800bce4:	1af3      	subs	r3, r6, r3
 800bce6:	2f00      	cmp	r7, #0
 800bce8:	bf08      	it	eq
 800bcea:	462f      	moveq	r7, r5
 800bcec:	2d10      	cmp	r5, #16
 800bcee:	9306      	str	r3, [sp, #24]
 800bcf0:	46a8      	mov	r8, r5
 800bcf2:	bfa8      	it	ge
 800bcf4:	f04f 0810 	movge.w	r8, #16
 800bcf8:	f7f4 fc04 	bl	8000504 <__aeabi_ui2d>
 800bcfc:	2d09      	cmp	r5, #9
 800bcfe:	4682      	mov	sl, r0
 800bd00:	468b      	mov	fp, r1
 800bd02:	dd13      	ble.n	800bd2c <_strtod_l+0x3dc>
 800bd04:	4b7b      	ldr	r3, [pc, #492]	; (800bef4 <_strtod_l+0x5a4>)
 800bd06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bd0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bd0e:	f7f4 fc73 	bl	80005f8 <__aeabi_dmul>
 800bd12:	4682      	mov	sl, r0
 800bd14:	4648      	mov	r0, r9
 800bd16:	468b      	mov	fp, r1
 800bd18:	f7f4 fbf4 	bl	8000504 <__aeabi_ui2d>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	460b      	mov	r3, r1
 800bd20:	4650      	mov	r0, sl
 800bd22:	4659      	mov	r1, fp
 800bd24:	f7f4 fab2 	bl	800028c <__adddf3>
 800bd28:	4682      	mov	sl, r0
 800bd2a:	468b      	mov	fp, r1
 800bd2c:	2d0f      	cmp	r5, #15
 800bd2e:	dc38      	bgt.n	800bda2 <_strtod_l+0x452>
 800bd30:	9b06      	ldr	r3, [sp, #24]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f43f ae50 	beq.w	800b9d8 <_strtod_l+0x88>
 800bd38:	dd24      	ble.n	800bd84 <_strtod_l+0x434>
 800bd3a:	2b16      	cmp	r3, #22
 800bd3c:	dc0b      	bgt.n	800bd56 <_strtod_l+0x406>
 800bd3e:	496d      	ldr	r1, [pc, #436]	; (800bef4 <_strtod_l+0x5a4>)
 800bd40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd48:	4652      	mov	r2, sl
 800bd4a:	465b      	mov	r3, fp
 800bd4c:	f7f4 fc54 	bl	80005f8 <__aeabi_dmul>
 800bd50:	4682      	mov	sl, r0
 800bd52:	468b      	mov	fp, r1
 800bd54:	e640      	b.n	800b9d8 <_strtod_l+0x88>
 800bd56:	9a06      	ldr	r2, [sp, #24]
 800bd58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	db20      	blt.n	800bda2 <_strtod_l+0x452>
 800bd60:	4c64      	ldr	r4, [pc, #400]	; (800bef4 <_strtod_l+0x5a4>)
 800bd62:	f1c5 050f 	rsb	r5, r5, #15
 800bd66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bd6a:	4652      	mov	r2, sl
 800bd6c:	465b      	mov	r3, fp
 800bd6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd72:	f7f4 fc41 	bl	80005f8 <__aeabi_dmul>
 800bd76:	9b06      	ldr	r3, [sp, #24]
 800bd78:	1b5d      	subs	r5, r3, r5
 800bd7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bd7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bd82:	e7e3      	b.n	800bd4c <_strtod_l+0x3fc>
 800bd84:	9b06      	ldr	r3, [sp, #24]
 800bd86:	3316      	adds	r3, #22
 800bd88:	db0b      	blt.n	800bda2 <_strtod_l+0x452>
 800bd8a:	9b05      	ldr	r3, [sp, #20]
 800bd8c:	1b9e      	subs	r6, r3, r6
 800bd8e:	4b59      	ldr	r3, [pc, #356]	; (800bef4 <_strtod_l+0x5a4>)
 800bd90:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bd94:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd98:	4650      	mov	r0, sl
 800bd9a:	4659      	mov	r1, fp
 800bd9c:	f7f4 fd56 	bl	800084c <__aeabi_ddiv>
 800bda0:	e7d6      	b.n	800bd50 <_strtod_l+0x400>
 800bda2:	9b06      	ldr	r3, [sp, #24]
 800bda4:	eba5 0808 	sub.w	r8, r5, r8
 800bda8:	4498      	add	r8, r3
 800bdaa:	f1b8 0f00 	cmp.w	r8, #0
 800bdae:	dd74      	ble.n	800be9a <_strtod_l+0x54a>
 800bdb0:	f018 030f 	ands.w	r3, r8, #15
 800bdb4:	d00a      	beq.n	800bdcc <_strtod_l+0x47c>
 800bdb6:	494f      	ldr	r1, [pc, #316]	; (800bef4 <_strtod_l+0x5a4>)
 800bdb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bdbc:	4652      	mov	r2, sl
 800bdbe:	465b      	mov	r3, fp
 800bdc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdc4:	f7f4 fc18 	bl	80005f8 <__aeabi_dmul>
 800bdc8:	4682      	mov	sl, r0
 800bdca:	468b      	mov	fp, r1
 800bdcc:	f038 080f 	bics.w	r8, r8, #15
 800bdd0:	d04f      	beq.n	800be72 <_strtod_l+0x522>
 800bdd2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bdd6:	dd22      	ble.n	800be1e <_strtod_l+0x4ce>
 800bdd8:	2500      	movs	r5, #0
 800bdda:	462e      	mov	r6, r5
 800bddc:	9507      	str	r5, [sp, #28]
 800bdde:	9505      	str	r5, [sp, #20]
 800bde0:	2322      	movs	r3, #34	; 0x22
 800bde2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800befc <_strtod_l+0x5ac>
 800bde6:	6023      	str	r3, [r4, #0]
 800bde8:	f04f 0a00 	mov.w	sl, #0
 800bdec:	9b07      	ldr	r3, [sp, #28]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f43f adf2 	beq.w	800b9d8 <_strtod_l+0x88>
 800bdf4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f002 f8da 	bl	800dfb0 <_Bfree>
 800bdfc:	9905      	ldr	r1, [sp, #20]
 800bdfe:	4620      	mov	r0, r4
 800be00:	f002 f8d6 	bl	800dfb0 <_Bfree>
 800be04:	4631      	mov	r1, r6
 800be06:	4620      	mov	r0, r4
 800be08:	f002 f8d2 	bl	800dfb0 <_Bfree>
 800be0c:	9907      	ldr	r1, [sp, #28]
 800be0e:	4620      	mov	r0, r4
 800be10:	f002 f8ce 	bl	800dfb0 <_Bfree>
 800be14:	4629      	mov	r1, r5
 800be16:	4620      	mov	r0, r4
 800be18:	f002 f8ca 	bl	800dfb0 <_Bfree>
 800be1c:	e5dc      	b.n	800b9d8 <_strtod_l+0x88>
 800be1e:	4b36      	ldr	r3, [pc, #216]	; (800bef8 <_strtod_l+0x5a8>)
 800be20:	9304      	str	r3, [sp, #16]
 800be22:	2300      	movs	r3, #0
 800be24:	ea4f 1828 	mov.w	r8, r8, asr #4
 800be28:	4650      	mov	r0, sl
 800be2a:	4659      	mov	r1, fp
 800be2c:	4699      	mov	r9, r3
 800be2e:	f1b8 0f01 	cmp.w	r8, #1
 800be32:	dc21      	bgt.n	800be78 <_strtod_l+0x528>
 800be34:	b10b      	cbz	r3, 800be3a <_strtod_l+0x4ea>
 800be36:	4682      	mov	sl, r0
 800be38:	468b      	mov	fp, r1
 800be3a:	4b2f      	ldr	r3, [pc, #188]	; (800bef8 <_strtod_l+0x5a8>)
 800be3c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800be40:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800be44:	4652      	mov	r2, sl
 800be46:	465b      	mov	r3, fp
 800be48:	e9d9 0100 	ldrd	r0, r1, [r9]
 800be4c:	f7f4 fbd4 	bl	80005f8 <__aeabi_dmul>
 800be50:	4b2a      	ldr	r3, [pc, #168]	; (800befc <_strtod_l+0x5ac>)
 800be52:	460a      	mov	r2, r1
 800be54:	400b      	ands	r3, r1
 800be56:	492a      	ldr	r1, [pc, #168]	; (800bf00 <_strtod_l+0x5b0>)
 800be58:	428b      	cmp	r3, r1
 800be5a:	4682      	mov	sl, r0
 800be5c:	d8bc      	bhi.n	800bdd8 <_strtod_l+0x488>
 800be5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800be62:	428b      	cmp	r3, r1
 800be64:	bf86      	itte	hi
 800be66:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bf04 <_strtod_l+0x5b4>
 800be6a:	f04f 3aff 	movhi.w	sl, #4294967295
 800be6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800be72:	2300      	movs	r3, #0
 800be74:	9304      	str	r3, [sp, #16]
 800be76:	e084      	b.n	800bf82 <_strtod_l+0x632>
 800be78:	f018 0f01 	tst.w	r8, #1
 800be7c:	d005      	beq.n	800be8a <_strtod_l+0x53a>
 800be7e:	9b04      	ldr	r3, [sp, #16]
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	f7f4 fbb8 	bl	80005f8 <__aeabi_dmul>
 800be88:	2301      	movs	r3, #1
 800be8a:	9a04      	ldr	r2, [sp, #16]
 800be8c:	3208      	adds	r2, #8
 800be8e:	f109 0901 	add.w	r9, r9, #1
 800be92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800be96:	9204      	str	r2, [sp, #16]
 800be98:	e7c9      	b.n	800be2e <_strtod_l+0x4de>
 800be9a:	d0ea      	beq.n	800be72 <_strtod_l+0x522>
 800be9c:	f1c8 0800 	rsb	r8, r8, #0
 800bea0:	f018 020f 	ands.w	r2, r8, #15
 800bea4:	d00a      	beq.n	800bebc <_strtod_l+0x56c>
 800bea6:	4b13      	ldr	r3, [pc, #76]	; (800bef4 <_strtod_l+0x5a4>)
 800bea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beac:	4650      	mov	r0, sl
 800beae:	4659      	mov	r1, fp
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	f7f4 fcca 	bl	800084c <__aeabi_ddiv>
 800beb8:	4682      	mov	sl, r0
 800beba:	468b      	mov	fp, r1
 800bebc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bec0:	d0d7      	beq.n	800be72 <_strtod_l+0x522>
 800bec2:	f1b8 0f1f 	cmp.w	r8, #31
 800bec6:	dd1f      	ble.n	800bf08 <_strtod_l+0x5b8>
 800bec8:	2500      	movs	r5, #0
 800beca:	462e      	mov	r6, r5
 800becc:	9507      	str	r5, [sp, #28]
 800bece:	9505      	str	r5, [sp, #20]
 800bed0:	2322      	movs	r3, #34	; 0x22
 800bed2:	f04f 0a00 	mov.w	sl, #0
 800bed6:	f04f 0b00 	mov.w	fp, #0
 800beda:	6023      	str	r3, [r4, #0]
 800bedc:	e786      	b.n	800bdec <_strtod_l+0x49c>
 800bede:	bf00      	nop
 800bee0:	0800f265 	.word	0x0800f265
 800bee4:	0800f2a8 	.word	0x0800f2a8
 800bee8:	0800f25d 	.word	0x0800f25d
 800beec:	0800f428 	.word	0x0800f428
 800bef0:	0800f323 	.word	0x0800f323
 800bef4:	0800f5b8 	.word	0x0800f5b8
 800bef8:	0800f590 	.word	0x0800f590
 800befc:	7ff00000 	.word	0x7ff00000
 800bf00:	7ca00000 	.word	0x7ca00000
 800bf04:	7fefffff 	.word	0x7fefffff
 800bf08:	f018 0310 	ands.w	r3, r8, #16
 800bf0c:	bf18      	it	ne
 800bf0e:	236a      	movne	r3, #106	; 0x6a
 800bf10:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c2c0 <_strtod_l+0x970>
 800bf14:	9304      	str	r3, [sp, #16]
 800bf16:	4650      	mov	r0, sl
 800bf18:	4659      	mov	r1, fp
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	f018 0f01 	tst.w	r8, #1
 800bf20:	d004      	beq.n	800bf2c <_strtod_l+0x5dc>
 800bf22:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bf26:	f7f4 fb67 	bl	80005f8 <__aeabi_dmul>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bf30:	f109 0908 	add.w	r9, r9, #8
 800bf34:	d1f2      	bne.n	800bf1c <_strtod_l+0x5cc>
 800bf36:	b10b      	cbz	r3, 800bf3c <_strtod_l+0x5ec>
 800bf38:	4682      	mov	sl, r0
 800bf3a:	468b      	mov	fp, r1
 800bf3c:	9b04      	ldr	r3, [sp, #16]
 800bf3e:	b1c3      	cbz	r3, 800bf72 <_strtod_l+0x622>
 800bf40:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bf44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	4659      	mov	r1, fp
 800bf4c:	dd11      	ble.n	800bf72 <_strtod_l+0x622>
 800bf4e:	2b1f      	cmp	r3, #31
 800bf50:	f340 8124 	ble.w	800c19c <_strtod_l+0x84c>
 800bf54:	2b34      	cmp	r3, #52	; 0x34
 800bf56:	bfde      	ittt	le
 800bf58:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bf5c:	f04f 33ff 	movle.w	r3, #4294967295
 800bf60:	fa03 f202 	lslle.w	r2, r3, r2
 800bf64:	f04f 0a00 	mov.w	sl, #0
 800bf68:	bfcc      	ite	gt
 800bf6a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bf6e:	ea02 0b01 	andle.w	fp, r2, r1
 800bf72:	2200      	movs	r2, #0
 800bf74:	2300      	movs	r3, #0
 800bf76:	4650      	mov	r0, sl
 800bf78:	4659      	mov	r1, fp
 800bf7a:	f7f4 fda5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d1a2      	bne.n	800bec8 <_strtod_l+0x578>
 800bf82:	9b07      	ldr	r3, [sp, #28]
 800bf84:	9300      	str	r3, [sp, #0]
 800bf86:	9908      	ldr	r1, [sp, #32]
 800bf88:	462b      	mov	r3, r5
 800bf8a:	463a      	mov	r2, r7
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f002 f877 	bl	800e080 <__s2b>
 800bf92:	9007      	str	r0, [sp, #28]
 800bf94:	2800      	cmp	r0, #0
 800bf96:	f43f af1f 	beq.w	800bdd8 <_strtod_l+0x488>
 800bf9a:	9b05      	ldr	r3, [sp, #20]
 800bf9c:	1b9e      	subs	r6, r3, r6
 800bf9e:	9b06      	ldr	r3, [sp, #24]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	bfb4      	ite	lt
 800bfa4:	4633      	movlt	r3, r6
 800bfa6:	2300      	movge	r3, #0
 800bfa8:	930c      	str	r3, [sp, #48]	; 0x30
 800bfaa:	9b06      	ldr	r3, [sp, #24]
 800bfac:	2500      	movs	r5, #0
 800bfae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bfb2:	9312      	str	r3, [sp, #72]	; 0x48
 800bfb4:	462e      	mov	r6, r5
 800bfb6:	9b07      	ldr	r3, [sp, #28]
 800bfb8:	4620      	mov	r0, r4
 800bfba:	6859      	ldr	r1, [r3, #4]
 800bfbc:	f001 ffb8 	bl	800df30 <_Balloc>
 800bfc0:	9005      	str	r0, [sp, #20]
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	f43f af0c 	beq.w	800bde0 <_strtod_l+0x490>
 800bfc8:	9b07      	ldr	r3, [sp, #28]
 800bfca:	691a      	ldr	r2, [r3, #16]
 800bfcc:	3202      	adds	r2, #2
 800bfce:	f103 010c 	add.w	r1, r3, #12
 800bfd2:	0092      	lsls	r2, r2, #2
 800bfd4:	300c      	adds	r0, #12
 800bfd6:	f7fe fc94 	bl	800a902 <memcpy>
 800bfda:	ec4b ab10 	vmov	d0, sl, fp
 800bfde:	aa1a      	add	r2, sp, #104	; 0x68
 800bfe0:	a919      	add	r1, sp, #100	; 0x64
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f002 fb92 	bl	800e70c <__d2b>
 800bfe8:	ec4b ab18 	vmov	d8, sl, fp
 800bfec:	9018      	str	r0, [sp, #96]	; 0x60
 800bfee:	2800      	cmp	r0, #0
 800bff0:	f43f aef6 	beq.w	800bde0 <_strtod_l+0x490>
 800bff4:	2101      	movs	r1, #1
 800bff6:	4620      	mov	r0, r4
 800bff8:	f002 f8dc 	bl	800e1b4 <__i2b>
 800bffc:	4606      	mov	r6, r0
 800bffe:	2800      	cmp	r0, #0
 800c000:	f43f aeee 	beq.w	800bde0 <_strtod_l+0x490>
 800c004:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c006:	9904      	ldr	r1, [sp, #16]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	bfab      	itete	ge
 800c00c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c00e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c010:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c012:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c016:	bfac      	ite	ge
 800c018:	eb03 0902 	addge.w	r9, r3, r2
 800c01c:	1ad7      	sublt	r7, r2, r3
 800c01e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c020:	eba3 0801 	sub.w	r8, r3, r1
 800c024:	4490      	add	r8, r2
 800c026:	4ba1      	ldr	r3, [pc, #644]	; (800c2ac <_strtod_l+0x95c>)
 800c028:	f108 38ff 	add.w	r8, r8, #4294967295
 800c02c:	4598      	cmp	r8, r3
 800c02e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c032:	f280 80c7 	bge.w	800c1c4 <_strtod_l+0x874>
 800c036:	eba3 0308 	sub.w	r3, r3, r8
 800c03a:	2b1f      	cmp	r3, #31
 800c03c:	eba2 0203 	sub.w	r2, r2, r3
 800c040:	f04f 0101 	mov.w	r1, #1
 800c044:	f300 80b1 	bgt.w	800c1aa <_strtod_l+0x85a>
 800c048:	fa01 f303 	lsl.w	r3, r1, r3
 800c04c:	930d      	str	r3, [sp, #52]	; 0x34
 800c04e:	2300      	movs	r3, #0
 800c050:	9308      	str	r3, [sp, #32]
 800c052:	eb09 0802 	add.w	r8, r9, r2
 800c056:	9b04      	ldr	r3, [sp, #16]
 800c058:	45c1      	cmp	r9, r8
 800c05a:	4417      	add	r7, r2
 800c05c:	441f      	add	r7, r3
 800c05e:	464b      	mov	r3, r9
 800c060:	bfa8      	it	ge
 800c062:	4643      	movge	r3, r8
 800c064:	42bb      	cmp	r3, r7
 800c066:	bfa8      	it	ge
 800c068:	463b      	movge	r3, r7
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	bfc2      	ittt	gt
 800c06e:	eba8 0803 	subgt.w	r8, r8, r3
 800c072:	1aff      	subgt	r7, r7, r3
 800c074:	eba9 0903 	subgt.w	r9, r9, r3
 800c078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	dd17      	ble.n	800c0ae <_strtod_l+0x75e>
 800c07e:	4631      	mov	r1, r6
 800c080:	461a      	mov	r2, r3
 800c082:	4620      	mov	r0, r4
 800c084:	f002 f956 	bl	800e334 <__pow5mult>
 800c088:	4606      	mov	r6, r0
 800c08a:	2800      	cmp	r0, #0
 800c08c:	f43f aea8 	beq.w	800bde0 <_strtod_l+0x490>
 800c090:	4601      	mov	r1, r0
 800c092:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c094:	4620      	mov	r0, r4
 800c096:	f002 f8a3 	bl	800e1e0 <__multiply>
 800c09a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c09c:	2800      	cmp	r0, #0
 800c09e:	f43f ae9f 	beq.w	800bde0 <_strtod_l+0x490>
 800c0a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f001 ff83 	bl	800dfb0 <_Bfree>
 800c0aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0ac:	9318      	str	r3, [sp, #96]	; 0x60
 800c0ae:	f1b8 0f00 	cmp.w	r8, #0
 800c0b2:	f300 808c 	bgt.w	800c1ce <_strtod_l+0x87e>
 800c0b6:	9b06      	ldr	r3, [sp, #24]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	dd08      	ble.n	800c0ce <_strtod_l+0x77e>
 800c0bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c0be:	9905      	ldr	r1, [sp, #20]
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f002 f937 	bl	800e334 <__pow5mult>
 800c0c6:	9005      	str	r0, [sp, #20]
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	f43f ae89 	beq.w	800bde0 <_strtod_l+0x490>
 800c0ce:	2f00      	cmp	r7, #0
 800c0d0:	dd08      	ble.n	800c0e4 <_strtod_l+0x794>
 800c0d2:	9905      	ldr	r1, [sp, #20]
 800c0d4:	463a      	mov	r2, r7
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f002 f986 	bl	800e3e8 <__lshift>
 800c0dc:	9005      	str	r0, [sp, #20]
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f43f ae7e 	beq.w	800bde0 <_strtod_l+0x490>
 800c0e4:	f1b9 0f00 	cmp.w	r9, #0
 800c0e8:	dd08      	ble.n	800c0fc <_strtod_l+0x7ac>
 800c0ea:	4631      	mov	r1, r6
 800c0ec:	464a      	mov	r2, r9
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f002 f97a 	bl	800e3e8 <__lshift>
 800c0f4:	4606      	mov	r6, r0
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	f43f ae72 	beq.w	800bde0 <_strtod_l+0x490>
 800c0fc:	9a05      	ldr	r2, [sp, #20]
 800c0fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c100:	4620      	mov	r0, r4
 800c102:	f002 f9fd 	bl	800e500 <__mdiff>
 800c106:	4605      	mov	r5, r0
 800c108:	2800      	cmp	r0, #0
 800c10a:	f43f ae69 	beq.w	800bde0 <_strtod_l+0x490>
 800c10e:	68c3      	ldr	r3, [r0, #12]
 800c110:	930b      	str	r3, [sp, #44]	; 0x2c
 800c112:	2300      	movs	r3, #0
 800c114:	60c3      	str	r3, [r0, #12]
 800c116:	4631      	mov	r1, r6
 800c118:	f002 f9d6 	bl	800e4c8 <__mcmp>
 800c11c:	2800      	cmp	r0, #0
 800c11e:	da60      	bge.n	800c1e2 <_strtod_l+0x892>
 800c120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c122:	ea53 030a 	orrs.w	r3, r3, sl
 800c126:	f040 8082 	bne.w	800c22e <_strtod_l+0x8de>
 800c12a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d17d      	bne.n	800c22e <_strtod_l+0x8de>
 800c132:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c136:	0d1b      	lsrs	r3, r3, #20
 800c138:	051b      	lsls	r3, r3, #20
 800c13a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c13e:	d976      	bls.n	800c22e <_strtod_l+0x8de>
 800c140:	696b      	ldr	r3, [r5, #20]
 800c142:	b913      	cbnz	r3, 800c14a <_strtod_l+0x7fa>
 800c144:	692b      	ldr	r3, [r5, #16]
 800c146:	2b01      	cmp	r3, #1
 800c148:	dd71      	ble.n	800c22e <_strtod_l+0x8de>
 800c14a:	4629      	mov	r1, r5
 800c14c:	2201      	movs	r2, #1
 800c14e:	4620      	mov	r0, r4
 800c150:	f002 f94a 	bl	800e3e8 <__lshift>
 800c154:	4631      	mov	r1, r6
 800c156:	4605      	mov	r5, r0
 800c158:	f002 f9b6 	bl	800e4c8 <__mcmp>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	dd66      	ble.n	800c22e <_strtod_l+0x8de>
 800c160:	9904      	ldr	r1, [sp, #16]
 800c162:	4a53      	ldr	r2, [pc, #332]	; (800c2b0 <_strtod_l+0x960>)
 800c164:	465b      	mov	r3, fp
 800c166:	2900      	cmp	r1, #0
 800c168:	f000 8081 	beq.w	800c26e <_strtod_l+0x91e>
 800c16c:	ea02 010b 	and.w	r1, r2, fp
 800c170:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c174:	dc7b      	bgt.n	800c26e <_strtod_l+0x91e>
 800c176:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c17a:	f77f aea9 	ble.w	800bed0 <_strtod_l+0x580>
 800c17e:	4b4d      	ldr	r3, [pc, #308]	; (800c2b4 <_strtod_l+0x964>)
 800c180:	4650      	mov	r0, sl
 800c182:	4659      	mov	r1, fp
 800c184:	2200      	movs	r2, #0
 800c186:	f7f4 fa37 	bl	80005f8 <__aeabi_dmul>
 800c18a:	460b      	mov	r3, r1
 800c18c:	4303      	orrs	r3, r0
 800c18e:	bf08      	it	eq
 800c190:	2322      	moveq	r3, #34	; 0x22
 800c192:	4682      	mov	sl, r0
 800c194:	468b      	mov	fp, r1
 800c196:	bf08      	it	eq
 800c198:	6023      	streq	r3, [r4, #0]
 800c19a:	e62b      	b.n	800bdf4 <_strtod_l+0x4a4>
 800c19c:	f04f 32ff 	mov.w	r2, #4294967295
 800c1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a4:	ea03 0a0a 	and.w	sl, r3, sl
 800c1a8:	e6e3      	b.n	800bf72 <_strtod_l+0x622>
 800c1aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c1ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c1b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c1b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c1ba:	fa01 f308 	lsl.w	r3, r1, r8
 800c1be:	9308      	str	r3, [sp, #32]
 800c1c0:	910d      	str	r1, [sp, #52]	; 0x34
 800c1c2:	e746      	b.n	800c052 <_strtod_l+0x702>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	9308      	str	r3, [sp, #32]
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	930d      	str	r3, [sp, #52]	; 0x34
 800c1cc:	e741      	b.n	800c052 <_strtod_l+0x702>
 800c1ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c1d0:	4642      	mov	r2, r8
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f002 f908 	bl	800e3e8 <__lshift>
 800c1d8:	9018      	str	r0, [sp, #96]	; 0x60
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	f47f af6b 	bne.w	800c0b6 <_strtod_l+0x766>
 800c1e0:	e5fe      	b.n	800bde0 <_strtod_l+0x490>
 800c1e2:	465f      	mov	r7, fp
 800c1e4:	d16e      	bne.n	800c2c4 <_strtod_l+0x974>
 800c1e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c1e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1ec:	b342      	cbz	r2, 800c240 <_strtod_l+0x8f0>
 800c1ee:	4a32      	ldr	r2, [pc, #200]	; (800c2b8 <_strtod_l+0x968>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d128      	bne.n	800c246 <_strtod_l+0x8f6>
 800c1f4:	9b04      	ldr	r3, [sp, #16]
 800c1f6:	4651      	mov	r1, sl
 800c1f8:	b1eb      	cbz	r3, 800c236 <_strtod_l+0x8e6>
 800c1fa:	4b2d      	ldr	r3, [pc, #180]	; (800c2b0 <_strtod_l+0x960>)
 800c1fc:	403b      	ands	r3, r7
 800c1fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c202:	f04f 32ff 	mov.w	r2, #4294967295
 800c206:	d819      	bhi.n	800c23c <_strtod_l+0x8ec>
 800c208:	0d1b      	lsrs	r3, r3, #20
 800c20a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c20e:	fa02 f303 	lsl.w	r3, r2, r3
 800c212:	4299      	cmp	r1, r3
 800c214:	d117      	bne.n	800c246 <_strtod_l+0x8f6>
 800c216:	4b29      	ldr	r3, [pc, #164]	; (800c2bc <_strtod_l+0x96c>)
 800c218:	429f      	cmp	r7, r3
 800c21a:	d102      	bne.n	800c222 <_strtod_l+0x8d2>
 800c21c:	3101      	adds	r1, #1
 800c21e:	f43f addf 	beq.w	800bde0 <_strtod_l+0x490>
 800c222:	4b23      	ldr	r3, [pc, #140]	; (800c2b0 <_strtod_l+0x960>)
 800c224:	403b      	ands	r3, r7
 800c226:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c22a:	f04f 0a00 	mov.w	sl, #0
 800c22e:	9b04      	ldr	r3, [sp, #16]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1a4      	bne.n	800c17e <_strtod_l+0x82e>
 800c234:	e5de      	b.n	800bdf4 <_strtod_l+0x4a4>
 800c236:	f04f 33ff 	mov.w	r3, #4294967295
 800c23a:	e7ea      	b.n	800c212 <_strtod_l+0x8c2>
 800c23c:	4613      	mov	r3, r2
 800c23e:	e7e8      	b.n	800c212 <_strtod_l+0x8c2>
 800c240:	ea53 030a 	orrs.w	r3, r3, sl
 800c244:	d08c      	beq.n	800c160 <_strtod_l+0x810>
 800c246:	9b08      	ldr	r3, [sp, #32]
 800c248:	b1db      	cbz	r3, 800c282 <_strtod_l+0x932>
 800c24a:	423b      	tst	r3, r7
 800c24c:	d0ef      	beq.n	800c22e <_strtod_l+0x8de>
 800c24e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c250:	9a04      	ldr	r2, [sp, #16]
 800c252:	4650      	mov	r0, sl
 800c254:	4659      	mov	r1, fp
 800c256:	b1c3      	cbz	r3, 800c28a <_strtod_l+0x93a>
 800c258:	f7ff fb5b 	bl	800b912 <sulp>
 800c25c:	4602      	mov	r2, r0
 800c25e:	460b      	mov	r3, r1
 800c260:	ec51 0b18 	vmov	r0, r1, d8
 800c264:	f7f4 f812 	bl	800028c <__adddf3>
 800c268:	4682      	mov	sl, r0
 800c26a:	468b      	mov	fp, r1
 800c26c:	e7df      	b.n	800c22e <_strtod_l+0x8de>
 800c26e:	4013      	ands	r3, r2
 800c270:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c274:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c278:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c27c:	f04f 3aff 	mov.w	sl, #4294967295
 800c280:	e7d5      	b.n	800c22e <_strtod_l+0x8de>
 800c282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c284:	ea13 0f0a 	tst.w	r3, sl
 800c288:	e7e0      	b.n	800c24c <_strtod_l+0x8fc>
 800c28a:	f7ff fb42 	bl	800b912 <sulp>
 800c28e:	4602      	mov	r2, r0
 800c290:	460b      	mov	r3, r1
 800c292:	ec51 0b18 	vmov	r0, r1, d8
 800c296:	f7f3 fff7 	bl	8000288 <__aeabi_dsub>
 800c29a:	2200      	movs	r2, #0
 800c29c:	2300      	movs	r3, #0
 800c29e:	4682      	mov	sl, r0
 800c2a0:	468b      	mov	fp, r1
 800c2a2:	f7f4 fc11 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d0c1      	beq.n	800c22e <_strtod_l+0x8de>
 800c2aa:	e611      	b.n	800bed0 <_strtod_l+0x580>
 800c2ac:	fffffc02 	.word	0xfffffc02
 800c2b0:	7ff00000 	.word	0x7ff00000
 800c2b4:	39500000 	.word	0x39500000
 800c2b8:	000fffff 	.word	0x000fffff
 800c2bc:	7fefffff 	.word	0x7fefffff
 800c2c0:	0800f2c0 	.word	0x0800f2c0
 800c2c4:	4631      	mov	r1, r6
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	f002 fa7c 	bl	800e7c4 <__ratio>
 800c2cc:	ec59 8b10 	vmov	r8, r9, d0
 800c2d0:	ee10 0a10 	vmov	r0, s0
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2da:	4649      	mov	r1, r9
 800c2dc:	f7f4 fc08 	bl	8000af0 <__aeabi_dcmple>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d07a      	beq.n	800c3da <_strtod_l+0xa8a>
 800c2e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d04a      	beq.n	800c380 <_strtod_l+0xa30>
 800c2ea:	4b95      	ldr	r3, [pc, #596]	; (800c540 <_strtod_l+0xbf0>)
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c2f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c540 <_strtod_l+0xbf0>
 800c2f6:	f04f 0800 	mov.w	r8, #0
 800c2fa:	4b92      	ldr	r3, [pc, #584]	; (800c544 <_strtod_l+0xbf4>)
 800c2fc:	403b      	ands	r3, r7
 800c2fe:	930d      	str	r3, [sp, #52]	; 0x34
 800c300:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c302:	4b91      	ldr	r3, [pc, #580]	; (800c548 <_strtod_l+0xbf8>)
 800c304:	429a      	cmp	r2, r3
 800c306:	f040 80b0 	bne.w	800c46a <_strtod_l+0xb1a>
 800c30a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c30e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c312:	ec4b ab10 	vmov	d0, sl, fp
 800c316:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c31a:	f002 f97b 	bl	800e614 <__ulp>
 800c31e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c322:	ec53 2b10 	vmov	r2, r3, d0
 800c326:	f7f4 f967 	bl	80005f8 <__aeabi_dmul>
 800c32a:	4652      	mov	r2, sl
 800c32c:	465b      	mov	r3, fp
 800c32e:	f7f3 ffad 	bl	800028c <__adddf3>
 800c332:	460b      	mov	r3, r1
 800c334:	4983      	ldr	r1, [pc, #524]	; (800c544 <_strtod_l+0xbf4>)
 800c336:	4a85      	ldr	r2, [pc, #532]	; (800c54c <_strtod_l+0xbfc>)
 800c338:	4019      	ands	r1, r3
 800c33a:	4291      	cmp	r1, r2
 800c33c:	4682      	mov	sl, r0
 800c33e:	d960      	bls.n	800c402 <_strtod_l+0xab2>
 800c340:	ee18 3a90 	vmov	r3, s17
 800c344:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c348:	4293      	cmp	r3, r2
 800c34a:	d104      	bne.n	800c356 <_strtod_l+0xa06>
 800c34c:	ee18 3a10 	vmov	r3, s16
 800c350:	3301      	adds	r3, #1
 800c352:	f43f ad45 	beq.w	800bde0 <_strtod_l+0x490>
 800c356:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c558 <_strtod_l+0xc08>
 800c35a:	f04f 3aff 	mov.w	sl, #4294967295
 800c35e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c360:	4620      	mov	r0, r4
 800c362:	f001 fe25 	bl	800dfb0 <_Bfree>
 800c366:	9905      	ldr	r1, [sp, #20]
 800c368:	4620      	mov	r0, r4
 800c36a:	f001 fe21 	bl	800dfb0 <_Bfree>
 800c36e:	4631      	mov	r1, r6
 800c370:	4620      	mov	r0, r4
 800c372:	f001 fe1d 	bl	800dfb0 <_Bfree>
 800c376:	4629      	mov	r1, r5
 800c378:	4620      	mov	r0, r4
 800c37a:	f001 fe19 	bl	800dfb0 <_Bfree>
 800c37e:	e61a      	b.n	800bfb6 <_strtod_l+0x666>
 800c380:	f1ba 0f00 	cmp.w	sl, #0
 800c384:	d11b      	bne.n	800c3be <_strtod_l+0xa6e>
 800c386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c38a:	b9f3      	cbnz	r3, 800c3ca <_strtod_l+0xa7a>
 800c38c:	4b6c      	ldr	r3, [pc, #432]	; (800c540 <_strtod_l+0xbf0>)
 800c38e:	2200      	movs	r2, #0
 800c390:	4640      	mov	r0, r8
 800c392:	4649      	mov	r1, r9
 800c394:	f7f4 fba2 	bl	8000adc <__aeabi_dcmplt>
 800c398:	b9d0      	cbnz	r0, 800c3d0 <_strtod_l+0xa80>
 800c39a:	4640      	mov	r0, r8
 800c39c:	4649      	mov	r1, r9
 800c39e:	4b6c      	ldr	r3, [pc, #432]	; (800c550 <_strtod_l+0xc00>)
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f7f4 f929 	bl	80005f8 <__aeabi_dmul>
 800c3a6:	4680      	mov	r8, r0
 800c3a8:	4689      	mov	r9, r1
 800c3aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c3ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c3b2:	9315      	str	r3, [sp, #84]	; 0x54
 800c3b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c3b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c3bc:	e79d      	b.n	800c2fa <_strtod_l+0x9aa>
 800c3be:	f1ba 0f01 	cmp.w	sl, #1
 800c3c2:	d102      	bne.n	800c3ca <_strtod_l+0xa7a>
 800c3c4:	2f00      	cmp	r7, #0
 800c3c6:	f43f ad83 	beq.w	800bed0 <_strtod_l+0x580>
 800c3ca:	4b62      	ldr	r3, [pc, #392]	; (800c554 <_strtod_l+0xc04>)
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	e78e      	b.n	800c2ee <_strtod_l+0x99e>
 800c3d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c550 <_strtod_l+0xc00>
 800c3d4:	f04f 0800 	mov.w	r8, #0
 800c3d8:	e7e7      	b.n	800c3aa <_strtod_l+0xa5a>
 800c3da:	4b5d      	ldr	r3, [pc, #372]	; (800c550 <_strtod_l+0xc00>)
 800c3dc:	4640      	mov	r0, r8
 800c3de:	4649      	mov	r1, r9
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f7f4 f909 	bl	80005f8 <__aeabi_dmul>
 800c3e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3e8:	4680      	mov	r8, r0
 800c3ea:	4689      	mov	r9, r1
 800c3ec:	b933      	cbnz	r3, 800c3fc <_strtod_l+0xaac>
 800c3ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3f2:	900e      	str	r0, [sp, #56]	; 0x38
 800c3f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c3fa:	e7dd      	b.n	800c3b8 <_strtod_l+0xa68>
 800c3fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c400:	e7f9      	b.n	800c3f6 <_strtod_l+0xaa6>
 800c402:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c406:	9b04      	ldr	r3, [sp, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1a8      	bne.n	800c35e <_strtod_l+0xa0e>
 800c40c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c410:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c412:	0d1b      	lsrs	r3, r3, #20
 800c414:	051b      	lsls	r3, r3, #20
 800c416:	429a      	cmp	r2, r3
 800c418:	d1a1      	bne.n	800c35e <_strtod_l+0xa0e>
 800c41a:	4640      	mov	r0, r8
 800c41c:	4649      	mov	r1, r9
 800c41e:	f7f4 fc4b 	bl	8000cb8 <__aeabi_d2lz>
 800c422:	f7f4 f8bb 	bl	800059c <__aeabi_l2d>
 800c426:	4602      	mov	r2, r0
 800c428:	460b      	mov	r3, r1
 800c42a:	4640      	mov	r0, r8
 800c42c:	4649      	mov	r1, r9
 800c42e:	f7f3 ff2b 	bl	8000288 <__aeabi_dsub>
 800c432:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c434:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c438:	ea43 030a 	orr.w	r3, r3, sl
 800c43c:	4313      	orrs	r3, r2
 800c43e:	4680      	mov	r8, r0
 800c440:	4689      	mov	r9, r1
 800c442:	d055      	beq.n	800c4f0 <_strtod_l+0xba0>
 800c444:	a336      	add	r3, pc, #216	; (adr r3, 800c520 <_strtod_l+0xbd0>)
 800c446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44a:	f7f4 fb47 	bl	8000adc <__aeabi_dcmplt>
 800c44e:	2800      	cmp	r0, #0
 800c450:	f47f acd0 	bne.w	800bdf4 <_strtod_l+0x4a4>
 800c454:	a334      	add	r3, pc, #208	; (adr r3, 800c528 <_strtod_l+0xbd8>)
 800c456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45a:	4640      	mov	r0, r8
 800c45c:	4649      	mov	r1, r9
 800c45e:	f7f4 fb5b 	bl	8000b18 <__aeabi_dcmpgt>
 800c462:	2800      	cmp	r0, #0
 800c464:	f43f af7b 	beq.w	800c35e <_strtod_l+0xa0e>
 800c468:	e4c4      	b.n	800bdf4 <_strtod_l+0x4a4>
 800c46a:	9b04      	ldr	r3, [sp, #16]
 800c46c:	b333      	cbz	r3, 800c4bc <_strtod_l+0xb6c>
 800c46e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c470:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c474:	d822      	bhi.n	800c4bc <_strtod_l+0xb6c>
 800c476:	a32e      	add	r3, pc, #184	; (adr r3, 800c530 <_strtod_l+0xbe0>)
 800c478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47c:	4640      	mov	r0, r8
 800c47e:	4649      	mov	r1, r9
 800c480:	f7f4 fb36 	bl	8000af0 <__aeabi_dcmple>
 800c484:	b1a0      	cbz	r0, 800c4b0 <_strtod_l+0xb60>
 800c486:	4649      	mov	r1, r9
 800c488:	4640      	mov	r0, r8
 800c48a:	f7f4 fb8d 	bl	8000ba8 <__aeabi_d2uiz>
 800c48e:	2801      	cmp	r0, #1
 800c490:	bf38      	it	cc
 800c492:	2001      	movcc	r0, #1
 800c494:	f7f4 f836 	bl	8000504 <__aeabi_ui2d>
 800c498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c49a:	4680      	mov	r8, r0
 800c49c:	4689      	mov	r9, r1
 800c49e:	bb23      	cbnz	r3, 800c4ea <_strtod_l+0xb9a>
 800c4a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4a4:	9010      	str	r0, [sp, #64]	; 0x40
 800c4a6:	9311      	str	r3, [sp, #68]	; 0x44
 800c4a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c4ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c4b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c4b8:	1a9b      	subs	r3, r3, r2
 800c4ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c4bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c4c0:	eeb0 0a48 	vmov.f32	s0, s16
 800c4c4:	eef0 0a68 	vmov.f32	s1, s17
 800c4c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c4cc:	f002 f8a2 	bl	800e614 <__ulp>
 800c4d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c4d4:	ec53 2b10 	vmov	r2, r3, d0
 800c4d8:	f7f4 f88e 	bl	80005f8 <__aeabi_dmul>
 800c4dc:	ec53 2b18 	vmov	r2, r3, d8
 800c4e0:	f7f3 fed4 	bl	800028c <__adddf3>
 800c4e4:	4682      	mov	sl, r0
 800c4e6:	468b      	mov	fp, r1
 800c4e8:	e78d      	b.n	800c406 <_strtod_l+0xab6>
 800c4ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c4ee:	e7db      	b.n	800c4a8 <_strtod_l+0xb58>
 800c4f0:	a311      	add	r3, pc, #68	; (adr r3, 800c538 <_strtod_l+0xbe8>)
 800c4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f6:	f7f4 faf1 	bl	8000adc <__aeabi_dcmplt>
 800c4fa:	e7b2      	b.n	800c462 <_strtod_l+0xb12>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	930a      	str	r3, [sp, #40]	; 0x28
 800c500:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c502:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c504:	6013      	str	r3, [r2, #0]
 800c506:	f7ff ba6b 	b.w	800b9e0 <_strtod_l+0x90>
 800c50a:	2a65      	cmp	r2, #101	; 0x65
 800c50c:	f43f ab5f 	beq.w	800bbce <_strtod_l+0x27e>
 800c510:	2a45      	cmp	r2, #69	; 0x45
 800c512:	f43f ab5c 	beq.w	800bbce <_strtod_l+0x27e>
 800c516:	2301      	movs	r3, #1
 800c518:	f7ff bb94 	b.w	800bc44 <_strtod_l+0x2f4>
 800c51c:	f3af 8000 	nop.w
 800c520:	94a03595 	.word	0x94a03595
 800c524:	3fdfffff 	.word	0x3fdfffff
 800c528:	35afe535 	.word	0x35afe535
 800c52c:	3fe00000 	.word	0x3fe00000
 800c530:	ffc00000 	.word	0xffc00000
 800c534:	41dfffff 	.word	0x41dfffff
 800c538:	94a03595 	.word	0x94a03595
 800c53c:	3fcfffff 	.word	0x3fcfffff
 800c540:	3ff00000 	.word	0x3ff00000
 800c544:	7ff00000 	.word	0x7ff00000
 800c548:	7fe00000 	.word	0x7fe00000
 800c54c:	7c9fffff 	.word	0x7c9fffff
 800c550:	3fe00000 	.word	0x3fe00000
 800c554:	bff00000 	.word	0xbff00000
 800c558:	7fefffff 	.word	0x7fefffff

0800c55c <_strtod_r>:
 800c55c:	4b01      	ldr	r3, [pc, #4]	; (800c564 <_strtod_r+0x8>)
 800c55e:	f7ff b9f7 	b.w	800b950 <_strtod_l>
 800c562:	bf00      	nop
 800c564:	200000fc 	.word	0x200000fc

0800c568 <_strtol_l.constprop.0>:
 800c568:	2b01      	cmp	r3, #1
 800c56a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c56e:	d001      	beq.n	800c574 <_strtol_l.constprop.0+0xc>
 800c570:	2b24      	cmp	r3, #36	; 0x24
 800c572:	d906      	bls.n	800c582 <_strtol_l.constprop.0+0x1a>
 800c574:	f7fe f8a2 	bl	800a6bc <__errno>
 800c578:	2316      	movs	r3, #22
 800c57a:	6003      	str	r3, [r0, #0]
 800c57c:	2000      	movs	r0, #0
 800c57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c582:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c668 <_strtol_l.constprop.0+0x100>
 800c586:	460d      	mov	r5, r1
 800c588:	462e      	mov	r6, r5
 800c58a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c58e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c592:	f017 0708 	ands.w	r7, r7, #8
 800c596:	d1f7      	bne.n	800c588 <_strtol_l.constprop.0+0x20>
 800c598:	2c2d      	cmp	r4, #45	; 0x2d
 800c59a:	d132      	bne.n	800c602 <_strtol_l.constprop.0+0x9a>
 800c59c:	782c      	ldrb	r4, [r5, #0]
 800c59e:	2701      	movs	r7, #1
 800c5a0:	1cb5      	adds	r5, r6, #2
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d05b      	beq.n	800c65e <_strtol_l.constprop.0+0xf6>
 800c5a6:	2b10      	cmp	r3, #16
 800c5a8:	d109      	bne.n	800c5be <_strtol_l.constprop.0+0x56>
 800c5aa:	2c30      	cmp	r4, #48	; 0x30
 800c5ac:	d107      	bne.n	800c5be <_strtol_l.constprop.0+0x56>
 800c5ae:	782c      	ldrb	r4, [r5, #0]
 800c5b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c5b4:	2c58      	cmp	r4, #88	; 0x58
 800c5b6:	d14d      	bne.n	800c654 <_strtol_l.constprop.0+0xec>
 800c5b8:	786c      	ldrb	r4, [r5, #1]
 800c5ba:	2310      	movs	r3, #16
 800c5bc:	3502      	adds	r5, #2
 800c5be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c5c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c5c6:	f04f 0c00 	mov.w	ip, #0
 800c5ca:	fbb8 f9f3 	udiv	r9, r8, r3
 800c5ce:	4666      	mov	r6, ip
 800c5d0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c5d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c5d8:	f1be 0f09 	cmp.w	lr, #9
 800c5dc:	d816      	bhi.n	800c60c <_strtol_l.constprop.0+0xa4>
 800c5de:	4674      	mov	r4, lr
 800c5e0:	42a3      	cmp	r3, r4
 800c5e2:	dd24      	ble.n	800c62e <_strtol_l.constprop.0+0xc6>
 800c5e4:	f1bc 0f00 	cmp.w	ip, #0
 800c5e8:	db1e      	blt.n	800c628 <_strtol_l.constprop.0+0xc0>
 800c5ea:	45b1      	cmp	r9, r6
 800c5ec:	d31c      	bcc.n	800c628 <_strtol_l.constprop.0+0xc0>
 800c5ee:	d101      	bne.n	800c5f4 <_strtol_l.constprop.0+0x8c>
 800c5f0:	45a2      	cmp	sl, r4
 800c5f2:	db19      	blt.n	800c628 <_strtol_l.constprop.0+0xc0>
 800c5f4:	fb06 4603 	mla	r6, r6, r3, r4
 800c5f8:	f04f 0c01 	mov.w	ip, #1
 800c5fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c600:	e7e8      	b.n	800c5d4 <_strtol_l.constprop.0+0x6c>
 800c602:	2c2b      	cmp	r4, #43	; 0x2b
 800c604:	bf04      	itt	eq
 800c606:	782c      	ldrbeq	r4, [r5, #0]
 800c608:	1cb5      	addeq	r5, r6, #2
 800c60a:	e7ca      	b.n	800c5a2 <_strtol_l.constprop.0+0x3a>
 800c60c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c610:	f1be 0f19 	cmp.w	lr, #25
 800c614:	d801      	bhi.n	800c61a <_strtol_l.constprop.0+0xb2>
 800c616:	3c37      	subs	r4, #55	; 0x37
 800c618:	e7e2      	b.n	800c5e0 <_strtol_l.constprop.0+0x78>
 800c61a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c61e:	f1be 0f19 	cmp.w	lr, #25
 800c622:	d804      	bhi.n	800c62e <_strtol_l.constprop.0+0xc6>
 800c624:	3c57      	subs	r4, #87	; 0x57
 800c626:	e7db      	b.n	800c5e0 <_strtol_l.constprop.0+0x78>
 800c628:	f04f 3cff 	mov.w	ip, #4294967295
 800c62c:	e7e6      	b.n	800c5fc <_strtol_l.constprop.0+0x94>
 800c62e:	f1bc 0f00 	cmp.w	ip, #0
 800c632:	da05      	bge.n	800c640 <_strtol_l.constprop.0+0xd8>
 800c634:	2322      	movs	r3, #34	; 0x22
 800c636:	6003      	str	r3, [r0, #0]
 800c638:	4646      	mov	r6, r8
 800c63a:	b942      	cbnz	r2, 800c64e <_strtol_l.constprop.0+0xe6>
 800c63c:	4630      	mov	r0, r6
 800c63e:	e79e      	b.n	800c57e <_strtol_l.constprop.0+0x16>
 800c640:	b107      	cbz	r7, 800c644 <_strtol_l.constprop.0+0xdc>
 800c642:	4276      	negs	r6, r6
 800c644:	2a00      	cmp	r2, #0
 800c646:	d0f9      	beq.n	800c63c <_strtol_l.constprop.0+0xd4>
 800c648:	f1bc 0f00 	cmp.w	ip, #0
 800c64c:	d000      	beq.n	800c650 <_strtol_l.constprop.0+0xe8>
 800c64e:	1e69      	subs	r1, r5, #1
 800c650:	6011      	str	r1, [r2, #0]
 800c652:	e7f3      	b.n	800c63c <_strtol_l.constprop.0+0xd4>
 800c654:	2430      	movs	r4, #48	; 0x30
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1b1      	bne.n	800c5be <_strtol_l.constprop.0+0x56>
 800c65a:	2308      	movs	r3, #8
 800c65c:	e7af      	b.n	800c5be <_strtol_l.constprop.0+0x56>
 800c65e:	2c30      	cmp	r4, #48	; 0x30
 800c660:	d0a5      	beq.n	800c5ae <_strtol_l.constprop.0+0x46>
 800c662:	230a      	movs	r3, #10
 800c664:	e7ab      	b.n	800c5be <_strtol_l.constprop.0+0x56>
 800c666:	bf00      	nop
 800c668:	0800f325 	.word	0x0800f325

0800c66c <_strtol_r>:
 800c66c:	f7ff bf7c 	b.w	800c568 <_strtol_l.constprop.0>

0800c670 <__swbuf_r>:
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	460e      	mov	r6, r1
 800c674:	4614      	mov	r4, r2
 800c676:	4605      	mov	r5, r0
 800c678:	b118      	cbz	r0, 800c682 <__swbuf_r+0x12>
 800c67a:	6983      	ldr	r3, [r0, #24]
 800c67c:	b90b      	cbnz	r3, 800c682 <__swbuf_r+0x12>
 800c67e:	f7fe f87b 	bl	800a778 <__sinit>
 800c682:	4b21      	ldr	r3, [pc, #132]	; (800c708 <__swbuf_r+0x98>)
 800c684:	429c      	cmp	r4, r3
 800c686:	d12b      	bne.n	800c6e0 <__swbuf_r+0x70>
 800c688:	686c      	ldr	r4, [r5, #4]
 800c68a:	69a3      	ldr	r3, [r4, #24]
 800c68c:	60a3      	str	r3, [r4, #8]
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	071a      	lsls	r2, r3, #28
 800c692:	d52f      	bpl.n	800c6f4 <__swbuf_r+0x84>
 800c694:	6923      	ldr	r3, [r4, #16]
 800c696:	b36b      	cbz	r3, 800c6f4 <__swbuf_r+0x84>
 800c698:	6923      	ldr	r3, [r4, #16]
 800c69a:	6820      	ldr	r0, [r4, #0]
 800c69c:	1ac0      	subs	r0, r0, r3
 800c69e:	6963      	ldr	r3, [r4, #20]
 800c6a0:	b2f6      	uxtb	r6, r6
 800c6a2:	4283      	cmp	r3, r0
 800c6a4:	4637      	mov	r7, r6
 800c6a6:	dc04      	bgt.n	800c6b2 <__swbuf_r+0x42>
 800c6a8:	4621      	mov	r1, r4
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	f000 ffe0 	bl	800d670 <_fflush_r>
 800c6b0:	bb30      	cbnz	r0, 800c700 <__swbuf_r+0x90>
 800c6b2:	68a3      	ldr	r3, [r4, #8]
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	60a3      	str	r3, [r4, #8]
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	6022      	str	r2, [r4, #0]
 800c6be:	701e      	strb	r6, [r3, #0]
 800c6c0:	6963      	ldr	r3, [r4, #20]
 800c6c2:	3001      	adds	r0, #1
 800c6c4:	4283      	cmp	r3, r0
 800c6c6:	d004      	beq.n	800c6d2 <__swbuf_r+0x62>
 800c6c8:	89a3      	ldrh	r3, [r4, #12]
 800c6ca:	07db      	lsls	r3, r3, #31
 800c6cc:	d506      	bpl.n	800c6dc <__swbuf_r+0x6c>
 800c6ce:	2e0a      	cmp	r6, #10
 800c6d0:	d104      	bne.n	800c6dc <__swbuf_r+0x6c>
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	f000 ffcb 	bl	800d670 <_fflush_r>
 800c6da:	b988      	cbnz	r0, 800c700 <__swbuf_r+0x90>
 800c6dc:	4638      	mov	r0, r7
 800c6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6e0:	4b0a      	ldr	r3, [pc, #40]	; (800c70c <__swbuf_r+0x9c>)
 800c6e2:	429c      	cmp	r4, r3
 800c6e4:	d101      	bne.n	800c6ea <__swbuf_r+0x7a>
 800c6e6:	68ac      	ldr	r4, [r5, #8]
 800c6e8:	e7cf      	b.n	800c68a <__swbuf_r+0x1a>
 800c6ea:	4b09      	ldr	r3, [pc, #36]	; (800c710 <__swbuf_r+0xa0>)
 800c6ec:	429c      	cmp	r4, r3
 800c6ee:	bf08      	it	eq
 800c6f0:	68ec      	ldreq	r4, [r5, #12]
 800c6f2:	e7ca      	b.n	800c68a <__swbuf_r+0x1a>
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f000 f81e 	bl	800c738 <__swsetup_r>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d0cb      	beq.n	800c698 <__swbuf_r+0x28>
 800c700:	f04f 37ff 	mov.w	r7, #4294967295
 800c704:	e7ea      	b.n	800c6dc <__swbuf_r+0x6c>
 800c706:	bf00      	nop
 800c708:	0800f214 	.word	0x0800f214
 800c70c:	0800f234 	.word	0x0800f234
 800c710:	0800f1f4 	.word	0x0800f1f4

0800c714 <_write_r>:
 800c714:	b538      	push	{r3, r4, r5, lr}
 800c716:	4d07      	ldr	r5, [pc, #28]	; (800c734 <_write_r+0x20>)
 800c718:	4604      	mov	r4, r0
 800c71a:	4608      	mov	r0, r1
 800c71c:	4611      	mov	r1, r2
 800c71e:	2200      	movs	r2, #0
 800c720:	602a      	str	r2, [r5, #0]
 800c722:	461a      	mov	r2, r3
 800c724:	f7f4 ff31 	bl	800158a <_write>
 800c728:	1c43      	adds	r3, r0, #1
 800c72a:	d102      	bne.n	800c732 <_write_r+0x1e>
 800c72c:	682b      	ldr	r3, [r5, #0]
 800c72e:	b103      	cbz	r3, 800c732 <_write_r+0x1e>
 800c730:	6023      	str	r3, [r4, #0]
 800c732:	bd38      	pop	{r3, r4, r5, pc}
 800c734:	20008418 	.word	0x20008418

0800c738 <__swsetup_r>:
 800c738:	4b32      	ldr	r3, [pc, #200]	; (800c804 <__swsetup_r+0xcc>)
 800c73a:	b570      	push	{r4, r5, r6, lr}
 800c73c:	681d      	ldr	r5, [r3, #0]
 800c73e:	4606      	mov	r6, r0
 800c740:	460c      	mov	r4, r1
 800c742:	b125      	cbz	r5, 800c74e <__swsetup_r+0x16>
 800c744:	69ab      	ldr	r3, [r5, #24]
 800c746:	b913      	cbnz	r3, 800c74e <__swsetup_r+0x16>
 800c748:	4628      	mov	r0, r5
 800c74a:	f7fe f815 	bl	800a778 <__sinit>
 800c74e:	4b2e      	ldr	r3, [pc, #184]	; (800c808 <__swsetup_r+0xd0>)
 800c750:	429c      	cmp	r4, r3
 800c752:	d10f      	bne.n	800c774 <__swsetup_r+0x3c>
 800c754:	686c      	ldr	r4, [r5, #4]
 800c756:	89a3      	ldrh	r3, [r4, #12]
 800c758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c75c:	0719      	lsls	r1, r3, #28
 800c75e:	d42c      	bmi.n	800c7ba <__swsetup_r+0x82>
 800c760:	06dd      	lsls	r5, r3, #27
 800c762:	d411      	bmi.n	800c788 <__swsetup_r+0x50>
 800c764:	2309      	movs	r3, #9
 800c766:	6033      	str	r3, [r6, #0]
 800c768:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c76c:	81a3      	strh	r3, [r4, #12]
 800c76e:	f04f 30ff 	mov.w	r0, #4294967295
 800c772:	e03e      	b.n	800c7f2 <__swsetup_r+0xba>
 800c774:	4b25      	ldr	r3, [pc, #148]	; (800c80c <__swsetup_r+0xd4>)
 800c776:	429c      	cmp	r4, r3
 800c778:	d101      	bne.n	800c77e <__swsetup_r+0x46>
 800c77a:	68ac      	ldr	r4, [r5, #8]
 800c77c:	e7eb      	b.n	800c756 <__swsetup_r+0x1e>
 800c77e:	4b24      	ldr	r3, [pc, #144]	; (800c810 <__swsetup_r+0xd8>)
 800c780:	429c      	cmp	r4, r3
 800c782:	bf08      	it	eq
 800c784:	68ec      	ldreq	r4, [r5, #12]
 800c786:	e7e6      	b.n	800c756 <__swsetup_r+0x1e>
 800c788:	0758      	lsls	r0, r3, #29
 800c78a:	d512      	bpl.n	800c7b2 <__swsetup_r+0x7a>
 800c78c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c78e:	b141      	cbz	r1, 800c7a2 <__swsetup_r+0x6a>
 800c790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c794:	4299      	cmp	r1, r3
 800c796:	d002      	beq.n	800c79e <__swsetup_r+0x66>
 800c798:	4630      	mov	r0, r6
 800c79a:	f002 f8a1 	bl	800e8e0 <_free_r>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	6363      	str	r3, [r4, #52]	; 0x34
 800c7a2:	89a3      	ldrh	r3, [r4, #12]
 800c7a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c7a8:	81a3      	strh	r3, [r4, #12]
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	6063      	str	r3, [r4, #4]
 800c7ae:	6923      	ldr	r3, [r4, #16]
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	89a3      	ldrh	r3, [r4, #12]
 800c7b4:	f043 0308 	orr.w	r3, r3, #8
 800c7b8:	81a3      	strh	r3, [r4, #12]
 800c7ba:	6923      	ldr	r3, [r4, #16]
 800c7bc:	b94b      	cbnz	r3, 800c7d2 <__swsetup_r+0x9a>
 800c7be:	89a3      	ldrh	r3, [r4, #12]
 800c7c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c7c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7c8:	d003      	beq.n	800c7d2 <__swsetup_r+0x9a>
 800c7ca:	4621      	mov	r1, r4
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	f001 fb49 	bl	800de64 <__smakebuf_r>
 800c7d2:	89a0      	ldrh	r0, [r4, #12]
 800c7d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7d8:	f010 0301 	ands.w	r3, r0, #1
 800c7dc:	d00a      	beq.n	800c7f4 <__swsetup_r+0xbc>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	60a3      	str	r3, [r4, #8]
 800c7e2:	6963      	ldr	r3, [r4, #20]
 800c7e4:	425b      	negs	r3, r3
 800c7e6:	61a3      	str	r3, [r4, #24]
 800c7e8:	6923      	ldr	r3, [r4, #16]
 800c7ea:	b943      	cbnz	r3, 800c7fe <__swsetup_r+0xc6>
 800c7ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c7f0:	d1ba      	bne.n	800c768 <__swsetup_r+0x30>
 800c7f2:	bd70      	pop	{r4, r5, r6, pc}
 800c7f4:	0781      	lsls	r1, r0, #30
 800c7f6:	bf58      	it	pl
 800c7f8:	6963      	ldrpl	r3, [r4, #20]
 800c7fa:	60a3      	str	r3, [r4, #8]
 800c7fc:	e7f4      	b.n	800c7e8 <__swsetup_r+0xb0>
 800c7fe:	2000      	movs	r0, #0
 800c800:	e7f7      	b.n	800c7f2 <__swsetup_r+0xba>
 800c802:	bf00      	nop
 800c804:	20000094 	.word	0x20000094
 800c808:	0800f214 	.word	0x0800f214
 800c80c:	0800f234 	.word	0x0800f234
 800c810:	0800f1f4 	.word	0x0800f1f4

0800c814 <__assert_func>:
 800c814:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c816:	4614      	mov	r4, r2
 800c818:	461a      	mov	r2, r3
 800c81a:	4b09      	ldr	r3, [pc, #36]	; (800c840 <__assert_func+0x2c>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4605      	mov	r5, r0
 800c820:	68d8      	ldr	r0, [r3, #12]
 800c822:	b14c      	cbz	r4, 800c838 <__assert_func+0x24>
 800c824:	4b07      	ldr	r3, [pc, #28]	; (800c844 <__assert_func+0x30>)
 800c826:	9100      	str	r1, [sp, #0]
 800c828:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c82c:	4906      	ldr	r1, [pc, #24]	; (800c848 <__assert_func+0x34>)
 800c82e:	462b      	mov	r3, r5
 800c830:	f000 ff5a 	bl	800d6e8 <fiprintf>
 800c834:	f002 fb91 	bl	800ef5a <abort>
 800c838:	4b04      	ldr	r3, [pc, #16]	; (800c84c <__assert_func+0x38>)
 800c83a:	461c      	mov	r4, r3
 800c83c:	e7f3      	b.n	800c826 <__assert_func+0x12>
 800c83e:	bf00      	nop
 800c840:	20000094 	.word	0x20000094
 800c844:	0800f2e8 	.word	0x0800f2e8
 800c848:	0800f2f5 	.word	0x0800f2f5
 800c84c:	0800f323 	.word	0x0800f323

0800c850 <_close_r>:
 800c850:	b538      	push	{r3, r4, r5, lr}
 800c852:	4d06      	ldr	r5, [pc, #24]	; (800c86c <_close_r+0x1c>)
 800c854:	2300      	movs	r3, #0
 800c856:	4604      	mov	r4, r0
 800c858:	4608      	mov	r0, r1
 800c85a:	602b      	str	r3, [r5, #0]
 800c85c:	f7f4 feb1 	bl	80015c2 <_close>
 800c860:	1c43      	adds	r3, r0, #1
 800c862:	d102      	bne.n	800c86a <_close_r+0x1a>
 800c864:	682b      	ldr	r3, [r5, #0]
 800c866:	b103      	cbz	r3, 800c86a <_close_r+0x1a>
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	bd38      	pop	{r3, r4, r5, pc}
 800c86c:	20008418 	.word	0x20008418

0800c870 <quorem>:
 800c870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c874:	6903      	ldr	r3, [r0, #16]
 800c876:	690c      	ldr	r4, [r1, #16]
 800c878:	42a3      	cmp	r3, r4
 800c87a:	4607      	mov	r7, r0
 800c87c:	f2c0 8081 	blt.w	800c982 <quorem+0x112>
 800c880:	3c01      	subs	r4, #1
 800c882:	f101 0814 	add.w	r8, r1, #20
 800c886:	f100 0514 	add.w	r5, r0, #20
 800c88a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c88e:	9301      	str	r3, [sp, #4]
 800c890:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c894:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c898:	3301      	adds	r3, #1
 800c89a:	429a      	cmp	r2, r3
 800c89c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c8a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c8a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c8a8:	d331      	bcc.n	800c90e <quorem+0x9e>
 800c8aa:	f04f 0e00 	mov.w	lr, #0
 800c8ae:	4640      	mov	r0, r8
 800c8b0:	46ac      	mov	ip, r5
 800c8b2:	46f2      	mov	sl, lr
 800c8b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c8b8:	b293      	uxth	r3, r2
 800c8ba:	fb06 e303 	mla	r3, r6, r3, lr
 800c8be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	ebaa 0303 	sub.w	r3, sl, r3
 800c8c8:	f8dc a000 	ldr.w	sl, [ip]
 800c8cc:	0c12      	lsrs	r2, r2, #16
 800c8ce:	fa13 f38a 	uxtah	r3, r3, sl
 800c8d2:	fb06 e202 	mla	r2, r6, r2, lr
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	9b00      	ldr	r3, [sp, #0]
 800c8da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c8de:	b292      	uxth	r2, r2
 800c8e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c8e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800c8ec:	4581      	cmp	r9, r0
 800c8ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8f2:	f84c 3b04 	str.w	r3, [ip], #4
 800c8f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c8fa:	d2db      	bcs.n	800c8b4 <quorem+0x44>
 800c8fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800c900:	b92b      	cbnz	r3, 800c90e <quorem+0x9e>
 800c902:	9b01      	ldr	r3, [sp, #4]
 800c904:	3b04      	subs	r3, #4
 800c906:	429d      	cmp	r5, r3
 800c908:	461a      	mov	r2, r3
 800c90a:	d32e      	bcc.n	800c96a <quorem+0xfa>
 800c90c:	613c      	str	r4, [r7, #16]
 800c90e:	4638      	mov	r0, r7
 800c910:	f001 fdda 	bl	800e4c8 <__mcmp>
 800c914:	2800      	cmp	r0, #0
 800c916:	db24      	blt.n	800c962 <quorem+0xf2>
 800c918:	3601      	adds	r6, #1
 800c91a:	4628      	mov	r0, r5
 800c91c:	f04f 0c00 	mov.w	ip, #0
 800c920:	f858 2b04 	ldr.w	r2, [r8], #4
 800c924:	f8d0 e000 	ldr.w	lr, [r0]
 800c928:	b293      	uxth	r3, r2
 800c92a:	ebac 0303 	sub.w	r3, ip, r3
 800c92e:	0c12      	lsrs	r2, r2, #16
 800c930:	fa13 f38e 	uxtah	r3, r3, lr
 800c934:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c938:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c942:	45c1      	cmp	r9, r8
 800c944:	f840 3b04 	str.w	r3, [r0], #4
 800c948:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c94c:	d2e8      	bcs.n	800c920 <quorem+0xb0>
 800c94e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c956:	b922      	cbnz	r2, 800c962 <quorem+0xf2>
 800c958:	3b04      	subs	r3, #4
 800c95a:	429d      	cmp	r5, r3
 800c95c:	461a      	mov	r2, r3
 800c95e:	d30a      	bcc.n	800c976 <quorem+0x106>
 800c960:	613c      	str	r4, [r7, #16]
 800c962:	4630      	mov	r0, r6
 800c964:	b003      	add	sp, #12
 800c966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c96a:	6812      	ldr	r2, [r2, #0]
 800c96c:	3b04      	subs	r3, #4
 800c96e:	2a00      	cmp	r2, #0
 800c970:	d1cc      	bne.n	800c90c <quorem+0x9c>
 800c972:	3c01      	subs	r4, #1
 800c974:	e7c7      	b.n	800c906 <quorem+0x96>
 800c976:	6812      	ldr	r2, [r2, #0]
 800c978:	3b04      	subs	r3, #4
 800c97a:	2a00      	cmp	r2, #0
 800c97c:	d1f0      	bne.n	800c960 <quorem+0xf0>
 800c97e:	3c01      	subs	r4, #1
 800c980:	e7eb      	b.n	800c95a <quorem+0xea>
 800c982:	2000      	movs	r0, #0
 800c984:	e7ee      	b.n	800c964 <quorem+0xf4>
	...

0800c988 <_dtoa_r>:
 800c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98c:	ed2d 8b04 	vpush	{d8-d9}
 800c990:	ec57 6b10 	vmov	r6, r7, d0
 800c994:	b093      	sub	sp, #76	; 0x4c
 800c996:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c998:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c99c:	9106      	str	r1, [sp, #24]
 800c99e:	ee10 aa10 	vmov	sl, s0
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	9209      	str	r2, [sp, #36]	; 0x24
 800c9a6:	930c      	str	r3, [sp, #48]	; 0x30
 800c9a8:	46bb      	mov	fp, r7
 800c9aa:	b975      	cbnz	r5, 800c9ca <_dtoa_r+0x42>
 800c9ac:	2010      	movs	r0, #16
 800c9ae:	f001 fa99 	bl	800dee4 <malloc>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	6260      	str	r0, [r4, #36]	; 0x24
 800c9b6:	b920      	cbnz	r0, 800c9c2 <_dtoa_r+0x3a>
 800c9b8:	4ba7      	ldr	r3, [pc, #668]	; (800cc58 <_dtoa_r+0x2d0>)
 800c9ba:	21ea      	movs	r1, #234	; 0xea
 800c9bc:	48a7      	ldr	r0, [pc, #668]	; (800cc5c <_dtoa_r+0x2d4>)
 800c9be:	f7ff ff29 	bl	800c814 <__assert_func>
 800c9c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c9c6:	6005      	str	r5, [r0, #0]
 800c9c8:	60c5      	str	r5, [r0, #12]
 800c9ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9cc:	6819      	ldr	r1, [r3, #0]
 800c9ce:	b151      	cbz	r1, 800c9e6 <_dtoa_r+0x5e>
 800c9d0:	685a      	ldr	r2, [r3, #4]
 800c9d2:	604a      	str	r2, [r1, #4]
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	4093      	lsls	r3, r2
 800c9d8:	608b      	str	r3, [r1, #8]
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f001 fae8 	bl	800dfb0 <_Bfree>
 800c9e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	601a      	str	r2, [r3, #0]
 800c9e6:	1e3b      	subs	r3, r7, #0
 800c9e8:	bfaa      	itet	ge
 800c9ea:	2300      	movge	r3, #0
 800c9ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c9f0:	f8c8 3000 	strge.w	r3, [r8]
 800c9f4:	4b9a      	ldr	r3, [pc, #616]	; (800cc60 <_dtoa_r+0x2d8>)
 800c9f6:	bfbc      	itt	lt
 800c9f8:	2201      	movlt	r2, #1
 800c9fa:	f8c8 2000 	strlt.w	r2, [r8]
 800c9fe:	ea33 030b 	bics.w	r3, r3, fp
 800ca02:	d11b      	bne.n	800ca3c <_dtoa_r+0xb4>
 800ca04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca06:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca0a:	6013      	str	r3, [r2, #0]
 800ca0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca10:	4333      	orrs	r3, r6
 800ca12:	f000 8592 	beq.w	800d53a <_dtoa_r+0xbb2>
 800ca16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca18:	b963      	cbnz	r3, 800ca34 <_dtoa_r+0xac>
 800ca1a:	4b92      	ldr	r3, [pc, #584]	; (800cc64 <_dtoa_r+0x2dc>)
 800ca1c:	e022      	b.n	800ca64 <_dtoa_r+0xdc>
 800ca1e:	4b92      	ldr	r3, [pc, #584]	; (800cc68 <_dtoa_r+0x2e0>)
 800ca20:	9301      	str	r3, [sp, #4]
 800ca22:	3308      	adds	r3, #8
 800ca24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca26:	6013      	str	r3, [r2, #0]
 800ca28:	9801      	ldr	r0, [sp, #4]
 800ca2a:	b013      	add	sp, #76	; 0x4c
 800ca2c:	ecbd 8b04 	vpop	{d8-d9}
 800ca30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca34:	4b8b      	ldr	r3, [pc, #556]	; (800cc64 <_dtoa_r+0x2dc>)
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	3303      	adds	r3, #3
 800ca3a:	e7f3      	b.n	800ca24 <_dtoa_r+0x9c>
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	2300      	movs	r3, #0
 800ca40:	4650      	mov	r0, sl
 800ca42:	4659      	mov	r1, fp
 800ca44:	f7f4 f840 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca48:	ec4b ab19 	vmov	d9, sl, fp
 800ca4c:	4680      	mov	r8, r0
 800ca4e:	b158      	cbz	r0, 800ca68 <_dtoa_r+0xe0>
 800ca50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca52:	2301      	movs	r3, #1
 800ca54:	6013      	str	r3, [r2, #0]
 800ca56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 856b 	beq.w	800d534 <_dtoa_r+0xbac>
 800ca5e:	4883      	ldr	r0, [pc, #524]	; (800cc6c <_dtoa_r+0x2e4>)
 800ca60:	6018      	str	r0, [r3, #0]
 800ca62:	1e43      	subs	r3, r0, #1
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	e7df      	b.n	800ca28 <_dtoa_r+0xa0>
 800ca68:	ec4b ab10 	vmov	d0, sl, fp
 800ca6c:	aa10      	add	r2, sp, #64	; 0x40
 800ca6e:	a911      	add	r1, sp, #68	; 0x44
 800ca70:	4620      	mov	r0, r4
 800ca72:	f001 fe4b 	bl	800e70c <__d2b>
 800ca76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ca7a:	ee08 0a10 	vmov	s16, r0
 800ca7e:	2d00      	cmp	r5, #0
 800ca80:	f000 8084 	beq.w	800cb8c <_dtoa_r+0x204>
 800ca84:	ee19 3a90 	vmov	r3, s19
 800ca88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ca90:	4656      	mov	r6, sl
 800ca92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ca96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ca9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ca9e:	4b74      	ldr	r3, [pc, #464]	; (800cc70 <_dtoa_r+0x2e8>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	4630      	mov	r0, r6
 800caa4:	4639      	mov	r1, r7
 800caa6:	f7f3 fbef 	bl	8000288 <__aeabi_dsub>
 800caaa:	a365      	add	r3, pc, #404	; (adr r3, 800cc40 <_dtoa_r+0x2b8>)
 800caac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab0:	f7f3 fda2 	bl	80005f8 <__aeabi_dmul>
 800cab4:	a364      	add	r3, pc, #400	; (adr r3, 800cc48 <_dtoa_r+0x2c0>)
 800cab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caba:	f7f3 fbe7 	bl	800028c <__adddf3>
 800cabe:	4606      	mov	r6, r0
 800cac0:	4628      	mov	r0, r5
 800cac2:	460f      	mov	r7, r1
 800cac4:	f7f3 fd2e 	bl	8000524 <__aeabi_i2d>
 800cac8:	a361      	add	r3, pc, #388	; (adr r3, 800cc50 <_dtoa_r+0x2c8>)
 800caca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cace:	f7f3 fd93 	bl	80005f8 <__aeabi_dmul>
 800cad2:	4602      	mov	r2, r0
 800cad4:	460b      	mov	r3, r1
 800cad6:	4630      	mov	r0, r6
 800cad8:	4639      	mov	r1, r7
 800cada:	f7f3 fbd7 	bl	800028c <__adddf3>
 800cade:	4606      	mov	r6, r0
 800cae0:	460f      	mov	r7, r1
 800cae2:	f7f4 f839 	bl	8000b58 <__aeabi_d2iz>
 800cae6:	2200      	movs	r2, #0
 800cae8:	9000      	str	r0, [sp, #0]
 800caea:	2300      	movs	r3, #0
 800caec:	4630      	mov	r0, r6
 800caee:	4639      	mov	r1, r7
 800caf0:	f7f3 fff4 	bl	8000adc <__aeabi_dcmplt>
 800caf4:	b150      	cbz	r0, 800cb0c <_dtoa_r+0x184>
 800caf6:	9800      	ldr	r0, [sp, #0]
 800caf8:	f7f3 fd14 	bl	8000524 <__aeabi_i2d>
 800cafc:	4632      	mov	r2, r6
 800cafe:	463b      	mov	r3, r7
 800cb00:	f7f3 ffe2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb04:	b910      	cbnz	r0, 800cb0c <_dtoa_r+0x184>
 800cb06:	9b00      	ldr	r3, [sp, #0]
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	9b00      	ldr	r3, [sp, #0]
 800cb0e:	2b16      	cmp	r3, #22
 800cb10:	d85a      	bhi.n	800cbc8 <_dtoa_r+0x240>
 800cb12:	9a00      	ldr	r2, [sp, #0]
 800cb14:	4b57      	ldr	r3, [pc, #348]	; (800cc74 <_dtoa_r+0x2ec>)
 800cb16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1e:	ec51 0b19 	vmov	r0, r1, d9
 800cb22:	f7f3 ffdb 	bl	8000adc <__aeabi_dcmplt>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d050      	beq.n	800cbcc <_dtoa_r+0x244>
 800cb2a:	9b00      	ldr	r3, [sp, #0]
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	2300      	movs	r3, #0
 800cb32:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb36:	1b5d      	subs	r5, r3, r5
 800cb38:	1e6b      	subs	r3, r5, #1
 800cb3a:	9305      	str	r3, [sp, #20]
 800cb3c:	bf45      	ittet	mi
 800cb3e:	f1c5 0301 	rsbmi	r3, r5, #1
 800cb42:	9304      	strmi	r3, [sp, #16]
 800cb44:	2300      	movpl	r3, #0
 800cb46:	2300      	movmi	r3, #0
 800cb48:	bf4c      	ite	mi
 800cb4a:	9305      	strmi	r3, [sp, #20]
 800cb4c:	9304      	strpl	r3, [sp, #16]
 800cb4e:	9b00      	ldr	r3, [sp, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	db3d      	blt.n	800cbd0 <_dtoa_r+0x248>
 800cb54:	9b05      	ldr	r3, [sp, #20]
 800cb56:	9a00      	ldr	r2, [sp, #0]
 800cb58:	920a      	str	r2, [sp, #40]	; 0x28
 800cb5a:	4413      	add	r3, r2
 800cb5c:	9305      	str	r3, [sp, #20]
 800cb5e:	2300      	movs	r3, #0
 800cb60:	9307      	str	r3, [sp, #28]
 800cb62:	9b06      	ldr	r3, [sp, #24]
 800cb64:	2b09      	cmp	r3, #9
 800cb66:	f200 8089 	bhi.w	800cc7c <_dtoa_r+0x2f4>
 800cb6a:	2b05      	cmp	r3, #5
 800cb6c:	bfc4      	itt	gt
 800cb6e:	3b04      	subgt	r3, #4
 800cb70:	9306      	strgt	r3, [sp, #24]
 800cb72:	9b06      	ldr	r3, [sp, #24]
 800cb74:	f1a3 0302 	sub.w	r3, r3, #2
 800cb78:	bfcc      	ite	gt
 800cb7a:	2500      	movgt	r5, #0
 800cb7c:	2501      	movle	r5, #1
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	f200 8087 	bhi.w	800cc92 <_dtoa_r+0x30a>
 800cb84:	e8df f003 	tbb	[pc, r3]
 800cb88:	59383a2d 	.word	0x59383a2d
 800cb8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cb90:	441d      	add	r5, r3
 800cb92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cb96:	2b20      	cmp	r3, #32
 800cb98:	bfc1      	itttt	gt
 800cb9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cb9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cba2:	fa0b f303 	lslgt.w	r3, fp, r3
 800cba6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cbaa:	bfda      	itte	le
 800cbac:	f1c3 0320 	rsble	r3, r3, #32
 800cbb0:	fa06 f003 	lslle.w	r0, r6, r3
 800cbb4:	4318      	orrgt	r0, r3
 800cbb6:	f7f3 fca5 	bl	8000504 <__aeabi_ui2d>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cbc2:	3d01      	subs	r5, #1
 800cbc4:	930e      	str	r3, [sp, #56]	; 0x38
 800cbc6:	e76a      	b.n	800ca9e <_dtoa_r+0x116>
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e7b2      	b.n	800cb32 <_dtoa_r+0x1aa>
 800cbcc:	900b      	str	r0, [sp, #44]	; 0x2c
 800cbce:	e7b1      	b.n	800cb34 <_dtoa_r+0x1ac>
 800cbd0:	9b04      	ldr	r3, [sp, #16]
 800cbd2:	9a00      	ldr	r2, [sp, #0]
 800cbd4:	1a9b      	subs	r3, r3, r2
 800cbd6:	9304      	str	r3, [sp, #16]
 800cbd8:	4253      	negs	r3, r2
 800cbda:	9307      	str	r3, [sp, #28]
 800cbdc:	2300      	movs	r3, #0
 800cbde:	930a      	str	r3, [sp, #40]	; 0x28
 800cbe0:	e7bf      	b.n	800cb62 <_dtoa_r+0x1da>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	9308      	str	r3, [sp, #32]
 800cbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	dc55      	bgt.n	800cc98 <_dtoa_r+0x310>
 800cbec:	2301      	movs	r3, #1
 800cbee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	9209      	str	r2, [sp, #36]	; 0x24
 800cbf6:	e00c      	b.n	800cc12 <_dtoa_r+0x28a>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e7f3      	b.n	800cbe4 <_dtoa_r+0x25c>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc00:	9308      	str	r3, [sp, #32]
 800cc02:	9b00      	ldr	r3, [sp, #0]
 800cc04:	4413      	add	r3, r2
 800cc06:	9302      	str	r3, [sp, #8]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	9303      	str	r3, [sp, #12]
 800cc0e:	bfb8      	it	lt
 800cc10:	2301      	movlt	r3, #1
 800cc12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cc14:	2200      	movs	r2, #0
 800cc16:	6042      	str	r2, [r0, #4]
 800cc18:	2204      	movs	r2, #4
 800cc1a:	f102 0614 	add.w	r6, r2, #20
 800cc1e:	429e      	cmp	r6, r3
 800cc20:	6841      	ldr	r1, [r0, #4]
 800cc22:	d93d      	bls.n	800cca0 <_dtoa_r+0x318>
 800cc24:	4620      	mov	r0, r4
 800cc26:	f001 f983 	bl	800df30 <_Balloc>
 800cc2a:	9001      	str	r0, [sp, #4]
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	d13b      	bne.n	800cca8 <_dtoa_r+0x320>
 800cc30:	4b11      	ldr	r3, [pc, #68]	; (800cc78 <_dtoa_r+0x2f0>)
 800cc32:	4602      	mov	r2, r0
 800cc34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cc38:	e6c0      	b.n	800c9bc <_dtoa_r+0x34>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e7df      	b.n	800cbfe <_dtoa_r+0x276>
 800cc3e:	bf00      	nop
 800cc40:	636f4361 	.word	0x636f4361
 800cc44:	3fd287a7 	.word	0x3fd287a7
 800cc48:	8b60c8b3 	.word	0x8b60c8b3
 800cc4c:	3fc68a28 	.word	0x3fc68a28
 800cc50:	509f79fb 	.word	0x509f79fb
 800cc54:	3fd34413 	.word	0x3fd34413
 800cc58:	0800f432 	.word	0x0800f432
 800cc5c:	0800f449 	.word	0x0800f449
 800cc60:	7ff00000 	.word	0x7ff00000
 800cc64:	0800f42e 	.word	0x0800f42e
 800cc68:	0800f425 	.word	0x0800f425
 800cc6c:	0800f269 	.word	0x0800f269
 800cc70:	3ff80000 	.word	0x3ff80000
 800cc74:	0800f5b8 	.word	0x0800f5b8
 800cc78:	0800f4a4 	.word	0x0800f4a4
 800cc7c:	2501      	movs	r5, #1
 800cc7e:	2300      	movs	r3, #0
 800cc80:	9306      	str	r3, [sp, #24]
 800cc82:	9508      	str	r5, [sp, #32]
 800cc84:	f04f 33ff 	mov.w	r3, #4294967295
 800cc88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	2312      	movs	r3, #18
 800cc90:	e7b0      	b.n	800cbf4 <_dtoa_r+0x26c>
 800cc92:	2301      	movs	r3, #1
 800cc94:	9308      	str	r3, [sp, #32]
 800cc96:	e7f5      	b.n	800cc84 <_dtoa_r+0x2fc>
 800cc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cc9e:	e7b8      	b.n	800cc12 <_dtoa_r+0x28a>
 800cca0:	3101      	adds	r1, #1
 800cca2:	6041      	str	r1, [r0, #4]
 800cca4:	0052      	lsls	r2, r2, #1
 800cca6:	e7b8      	b.n	800cc1a <_dtoa_r+0x292>
 800cca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccaa:	9a01      	ldr	r2, [sp, #4]
 800ccac:	601a      	str	r2, [r3, #0]
 800ccae:	9b03      	ldr	r3, [sp, #12]
 800ccb0:	2b0e      	cmp	r3, #14
 800ccb2:	f200 809d 	bhi.w	800cdf0 <_dtoa_r+0x468>
 800ccb6:	2d00      	cmp	r5, #0
 800ccb8:	f000 809a 	beq.w	800cdf0 <_dtoa_r+0x468>
 800ccbc:	9b00      	ldr	r3, [sp, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	dd32      	ble.n	800cd28 <_dtoa_r+0x3a0>
 800ccc2:	4ab7      	ldr	r2, [pc, #732]	; (800cfa0 <_dtoa_r+0x618>)
 800ccc4:	f003 030f 	and.w	r3, r3, #15
 800ccc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cccc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ccd0:	9b00      	ldr	r3, [sp, #0]
 800ccd2:	05d8      	lsls	r0, r3, #23
 800ccd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ccd8:	d516      	bpl.n	800cd08 <_dtoa_r+0x380>
 800ccda:	4bb2      	ldr	r3, [pc, #712]	; (800cfa4 <_dtoa_r+0x61c>)
 800ccdc:	ec51 0b19 	vmov	r0, r1, d9
 800cce0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cce4:	f7f3 fdb2 	bl	800084c <__aeabi_ddiv>
 800cce8:	f007 070f 	and.w	r7, r7, #15
 800ccec:	4682      	mov	sl, r0
 800ccee:	468b      	mov	fp, r1
 800ccf0:	2503      	movs	r5, #3
 800ccf2:	4eac      	ldr	r6, [pc, #688]	; (800cfa4 <_dtoa_r+0x61c>)
 800ccf4:	b957      	cbnz	r7, 800cd0c <_dtoa_r+0x384>
 800ccf6:	4642      	mov	r2, r8
 800ccf8:	464b      	mov	r3, r9
 800ccfa:	4650      	mov	r0, sl
 800ccfc:	4659      	mov	r1, fp
 800ccfe:	f7f3 fda5 	bl	800084c <__aeabi_ddiv>
 800cd02:	4682      	mov	sl, r0
 800cd04:	468b      	mov	fp, r1
 800cd06:	e028      	b.n	800cd5a <_dtoa_r+0x3d2>
 800cd08:	2502      	movs	r5, #2
 800cd0a:	e7f2      	b.n	800ccf2 <_dtoa_r+0x36a>
 800cd0c:	07f9      	lsls	r1, r7, #31
 800cd0e:	d508      	bpl.n	800cd22 <_dtoa_r+0x39a>
 800cd10:	4640      	mov	r0, r8
 800cd12:	4649      	mov	r1, r9
 800cd14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cd18:	f7f3 fc6e 	bl	80005f8 <__aeabi_dmul>
 800cd1c:	3501      	adds	r5, #1
 800cd1e:	4680      	mov	r8, r0
 800cd20:	4689      	mov	r9, r1
 800cd22:	107f      	asrs	r7, r7, #1
 800cd24:	3608      	adds	r6, #8
 800cd26:	e7e5      	b.n	800ccf4 <_dtoa_r+0x36c>
 800cd28:	f000 809b 	beq.w	800ce62 <_dtoa_r+0x4da>
 800cd2c:	9b00      	ldr	r3, [sp, #0]
 800cd2e:	4f9d      	ldr	r7, [pc, #628]	; (800cfa4 <_dtoa_r+0x61c>)
 800cd30:	425e      	negs	r6, r3
 800cd32:	4b9b      	ldr	r3, [pc, #620]	; (800cfa0 <_dtoa_r+0x618>)
 800cd34:	f006 020f 	and.w	r2, r6, #15
 800cd38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd40:	ec51 0b19 	vmov	r0, r1, d9
 800cd44:	f7f3 fc58 	bl	80005f8 <__aeabi_dmul>
 800cd48:	1136      	asrs	r6, r6, #4
 800cd4a:	4682      	mov	sl, r0
 800cd4c:	468b      	mov	fp, r1
 800cd4e:	2300      	movs	r3, #0
 800cd50:	2502      	movs	r5, #2
 800cd52:	2e00      	cmp	r6, #0
 800cd54:	d17a      	bne.n	800ce4c <_dtoa_r+0x4c4>
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1d3      	bne.n	800cd02 <_dtoa_r+0x37a>
 800cd5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f000 8082 	beq.w	800ce66 <_dtoa_r+0x4de>
 800cd62:	4b91      	ldr	r3, [pc, #580]	; (800cfa8 <_dtoa_r+0x620>)
 800cd64:	2200      	movs	r2, #0
 800cd66:	4650      	mov	r0, sl
 800cd68:	4659      	mov	r1, fp
 800cd6a:	f7f3 feb7 	bl	8000adc <__aeabi_dcmplt>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	d079      	beq.n	800ce66 <_dtoa_r+0x4de>
 800cd72:	9b03      	ldr	r3, [sp, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d076      	beq.n	800ce66 <_dtoa_r+0x4de>
 800cd78:	9b02      	ldr	r3, [sp, #8]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	dd36      	ble.n	800cdec <_dtoa_r+0x464>
 800cd7e:	9b00      	ldr	r3, [sp, #0]
 800cd80:	4650      	mov	r0, sl
 800cd82:	4659      	mov	r1, fp
 800cd84:	1e5f      	subs	r7, r3, #1
 800cd86:	2200      	movs	r2, #0
 800cd88:	4b88      	ldr	r3, [pc, #544]	; (800cfac <_dtoa_r+0x624>)
 800cd8a:	f7f3 fc35 	bl	80005f8 <__aeabi_dmul>
 800cd8e:	9e02      	ldr	r6, [sp, #8]
 800cd90:	4682      	mov	sl, r0
 800cd92:	468b      	mov	fp, r1
 800cd94:	3501      	adds	r5, #1
 800cd96:	4628      	mov	r0, r5
 800cd98:	f7f3 fbc4 	bl	8000524 <__aeabi_i2d>
 800cd9c:	4652      	mov	r2, sl
 800cd9e:	465b      	mov	r3, fp
 800cda0:	f7f3 fc2a 	bl	80005f8 <__aeabi_dmul>
 800cda4:	4b82      	ldr	r3, [pc, #520]	; (800cfb0 <_dtoa_r+0x628>)
 800cda6:	2200      	movs	r2, #0
 800cda8:	f7f3 fa70 	bl	800028c <__adddf3>
 800cdac:	46d0      	mov	r8, sl
 800cdae:	46d9      	mov	r9, fp
 800cdb0:	4682      	mov	sl, r0
 800cdb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cdb6:	2e00      	cmp	r6, #0
 800cdb8:	d158      	bne.n	800ce6c <_dtoa_r+0x4e4>
 800cdba:	4b7e      	ldr	r3, [pc, #504]	; (800cfb4 <_dtoa_r+0x62c>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	4640      	mov	r0, r8
 800cdc0:	4649      	mov	r1, r9
 800cdc2:	f7f3 fa61 	bl	8000288 <__aeabi_dsub>
 800cdc6:	4652      	mov	r2, sl
 800cdc8:	465b      	mov	r3, fp
 800cdca:	4680      	mov	r8, r0
 800cdcc:	4689      	mov	r9, r1
 800cdce:	f7f3 fea3 	bl	8000b18 <__aeabi_dcmpgt>
 800cdd2:	2800      	cmp	r0, #0
 800cdd4:	f040 8295 	bne.w	800d302 <_dtoa_r+0x97a>
 800cdd8:	4652      	mov	r2, sl
 800cdda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cdde:	4640      	mov	r0, r8
 800cde0:	4649      	mov	r1, r9
 800cde2:	f7f3 fe7b 	bl	8000adc <__aeabi_dcmplt>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	f040 8289 	bne.w	800d2fe <_dtoa_r+0x976>
 800cdec:	ec5b ab19 	vmov	sl, fp, d9
 800cdf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f2c0 8148 	blt.w	800d088 <_dtoa_r+0x700>
 800cdf8:	9a00      	ldr	r2, [sp, #0]
 800cdfa:	2a0e      	cmp	r2, #14
 800cdfc:	f300 8144 	bgt.w	800d088 <_dtoa_r+0x700>
 800ce00:	4b67      	ldr	r3, [pc, #412]	; (800cfa0 <_dtoa_r+0x618>)
 800ce02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	f280 80d5 	bge.w	800cfbc <_dtoa_r+0x634>
 800ce12:	9b03      	ldr	r3, [sp, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f300 80d1 	bgt.w	800cfbc <_dtoa_r+0x634>
 800ce1a:	f040 826f 	bne.w	800d2fc <_dtoa_r+0x974>
 800ce1e:	4b65      	ldr	r3, [pc, #404]	; (800cfb4 <_dtoa_r+0x62c>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	4640      	mov	r0, r8
 800ce24:	4649      	mov	r1, r9
 800ce26:	f7f3 fbe7 	bl	80005f8 <__aeabi_dmul>
 800ce2a:	4652      	mov	r2, sl
 800ce2c:	465b      	mov	r3, fp
 800ce2e:	f7f3 fe69 	bl	8000b04 <__aeabi_dcmpge>
 800ce32:	9e03      	ldr	r6, [sp, #12]
 800ce34:	4637      	mov	r7, r6
 800ce36:	2800      	cmp	r0, #0
 800ce38:	f040 8245 	bne.w	800d2c6 <_dtoa_r+0x93e>
 800ce3c:	9d01      	ldr	r5, [sp, #4]
 800ce3e:	2331      	movs	r3, #49	; 0x31
 800ce40:	f805 3b01 	strb.w	r3, [r5], #1
 800ce44:	9b00      	ldr	r3, [sp, #0]
 800ce46:	3301      	adds	r3, #1
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	e240      	b.n	800d2ce <_dtoa_r+0x946>
 800ce4c:	07f2      	lsls	r2, r6, #31
 800ce4e:	d505      	bpl.n	800ce5c <_dtoa_r+0x4d4>
 800ce50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce54:	f7f3 fbd0 	bl	80005f8 <__aeabi_dmul>
 800ce58:	3501      	adds	r5, #1
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	1076      	asrs	r6, r6, #1
 800ce5e:	3708      	adds	r7, #8
 800ce60:	e777      	b.n	800cd52 <_dtoa_r+0x3ca>
 800ce62:	2502      	movs	r5, #2
 800ce64:	e779      	b.n	800cd5a <_dtoa_r+0x3d2>
 800ce66:	9f00      	ldr	r7, [sp, #0]
 800ce68:	9e03      	ldr	r6, [sp, #12]
 800ce6a:	e794      	b.n	800cd96 <_dtoa_r+0x40e>
 800ce6c:	9901      	ldr	r1, [sp, #4]
 800ce6e:	4b4c      	ldr	r3, [pc, #304]	; (800cfa0 <_dtoa_r+0x618>)
 800ce70:	4431      	add	r1, r6
 800ce72:	910d      	str	r1, [sp, #52]	; 0x34
 800ce74:	9908      	ldr	r1, [sp, #32]
 800ce76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ce7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ce7e:	2900      	cmp	r1, #0
 800ce80:	d043      	beq.n	800cf0a <_dtoa_r+0x582>
 800ce82:	494d      	ldr	r1, [pc, #308]	; (800cfb8 <_dtoa_r+0x630>)
 800ce84:	2000      	movs	r0, #0
 800ce86:	f7f3 fce1 	bl	800084c <__aeabi_ddiv>
 800ce8a:	4652      	mov	r2, sl
 800ce8c:	465b      	mov	r3, fp
 800ce8e:	f7f3 f9fb 	bl	8000288 <__aeabi_dsub>
 800ce92:	9d01      	ldr	r5, [sp, #4]
 800ce94:	4682      	mov	sl, r0
 800ce96:	468b      	mov	fp, r1
 800ce98:	4649      	mov	r1, r9
 800ce9a:	4640      	mov	r0, r8
 800ce9c:	f7f3 fe5c 	bl	8000b58 <__aeabi_d2iz>
 800cea0:	4606      	mov	r6, r0
 800cea2:	f7f3 fb3f 	bl	8000524 <__aeabi_i2d>
 800cea6:	4602      	mov	r2, r0
 800cea8:	460b      	mov	r3, r1
 800ceaa:	4640      	mov	r0, r8
 800ceac:	4649      	mov	r1, r9
 800ceae:	f7f3 f9eb 	bl	8000288 <__aeabi_dsub>
 800ceb2:	3630      	adds	r6, #48	; 0x30
 800ceb4:	f805 6b01 	strb.w	r6, [r5], #1
 800ceb8:	4652      	mov	r2, sl
 800ceba:	465b      	mov	r3, fp
 800cebc:	4680      	mov	r8, r0
 800cebe:	4689      	mov	r9, r1
 800cec0:	f7f3 fe0c 	bl	8000adc <__aeabi_dcmplt>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d163      	bne.n	800cf90 <_dtoa_r+0x608>
 800cec8:	4642      	mov	r2, r8
 800ceca:	464b      	mov	r3, r9
 800cecc:	4936      	ldr	r1, [pc, #216]	; (800cfa8 <_dtoa_r+0x620>)
 800cece:	2000      	movs	r0, #0
 800ced0:	f7f3 f9da 	bl	8000288 <__aeabi_dsub>
 800ced4:	4652      	mov	r2, sl
 800ced6:	465b      	mov	r3, fp
 800ced8:	f7f3 fe00 	bl	8000adc <__aeabi_dcmplt>
 800cedc:	2800      	cmp	r0, #0
 800cede:	f040 80b5 	bne.w	800d04c <_dtoa_r+0x6c4>
 800cee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cee4:	429d      	cmp	r5, r3
 800cee6:	d081      	beq.n	800cdec <_dtoa_r+0x464>
 800cee8:	4b30      	ldr	r3, [pc, #192]	; (800cfac <_dtoa_r+0x624>)
 800ceea:	2200      	movs	r2, #0
 800ceec:	4650      	mov	r0, sl
 800ceee:	4659      	mov	r1, fp
 800cef0:	f7f3 fb82 	bl	80005f8 <__aeabi_dmul>
 800cef4:	4b2d      	ldr	r3, [pc, #180]	; (800cfac <_dtoa_r+0x624>)
 800cef6:	4682      	mov	sl, r0
 800cef8:	468b      	mov	fp, r1
 800cefa:	4640      	mov	r0, r8
 800cefc:	4649      	mov	r1, r9
 800cefe:	2200      	movs	r2, #0
 800cf00:	f7f3 fb7a 	bl	80005f8 <__aeabi_dmul>
 800cf04:	4680      	mov	r8, r0
 800cf06:	4689      	mov	r9, r1
 800cf08:	e7c6      	b.n	800ce98 <_dtoa_r+0x510>
 800cf0a:	4650      	mov	r0, sl
 800cf0c:	4659      	mov	r1, fp
 800cf0e:	f7f3 fb73 	bl	80005f8 <__aeabi_dmul>
 800cf12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf14:	9d01      	ldr	r5, [sp, #4]
 800cf16:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf18:	4682      	mov	sl, r0
 800cf1a:	468b      	mov	fp, r1
 800cf1c:	4649      	mov	r1, r9
 800cf1e:	4640      	mov	r0, r8
 800cf20:	f7f3 fe1a 	bl	8000b58 <__aeabi_d2iz>
 800cf24:	4606      	mov	r6, r0
 800cf26:	f7f3 fafd 	bl	8000524 <__aeabi_i2d>
 800cf2a:	3630      	adds	r6, #48	; 0x30
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	460b      	mov	r3, r1
 800cf30:	4640      	mov	r0, r8
 800cf32:	4649      	mov	r1, r9
 800cf34:	f7f3 f9a8 	bl	8000288 <__aeabi_dsub>
 800cf38:	f805 6b01 	strb.w	r6, [r5], #1
 800cf3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf3e:	429d      	cmp	r5, r3
 800cf40:	4680      	mov	r8, r0
 800cf42:	4689      	mov	r9, r1
 800cf44:	f04f 0200 	mov.w	r2, #0
 800cf48:	d124      	bne.n	800cf94 <_dtoa_r+0x60c>
 800cf4a:	4b1b      	ldr	r3, [pc, #108]	; (800cfb8 <_dtoa_r+0x630>)
 800cf4c:	4650      	mov	r0, sl
 800cf4e:	4659      	mov	r1, fp
 800cf50:	f7f3 f99c 	bl	800028c <__adddf3>
 800cf54:	4602      	mov	r2, r0
 800cf56:	460b      	mov	r3, r1
 800cf58:	4640      	mov	r0, r8
 800cf5a:	4649      	mov	r1, r9
 800cf5c:	f7f3 fddc 	bl	8000b18 <__aeabi_dcmpgt>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d173      	bne.n	800d04c <_dtoa_r+0x6c4>
 800cf64:	4652      	mov	r2, sl
 800cf66:	465b      	mov	r3, fp
 800cf68:	4913      	ldr	r1, [pc, #76]	; (800cfb8 <_dtoa_r+0x630>)
 800cf6a:	2000      	movs	r0, #0
 800cf6c:	f7f3 f98c 	bl	8000288 <__aeabi_dsub>
 800cf70:	4602      	mov	r2, r0
 800cf72:	460b      	mov	r3, r1
 800cf74:	4640      	mov	r0, r8
 800cf76:	4649      	mov	r1, r9
 800cf78:	f7f3 fdb0 	bl	8000adc <__aeabi_dcmplt>
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	f43f af35 	beq.w	800cdec <_dtoa_r+0x464>
 800cf82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cf84:	1e6b      	subs	r3, r5, #1
 800cf86:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cf8c:	2b30      	cmp	r3, #48	; 0x30
 800cf8e:	d0f8      	beq.n	800cf82 <_dtoa_r+0x5fa>
 800cf90:	9700      	str	r7, [sp, #0]
 800cf92:	e049      	b.n	800d028 <_dtoa_r+0x6a0>
 800cf94:	4b05      	ldr	r3, [pc, #20]	; (800cfac <_dtoa_r+0x624>)
 800cf96:	f7f3 fb2f 	bl	80005f8 <__aeabi_dmul>
 800cf9a:	4680      	mov	r8, r0
 800cf9c:	4689      	mov	r9, r1
 800cf9e:	e7bd      	b.n	800cf1c <_dtoa_r+0x594>
 800cfa0:	0800f5b8 	.word	0x0800f5b8
 800cfa4:	0800f590 	.word	0x0800f590
 800cfa8:	3ff00000 	.word	0x3ff00000
 800cfac:	40240000 	.word	0x40240000
 800cfb0:	401c0000 	.word	0x401c0000
 800cfb4:	40140000 	.word	0x40140000
 800cfb8:	3fe00000 	.word	0x3fe00000
 800cfbc:	9d01      	ldr	r5, [sp, #4]
 800cfbe:	4656      	mov	r6, sl
 800cfc0:	465f      	mov	r7, fp
 800cfc2:	4642      	mov	r2, r8
 800cfc4:	464b      	mov	r3, r9
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	4639      	mov	r1, r7
 800cfca:	f7f3 fc3f 	bl	800084c <__aeabi_ddiv>
 800cfce:	f7f3 fdc3 	bl	8000b58 <__aeabi_d2iz>
 800cfd2:	4682      	mov	sl, r0
 800cfd4:	f7f3 faa6 	bl	8000524 <__aeabi_i2d>
 800cfd8:	4642      	mov	r2, r8
 800cfda:	464b      	mov	r3, r9
 800cfdc:	f7f3 fb0c 	bl	80005f8 <__aeabi_dmul>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	4639      	mov	r1, r7
 800cfe8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cfec:	f7f3 f94c 	bl	8000288 <__aeabi_dsub>
 800cff0:	f805 6b01 	strb.w	r6, [r5], #1
 800cff4:	9e01      	ldr	r6, [sp, #4]
 800cff6:	9f03      	ldr	r7, [sp, #12]
 800cff8:	1bae      	subs	r6, r5, r6
 800cffa:	42b7      	cmp	r7, r6
 800cffc:	4602      	mov	r2, r0
 800cffe:	460b      	mov	r3, r1
 800d000:	d135      	bne.n	800d06e <_dtoa_r+0x6e6>
 800d002:	f7f3 f943 	bl	800028c <__adddf3>
 800d006:	4642      	mov	r2, r8
 800d008:	464b      	mov	r3, r9
 800d00a:	4606      	mov	r6, r0
 800d00c:	460f      	mov	r7, r1
 800d00e:	f7f3 fd83 	bl	8000b18 <__aeabi_dcmpgt>
 800d012:	b9d0      	cbnz	r0, 800d04a <_dtoa_r+0x6c2>
 800d014:	4642      	mov	r2, r8
 800d016:	464b      	mov	r3, r9
 800d018:	4630      	mov	r0, r6
 800d01a:	4639      	mov	r1, r7
 800d01c:	f7f3 fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 800d020:	b110      	cbz	r0, 800d028 <_dtoa_r+0x6a0>
 800d022:	f01a 0f01 	tst.w	sl, #1
 800d026:	d110      	bne.n	800d04a <_dtoa_r+0x6c2>
 800d028:	4620      	mov	r0, r4
 800d02a:	ee18 1a10 	vmov	r1, s16
 800d02e:	f000 ffbf 	bl	800dfb0 <_Bfree>
 800d032:	2300      	movs	r3, #0
 800d034:	9800      	ldr	r0, [sp, #0]
 800d036:	702b      	strb	r3, [r5, #0]
 800d038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d03a:	3001      	adds	r0, #1
 800d03c:	6018      	str	r0, [r3, #0]
 800d03e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d040:	2b00      	cmp	r3, #0
 800d042:	f43f acf1 	beq.w	800ca28 <_dtoa_r+0xa0>
 800d046:	601d      	str	r5, [r3, #0]
 800d048:	e4ee      	b.n	800ca28 <_dtoa_r+0xa0>
 800d04a:	9f00      	ldr	r7, [sp, #0]
 800d04c:	462b      	mov	r3, r5
 800d04e:	461d      	mov	r5, r3
 800d050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d054:	2a39      	cmp	r2, #57	; 0x39
 800d056:	d106      	bne.n	800d066 <_dtoa_r+0x6de>
 800d058:	9a01      	ldr	r2, [sp, #4]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d1f7      	bne.n	800d04e <_dtoa_r+0x6c6>
 800d05e:	9901      	ldr	r1, [sp, #4]
 800d060:	2230      	movs	r2, #48	; 0x30
 800d062:	3701      	adds	r7, #1
 800d064:	700a      	strb	r2, [r1, #0]
 800d066:	781a      	ldrb	r2, [r3, #0]
 800d068:	3201      	adds	r2, #1
 800d06a:	701a      	strb	r2, [r3, #0]
 800d06c:	e790      	b.n	800cf90 <_dtoa_r+0x608>
 800d06e:	4ba6      	ldr	r3, [pc, #664]	; (800d308 <_dtoa_r+0x980>)
 800d070:	2200      	movs	r2, #0
 800d072:	f7f3 fac1 	bl	80005f8 <__aeabi_dmul>
 800d076:	2200      	movs	r2, #0
 800d078:	2300      	movs	r3, #0
 800d07a:	4606      	mov	r6, r0
 800d07c:	460f      	mov	r7, r1
 800d07e:	f7f3 fd23 	bl	8000ac8 <__aeabi_dcmpeq>
 800d082:	2800      	cmp	r0, #0
 800d084:	d09d      	beq.n	800cfc2 <_dtoa_r+0x63a>
 800d086:	e7cf      	b.n	800d028 <_dtoa_r+0x6a0>
 800d088:	9a08      	ldr	r2, [sp, #32]
 800d08a:	2a00      	cmp	r2, #0
 800d08c:	f000 80d7 	beq.w	800d23e <_dtoa_r+0x8b6>
 800d090:	9a06      	ldr	r2, [sp, #24]
 800d092:	2a01      	cmp	r2, #1
 800d094:	f300 80ba 	bgt.w	800d20c <_dtoa_r+0x884>
 800d098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d09a:	2a00      	cmp	r2, #0
 800d09c:	f000 80b2 	beq.w	800d204 <_dtoa_r+0x87c>
 800d0a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d0a4:	9e07      	ldr	r6, [sp, #28]
 800d0a6:	9d04      	ldr	r5, [sp, #16]
 800d0a8:	9a04      	ldr	r2, [sp, #16]
 800d0aa:	441a      	add	r2, r3
 800d0ac:	9204      	str	r2, [sp, #16]
 800d0ae:	9a05      	ldr	r2, [sp, #20]
 800d0b0:	2101      	movs	r1, #1
 800d0b2:	441a      	add	r2, r3
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	9205      	str	r2, [sp, #20]
 800d0b8:	f001 f87c 	bl	800e1b4 <__i2b>
 800d0bc:	4607      	mov	r7, r0
 800d0be:	2d00      	cmp	r5, #0
 800d0c0:	dd0c      	ble.n	800d0dc <_dtoa_r+0x754>
 800d0c2:	9b05      	ldr	r3, [sp, #20]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	dd09      	ble.n	800d0dc <_dtoa_r+0x754>
 800d0c8:	42ab      	cmp	r3, r5
 800d0ca:	9a04      	ldr	r2, [sp, #16]
 800d0cc:	bfa8      	it	ge
 800d0ce:	462b      	movge	r3, r5
 800d0d0:	1ad2      	subs	r2, r2, r3
 800d0d2:	9204      	str	r2, [sp, #16]
 800d0d4:	9a05      	ldr	r2, [sp, #20]
 800d0d6:	1aed      	subs	r5, r5, r3
 800d0d8:	1ad3      	subs	r3, r2, r3
 800d0da:	9305      	str	r3, [sp, #20]
 800d0dc:	9b07      	ldr	r3, [sp, #28]
 800d0de:	b31b      	cbz	r3, 800d128 <_dtoa_r+0x7a0>
 800d0e0:	9b08      	ldr	r3, [sp, #32]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	f000 80af 	beq.w	800d246 <_dtoa_r+0x8be>
 800d0e8:	2e00      	cmp	r6, #0
 800d0ea:	dd13      	ble.n	800d114 <_dtoa_r+0x78c>
 800d0ec:	4639      	mov	r1, r7
 800d0ee:	4632      	mov	r2, r6
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f001 f91f 	bl	800e334 <__pow5mult>
 800d0f6:	ee18 2a10 	vmov	r2, s16
 800d0fa:	4601      	mov	r1, r0
 800d0fc:	4607      	mov	r7, r0
 800d0fe:	4620      	mov	r0, r4
 800d100:	f001 f86e 	bl	800e1e0 <__multiply>
 800d104:	ee18 1a10 	vmov	r1, s16
 800d108:	4680      	mov	r8, r0
 800d10a:	4620      	mov	r0, r4
 800d10c:	f000 ff50 	bl	800dfb0 <_Bfree>
 800d110:	ee08 8a10 	vmov	s16, r8
 800d114:	9b07      	ldr	r3, [sp, #28]
 800d116:	1b9a      	subs	r2, r3, r6
 800d118:	d006      	beq.n	800d128 <_dtoa_r+0x7a0>
 800d11a:	ee18 1a10 	vmov	r1, s16
 800d11e:	4620      	mov	r0, r4
 800d120:	f001 f908 	bl	800e334 <__pow5mult>
 800d124:	ee08 0a10 	vmov	s16, r0
 800d128:	2101      	movs	r1, #1
 800d12a:	4620      	mov	r0, r4
 800d12c:	f001 f842 	bl	800e1b4 <__i2b>
 800d130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d132:	2b00      	cmp	r3, #0
 800d134:	4606      	mov	r6, r0
 800d136:	f340 8088 	ble.w	800d24a <_dtoa_r+0x8c2>
 800d13a:	461a      	mov	r2, r3
 800d13c:	4601      	mov	r1, r0
 800d13e:	4620      	mov	r0, r4
 800d140:	f001 f8f8 	bl	800e334 <__pow5mult>
 800d144:	9b06      	ldr	r3, [sp, #24]
 800d146:	2b01      	cmp	r3, #1
 800d148:	4606      	mov	r6, r0
 800d14a:	f340 8081 	ble.w	800d250 <_dtoa_r+0x8c8>
 800d14e:	f04f 0800 	mov.w	r8, #0
 800d152:	6933      	ldr	r3, [r6, #16]
 800d154:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d158:	6918      	ldr	r0, [r3, #16]
 800d15a:	f000 ffdb 	bl	800e114 <__hi0bits>
 800d15e:	f1c0 0020 	rsb	r0, r0, #32
 800d162:	9b05      	ldr	r3, [sp, #20]
 800d164:	4418      	add	r0, r3
 800d166:	f010 001f 	ands.w	r0, r0, #31
 800d16a:	f000 8092 	beq.w	800d292 <_dtoa_r+0x90a>
 800d16e:	f1c0 0320 	rsb	r3, r0, #32
 800d172:	2b04      	cmp	r3, #4
 800d174:	f340 808a 	ble.w	800d28c <_dtoa_r+0x904>
 800d178:	f1c0 001c 	rsb	r0, r0, #28
 800d17c:	9b04      	ldr	r3, [sp, #16]
 800d17e:	4403      	add	r3, r0
 800d180:	9304      	str	r3, [sp, #16]
 800d182:	9b05      	ldr	r3, [sp, #20]
 800d184:	4403      	add	r3, r0
 800d186:	4405      	add	r5, r0
 800d188:	9305      	str	r3, [sp, #20]
 800d18a:	9b04      	ldr	r3, [sp, #16]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	dd07      	ble.n	800d1a0 <_dtoa_r+0x818>
 800d190:	ee18 1a10 	vmov	r1, s16
 800d194:	461a      	mov	r2, r3
 800d196:	4620      	mov	r0, r4
 800d198:	f001 f926 	bl	800e3e8 <__lshift>
 800d19c:	ee08 0a10 	vmov	s16, r0
 800d1a0:	9b05      	ldr	r3, [sp, #20]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	dd05      	ble.n	800d1b2 <_dtoa_r+0x82a>
 800d1a6:	4631      	mov	r1, r6
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f001 f91c 	bl	800e3e8 <__lshift>
 800d1b0:	4606      	mov	r6, r0
 800d1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d06e      	beq.n	800d296 <_dtoa_r+0x90e>
 800d1b8:	ee18 0a10 	vmov	r0, s16
 800d1bc:	4631      	mov	r1, r6
 800d1be:	f001 f983 	bl	800e4c8 <__mcmp>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	da67      	bge.n	800d296 <_dtoa_r+0x90e>
 800d1c6:	9b00      	ldr	r3, [sp, #0]
 800d1c8:	3b01      	subs	r3, #1
 800d1ca:	ee18 1a10 	vmov	r1, s16
 800d1ce:	9300      	str	r3, [sp, #0]
 800d1d0:	220a      	movs	r2, #10
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f000 ff0d 	bl	800dff4 <__multadd>
 800d1da:	9b08      	ldr	r3, [sp, #32]
 800d1dc:	ee08 0a10 	vmov	s16, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	f000 81b1 	beq.w	800d548 <_dtoa_r+0xbc0>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	220a      	movs	r2, #10
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f000 ff01 	bl	800dff4 <__multadd>
 800d1f2:	9b02      	ldr	r3, [sp, #8]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	4607      	mov	r7, r0
 800d1f8:	f300 808e 	bgt.w	800d318 <_dtoa_r+0x990>
 800d1fc:	9b06      	ldr	r3, [sp, #24]
 800d1fe:	2b02      	cmp	r3, #2
 800d200:	dc51      	bgt.n	800d2a6 <_dtoa_r+0x91e>
 800d202:	e089      	b.n	800d318 <_dtoa_r+0x990>
 800d204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d206:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d20a:	e74b      	b.n	800d0a4 <_dtoa_r+0x71c>
 800d20c:	9b03      	ldr	r3, [sp, #12]
 800d20e:	1e5e      	subs	r6, r3, #1
 800d210:	9b07      	ldr	r3, [sp, #28]
 800d212:	42b3      	cmp	r3, r6
 800d214:	bfbf      	itttt	lt
 800d216:	9b07      	ldrlt	r3, [sp, #28]
 800d218:	9607      	strlt	r6, [sp, #28]
 800d21a:	1af2      	sublt	r2, r6, r3
 800d21c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d21e:	bfb6      	itet	lt
 800d220:	189b      	addlt	r3, r3, r2
 800d222:	1b9e      	subge	r6, r3, r6
 800d224:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d226:	9b03      	ldr	r3, [sp, #12]
 800d228:	bfb8      	it	lt
 800d22a:	2600      	movlt	r6, #0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	bfb7      	itett	lt
 800d230:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d234:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d238:	1a9d      	sublt	r5, r3, r2
 800d23a:	2300      	movlt	r3, #0
 800d23c:	e734      	b.n	800d0a8 <_dtoa_r+0x720>
 800d23e:	9e07      	ldr	r6, [sp, #28]
 800d240:	9d04      	ldr	r5, [sp, #16]
 800d242:	9f08      	ldr	r7, [sp, #32]
 800d244:	e73b      	b.n	800d0be <_dtoa_r+0x736>
 800d246:	9a07      	ldr	r2, [sp, #28]
 800d248:	e767      	b.n	800d11a <_dtoa_r+0x792>
 800d24a:	9b06      	ldr	r3, [sp, #24]
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	dc18      	bgt.n	800d282 <_dtoa_r+0x8fa>
 800d250:	f1ba 0f00 	cmp.w	sl, #0
 800d254:	d115      	bne.n	800d282 <_dtoa_r+0x8fa>
 800d256:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d25a:	b993      	cbnz	r3, 800d282 <_dtoa_r+0x8fa>
 800d25c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d260:	0d1b      	lsrs	r3, r3, #20
 800d262:	051b      	lsls	r3, r3, #20
 800d264:	b183      	cbz	r3, 800d288 <_dtoa_r+0x900>
 800d266:	9b04      	ldr	r3, [sp, #16]
 800d268:	3301      	adds	r3, #1
 800d26a:	9304      	str	r3, [sp, #16]
 800d26c:	9b05      	ldr	r3, [sp, #20]
 800d26e:	3301      	adds	r3, #1
 800d270:	9305      	str	r3, [sp, #20]
 800d272:	f04f 0801 	mov.w	r8, #1
 800d276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f47f af6a 	bne.w	800d152 <_dtoa_r+0x7ca>
 800d27e:	2001      	movs	r0, #1
 800d280:	e76f      	b.n	800d162 <_dtoa_r+0x7da>
 800d282:	f04f 0800 	mov.w	r8, #0
 800d286:	e7f6      	b.n	800d276 <_dtoa_r+0x8ee>
 800d288:	4698      	mov	r8, r3
 800d28a:	e7f4      	b.n	800d276 <_dtoa_r+0x8ee>
 800d28c:	f43f af7d 	beq.w	800d18a <_dtoa_r+0x802>
 800d290:	4618      	mov	r0, r3
 800d292:	301c      	adds	r0, #28
 800d294:	e772      	b.n	800d17c <_dtoa_r+0x7f4>
 800d296:	9b03      	ldr	r3, [sp, #12]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	dc37      	bgt.n	800d30c <_dtoa_r+0x984>
 800d29c:	9b06      	ldr	r3, [sp, #24]
 800d29e:	2b02      	cmp	r3, #2
 800d2a0:	dd34      	ble.n	800d30c <_dtoa_r+0x984>
 800d2a2:	9b03      	ldr	r3, [sp, #12]
 800d2a4:	9302      	str	r3, [sp, #8]
 800d2a6:	9b02      	ldr	r3, [sp, #8]
 800d2a8:	b96b      	cbnz	r3, 800d2c6 <_dtoa_r+0x93e>
 800d2aa:	4631      	mov	r1, r6
 800d2ac:	2205      	movs	r2, #5
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f000 fea0 	bl	800dff4 <__multadd>
 800d2b4:	4601      	mov	r1, r0
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	ee18 0a10 	vmov	r0, s16
 800d2bc:	f001 f904 	bl	800e4c8 <__mcmp>
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	f73f adbb 	bgt.w	800ce3c <_dtoa_r+0x4b4>
 800d2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2c8:	9d01      	ldr	r5, [sp, #4]
 800d2ca:	43db      	mvns	r3, r3
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	f04f 0800 	mov.w	r8, #0
 800d2d2:	4631      	mov	r1, r6
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f000 fe6b 	bl	800dfb0 <_Bfree>
 800d2da:	2f00      	cmp	r7, #0
 800d2dc:	f43f aea4 	beq.w	800d028 <_dtoa_r+0x6a0>
 800d2e0:	f1b8 0f00 	cmp.w	r8, #0
 800d2e4:	d005      	beq.n	800d2f2 <_dtoa_r+0x96a>
 800d2e6:	45b8      	cmp	r8, r7
 800d2e8:	d003      	beq.n	800d2f2 <_dtoa_r+0x96a>
 800d2ea:	4641      	mov	r1, r8
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f000 fe5f 	bl	800dfb0 <_Bfree>
 800d2f2:	4639      	mov	r1, r7
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f000 fe5b 	bl	800dfb0 <_Bfree>
 800d2fa:	e695      	b.n	800d028 <_dtoa_r+0x6a0>
 800d2fc:	2600      	movs	r6, #0
 800d2fe:	4637      	mov	r7, r6
 800d300:	e7e1      	b.n	800d2c6 <_dtoa_r+0x93e>
 800d302:	9700      	str	r7, [sp, #0]
 800d304:	4637      	mov	r7, r6
 800d306:	e599      	b.n	800ce3c <_dtoa_r+0x4b4>
 800d308:	40240000 	.word	0x40240000
 800d30c:	9b08      	ldr	r3, [sp, #32]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f000 80ca 	beq.w	800d4a8 <_dtoa_r+0xb20>
 800d314:	9b03      	ldr	r3, [sp, #12]
 800d316:	9302      	str	r3, [sp, #8]
 800d318:	2d00      	cmp	r5, #0
 800d31a:	dd05      	ble.n	800d328 <_dtoa_r+0x9a0>
 800d31c:	4639      	mov	r1, r7
 800d31e:	462a      	mov	r2, r5
 800d320:	4620      	mov	r0, r4
 800d322:	f001 f861 	bl	800e3e8 <__lshift>
 800d326:	4607      	mov	r7, r0
 800d328:	f1b8 0f00 	cmp.w	r8, #0
 800d32c:	d05b      	beq.n	800d3e6 <_dtoa_r+0xa5e>
 800d32e:	6879      	ldr	r1, [r7, #4]
 800d330:	4620      	mov	r0, r4
 800d332:	f000 fdfd 	bl	800df30 <_Balloc>
 800d336:	4605      	mov	r5, r0
 800d338:	b928      	cbnz	r0, 800d346 <_dtoa_r+0x9be>
 800d33a:	4b87      	ldr	r3, [pc, #540]	; (800d558 <_dtoa_r+0xbd0>)
 800d33c:	4602      	mov	r2, r0
 800d33e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d342:	f7ff bb3b 	b.w	800c9bc <_dtoa_r+0x34>
 800d346:	693a      	ldr	r2, [r7, #16]
 800d348:	3202      	adds	r2, #2
 800d34a:	0092      	lsls	r2, r2, #2
 800d34c:	f107 010c 	add.w	r1, r7, #12
 800d350:	300c      	adds	r0, #12
 800d352:	f7fd fad6 	bl	800a902 <memcpy>
 800d356:	2201      	movs	r2, #1
 800d358:	4629      	mov	r1, r5
 800d35a:	4620      	mov	r0, r4
 800d35c:	f001 f844 	bl	800e3e8 <__lshift>
 800d360:	9b01      	ldr	r3, [sp, #4]
 800d362:	f103 0901 	add.w	r9, r3, #1
 800d366:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d36a:	4413      	add	r3, r2
 800d36c:	9305      	str	r3, [sp, #20]
 800d36e:	f00a 0301 	and.w	r3, sl, #1
 800d372:	46b8      	mov	r8, r7
 800d374:	9304      	str	r3, [sp, #16]
 800d376:	4607      	mov	r7, r0
 800d378:	4631      	mov	r1, r6
 800d37a:	ee18 0a10 	vmov	r0, s16
 800d37e:	f7ff fa77 	bl	800c870 <quorem>
 800d382:	4641      	mov	r1, r8
 800d384:	9002      	str	r0, [sp, #8]
 800d386:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d38a:	ee18 0a10 	vmov	r0, s16
 800d38e:	f001 f89b 	bl	800e4c8 <__mcmp>
 800d392:	463a      	mov	r2, r7
 800d394:	9003      	str	r0, [sp, #12]
 800d396:	4631      	mov	r1, r6
 800d398:	4620      	mov	r0, r4
 800d39a:	f001 f8b1 	bl	800e500 <__mdiff>
 800d39e:	68c2      	ldr	r2, [r0, #12]
 800d3a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800d3a4:	4605      	mov	r5, r0
 800d3a6:	bb02      	cbnz	r2, 800d3ea <_dtoa_r+0xa62>
 800d3a8:	4601      	mov	r1, r0
 800d3aa:	ee18 0a10 	vmov	r0, s16
 800d3ae:	f001 f88b 	bl	800e4c8 <__mcmp>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	9207      	str	r2, [sp, #28]
 800d3ba:	f000 fdf9 	bl	800dfb0 <_Bfree>
 800d3be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d3c2:	ea43 0102 	orr.w	r1, r3, r2
 800d3c6:	9b04      	ldr	r3, [sp, #16]
 800d3c8:	430b      	orrs	r3, r1
 800d3ca:	464d      	mov	r5, r9
 800d3cc:	d10f      	bne.n	800d3ee <_dtoa_r+0xa66>
 800d3ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d3d2:	d02a      	beq.n	800d42a <_dtoa_r+0xaa2>
 800d3d4:	9b03      	ldr	r3, [sp, #12]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	dd02      	ble.n	800d3e0 <_dtoa_r+0xa58>
 800d3da:	9b02      	ldr	r3, [sp, #8]
 800d3dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d3e0:	f88b a000 	strb.w	sl, [fp]
 800d3e4:	e775      	b.n	800d2d2 <_dtoa_r+0x94a>
 800d3e6:	4638      	mov	r0, r7
 800d3e8:	e7ba      	b.n	800d360 <_dtoa_r+0x9d8>
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	e7e2      	b.n	800d3b4 <_dtoa_r+0xa2c>
 800d3ee:	9b03      	ldr	r3, [sp, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	db04      	blt.n	800d3fe <_dtoa_r+0xa76>
 800d3f4:	9906      	ldr	r1, [sp, #24]
 800d3f6:	430b      	orrs	r3, r1
 800d3f8:	9904      	ldr	r1, [sp, #16]
 800d3fa:	430b      	orrs	r3, r1
 800d3fc:	d122      	bne.n	800d444 <_dtoa_r+0xabc>
 800d3fe:	2a00      	cmp	r2, #0
 800d400:	ddee      	ble.n	800d3e0 <_dtoa_r+0xa58>
 800d402:	ee18 1a10 	vmov	r1, s16
 800d406:	2201      	movs	r2, #1
 800d408:	4620      	mov	r0, r4
 800d40a:	f000 ffed 	bl	800e3e8 <__lshift>
 800d40e:	4631      	mov	r1, r6
 800d410:	ee08 0a10 	vmov	s16, r0
 800d414:	f001 f858 	bl	800e4c8 <__mcmp>
 800d418:	2800      	cmp	r0, #0
 800d41a:	dc03      	bgt.n	800d424 <_dtoa_r+0xa9c>
 800d41c:	d1e0      	bne.n	800d3e0 <_dtoa_r+0xa58>
 800d41e:	f01a 0f01 	tst.w	sl, #1
 800d422:	d0dd      	beq.n	800d3e0 <_dtoa_r+0xa58>
 800d424:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d428:	d1d7      	bne.n	800d3da <_dtoa_r+0xa52>
 800d42a:	2339      	movs	r3, #57	; 0x39
 800d42c:	f88b 3000 	strb.w	r3, [fp]
 800d430:	462b      	mov	r3, r5
 800d432:	461d      	mov	r5, r3
 800d434:	3b01      	subs	r3, #1
 800d436:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d43a:	2a39      	cmp	r2, #57	; 0x39
 800d43c:	d071      	beq.n	800d522 <_dtoa_r+0xb9a>
 800d43e:	3201      	adds	r2, #1
 800d440:	701a      	strb	r2, [r3, #0]
 800d442:	e746      	b.n	800d2d2 <_dtoa_r+0x94a>
 800d444:	2a00      	cmp	r2, #0
 800d446:	dd07      	ble.n	800d458 <_dtoa_r+0xad0>
 800d448:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d44c:	d0ed      	beq.n	800d42a <_dtoa_r+0xaa2>
 800d44e:	f10a 0301 	add.w	r3, sl, #1
 800d452:	f88b 3000 	strb.w	r3, [fp]
 800d456:	e73c      	b.n	800d2d2 <_dtoa_r+0x94a>
 800d458:	9b05      	ldr	r3, [sp, #20]
 800d45a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d45e:	4599      	cmp	r9, r3
 800d460:	d047      	beq.n	800d4f2 <_dtoa_r+0xb6a>
 800d462:	ee18 1a10 	vmov	r1, s16
 800d466:	2300      	movs	r3, #0
 800d468:	220a      	movs	r2, #10
 800d46a:	4620      	mov	r0, r4
 800d46c:	f000 fdc2 	bl	800dff4 <__multadd>
 800d470:	45b8      	cmp	r8, r7
 800d472:	ee08 0a10 	vmov	s16, r0
 800d476:	f04f 0300 	mov.w	r3, #0
 800d47a:	f04f 020a 	mov.w	r2, #10
 800d47e:	4641      	mov	r1, r8
 800d480:	4620      	mov	r0, r4
 800d482:	d106      	bne.n	800d492 <_dtoa_r+0xb0a>
 800d484:	f000 fdb6 	bl	800dff4 <__multadd>
 800d488:	4680      	mov	r8, r0
 800d48a:	4607      	mov	r7, r0
 800d48c:	f109 0901 	add.w	r9, r9, #1
 800d490:	e772      	b.n	800d378 <_dtoa_r+0x9f0>
 800d492:	f000 fdaf 	bl	800dff4 <__multadd>
 800d496:	4639      	mov	r1, r7
 800d498:	4680      	mov	r8, r0
 800d49a:	2300      	movs	r3, #0
 800d49c:	220a      	movs	r2, #10
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f000 fda8 	bl	800dff4 <__multadd>
 800d4a4:	4607      	mov	r7, r0
 800d4a6:	e7f1      	b.n	800d48c <_dtoa_r+0xb04>
 800d4a8:	9b03      	ldr	r3, [sp, #12]
 800d4aa:	9302      	str	r3, [sp, #8]
 800d4ac:	9d01      	ldr	r5, [sp, #4]
 800d4ae:	ee18 0a10 	vmov	r0, s16
 800d4b2:	4631      	mov	r1, r6
 800d4b4:	f7ff f9dc 	bl	800c870 <quorem>
 800d4b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d4bc:	9b01      	ldr	r3, [sp, #4]
 800d4be:	f805 ab01 	strb.w	sl, [r5], #1
 800d4c2:	1aea      	subs	r2, r5, r3
 800d4c4:	9b02      	ldr	r3, [sp, #8]
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	dd09      	ble.n	800d4de <_dtoa_r+0xb56>
 800d4ca:	ee18 1a10 	vmov	r1, s16
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	220a      	movs	r2, #10
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f000 fd8e 	bl	800dff4 <__multadd>
 800d4d8:	ee08 0a10 	vmov	s16, r0
 800d4dc:	e7e7      	b.n	800d4ae <_dtoa_r+0xb26>
 800d4de:	9b02      	ldr	r3, [sp, #8]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	bfc8      	it	gt
 800d4e4:	461d      	movgt	r5, r3
 800d4e6:	9b01      	ldr	r3, [sp, #4]
 800d4e8:	bfd8      	it	le
 800d4ea:	2501      	movle	r5, #1
 800d4ec:	441d      	add	r5, r3
 800d4ee:	f04f 0800 	mov.w	r8, #0
 800d4f2:	ee18 1a10 	vmov	r1, s16
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f000 ff75 	bl	800e3e8 <__lshift>
 800d4fe:	4631      	mov	r1, r6
 800d500:	ee08 0a10 	vmov	s16, r0
 800d504:	f000 ffe0 	bl	800e4c8 <__mcmp>
 800d508:	2800      	cmp	r0, #0
 800d50a:	dc91      	bgt.n	800d430 <_dtoa_r+0xaa8>
 800d50c:	d102      	bne.n	800d514 <_dtoa_r+0xb8c>
 800d50e:	f01a 0f01 	tst.w	sl, #1
 800d512:	d18d      	bne.n	800d430 <_dtoa_r+0xaa8>
 800d514:	462b      	mov	r3, r5
 800d516:	461d      	mov	r5, r3
 800d518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d51c:	2a30      	cmp	r2, #48	; 0x30
 800d51e:	d0fa      	beq.n	800d516 <_dtoa_r+0xb8e>
 800d520:	e6d7      	b.n	800d2d2 <_dtoa_r+0x94a>
 800d522:	9a01      	ldr	r2, [sp, #4]
 800d524:	429a      	cmp	r2, r3
 800d526:	d184      	bne.n	800d432 <_dtoa_r+0xaaa>
 800d528:	9b00      	ldr	r3, [sp, #0]
 800d52a:	3301      	adds	r3, #1
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	2331      	movs	r3, #49	; 0x31
 800d530:	7013      	strb	r3, [r2, #0]
 800d532:	e6ce      	b.n	800d2d2 <_dtoa_r+0x94a>
 800d534:	4b09      	ldr	r3, [pc, #36]	; (800d55c <_dtoa_r+0xbd4>)
 800d536:	f7ff ba95 	b.w	800ca64 <_dtoa_r+0xdc>
 800d53a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	f47f aa6e 	bne.w	800ca1e <_dtoa_r+0x96>
 800d542:	4b07      	ldr	r3, [pc, #28]	; (800d560 <_dtoa_r+0xbd8>)
 800d544:	f7ff ba8e 	b.w	800ca64 <_dtoa_r+0xdc>
 800d548:	9b02      	ldr	r3, [sp, #8]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	dcae      	bgt.n	800d4ac <_dtoa_r+0xb24>
 800d54e:	9b06      	ldr	r3, [sp, #24]
 800d550:	2b02      	cmp	r3, #2
 800d552:	f73f aea8 	bgt.w	800d2a6 <_dtoa_r+0x91e>
 800d556:	e7a9      	b.n	800d4ac <_dtoa_r+0xb24>
 800d558:	0800f4a4 	.word	0x0800f4a4
 800d55c:	0800f268 	.word	0x0800f268
 800d560:	0800f425 	.word	0x0800f425

0800d564 <__sflush_r>:
 800d564:	898a      	ldrh	r2, [r1, #12]
 800d566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d56a:	4605      	mov	r5, r0
 800d56c:	0710      	lsls	r0, r2, #28
 800d56e:	460c      	mov	r4, r1
 800d570:	d458      	bmi.n	800d624 <__sflush_r+0xc0>
 800d572:	684b      	ldr	r3, [r1, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	dc05      	bgt.n	800d584 <__sflush_r+0x20>
 800d578:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	dc02      	bgt.n	800d584 <__sflush_r+0x20>
 800d57e:	2000      	movs	r0, #0
 800d580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d586:	2e00      	cmp	r6, #0
 800d588:	d0f9      	beq.n	800d57e <__sflush_r+0x1a>
 800d58a:	2300      	movs	r3, #0
 800d58c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d590:	682f      	ldr	r7, [r5, #0]
 800d592:	602b      	str	r3, [r5, #0]
 800d594:	d032      	beq.n	800d5fc <__sflush_r+0x98>
 800d596:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d598:	89a3      	ldrh	r3, [r4, #12]
 800d59a:	075a      	lsls	r2, r3, #29
 800d59c:	d505      	bpl.n	800d5aa <__sflush_r+0x46>
 800d59e:	6863      	ldr	r3, [r4, #4]
 800d5a0:	1ac0      	subs	r0, r0, r3
 800d5a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5a4:	b10b      	cbz	r3, 800d5aa <__sflush_r+0x46>
 800d5a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5a8:	1ac0      	subs	r0, r0, r3
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5b0:	6a21      	ldr	r1, [r4, #32]
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	47b0      	blx	r6
 800d5b6:	1c43      	adds	r3, r0, #1
 800d5b8:	89a3      	ldrh	r3, [r4, #12]
 800d5ba:	d106      	bne.n	800d5ca <__sflush_r+0x66>
 800d5bc:	6829      	ldr	r1, [r5, #0]
 800d5be:	291d      	cmp	r1, #29
 800d5c0:	d82c      	bhi.n	800d61c <__sflush_r+0xb8>
 800d5c2:	4a2a      	ldr	r2, [pc, #168]	; (800d66c <__sflush_r+0x108>)
 800d5c4:	40ca      	lsrs	r2, r1
 800d5c6:	07d6      	lsls	r6, r2, #31
 800d5c8:	d528      	bpl.n	800d61c <__sflush_r+0xb8>
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	6062      	str	r2, [r4, #4]
 800d5ce:	04d9      	lsls	r1, r3, #19
 800d5d0:	6922      	ldr	r2, [r4, #16]
 800d5d2:	6022      	str	r2, [r4, #0]
 800d5d4:	d504      	bpl.n	800d5e0 <__sflush_r+0x7c>
 800d5d6:	1c42      	adds	r2, r0, #1
 800d5d8:	d101      	bne.n	800d5de <__sflush_r+0x7a>
 800d5da:	682b      	ldr	r3, [r5, #0]
 800d5dc:	b903      	cbnz	r3, 800d5e0 <__sflush_r+0x7c>
 800d5de:	6560      	str	r0, [r4, #84]	; 0x54
 800d5e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5e2:	602f      	str	r7, [r5, #0]
 800d5e4:	2900      	cmp	r1, #0
 800d5e6:	d0ca      	beq.n	800d57e <__sflush_r+0x1a>
 800d5e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5ec:	4299      	cmp	r1, r3
 800d5ee:	d002      	beq.n	800d5f6 <__sflush_r+0x92>
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	f001 f975 	bl	800e8e0 <_free_r>
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	6360      	str	r0, [r4, #52]	; 0x34
 800d5fa:	e7c1      	b.n	800d580 <__sflush_r+0x1c>
 800d5fc:	6a21      	ldr	r1, [r4, #32]
 800d5fe:	2301      	movs	r3, #1
 800d600:	4628      	mov	r0, r5
 800d602:	47b0      	blx	r6
 800d604:	1c41      	adds	r1, r0, #1
 800d606:	d1c7      	bne.n	800d598 <__sflush_r+0x34>
 800d608:	682b      	ldr	r3, [r5, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d0c4      	beq.n	800d598 <__sflush_r+0x34>
 800d60e:	2b1d      	cmp	r3, #29
 800d610:	d001      	beq.n	800d616 <__sflush_r+0xb2>
 800d612:	2b16      	cmp	r3, #22
 800d614:	d101      	bne.n	800d61a <__sflush_r+0xb6>
 800d616:	602f      	str	r7, [r5, #0]
 800d618:	e7b1      	b.n	800d57e <__sflush_r+0x1a>
 800d61a:	89a3      	ldrh	r3, [r4, #12]
 800d61c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d620:	81a3      	strh	r3, [r4, #12]
 800d622:	e7ad      	b.n	800d580 <__sflush_r+0x1c>
 800d624:	690f      	ldr	r7, [r1, #16]
 800d626:	2f00      	cmp	r7, #0
 800d628:	d0a9      	beq.n	800d57e <__sflush_r+0x1a>
 800d62a:	0793      	lsls	r3, r2, #30
 800d62c:	680e      	ldr	r6, [r1, #0]
 800d62e:	bf08      	it	eq
 800d630:	694b      	ldreq	r3, [r1, #20]
 800d632:	600f      	str	r7, [r1, #0]
 800d634:	bf18      	it	ne
 800d636:	2300      	movne	r3, #0
 800d638:	eba6 0807 	sub.w	r8, r6, r7
 800d63c:	608b      	str	r3, [r1, #8]
 800d63e:	f1b8 0f00 	cmp.w	r8, #0
 800d642:	dd9c      	ble.n	800d57e <__sflush_r+0x1a>
 800d644:	6a21      	ldr	r1, [r4, #32]
 800d646:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d648:	4643      	mov	r3, r8
 800d64a:	463a      	mov	r2, r7
 800d64c:	4628      	mov	r0, r5
 800d64e:	47b0      	blx	r6
 800d650:	2800      	cmp	r0, #0
 800d652:	dc06      	bgt.n	800d662 <__sflush_r+0xfe>
 800d654:	89a3      	ldrh	r3, [r4, #12]
 800d656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d65a:	81a3      	strh	r3, [r4, #12]
 800d65c:	f04f 30ff 	mov.w	r0, #4294967295
 800d660:	e78e      	b.n	800d580 <__sflush_r+0x1c>
 800d662:	4407      	add	r7, r0
 800d664:	eba8 0800 	sub.w	r8, r8, r0
 800d668:	e7e9      	b.n	800d63e <__sflush_r+0xda>
 800d66a:	bf00      	nop
 800d66c:	20400001 	.word	0x20400001

0800d670 <_fflush_r>:
 800d670:	b538      	push	{r3, r4, r5, lr}
 800d672:	690b      	ldr	r3, [r1, #16]
 800d674:	4605      	mov	r5, r0
 800d676:	460c      	mov	r4, r1
 800d678:	b913      	cbnz	r3, 800d680 <_fflush_r+0x10>
 800d67a:	2500      	movs	r5, #0
 800d67c:	4628      	mov	r0, r5
 800d67e:	bd38      	pop	{r3, r4, r5, pc}
 800d680:	b118      	cbz	r0, 800d68a <_fflush_r+0x1a>
 800d682:	6983      	ldr	r3, [r0, #24]
 800d684:	b90b      	cbnz	r3, 800d68a <_fflush_r+0x1a>
 800d686:	f7fd f877 	bl	800a778 <__sinit>
 800d68a:	4b14      	ldr	r3, [pc, #80]	; (800d6dc <_fflush_r+0x6c>)
 800d68c:	429c      	cmp	r4, r3
 800d68e:	d11b      	bne.n	800d6c8 <_fflush_r+0x58>
 800d690:	686c      	ldr	r4, [r5, #4]
 800d692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d0ef      	beq.n	800d67a <_fflush_r+0xa>
 800d69a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d69c:	07d0      	lsls	r0, r2, #31
 800d69e:	d404      	bmi.n	800d6aa <_fflush_r+0x3a>
 800d6a0:	0599      	lsls	r1, r3, #22
 800d6a2:	d402      	bmi.n	800d6aa <_fflush_r+0x3a>
 800d6a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6a6:	f7fd f92a 	bl	800a8fe <__retarget_lock_acquire_recursive>
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	f7ff ff59 	bl	800d564 <__sflush_r>
 800d6b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6b4:	07da      	lsls	r2, r3, #31
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	d4e0      	bmi.n	800d67c <_fflush_r+0xc>
 800d6ba:	89a3      	ldrh	r3, [r4, #12]
 800d6bc:	059b      	lsls	r3, r3, #22
 800d6be:	d4dd      	bmi.n	800d67c <_fflush_r+0xc>
 800d6c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6c2:	f7fd f91d 	bl	800a900 <__retarget_lock_release_recursive>
 800d6c6:	e7d9      	b.n	800d67c <_fflush_r+0xc>
 800d6c8:	4b05      	ldr	r3, [pc, #20]	; (800d6e0 <_fflush_r+0x70>)
 800d6ca:	429c      	cmp	r4, r3
 800d6cc:	d101      	bne.n	800d6d2 <_fflush_r+0x62>
 800d6ce:	68ac      	ldr	r4, [r5, #8]
 800d6d0:	e7df      	b.n	800d692 <_fflush_r+0x22>
 800d6d2:	4b04      	ldr	r3, [pc, #16]	; (800d6e4 <_fflush_r+0x74>)
 800d6d4:	429c      	cmp	r4, r3
 800d6d6:	bf08      	it	eq
 800d6d8:	68ec      	ldreq	r4, [r5, #12]
 800d6da:	e7da      	b.n	800d692 <_fflush_r+0x22>
 800d6dc:	0800f214 	.word	0x0800f214
 800d6e0:	0800f234 	.word	0x0800f234
 800d6e4:	0800f1f4 	.word	0x0800f1f4

0800d6e8 <fiprintf>:
 800d6e8:	b40e      	push	{r1, r2, r3}
 800d6ea:	b503      	push	{r0, r1, lr}
 800d6ec:	4601      	mov	r1, r0
 800d6ee:	ab03      	add	r3, sp, #12
 800d6f0:	4805      	ldr	r0, [pc, #20]	; (800d708 <fiprintf+0x20>)
 800d6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6f6:	6800      	ldr	r0, [r0, #0]
 800d6f8:	9301      	str	r3, [sp, #4]
 800d6fa:	f001 fac3 	bl	800ec84 <_vfiprintf_r>
 800d6fe:	b002      	add	sp, #8
 800d700:	f85d eb04 	ldr.w	lr, [sp], #4
 800d704:	b003      	add	sp, #12
 800d706:	4770      	bx	lr
 800d708:	20000094 	.word	0x20000094

0800d70c <rshift>:
 800d70c:	6903      	ldr	r3, [r0, #16]
 800d70e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d716:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d71a:	f100 0414 	add.w	r4, r0, #20
 800d71e:	dd45      	ble.n	800d7ac <rshift+0xa0>
 800d720:	f011 011f 	ands.w	r1, r1, #31
 800d724:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d728:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d72c:	d10c      	bne.n	800d748 <rshift+0x3c>
 800d72e:	f100 0710 	add.w	r7, r0, #16
 800d732:	4629      	mov	r1, r5
 800d734:	42b1      	cmp	r1, r6
 800d736:	d334      	bcc.n	800d7a2 <rshift+0x96>
 800d738:	1a9b      	subs	r3, r3, r2
 800d73a:	009b      	lsls	r3, r3, #2
 800d73c:	1eea      	subs	r2, r5, #3
 800d73e:	4296      	cmp	r6, r2
 800d740:	bf38      	it	cc
 800d742:	2300      	movcc	r3, #0
 800d744:	4423      	add	r3, r4
 800d746:	e015      	b.n	800d774 <rshift+0x68>
 800d748:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d74c:	f1c1 0820 	rsb	r8, r1, #32
 800d750:	40cf      	lsrs	r7, r1
 800d752:	f105 0e04 	add.w	lr, r5, #4
 800d756:	46a1      	mov	r9, r4
 800d758:	4576      	cmp	r6, lr
 800d75a:	46f4      	mov	ip, lr
 800d75c:	d815      	bhi.n	800d78a <rshift+0x7e>
 800d75e:	1a9a      	subs	r2, r3, r2
 800d760:	0092      	lsls	r2, r2, #2
 800d762:	3a04      	subs	r2, #4
 800d764:	3501      	adds	r5, #1
 800d766:	42ae      	cmp	r6, r5
 800d768:	bf38      	it	cc
 800d76a:	2200      	movcc	r2, #0
 800d76c:	18a3      	adds	r3, r4, r2
 800d76e:	50a7      	str	r7, [r4, r2]
 800d770:	b107      	cbz	r7, 800d774 <rshift+0x68>
 800d772:	3304      	adds	r3, #4
 800d774:	1b1a      	subs	r2, r3, r4
 800d776:	42a3      	cmp	r3, r4
 800d778:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d77c:	bf08      	it	eq
 800d77e:	2300      	moveq	r3, #0
 800d780:	6102      	str	r2, [r0, #16]
 800d782:	bf08      	it	eq
 800d784:	6143      	streq	r3, [r0, #20]
 800d786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d78a:	f8dc c000 	ldr.w	ip, [ip]
 800d78e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d792:	ea4c 0707 	orr.w	r7, ip, r7
 800d796:	f849 7b04 	str.w	r7, [r9], #4
 800d79a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d79e:	40cf      	lsrs	r7, r1
 800d7a0:	e7da      	b.n	800d758 <rshift+0x4c>
 800d7a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d7a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d7aa:	e7c3      	b.n	800d734 <rshift+0x28>
 800d7ac:	4623      	mov	r3, r4
 800d7ae:	e7e1      	b.n	800d774 <rshift+0x68>

0800d7b0 <__hexdig_fun>:
 800d7b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d7b4:	2b09      	cmp	r3, #9
 800d7b6:	d802      	bhi.n	800d7be <__hexdig_fun+0xe>
 800d7b8:	3820      	subs	r0, #32
 800d7ba:	b2c0      	uxtb	r0, r0
 800d7bc:	4770      	bx	lr
 800d7be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d7c2:	2b05      	cmp	r3, #5
 800d7c4:	d801      	bhi.n	800d7ca <__hexdig_fun+0x1a>
 800d7c6:	3847      	subs	r0, #71	; 0x47
 800d7c8:	e7f7      	b.n	800d7ba <__hexdig_fun+0xa>
 800d7ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d7ce:	2b05      	cmp	r3, #5
 800d7d0:	d801      	bhi.n	800d7d6 <__hexdig_fun+0x26>
 800d7d2:	3827      	subs	r0, #39	; 0x27
 800d7d4:	e7f1      	b.n	800d7ba <__hexdig_fun+0xa>
 800d7d6:	2000      	movs	r0, #0
 800d7d8:	4770      	bx	lr
	...

0800d7dc <__gethex>:
 800d7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e0:	ed2d 8b02 	vpush	{d8}
 800d7e4:	b089      	sub	sp, #36	; 0x24
 800d7e6:	ee08 0a10 	vmov	s16, r0
 800d7ea:	9304      	str	r3, [sp, #16]
 800d7ec:	4bb4      	ldr	r3, [pc, #720]	; (800dac0 <__gethex+0x2e4>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	9301      	str	r3, [sp, #4]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	468b      	mov	fp, r1
 800d7f6:	4690      	mov	r8, r2
 800d7f8:	f7f2 fcea 	bl	80001d0 <strlen>
 800d7fc:	9b01      	ldr	r3, [sp, #4]
 800d7fe:	f8db 2000 	ldr.w	r2, [fp]
 800d802:	4403      	add	r3, r0
 800d804:	4682      	mov	sl, r0
 800d806:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d80a:	9305      	str	r3, [sp, #20]
 800d80c:	1c93      	adds	r3, r2, #2
 800d80e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d812:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d816:	32fe      	adds	r2, #254	; 0xfe
 800d818:	18d1      	adds	r1, r2, r3
 800d81a:	461f      	mov	r7, r3
 800d81c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d820:	9100      	str	r1, [sp, #0]
 800d822:	2830      	cmp	r0, #48	; 0x30
 800d824:	d0f8      	beq.n	800d818 <__gethex+0x3c>
 800d826:	f7ff ffc3 	bl	800d7b0 <__hexdig_fun>
 800d82a:	4604      	mov	r4, r0
 800d82c:	2800      	cmp	r0, #0
 800d82e:	d13a      	bne.n	800d8a6 <__gethex+0xca>
 800d830:	9901      	ldr	r1, [sp, #4]
 800d832:	4652      	mov	r2, sl
 800d834:	4638      	mov	r0, r7
 800d836:	f001 fb6f 	bl	800ef18 <strncmp>
 800d83a:	4605      	mov	r5, r0
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d168      	bne.n	800d912 <__gethex+0x136>
 800d840:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d844:	eb07 060a 	add.w	r6, r7, sl
 800d848:	f7ff ffb2 	bl	800d7b0 <__hexdig_fun>
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d062      	beq.n	800d916 <__gethex+0x13a>
 800d850:	4633      	mov	r3, r6
 800d852:	7818      	ldrb	r0, [r3, #0]
 800d854:	2830      	cmp	r0, #48	; 0x30
 800d856:	461f      	mov	r7, r3
 800d858:	f103 0301 	add.w	r3, r3, #1
 800d85c:	d0f9      	beq.n	800d852 <__gethex+0x76>
 800d85e:	f7ff ffa7 	bl	800d7b0 <__hexdig_fun>
 800d862:	2301      	movs	r3, #1
 800d864:	fab0 f480 	clz	r4, r0
 800d868:	0964      	lsrs	r4, r4, #5
 800d86a:	4635      	mov	r5, r6
 800d86c:	9300      	str	r3, [sp, #0]
 800d86e:	463a      	mov	r2, r7
 800d870:	4616      	mov	r6, r2
 800d872:	3201      	adds	r2, #1
 800d874:	7830      	ldrb	r0, [r6, #0]
 800d876:	f7ff ff9b 	bl	800d7b0 <__hexdig_fun>
 800d87a:	2800      	cmp	r0, #0
 800d87c:	d1f8      	bne.n	800d870 <__gethex+0x94>
 800d87e:	9901      	ldr	r1, [sp, #4]
 800d880:	4652      	mov	r2, sl
 800d882:	4630      	mov	r0, r6
 800d884:	f001 fb48 	bl	800ef18 <strncmp>
 800d888:	b980      	cbnz	r0, 800d8ac <__gethex+0xd0>
 800d88a:	b94d      	cbnz	r5, 800d8a0 <__gethex+0xc4>
 800d88c:	eb06 050a 	add.w	r5, r6, sl
 800d890:	462a      	mov	r2, r5
 800d892:	4616      	mov	r6, r2
 800d894:	3201      	adds	r2, #1
 800d896:	7830      	ldrb	r0, [r6, #0]
 800d898:	f7ff ff8a 	bl	800d7b0 <__hexdig_fun>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	d1f8      	bne.n	800d892 <__gethex+0xb6>
 800d8a0:	1bad      	subs	r5, r5, r6
 800d8a2:	00ad      	lsls	r5, r5, #2
 800d8a4:	e004      	b.n	800d8b0 <__gethex+0xd4>
 800d8a6:	2400      	movs	r4, #0
 800d8a8:	4625      	mov	r5, r4
 800d8aa:	e7e0      	b.n	800d86e <__gethex+0x92>
 800d8ac:	2d00      	cmp	r5, #0
 800d8ae:	d1f7      	bne.n	800d8a0 <__gethex+0xc4>
 800d8b0:	7833      	ldrb	r3, [r6, #0]
 800d8b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d8b6:	2b50      	cmp	r3, #80	; 0x50
 800d8b8:	d13b      	bne.n	800d932 <__gethex+0x156>
 800d8ba:	7873      	ldrb	r3, [r6, #1]
 800d8bc:	2b2b      	cmp	r3, #43	; 0x2b
 800d8be:	d02c      	beq.n	800d91a <__gethex+0x13e>
 800d8c0:	2b2d      	cmp	r3, #45	; 0x2d
 800d8c2:	d02e      	beq.n	800d922 <__gethex+0x146>
 800d8c4:	1c71      	adds	r1, r6, #1
 800d8c6:	f04f 0900 	mov.w	r9, #0
 800d8ca:	7808      	ldrb	r0, [r1, #0]
 800d8cc:	f7ff ff70 	bl	800d7b0 <__hexdig_fun>
 800d8d0:	1e43      	subs	r3, r0, #1
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	2b18      	cmp	r3, #24
 800d8d6:	d82c      	bhi.n	800d932 <__gethex+0x156>
 800d8d8:	f1a0 0210 	sub.w	r2, r0, #16
 800d8dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d8e0:	f7ff ff66 	bl	800d7b0 <__hexdig_fun>
 800d8e4:	1e43      	subs	r3, r0, #1
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	2b18      	cmp	r3, #24
 800d8ea:	d91d      	bls.n	800d928 <__gethex+0x14c>
 800d8ec:	f1b9 0f00 	cmp.w	r9, #0
 800d8f0:	d000      	beq.n	800d8f4 <__gethex+0x118>
 800d8f2:	4252      	negs	r2, r2
 800d8f4:	4415      	add	r5, r2
 800d8f6:	f8cb 1000 	str.w	r1, [fp]
 800d8fa:	b1e4      	cbz	r4, 800d936 <__gethex+0x15a>
 800d8fc:	9b00      	ldr	r3, [sp, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	bf14      	ite	ne
 800d902:	2700      	movne	r7, #0
 800d904:	2706      	moveq	r7, #6
 800d906:	4638      	mov	r0, r7
 800d908:	b009      	add	sp, #36	; 0x24
 800d90a:	ecbd 8b02 	vpop	{d8}
 800d90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d912:	463e      	mov	r6, r7
 800d914:	4625      	mov	r5, r4
 800d916:	2401      	movs	r4, #1
 800d918:	e7ca      	b.n	800d8b0 <__gethex+0xd4>
 800d91a:	f04f 0900 	mov.w	r9, #0
 800d91e:	1cb1      	adds	r1, r6, #2
 800d920:	e7d3      	b.n	800d8ca <__gethex+0xee>
 800d922:	f04f 0901 	mov.w	r9, #1
 800d926:	e7fa      	b.n	800d91e <__gethex+0x142>
 800d928:	230a      	movs	r3, #10
 800d92a:	fb03 0202 	mla	r2, r3, r2, r0
 800d92e:	3a10      	subs	r2, #16
 800d930:	e7d4      	b.n	800d8dc <__gethex+0x100>
 800d932:	4631      	mov	r1, r6
 800d934:	e7df      	b.n	800d8f6 <__gethex+0x11a>
 800d936:	1bf3      	subs	r3, r6, r7
 800d938:	3b01      	subs	r3, #1
 800d93a:	4621      	mov	r1, r4
 800d93c:	2b07      	cmp	r3, #7
 800d93e:	dc0b      	bgt.n	800d958 <__gethex+0x17c>
 800d940:	ee18 0a10 	vmov	r0, s16
 800d944:	f000 faf4 	bl	800df30 <_Balloc>
 800d948:	4604      	mov	r4, r0
 800d94a:	b940      	cbnz	r0, 800d95e <__gethex+0x182>
 800d94c:	4b5d      	ldr	r3, [pc, #372]	; (800dac4 <__gethex+0x2e8>)
 800d94e:	4602      	mov	r2, r0
 800d950:	21de      	movs	r1, #222	; 0xde
 800d952:	485d      	ldr	r0, [pc, #372]	; (800dac8 <__gethex+0x2ec>)
 800d954:	f7fe ff5e 	bl	800c814 <__assert_func>
 800d958:	3101      	adds	r1, #1
 800d95a:	105b      	asrs	r3, r3, #1
 800d95c:	e7ee      	b.n	800d93c <__gethex+0x160>
 800d95e:	f100 0914 	add.w	r9, r0, #20
 800d962:	f04f 0b00 	mov.w	fp, #0
 800d966:	f1ca 0301 	rsb	r3, sl, #1
 800d96a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d96e:	f8cd b000 	str.w	fp, [sp]
 800d972:	9306      	str	r3, [sp, #24]
 800d974:	42b7      	cmp	r7, r6
 800d976:	d340      	bcc.n	800d9fa <__gethex+0x21e>
 800d978:	9802      	ldr	r0, [sp, #8]
 800d97a:	9b00      	ldr	r3, [sp, #0]
 800d97c:	f840 3b04 	str.w	r3, [r0], #4
 800d980:	eba0 0009 	sub.w	r0, r0, r9
 800d984:	1080      	asrs	r0, r0, #2
 800d986:	0146      	lsls	r6, r0, #5
 800d988:	6120      	str	r0, [r4, #16]
 800d98a:	4618      	mov	r0, r3
 800d98c:	f000 fbc2 	bl	800e114 <__hi0bits>
 800d990:	1a30      	subs	r0, r6, r0
 800d992:	f8d8 6000 	ldr.w	r6, [r8]
 800d996:	42b0      	cmp	r0, r6
 800d998:	dd63      	ble.n	800da62 <__gethex+0x286>
 800d99a:	1b87      	subs	r7, r0, r6
 800d99c:	4639      	mov	r1, r7
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f000 ff66 	bl	800e870 <__any_on>
 800d9a4:	4682      	mov	sl, r0
 800d9a6:	b1a8      	cbz	r0, 800d9d4 <__gethex+0x1f8>
 800d9a8:	1e7b      	subs	r3, r7, #1
 800d9aa:	1159      	asrs	r1, r3, #5
 800d9ac:	f003 021f 	and.w	r2, r3, #31
 800d9b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d9b4:	f04f 0a01 	mov.w	sl, #1
 800d9b8:	fa0a f202 	lsl.w	r2, sl, r2
 800d9bc:	420a      	tst	r2, r1
 800d9be:	d009      	beq.n	800d9d4 <__gethex+0x1f8>
 800d9c0:	4553      	cmp	r3, sl
 800d9c2:	dd05      	ble.n	800d9d0 <__gethex+0x1f4>
 800d9c4:	1eb9      	subs	r1, r7, #2
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	f000 ff52 	bl	800e870 <__any_on>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	d145      	bne.n	800da5c <__gethex+0x280>
 800d9d0:	f04f 0a02 	mov.w	sl, #2
 800d9d4:	4639      	mov	r1, r7
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	f7ff fe98 	bl	800d70c <rshift>
 800d9dc:	443d      	add	r5, r7
 800d9de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d9e2:	42ab      	cmp	r3, r5
 800d9e4:	da4c      	bge.n	800da80 <__gethex+0x2a4>
 800d9e6:	ee18 0a10 	vmov	r0, s16
 800d9ea:	4621      	mov	r1, r4
 800d9ec:	f000 fae0 	bl	800dfb0 <_Bfree>
 800d9f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	6013      	str	r3, [r2, #0]
 800d9f6:	27a3      	movs	r7, #163	; 0xa3
 800d9f8:	e785      	b.n	800d906 <__gethex+0x12a>
 800d9fa:	1e73      	subs	r3, r6, #1
 800d9fc:	9a05      	ldr	r2, [sp, #20]
 800d9fe:	9303      	str	r3, [sp, #12]
 800da00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da04:	4293      	cmp	r3, r2
 800da06:	d019      	beq.n	800da3c <__gethex+0x260>
 800da08:	f1bb 0f20 	cmp.w	fp, #32
 800da0c:	d107      	bne.n	800da1e <__gethex+0x242>
 800da0e:	9b02      	ldr	r3, [sp, #8]
 800da10:	9a00      	ldr	r2, [sp, #0]
 800da12:	f843 2b04 	str.w	r2, [r3], #4
 800da16:	9302      	str	r3, [sp, #8]
 800da18:	2300      	movs	r3, #0
 800da1a:	9300      	str	r3, [sp, #0]
 800da1c:	469b      	mov	fp, r3
 800da1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800da22:	f7ff fec5 	bl	800d7b0 <__hexdig_fun>
 800da26:	9b00      	ldr	r3, [sp, #0]
 800da28:	f000 000f 	and.w	r0, r0, #15
 800da2c:	fa00 f00b 	lsl.w	r0, r0, fp
 800da30:	4303      	orrs	r3, r0
 800da32:	9300      	str	r3, [sp, #0]
 800da34:	f10b 0b04 	add.w	fp, fp, #4
 800da38:	9b03      	ldr	r3, [sp, #12]
 800da3a:	e00d      	b.n	800da58 <__gethex+0x27c>
 800da3c:	9b03      	ldr	r3, [sp, #12]
 800da3e:	9a06      	ldr	r2, [sp, #24]
 800da40:	4413      	add	r3, r2
 800da42:	42bb      	cmp	r3, r7
 800da44:	d3e0      	bcc.n	800da08 <__gethex+0x22c>
 800da46:	4618      	mov	r0, r3
 800da48:	9901      	ldr	r1, [sp, #4]
 800da4a:	9307      	str	r3, [sp, #28]
 800da4c:	4652      	mov	r2, sl
 800da4e:	f001 fa63 	bl	800ef18 <strncmp>
 800da52:	9b07      	ldr	r3, [sp, #28]
 800da54:	2800      	cmp	r0, #0
 800da56:	d1d7      	bne.n	800da08 <__gethex+0x22c>
 800da58:	461e      	mov	r6, r3
 800da5a:	e78b      	b.n	800d974 <__gethex+0x198>
 800da5c:	f04f 0a03 	mov.w	sl, #3
 800da60:	e7b8      	b.n	800d9d4 <__gethex+0x1f8>
 800da62:	da0a      	bge.n	800da7a <__gethex+0x29e>
 800da64:	1a37      	subs	r7, r6, r0
 800da66:	4621      	mov	r1, r4
 800da68:	ee18 0a10 	vmov	r0, s16
 800da6c:	463a      	mov	r2, r7
 800da6e:	f000 fcbb 	bl	800e3e8 <__lshift>
 800da72:	1bed      	subs	r5, r5, r7
 800da74:	4604      	mov	r4, r0
 800da76:	f100 0914 	add.w	r9, r0, #20
 800da7a:	f04f 0a00 	mov.w	sl, #0
 800da7e:	e7ae      	b.n	800d9de <__gethex+0x202>
 800da80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800da84:	42a8      	cmp	r0, r5
 800da86:	dd72      	ble.n	800db6e <__gethex+0x392>
 800da88:	1b45      	subs	r5, r0, r5
 800da8a:	42ae      	cmp	r6, r5
 800da8c:	dc36      	bgt.n	800dafc <__gethex+0x320>
 800da8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da92:	2b02      	cmp	r3, #2
 800da94:	d02a      	beq.n	800daec <__gethex+0x310>
 800da96:	2b03      	cmp	r3, #3
 800da98:	d02c      	beq.n	800daf4 <__gethex+0x318>
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d11c      	bne.n	800dad8 <__gethex+0x2fc>
 800da9e:	42ae      	cmp	r6, r5
 800daa0:	d11a      	bne.n	800dad8 <__gethex+0x2fc>
 800daa2:	2e01      	cmp	r6, #1
 800daa4:	d112      	bne.n	800dacc <__gethex+0x2f0>
 800daa6:	9a04      	ldr	r2, [sp, #16]
 800daa8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800daac:	6013      	str	r3, [r2, #0]
 800daae:	2301      	movs	r3, #1
 800dab0:	6123      	str	r3, [r4, #16]
 800dab2:	f8c9 3000 	str.w	r3, [r9]
 800dab6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dab8:	2762      	movs	r7, #98	; 0x62
 800daba:	601c      	str	r4, [r3, #0]
 800dabc:	e723      	b.n	800d906 <__gethex+0x12a>
 800dabe:	bf00      	nop
 800dac0:	0800f51c 	.word	0x0800f51c
 800dac4:	0800f4a4 	.word	0x0800f4a4
 800dac8:	0800f4b5 	.word	0x0800f4b5
 800dacc:	1e71      	subs	r1, r6, #1
 800dace:	4620      	mov	r0, r4
 800dad0:	f000 fece 	bl	800e870 <__any_on>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d1e6      	bne.n	800daa6 <__gethex+0x2ca>
 800dad8:	ee18 0a10 	vmov	r0, s16
 800dadc:	4621      	mov	r1, r4
 800dade:	f000 fa67 	bl	800dfb0 <_Bfree>
 800dae2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dae4:	2300      	movs	r3, #0
 800dae6:	6013      	str	r3, [r2, #0]
 800dae8:	2750      	movs	r7, #80	; 0x50
 800daea:	e70c      	b.n	800d906 <__gethex+0x12a>
 800daec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1f2      	bne.n	800dad8 <__gethex+0x2fc>
 800daf2:	e7d8      	b.n	800daa6 <__gethex+0x2ca>
 800daf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d1d5      	bne.n	800daa6 <__gethex+0x2ca>
 800dafa:	e7ed      	b.n	800dad8 <__gethex+0x2fc>
 800dafc:	1e6f      	subs	r7, r5, #1
 800dafe:	f1ba 0f00 	cmp.w	sl, #0
 800db02:	d131      	bne.n	800db68 <__gethex+0x38c>
 800db04:	b127      	cbz	r7, 800db10 <__gethex+0x334>
 800db06:	4639      	mov	r1, r7
 800db08:	4620      	mov	r0, r4
 800db0a:	f000 feb1 	bl	800e870 <__any_on>
 800db0e:	4682      	mov	sl, r0
 800db10:	117b      	asrs	r3, r7, #5
 800db12:	2101      	movs	r1, #1
 800db14:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800db18:	f007 071f 	and.w	r7, r7, #31
 800db1c:	fa01 f707 	lsl.w	r7, r1, r7
 800db20:	421f      	tst	r7, r3
 800db22:	4629      	mov	r1, r5
 800db24:	4620      	mov	r0, r4
 800db26:	bf18      	it	ne
 800db28:	f04a 0a02 	orrne.w	sl, sl, #2
 800db2c:	1b76      	subs	r6, r6, r5
 800db2e:	f7ff fded 	bl	800d70c <rshift>
 800db32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800db36:	2702      	movs	r7, #2
 800db38:	f1ba 0f00 	cmp.w	sl, #0
 800db3c:	d048      	beq.n	800dbd0 <__gethex+0x3f4>
 800db3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db42:	2b02      	cmp	r3, #2
 800db44:	d015      	beq.n	800db72 <__gethex+0x396>
 800db46:	2b03      	cmp	r3, #3
 800db48:	d017      	beq.n	800db7a <__gethex+0x39e>
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d109      	bne.n	800db62 <__gethex+0x386>
 800db4e:	f01a 0f02 	tst.w	sl, #2
 800db52:	d006      	beq.n	800db62 <__gethex+0x386>
 800db54:	f8d9 0000 	ldr.w	r0, [r9]
 800db58:	ea4a 0a00 	orr.w	sl, sl, r0
 800db5c:	f01a 0f01 	tst.w	sl, #1
 800db60:	d10e      	bne.n	800db80 <__gethex+0x3a4>
 800db62:	f047 0710 	orr.w	r7, r7, #16
 800db66:	e033      	b.n	800dbd0 <__gethex+0x3f4>
 800db68:	f04f 0a01 	mov.w	sl, #1
 800db6c:	e7d0      	b.n	800db10 <__gethex+0x334>
 800db6e:	2701      	movs	r7, #1
 800db70:	e7e2      	b.n	800db38 <__gethex+0x35c>
 800db72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db74:	f1c3 0301 	rsb	r3, r3, #1
 800db78:	9315      	str	r3, [sp, #84]	; 0x54
 800db7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d0f0      	beq.n	800db62 <__gethex+0x386>
 800db80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800db84:	f104 0314 	add.w	r3, r4, #20
 800db88:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800db8c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800db90:	f04f 0c00 	mov.w	ip, #0
 800db94:	4618      	mov	r0, r3
 800db96:	f853 2b04 	ldr.w	r2, [r3], #4
 800db9a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800db9e:	d01c      	beq.n	800dbda <__gethex+0x3fe>
 800dba0:	3201      	adds	r2, #1
 800dba2:	6002      	str	r2, [r0, #0]
 800dba4:	2f02      	cmp	r7, #2
 800dba6:	f104 0314 	add.w	r3, r4, #20
 800dbaa:	d13f      	bne.n	800dc2c <__gethex+0x450>
 800dbac:	f8d8 2000 	ldr.w	r2, [r8]
 800dbb0:	3a01      	subs	r2, #1
 800dbb2:	42b2      	cmp	r2, r6
 800dbb4:	d10a      	bne.n	800dbcc <__gethex+0x3f0>
 800dbb6:	1171      	asrs	r1, r6, #5
 800dbb8:	2201      	movs	r2, #1
 800dbba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dbbe:	f006 061f 	and.w	r6, r6, #31
 800dbc2:	fa02 f606 	lsl.w	r6, r2, r6
 800dbc6:	421e      	tst	r6, r3
 800dbc8:	bf18      	it	ne
 800dbca:	4617      	movne	r7, r2
 800dbcc:	f047 0720 	orr.w	r7, r7, #32
 800dbd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dbd2:	601c      	str	r4, [r3, #0]
 800dbd4:	9b04      	ldr	r3, [sp, #16]
 800dbd6:	601d      	str	r5, [r3, #0]
 800dbd8:	e695      	b.n	800d906 <__gethex+0x12a>
 800dbda:	4299      	cmp	r1, r3
 800dbdc:	f843 cc04 	str.w	ip, [r3, #-4]
 800dbe0:	d8d8      	bhi.n	800db94 <__gethex+0x3b8>
 800dbe2:	68a3      	ldr	r3, [r4, #8]
 800dbe4:	459b      	cmp	fp, r3
 800dbe6:	db19      	blt.n	800dc1c <__gethex+0x440>
 800dbe8:	6861      	ldr	r1, [r4, #4]
 800dbea:	ee18 0a10 	vmov	r0, s16
 800dbee:	3101      	adds	r1, #1
 800dbf0:	f000 f99e 	bl	800df30 <_Balloc>
 800dbf4:	4681      	mov	r9, r0
 800dbf6:	b918      	cbnz	r0, 800dc00 <__gethex+0x424>
 800dbf8:	4b1a      	ldr	r3, [pc, #104]	; (800dc64 <__gethex+0x488>)
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	2184      	movs	r1, #132	; 0x84
 800dbfe:	e6a8      	b.n	800d952 <__gethex+0x176>
 800dc00:	6922      	ldr	r2, [r4, #16]
 800dc02:	3202      	adds	r2, #2
 800dc04:	f104 010c 	add.w	r1, r4, #12
 800dc08:	0092      	lsls	r2, r2, #2
 800dc0a:	300c      	adds	r0, #12
 800dc0c:	f7fc fe79 	bl	800a902 <memcpy>
 800dc10:	4621      	mov	r1, r4
 800dc12:	ee18 0a10 	vmov	r0, s16
 800dc16:	f000 f9cb 	bl	800dfb0 <_Bfree>
 800dc1a:	464c      	mov	r4, r9
 800dc1c:	6923      	ldr	r3, [r4, #16]
 800dc1e:	1c5a      	adds	r2, r3, #1
 800dc20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc24:	6122      	str	r2, [r4, #16]
 800dc26:	2201      	movs	r2, #1
 800dc28:	615a      	str	r2, [r3, #20]
 800dc2a:	e7bb      	b.n	800dba4 <__gethex+0x3c8>
 800dc2c:	6922      	ldr	r2, [r4, #16]
 800dc2e:	455a      	cmp	r2, fp
 800dc30:	dd0b      	ble.n	800dc4a <__gethex+0x46e>
 800dc32:	2101      	movs	r1, #1
 800dc34:	4620      	mov	r0, r4
 800dc36:	f7ff fd69 	bl	800d70c <rshift>
 800dc3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc3e:	3501      	adds	r5, #1
 800dc40:	42ab      	cmp	r3, r5
 800dc42:	f6ff aed0 	blt.w	800d9e6 <__gethex+0x20a>
 800dc46:	2701      	movs	r7, #1
 800dc48:	e7c0      	b.n	800dbcc <__gethex+0x3f0>
 800dc4a:	f016 061f 	ands.w	r6, r6, #31
 800dc4e:	d0fa      	beq.n	800dc46 <__gethex+0x46a>
 800dc50:	4453      	add	r3, sl
 800dc52:	f1c6 0620 	rsb	r6, r6, #32
 800dc56:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dc5a:	f000 fa5b 	bl	800e114 <__hi0bits>
 800dc5e:	42b0      	cmp	r0, r6
 800dc60:	dbe7      	blt.n	800dc32 <__gethex+0x456>
 800dc62:	e7f0      	b.n	800dc46 <__gethex+0x46a>
 800dc64:	0800f4a4 	.word	0x0800f4a4

0800dc68 <L_shift>:
 800dc68:	f1c2 0208 	rsb	r2, r2, #8
 800dc6c:	0092      	lsls	r2, r2, #2
 800dc6e:	b570      	push	{r4, r5, r6, lr}
 800dc70:	f1c2 0620 	rsb	r6, r2, #32
 800dc74:	6843      	ldr	r3, [r0, #4]
 800dc76:	6804      	ldr	r4, [r0, #0]
 800dc78:	fa03 f506 	lsl.w	r5, r3, r6
 800dc7c:	432c      	orrs	r4, r5
 800dc7e:	40d3      	lsrs	r3, r2
 800dc80:	6004      	str	r4, [r0, #0]
 800dc82:	f840 3f04 	str.w	r3, [r0, #4]!
 800dc86:	4288      	cmp	r0, r1
 800dc88:	d3f4      	bcc.n	800dc74 <L_shift+0xc>
 800dc8a:	bd70      	pop	{r4, r5, r6, pc}

0800dc8c <__match>:
 800dc8c:	b530      	push	{r4, r5, lr}
 800dc8e:	6803      	ldr	r3, [r0, #0]
 800dc90:	3301      	adds	r3, #1
 800dc92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc96:	b914      	cbnz	r4, 800dc9e <__match+0x12>
 800dc98:	6003      	str	r3, [r0, #0]
 800dc9a:	2001      	movs	r0, #1
 800dc9c:	bd30      	pop	{r4, r5, pc}
 800dc9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dca2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dca6:	2d19      	cmp	r5, #25
 800dca8:	bf98      	it	ls
 800dcaa:	3220      	addls	r2, #32
 800dcac:	42a2      	cmp	r2, r4
 800dcae:	d0f0      	beq.n	800dc92 <__match+0x6>
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	e7f3      	b.n	800dc9c <__match+0x10>

0800dcb4 <__hexnan>:
 800dcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb8:	680b      	ldr	r3, [r1, #0]
 800dcba:	115e      	asrs	r6, r3, #5
 800dcbc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dcc0:	f013 031f 	ands.w	r3, r3, #31
 800dcc4:	b087      	sub	sp, #28
 800dcc6:	bf18      	it	ne
 800dcc8:	3604      	addne	r6, #4
 800dcca:	2500      	movs	r5, #0
 800dccc:	1f37      	subs	r7, r6, #4
 800dcce:	4690      	mov	r8, r2
 800dcd0:	6802      	ldr	r2, [r0, #0]
 800dcd2:	9301      	str	r3, [sp, #4]
 800dcd4:	4682      	mov	sl, r0
 800dcd6:	f846 5c04 	str.w	r5, [r6, #-4]
 800dcda:	46b9      	mov	r9, r7
 800dcdc:	463c      	mov	r4, r7
 800dcde:	9502      	str	r5, [sp, #8]
 800dce0:	46ab      	mov	fp, r5
 800dce2:	7851      	ldrb	r1, [r2, #1]
 800dce4:	1c53      	adds	r3, r2, #1
 800dce6:	9303      	str	r3, [sp, #12]
 800dce8:	b341      	cbz	r1, 800dd3c <__hexnan+0x88>
 800dcea:	4608      	mov	r0, r1
 800dcec:	9205      	str	r2, [sp, #20]
 800dcee:	9104      	str	r1, [sp, #16]
 800dcf0:	f7ff fd5e 	bl	800d7b0 <__hexdig_fun>
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d14f      	bne.n	800dd98 <__hexnan+0xe4>
 800dcf8:	9904      	ldr	r1, [sp, #16]
 800dcfa:	9a05      	ldr	r2, [sp, #20]
 800dcfc:	2920      	cmp	r1, #32
 800dcfe:	d818      	bhi.n	800dd32 <__hexnan+0x7e>
 800dd00:	9b02      	ldr	r3, [sp, #8]
 800dd02:	459b      	cmp	fp, r3
 800dd04:	dd13      	ble.n	800dd2e <__hexnan+0x7a>
 800dd06:	454c      	cmp	r4, r9
 800dd08:	d206      	bcs.n	800dd18 <__hexnan+0x64>
 800dd0a:	2d07      	cmp	r5, #7
 800dd0c:	dc04      	bgt.n	800dd18 <__hexnan+0x64>
 800dd0e:	462a      	mov	r2, r5
 800dd10:	4649      	mov	r1, r9
 800dd12:	4620      	mov	r0, r4
 800dd14:	f7ff ffa8 	bl	800dc68 <L_shift>
 800dd18:	4544      	cmp	r4, r8
 800dd1a:	d950      	bls.n	800ddbe <__hexnan+0x10a>
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	f1a4 0904 	sub.w	r9, r4, #4
 800dd22:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd26:	f8cd b008 	str.w	fp, [sp, #8]
 800dd2a:	464c      	mov	r4, r9
 800dd2c:	461d      	mov	r5, r3
 800dd2e:	9a03      	ldr	r2, [sp, #12]
 800dd30:	e7d7      	b.n	800dce2 <__hexnan+0x2e>
 800dd32:	2929      	cmp	r1, #41	; 0x29
 800dd34:	d156      	bne.n	800dde4 <__hexnan+0x130>
 800dd36:	3202      	adds	r2, #2
 800dd38:	f8ca 2000 	str.w	r2, [sl]
 800dd3c:	f1bb 0f00 	cmp.w	fp, #0
 800dd40:	d050      	beq.n	800dde4 <__hexnan+0x130>
 800dd42:	454c      	cmp	r4, r9
 800dd44:	d206      	bcs.n	800dd54 <__hexnan+0xa0>
 800dd46:	2d07      	cmp	r5, #7
 800dd48:	dc04      	bgt.n	800dd54 <__hexnan+0xa0>
 800dd4a:	462a      	mov	r2, r5
 800dd4c:	4649      	mov	r1, r9
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f7ff ff8a 	bl	800dc68 <L_shift>
 800dd54:	4544      	cmp	r4, r8
 800dd56:	d934      	bls.n	800ddc2 <__hexnan+0x10e>
 800dd58:	f1a8 0204 	sub.w	r2, r8, #4
 800dd5c:	4623      	mov	r3, r4
 800dd5e:	f853 1b04 	ldr.w	r1, [r3], #4
 800dd62:	f842 1f04 	str.w	r1, [r2, #4]!
 800dd66:	429f      	cmp	r7, r3
 800dd68:	d2f9      	bcs.n	800dd5e <__hexnan+0xaa>
 800dd6a:	1b3b      	subs	r3, r7, r4
 800dd6c:	f023 0303 	bic.w	r3, r3, #3
 800dd70:	3304      	adds	r3, #4
 800dd72:	3401      	adds	r4, #1
 800dd74:	3e03      	subs	r6, #3
 800dd76:	42b4      	cmp	r4, r6
 800dd78:	bf88      	it	hi
 800dd7a:	2304      	movhi	r3, #4
 800dd7c:	4443      	add	r3, r8
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f843 2b04 	str.w	r2, [r3], #4
 800dd84:	429f      	cmp	r7, r3
 800dd86:	d2fb      	bcs.n	800dd80 <__hexnan+0xcc>
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	b91b      	cbnz	r3, 800dd94 <__hexnan+0xe0>
 800dd8c:	4547      	cmp	r7, r8
 800dd8e:	d127      	bne.n	800dde0 <__hexnan+0x12c>
 800dd90:	2301      	movs	r3, #1
 800dd92:	603b      	str	r3, [r7, #0]
 800dd94:	2005      	movs	r0, #5
 800dd96:	e026      	b.n	800dde6 <__hexnan+0x132>
 800dd98:	3501      	adds	r5, #1
 800dd9a:	2d08      	cmp	r5, #8
 800dd9c:	f10b 0b01 	add.w	fp, fp, #1
 800dda0:	dd06      	ble.n	800ddb0 <__hexnan+0xfc>
 800dda2:	4544      	cmp	r4, r8
 800dda4:	d9c3      	bls.n	800dd2e <__hexnan+0x7a>
 800dda6:	2300      	movs	r3, #0
 800dda8:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddac:	2501      	movs	r5, #1
 800ddae:	3c04      	subs	r4, #4
 800ddb0:	6822      	ldr	r2, [r4, #0]
 800ddb2:	f000 000f 	and.w	r0, r0, #15
 800ddb6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ddba:	6022      	str	r2, [r4, #0]
 800ddbc:	e7b7      	b.n	800dd2e <__hexnan+0x7a>
 800ddbe:	2508      	movs	r5, #8
 800ddc0:	e7b5      	b.n	800dd2e <__hexnan+0x7a>
 800ddc2:	9b01      	ldr	r3, [sp, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d0df      	beq.n	800dd88 <__hexnan+0xd4>
 800ddc8:	f04f 32ff 	mov.w	r2, #4294967295
 800ddcc:	f1c3 0320 	rsb	r3, r3, #32
 800ddd0:	fa22 f303 	lsr.w	r3, r2, r3
 800ddd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ddd8:	401a      	ands	r2, r3
 800ddda:	f846 2c04 	str.w	r2, [r6, #-4]
 800ddde:	e7d3      	b.n	800dd88 <__hexnan+0xd4>
 800dde0:	3f04      	subs	r7, #4
 800dde2:	e7d1      	b.n	800dd88 <__hexnan+0xd4>
 800dde4:	2004      	movs	r0, #4
 800dde6:	b007      	add	sp, #28
 800dde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ddec <_localeconv_r>:
 800ddec:	4800      	ldr	r0, [pc, #0]	; (800ddf0 <_localeconv_r+0x4>)
 800ddee:	4770      	bx	lr
 800ddf0:	200001ec 	.word	0x200001ec

0800ddf4 <_lseek_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	4d07      	ldr	r5, [pc, #28]	; (800de14 <_lseek_r+0x20>)
 800ddf8:	4604      	mov	r4, r0
 800ddfa:	4608      	mov	r0, r1
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	2200      	movs	r2, #0
 800de00:	602a      	str	r2, [r5, #0]
 800de02:	461a      	mov	r2, r3
 800de04:	f7f3 fc04 	bl	8001610 <_lseek>
 800de08:	1c43      	adds	r3, r0, #1
 800de0a:	d102      	bne.n	800de12 <_lseek_r+0x1e>
 800de0c:	682b      	ldr	r3, [r5, #0]
 800de0e:	b103      	cbz	r3, 800de12 <_lseek_r+0x1e>
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	bd38      	pop	{r3, r4, r5, pc}
 800de14:	20008418 	.word	0x20008418

0800de18 <__swhatbuf_r>:
 800de18:	b570      	push	{r4, r5, r6, lr}
 800de1a:	460e      	mov	r6, r1
 800de1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de20:	2900      	cmp	r1, #0
 800de22:	b096      	sub	sp, #88	; 0x58
 800de24:	4614      	mov	r4, r2
 800de26:	461d      	mov	r5, r3
 800de28:	da08      	bge.n	800de3c <__swhatbuf_r+0x24>
 800de2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800de2e:	2200      	movs	r2, #0
 800de30:	602a      	str	r2, [r5, #0]
 800de32:	061a      	lsls	r2, r3, #24
 800de34:	d410      	bmi.n	800de58 <__swhatbuf_r+0x40>
 800de36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de3a:	e00e      	b.n	800de5a <__swhatbuf_r+0x42>
 800de3c:	466a      	mov	r2, sp
 800de3e:	f001 f893 	bl	800ef68 <_fstat_r>
 800de42:	2800      	cmp	r0, #0
 800de44:	dbf1      	blt.n	800de2a <__swhatbuf_r+0x12>
 800de46:	9a01      	ldr	r2, [sp, #4]
 800de48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800de4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800de50:	425a      	negs	r2, r3
 800de52:	415a      	adcs	r2, r3
 800de54:	602a      	str	r2, [r5, #0]
 800de56:	e7ee      	b.n	800de36 <__swhatbuf_r+0x1e>
 800de58:	2340      	movs	r3, #64	; 0x40
 800de5a:	2000      	movs	r0, #0
 800de5c:	6023      	str	r3, [r4, #0]
 800de5e:	b016      	add	sp, #88	; 0x58
 800de60:	bd70      	pop	{r4, r5, r6, pc}
	...

0800de64 <__smakebuf_r>:
 800de64:	898b      	ldrh	r3, [r1, #12]
 800de66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de68:	079d      	lsls	r5, r3, #30
 800de6a:	4606      	mov	r6, r0
 800de6c:	460c      	mov	r4, r1
 800de6e:	d507      	bpl.n	800de80 <__smakebuf_r+0x1c>
 800de70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de74:	6023      	str	r3, [r4, #0]
 800de76:	6123      	str	r3, [r4, #16]
 800de78:	2301      	movs	r3, #1
 800de7a:	6163      	str	r3, [r4, #20]
 800de7c:	b002      	add	sp, #8
 800de7e:	bd70      	pop	{r4, r5, r6, pc}
 800de80:	ab01      	add	r3, sp, #4
 800de82:	466a      	mov	r2, sp
 800de84:	f7ff ffc8 	bl	800de18 <__swhatbuf_r>
 800de88:	9900      	ldr	r1, [sp, #0]
 800de8a:	4605      	mov	r5, r0
 800de8c:	4630      	mov	r0, r6
 800de8e:	f7fc fd6f 	bl	800a970 <_malloc_r>
 800de92:	b948      	cbnz	r0, 800dea8 <__smakebuf_r+0x44>
 800de94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de98:	059a      	lsls	r2, r3, #22
 800de9a:	d4ef      	bmi.n	800de7c <__smakebuf_r+0x18>
 800de9c:	f023 0303 	bic.w	r3, r3, #3
 800dea0:	f043 0302 	orr.w	r3, r3, #2
 800dea4:	81a3      	strh	r3, [r4, #12]
 800dea6:	e7e3      	b.n	800de70 <__smakebuf_r+0xc>
 800dea8:	4b0d      	ldr	r3, [pc, #52]	; (800dee0 <__smakebuf_r+0x7c>)
 800deaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800deac:	89a3      	ldrh	r3, [r4, #12]
 800deae:	6020      	str	r0, [r4, #0]
 800deb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800deb4:	81a3      	strh	r3, [r4, #12]
 800deb6:	9b00      	ldr	r3, [sp, #0]
 800deb8:	6163      	str	r3, [r4, #20]
 800deba:	9b01      	ldr	r3, [sp, #4]
 800debc:	6120      	str	r0, [r4, #16]
 800debe:	b15b      	cbz	r3, 800ded8 <__smakebuf_r+0x74>
 800dec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dec4:	4630      	mov	r0, r6
 800dec6:	f001 f861 	bl	800ef8c <_isatty_r>
 800deca:	b128      	cbz	r0, 800ded8 <__smakebuf_r+0x74>
 800decc:	89a3      	ldrh	r3, [r4, #12]
 800dece:	f023 0303 	bic.w	r3, r3, #3
 800ded2:	f043 0301 	orr.w	r3, r3, #1
 800ded6:	81a3      	strh	r3, [r4, #12]
 800ded8:	89a0      	ldrh	r0, [r4, #12]
 800deda:	4305      	orrs	r5, r0
 800dedc:	81a5      	strh	r5, [r4, #12]
 800dede:	e7cd      	b.n	800de7c <__smakebuf_r+0x18>
 800dee0:	0800a711 	.word	0x0800a711

0800dee4 <malloc>:
 800dee4:	4b02      	ldr	r3, [pc, #8]	; (800def0 <malloc+0xc>)
 800dee6:	4601      	mov	r1, r0
 800dee8:	6818      	ldr	r0, [r3, #0]
 800deea:	f7fc bd41 	b.w	800a970 <_malloc_r>
 800deee:	bf00      	nop
 800def0:	20000094 	.word	0x20000094

0800def4 <__ascii_mbtowc>:
 800def4:	b082      	sub	sp, #8
 800def6:	b901      	cbnz	r1, 800defa <__ascii_mbtowc+0x6>
 800def8:	a901      	add	r1, sp, #4
 800defa:	b142      	cbz	r2, 800df0e <__ascii_mbtowc+0x1a>
 800defc:	b14b      	cbz	r3, 800df12 <__ascii_mbtowc+0x1e>
 800defe:	7813      	ldrb	r3, [r2, #0]
 800df00:	600b      	str	r3, [r1, #0]
 800df02:	7812      	ldrb	r2, [r2, #0]
 800df04:	1e10      	subs	r0, r2, #0
 800df06:	bf18      	it	ne
 800df08:	2001      	movne	r0, #1
 800df0a:	b002      	add	sp, #8
 800df0c:	4770      	bx	lr
 800df0e:	4610      	mov	r0, r2
 800df10:	e7fb      	b.n	800df0a <__ascii_mbtowc+0x16>
 800df12:	f06f 0001 	mvn.w	r0, #1
 800df16:	e7f8      	b.n	800df0a <__ascii_mbtowc+0x16>

0800df18 <__malloc_lock>:
 800df18:	4801      	ldr	r0, [pc, #4]	; (800df20 <__malloc_lock+0x8>)
 800df1a:	f7fc bcf0 	b.w	800a8fe <__retarget_lock_acquire_recursive>
 800df1e:	bf00      	nop
 800df20:	2000840c 	.word	0x2000840c

0800df24 <__malloc_unlock>:
 800df24:	4801      	ldr	r0, [pc, #4]	; (800df2c <__malloc_unlock+0x8>)
 800df26:	f7fc bceb 	b.w	800a900 <__retarget_lock_release_recursive>
 800df2a:	bf00      	nop
 800df2c:	2000840c 	.word	0x2000840c

0800df30 <_Balloc>:
 800df30:	b570      	push	{r4, r5, r6, lr}
 800df32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df34:	4604      	mov	r4, r0
 800df36:	460d      	mov	r5, r1
 800df38:	b976      	cbnz	r6, 800df58 <_Balloc+0x28>
 800df3a:	2010      	movs	r0, #16
 800df3c:	f7ff ffd2 	bl	800dee4 <malloc>
 800df40:	4602      	mov	r2, r0
 800df42:	6260      	str	r0, [r4, #36]	; 0x24
 800df44:	b920      	cbnz	r0, 800df50 <_Balloc+0x20>
 800df46:	4b18      	ldr	r3, [pc, #96]	; (800dfa8 <_Balloc+0x78>)
 800df48:	4818      	ldr	r0, [pc, #96]	; (800dfac <_Balloc+0x7c>)
 800df4a:	2166      	movs	r1, #102	; 0x66
 800df4c:	f7fe fc62 	bl	800c814 <__assert_func>
 800df50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df54:	6006      	str	r6, [r0, #0]
 800df56:	60c6      	str	r6, [r0, #12]
 800df58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800df5a:	68f3      	ldr	r3, [r6, #12]
 800df5c:	b183      	cbz	r3, 800df80 <_Balloc+0x50>
 800df5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df66:	b9b8      	cbnz	r0, 800df98 <_Balloc+0x68>
 800df68:	2101      	movs	r1, #1
 800df6a:	fa01 f605 	lsl.w	r6, r1, r5
 800df6e:	1d72      	adds	r2, r6, #5
 800df70:	0092      	lsls	r2, r2, #2
 800df72:	4620      	mov	r0, r4
 800df74:	f000 fc9d 	bl	800e8b2 <_calloc_r>
 800df78:	b160      	cbz	r0, 800df94 <_Balloc+0x64>
 800df7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df7e:	e00e      	b.n	800df9e <_Balloc+0x6e>
 800df80:	2221      	movs	r2, #33	; 0x21
 800df82:	2104      	movs	r1, #4
 800df84:	4620      	mov	r0, r4
 800df86:	f000 fc94 	bl	800e8b2 <_calloc_r>
 800df8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df8c:	60f0      	str	r0, [r6, #12]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1e4      	bne.n	800df5e <_Balloc+0x2e>
 800df94:	2000      	movs	r0, #0
 800df96:	bd70      	pop	{r4, r5, r6, pc}
 800df98:	6802      	ldr	r2, [r0, #0]
 800df9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df9e:	2300      	movs	r3, #0
 800dfa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfa4:	e7f7      	b.n	800df96 <_Balloc+0x66>
 800dfa6:	bf00      	nop
 800dfa8:	0800f432 	.word	0x0800f432
 800dfac:	0800f530 	.word	0x0800f530

0800dfb0 <_Bfree>:
 800dfb0:	b570      	push	{r4, r5, r6, lr}
 800dfb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dfb4:	4605      	mov	r5, r0
 800dfb6:	460c      	mov	r4, r1
 800dfb8:	b976      	cbnz	r6, 800dfd8 <_Bfree+0x28>
 800dfba:	2010      	movs	r0, #16
 800dfbc:	f7ff ff92 	bl	800dee4 <malloc>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	6268      	str	r0, [r5, #36]	; 0x24
 800dfc4:	b920      	cbnz	r0, 800dfd0 <_Bfree+0x20>
 800dfc6:	4b09      	ldr	r3, [pc, #36]	; (800dfec <_Bfree+0x3c>)
 800dfc8:	4809      	ldr	r0, [pc, #36]	; (800dff0 <_Bfree+0x40>)
 800dfca:	218a      	movs	r1, #138	; 0x8a
 800dfcc:	f7fe fc22 	bl	800c814 <__assert_func>
 800dfd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfd4:	6006      	str	r6, [r0, #0]
 800dfd6:	60c6      	str	r6, [r0, #12]
 800dfd8:	b13c      	cbz	r4, 800dfea <_Bfree+0x3a>
 800dfda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dfdc:	6862      	ldr	r2, [r4, #4]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dfe4:	6021      	str	r1, [r4, #0]
 800dfe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dfea:	bd70      	pop	{r4, r5, r6, pc}
 800dfec:	0800f432 	.word	0x0800f432
 800dff0:	0800f530 	.word	0x0800f530

0800dff4 <__multadd>:
 800dff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff8:	690d      	ldr	r5, [r1, #16]
 800dffa:	4607      	mov	r7, r0
 800dffc:	460c      	mov	r4, r1
 800dffe:	461e      	mov	r6, r3
 800e000:	f101 0c14 	add.w	ip, r1, #20
 800e004:	2000      	movs	r0, #0
 800e006:	f8dc 3000 	ldr.w	r3, [ip]
 800e00a:	b299      	uxth	r1, r3
 800e00c:	fb02 6101 	mla	r1, r2, r1, r6
 800e010:	0c1e      	lsrs	r6, r3, #16
 800e012:	0c0b      	lsrs	r3, r1, #16
 800e014:	fb02 3306 	mla	r3, r2, r6, r3
 800e018:	b289      	uxth	r1, r1
 800e01a:	3001      	adds	r0, #1
 800e01c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e020:	4285      	cmp	r5, r0
 800e022:	f84c 1b04 	str.w	r1, [ip], #4
 800e026:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e02a:	dcec      	bgt.n	800e006 <__multadd+0x12>
 800e02c:	b30e      	cbz	r6, 800e072 <__multadd+0x7e>
 800e02e:	68a3      	ldr	r3, [r4, #8]
 800e030:	42ab      	cmp	r3, r5
 800e032:	dc19      	bgt.n	800e068 <__multadd+0x74>
 800e034:	6861      	ldr	r1, [r4, #4]
 800e036:	4638      	mov	r0, r7
 800e038:	3101      	adds	r1, #1
 800e03a:	f7ff ff79 	bl	800df30 <_Balloc>
 800e03e:	4680      	mov	r8, r0
 800e040:	b928      	cbnz	r0, 800e04e <__multadd+0x5a>
 800e042:	4602      	mov	r2, r0
 800e044:	4b0c      	ldr	r3, [pc, #48]	; (800e078 <__multadd+0x84>)
 800e046:	480d      	ldr	r0, [pc, #52]	; (800e07c <__multadd+0x88>)
 800e048:	21b5      	movs	r1, #181	; 0xb5
 800e04a:	f7fe fbe3 	bl	800c814 <__assert_func>
 800e04e:	6922      	ldr	r2, [r4, #16]
 800e050:	3202      	adds	r2, #2
 800e052:	f104 010c 	add.w	r1, r4, #12
 800e056:	0092      	lsls	r2, r2, #2
 800e058:	300c      	adds	r0, #12
 800e05a:	f7fc fc52 	bl	800a902 <memcpy>
 800e05e:	4621      	mov	r1, r4
 800e060:	4638      	mov	r0, r7
 800e062:	f7ff ffa5 	bl	800dfb0 <_Bfree>
 800e066:	4644      	mov	r4, r8
 800e068:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e06c:	3501      	adds	r5, #1
 800e06e:	615e      	str	r6, [r3, #20]
 800e070:	6125      	str	r5, [r4, #16]
 800e072:	4620      	mov	r0, r4
 800e074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e078:	0800f4a4 	.word	0x0800f4a4
 800e07c:	0800f530 	.word	0x0800f530

0800e080 <__s2b>:
 800e080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e084:	460c      	mov	r4, r1
 800e086:	4615      	mov	r5, r2
 800e088:	461f      	mov	r7, r3
 800e08a:	2209      	movs	r2, #9
 800e08c:	3308      	adds	r3, #8
 800e08e:	4606      	mov	r6, r0
 800e090:	fb93 f3f2 	sdiv	r3, r3, r2
 800e094:	2100      	movs	r1, #0
 800e096:	2201      	movs	r2, #1
 800e098:	429a      	cmp	r2, r3
 800e09a:	db09      	blt.n	800e0b0 <__s2b+0x30>
 800e09c:	4630      	mov	r0, r6
 800e09e:	f7ff ff47 	bl	800df30 <_Balloc>
 800e0a2:	b940      	cbnz	r0, 800e0b6 <__s2b+0x36>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	4b19      	ldr	r3, [pc, #100]	; (800e10c <__s2b+0x8c>)
 800e0a8:	4819      	ldr	r0, [pc, #100]	; (800e110 <__s2b+0x90>)
 800e0aa:	21ce      	movs	r1, #206	; 0xce
 800e0ac:	f7fe fbb2 	bl	800c814 <__assert_func>
 800e0b0:	0052      	lsls	r2, r2, #1
 800e0b2:	3101      	adds	r1, #1
 800e0b4:	e7f0      	b.n	800e098 <__s2b+0x18>
 800e0b6:	9b08      	ldr	r3, [sp, #32]
 800e0b8:	6143      	str	r3, [r0, #20]
 800e0ba:	2d09      	cmp	r5, #9
 800e0bc:	f04f 0301 	mov.w	r3, #1
 800e0c0:	6103      	str	r3, [r0, #16]
 800e0c2:	dd16      	ble.n	800e0f2 <__s2b+0x72>
 800e0c4:	f104 0909 	add.w	r9, r4, #9
 800e0c8:	46c8      	mov	r8, r9
 800e0ca:	442c      	add	r4, r5
 800e0cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e0d0:	4601      	mov	r1, r0
 800e0d2:	3b30      	subs	r3, #48	; 0x30
 800e0d4:	220a      	movs	r2, #10
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	f7ff ff8c 	bl	800dff4 <__multadd>
 800e0dc:	45a0      	cmp	r8, r4
 800e0de:	d1f5      	bne.n	800e0cc <__s2b+0x4c>
 800e0e0:	f1a5 0408 	sub.w	r4, r5, #8
 800e0e4:	444c      	add	r4, r9
 800e0e6:	1b2d      	subs	r5, r5, r4
 800e0e8:	1963      	adds	r3, r4, r5
 800e0ea:	42bb      	cmp	r3, r7
 800e0ec:	db04      	blt.n	800e0f8 <__s2b+0x78>
 800e0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0f2:	340a      	adds	r4, #10
 800e0f4:	2509      	movs	r5, #9
 800e0f6:	e7f6      	b.n	800e0e6 <__s2b+0x66>
 800e0f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e0fc:	4601      	mov	r1, r0
 800e0fe:	3b30      	subs	r3, #48	; 0x30
 800e100:	220a      	movs	r2, #10
 800e102:	4630      	mov	r0, r6
 800e104:	f7ff ff76 	bl	800dff4 <__multadd>
 800e108:	e7ee      	b.n	800e0e8 <__s2b+0x68>
 800e10a:	bf00      	nop
 800e10c:	0800f4a4 	.word	0x0800f4a4
 800e110:	0800f530 	.word	0x0800f530

0800e114 <__hi0bits>:
 800e114:	0c03      	lsrs	r3, r0, #16
 800e116:	041b      	lsls	r3, r3, #16
 800e118:	b9d3      	cbnz	r3, 800e150 <__hi0bits+0x3c>
 800e11a:	0400      	lsls	r0, r0, #16
 800e11c:	2310      	movs	r3, #16
 800e11e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e122:	bf04      	itt	eq
 800e124:	0200      	lsleq	r0, r0, #8
 800e126:	3308      	addeq	r3, #8
 800e128:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e12c:	bf04      	itt	eq
 800e12e:	0100      	lsleq	r0, r0, #4
 800e130:	3304      	addeq	r3, #4
 800e132:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e136:	bf04      	itt	eq
 800e138:	0080      	lsleq	r0, r0, #2
 800e13a:	3302      	addeq	r3, #2
 800e13c:	2800      	cmp	r0, #0
 800e13e:	db05      	blt.n	800e14c <__hi0bits+0x38>
 800e140:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e144:	f103 0301 	add.w	r3, r3, #1
 800e148:	bf08      	it	eq
 800e14a:	2320      	moveq	r3, #32
 800e14c:	4618      	mov	r0, r3
 800e14e:	4770      	bx	lr
 800e150:	2300      	movs	r3, #0
 800e152:	e7e4      	b.n	800e11e <__hi0bits+0xa>

0800e154 <__lo0bits>:
 800e154:	6803      	ldr	r3, [r0, #0]
 800e156:	f013 0207 	ands.w	r2, r3, #7
 800e15a:	4601      	mov	r1, r0
 800e15c:	d00b      	beq.n	800e176 <__lo0bits+0x22>
 800e15e:	07da      	lsls	r2, r3, #31
 800e160:	d423      	bmi.n	800e1aa <__lo0bits+0x56>
 800e162:	0798      	lsls	r0, r3, #30
 800e164:	bf49      	itett	mi
 800e166:	085b      	lsrmi	r3, r3, #1
 800e168:	089b      	lsrpl	r3, r3, #2
 800e16a:	2001      	movmi	r0, #1
 800e16c:	600b      	strmi	r3, [r1, #0]
 800e16e:	bf5c      	itt	pl
 800e170:	600b      	strpl	r3, [r1, #0]
 800e172:	2002      	movpl	r0, #2
 800e174:	4770      	bx	lr
 800e176:	b298      	uxth	r0, r3
 800e178:	b9a8      	cbnz	r0, 800e1a6 <__lo0bits+0x52>
 800e17a:	0c1b      	lsrs	r3, r3, #16
 800e17c:	2010      	movs	r0, #16
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	b90a      	cbnz	r2, 800e186 <__lo0bits+0x32>
 800e182:	3008      	adds	r0, #8
 800e184:	0a1b      	lsrs	r3, r3, #8
 800e186:	071a      	lsls	r2, r3, #28
 800e188:	bf04      	itt	eq
 800e18a:	091b      	lsreq	r3, r3, #4
 800e18c:	3004      	addeq	r0, #4
 800e18e:	079a      	lsls	r2, r3, #30
 800e190:	bf04      	itt	eq
 800e192:	089b      	lsreq	r3, r3, #2
 800e194:	3002      	addeq	r0, #2
 800e196:	07da      	lsls	r2, r3, #31
 800e198:	d403      	bmi.n	800e1a2 <__lo0bits+0x4e>
 800e19a:	085b      	lsrs	r3, r3, #1
 800e19c:	f100 0001 	add.w	r0, r0, #1
 800e1a0:	d005      	beq.n	800e1ae <__lo0bits+0x5a>
 800e1a2:	600b      	str	r3, [r1, #0]
 800e1a4:	4770      	bx	lr
 800e1a6:	4610      	mov	r0, r2
 800e1a8:	e7e9      	b.n	800e17e <__lo0bits+0x2a>
 800e1aa:	2000      	movs	r0, #0
 800e1ac:	4770      	bx	lr
 800e1ae:	2020      	movs	r0, #32
 800e1b0:	4770      	bx	lr
	...

0800e1b4 <__i2b>:
 800e1b4:	b510      	push	{r4, lr}
 800e1b6:	460c      	mov	r4, r1
 800e1b8:	2101      	movs	r1, #1
 800e1ba:	f7ff feb9 	bl	800df30 <_Balloc>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	b928      	cbnz	r0, 800e1ce <__i2b+0x1a>
 800e1c2:	4b05      	ldr	r3, [pc, #20]	; (800e1d8 <__i2b+0x24>)
 800e1c4:	4805      	ldr	r0, [pc, #20]	; (800e1dc <__i2b+0x28>)
 800e1c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e1ca:	f7fe fb23 	bl	800c814 <__assert_func>
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	6144      	str	r4, [r0, #20]
 800e1d2:	6103      	str	r3, [r0, #16]
 800e1d4:	bd10      	pop	{r4, pc}
 800e1d6:	bf00      	nop
 800e1d8:	0800f4a4 	.word	0x0800f4a4
 800e1dc:	0800f530 	.word	0x0800f530

0800e1e0 <__multiply>:
 800e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e4:	4691      	mov	r9, r2
 800e1e6:	690a      	ldr	r2, [r1, #16]
 800e1e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	bfb8      	it	lt
 800e1f0:	460b      	movlt	r3, r1
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	bfbc      	itt	lt
 800e1f6:	464c      	movlt	r4, r9
 800e1f8:	4699      	movlt	r9, r3
 800e1fa:	6927      	ldr	r7, [r4, #16]
 800e1fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e200:	68a3      	ldr	r3, [r4, #8]
 800e202:	6861      	ldr	r1, [r4, #4]
 800e204:	eb07 060a 	add.w	r6, r7, sl
 800e208:	42b3      	cmp	r3, r6
 800e20a:	b085      	sub	sp, #20
 800e20c:	bfb8      	it	lt
 800e20e:	3101      	addlt	r1, #1
 800e210:	f7ff fe8e 	bl	800df30 <_Balloc>
 800e214:	b930      	cbnz	r0, 800e224 <__multiply+0x44>
 800e216:	4602      	mov	r2, r0
 800e218:	4b44      	ldr	r3, [pc, #272]	; (800e32c <__multiply+0x14c>)
 800e21a:	4845      	ldr	r0, [pc, #276]	; (800e330 <__multiply+0x150>)
 800e21c:	f240 115d 	movw	r1, #349	; 0x15d
 800e220:	f7fe faf8 	bl	800c814 <__assert_func>
 800e224:	f100 0514 	add.w	r5, r0, #20
 800e228:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e22c:	462b      	mov	r3, r5
 800e22e:	2200      	movs	r2, #0
 800e230:	4543      	cmp	r3, r8
 800e232:	d321      	bcc.n	800e278 <__multiply+0x98>
 800e234:	f104 0314 	add.w	r3, r4, #20
 800e238:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e23c:	f109 0314 	add.w	r3, r9, #20
 800e240:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e244:	9202      	str	r2, [sp, #8]
 800e246:	1b3a      	subs	r2, r7, r4
 800e248:	3a15      	subs	r2, #21
 800e24a:	f022 0203 	bic.w	r2, r2, #3
 800e24e:	3204      	adds	r2, #4
 800e250:	f104 0115 	add.w	r1, r4, #21
 800e254:	428f      	cmp	r7, r1
 800e256:	bf38      	it	cc
 800e258:	2204      	movcc	r2, #4
 800e25a:	9201      	str	r2, [sp, #4]
 800e25c:	9a02      	ldr	r2, [sp, #8]
 800e25e:	9303      	str	r3, [sp, #12]
 800e260:	429a      	cmp	r2, r3
 800e262:	d80c      	bhi.n	800e27e <__multiply+0x9e>
 800e264:	2e00      	cmp	r6, #0
 800e266:	dd03      	ble.n	800e270 <__multiply+0x90>
 800e268:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d05a      	beq.n	800e326 <__multiply+0x146>
 800e270:	6106      	str	r6, [r0, #16]
 800e272:	b005      	add	sp, #20
 800e274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e278:	f843 2b04 	str.w	r2, [r3], #4
 800e27c:	e7d8      	b.n	800e230 <__multiply+0x50>
 800e27e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e282:	f1ba 0f00 	cmp.w	sl, #0
 800e286:	d024      	beq.n	800e2d2 <__multiply+0xf2>
 800e288:	f104 0e14 	add.w	lr, r4, #20
 800e28c:	46a9      	mov	r9, r5
 800e28e:	f04f 0c00 	mov.w	ip, #0
 800e292:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e296:	f8d9 1000 	ldr.w	r1, [r9]
 800e29a:	fa1f fb82 	uxth.w	fp, r2
 800e29e:	b289      	uxth	r1, r1
 800e2a0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e2a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e2a8:	f8d9 2000 	ldr.w	r2, [r9]
 800e2ac:	4461      	add	r1, ip
 800e2ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e2b2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e2b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e2ba:	b289      	uxth	r1, r1
 800e2bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e2c0:	4577      	cmp	r7, lr
 800e2c2:	f849 1b04 	str.w	r1, [r9], #4
 800e2c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e2ca:	d8e2      	bhi.n	800e292 <__multiply+0xb2>
 800e2cc:	9a01      	ldr	r2, [sp, #4]
 800e2ce:	f845 c002 	str.w	ip, [r5, r2]
 800e2d2:	9a03      	ldr	r2, [sp, #12]
 800e2d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e2d8:	3304      	adds	r3, #4
 800e2da:	f1b9 0f00 	cmp.w	r9, #0
 800e2de:	d020      	beq.n	800e322 <__multiply+0x142>
 800e2e0:	6829      	ldr	r1, [r5, #0]
 800e2e2:	f104 0c14 	add.w	ip, r4, #20
 800e2e6:	46ae      	mov	lr, r5
 800e2e8:	f04f 0a00 	mov.w	sl, #0
 800e2ec:	f8bc b000 	ldrh.w	fp, [ip]
 800e2f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e2f4:	fb09 220b 	mla	r2, r9, fp, r2
 800e2f8:	4492      	add	sl, r2
 800e2fa:	b289      	uxth	r1, r1
 800e2fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e300:	f84e 1b04 	str.w	r1, [lr], #4
 800e304:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e308:	f8be 1000 	ldrh.w	r1, [lr]
 800e30c:	0c12      	lsrs	r2, r2, #16
 800e30e:	fb09 1102 	mla	r1, r9, r2, r1
 800e312:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e316:	4567      	cmp	r7, ip
 800e318:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e31c:	d8e6      	bhi.n	800e2ec <__multiply+0x10c>
 800e31e:	9a01      	ldr	r2, [sp, #4]
 800e320:	50a9      	str	r1, [r5, r2]
 800e322:	3504      	adds	r5, #4
 800e324:	e79a      	b.n	800e25c <__multiply+0x7c>
 800e326:	3e01      	subs	r6, #1
 800e328:	e79c      	b.n	800e264 <__multiply+0x84>
 800e32a:	bf00      	nop
 800e32c:	0800f4a4 	.word	0x0800f4a4
 800e330:	0800f530 	.word	0x0800f530

0800e334 <__pow5mult>:
 800e334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e338:	4615      	mov	r5, r2
 800e33a:	f012 0203 	ands.w	r2, r2, #3
 800e33e:	4606      	mov	r6, r0
 800e340:	460f      	mov	r7, r1
 800e342:	d007      	beq.n	800e354 <__pow5mult+0x20>
 800e344:	4c25      	ldr	r4, [pc, #148]	; (800e3dc <__pow5mult+0xa8>)
 800e346:	3a01      	subs	r2, #1
 800e348:	2300      	movs	r3, #0
 800e34a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e34e:	f7ff fe51 	bl	800dff4 <__multadd>
 800e352:	4607      	mov	r7, r0
 800e354:	10ad      	asrs	r5, r5, #2
 800e356:	d03d      	beq.n	800e3d4 <__pow5mult+0xa0>
 800e358:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e35a:	b97c      	cbnz	r4, 800e37c <__pow5mult+0x48>
 800e35c:	2010      	movs	r0, #16
 800e35e:	f7ff fdc1 	bl	800dee4 <malloc>
 800e362:	4602      	mov	r2, r0
 800e364:	6270      	str	r0, [r6, #36]	; 0x24
 800e366:	b928      	cbnz	r0, 800e374 <__pow5mult+0x40>
 800e368:	4b1d      	ldr	r3, [pc, #116]	; (800e3e0 <__pow5mult+0xac>)
 800e36a:	481e      	ldr	r0, [pc, #120]	; (800e3e4 <__pow5mult+0xb0>)
 800e36c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e370:	f7fe fa50 	bl	800c814 <__assert_func>
 800e374:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e378:	6004      	str	r4, [r0, #0]
 800e37a:	60c4      	str	r4, [r0, #12]
 800e37c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e380:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e384:	b94c      	cbnz	r4, 800e39a <__pow5mult+0x66>
 800e386:	f240 2171 	movw	r1, #625	; 0x271
 800e38a:	4630      	mov	r0, r6
 800e38c:	f7ff ff12 	bl	800e1b4 <__i2b>
 800e390:	2300      	movs	r3, #0
 800e392:	f8c8 0008 	str.w	r0, [r8, #8]
 800e396:	4604      	mov	r4, r0
 800e398:	6003      	str	r3, [r0, #0]
 800e39a:	f04f 0900 	mov.w	r9, #0
 800e39e:	07eb      	lsls	r3, r5, #31
 800e3a0:	d50a      	bpl.n	800e3b8 <__pow5mult+0x84>
 800e3a2:	4639      	mov	r1, r7
 800e3a4:	4622      	mov	r2, r4
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	f7ff ff1a 	bl	800e1e0 <__multiply>
 800e3ac:	4639      	mov	r1, r7
 800e3ae:	4680      	mov	r8, r0
 800e3b0:	4630      	mov	r0, r6
 800e3b2:	f7ff fdfd 	bl	800dfb0 <_Bfree>
 800e3b6:	4647      	mov	r7, r8
 800e3b8:	106d      	asrs	r5, r5, #1
 800e3ba:	d00b      	beq.n	800e3d4 <__pow5mult+0xa0>
 800e3bc:	6820      	ldr	r0, [r4, #0]
 800e3be:	b938      	cbnz	r0, 800e3d0 <__pow5mult+0x9c>
 800e3c0:	4622      	mov	r2, r4
 800e3c2:	4621      	mov	r1, r4
 800e3c4:	4630      	mov	r0, r6
 800e3c6:	f7ff ff0b 	bl	800e1e0 <__multiply>
 800e3ca:	6020      	str	r0, [r4, #0]
 800e3cc:	f8c0 9000 	str.w	r9, [r0]
 800e3d0:	4604      	mov	r4, r0
 800e3d2:	e7e4      	b.n	800e39e <__pow5mult+0x6a>
 800e3d4:	4638      	mov	r0, r7
 800e3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3da:	bf00      	nop
 800e3dc:	0800f680 	.word	0x0800f680
 800e3e0:	0800f432 	.word	0x0800f432
 800e3e4:	0800f530 	.word	0x0800f530

0800e3e8 <__lshift>:
 800e3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3ec:	460c      	mov	r4, r1
 800e3ee:	6849      	ldr	r1, [r1, #4]
 800e3f0:	6923      	ldr	r3, [r4, #16]
 800e3f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3f6:	68a3      	ldr	r3, [r4, #8]
 800e3f8:	4607      	mov	r7, r0
 800e3fa:	4691      	mov	r9, r2
 800e3fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e400:	f108 0601 	add.w	r6, r8, #1
 800e404:	42b3      	cmp	r3, r6
 800e406:	db0b      	blt.n	800e420 <__lshift+0x38>
 800e408:	4638      	mov	r0, r7
 800e40a:	f7ff fd91 	bl	800df30 <_Balloc>
 800e40e:	4605      	mov	r5, r0
 800e410:	b948      	cbnz	r0, 800e426 <__lshift+0x3e>
 800e412:	4602      	mov	r2, r0
 800e414:	4b2a      	ldr	r3, [pc, #168]	; (800e4c0 <__lshift+0xd8>)
 800e416:	482b      	ldr	r0, [pc, #172]	; (800e4c4 <__lshift+0xdc>)
 800e418:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e41c:	f7fe f9fa 	bl	800c814 <__assert_func>
 800e420:	3101      	adds	r1, #1
 800e422:	005b      	lsls	r3, r3, #1
 800e424:	e7ee      	b.n	800e404 <__lshift+0x1c>
 800e426:	2300      	movs	r3, #0
 800e428:	f100 0114 	add.w	r1, r0, #20
 800e42c:	f100 0210 	add.w	r2, r0, #16
 800e430:	4618      	mov	r0, r3
 800e432:	4553      	cmp	r3, sl
 800e434:	db37      	blt.n	800e4a6 <__lshift+0xbe>
 800e436:	6920      	ldr	r0, [r4, #16]
 800e438:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e43c:	f104 0314 	add.w	r3, r4, #20
 800e440:	f019 091f 	ands.w	r9, r9, #31
 800e444:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e448:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e44c:	d02f      	beq.n	800e4ae <__lshift+0xc6>
 800e44e:	f1c9 0e20 	rsb	lr, r9, #32
 800e452:	468a      	mov	sl, r1
 800e454:	f04f 0c00 	mov.w	ip, #0
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	fa02 f209 	lsl.w	r2, r2, r9
 800e45e:	ea42 020c 	orr.w	r2, r2, ip
 800e462:	f84a 2b04 	str.w	r2, [sl], #4
 800e466:	f853 2b04 	ldr.w	r2, [r3], #4
 800e46a:	4298      	cmp	r0, r3
 800e46c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e470:	d8f2      	bhi.n	800e458 <__lshift+0x70>
 800e472:	1b03      	subs	r3, r0, r4
 800e474:	3b15      	subs	r3, #21
 800e476:	f023 0303 	bic.w	r3, r3, #3
 800e47a:	3304      	adds	r3, #4
 800e47c:	f104 0215 	add.w	r2, r4, #21
 800e480:	4290      	cmp	r0, r2
 800e482:	bf38      	it	cc
 800e484:	2304      	movcc	r3, #4
 800e486:	f841 c003 	str.w	ip, [r1, r3]
 800e48a:	f1bc 0f00 	cmp.w	ip, #0
 800e48e:	d001      	beq.n	800e494 <__lshift+0xac>
 800e490:	f108 0602 	add.w	r6, r8, #2
 800e494:	3e01      	subs	r6, #1
 800e496:	4638      	mov	r0, r7
 800e498:	612e      	str	r6, [r5, #16]
 800e49a:	4621      	mov	r1, r4
 800e49c:	f7ff fd88 	bl	800dfb0 <_Bfree>
 800e4a0:	4628      	mov	r0, r5
 800e4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	e7c1      	b.n	800e432 <__lshift+0x4a>
 800e4ae:	3904      	subs	r1, #4
 800e4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4b8:	4298      	cmp	r0, r3
 800e4ba:	d8f9      	bhi.n	800e4b0 <__lshift+0xc8>
 800e4bc:	e7ea      	b.n	800e494 <__lshift+0xac>
 800e4be:	bf00      	nop
 800e4c0:	0800f4a4 	.word	0x0800f4a4
 800e4c4:	0800f530 	.word	0x0800f530

0800e4c8 <__mcmp>:
 800e4c8:	b530      	push	{r4, r5, lr}
 800e4ca:	6902      	ldr	r2, [r0, #16]
 800e4cc:	690c      	ldr	r4, [r1, #16]
 800e4ce:	1b12      	subs	r2, r2, r4
 800e4d0:	d10e      	bne.n	800e4f0 <__mcmp+0x28>
 800e4d2:	f100 0314 	add.w	r3, r0, #20
 800e4d6:	3114      	adds	r1, #20
 800e4d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e4dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e4e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e4e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e4e8:	42a5      	cmp	r5, r4
 800e4ea:	d003      	beq.n	800e4f4 <__mcmp+0x2c>
 800e4ec:	d305      	bcc.n	800e4fa <__mcmp+0x32>
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	4610      	mov	r0, r2
 800e4f2:	bd30      	pop	{r4, r5, pc}
 800e4f4:	4283      	cmp	r3, r0
 800e4f6:	d3f3      	bcc.n	800e4e0 <__mcmp+0x18>
 800e4f8:	e7fa      	b.n	800e4f0 <__mcmp+0x28>
 800e4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e4fe:	e7f7      	b.n	800e4f0 <__mcmp+0x28>

0800e500 <__mdiff>:
 800e500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e504:	460c      	mov	r4, r1
 800e506:	4606      	mov	r6, r0
 800e508:	4611      	mov	r1, r2
 800e50a:	4620      	mov	r0, r4
 800e50c:	4690      	mov	r8, r2
 800e50e:	f7ff ffdb 	bl	800e4c8 <__mcmp>
 800e512:	1e05      	subs	r5, r0, #0
 800e514:	d110      	bne.n	800e538 <__mdiff+0x38>
 800e516:	4629      	mov	r1, r5
 800e518:	4630      	mov	r0, r6
 800e51a:	f7ff fd09 	bl	800df30 <_Balloc>
 800e51e:	b930      	cbnz	r0, 800e52e <__mdiff+0x2e>
 800e520:	4b3a      	ldr	r3, [pc, #232]	; (800e60c <__mdiff+0x10c>)
 800e522:	4602      	mov	r2, r0
 800e524:	f240 2132 	movw	r1, #562	; 0x232
 800e528:	4839      	ldr	r0, [pc, #228]	; (800e610 <__mdiff+0x110>)
 800e52a:	f7fe f973 	bl	800c814 <__assert_func>
 800e52e:	2301      	movs	r3, #1
 800e530:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e534:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e538:	bfa4      	itt	ge
 800e53a:	4643      	movge	r3, r8
 800e53c:	46a0      	movge	r8, r4
 800e53e:	4630      	mov	r0, r6
 800e540:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e544:	bfa6      	itte	ge
 800e546:	461c      	movge	r4, r3
 800e548:	2500      	movge	r5, #0
 800e54a:	2501      	movlt	r5, #1
 800e54c:	f7ff fcf0 	bl	800df30 <_Balloc>
 800e550:	b920      	cbnz	r0, 800e55c <__mdiff+0x5c>
 800e552:	4b2e      	ldr	r3, [pc, #184]	; (800e60c <__mdiff+0x10c>)
 800e554:	4602      	mov	r2, r0
 800e556:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e55a:	e7e5      	b.n	800e528 <__mdiff+0x28>
 800e55c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e560:	6926      	ldr	r6, [r4, #16]
 800e562:	60c5      	str	r5, [r0, #12]
 800e564:	f104 0914 	add.w	r9, r4, #20
 800e568:	f108 0514 	add.w	r5, r8, #20
 800e56c:	f100 0e14 	add.w	lr, r0, #20
 800e570:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e574:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e578:	f108 0210 	add.w	r2, r8, #16
 800e57c:	46f2      	mov	sl, lr
 800e57e:	2100      	movs	r1, #0
 800e580:	f859 3b04 	ldr.w	r3, [r9], #4
 800e584:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e588:	fa1f f883 	uxth.w	r8, r3
 800e58c:	fa11 f18b 	uxtah	r1, r1, fp
 800e590:	0c1b      	lsrs	r3, r3, #16
 800e592:	eba1 0808 	sub.w	r8, r1, r8
 800e596:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e59a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e59e:	fa1f f888 	uxth.w	r8, r8
 800e5a2:	1419      	asrs	r1, r3, #16
 800e5a4:	454e      	cmp	r6, r9
 800e5a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e5aa:	f84a 3b04 	str.w	r3, [sl], #4
 800e5ae:	d8e7      	bhi.n	800e580 <__mdiff+0x80>
 800e5b0:	1b33      	subs	r3, r6, r4
 800e5b2:	3b15      	subs	r3, #21
 800e5b4:	f023 0303 	bic.w	r3, r3, #3
 800e5b8:	3304      	adds	r3, #4
 800e5ba:	3415      	adds	r4, #21
 800e5bc:	42a6      	cmp	r6, r4
 800e5be:	bf38      	it	cc
 800e5c0:	2304      	movcc	r3, #4
 800e5c2:	441d      	add	r5, r3
 800e5c4:	4473      	add	r3, lr
 800e5c6:	469e      	mov	lr, r3
 800e5c8:	462e      	mov	r6, r5
 800e5ca:	4566      	cmp	r6, ip
 800e5cc:	d30e      	bcc.n	800e5ec <__mdiff+0xec>
 800e5ce:	f10c 0203 	add.w	r2, ip, #3
 800e5d2:	1b52      	subs	r2, r2, r5
 800e5d4:	f022 0203 	bic.w	r2, r2, #3
 800e5d8:	3d03      	subs	r5, #3
 800e5da:	45ac      	cmp	ip, r5
 800e5dc:	bf38      	it	cc
 800e5de:	2200      	movcc	r2, #0
 800e5e0:	441a      	add	r2, r3
 800e5e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e5e6:	b17b      	cbz	r3, 800e608 <__mdiff+0x108>
 800e5e8:	6107      	str	r7, [r0, #16]
 800e5ea:	e7a3      	b.n	800e534 <__mdiff+0x34>
 800e5ec:	f856 8b04 	ldr.w	r8, [r6], #4
 800e5f0:	fa11 f288 	uxtah	r2, r1, r8
 800e5f4:	1414      	asrs	r4, r2, #16
 800e5f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e5fa:	b292      	uxth	r2, r2
 800e5fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e600:	f84e 2b04 	str.w	r2, [lr], #4
 800e604:	1421      	asrs	r1, r4, #16
 800e606:	e7e0      	b.n	800e5ca <__mdiff+0xca>
 800e608:	3f01      	subs	r7, #1
 800e60a:	e7ea      	b.n	800e5e2 <__mdiff+0xe2>
 800e60c:	0800f4a4 	.word	0x0800f4a4
 800e610:	0800f530 	.word	0x0800f530

0800e614 <__ulp>:
 800e614:	b082      	sub	sp, #8
 800e616:	ed8d 0b00 	vstr	d0, [sp]
 800e61a:	9b01      	ldr	r3, [sp, #4]
 800e61c:	4912      	ldr	r1, [pc, #72]	; (800e668 <__ulp+0x54>)
 800e61e:	4019      	ands	r1, r3
 800e620:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e624:	2900      	cmp	r1, #0
 800e626:	dd05      	ble.n	800e634 <__ulp+0x20>
 800e628:	2200      	movs	r2, #0
 800e62a:	460b      	mov	r3, r1
 800e62c:	ec43 2b10 	vmov	d0, r2, r3
 800e630:	b002      	add	sp, #8
 800e632:	4770      	bx	lr
 800e634:	4249      	negs	r1, r1
 800e636:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e63a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e63e:	f04f 0200 	mov.w	r2, #0
 800e642:	f04f 0300 	mov.w	r3, #0
 800e646:	da04      	bge.n	800e652 <__ulp+0x3e>
 800e648:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e64c:	fa41 f300 	asr.w	r3, r1, r0
 800e650:	e7ec      	b.n	800e62c <__ulp+0x18>
 800e652:	f1a0 0114 	sub.w	r1, r0, #20
 800e656:	291e      	cmp	r1, #30
 800e658:	bfda      	itte	le
 800e65a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e65e:	fa20 f101 	lsrle.w	r1, r0, r1
 800e662:	2101      	movgt	r1, #1
 800e664:	460a      	mov	r2, r1
 800e666:	e7e1      	b.n	800e62c <__ulp+0x18>
 800e668:	7ff00000 	.word	0x7ff00000

0800e66c <__b2d>:
 800e66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e66e:	6905      	ldr	r5, [r0, #16]
 800e670:	f100 0714 	add.w	r7, r0, #20
 800e674:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e678:	1f2e      	subs	r6, r5, #4
 800e67a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e67e:	4620      	mov	r0, r4
 800e680:	f7ff fd48 	bl	800e114 <__hi0bits>
 800e684:	f1c0 0320 	rsb	r3, r0, #32
 800e688:	280a      	cmp	r0, #10
 800e68a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e708 <__b2d+0x9c>
 800e68e:	600b      	str	r3, [r1, #0]
 800e690:	dc14      	bgt.n	800e6bc <__b2d+0x50>
 800e692:	f1c0 0e0b 	rsb	lr, r0, #11
 800e696:	fa24 f10e 	lsr.w	r1, r4, lr
 800e69a:	42b7      	cmp	r7, r6
 800e69c:	ea41 030c 	orr.w	r3, r1, ip
 800e6a0:	bf34      	ite	cc
 800e6a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e6a6:	2100      	movcs	r1, #0
 800e6a8:	3015      	adds	r0, #21
 800e6aa:	fa04 f000 	lsl.w	r0, r4, r0
 800e6ae:	fa21 f10e 	lsr.w	r1, r1, lr
 800e6b2:	ea40 0201 	orr.w	r2, r0, r1
 800e6b6:	ec43 2b10 	vmov	d0, r2, r3
 800e6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6bc:	42b7      	cmp	r7, r6
 800e6be:	bf3a      	itte	cc
 800e6c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e6c4:	f1a5 0608 	subcc.w	r6, r5, #8
 800e6c8:	2100      	movcs	r1, #0
 800e6ca:	380b      	subs	r0, #11
 800e6cc:	d017      	beq.n	800e6fe <__b2d+0x92>
 800e6ce:	f1c0 0c20 	rsb	ip, r0, #32
 800e6d2:	fa04 f500 	lsl.w	r5, r4, r0
 800e6d6:	42be      	cmp	r6, r7
 800e6d8:	fa21 f40c 	lsr.w	r4, r1, ip
 800e6dc:	ea45 0504 	orr.w	r5, r5, r4
 800e6e0:	bf8c      	ite	hi
 800e6e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e6e6:	2400      	movls	r4, #0
 800e6e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e6ec:	fa01 f000 	lsl.w	r0, r1, r0
 800e6f0:	fa24 f40c 	lsr.w	r4, r4, ip
 800e6f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e6f8:	ea40 0204 	orr.w	r2, r0, r4
 800e6fc:	e7db      	b.n	800e6b6 <__b2d+0x4a>
 800e6fe:	ea44 030c 	orr.w	r3, r4, ip
 800e702:	460a      	mov	r2, r1
 800e704:	e7d7      	b.n	800e6b6 <__b2d+0x4a>
 800e706:	bf00      	nop
 800e708:	3ff00000 	.word	0x3ff00000

0800e70c <__d2b>:
 800e70c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e710:	4689      	mov	r9, r1
 800e712:	2101      	movs	r1, #1
 800e714:	ec57 6b10 	vmov	r6, r7, d0
 800e718:	4690      	mov	r8, r2
 800e71a:	f7ff fc09 	bl	800df30 <_Balloc>
 800e71e:	4604      	mov	r4, r0
 800e720:	b930      	cbnz	r0, 800e730 <__d2b+0x24>
 800e722:	4602      	mov	r2, r0
 800e724:	4b25      	ldr	r3, [pc, #148]	; (800e7bc <__d2b+0xb0>)
 800e726:	4826      	ldr	r0, [pc, #152]	; (800e7c0 <__d2b+0xb4>)
 800e728:	f240 310a 	movw	r1, #778	; 0x30a
 800e72c:	f7fe f872 	bl	800c814 <__assert_func>
 800e730:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e734:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e738:	bb35      	cbnz	r5, 800e788 <__d2b+0x7c>
 800e73a:	2e00      	cmp	r6, #0
 800e73c:	9301      	str	r3, [sp, #4]
 800e73e:	d028      	beq.n	800e792 <__d2b+0x86>
 800e740:	4668      	mov	r0, sp
 800e742:	9600      	str	r6, [sp, #0]
 800e744:	f7ff fd06 	bl	800e154 <__lo0bits>
 800e748:	9900      	ldr	r1, [sp, #0]
 800e74a:	b300      	cbz	r0, 800e78e <__d2b+0x82>
 800e74c:	9a01      	ldr	r2, [sp, #4]
 800e74e:	f1c0 0320 	rsb	r3, r0, #32
 800e752:	fa02 f303 	lsl.w	r3, r2, r3
 800e756:	430b      	orrs	r3, r1
 800e758:	40c2      	lsrs	r2, r0
 800e75a:	6163      	str	r3, [r4, #20]
 800e75c:	9201      	str	r2, [sp, #4]
 800e75e:	9b01      	ldr	r3, [sp, #4]
 800e760:	61a3      	str	r3, [r4, #24]
 800e762:	2b00      	cmp	r3, #0
 800e764:	bf14      	ite	ne
 800e766:	2202      	movne	r2, #2
 800e768:	2201      	moveq	r2, #1
 800e76a:	6122      	str	r2, [r4, #16]
 800e76c:	b1d5      	cbz	r5, 800e7a4 <__d2b+0x98>
 800e76e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e772:	4405      	add	r5, r0
 800e774:	f8c9 5000 	str.w	r5, [r9]
 800e778:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e77c:	f8c8 0000 	str.w	r0, [r8]
 800e780:	4620      	mov	r0, r4
 800e782:	b003      	add	sp, #12
 800e784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e78c:	e7d5      	b.n	800e73a <__d2b+0x2e>
 800e78e:	6161      	str	r1, [r4, #20]
 800e790:	e7e5      	b.n	800e75e <__d2b+0x52>
 800e792:	a801      	add	r0, sp, #4
 800e794:	f7ff fcde 	bl	800e154 <__lo0bits>
 800e798:	9b01      	ldr	r3, [sp, #4]
 800e79a:	6163      	str	r3, [r4, #20]
 800e79c:	2201      	movs	r2, #1
 800e79e:	6122      	str	r2, [r4, #16]
 800e7a0:	3020      	adds	r0, #32
 800e7a2:	e7e3      	b.n	800e76c <__d2b+0x60>
 800e7a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e7ac:	f8c9 0000 	str.w	r0, [r9]
 800e7b0:	6918      	ldr	r0, [r3, #16]
 800e7b2:	f7ff fcaf 	bl	800e114 <__hi0bits>
 800e7b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7ba:	e7df      	b.n	800e77c <__d2b+0x70>
 800e7bc:	0800f4a4 	.word	0x0800f4a4
 800e7c0:	0800f530 	.word	0x0800f530

0800e7c4 <__ratio>:
 800e7c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c8:	4688      	mov	r8, r1
 800e7ca:	4669      	mov	r1, sp
 800e7cc:	4681      	mov	r9, r0
 800e7ce:	f7ff ff4d 	bl	800e66c <__b2d>
 800e7d2:	a901      	add	r1, sp, #4
 800e7d4:	4640      	mov	r0, r8
 800e7d6:	ec55 4b10 	vmov	r4, r5, d0
 800e7da:	f7ff ff47 	bl	800e66c <__b2d>
 800e7de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e7e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e7e6:	eba3 0c02 	sub.w	ip, r3, r2
 800e7ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e7ee:	1a9b      	subs	r3, r3, r2
 800e7f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e7f4:	ec51 0b10 	vmov	r0, r1, d0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	bfd6      	itet	le
 800e7fc:	460a      	movle	r2, r1
 800e7fe:	462a      	movgt	r2, r5
 800e800:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e804:	468b      	mov	fp, r1
 800e806:	462f      	mov	r7, r5
 800e808:	bfd4      	ite	le
 800e80a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e80e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e812:	4620      	mov	r0, r4
 800e814:	ee10 2a10 	vmov	r2, s0
 800e818:	465b      	mov	r3, fp
 800e81a:	4639      	mov	r1, r7
 800e81c:	f7f2 f816 	bl	800084c <__aeabi_ddiv>
 800e820:	ec41 0b10 	vmov	d0, r0, r1
 800e824:	b003      	add	sp, #12
 800e826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e82a <__copybits>:
 800e82a:	3901      	subs	r1, #1
 800e82c:	b570      	push	{r4, r5, r6, lr}
 800e82e:	1149      	asrs	r1, r1, #5
 800e830:	6914      	ldr	r4, [r2, #16]
 800e832:	3101      	adds	r1, #1
 800e834:	f102 0314 	add.w	r3, r2, #20
 800e838:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e83c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e840:	1f05      	subs	r5, r0, #4
 800e842:	42a3      	cmp	r3, r4
 800e844:	d30c      	bcc.n	800e860 <__copybits+0x36>
 800e846:	1aa3      	subs	r3, r4, r2
 800e848:	3b11      	subs	r3, #17
 800e84a:	f023 0303 	bic.w	r3, r3, #3
 800e84e:	3211      	adds	r2, #17
 800e850:	42a2      	cmp	r2, r4
 800e852:	bf88      	it	hi
 800e854:	2300      	movhi	r3, #0
 800e856:	4418      	add	r0, r3
 800e858:	2300      	movs	r3, #0
 800e85a:	4288      	cmp	r0, r1
 800e85c:	d305      	bcc.n	800e86a <__copybits+0x40>
 800e85e:	bd70      	pop	{r4, r5, r6, pc}
 800e860:	f853 6b04 	ldr.w	r6, [r3], #4
 800e864:	f845 6f04 	str.w	r6, [r5, #4]!
 800e868:	e7eb      	b.n	800e842 <__copybits+0x18>
 800e86a:	f840 3b04 	str.w	r3, [r0], #4
 800e86e:	e7f4      	b.n	800e85a <__copybits+0x30>

0800e870 <__any_on>:
 800e870:	f100 0214 	add.w	r2, r0, #20
 800e874:	6900      	ldr	r0, [r0, #16]
 800e876:	114b      	asrs	r3, r1, #5
 800e878:	4298      	cmp	r0, r3
 800e87a:	b510      	push	{r4, lr}
 800e87c:	db11      	blt.n	800e8a2 <__any_on+0x32>
 800e87e:	dd0a      	ble.n	800e896 <__any_on+0x26>
 800e880:	f011 011f 	ands.w	r1, r1, #31
 800e884:	d007      	beq.n	800e896 <__any_on+0x26>
 800e886:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e88a:	fa24 f001 	lsr.w	r0, r4, r1
 800e88e:	fa00 f101 	lsl.w	r1, r0, r1
 800e892:	428c      	cmp	r4, r1
 800e894:	d10b      	bne.n	800e8ae <__any_on+0x3e>
 800e896:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d803      	bhi.n	800e8a6 <__any_on+0x36>
 800e89e:	2000      	movs	r0, #0
 800e8a0:	bd10      	pop	{r4, pc}
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	e7f7      	b.n	800e896 <__any_on+0x26>
 800e8a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e8aa:	2900      	cmp	r1, #0
 800e8ac:	d0f5      	beq.n	800e89a <__any_on+0x2a>
 800e8ae:	2001      	movs	r0, #1
 800e8b0:	e7f6      	b.n	800e8a0 <__any_on+0x30>

0800e8b2 <_calloc_r>:
 800e8b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8b4:	fba1 2402 	umull	r2, r4, r1, r2
 800e8b8:	b94c      	cbnz	r4, 800e8ce <_calloc_r+0x1c>
 800e8ba:	4611      	mov	r1, r2
 800e8bc:	9201      	str	r2, [sp, #4]
 800e8be:	f7fc f857 	bl	800a970 <_malloc_r>
 800e8c2:	9a01      	ldr	r2, [sp, #4]
 800e8c4:	4605      	mov	r5, r0
 800e8c6:	b930      	cbnz	r0, 800e8d6 <_calloc_r+0x24>
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	b003      	add	sp, #12
 800e8cc:	bd30      	pop	{r4, r5, pc}
 800e8ce:	220c      	movs	r2, #12
 800e8d0:	6002      	str	r2, [r0, #0]
 800e8d2:	2500      	movs	r5, #0
 800e8d4:	e7f8      	b.n	800e8c8 <_calloc_r+0x16>
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	f7fc f821 	bl	800a91e <memset>
 800e8dc:	e7f4      	b.n	800e8c8 <_calloc_r+0x16>
	...

0800e8e0 <_free_r>:
 800e8e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8e2:	2900      	cmp	r1, #0
 800e8e4:	d044      	beq.n	800e970 <_free_r+0x90>
 800e8e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8ea:	9001      	str	r0, [sp, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	f1a1 0404 	sub.w	r4, r1, #4
 800e8f2:	bfb8      	it	lt
 800e8f4:	18e4      	addlt	r4, r4, r3
 800e8f6:	f7ff fb0f 	bl	800df18 <__malloc_lock>
 800e8fa:	4a1e      	ldr	r2, [pc, #120]	; (800e974 <_free_r+0x94>)
 800e8fc:	9801      	ldr	r0, [sp, #4]
 800e8fe:	6813      	ldr	r3, [r2, #0]
 800e900:	b933      	cbnz	r3, 800e910 <_free_r+0x30>
 800e902:	6063      	str	r3, [r4, #4]
 800e904:	6014      	str	r4, [r2, #0]
 800e906:	b003      	add	sp, #12
 800e908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e90c:	f7ff bb0a 	b.w	800df24 <__malloc_unlock>
 800e910:	42a3      	cmp	r3, r4
 800e912:	d908      	bls.n	800e926 <_free_r+0x46>
 800e914:	6825      	ldr	r5, [r4, #0]
 800e916:	1961      	adds	r1, r4, r5
 800e918:	428b      	cmp	r3, r1
 800e91a:	bf01      	itttt	eq
 800e91c:	6819      	ldreq	r1, [r3, #0]
 800e91e:	685b      	ldreq	r3, [r3, #4]
 800e920:	1949      	addeq	r1, r1, r5
 800e922:	6021      	streq	r1, [r4, #0]
 800e924:	e7ed      	b.n	800e902 <_free_r+0x22>
 800e926:	461a      	mov	r2, r3
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	b10b      	cbz	r3, 800e930 <_free_r+0x50>
 800e92c:	42a3      	cmp	r3, r4
 800e92e:	d9fa      	bls.n	800e926 <_free_r+0x46>
 800e930:	6811      	ldr	r1, [r2, #0]
 800e932:	1855      	adds	r5, r2, r1
 800e934:	42a5      	cmp	r5, r4
 800e936:	d10b      	bne.n	800e950 <_free_r+0x70>
 800e938:	6824      	ldr	r4, [r4, #0]
 800e93a:	4421      	add	r1, r4
 800e93c:	1854      	adds	r4, r2, r1
 800e93e:	42a3      	cmp	r3, r4
 800e940:	6011      	str	r1, [r2, #0]
 800e942:	d1e0      	bne.n	800e906 <_free_r+0x26>
 800e944:	681c      	ldr	r4, [r3, #0]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	6053      	str	r3, [r2, #4]
 800e94a:	4421      	add	r1, r4
 800e94c:	6011      	str	r1, [r2, #0]
 800e94e:	e7da      	b.n	800e906 <_free_r+0x26>
 800e950:	d902      	bls.n	800e958 <_free_r+0x78>
 800e952:	230c      	movs	r3, #12
 800e954:	6003      	str	r3, [r0, #0]
 800e956:	e7d6      	b.n	800e906 <_free_r+0x26>
 800e958:	6825      	ldr	r5, [r4, #0]
 800e95a:	1961      	adds	r1, r4, r5
 800e95c:	428b      	cmp	r3, r1
 800e95e:	bf04      	itt	eq
 800e960:	6819      	ldreq	r1, [r3, #0]
 800e962:	685b      	ldreq	r3, [r3, #4]
 800e964:	6063      	str	r3, [r4, #4]
 800e966:	bf04      	itt	eq
 800e968:	1949      	addeq	r1, r1, r5
 800e96a:	6021      	streq	r1, [r4, #0]
 800e96c:	6054      	str	r4, [r2, #4]
 800e96e:	e7ca      	b.n	800e906 <_free_r+0x26>
 800e970:	b003      	add	sp, #12
 800e972:	bd30      	pop	{r4, r5, pc}
 800e974:	20008410 	.word	0x20008410

0800e978 <__ssputs_r>:
 800e978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e97c:	688e      	ldr	r6, [r1, #8]
 800e97e:	429e      	cmp	r6, r3
 800e980:	4682      	mov	sl, r0
 800e982:	460c      	mov	r4, r1
 800e984:	4690      	mov	r8, r2
 800e986:	461f      	mov	r7, r3
 800e988:	d838      	bhi.n	800e9fc <__ssputs_r+0x84>
 800e98a:	898a      	ldrh	r2, [r1, #12]
 800e98c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e990:	d032      	beq.n	800e9f8 <__ssputs_r+0x80>
 800e992:	6825      	ldr	r5, [r4, #0]
 800e994:	6909      	ldr	r1, [r1, #16]
 800e996:	eba5 0901 	sub.w	r9, r5, r1
 800e99a:	6965      	ldr	r5, [r4, #20]
 800e99c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	444b      	add	r3, r9
 800e9a8:	106d      	asrs	r5, r5, #1
 800e9aa:	429d      	cmp	r5, r3
 800e9ac:	bf38      	it	cc
 800e9ae:	461d      	movcc	r5, r3
 800e9b0:	0553      	lsls	r3, r2, #21
 800e9b2:	d531      	bpl.n	800ea18 <__ssputs_r+0xa0>
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	f7fb ffdb 	bl	800a970 <_malloc_r>
 800e9ba:	4606      	mov	r6, r0
 800e9bc:	b950      	cbnz	r0, 800e9d4 <__ssputs_r+0x5c>
 800e9be:	230c      	movs	r3, #12
 800e9c0:	f8ca 3000 	str.w	r3, [sl]
 800e9c4:	89a3      	ldrh	r3, [r4, #12]
 800e9c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9ca:	81a3      	strh	r3, [r4, #12]
 800e9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9d4:	6921      	ldr	r1, [r4, #16]
 800e9d6:	464a      	mov	r2, r9
 800e9d8:	f7fb ff93 	bl	800a902 <memcpy>
 800e9dc:	89a3      	ldrh	r3, [r4, #12]
 800e9de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e9e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9e6:	81a3      	strh	r3, [r4, #12]
 800e9e8:	6126      	str	r6, [r4, #16]
 800e9ea:	6165      	str	r5, [r4, #20]
 800e9ec:	444e      	add	r6, r9
 800e9ee:	eba5 0509 	sub.w	r5, r5, r9
 800e9f2:	6026      	str	r6, [r4, #0]
 800e9f4:	60a5      	str	r5, [r4, #8]
 800e9f6:	463e      	mov	r6, r7
 800e9f8:	42be      	cmp	r6, r7
 800e9fa:	d900      	bls.n	800e9fe <__ssputs_r+0x86>
 800e9fc:	463e      	mov	r6, r7
 800e9fe:	6820      	ldr	r0, [r4, #0]
 800ea00:	4632      	mov	r2, r6
 800ea02:	4641      	mov	r1, r8
 800ea04:	f000 fad2 	bl	800efac <memmove>
 800ea08:	68a3      	ldr	r3, [r4, #8]
 800ea0a:	1b9b      	subs	r3, r3, r6
 800ea0c:	60a3      	str	r3, [r4, #8]
 800ea0e:	6823      	ldr	r3, [r4, #0]
 800ea10:	4433      	add	r3, r6
 800ea12:	6023      	str	r3, [r4, #0]
 800ea14:	2000      	movs	r0, #0
 800ea16:	e7db      	b.n	800e9d0 <__ssputs_r+0x58>
 800ea18:	462a      	mov	r2, r5
 800ea1a:	f000 fae1 	bl	800efe0 <_realloc_r>
 800ea1e:	4606      	mov	r6, r0
 800ea20:	2800      	cmp	r0, #0
 800ea22:	d1e1      	bne.n	800e9e8 <__ssputs_r+0x70>
 800ea24:	6921      	ldr	r1, [r4, #16]
 800ea26:	4650      	mov	r0, sl
 800ea28:	f7ff ff5a 	bl	800e8e0 <_free_r>
 800ea2c:	e7c7      	b.n	800e9be <__ssputs_r+0x46>
	...

0800ea30 <_svfiprintf_r>:
 800ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea34:	4698      	mov	r8, r3
 800ea36:	898b      	ldrh	r3, [r1, #12]
 800ea38:	061b      	lsls	r3, r3, #24
 800ea3a:	b09d      	sub	sp, #116	; 0x74
 800ea3c:	4607      	mov	r7, r0
 800ea3e:	460d      	mov	r5, r1
 800ea40:	4614      	mov	r4, r2
 800ea42:	d50e      	bpl.n	800ea62 <_svfiprintf_r+0x32>
 800ea44:	690b      	ldr	r3, [r1, #16]
 800ea46:	b963      	cbnz	r3, 800ea62 <_svfiprintf_r+0x32>
 800ea48:	2140      	movs	r1, #64	; 0x40
 800ea4a:	f7fb ff91 	bl	800a970 <_malloc_r>
 800ea4e:	6028      	str	r0, [r5, #0]
 800ea50:	6128      	str	r0, [r5, #16]
 800ea52:	b920      	cbnz	r0, 800ea5e <_svfiprintf_r+0x2e>
 800ea54:	230c      	movs	r3, #12
 800ea56:	603b      	str	r3, [r7, #0]
 800ea58:	f04f 30ff 	mov.w	r0, #4294967295
 800ea5c:	e0d1      	b.n	800ec02 <_svfiprintf_r+0x1d2>
 800ea5e:	2340      	movs	r3, #64	; 0x40
 800ea60:	616b      	str	r3, [r5, #20]
 800ea62:	2300      	movs	r3, #0
 800ea64:	9309      	str	r3, [sp, #36]	; 0x24
 800ea66:	2320      	movs	r3, #32
 800ea68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea70:	2330      	movs	r3, #48	; 0x30
 800ea72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec1c <_svfiprintf_r+0x1ec>
 800ea76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea7a:	f04f 0901 	mov.w	r9, #1
 800ea7e:	4623      	mov	r3, r4
 800ea80:	469a      	mov	sl, r3
 800ea82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea86:	b10a      	cbz	r2, 800ea8c <_svfiprintf_r+0x5c>
 800ea88:	2a25      	cmp	r2, #37	; 0x25
 800ea8a:	d1f9      	bne.n	800ea80 <_svfiprintf_r+0x50>
 800ea8c:	ebba 0b04 	subs.w	fp, sl, r4
 800ea90:	d00b      	beq.n	800eaaa <_svfiprintf_r+0x7a>
 800ea92:	465b      	mov	r3, fp
 800ea94:	4622      	mov	r2, r4
 800ea96:	4629      	mov	r1, r5
 800ea98:	4638      	mov	r0, r7
 800ea9a:	f7ff ff6d 	bl	800e978 <__ssputs_r>
 800ea9e:	3001      	adds	r0, #1
 800eaa0:	f000 80aa 	beq.w	800ebf8 <_svfiprintf_r+0x1c8>
 800eaa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaa6:	445a      	add	r2, fp
 800eaa8:	9209      	str	r2, [sp, #36]	; 0x24
 800eaaa:	f89a 3000 	ldrb.w	r3, [sl]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	f000 80a2 	beq.w	800ebf8 <_svfiprintf_r+0x1c8>
 800eab4:	2300      	movs	r3, #0
 800eab6:	f04f 32ff 	mov.w	r2, #4294967295
 800eaba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eabe:	f10a 0a01 	add.w	sl, sl, #1
 800eac2:	9304      	str	r3, [sp, #16]
 800eac4:	9307      	str	r3, [sp, #28]
 800eac6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaca:	931a      	str	r3, [sp, #104]	; 0x68
 800eacc:	4654      	mov	r4, sl
 800eace:	2205      	movs	r2, #5
 800ead0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ead4:	4851      	ldr	r0, [pc, #324]	; (800ec1c <_svfiprintf_r+0x1ec>)
 800ead6:	f7f1 fb83 	bl	80001e0 <memchr>
 800eada:	9a04      	ldr	r2, [sp, #16]
 800eadc:	b9d8      	cbnz	r0, 800eb16 <_svfiprintf_r+0xe6>
 800eade:	06d0      	lsls	r0, r2, #27
 800eae0:	bf44      	itt	mi
 800eae2:	2320      	movmi	r3, #32
 800eae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eae8:	0711      	lsls	r1, r2, #28
 800eaea:	bf44      	itt	mi
 800eaec:	232b      	movmi	r3, #43	; 0x2b
 800eaee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eaf2:	f89a 3000 	ldrb.w	r3, [sl]
 800eaf6:	2b2a      	cmp	r3, #42	; 0x2a
 800eaf8:	d015      	beq.n	800eb26 <_svfiprintf_r+0xf6>
 800eafa:	9a07      	ldr	r2, [sp, #28]
 800eafc:	4654      	mov	r4, sl
 800eafe:	2000      	movs	r0, #0
 800eb00:	f04f 0c0a 	mov.w	ip, #10
 800eb04:	4621      	mov	r1, r4
 800eb06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb0a:	3b30      	subs	r3, #48	; 0x30
 800eb0c:	2b09      	cmp	r3, #9
 800eb0e:	d94e      	bls.n	800ebae <_svfiprintf_r+0x17e>
 800eb10:	b1b0      	cbz	r0, 800eb40 <_svfiprintf_r+0x110>
 800eb12:	9207      	str	r2, [sp, #28]
 800eb14:	e014      	b.n	800eb40 <_svfiprintf_r+0x110>
 800eb16:	eba0 0308 	sub.w	r3, r0, r8
 800eb1a:	fa09 f303 	lsl.w	r3, r9, r3
 800eb1e:	4313      	orrs	r3, r2
 800eb20:	9304      	str	r3, [sp, #16]
 800eb22:	46a2      	mov	sl, r4
 800eb24:	e7d2      	b.n	800eacc <_svfiprintf_r+0x9c>
 800eb26:	9b03      	ldr	r3, [sp, #12]
 800eb28:	1d19      	adds	r1, r3, #4
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	9103      	str	r1, [sp, #12]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	bfbb      	ittet	lt
 800eb32:	425b      	neglt	r3, r3
 800eb34:	f042 0202 	orrlt.w	r2, r2, #2
 800eb38:	9307      	strge	r3, [sp, #28]
 800eb3a:	9307      	strlt	r3, [sp, #28]
 800eb3c:	bfb8      	it	lt
 800eb3e:	9204      	strlt	r2, [sp, #16]
 800eb40:	7823      	ldrb	r3, [r4, #0]
 800eb42:	2b2e      	cmp	r3, #46	; 0x2e
 800eb44:	d10c      	bne.n	800eb60 <_svfiprintf_r+0x130>
 800eb46:	7863      	ldrb	r3, [r4, #1]
 800eb48:	2b2a      	cmp	r3, #42	; 0x2a
 800eb4a:	d135      	bne.n	800ebb8 <_svfiprintf_r+0x188>
 800eb4c:	9b03      	ldr	r3, [sp, #12]
 800eb4e:	1d1a      	adds	r2, r3, #4
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	9203      	str	r2, [sp, #12]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	bfb8      	it	lt
 800eb58:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb5c:	3402      	adds	r4, #2
 800eb5e:	9305      	str	r3, [sp, #20]
 800eb60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec2c <_svfiprintf_r+0x1fc>
 800eb64:	7821      	ldrb	r1, [r4, #0]
 800eb66:	2203      	movs	r2, #3
 800eb68:	4650      	mov	r0, sl
 800eb6a:	f7f1 fb39 	bl	80001e0 <memchr>
 800eb6e:	b140      	cbz	r0, 800eb82 <_svfiprintf_r+0x152>
 800eb70:	2340      	movs	r3, #64	; 0x40
 800eb72:	eba0 000a 	sub.w	r0, r0, sl
 800eb76:	fa03 f000 	lsl.w	r0, r3, r0
 800eb7a:	9b04      	ldr	r3, [sp, #16]
 800eb7c:	4303      	orrs	r3, r0
 800eb7e:	3401      	adds	r4, #1
 800eb80:	9304      	str	r3, [sp, #16]
 800eb82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb86:	4826      	ldr	r0, [pc, #152]	; (800ec20 <_svfiprintf_r+0x1f0>)
 800eb88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb8c:	2206      	movs	r2, #6
 800eb8e:	f7f1 fb27 	bl	80001e0 <memchr>
 800eb92:	2800      	cmp	r0, #0
 800eb94:	d038      	beq.n	800ec08 <_svfiprintf_r+0x1d8>
 800eb96:	4b23      	ldr	r3, [pc, #140]	; (800ec24 <_svfiprintf_r+0x1f4>)
 800eb98:	bb1b      	cbnz	r3, 800ebe2 <_svfiprintf_r+0x1b2>
 800eb9a:	9b03      	ldr	r3, [sp, #12]
 800eb9c:	3307      	adds	r3, #7
 800eb9e:	f023 0307 	bic.w	r3, r3, #7
 800eba2:	3308      	adds	r3, #8
 800eba4:	9303      	str	r3, [sp, #12]
 800eba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba8:	4433      	add	r3, r6
 800ebaa:	9309      	str	r3, [sp, #36]	; 0x24
 800ebac:	e767      	b.n	800ea7e <_svfiprintf_r+0x4e>
 800ebae:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebb2:	460c      	mov	r4, r1
 800ebb4:	2001      	movs	r0, #1
 800ebb6:	e7a5      	b.n	800eb04 <_svfiprintf_r+0xd4>
 800ebb8:	2300      	movs	r3, #0
 800ebba:	3401      	adds	r4, #1
 800ebbc:	9305      	str	r3, [sp, #20]
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	f04f 0c0a 	mov.w	ip, #10
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebca:	3a30      	subs	r2, #48	; 0x30
 800ebcc:	2a09      	cmp	r2, #9
 800ebce:	d903      	bls.n	800ebd8 <_svfiprintf_r+0x1a8>
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d0c5      	beq.n	800eb60 <_svfiprintf_r+0x130>
 800ebd4:	9105      	str	r1, [sp, #20]
 800ebd6:	e7c3      	b.n	800eb60 <_svfiprintf_r+0x130>
 800ebd8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebdc:	4604      	mov	r4, r0
 800ebde:	2301      	movs	r3, #1
 800ebe0:	e7f0      	b.n	800ebc4 <_svfiprintf_r+0x194>
 800ebe2:	ab03      	add	r3, sp, #12
 800ebe4:	9300      	str	r3, [sp, #0]
 800ebe6:	462a      	mov	r2, r5
 800ebe8:	4b0f      	ldr	r3, [pc, #60]	; (800ec28 <_svfiprintf_r+0x1f8>)
 800ebea:	a904      	add	r1, sp, #16
 800ebec:	4638      	mov	r0, r7
 800ebee:	f7fb ffd3 	bl	800ab98 <_printf_float>
 800ebf2:	1c42      	adds	r2, r0, #1
 800ebf4:	4606      	mov	r6, r0
 800ebf6:	d1d6      	bne.n	800eba6 <_svfiprintf_r+0x176>
 800ebf8:	89ab      	ldrh	r3, [r5, #12]
 800ebfa:	065b      	lsls	r3, r3, #25
 800ebfc:	f53f af2c 	bmi.w	800ea58 <_svfiprintf_r+0x28>
 800ec00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec02:	b01d      	add	sp, #116	; 0x74
 800ec04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec08:	ab03      	add	r3, sp, #12
 800ec0a:	9300      	str	r3, [sp, #0]
 800ec0c:	462a      	mov	r2, r5
 800ec0e:	4b06      	ldr	r3, [pc, #24]	; (800ec28 <_svfiprintf_r+0x1f8>)
 800ec10:	a904      	add	r1, sp, #16
 800ec12:	4638      	mov	r0, r7
 800ec14:	f7fc fa64 	bl	800b0e0 <_printf_i>
 800ec18:	e7eb      	b.n	800ebf2 <_svfiprintf_r+0x1c2>
 800ec1a:	bf00      	nop
 800ec1c:	0800f68c 	.word	0x0800f68c
 800ec20:	0800f696 	.word	0x0800f696
 800ec24:	0800ab99 	.word	0x0800ab99
 800ec28:	0800e979 	.word	0x0800e979
 800ec2c:	0800f692 	.word	0x0800f692

0800ec30 <__sfputc_r>:
 800ec30:	6893      	ldr	r3, [r2, #8]
 800ec32:	3b01      	subs	r3, #1
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	b410      	push	{r4}
 800ec38:	6093      	str	r3, [r2, #8]
 800ec3a:	da08      	bge.n	800ec4e <__sfputc_r+0x1e>
 800ec3c:	6994      	ldr	r4, [r2, #24]
 800ec3e:	42a3      	cmp	r3, r4
 800ec40:	db01      	blt.n	800ec46 <__sfputc_r+0x16>
 800ec42:	290a      	cmp	r1, #10
 800ec44:	d103      	bne.n	800ec4e <__sfputc_r+0x1e>
 800ec46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec4a:	f7fd bd11 	b.w	800c670 <__swbuf_r>
 800ec4e:	6813      	ldr	r3, [r2, #0]
 800ec50:	1c58      	adds	r0, r3, #1
 800ec52:	6010      	str	r0, [r2, #0]
 800ec54:	7019      	strb	r1, [r3, #0]
 800ec56:	4608      	mov	r0, r1
 800ec58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec5c:	4770      	bx	lr

0800ec5e <__sfputs_r>:
 800ec5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec60:	4606      	mov	r6, r0
 800ec62:	460f      	mov	r7, r1
 800ec64:	4614      	mov	r4, r2
 800ec66:	18d5      	adds	r5, r2, r3
 800ec68:	42ac      	cmp	r4, r5
 800ec6a:	d101      	bne.n	800ec70 <__sfputs_r+0x12>
 800ec6c:	2000      	movs	r0, #0
 800ec6e:	e007      	b.n	800ec80 <__sfputs_r+0x22>
 800ec70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec74:	463a      	mov	r2, r7
 800ec76:	4630      	mov	r0, r6
 800ec78:	f7ff ffda 	bl	800ec30 <__sfputc_r>
 800ec7c:	1c43      	adds	r3, r0, #1
 800ec7e:	d1f3      	bne.n	800ec68 <__sfputs_r+0xa>
 800ec80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec84 <_vfiprintf_r>:
 800ec84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec88:	460d      	mov	r5, r1
 800ec8a:	b09d      	sub	sp, #116	; 0x74
 800ec8c:	4614      	mov	r4, r2
 800ec8e:	4698      	mov	r8, r3
 800ec90:	4606      	mov	r6, r0
 800ec92:	b118      	cbz	r0, 800ec9c <_vfiprintf_r+0x18>
 800ec94:	6983      	ldr	r3, [r0, #24]
 800ec96:	b90b      	cbnz	r3, 800ec9c <_vfiprintf_r+0x18>
 800ec98:	f7fb fd6e 	bl	800a778 <__sinit>
 800ec9c:	4b89      	ldr	r3, [pc, #548]	; (800eec4 <_vfiprintf_r+0x240>)
 800ec9e:	429d      	cmp	r5, r3
 800eca0:	d11b      	bne.n	800ecda <_vfiprintf_r+0x56>
 800eca2:	6875      	ldr	r5, [r6, #4]
 800eca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eca6:	07d9      	lsls	r1, r3, #31
 800eca8:	d405      	bmi.n	800ecb6 <_vfiprintf_r+0x32>
 800ecaa:	89ab      	ldrh	r3, [r5, #12]
 800ecac:	059a      	lsls	r2, r3, #22
 800ecae:	d402      	bmi.n	800ecb6 <_vfiprintf_r+0x32>
 800ecb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecb2:	f7fb fe24 	bl	800a8fe <__retarget_lock_acquire_recursive>
 800ecb6:	89ab      	ldrh	r3, [r5, #12]
 800ecb8:	071b      	lsls	r3, r3, #28
 800ecba:	d501      	bpl.n	800ecc0 <_vfiprintf_r+0x3c>
 800ecbc:	692b      	ldr	r3, [r5, #16]
 800ecbe:	b9eb      	cbnz	r3, 800ecfc <_vfiprintf_r+0x78>
 800ecc0:	4629      	mov	r1, r5
 800ecc2:	4630      	mov	r0, r6
 800ecc4:	f7fd fd38 	bl	800c738 <__swsetup_r>
 800ecc8:	b1c0      	cbz	r0, 800ecfc <_vfiprintf_r+0x78>
 800ecca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eccc:	07dc      	lsls	r4, r3, #31
 800ecce:	d50e      	bpl.n	800ecee <_vfiprintf_r+0x6a>
 800ecd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ecd4:	b01d      	add	sp, #116	; 0x74
 800ecd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecda:	4b7b      	ldr	r3, [pc, #492]	; (800eec8 <_vfiprintf_r+0x244>)
 800ecdc:	429d      	cmp	r5, r3
 800ecde:	d101      	bne.n	800ece4 <_vfiprintf_r+0x60>
 800ece0:	68b5      	ldr	r5, [r6, #8]
 800ece2:	e7df      	b.n	800eca4 <_vfiprintf_r+0x20>
 800ece4:	4b79      	ldr	r3, [pc, #484]	; (800eecc <_vfiprintf_r+0x248>)
 800ece6:	429d      	cmp	r5, r3
 800ece8:	bf08      	it	eq
 800ecea:	68f5      	ldreq	r5, [r6, #12]
 800ecec:	e7da      	b.n	800eca4 <_vfiprintf_r+0x20>
 800ecee:	89ab      	ldrh	r3, [r5, #12]
 800ecf0:	0598      	lsls	r0, r3, #22
 800ecf2:	d4ed      	bmi.n	800ecd0 <_vfiprintf_r+0x4c>
 800ecf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecf6:	f7fb fe03 	bl	800a900 <__retarget_lock_release_recursive>
 800ecfa:	e7e9      	b.n	800ecd0 <_vfiprintf_r+0x4c>
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ed00:	2320      	movs	r3, #32
 800ed02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed06:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed0a:	2330      	movs	r3, #48	; 0x30
 800ed0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eed0 <_vfiprintf_r+0x24c>
 800ed10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed14:	f04f 0901 	mov.w	r9, #1
 800ed18:	4623      	mov	r3, r4
 800ed1a:	469a      	mov	sl, r3
 800ed1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed20:	b10a      	cbz	r2, 800ed26 <_vfiprintf_r+0xa2>
 800ed22:	2a25      	cmp	r2, #37	; 0x25
 800ed24:	d1f9      	bne.n	800ed1a <_vfiprintf_r+0x96>
 800ed26:	ebba 0b04 	subs.w	fp, sl, r4
 800ed2a:	d00b      	beq.n	800ed44 <_vfiprintf_r+0xc0>
 800ed2c:	465b      	mov	r3, fp
 800ed2e:	4622      	mov	r2, r4
 800ed30:	4629      	mov	r1, r5
 800ed32:	4630      	mov	r0, r6
 800ed34:	f7ff ff93 	bl	800ec5e <__sfputs_r>
 800ed38:	3001      	adds	r0, #1
 800ed3a:	f000 80aa 	beq.w	800ee92 <_vfiprintf_r+0x20e>
 800ed3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed40:	445a      	add	r2, fp
 800ed42:	9209      	str	r2, [sp, #36]	; 0x24
 800ed44:	f89a 3000 	ldrb.w	r3, [sl]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	f000 80a2 	beq.w	800ee92 <_vfiprintf_r+0x20e>
 800ed4e:	2300      	movs	r3, #0
 800ed50:	f04f 32ff 	mov.w	r2, #4294967295
 800ed54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed58:	f10a 0a01 	add.w	sl, sl, #1
 800ed5c:	9304      	str	r3, [sp, #16]
 800ed5e:	9307      	str	r3, [sp, #28]
 800ed60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed64:	931a      	str	r3, [sp, #104]	; 0x68
 800ed66:	4654      	mov	r4, sl
 800ed68:	2205      	movs	r2, #5
 800ed6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed6e:	4858      	ldr	r0, [pc, #352]	; (800eed0 <_vfiprintf_r+0x24c>)
 800ed70:	f7f1 fa36 	bl	80001e0 <memchr>
 800ed74:	9a04      	ldr	r2, [sp, #16]
 800ed76:	b9d8      	cbnz	r0, 800edb0 <_vfiprintf_r+0x12c>
 800ed78:	06d1      	lsls	r1, r2, #27
 800ed7a:	bf44      	itt	mi
 800ed7c:	2320      	movmi	r3, #32
 800ed7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed82:	0713      	lsls	r3, r2, #28
 800ed84:	bf44      	itt	mi
 800ed86:	232b      	movmi	r3, #43	; 0x2b
 800ed88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ed90:	2b2a      	cmp	r3, #42	; 0x2a
 800ed92:	d015      	beq.n	800edc0 <_vfiprintf_r+0x13c>
 800ed94:	9a07      	ldr	r2, [sp, #28]
 800ed96:	4654      	mov	r4, sl
 800ed98:	2000      	movs	r0, #0
 800ed9a:	f04f 0c0a 	mov.w	ip, #10
 800ed9e:	4621      	mov	r1, r4
 800eda0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eda4:	3b30      	subs	r3, #48	; 0x30
 800eda6:	2b09      	cmp	r3, #9
 800eda8:	d94e      	bls.n	800ee48 <_vfiprintf_r+0x1c4>
 800edaa:	b1b0      	cbz	r0, 800edda <_vfiprintf_r+0x156>
 800edac:	9207      	str	r2, [sp, #28]
 800edae:	e014      	b.n	800edda <_vfiprintf_r+0x156>
 800edb0:	eba0 0308 	sub.w	r3, r0, r8
 800edb4:	fa09 f303 	lsl.w	r3, r9, r3
 800edb8:	4313      	orrs	r3, r2
 800edba:	9304      	str	r3, [sp, #16]
 800edbc:	46a2      	mov	sl, r4
 800edbe:	e7d2      	b.n	800ed66 <_vfiprintf_r+0xe2>
 800edc0:	9b03      	ldr	r3, [sp, #12]
 800edc2:	1d19      	adds	r1, r3, #4
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	9103      	str	r1, [sp, #12]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	bfbb      	ittet	lt
 800edcc:	425b      	neglt	r3, r3
 800edce:	f042 0202 	orrlt.w	r2, r2, #2
 800edd2:	9307      	strge	r3, [sp, #28]
 800edd4:	9307      	strlt	r3, [sp, #28]
 800edd6:	bfb8      	it	lt
 800edd8:	9204      	strlt	r2, [sp, #16]
 800edda:	7823      	ldrb	r3, [r4, #0]
 800eddc:	2b2e      	cmp	r3, #46	; 0x2e
 800edde:	d10c      	bne.n	800edfa <_vfiprintf_r+0x176>
 800ede0:	7863      	ldrb	r3, [r4, #1]
 800ede2:	2b2a      	cmp	r3, #42	; 0x2a
 800ede4:	d135      	bne.n	800ee52 <_vfiprintf_r+0x1ce>
 800ede6:	9b03      	ldr	r3, [sp, #12]
 800ede8:	1d1a      	adds	r2, r3, #4
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	9203      	str	r2, [sp, #12]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	bfb8      	it	lt
 800edf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800edf6:	3402      	adds	r4, #2
 800edf8:	9305      	str	r3, [sp, #20]
 800edfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eee0 <_vfiprintf_r+0x25c>
 800edfe:	7821      	ldrb	r1, [r4, #0]
 800ee00:	2203      	movs	r2, #3
 800ee02:	4650      	mov	r0, sl
 800ee04:	f7f1 f9ec 	bl	80001e0 <memchr>
 800ee08:	b140      	cbz	r0, 800ee1c <_vfiprintf_r+0x198>
 800ee0a:	2340      	movs	r3, #64	; 0x40
 800ee0c:	eba0 000a 	sub.w	r0, r0, sl
 800ee10:	fa03 f000 	lsl.w	r0, r3, r0
 800ee14:	9b04      	ldr	r3, [sp, #16]
 800ee16:	4303      	orrs	r3, r0
 800ee18:	3401      	adds	r4, #1
 800ee1a:	9304      	str	r3, [sp, #16]
 800ee1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee20:	482c      	ldr	r0, [pc, #176]	; (800eed4 <_vfiprintf_r+0x250>)
 800ee22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee26:	2206      	movs	r2, #6
 800ee28:	f7f1 f9da 	bl	80001e0 <memchr>
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	d03f      	beq.n	800eeb0 <_vfiprintf_r+0x22c>
 800ee30:	4b29      	ldr	r3, [pc, #164]	; (800eed8 <_vfiprintf_r+0x254>)
 800ee32:	bb1b      	cbnz	r3, 800ee7c <_vfiprintf_r+0x1f8>
 800ee34:	9b03      	ldr	r3, [sp, #12]
 800ee36:	3307      	adds	r3, #7
 800ee38:	f023 0307 	bic.w	r3, r3, #7
 800ee3c:	3308      	adds	r3, #8
 800ee3e:	9303      	str	r3, [sp, #12]
 800ee40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee42:	443b      	add	r3, r7
 800ee44:	9309      	str	r3, [sp, #36]	; 0x24
 800ee46:	e767      	b.n	800ed18 <_vfiprintf_r+0x94>
 800ee48:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee4c:	460c      	mov	r4, r1
 800ee4e:	2001      	movs	r0, #1
 800ee50:	e7a5      	b.n	800ed9e <_vfiprintf_r+0x11a>
 800ee52:	2300      	movs	r3, #0
 800ee54:	3401      	adds	r4, #1
 800ee56:	9305      	str	r3, [sp, #20]
 800ee58:	4619      	mov	r1, r3
 800ee5a:	f04f 0c0a 	mov.w	ip, #10
 800ee5e:	4620      	mov	r0, r4
 800ee60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee64:	3a30      	subs	r2, #48	; 0x30
 800ee66:	2a09      	cmp	r2, #9
 800ee68:	d903      	bls.n	800ee72 <_vfiprintf_r+0x1ee>
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d0c5      	beq.n	800edfa <_vfiprintf_r+0x176>
 800ee6e:	9105      	str	r1, [sp, #20]
 800ee70:	e7c3      	b.n	800edfa <_vfiprintf_r+0x176>
 800ee72:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee76:	4604      	mov	r4, r0
 800ee78:	2301      	movs	r3, #1
 800ee7a:	e7f0      	b.n	800ee5e <_vfiprintf_r+0x1da>
 800ee7c:	ab03      	add	r3, sp, #12
 800ee7e:	9300      	str	r3, [sp, #0]
 800ee80:	462a      	mov	r2, r5
 800ee82:	4b16      	ldr	r3, [pc, #88]	; (800eedc <_vfiprintf_r+0x258>)
 800ee84:	a904      	add	r1, sp, #16
 800ee86:	4630      	mov	r0, r6
 800ee88:	f7fb fe86 	bl	800ab98 <_printf_float>
 800ee8c:	4607      	mov	r7, r0
 800ee8e:	1c78      	adds	r0, r7, #1
 800ee90:	d1d6      	bne.n	800ee40 <_vfiprintf_r+0x1bc>
 800ee92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee94:	07d9      	lsls	r1, r3, #31
 800ee96:	d405      	bmi.n	800eea4 <_vfiprintf_r+0x220>
 800ee98:	89ab      	ldrh	r3, [r5, #12]
 800ee9a:	059a      	lsls	r2, r3, #22
 800ee9c:	d402      	bmi.n	800eea4 <_vfiprintf_r+0x220>
 800ee9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eea0:	f7fb fd2e 	bl	800a900 <__retarget_lock_release_recursive>
 800eea4:	89ab      	ldrh	r3, [r5, #12]
 800eea6:	065b      	lsls	r3, r3, #25
 800eea8:	f53f af12 	bmi.w	800ecd0 <_vfiprintf_r+0x4c>
 800eeac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eeae:	e711      	b.n	800ecd4 <_vfiprintf_r+0x50>
 800eeb0:	ab03      	add	r3, sp, #12
 800eeb2:	9300      	str	r3, [sp, #0]
 800eeb4:	462a      	mov	r2, r5
 800eeb6:	4b09      	ldr	r3, [pc, #36]	; (800eedc <_vfiprintf_r+0x258>)
 800eeb8:	a904      	add	r1, sp, #16
 800eeba:	4630      	mov	r0, r6
 800eebc:	f7fc f910 	bl	800b0e0 <_printf_i>
 800eec0:	e7e4      	b.n	800ee8c <_vfiprintf_r+0x208>
 800eec2:	bf00      	nop
 800eec4:	0800f214 	.word	0x0800f214
 800eec8:	0800f234 	.word	0x0800f234
 800eecc:	0800f1f4 	.word	0x0800f1f4
 800eed0:	0800f68c 	.word	0x0800f68c
 800eed4:	0800f696 	.word	0x0800f696
 800eed8:	0800ab99 	.word	0x0800ab99
 800eedc:	0800ec5f 	.word	0x0800ec5f
 800eee0:	0800f692 	.word	0x0800f692

0800eee4 <_read_r>:
 800eee4:	b538      	push	{r3, r4, r5, lr}
 800eee6:	4d07      	ldr	r5, [pc, #28]	; (800ef04 <_read_r+0x20>)
 800eee8:	4604      	mov	r4, r0
 800eeea:	4608      	mov	r0, r1
 800eeec:	4611      	mov	r1, r2
 800eeee:	2200      	movs	r2, #0
 800eef0:	602a      	str	r2, [r5, #0]
 800eef2:	461a      	mov	r2, r3
 800eef4:	f7f2 fb2c 	bl	8001550 <_read>
 800eef8:	1c43      	adds	r3, r0, #1
 800eefa:	d102      	bne.n	800ef02 <_read_r+0x1e>
 800eefc:	682b      	ldr	r3, [r5, #0]
 800eefe:	b103      	cbz	r3, 800ef02 <_read_r+0x1e>
 800ef00:	6023      	str	r3, [r4, #0]
 800ef02:	bd38      	pop	{r3, r4, r5, pc}
 800ef04:	20008418 	.word	0x20008418

0800ef08 <nan>:
 800ef08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ef10 <nan+0x8>
 800ef0c:	4770      	bx	lr
 800ef0e:	bf00      	nop
 800ef10:	00000000 	.word	0x00000000
 800ef14:	7ff80000 	.word	0x7ff80000

0800ef18 <strncmp>:
 800ef18:	b510      	push	{r4, lr}
 800ef1a:	b17a      	cbz	r2, 800ef3c <strncmp+0x24>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	3901      	subs	r1, #1
 800ef20:	1884      	adds	r4, r0, r2
 800ef22:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ef26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ef2a:	4290      	cmp	r0, r2
 800ef2c:	d101      	bne.n	800ef32 <strncmp+0x1a>
 800ef2e:	42a3      	cmp	r3, r4
 800ef30:	d101      	bne.n	800ef36 <strncmp+0x1e>
 800ef32:	1a80      	subs	r0, r0, r2
 800ef34:	bd10      	pop	{r4, pc}
 800ef36:	2800      	cmp	r0, #0
 800ef38:	d1f3      	bne.n	800ef22 <strncmp+0xa>
 800ef3a:	e7fa      	b.n	800ef32 <strncmp+0x1a>
 800ef3c:	4610      	mov	r0, r2
 800ef3e:	e7f9      	b.n	800ef34 <strncmp+0x1c>

0800ef40 <__ascii_wctomb>:
 800ef40:	b149      	cbz	r1, 800ef56 <__ascii_wctomb+0x16>
 800ef42:	2aff      	cmp	r2, #255	; 0xff
 800ef44:	bf85      	ittet	hi
 800ef46:	238a      	movhi	r3, #138	; 0x8a
 800ef48:	6003      	strhi	r3, [r0, #0]
 800ef4a:	700a      	strbls	r2, [r1, #0]
 800ef4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ef50:	bf98      	it	ls
 800ef52:	2001      	movls	r0, #1
 800ef54:	4770      	bx	lr
 800ef56:	4608      	mov	r0, r1
 800ef58:	4770      	bx	lr

0800ef5a <abort>:
 800ef5a:	b508      	push	{r3, lr}
 800ef5c:	2006      	movs	r0, #6
 800ef5e:	f000 f897 	bl	800f090 <raise>
 800ef62:	2001      	movs	r0, #1
 800ef64:	f7f2 faea 	bl	800153c <_exit>

0800ef68 <_fstat_r>:
 800ef68:	b538      	push	{r3, r4, r5, lr}
 800ef6a:	4d07      	ldr	r5, [pc, #28]	; (800ef88 <_fstat_r+0x20>)
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	4604      	mov	r4, r0
 800ef70:	4608      	mov	r0, r1
 800ef72:	4611      	mov	r1, r2
 800ef74:	602b      	str	r3, [r5, #0]
 800ef76:	f7f2 fb30 	bl	80015da <_fstat>
 800ef7a:	1c43      	adds	r3, r0, #1
 800ef7c:	d102      	bne.n	800ef84 <_fstat_r+0x1c>
 800ef7e:	682b      	ldr	r3, [r5, #0]
 800ef80:	b103      	cbz	r3, 800ef84 <_fstat_r+0x1c>
 800ef82:	6023      	str	r3, [r4, #0]
 800ef84:	bd38      	pop	{r3, r4, r5, pc}
 800ef86:	bf00      	nop
 800ef88:	20008418 	.word	0x20008418

0800ef8c <_isatty_r>:
 800ef8c:	b538      	push	{r3, r4, r5, lr}
 800ef8e:	4d06      	ldr	r5, [pc, #24]	; (800efa8 <_isatty_r+0x1c>)
 800ef90:	2300      	movs	r3, #0
 800ef92:	4604      	mov	r4, r0
 800ef94:	4608      	mov	r0, r1
 800ef96:	602b      	str	r3, [r5, #0]
 800ef98:	f7f2 fb2f 	bl	80015fa <_isatty>
 800ef9c:	1c43      	adds	r3, r0, #1
 800ef9e:	d102      	bne.n	800efa6 <_isatty_r+0x1a>
 800efa0:	682b      	ldr	r3, [r5, #0]
 800efa2:	b103      	cbz	r3, 800efa6 <_isatty_r+0x1a>
 800efa4:	6023      	str	r3, [r4, #0]
 800efa6:	bd38      	pop	{r3, r4, r5, pc}
 800efa8:	20008418 	.word	0x20008418

0800efac <memmove>:
 800efac:	4288      	cmp	r0, r1
 800efae:	b510      	push	{r4, lr}
 800efb0:	eb01 0402 	add.w	r4, r1, r2
 800efb4:	d902      	bls.n	800efbc <memmove+0x10>
 800efb6:	4284      	cmp	r4, r0
 800efb8:	4623      	mov	r3, r4
 800efba:	d807      	bhi.n	800efcc <memmove+0x20>
 800efbc:	1e43      	subs	r3, r0, #1
 800efbe:	42a1      	cmp	r1, r4
 800efc0:	d008      	beq.n	800efd4 <memmove+0x28>
 800efc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efca:	e7f8      	b.n	800efbe <memmove+0x12>
 800efcc:	4402      	add	r2, r0
 800efce:	4601      	mov	r1, r0
 800efd0:	428a      	cmp	r2, r1
 800efd2:	d100      	bne.n	800efd6 <memmove+0x2a>
 800efd4:	bd10      	pop	{r4, pc}
 800efd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efde:	e7f7      	b.n	800efd0 <memmove+0x24>

0800efe0 <_realloc_r>:
 800efe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efe4:	4680      	mov	r8, r0
 800efe6:	4614      	mov	r4, r2
 800efe8:	460e      	mov	r6, r1
 800efea:	b921      	cbnz	r1, 800eff6 <_realloc_r+0x16>
 800efec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eff0:	4611      	mov	r1, r2
 800eff2:	f7fb bcbd 	b.w	800a970 <_malloc_r>
 800eff6:	b92a      	cbnz	r2, 800f004 <_realloc_r+0x24>
 800eff8:	f7ff fc72 	bl	800e8e0 <_free_r>
 800effc:	4625      	mov	r5, r4
 800effe:	4628      	mov	r0, r5
 800f000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f004:	f000 f860 	bl	800f0c8 <_malloc_usable_size_r>
 800f008:	4284      	cmp	r4, r0
 800f00a:	4607      	mov	r7, r0
 800f00c:	d802      	bhi.n	800f014 <_realloc_r+0x34>
 800f00e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f012:	d812      	bhi.n	800f03a <_realloc_r+0x5a>
 800f014:	4621      	mov	r1, r4
 800f016:	4640      	mov	r0, r8
 800f018:	f7fb fcaa 	bl	800a970 <_malloc_r>
 800f01c:	4605      	mov	r5, r0
 800f01e:	2800      	cmp	r0, #0
 800f020:	d0ed      	beq.n	800effe <_realloc_r+0x1e>
 800f022:	42bc      	cmp	r4, r7
 800f024:	4622      	mov	r2, r4
 800f026:	4631      	mov	r1, r6
 800f028:	bf28      	it	cs
 800f02a:	463a      	movcs	r2, r7
 800f02c:	f7fb fc69 	bl	800a902 <memcpy>
 800f030:	4631      	mov	r1, r6
 800f032:	4640      	mov	r0, r8
 800f034:	f7ff fc54 	bl	800e8e0 <_free_r>
 800f038:	e7e1      	b.n	800effe <_realloc_r+0x1e>
 800f03a:	4635      	mov	r5, r6
 800f03c:	e7df      	b.n	800effe <_realloc_r+0x1e>

0800f03e <_raise_r>:
 800f03e:	291f      	cmp	r1, #31
 800f040:	b538      	push	{r3, r4, r5, lr}
 800f042:	4604      	mov	r4, r0
 800f044:	460d      	mov	r5, r1
 800f046:	d904      	bls.n	800f052 <_raise_r+0x14>
 800f048:	2316      	movs	r3, #22
 800f04a:	6003      	str	r3, [r0, #0]
 800f04c:	f04f 30ff 	mov.w	r0, #4294967295
 800f050:	bd38      	pop	{r3, r4, r5, pc}
 800f052:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f054:	b112      	cbz	r2, 800f05c <_raise_r+0x1e>
 800f056:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f05a:	b94b      	cbnz	r3, 800f070 <_raise_r+0x32>
 800f05c:	4620      	mov	r0, r4
 800f05e:	f000 f831 	bl	800f0c4 <_getpid_r>
 800f062:	462a      	mov	r2, r5
 800f064:	4601      	mov	r1, r0
 800f066:	4620      	mov	r0, r4
 800f068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f06c:	f000 b818 	b.w	800f0a0 <_kill_r>
 800f070:	2b01      	cmp	r3, #1
 800f072:	d00a      	beq.n	800f08a <_raise_r+0x4c>
 800f074:	1c59      	adds	r1, r3, #1
 800f076:	d103      	bne.n	800f080 <_raise_r+0x42>
 800f078:	2316      	movs	r3, #22
 800f07a:	6003      	str	r3, [r0, #0]
 800f07c:	2001      	movs	r0, #1
 800f07e:	e7e7      	b.n	800f050 <_raise_r+0x12>
 800f080:	2400      	movs	r4, #0
 800f082:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f086:	4628      	mov	r0, r5
 800f088:	4798      	blx	r3
 800f08a:	2000      	movs	r0, #0
 800f08c:	e7e0      	b.n	800f050 <_raise_r+0x12>
	...

0800f090 <raise>:
 800f090:	4b02      	ldr	r3, [pc, #8]	; (800f09c <raise+0xc>)
 800f092:	4601      	mov	r1, r0
 800f094:	6818      	ldr	r0, [r3, #0]
 800f096:	f7ff bfd2 	b.w	800f03e <_raise_r>
 800f09a:	bf00      	nop
 800f09c:	20000094 	.word	0x20000094

0800f0a0 <_kill_r>:
 800f0a0:	b538      	push	{r3, r4, r5, lr}
 800f0a2:	4d07      	ldr	r5, [pc, #28]	; (800f0c0 <_kill_r+0x20>)
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	4608      	mov	r0, r1
 800f0aa:	4611      	mov	r1, r2
 800f0ac:	602b      	str	r3, [r5, #0]
 800f0ae:	f7f2 fa35 	bl	800151c <_kill>
 800f0b2:	1c43      	adds	r3, r0, #1
 800f0b4:	d102      	bne.n	800f0bc <_kill_r+0x1c>
 800f0b6:	682b      	ldr	r3, [r5, #0]
 800f0b8:	b103      	cbz	r3, 800f0bc <_kill_r+0x1c>
 800f0ba:	6023      	str	r3, [r4, #0]
 800f0bc:	bd38      	pop	{r3, r4, r5, pc}
 800f0be:	bf00      	nop
 800f0c0:	20008418 	.word	0x20008418

0800f0c4 <_getpid_r>:
 800f0c4:	f7f2 ba22 	b.w	800150c <_getpid>

0800f0c8 <_malloc_usable_size_r>:
 800f0c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0cc:	1f18      	subs	r0, r3, #4
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	bfbc      	itt	lt
 800f0d2:	580b      	ldrlt	r3, [r1, r0]
 800f0d4:	18c0      	addlt	r0, r0, r3
 800f0d6:	4770      	bx	lr

0800f0d8 <_init>:
 800f0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0da:	bf00      	nop
 800f0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0de:	bc08      	pop	{r3}
 800f0e0:	469e      	mov	lr, r3
 800f0e2:	4770      	bx	lr

0800f0e4 <_fini>:
 800f0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0e6:	bf00      	nop
 800f0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ea:	bc08      	pop	{r3}
 800f0ec:	469e      	mov	lr, r3
 800f0ee:	4770      	bx	lr
