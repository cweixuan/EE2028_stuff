
assignment2_mx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f448  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800f5d8  0800f5d8  0001f5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbc0  0800fbc0  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbc0  0800fbc0  0001fbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbc8  0800fbc8  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbc8  0800fbc8  0001fbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbcc  0800fbcc  0001fbcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800fbd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000081d8  2000024c  0800fe1c  0002024c  2**2
                  ALLOC
 10 ._user_heap_stack 00004204  20008424  0800fe1c  00028424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024d77  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055b1  00000000  00000000  00044ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001db8  00000000  00000000  0004a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b30  00000000  00000000  0004c360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dff2  00000000  00000000  0004de90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000278be  00000000  00000000  0007be82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104ac1  00000000  00000000  000a3740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a8201  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e78  00000000  00000000  001a8254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000024c 	.word	0x2000024c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f5c0 	.word	0x0800f5c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000250 	.word	0x20000250
 80001cc:	0800f5c0 	.word	0x0800f5c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_DMA_Init+0x48>)
 8001000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <MX_DMA_Init+0x48>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6493      	str	r3, [r2, #72]	; 0x48
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <MX_DMA_Init+0x48>)
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2105      	movs	r1, #5
 800101a:	200e      	movs	r0, #14
 800101c:	f001 fd46 	bl	8002aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001020:	200e      	movs	r0, #14
 8001022:	f001 fd5f 	bl	8002ae4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2105      	movs	r1, #5
 800102a:	200f      	movs	r0, #15
 800102c:	f001 fd3e 	bl	8002aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001030:	200f      	movs	r0, #15
 8001032:	f001 fd57 	bl	8002ae4 <HAL_NVIC_EnableIRQ>

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask,
		signed char *pcTaskName) {
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4a07      	ldr	r2, [pc, #28]	; (8001088 <vApplicationGetIdleTaskMemory+0x2c>)
 800106c:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <vApplicationGetIdleTaskMemory+0x30>)
 8001072:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	2000028c 	.word	0x2000028c
 800108c:	20000340 	.word	0x20000340

08001090 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4a07      	ldr	r2, [pc, #28]	; (80010bc <vApplicationGetTimerTaskMemory+0x2c>)
 80010a0:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <vApplicationGetTimerTaskMemory+0x30>)
 80010a6:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ae:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20000540 	.word	0x20000540
 80010c0:	200005f4 	.word	0x200005f4

080010c4 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af02      	add	r7, sp, #8
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	UART1_queue = xQueueCreate(5, sizeof(queue_UART_msg_t*));
 80010ca:	2200      	movs	r2, #0
 80010cc:	2104      	movs	r1, #4
 80010ce:	2005      	movs	r0, #5
 80010d0:	f006 ff12 	bl	8007ef8 <xQueueGenericCreate>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a35      	ldr	r2, [pc, #212]	; (80011ac <MX_FREERTOS_Init+0xe8>)
 80010d8:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 512);
 80010da:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <MX_FREERTOS_Init+0xec>)
 80010dc:	463c      	mov	r4, r7
 80010de:	461d      	mov	r5, r3
 80010e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010ec:	463b      	mov	r3, r7
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f006 fd0d 	bl	8007b10 <osThreadCreate>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a2e      	ldr	r2, [pc, #184]	; (80011b4 <MX_FREERTOS_Init+0xf0>)
 80010fa:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */

	iic2Mutex = xSemaphoreCreateMutex();
 80010fc:	2001      	movs	r0, #1
 80010fe:	f006 ff6e 	bl	8007fde <xQueueCreateMutex>
 8001102:	4603      	mov	r3, r0
 8001104:	4a2c      	ldr	r2, [pc, #176]	; (80011b8 <MX_FREERTOS_Init+0xf4>)
 8001106:	6013      	str	r3, [r2, #0]
	BaseType_t status = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
	if (iic2Mutex != NULL) {
 800110c:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <MX_FREERTOS_Init+0xf4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d02f      	beq.n	8001174 <MX_FREERTOS_Init+0xb0>
		//error somehow? lol
		status = xTaskCreate(lis_task, "lis_task", 512, (void*) 1,
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <MX_FREERTOS_Init+0xf8>)
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	2305      	movs	r3, #5
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2301      	movs	r3, #1
 800111e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001122:	4927      	ldr	r1, [pc, #156]	; (80011c0 <MX_FREERTOS_Init+0xfc>)
 8001124:	4827      	ldr	r0, [pc, #156]	; (80011c4 <MX_FREERTOS_Init+0x100>)
 8001126:	f007 fcdc 	bl	8008ae2 <xTaskCreate>
 800112a:	61f8      	str	r0, [r7, #28]
		/*priority*/(UBaseType_t) 5, &lis_task_handle);
		status = xTaskCreate(lps_task, "lps_task", 512, (void*) 1,
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <MX_FREERTOS_Init+0x104>)
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	2305      	movs	r3, #5
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800113a:	4924      	ldr	r1, [pc, #144]	; (80011cc <MX_FREERTOS_Init+0x108>)
 800113c:	4824      	ldr	r0, [pc, #144]	; (80011d0 <MX_FREERTOS_Init+0x10c>)
 800113e:	f007 fcd0 	bl	8008ae2 <xTaskCreate>
 8001142:	61f8      	str	r0, [r7, #28]
		/*priority*/(UBaseType_t) 5, &lps_task_handle);
		status = xTaskCreate(hts_task, "hts_task", 512, (void*) 1,
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <MX_FREERTOS_Init+0x110>)
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	2305      	movs	r3, #5
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2301      	movs	r3, #1
 800114e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001152:	4921      	ldr	r1, [pc, #132]	; (80011d8 <MX_FREERTOS_Init+0x114>)
 8001154:	4821      	ldr	r0, [pc, #132]	; (80011dc <MX_FREERTOS_Init+0x118>)
 8001156:	f007 fcc4 	bl	8008ae2 <xTaskCreate>
 800115a:	61f8      	str	r0, [r7, #28]
		/*priority*/(UBaseType_t) 5, &hts_task_handle);
		status = xTaskCreate(lsm_task, "lsm_task", 512, (void*) 1,
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_FREERTOS_Init+0x11c>)
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	2305      	movs	r3, #5
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116a:	491e      	ldr	r1, [pc, #120]	; (80011e4 <MX_FREERTOS_Init+0x120>)
 800116c:	481e      	ldr	r0, [pc, #120]	; (80011e8 <MX_FREERTOS_Init+0x124>)
 800116e:	f007 fcb8 	bl	8008ae2 <xTaskCreate>
 8001172:	61f8      	str	r0, [r7, #28]
		/*priority*/(UBaseType_t) 5, &lsm_task_handle);
	}
	status = xTaskCreate(buzzer_task, "buzzer_task", 512, (void*) 1,
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_FREERTOS_Init+0x128>)
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	2305      	movs	r3, #5
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2301      	movs	r3, #1
 800117e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001182:	491b      	ldr	r1, [pc, #108]	; (80011f0 <MX_FREERTOS_Init+0x12c>)
 8001184:	481b      	ldr	r0, [pc, #108]	; (80011f4 <MX_FREERTOS_Init+0x130>)
 8001186:	f007 fcac 	bl	8008ae2 <xTaskCreate>
 800118a:	61f8      	str	r0, [r7, #28]
	/*priority*/(UBaseType_t) 5, &buzzer_task_handle);
	status = xTaskCreate(uart1_task, "uart_task", 512, (void*) 1,
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_FREERTOS_Init+0x134>)
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2305      	movs	r3, #5
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119a:	4918      	ldr	r1, [pc, #96]	; (80011fc <MX_FREERTOS_Init+0x138>)
 800119c:	4818      	ldr	r0, [pc, #96]	; (8001200 <MX_FREERTOS_Init+0x13c>)
 800119e:	f007 fca0 	bl	8008ae2 <xTaskCreate>
 80011a2:	61f8      	str	r0, [r7, #28]
	/*priority*/(UBaseType_t) 5, &uart1_task_handle);
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bdb0      	pop	{r4, r5, r7, pc}
 80011ac:	20000280 	.word	0x20000280
 80011b0:	0800f62c 	.word	0x0800f62c
 80011b4:	20000288 	.word	0x20000288
 80011b8:	20000284 	.word	0x20000284
 80011bc:	2000026c 	.word	0x2000026c
 80011c0:	0800f5e4 	.word	0x0800f5e4
 80011c4:	08001b51 	.word	0x08001b51
 80011c8:	20000270 	.word	0x20000270
 80011cc:	0800f5f0 	.word	0x0800f5f0
 80011d0:	08001bc5 	.word	0x08001bc5
 80011d4:	20000278 	.word	0x20000278
 80011d8:	0800f5fc 	.word	0x0800f5fc
 80011dc:	08001ae1 	.word	0x08001ae1
 80011e0:	20000274 	.word	0x20000274
 80011e4:	0800f608 	.word	0x0800f608
 80011e8:	08001c39 	.word	0x08001c39
 80011ec:	2000027c 	.word	0x2000027c
 80011f0:	0800f614 	.word	0x0800f614
 80011f4:	08001a6d 	.word	0x08001a6d
 80011f8:	20000268 	.word	0x20000268
 80011fc:	0800f620 	.word	0x0800f620
 8001200:	08001cf1 	.word	0x08001cf1

08001204 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f006 fccb 	bl	8007ba8 <osDelay>
 8001212:	e7fb      	b.n	800120c <StartDefaultTask+0x8>

08001214 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_GPIO_Init+0x68>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4a13      	ldr	r2, [pc, #76]	; (800127c <MX_GPIO_Init+0x68>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_GPIO_Init+0x68>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_GPIO_Init+0x68>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	4a0d      	ldr	r2, [pc, #52]	; (800127c <MX_GPIO_Init+0x68>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_GPIO_Init+0x68>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 800125a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001264:	2301      	movs	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4619      	mov	r1, r3
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_GPIO_Init+0x6c>)
 8001270:	f001 febc 	bl	8002fec <HAL_GPIO_Init>

}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000
 8001280:	48000800 	.word	0x48000800

08001284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001288:	f001 fb20 	bl	80028cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128c:	f000 f80d 	bl	80012aa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001290:	f7ff ffc0 	bl	8001214 <MX_GPIO_Init>
  MX_DMA_Init();
 8001294:	f7ff feb0 	bl	8000ff8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001298:	f000 face 	bl	8001838 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800129c:	f000 fa1a 	bl	80016d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80012a0:	f7ff ff10 	bl	80010c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012a4:	f006 fc2d 	bl	8007b02 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <main+0x24>

080012aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b096      	sub	sp, #88	; 0x58
 80012ae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2244      	movs	r2, #68	; 0x44
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f009 fd70 	bl	800ad9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012be:	463b      	mov	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012d0:	f002 fe36 	bl	8003f40 <HAL_PWREx_ControlVoltageScaling>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012da:	f000 f83d 	bl	8001358 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012de:	2302      	movs	r3, #2
 80012e0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e8:	2310      	movs	r3, #16
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 fe79 	bl	8003fec <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001300:	f000 f82a 	bl	8001358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001308:	2301      	movs	r3, #1
 800130a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fa41 	bl	80047a4 <HAL_RCC_ClockConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001328:	f000 f816 	bl	8001358 <Error_Handler>
  }
}
 800132c:	bf00      	nop
 800132e:	3758      	adds	r7, #88	; 0x58
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d101      	bne.n	800134a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001346:	f001 fad9 	bl	80028fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40001000 	.word	0x40001000

08001358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135c:	b672      	cpsid	i
}
 800135e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001360:	e7fe      	b.n	8001360 <Error_Handler+0x8>
	...

08001364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_MspInit+0x4c>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_MspInit+0x4c>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6613      	str	r3, [r2, #96]	; 0x60
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_MspInit+0x4c>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_MspInit+0x4c>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <HAL_MspInit+0x4c>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138c:	6593      	str	r3, [r2, #88]	; 0x58
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HAL_MspInit+0x4c>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	210f      	movs	r1, #15
 800139e:	f06f 0001 	mvn.w	r0, #1
 80013a2:	f001 fb83 	bl	8002aac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000

080013b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	; 0x38
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013c2:	4b34      	ldr	r3, [pc, #208]	; (8001494 <HAL_InitTick+0xe0>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c6:	4a33      	ldr	r2, [pc, #204]	; (8001494 <HAL_InitTick+0xe0>)
 80013c8:	f043 0310 	orr.w	r3, r3, #16
 80013cc:	6593      	str	r3, [r2, #88]	; 0x58
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <HAL_InitTick+0xe0>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013da:	f107 0210 	add.w	r2, r7, #16
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 fba1 	bl	8004b2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d103      	bne.n	80013fc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013f4:	f003 fb6e 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 80013f8:	6378      	str	r0, [r7, #52]	; 0x34
 80013fa:	e004      	b.n	8001406 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013fc:	f003 fb6a 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8001400:	4603      	mov	r3, r0
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001408:	4a23      	ldr	r2, [pc, #140]	; (8001498 <HAL_InitTick+0xe4>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	3b01      	subs	r3, #1
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <HAL_InitTick+0xe8>)
 8001416:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <HAL_InitTick+0xec>)
 8001418:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_InitTick+0xe8>)
 800141c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001420:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001422:	4a1e      	ldr	r2, [pc, #120]	; (800149c <HAL_InitTick+0xe8>)
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001426:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_InitTick+0xe8>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_InitTick+0xe8>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_InitTick+0xe8>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800143a:	4818      	ldr	r0, [pc, #96]	; (800149c <HAL_InitTick+0xe8>)
 800143c:	f004 f8c4 	bl	80055c8 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001446:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800144e:	4813      	ldr	r0, [pc, #76]	; (800149c <HAL_InitTick+0xe8>)
 8001450:	f004 f91c 	bl	800568c <HAL_TIM_Base_Start_IT>
 8001454:	4603      	mov	r3, r0
 8001456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800145a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800145e:	2b00      	cmp	r3, #0
 8001460:	d111      	bne.n	8001486 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001462:	2036      	movs	r0, #54	; 0x36
 8001464:	f001 fb3e 	bl	8002ae4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b0f      	cmp	r3, #15
 800146c:	d808      	bhi.n	8001480 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800146e:	2200      	movs	r2, #0
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	2036      	movs	r0, #54	; 0x36
 8001474:	f001 fb1a 	bl	8002aac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_InitTick+0xf0>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e002      	b.n	8001486 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001486:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800148a:	4618      	mov	r0, r3
 800148c:	3738      	adds	r7, #56	; 0x38
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	431bde83 	.word	0x431bde83
 800149c:	200009f4 	.word	0x200009f4
 80014a0:	40001000 	.word	0x40001000
 80014a4:	2000006c 	.word	0x2000006c

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <NMI_Handler+0x4>

080014ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler+0x4>

080014ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <DMA1_Channel4_IRQHandler+0x10>)
 80014da:	f001 fca8 	bl	8002e2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000b5c 	.word	0x20000b5c

080014e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <DMA1_Channel5_IRQHandler+0x10>)
 80014ee:	f001 fc9e 	bl	8002e2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000b14 	.word	0x20000b14

080014fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <USART1_IRQHandler+0x10>)
 8001502:	f005 fa07 	bl	8006914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000a90 	.word	0x20000a90

08001510 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <TIM6_DAC_IRQHandler+0x10>)
 8001516:	f004 fa87 	bl	8005a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200009f4 	.word	0x200009f4

08001524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return 1;
 8001528:	2301      	movs	r3, #1
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_kill>:

int _kill(int pid, int sig)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800153e:	f009 fafd 	bl	800ab3c <__errno>
 8001542:	4603      	mov	r3, r0
 8001544:	2216      	movs	r2, #22
 8001546:	601a      	str	r2, [r3, #0]
  return -1;
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_exit>:

void _exit (int status)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ffe7 	bl	8001534 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001566:	e7fe      	b.n	8001566 <_exit+0x12>

08001568 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	e00a      	b.n	8001590 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800157a:	f3af 8000 	nop.w
 800157e:	4601      	mov	r1, r0
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	60ba      	str	r2, [r7, #8]
 8001586:	b2ca      	uxtb	r2, r1
 8001588:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	dbf0      	blt.n	800157a <_read+0x12>
  }

  return len;
 8001598:	687b      	ldr	r3, [r7, #4]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	e009      	b.n	80015c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	60ba      	str	r2, [r7, #8]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	dbf1      	blt.n	80015b4 <_write+0x12>
  }
  return len;
 80015d0:	687b      	ldr	r3, [r7, #4]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_close>:

int _close(int file)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001602:	605a      	str	r2, [r3, #4]
  return 0;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_isatty>:

int _isatty(int file)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <_sbrk+0x5c>)
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <_sbrk+0x60>)
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <_sbrk+0x64>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <_sbrk+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	429a      	cmp	r2, r3
 8001672:	d207      	bcs.n	8001684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001674:	f009 fa62 	bl	800ab3c <__errno>
 8001678:	4603      	mov	r3, r0
 800167a:	220c      	movs	r2, #12
 800167c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	e009      	b.n	8001698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <_sbrk+0x64>)
 8001694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20018000 	.word	0x20018000
 80016a4:	00003000 	.word	0x00003000
 80016a8:	20000a40 	.word	0x20000a40
 80016ac:	20008428 	.word	0x20008428

080016b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <SystemInit+0x20>)
 80016b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <SystemInit+0x20>)
 80016bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e6:	463b      	mov	r3, r7
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	615a      	str	r2, [r3, #20]
 80016f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <MX_TIM3_Init+0xac>)
 80016fa:	4a22      	ldr	r2, [pc, #136]	; (8001784 <MX_TIM3_Init+0xb0>)
 80016fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MX_TIM3_Init+0xac>)
 8001700:	2207      	movs	r2, #7
 8001702:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_TIM3_Init+0xac>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4545;
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_TIM3_Init+0xac>)
 800170c:	f241 12c1 	movw	r2, #4545	; 0x11c1
 8001710:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_TIM3_Init+0xac>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <MX_TIM3_Init+0xac>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800171e:	4818      	ldr	r0, [pc, #96]	; (8001780 <MX_TIM3_Init+0xac>)
 8001720:	f004 f824 	bl	800576c <HAL_TIM_PWM_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800172a:	f7ff fe15 	bl	8001358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	4810      	ldr	r0, [pc, #64]	; (8001780 <MX_TIM3_Init+0xac>)
 800173e:	f004 ff65 	bl	800660c <HAL_TIMEx_MasterConfigSynchronization>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001748:	f7ff fe06 	bl	8001358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174c:	2360      	movs	r3, #96	; 0x60
 800174e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	2208      	movs	r2, #8
 8001760:	4619      	mov	r1, r3
 8001762:	4807      	ldr	r0, [pc, #28]	; (8001780 <MX_TIM3_Init+0xac>)
 8001764:	f004 fa80 	bl	8005c68 <HAL_TIM_PWM_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800176e:	f7ff fdf3 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001772:	4803      	ldr	r0, [pc, #12]	; (8001780 <MX_TIM3_Init+0xac>)
 8001774:	f000 f828 	bl	80017c8 <HAL_TIM_MspPostInit>

}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	; 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000a44 	.word	0x20000a44
 8001784:	40000400 	.word	0x40000400

08001788 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_TIM_PWM_MspInit+0x38>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d10b      	bne.n	80017b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_TIM_PWM_MspInit+0x3c>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6593      	str	r3, [r2, #88]	; 0x58
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40000400 	.word	0x40000400
 80017c4:	40021000 	.word	0x40021000

080017c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a11      	ldr	r2, [pc, #68]	; (800182c <HAL_TIM_MspPostInit+0x64>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d11b      	bne.n	8001822 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_TIM_MspPostInit+0x68>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a10      	ldr	r2, [pc, #64]	; (8001830 <HAL_TIM_MspPostInit+0x68>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_TIM_MspPostInit+0x68>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001802:	2301      	movs	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001812:	2302      	movs	r3, #2
 8001814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_TIM_MspPostInit+0x6c>)
 800181e:	f001 fbe5 	bl	8002fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40000400 	.word	0x40000400
 8001830:	40021000 	.word	0x40021000
 8001834:	48000400 	.word	0x48000400

08001838 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800183e:	4a15      	ldr	r2, [pc, #84]	; (8001894 <MX_USART1_UART_Init+0x5c>)
 8001840:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001848:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800187c:	f004 ff6c 	bl	8006758 <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001886:	f7ff fd67 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000a90 	.word	0x20000a90
 8001894:	40013800 	.word	0x40013800

08001898 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b0ac      	sub	sp, #176	; 0xb0
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2288      	movs	r2, #136	; 0x88
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f009 fa70 	bl	800ad9e <memset>
  if(uartHandle->Instance==USART1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <HAL_UART_MspInit+0x164>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	f040 8095 	bne.w	80019f4 <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018ce:	2300      	movs	r3, #0
 80018d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 f9ba 	bl	8004c50 <HAL_RCCEx_PeriphCLKConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018e2:	f7ff fd39 	bl	8001358 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018e6:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <HAL_UART_MspInit+0x168>)
 80018e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ea:	4a45      	ldr	r2, [pc, #276]	; (8001a00 <HAL_UART_MspInit+0x168>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f0:	6613      	str	r3, [r2, #96]	; 0x60
 80018f2:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <HAL_UART_MspInit+0x168>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <HAL_UART_MspInit+0x168>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	4a3f      	ldr	r2, [pc, #252]	; (8001a00 <HAL_UART_MspInit+0x168>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190a:	4b3d      	ldr	r3, [pc, #244]	; (8001a00 <HAL_UART_MspInit+0x168>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001916:	23c0      	movs	r3, #192	; 0xc0
 8001918:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800192e:	2307      	movs	r3, #7
 8001930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001938:	4619      	mov	r1, r3
 800193a:	4832      	ldr	r0, [pc, #200]	; (8001a04 <HAL_UART_MspInit+0x16c>)
 800193c:	f001 fb56 	bl	8002fec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001940:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <HAL_UART_MspInit+0x170>)
 8001942:	4a32      	ldr	r2, [pc, #200]	; (8001a0c <HAL_UART_MspInit+0x174>)
 8001944:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001946:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <HAL_UART_MspInit+0x170>)
 8001948:	2202      	movs	r2, #2
 800194a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800194c:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <HAL_UART_MspInit+0x170>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_UART_MspInit+0x170>)
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001958:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_UART_MspInit+0x170>)
 800195a:	2280      	movs	r2, #128	; 0x80
 800195c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_UART_MspInit+0x170>)
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_UART_MspInit+0x170>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800196a:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_UART_MspInit+0x170>)
 800196c:	2220      	movs	r2, #32
 800196e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_UART_MspInit+0x170>)
 8001972:	2200      	movs	r2, #0
 8001974:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001976:	4824      	ldr	r0, [pc, #144]	; (8001a08 <HAL_UART_MspInit+0x170>)
 8001978:	f001 f8c2 	bl	8002b00 <HAL_DMA_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8001982:	f7ff fce9 	bl	8001358 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <HAL_UART_MspInit+0x170>)
 800198a:	671a      	str	r2, [r3, #112]	; 0x70
 800198c:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <HAL_UART_MspInit+0x170>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <HAL_UART_MspInit+0x178>)
 8001994:	4a1f      	ldr	r2, [pc, #124]	; (8001a14 <HAL_UART_MspInit+0x17c>)
 8001996:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_UART_MspInit+0x178>)
 800199a:	2202      	movs	r2, #2
 800199c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <HAL_UART_MspInit+0x178>)
 80019a0:	2210      	movs	r2, #16
 80019a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_UART_MspInit+0x178>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_UART_MspInit+0x178>)
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_UART_MspInit+0x178>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_UART_MspInit+0x178>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_UART_MspInit+0x178>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_UART_MspInit+0x178>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80019c8:	4811      	ldr	r0, [pc, #68]	; (8001a10 <HAL_UART_MspInit+0x178>)
 80019ca:	f001 f899 	bl	8002b00 <HAL_DMA_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 80019d4:	f7ff fcc0 	bl	8001358 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_UART_MspInit+0x178>)
 80019dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80019de:	4a0c      	ldr	r2, [pc, #48]	; (8001a10 <HAL_UART_MspInit+0x178>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2105      	movs	r1, #5
 80019e8:	2025      	movs	r0, #37	; 0x25
 80019ea:	f001 f85f 	bl	8002aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ee:	2025      	movs	r0, #37	; 0x25
 80019f0:	f001 f878 	bl	8002ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019f4:	bf00      	nop
 80019f6:	37b0      	adds	r7, #176	; 0xb0
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40013800 	.word	0x40013800
 8001a00:	40021000 	.word	0x40021000
 8001a04:	48000400 	.word	0x48000400
 8001a08:	20000b14 	.word	0x20000b14
 8001a0c:	40020058 	.word	0x40020058
 8001a10:	20000b5c 	.word	0x20000b5c
 8001a14:	40020044 	.word	0x40020044

08001a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a1c:	f7ff fe48 	bl	80016b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a22:	490d      	ldr	r1, [pc, #52]	; (8001a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <LoopForever+0xe>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a28:	e002      	b.n	8001a30 <LoopCopyDataInit>

08001a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2e:	3304      	adds	r3, #4

08001a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a34:	d3f9      	bcc.n	8001a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a38:	4c0a      	ldr	r4, [pc, #40]	; (8001a64 <LoopForever+0x16>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a3c:	e001      	b.n	8001a42 <LoopFillZerobss>

08001a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a40:	3204      	adds	r2, #4

08001a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a44:	d3fb      	bcc.n	8001a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a46:	f009 f975 	bl	800ad34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a4a:	f7ff fc1b 	bl	8001284 <main>

08001a4e <LoopForever>:

LoopForever:
    b LoopForever
 8001a4e:	e7fe      	b.n	8001a4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8001a5c:	0800fbd0 	.word	0x0800fbd0
  ldr r2, =_sbss
 8001a60:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8001a64:	20008424 	.word	0x20008424

08001a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC1_2_IRQHandler>
	...

08001a6c <buzzer_task>:
#include "buzzer_task.h"




void buzzer_task(void* pvParameters){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

	  htim3.Instance->ARR = 100;
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <buzzer_task+0x70>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2264      	movs	r2, #100	; 0x64
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c
	  htim3.Instance->CCR3 = 2;
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <buzzer_task+0x70>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2202      	movs	r2, #2
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_PRESCALER(&htim3, 400);
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <buzzer_task+0x70>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001a8c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001a8e:	2108      	movs	r1, #8
 8001a90:	4812      	ldr	r0, [pc, #72]	; (8001adc <buzzer_task+0x70>)
 8001a92:	f003 fec3 	bl	800581c <HAL_TIM_PWM_Start>
	  uint16_t presc = 200;
 8001a96:	23c8      	movs	r3, #200	; 0xc8
 8001a98:	81fb      	strh	r3, [r7, #14]
	  int dir = 1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	60bb      	str	r3, [r7, #8]

	  while (presc > 0){
 8001a9e:	e014      	b.n	8001aca <buzzer_task+0x5e>
		  presc += dir;
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	89fb      	ldrh	r3, [r7, #14]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	81fb      	strh	r3, [r7, #14]
		  __HAL_TIM_SET_PRESCALER(&htim3, presc);
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <buzzer_task+0x70>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	89fa      	ldrh	r2, [r7, #14]
 8001ab0:	629a      	str	r2, [r3, #40]	; 0x28
	  	  vTaskDelay(5);
 8001ab2:	2005      	movs	r0, #5
 8001ab4:	f007 f9e8 	bl	8008e88 <vTaskDelay>
		  if (presc < 42 || presc > 200 ){
 8001ab8:	89fb      	ldrh	r3, [r7, #14]
 8001aba:	2b29      	cmp	r3, #41	; 0x29
 8001abc:	d902      	bls.n	8001ac4 <buzzer_task+0x58>
 8001abe:	89fb      	ldrh	r3, [r7, #14]
 8001ac0:	2bc8      	cmp	r3, #200	; 0xc8
 8001ac2:	d902      	bls.n	8001aca <buzzer_task+0x5e>
			  dir = -dir;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	425b      	negs	r3, r3
 8001ac8:	60bb      	str	r3, [r7, #8]
	  while (presc > 0){
 8001aca:	89fb      	ldrh	r3, [r7, #14]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1e7      	bne.n	8001aa0 <buzzer_task+0x34>
		  }
	  }

}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000a44 	.word	0x20000a44

08001ae0 <hts_task>:

void hts_loop(){

}

void hts_task(void* pvParameters){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	//block until ready
 	TickType_t last_wake_time;
	xSemaphoreTake(iic2Mutex,0xFFFF);
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <hts_task+0x5c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001af0:	4618      	mov	r0, r3
 8001af2:	f006 fd07 	bl	8008504 <xQueueSemaphoreTake>
	//INSERT INIT CODE HERE
	xSemaphoreGive(iic2Mutex);
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <hts_task+0x5c>)
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	2300      	movs	r3, #0
 8001afc:	2200      	movs	r2, #0
 8001afe:	2100      	movs	r1, #0
 8001b00:	f006 fa86 	bl	8008010 <xQueueGenericSend>
	vTaskDelay(5);
 8001b04:	2005      	movs	r0, #5
 8001b06:	f007 f9bf 	bl	8008e88 <vTaskDelay>
	while(1){

		xSemaphoreTake(iic2Mutex,0xFFFF);
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <hts_task+0x5c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b12:	4618      	mov	r0, r3
 8001b14:	f006 fcf6 	bl	8008504 <xQueueSemaphoreTake>
		last_wake_time = xTaskGetTickCount();
 8001b18:	f007 fb04 	bl	8009124 <xTaskGetTickCount>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60fb      	str	r3, [r7, #12]
		//INSERT BSP READ HERE
//		float temp = BSP_TSENSOR_ReadTemp();
//		float humidity = BSP_HSENSOR_ReadHumidity();
		xSemaphoreGive(iic2Mutex);
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <hts_task+0x5c>)
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	2300      	movs	r3, #0
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	f006 fa71 	bl	8008010 <xQueueGenericSend>

//		temphum_data.temperature = temp;
//		temphum_data.humidity = humidity;

		vTaskDelayUntil(&last_wake_time, 50);
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	2132      	movs	r1, #50	; 0x32
 8001b34:	4618      	mov	r0, r3
 8001b36:	f007 f929 	bl	8008d8c <vTaskDelayUntil>
		xSemaphoreTake(iic2Mutex,0xFFFF);
 8001b3a:	e7e6      	b.n	8001b0a <hts_task+0x2a>
 8001b3c:	20000284 	.word	0x20000284

08001b40 <lis_init>:
#include "stdio.h"
#include "../../tasks/inc/lis_task.h"


axis_data_t mag_data;
void lis_init(){
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <lis_task>:

void lis_loop(){

}

void lis_task(void* pvParameters){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 	TickType_t last_wake_time;
	xSemaphoreTake(iic2Mutex,0xFFFF);
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <lis_task+0x60>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b60:	4618      	mov	r0, r3
 8001b62:	f006 fccf 	bl	8008504 <xQueueSemaphoreTake>
	lis_init();
 8001b66:	f7ff ffeb 	bl	8001b40 <lis_init>
	xSemaphoreGive(iic2Mutex);
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <lis_task+0x60>)
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	f006 fa4c 	bl	8008010 <xQueueGenericSend>
	vTaskDelay(5);
 8001b78:	2005      	movs	r0, #5
 8001b7a:	f007 f985 	bl	8008e88 <vTaskDelay>
	while(1){
		xSemaphoreTake(iic2Mutex,0xFFFF);
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <lis_task+0x60>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b86:	4618      	mov	r0, r3
 8001b88:	f006 fcbc 	bl	8008504 <xQueueSemaphoreTake>
		last_wake_time = xTaskGetTickCount();
 8001b8c:	f007 faca 	bl	8009124 <xTaskGetTickCount>
 8001b90:	4603      	mov	r3, r0
 8001b92:	60fb      	str	r3, [r7, #12]
		//get data from the magnetometer here
		xSemaphoreGive(iic2Mutex);
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <lis_task+0x60>)
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	f006 fa37 	bl	8008010 <xQueueGenericSend>


		vTaskDelayUntil(&last_wake_time, 50);
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	2132      	movs	r1, #50	; 0x32
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f007 f8ef 	bl	8008d8c <vTaskDelayUntil>
		xSemaphoreTake(iic2Mutex,0xFFFF);
 8001bae:	e7e6      	b.n	8001b7e <lis_task+0x2e>
 8001bb0:	20000284 	.word	0x20000284

08001bb4 <lps_init>:
#include "lps_task.h"


lps_data_t pressure_data;

void lps_init(){
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <lps_task>:

void lps_loop(){

}

void lps_task(void* argument){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 	TickType_t last_wake_time;
	xSemaphoreTake(iic2Mutex,0xFFFF);
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <lps_task+0x60>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f006 fc95 	bl	8008504 <xQueueSemaphoreTake>
	//INSERT INIT CODE HERE
	lps_init();
 8001bda:	f7ff ffeb 	bl	8001bb4 <lps_init>
	xSemaphoreGive(iic2Mutex);
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <lps_task+0x60>)
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	2300      	movs	r3, #0
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	f006 fa12 	bl	8008010 <xQueueGenericSend>
	vTaskDelay(5);
 8001bec:	2005      	movs	r0, #5
 8001bee:	f007 f94b 	bl	8008e88 <vTaskDelay>
	while(1){
		xSemaphoreTake(iic2Mutex,0xFFFF);
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <lps_task+0x60>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f006 fc82 	bl	8008504 <xQueueSemaphoreTake>
		last_wake_time = xTaskGetTickCount();
 8001c00:	f007 fa90 	bl	8009124 <xTaskGetTickCount>
 8001c04:	4603      	mov	r3, r0
 8001c06:	60fb      	str	r3, [r7, #12]
		//get data from LPS
		xSemaphoreGive(iic2Mutex);
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <lps_task+0x60>)
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	f006 f9fd 	bl	8008010 <xQueueGenericSend>


		vTaskDelayUntil(&last_wake_time, 50);
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	2132      	movs	r1, #50	; 0x32
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f007 f8b5 	bl	8008d8c <vTaskDelayUntil>
		xSemaphoreTake(iic2Mutex,0xFFFF);
 8001c22:	e7e6      	b.n	8001bf2 <lps_task+0x2e>
 8001c24:	20000284 	.word	0x20000284

08001c28 <lsm_init>:

axis_data_t accel_data;
axis_data_t gyro_data;
extern hts_data_t temphum_data;

void lsm_init(){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	BSP_ACCELERO_Init();
 8001c2c:	f000 fb7a 	bl	8002324 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8001c30:	f000 fbce 	bl	80023d0 <BSP_GYRO_Init>
	//LSM init code hereee
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <lsm_task>:


void lsm_task(void* argument){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 	TickType_t last_wake_time;
	xSemaphoreTake(iic2Mutex,0xFFFF);
 8001c40:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <lsm_task+0xb0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f006 fc5b 	bl	8008504 <xQueueSemaphoreTake>
	lsm_init();
 8001c4e:	f7ff ffeb 	bl	8001c28 <lsm_init>
	//INSERT INIT CODE HERE
	xSemaphoreGive(iic2Mutex);
 8001c52:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <lsm_task+0xb0>)
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	2300      	movs	r3, #0
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f006 f9d8 	bl	8008010 <xQueueGenericSend>
	vTaskDelay(5);
 8001c60:	2005      	movs	r0, #5
 8001c62:	f007 f911 	bl	8008e88 <vTaskDelay>
	int16_t accel_data_i16[3] = { 0 };
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	809a      	strh	r2, [r3, #4]
	while(1){
		xSemaphoreTake(iic2Mutex,0xFFFF);
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <lsm_task+0xb0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f006 fc43 	bl	8008504 <xQueueSemaphoreTake>
		last_wake_time = xTaskGetTickCount();
 8001c7e:	f007 fa51 	bl	8009124 <xTaskGetTickCount>
 8001c82:	4603      	mov	r3, r0
 8001c84:	617b      	str	r3, [r7, #20]
		BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fb88 	bl	80023a0 <BSP_ACCELERO_AccGetXYZ>
		// the function above returns 16 bit integers which are acceleration in mg (9.8/1000 m/s^2).
//		// Converting to float to print the actual acceleration.
		xSemaphoreGive(iic2Mutex);
 8001c90:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <lsm_task+0xb0>)
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	2300      	movs	r3, #0
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	f006 f9b9 	bl	8008010 <xQueueGenericSend>


		accel_data.x = (float)accel_data_i16[0] * (9.8/1000.0f);
 8001c9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001caa:	ee17 0a90 	vmov	r0, s15
 8001cae:	f7fe fc4b 	bl	8000548 <__aeabi_f2d>
 8001cb2:	a30b      	add	r3, pc, #44	; (adr r3, 8001ce0 <lsm_task+0xa8>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fc9e 	bl	80005f8 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7fe ff90 	bl	8000be8 <__aeabi_d2f>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <lsm_task+0xb4>)
 8001ccc:	6013      	str	r3, [r2, #0]
//		accel_data[1] = (float)accel_data_i16[1] * (9.8/1000.0f);
//		accel_data[2] = (float)accel_data_i16[2] * (9.8/1000.0f);
		vTaskDelayUntil(&last_wake_time, 50);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	2132      	movs	r1, #50	; 0x32
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f007 f859 	bl	8008d8c <vTaskDelayUntil>
		xSemaphoreTake(iic2Mutex,0xFFFF);
 8001cda:	e7c9      	b.n	8001c70 <lsm_task+0x38>
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	bc01a36f 	.word	0xbc01a36f
 8001ce4:	3f841205 	.word	0x3f841205
 8001ce8:	20000284 	.word	0x20000284
 8001cec:	20000bb0 	.word	0x20000bb0

08001cf0 <uart1_task>:
extern axis_data_t mag_data;
extern hts_data_t temphum_data;
extern lps_data_t pressure_data;
extern warship_state_e warship_state;

void uart1_task(void* pvParameters){
 8001cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cf4:	b0cd      	sub	sp, #308	; 0x134
 8001cf6:	af06      	add	r7, sp, #24
 8001cf8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cfc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d00:	6018      	str	r0, [r3, #0]
	//init code
	char tx_buffer[256];
	uint8_t tx_len;
 	TickType_t delay_time = 10;
 8001d02:	230a      	movs	r3, #10
 8001d04:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 	TickType_t start_time;
	while(1){
		start_time = xTaskGetTickCount();
 8001d08:	f007 fa0c 	bl	8009124 <xTaskGetTickCount>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d16:	601a      	str	r2, [r3, #0]
		switch(warship_state){
 8001d18:	4b81      	ldr	r3, [pc, #516]	; (8001f20 <uart1_task+0x230>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	f000 810f 	beq.w	8001f40 <uart1_task+0x250>
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	f300 8187 	bgt.w	8002036 <uart1_task+0x346>
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <uart1_task+0x42>
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d07b      	beq.n	8001e28 <uart1_task+0x138>
 8001d30:	e181      	b.n	8002036 <uart1_task+0x346>
			case SENTRY:
				tx_len = snprintf(tx_buffer, 256, 			"G: X:%.4fdps | Y:%.4fdps | Z:%.4fdps \r\n",
									gyro_data.x, gyro_data.y, gyro_data.z);
 8001d32:	4b7c      	ldr	r3, [pc, #496]	; (8001f24 <uart1_task+0x234>)
 8001d34:	681b      	ldr	r3, [r3, #0]
				tx_len = snprintf(tx_buffer, 256, 			"G: X:%.4fdps | Y:%.4fdps | Z:%.4fdps \r\n",
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc06 	bl	8000548 <__aeabi_f2d>
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	460d      	mov	r5, r1
									gyro_data.x, gyro_data.y, gyro_data.z);
 8001d40:	4b78      	ldr	r3, [pc, #480]	; (8001f24 <uart1_task+0x234>)
 8001d42:	685b      	ldr	r3, [r3, #4]
				tx_len = snprintf(tx_buffer, 256, 			"G: X:%.4fdps | Y:%.4fdps | Z:%.4fdps \r\n",
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fbff 	bl	8000548 <__aeabi_f2d>
 8001d4a:	4680      	mov	r8, r0
 8001d4c:	4689      	mov	r9, r1
									gyro_data.x, gyro_data.y, gyro_data.z);
 8001d4e:	4b75      	ldr	r3, [pc, #468]	; (8001f24 <uart1_task+0x234>)
 8001d50:	689b      	ldr	r3, [r3, #8]
				tx_len = snprintf(tx_buffer, 256, 			"G: X:%.4fdps | Y:%.4fdps | Z:%.4fdps \r\n",
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fbf8 	bl	8000548 <__aeabi_f2d>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	f107 0010 	add.w	r0, r7, #16
 8001d60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d64:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d68:	e9cd 4500 	strd	r4, r5, [sp]
 8001d6c:	4a6e      	ldr	r2, [pc, #440]	; (8001f28 <uart1_task+0x238>)
 8001d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d72:	f009 ffab 	bl	800bccc <sniprintf>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				tx_len += snprintf(tx_buffer+tx_len, 256,	 "A: X:%.4fg  | Y:%.4fg   | Z:%.4fg \r\n",
 8001d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001d80:	f107 0210 	add.w	r2, r7, #16
 8001d84:	18d6      	adds	r6, r2, r3
									accel_data.x, accel_data.y, accel_data.z);
 8001d86:	4b69      	ldr	r3, [pc, #420]	; (8001f2c <uart1_task+0x23c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
				tx_len += snprintf(tx_buffer+tx_len, 256,	 "A: X:%.4fg  | Y:%.4fg   | Z:%.4fg \r\n",
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbdc 	bl	8000548 <__aeabi_f2d>
 8001d90:	4604      	mov	r4, r0
 8001d92:	460d      	mov	r5, r1
									accel_data.x, accel_data.y, accel_data.z);
 8001d94:	4b65      	ldr	r3, [pc, #404]	; (8001f2c <uart1_task+0x23c>)
 8001d96:	685b      	ldr	r3, [r3, #4]
				tx_len += snprintf(tx_buffer+tx_len, 256,	 "A: X:%.4fg  | Y:%.4fg   | Z:%.4fg \r\n",
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbd5 	bl	8000548 <__aeabi_f2d>
 8001d9e:	4680      	mov	r8, r0
 8001da0:	4689      	mov	r9, r1
									accel_data.x, accel_data.y, accel_data.z);
 8001da2:	4b62      	ldr	r3, [pc, #392]	; (8001f2c <uart1_task+0x23c>)
 8001da4:	689b      	ldr	r3, [r3, #8]
				tx_len += snprintf(tx_buffer+tx_len, 256,	 "A: X:%.4fg  | Y:%.4fg   | Z:%.4fg \r\n",
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fbce 	bl	8000548 <__aeabi_f2d>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001db4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001db8:	e9cd 4500 	strd	r4, r5, [sp]
 8001dbc:	4a5c      	ldr	r2, [pc, #368]	; (8001f30 <uart1_task+0x240>)
 8001dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc2:	4630      	mov	r0, r6
 8001dc4:	f009 ff82 	bl	800bccc <sniprintf>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				tx_len += snprintf(tx_buffer+tx_len, 256, 	"P: %.4fpa    | H:%.4f\r\n\n",
 8001dd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001dda:	f107 0210 	add.w	r2, r7, #16
 8001dde:	18d6      	adds	r6, r2, r3
									pressure_data.pressure, temphum_data.humidity);
 8001de0:	4b54      	ldr	r3, [pc, #336]	; (8001f34 <uart1_task+0x244>)
 8001de2:	681b      	ldr	r3, [r3, #0]
				tx_len += snprintf(tx_buffer+tx_len, 256, 	"P: %.4fpa    | H:%.4f\r\n\n",
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fbaf 	bl	8000548 <__aeabi_f2d>
 8001dea:	4604      	mov	r4, r0
 8001dec:	460d      	mov	r5, r1
									pressure_data.pressure, temphum_data.humidity);
 8001dee:	4b52      	ldr	r3, [pc, #328]	; (8001f38 <uart1_task+0x248>)
 8001df0:	685b      	ldr	r3, [r3, #4]
				tx_len += snprintf(tx_buffer+tx_len, 256, 	"P: %.4fpa    | H:%.4f\r\n\n",
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fba8 	bl	8000548 <__aeabi_f2d>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e00:	e9cd 4500 	strd	r4, r5, [sp]
 8001e04:	4a4d      	ldr	r2, [pc, #308]	; (8001f3c <uart1_task+0x24c>)
 8001e06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e0a:	4630      	mov	r0, r6
 8001e0c:	f009 ff5e 	bl	800bccc <sniprintf>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001e18:	4413      	add	r3, r2
 8001e1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				delay_time = 1000;
 8001e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
				break;
 8001e26:	e10b      	b.n	8002040 <uart1_task+0x350>
			case WARNING:
				tx_len = snprintf(tx_buffer, 256, 			"G: X:%.4fdps | Y:%.4fdps | Z:%.4fdps \r\n",
									gyro_data.x, gyro_data.y, gyro_data.z);
 8001e28:	4b3e      	ldr	r3, [pc, #248]	; (8001f24 <uart1_task+0x234>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
				tx_len = snprintf(tx_buffer, 256, 			"G: X:%.4fdps | Y:%.4fdps | Z:%.4fdps \r\n",
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb8b 	bl	8000548 <__aeabi_f2d>
 8001e32:	4604      	mov	r4, r0
 8001e34:	460d      	mov	r5, r1
									gyro_data.x, gyro_data.y, gyro_data.z);
 8001e36:	4b3b      	ldr	r3, [pc, #236]	; (8001f24 <uart1_task+0x234>)
 8001e38:	685b      	ldr	r3, [r3, #4]
				tx_len = snprintf(tx_buffer, 256, 			"G: X:%.4fdps | Y:%.4fdps | Z:%.4fdps \r\n",
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fb84 	bl	8000548 <__aeabi_f2d>
 8001e40:	4680      	mov	r8, r0
 8001e42:	4689      	mov	r9, r1
									gyro_data.x, gyro_data.y, gyro_data.z);
 8001e44:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <uart1_task+0x234>)
 8001e46:	689b      	ldr	r3, [r3, #8]
				tx_len = snprintf(tx_buffer, 256, 			"G: X:%.4fdps | Y:%.4fdps | Z:%.4fdps \r\n",
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fb7d 	bl	8000548 <__aeabi_f2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	f107 0010 	add.w	r0, r7, #16
 8001e56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001e5a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001e5e:	e9cd 4500 	strd	r4, r5, [sp]
 8001e62:	4a31      	ldr	r2, [pc, #196]	; (8001f28 <uart1_task+0x238>)
 8001e64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e68:	f009 ff30 	bl	800bccc <sniprintf>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				tx_len += snprintf(tx_buffer+tx_len, 256,	 "A: X:%.4fg  | Y:%.4fg   | Z:%.4fg \r\n",
 8001e72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001e76:	f107 0210 	add.w	r2, r7, #16
 8001e7a:	18d6      	adds	r6, r2, r3
									accel_data.x, accel_data.y, accel_data.z);
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <uart1_task+0x23c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
				tx_len += snprintf(tx_buffer+tx_len, 256,	 "A: X:%.4fg  | Y:%.4fg   | Z:%.4fg \r\n",
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb61 	bl	8000548 <__aeabi_f2d>
 8001e86:	4604      	mov	r4, r0
 8001e88:	460d      	mov	r5, r1
									accel_data.x, accel_data.y, accel_data.z);
 8001e8a:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <uart1_task+0x23c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
				tx_len += snprintf(tx_buffer+tx_len, 256,	 "A: X:%.4fg  | Y:%.4fg   | Z:%.4fg \r\n",
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fb5a 	bl	8000548 <__aeabi_f2d>
 8001e94:	4680      	mov	r8, r0
 8001e96:	4689      	mov	r9, r1
									accel_data.x, accel_data.y, accel_data.z);
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <uart1_task+0x23c>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
				tx_len += snprintf(tx_buffer+tx_len, 256,	 "A: X:%.4fg  | Y:%.4fg   | Z:%.4fg \r\n",
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fb53 	bl	8000548 <__aeabi_f2d>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001eaa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001eae:	e9cd 4500 	strd	r4, r5, [sp]
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <uart1_task+0x240>)
 8001eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb8:	4630      	mov	r0, r6
 8001eba:	f009 ff07 	bl	800bccc <sniprintf>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				tx_len += snprintf(tx_buffer+tx_len, 256, 	"P: %.4fpa    | H:%.4f\r\n\n",
 8001ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001ed0:	f107 0210 	add.w	r2, r7, #16
 8001ed4:	18d6      	adds	r6, r2, r3
									pressure_data.pressure, temphum_data.humidity);
 8001ed6:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <uart1_task+0x244>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
				tx_len += snprintf(tx_buffer+tx_len, 256, 	"P: %.4fpa    | H:%.4f\r\n\n",
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fb34 	bl	8000548 <__aeabi_f2d>
 8001ee0:	4604      	mov	r4, r0
 8001ee2:	460d      	mov	r5, r1
									pressure_data.pressure, temphum_data.humidity);
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <uart1_task+0x248>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
				tx_len += snprintf(tx_buffer+tx_len, 256, 	"P: %.4fpa    | H:%.4f\r\n\n",
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fb2d 	bl	8000548 <__aeabi_f2d>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ef6:	e9cd 4500 	strd	r4, r5, [sp]
 8001efa:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <uart1_task+0x24c>)
 8001efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f00:	4630      	mov	r0, r6
 8001f02:	f009 fee3 	bl	800bccc <sniprintf>
 8001f06:	4603      	mov	r3, r0
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001f0e:	4413      	add	r3, r2
 8001f10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				delay_time = 1000;
 8001f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f18:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
				break;
 8001f1c:	e090      	b.n	8002040 <uart1_task+0x350>
 8001f1e:	bf00      	nop
 8001f20:	20000bc8 	.word	0x20000bc8
 8001f24:	20000bbc 	.word	0x20000bbc
 8001f28:	0800f648 	.word	0x0800f648
 8001f2c:	20000bb0 	.word	0x20000bb0
 8001f30:	0800f670 	.word	0x0800f670
 8001f34:	20000bac 	.word	0x20000bac
 8001f38:	20000ba4 	.word	0x20000ba4
 8001f3c:	0800f698 	.word	0x0800f698
			case BATTLE:
				tx_len = snprintf(tx_buffer, 256, 			"G: X:%.4fdps | Y:%.4fdps | Z:%.4fdps \r\n",
									gyro_data.x, gyro_data.y, gyro_data.z);
 8001f40:	4b48      	ldr	r3, [pc, #288]	; (8002064 <uart1_task+0x374>)
 8001f42:	681b      	ldr	r3, [r3, #0]
				tx_len = snprintf(tx_buffer, 256, 			"G: X:%.4fdps | Y:%.4fdps | Z:%.4fdps \r\n",
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe faff 	bl	8000548 <__aeabi_f2d>
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	460d      	mov	r5, r1
									gyro_data.x, gyro_data.y, gyro_data.z);
 8001f4e:	4b45      	ldr	r3, [pc, #276]	; (8002064 <uart1_task+0x374>)
 8001f50:	685b      	ldr	r3, [r3, #4]
				tx_len = snprintf(tx_buffer, 256, 			"G: X:%.4fdps | Y:%.4fdps | Z:%.4fdps \r\n",
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe faf8 	bl	8000548 <__aeabi_f2d>
 8001f58:	4680      	mov	r8, r0
 8001f5a:	4689      	mov	r9, r1
									gyro_data.x, gyro_data.y, gyro_data.z);
 8001f5c:	4b41      	ldr	r3, [pc, #260]	; (8002064 <uart1_task+0x374>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
				tx_len = snprintf(tx_buffer, 256, 			"G: X:%.4fdps | Y:%.4fdps | Z:%.4fdps \r\n",
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe faf1 	bl	8000548 <__aeabi_f2d>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	f107 0010 	add.w	r0, r7, #16
 8001f6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f72:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001f76:	e9cd 4500 	strd	r4, r5, [sp]
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <uart1_task+0x378>)
 8001f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f80:	f009 fea4 	bl	800bccc <sniprintf>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				tx_len += snprintf(tx_buffer+tx_len, 256,	 "A: X:%.4fg  | Y:%.4fg   | Z:%.4fg \r\n",
 8001f8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001f8e:	f107 0210 	add.w	r2, r7, #16
 8001f92:	18d6      	adds	r6, r2, r3
									accel_data.x, accel_data.y, accel_data.z);
 8001f94:	4b35      	ldr	r3, [pc, #212]	; (800206c <uart1_task+0x37c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
				tx_len += snprintf(tx_buffer+tx_len, 256,	 "A: X:%.4fg  | Y:%.4fg   | Z:%.4fg \r\n",
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fad5 	bl	8000548 <__aeabi_f2d>
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	460d      	mov	r5, r1
									accel_data.x, accel_data.y, accel_data.z);
 8001fa2:	4b32      	ldr	r3, [pc, #200]	; (800206c <uart1_task+0x37c>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
				tx_len += snprintf(tx_buffer+tx_len, 256,	 "A: X:%.4fg  | Y:%.4fg   | Z:%.4fg \r\n",
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe face 	bl	8000548 <__aeabi_f2d>
 8001fac:	4680      	mov	r8, r0
 8001fae:	4689      	mov	r9, r1
									accel_data.x, accel_data.y, accel_data.z);
 8001fb0:	4b2e      	ldr	r3, [pc, #184]	; (800206c <uart1_task+0x37c>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
				tx_len += snprintf(tx_buffer+tx_len, 256,	 "A: X:%.4fg  | Y:%.4fg   | Z:%.4fg \r\n",
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fac7 	bl	8000548 <__aeabi_f2d>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001fc2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001fc6:	e9cd 4500 	strd	r4, r5, [sp]
 8001fca:	4a29      	ldr	r2, [pc, #164]	; (8002070 <uart1_task+0x380>)
 8001fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd0:	4630      	mov	r0, r6
 8001fd2:	f009 fe7b 	bl	800bccc <sniprintf>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001fde:	4413      	add	r3, r2
 8001fe0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				tx_len += snprintf(tx_buffer+tx_len, 256, 	"P: %.4fpa    | H:%.4f\r\n\n",
 8001fe4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001fe8:	f107 0210 	add.w	r2, r7, #16
 8001fec:	18d6      	adds	r6, r2, r3
									pressure_data.pressure, temphum_data.humidity);
 8001fee:	4b21      	ldr	r3, [pc, #132]	; (8002074 <uart1_task+0x384>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
				tx_len += snprintf(tx_buffer+tx_len, 256, 	"P: %.4fpa    | H:%.4f\r\n\n",
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe faa8 	bl	8000548 <__aeabi_f2d>
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	460d      	mov	r5, r1
									pressure_data.pressure, temphum_data.humidity);
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <uart1_task+0x388>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
				tx_len += snprintf(tx_buffer+tx_len, 256, 	"P: %.4fpa    | H:%.4f\r\n\n",
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faa1 	bl	8000548 <__aeabi_f2d>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800200e:	e9cd 4500 	strd	r4, r5, [sp]
 8002012:	4a1a      	ldr	r2, [pc, #104]	; (800207c <uart1_task+0x38c>)
 8002014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002018:	4630      	mov	r0, r6
 800201a:	f009 fe57 	bl	800bccc <sniprintf>
 800201e:	4603      	mov	r3, r0
 8002020:	b2da      	uxtb	r2, r3
 8002022:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002026:	4413      	add	r3, r2
 8002028:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				delay_time = 1000;
 800202c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002030:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
				break;
 8002034:	e004      	b.n	8002040 <uart1_task+0x350>
			default:
				delay_time = 1000;
 8002036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
				break;
 800203e:	bf00      	nop


		}


		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)tx_buffer,tx_len);
 8002040:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002044:	b29a      	uxth	r2, r3
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	4619      	mov	r1, r3
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <uart1_task+0x390>)
 800204e:	f004 fbd1 	bl	80067f4 <HAL_UART_Transmit_DMA>
		vTaskDelayUntil(&start_time,delay_time);
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800205a:	4618      	mov	r0, r3
 800205c:	f006 fe96 	bl	8008d8c <vTaskDelayUntil>
		start_time = xTaskGetTickCount();
 8002060:	e652      	b.n	8001d08 <uart1_task+0x18>
 8002062:	bf00      	nop
 8002064:	20000bbc 	.word	0x20000bbc
 8002068:	0800f648 	.word	0x0800f648
 800206c:	20000bb0 	.word	0x20000bb0
 8002070:	0800f670 	.word	0x0800f670
 8002074:	20000bac 	.word	0x20000bac
 8002078:	20000ba4 	.word	0x20000ba4
 800207c:	0800f698 	.word	0x0800f698
 8002080:	20000a90 	.word	0x20000a90

08002084 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <I2Cx_MspInit+0xa8>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002090:	4a26      	ldr	r2, [pc, #152]	; (800212c <I2Cx_MspInit+0xa8>)
 8002092:	f043 0302 	orr.w	r3, r3, #2
 8002096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <I2Cx_MspInit+0xa8>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80020a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020a8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80020aa:	2312      	movs	r3, #18
 80020ac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80020b6:	2304      	movs	r3, #4
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	481b      	ldr	r0, [pc, #108]	; (8002130 <I2Cx_MspInit+0xac>)
 80020c2:	f000 ff93 	bl	8002fec <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80020c6:	f107 0314 	add.w	r3, r7, #20
 80020ca:	4619      	mov	r1, r3
 80020cc:	4818      	ldr	r0, [pc, #96]	; (8002130 <I2Cx_MspInit+0xac>)
 80020ce:	f000 ff8d 	bl	8002fec <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <I2Cx_MspInit+0xa8>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	4a15      	ldr	r2, [pc, #84]	; (800212c <I2Cx_MspInit+0xa8>)
 80020d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020dc:	6593      	str	r3, [r2, #88]	; 0x58
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <I2Cx_MspInit+0xa8>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <I2Cx_MspInit+0xa8>)
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	4a0f      	ldr	r2, [pc, #60]	; (800212c <I2Cx_MspInit+0xa8>)
 80020f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020f4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <I2Cx_MspInit+0xa8>)
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	4a0c      	ldr	r2, [pc, #48]	; (800212c <I2Cx_MspInit+0xa8>)
 80020fc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002100:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	210f      	movs	r1, #15
 8002106:	2021      	movs	r0, #33	; 0x21
 8002108:	f000 fcd0 	bl	8002aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800210c:	2021      	movs	r0, #33	; 0x21
 800210e:	f000 fce9 	bl	8002ae4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	210f      	movs	r1, #15
 8002116:	2022      	movs	r0, #34	; 0x22
 8002118:	f000 fcc8 	bl	8002aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800211c:	2022      	movs	r0, #34	; 0x22
 800211e:	f000 fce1 	bl	8002ae4 <HAL_NVIC_EnableIRQ>
}
 8002122:	bf00      	nop
 8002124:	3728      	adds	r7, #40	; 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	48000400 	.word	0x48000400

08002134 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <I2Cx_Init+0x54>)
 8002140:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a11      	ldr	r2, [pc, #68]	; (800218c <I2Cx_Init+0x58>)
 8002146:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff89 	bl	8002084 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f001 f8e4 	bl	8003340 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002178:	2100      	movs	r1, #0
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f001 fe86 	bl	8003e8c <HAL_I2CEx_ConfigAnalogFilter>
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40005800 	.word	0x40005800
 800218c:	00702681 	.word	0x00702681

08002190 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af04      	add	r7, sp, #16
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	4608      	mov	r0, r1
 800219a:	4611      	mov	r1, r2
 800219c:	461a      	mov	r2, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	72fb      	strb	r3, [r7, #11]
 80021a2:	460b      	mov	r3, r1
 80021a4:	813b      	strh	r3, [r7, #8]
 80021a6:	4613      	mov	r3, r2
 80021a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80021ae:	7afb      	ldrb	r3, [r7, #11]
 80021b0:	b299      	uxth	r1, r3
 80021b2:	88f8      	ldrh	r0, [r7, #6]
 80021b4:	893a      	ldrh	r2, [r7, #8]
 80021b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ba:	9302      	str	r3, [sp, #8]
 80021bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	4603      	mov	r3, r0
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f001 faa0 	bl	800370c <HAL_I2C_Mem_Read>
 80021cc:	4603      	mov	r3, r0
 80021ce:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80021d0:	7dfb      	ldrb	r3, [r7, #23]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d004      	beq.n	80021e0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80021d6:	7afb      	ldrb	r3, [r7, #11]
 80021d8:	4619      	mov	r1, r3
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f832 	bl	8002244 <I2Cx_Error>
  }
  return status;
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b08a      	sub	sp, #40	; 0x28
 80021ee:	af04      	add	r7, sp, #16
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	4608      	mov	r0, r1
 80021f4:	4611      	mov	r1, r2
 80021f6:	461a      	mov	r2, r3
 80021f8:	4603      	mov	r3, r0
 80021fa:	72fb      	strb	r3, [r7, #11]
 80021fc:	460b      	mov	r3, r1
 80021fe:	813b      	strh	r3, [r7, #8]
 8002200:	4613      	mov	r3, r2
 8002202:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002208:	7afb      	ldrb	r3, [r7, #11]
 800220a:	b299      	uxth	r1, r3
 800220c:	88f8      	ldrh	r0, [r7, #6]
 800220e:	893a      	ldrh	r2, [r7, #8]
 8002210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	4603      	mov	r3, r0
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f001 f95f 	bl	80034e4 <HAL_I2C_Mem_Write>
 8002226:	4603      	mov	r3, r0
 8002228:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800222a:	7dfb      	ldrb	r3, [r7, #23]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d004      	beq.n	800223a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002230:	7afb      	ldrb	r3, [r7, #11]
 8002232:	4619      	mov	r1, r3
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f805 	bl	8002244 <I2Cx_Error>
  }
  return status;
 800223a:	7dfb      	ldrb	r3, [r7, #23]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f001 f904 	bl	800345e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ff6c 	bl	8002134 <I2Cx_Init>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <SENSOR_IO_Init+0x10>)
 800226a:	f7ff ff63 	bl	8002134 <I2Cx_Init>
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000bcc 	.word	0x20000bcc

08002278 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af02      	add	r7, sp, #8
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
 8002282:	460b      	mov	r3, r1
 8002284:	71bb      	strb	r3, [r7, #6]
 8002286:	4613      	mov	r3, r2
 8002288:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800228a:	79bb      	ldrb	r3, [r7, #6]
 800228c:	b29a      	uxth	r2, r3
 800228e:	79f9      	ldrb	r1, [r7, #7]
 8002290:	2301      	movs	r3, #1
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	1d7b      	adds	r3, r7, #5
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2301      	movs	r3, #1
 800229a:	4803      	ldr	r0, [pc, #12]	; (80022a8 <SENSOR_IO_Write+0x30>)
 800229c:	f7ff ffa5 	bl	80021ea <I2Cx_WriteMultiple>
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000bcc 	.word	0x20000bcc

080022ac <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	4603      	mov	r3, r0
 80022b4:	460a      	mov	r2, r1
 80022b6:	71fb      	strb	r3, [r7, #7]
 80022b8:	4613      	mov	r3, r2
 80022ba:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80022c0:	79bb      	ldrb	r3, [r7, #6]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	79f9      	ldrb	r1, [r7, #7]
 80022c6:	2301      	movs	r3, #1
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	f107 030f 	add.w	r3, r7, #15
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2301      	movs	r3, #1
 80022d2:	4804      	ldr	r0, [pc, #16]	; (80022e4 <SENSOR_IO_Read+0x38>)
 80022d4:	f7ff ff5c 	bl	8002190 <I2Cx_ReadMultiple>

  return read_value;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000bcc 	.word	0x20000bcc

080022e8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	603a      	str	r2, [r7, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
 80022f6:	460b      	mov	r3, r1
 80022f8:	71bb      	strb	r3, [r7, #6]
 80022fa:	4613      	mov	r3, r2
 80022fc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80022fe:	79bb      	ldrb	r3, [r7, #6]
 8002300:	b29a      	uxth	r2, r3
 8002302:	79f9      	ldrb	r1, [r7, #7]
 8002304:	88bb      	ldrh	r3, [r7, #4]
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2301      	movs	r3, #1
 800230e:	4804      	ldr	r0, [pc, #16]	; (8002320 <SENSOR_IO_ReadMultiple+0x38>)
 8002310:	f7ff ff3e 	bl	8002190 <I2Cx_ReadMultiple>
 8002314:	4603      	mov	r3, r0
 8002316:	b29b      	uxth	r3, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000bcc 	.word	0x20000bcc

08002324 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800232e:	2300      	movs	r3, #0
 8002330:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <BSP_ACCELERO_Init+0x74>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	4798      	blx	r3
 8002338:	4603      	mov	r3, r0
 800233a:	2b6a      	cmp	r3, #106	; 0x6a
 800233c:	d002      	beq.n	8002344 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	e024      	b.n	800238e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <BSP_ACCELERO_Init+0x78>)
 8002346:	4a14      	ldr	r2, [pc, #80]	; (8002398 <BSP_ACCELERO_Init+0x74>)
 8002348:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800234a:	2330      	movs	r3, #48	; 0x30
 800234c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8002352:	2300      	movs	r3, #0
 8002354:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002356:	2340      	movs	r3, #64	; 0x40
 8002358:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8002362:	797a      	ldrb	r2, [r7, #5]
 8002364:	7abb      	ldrb	r3, [r7, #10]
 8002366:	4313      	orrs	r3, r2
 8002368:	b2db      	uxtb	r3, r3
 800236a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800236c:	7a3b      	ldrb	r3, [r7, #8]
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	b2db      	uxtb	r3, r3
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	b21a      	sxth	r2, r3
 8002378:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	b21b      	sxth	r3, r3
 8002380:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <BSP_ACCELERO_Init+0x78>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	89ba      	ldrh	r2, [r7, #12]
 800238a:	4610      	mov	r0, r2
 800238c:	4798      	blx	r3
  }  

  return ret;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000004 	.word	0x20000004
 800239c:	20000c20 	.word	0x20000c20

080023a0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d009      	beq.n	80023c4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
    }
  }
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000c20 	.word	0x20000c20

080023d0 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80023da:	2300      	movs	r3, #0
 80023dc:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <BSP_GYRO_Init+0x7c>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	4798      	blx	r3
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b6a      	cmp	r3, #106	; 0x6a
 80023e8:	d002      	beq.n	80023f0 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	e028      	b.n	8002442 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <BSP_GYRO_Init+0x80>)
 80023f2:	4a16      	ldr	r2, [pc, #88]	; (800244c <BSP_GYRO_Init+0x7c>)
 80023f4:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80023fa:	2330      	movs	r3, #48	; 0x30
 80023fc:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002406:	2340      	movs	r3, #64	; 0x40
 8002408:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800240e:	230c      	movs	r3, #12
 8002410:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8002412:	7aba      	ldrb	r2, [r7, #10]
 8002414:	797b      	ldrb	r3, [r7, #5]
 8002416:	4313      	orrs	r3, r2
 8002418:	b2db      	uxtb	r3, r3
 800241a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800241c:	7a3b      	ldrb	r3, [r7, #8]
 800241e:	f043 0304 	orr.w	r3, r3, #4
 8002422:	b2db      	uxtb	r3, r3
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	b21a      	sxth	r2, r3
 8002428:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	b21b      	sxth	r3, r3
 8002430:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <BSP_GYRO_Init+0x80>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	89ba      	ldrh	r2, [r7, #12]
 800243a:	4610      	mov	r0, r2
 800243c:	4798      	blx	r3
    
    ret = GYRO_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002442:	7bfb      	ldrb	r3, [r7, #15]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000038 	.word	0x20000038
 8002450:	20000c24 	.word	0x20000c24

08002454 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002462:	2110      	movs	r1, #16
 8002464:	20d4      	movs	r0, #212	; 0xd4
 8002466:	f7ff ff21 	bl	80022ac <SENSOR_IO_Read>
 800246a:	4603      	mov	r3, r0
 800246c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002472:	7bbb      	ldrb	r3, [r7, #14]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800247a:	7bba      	ldrb	r2, [r7, #14]
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	4313      	orrs	r3, r2
 8002480:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002482:	7bbb      	ldrb	r3, [r7, #14]
 8002484:	461a      	mov	r2, r3
 8002486:	2110      	movs	r1, #16
 8002488:	20d4      	movs	r0, #212	; 0xd4
 800248a:	f7ff fef5 	bl	8002278 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800248e:	2112      	movs	r1, #18
 8002490:	20d4      	movs	r0, #212	; 0xd4
 8002492:	f7ff ff0b 	bl	80022ac <SENSOR_IO_Read>
 8002496:	4603      	mov	r3, r0
 8002498:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	b29b      	uxth	r3, r3
 80024a0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80024a2:	7bbb      	ldrb	r3, [r7, #14]
 80024a4:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80024a8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80024aa:	7bba      	ldrb	r2, [r7, #14]
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80024b2:	7bbb      	ldrb	r3, [r7, #14]
 80024b4:	461a      	mov	r2, r3
 80024b6:	2112      	movs	r1, #18
 80024b8:	20d4      	movs	r0, #212	; 0xd4
 80024ba:	f7ff fedd 	bl	8002278 <SENSOR_IO_Write>


  /* Read INT1_CTRL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 80024be:	210d      	movs	r1, #13
 80024c0:	20d4      	movs	r0, #212	; 0xd4
 80024c2:	f7ff fef3 	bl	80022ac <SENSOR_IO_Read>
 80024c6:	4603      	mov	r3, r0
 80024c8:	73bb      	strb	r3, [r7, #14]
  tmp |= (1 | 1<< 1); //set ACC drdy and gyro drdy on int pin1
 80024ca:	7bbb      	ldrb	r3, [r7, #14]
 80024cc:	f043 0303 	orr.w	r3, r3, #3
 80024d0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 80024d2:	7bbb      	ldrb	r3, [r7, #14]
 80024d4:	461a      	mov	r2, r3
 80024d6:	210d      	movs	r1, #13
 80024d8:	20d4      	movs	r0, #212	; 0xd4
 80024da:	f7ff fecd 	bl	8002278 <SENSOR_IO_Write>
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80024ec:	2300      	movs	r3, #0
 80024ee:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80024f0:	2110      	movs	r1, #16
 80024f2:	20d4      	movs	r0, #212	; 0xd4
 80024f4:	f7ff feda 	bl	80022ac <SENSOR_IO_Read>
 80024f8:	4603      	mov	r3, r0
 80024fa:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	461a      	mov	r2, r3
 8002508:	2110      	movs	r1, #16
 800250a:	20d4      	movs	r0, #212	; 0xd4
 800250c:	f7ff feb4 	bl	8002278 <SENSOR_IO_Write>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800251c:	f7ff fea2 	bl	8002264 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002520:	210f      	movs	r1, #15
 8002522:	20d4      	movs	r0, #212	; 0xd4
 8002524:	f7ff fec2 	bl	80022ac <SENSOR_IO_Read>
 8002528:	4603      	mov	r3, r0
}
 800252a:	4618      	mov	r0, r3
 800252c:	bd80      	pop	{r7, pc}

0800252e <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800253c:	2115      	movs	r1, #21
 800253e:	20d4      	movs	r0, #212	; 0xd4
 8002540:	f7ff feb4 	bl	80022ac <SENSOR_IO_Read>
 8002544:	4603      	mov	r3, r0
 8002546:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	f023 0310 	bic.w	r3, r3, #16
 800254e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	f043 0310 	orr.w	r3, r3, #16
 800255c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	461a      	mov	r2, r3
 8002562:	2115      	movs	r1, #21
 8002564:	20d4      	movs	r0, #212	; 0xd4
 8002566:	f7ff fe87 	bl	8002278 <SENSOR_IO_Write>
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800257c:	2300      	movs	r3, #0
 800257e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800258a:	2110      	movs	r1, #16
 800258c:	20d4      	movs	r0, #212	; 0xd4
 800258e:	f7ff fe8d 	bl	80022ac <SENSOR_IO_Read>
 8002592:	4603      	mov	r3, r0
 8002594:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002596:	f107 0208 	add.w	r2, r7, #8
 800259a:	2306      	movs	r3, #6
 800259c:	2128      	movs	r1, #40	; 0x28
 800259e:	20d4      	movs	r0, #212	; 0xd4
 80025a0:	f7ff fea2 	bl	80022e8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	77fb      	strb	r3, [r7, #31]
 80025a8:	e01c      	b.n	80025e4 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80025aa:	7ffb      	ldrb	r3, [r7, #31]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	3301      	adds	r3, #1
 80025b0:	3320      	adds	r3, #32
 80025b2:	443b      	add	r3, r7
 80025b4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	b29a      	uxth	r2, r3
 80025be:	7ffb      	ldrb	r3, [r7, #31]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	3320      	adds	r3, #32
 80025c4:	443b      	add	r3, r7
 80025c6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	7ffb      	ldrb	r3, [r7, #31]
 80025d2:	b212      	sxth	r2, r2
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	3320      	adds	r3, #32
 80025d8:	443b      	add	r3, r7
 80025da:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80025de:	7ffb      	ldrb	r3, [r7, #31]
 80025e0:	3301      	adds	r3, #1
 80025e2:	77fb      	strb	r3, [r7, #31]
 80025e4:	7ffb      	ldrb	r3, [r7, #31]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d9df      	bls.n	80025aa <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b0c      	cmp	r3, #12
 80025f2:	d829      	bhi.n	8002648 <LSM6DSL_AccReadXYZ+0xd4>
 80025f4:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <LSM6DSL_AccReadXYZ+0x88>)
 80025f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fa:	bf00      	nop
 80025fc:	08002631 	.word	0x08002631
 8002600:	08002649 	.word	0x08002649
 8002604:	08002649 	.word	0x08002649
 8002608:	08002649 	.word	0x08002649
 800260c:	08002643 	.word	0x08002643
 8002610:	08002649 	.word	0x08002649
 8002614:	08002649 	.word	0x08002649
 8002618:	08002649 	.word	0x08002649
 800261c:	08002637 	.word	0x08002637
 8002620:	08002649 	.word	0x08002649
 8002624:	08002649 	.word	0x08002649
 8002628:	08002649 	.word	0x08002649
 800262c:	0800263d 	.word	0x0800263d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <LSM6DSL_AccReadXYZ+0x120>)
 8002632:	61bb      	str	r3, [r7, #24]
    break;
 8002634:	e008      	b.n	8002648 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <LSM6DSL_AccReadXYZ+0x124>)
 8002638:	61bb      	str	r3, [r7, #24]
    break;
 800263a:	e005      	b.n	8002648 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <LSM6DSL_AccReadXYZ+0x128>)
 800263e:	61bb      	str	r3, [r7, #24]
    break;
 8002640:	e002      	b.n	8002648 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <LSM6DSL_AccReadXYZ+0x12c>)
 8002644:	61bb      	str	r3, [r7, #24]
    break;    
 8002646:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002648:	2300      	movs	r3, #0
 800264a:	77fb      	strb	r3, [r7, #31]
 800264c:	e01a      	b.n	8002684 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800264e:	7ffb      	ldrb	r3, [r7, #31]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	3320      	adds	r3, #32
 8002654:	443b      	add	r3, r7
 8002656:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800265a:	ee07 3a90 	vmov	s15, r3
 800265e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002662:	edd7 7a06 	vldr	s15, [r7, #24]
 8002666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266a:	7ffb      	ldrb	r3, [r7, #31]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002676:	ee17 2a90 	vmov	r2, s15
 800267a:	b212      	sxth	r2, r2
 800267c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800267e:	7ffb      	ldrb	r3, [r7, #31]
 8002680:	3301      	adds	r3, #1
 8002682:	77fb      	strb	r3, [r7, #31]
 8002684:	7ffb      	ldrb	r3, [r7, #31]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d9e1      	bls.n	800264e <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800268a:	bf00      	nop
 800268c:	bf00      	nop
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	3d79db23 	.word	0x3d79db23
 8002698:	3df9db23 	.word	0x3df9db23
 800269c:	3e79db23 	.word	0x3e79db23
 80026a0:	3ef9db23 	.word	0x3ef9db23

080026a4 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80026b2:	2111      	movs	r1, #17
 80026b4:	20d4      	movs	r0, #212	; 0xd4
 80026b6:	f7ff fdf9 	bl	80022ac <SENSOR_IO_Read>
 80026ba:	4603      	mov	r3, r0
 80026bc:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80026c2:	7bbb      	ldrb	r3, [r7, #14]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80026ca:	7bba      	ldrb	r2, [r7, #14]
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80026d2:	7bbb      	ldrb	r3, [r7, #14]
 80026d4:	461a      	mov	r2, r3
 80026d6:	2111      	movs	r1, #17
 80026d8:	20d4      	movs	r0, #212	; 0xd4
 80026da:	f7ff fdcd 	bl	8002278 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80026de:	2112      	movs	r1, #18
 80026e0:	20d4      	movs	r0, #212	; 0xd4
 80026e2:	f7ff fde3 	bl	80022ac <SENSOR_IO_Read>
 80026e6:	4603      	mov	r3, r0
 80026e8:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80026f2:	7bbb      	ldrb	r3, [r7, #14]
 80026f4:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80026f8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80026fa:	7bba      	ldrb	r2, [r7, #14]
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	4313      	orrs	r3, r2
 8002700:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002702:	7bbb      	ldrb	r3, [r7, #14]
 8002704:	461a      	mov	r2, r3
 8002706:	2112      	movs	r1, #18
 8002708:	20d4      	movs	r0, #212	; 0xd4
 800270a:	f7ff fdb5 	bl	8002278 <SENSOR_IO_Write>
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800271c:	2300      	movs	r3, #0
 800271e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002720:	2111      	movs	r1, #17
 8002722:	20d4      	movs	r0, #212	; 0xd4
 8002724:	f7ff fdc2 	bl	80022ac <SENSOR_IO_Read>
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	461a      	mov	r2, r3
 8002738:	2111      	movs	r1, #17
 800273a:	20d4      	movs	r0, #212	; 0xd4
 800273c:	f7ff fd9c 	bl	8002278 <SENSOR_IO_Write>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800274c:	f7ff fd8a 	bl	8002264 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002750:	210f      	movs	r1, #15
 8002752:	20d4      	movs	r0, #212	; 0xd4
 8002754:	f7ff fdaa 	bl	80022ac <SENSOR_IO_Read>
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	bd80      	pop	{r7, pc}

0800275e <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800276c:	2116      	movs	r1, #22
 800276e:	20d4      	movs	r0, #212	; 0xd4
 8002770:	f7ff fd9c 	bl	80022ac <SENSOR_IO_Read>
 8002774:	4603      	mov	r3, r0
 8002776:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800277e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800278c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	461a      	mov	r2, r3
 8002792:	2116      	movs	r1, #22
 8002794:	20d4      	movs	r0, #212	; 0xd4
 8002796:	f7ff fd6f 	bl	8002278 <SENSOR_IO_Write>
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80027ba:	2111      	movs	r1, #17
 80027bc:	20d4      	movs	r0, #212	; 0xd4
 80027be:	f7ff fd75 	bl	80022ac <SENSOR_IO_Read>
 80027c2:	4603      	mov	r3, r0
 80027c4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80027c6:	f107 0208 	add.w	r2, r7, #8
 80027ca:	2306      	movs	r3, #6
 80027cc:	2122      	movs	r1, #34	; 0x22
 80027ce:	20d4      	movs	r0, #212	; 0xd4
 80027d0:	f7ff fd8a 	bl	80022e8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80027d4:	2300      	movs	r3, #0
 80027d6:	77fb      	strb	r3, [r7, #31]
 80027d8:	e01c      	b.n	8002814 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80027da:	7ffb      	ldrb	r3, [r7, #31]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	3301      	adds	r3, #1
 80027e0:	3320      	adds	r3, #32
 80027e2:	443b      	add	r3, r7
 80027e4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	7ffb      	ldrb	r3, [r7, #31]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	3320      	adds	r3, #32
 80027f4:	443b      	add	r3, r7
 80027f6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	b29a      	uxth	r2, r3
 8002800:	7ffb      	ldrb	r3, [r7, #31]
 8002802:	b212      	sxth	r2, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	3320      	adds	r3, #32
 8002808:	443b      	add	r3, r7
 800280a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800280e:	7ffb      	ldrb	r3, [r7, #31]
 8002810:	3301      	adds	r3, #1
 8002812:	77fb      	strb	r3, [r7, #31]
 8002814:	7ffb      	ldrb	r3, [r7, #31]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d9df      	bls.n	80027da <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b0c      	cmp	r3, #12
 8002822:	d829      	bhi.n	8002878 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8002824:	a201      	add	r2, pc, #4	; (adr r2, 800282c <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	08002861 	.word	0x08002861
 8002830:	08002879 	.word	0x08002879
 8002834:	08002879 	.word	0x08002879
 8002838:	08002879 	.word	0x08002879
 800283c:	08002867 	.word	0x08002867
 8002840:	08002879 	.word	0x08002879
 8002844:	08002879 	.word	0x08002879
 8002848:	08002879 	.word	0x08002879
 800284c:	0800286d 	.word	0x0800286d
 8002850:	08002879 	.word	0x08002879
 8002854:	08002879 	.word	0x08002879
 8002858:	08002879 	.word	0x08002879
 800285c:	08002873 	.word	0x08002873
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8002860:	4b16      	ldr	r3, [pc, #88]	; (80028bc <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8002862:	61bb      	str	r3, [r7, #24]
    break;
 8002864:	e008      	b.n	8002878 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8002868:	61bb      	str	r3, [r7, #24]
    break;
 800286a:	e005      	b.n	8002878 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800286e:	61bb      	str	r3, [r7, #24]
    break;
 8002870:	e002      	b.n	8002878 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8002874:	61bb      	str	r3, [r7, #24]
    break;    
 8002876:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002878:	2300      	movs	r3, #0
 800287a:	77fb      	strb	r3, [r7, #31]
 800287c:	e016      	b.n	80028ac <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800287e:	7ffb      	ldrb	r3, [r7, #31]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	3320      	adds	r3, #32
 8002884:	443b      	add	r3, r7
 8002886:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800288a:	ee07 3a90 	vmov	s15, r3
 800288e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002892:	7ffb      	ldrb	r3, [r7, #31]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	edd7 7a06 	vldr	s15, [r7, #24]
 800289e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a2:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80028a6:	7ffb      	ldrb	r3, [r7, #31]
 80028a8:	3301      	adds	r3, #1
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	7ffb      	ldrb	r3, [r7, #31]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d9e5      	bls.n	800287e <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	410c0000 	.word	0x410c0000
 80028c0:	418c0000 	.word	0x418c0000
 80028c4:	420c0000 	.word	0x420c0000
 80028c8:	428c0000 	.word	0x428c0000

080028cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d6:	2003      	movs	r0, #3
 80028d8:	f000 f8dd 	bl	8002a96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028dc:	200f      	movs	r0, #15
 80028de:	f7fe fd69 	bl	80013b4 <HAL_InitTick>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	71fb      	strb	r3, [r7, #7]
 80028ec:	e001      	b.n	80028f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028ee:	f7fe fd39 	bl	8001364 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028f2:	79fb      	ldrb	r3, [r7, #7]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x20>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_IncTick+0x24>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4413      	add	r3, r2
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <HAL_IncTick+0x24>)
 800290e:	6013      	str	r3, [r2, #0]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000070 	.word	0x20000070
 8002920:	20000c28 	.word	0x20000c28

08002924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return uwTick;
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <HAL_GetTick+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000c28 	.word	0x20000c28

0800293c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296e:	4a04      	ldr	r2, [pc, #16]	; (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	60d3      	str	r3, [r2, #12]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <__NVIC_GetPriorityGrouping+0x18>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	0a1b      	lsrs	r3, r3, #8
 800298e:	f003 0307 	and.w	r3, r3, #7
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	db0b      	blt.n	80029ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4907      	ldr	r1, [pc, #28]	; (80029d8 <__NVIC_EnableIRQ+0x38>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2001      	movs	r0, #1
 80029c2:	fa00 f202 	lsl.w	r2, r0, r2
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000e100 	.word	0xe000e100

080029dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	db0a      	blt.n	8002a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	490c      	ldr	r1, [pc, #48]	; (8002a28 <__NVIC_SetPriority+0x4c>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	440b      	add	r3, r1
 8002a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a04:	e00a      	b.n	8002a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4908      	ldr	r1, [pc, #32]	; (8002a2c <__NVIC_SetPriority+0x50>)
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	3b04      	subs	r3, #4
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	440b      	add	r3, r1
 8002a1a:	761a      	strb	r2, [r3, #24]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000e100 	.word	0xe000e100
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	; 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f1c3 0307 	rsb	r3, r3, #7
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	bf28      	it	cs
 8002a4e:	2304      	movcs	r3, #4
 8002a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d902      	bls.n	8002a60 <NVIC_EncodePriority+0x30>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3b03      	subs	r3, #3
 8002a5e:	e000      	b.n	8002a62 <NVIC_EncodePriority+0x32>
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	401a      	ands	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43d9      	mvns	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	4313      	orrs	r3, r2
         );
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3724      	adds	r7, #36	; 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ff4c 	bl	800293c <__NVIC_SetPriorityGrouping>
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002abe:	f7ff ff61 	bl	8002984 <__NVIC_GetPriorityGrouping>
 8002ac2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	6978      	ldr	r0, [r7, #20]
 8002aca:	f7ff ffb1 	bl	8002a30 <NVIC_EncodePriority>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff80 	bl	80029dc <__NVIC_SetPriority>
}
 8002adc:	bf00      	nop
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff54 	bl	80029a0 <__NVIC_EnableIRQ>
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e098      	b.n	8002c44 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b4d      	ldr	r3, [pc, #308]	; (8002c50 <HAL_DMA_Init+0x150>)
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d80f      	bhi.n	8002b3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b4b      	ldr	r3, [pc, #300]	; (8002c54 <HAL_DMA_Init+0x154>)
 8002b26:	4413      	add	r3, r2
 8002b28:	4a4b      	ldr	r2, [pc, #300]	; (8002c58 <HAL_DMA_Init+0x158>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	009a      	lsls	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a48      	ldr	r2, [pc, #288]	; (8002c5c <HAL_DMA_Init+0x15c>)
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b3c:	e00e      	b.n	8002b5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <HAL_DMA_Init+0x160>)
 8002b46:	4413      	add	r3, r2
 8002b48:	4a43      	ldr	r2, [pc, #268]	; (8002c58 <HAL_DMA_Init+0x158>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	009a      	lsls	r2, r3, #2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a42      	ldr	r2, [pc, #264]	; (8002c64 <HAL_DMA_Init+0x164>)
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bb6:	d039      	beq.n	8002c2c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	4a27      	ldr	r2, [pc, #156]	; (8002c5c <HAL_DMA_Init+0x15c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d11a      	bne.n	8002bf8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002bc2:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <HAL_DMA_Init+0x168>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	f003 031c 	and.w	r3, r3, #28
 8002bce:	210f      	movs	r1, #15
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	4924      	ldr	r1, [pc, #144]	; (8002c68 <HAL_DMA_Init+0x168>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002bdc:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <HAL_DMA_Init+0x168>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	f003 031c 	and.w	r3, r3, #28
 8002bec:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf0:	491d      	ldr	r1, [pc, #116]	; (8002c68 <HAL_DMA_Init+0x168>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
 8002bf6:	e019      	b.n	8002c2c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002bf8:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <HAL_DMA_Init+0x16c>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	f003 031c 	and.w	r3, r3, #28
 8002c04:	210f      	movs	r1, #15
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	4917      	ldr	r1, [pc, #92]	; (8002c6c <HAL_DMA_Init+0x16c>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002c12:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <HAL_DMA_Init+0x16c>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f003 031c 	and.w	r3, r3, #28
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	4911      	ldr	r1, [pc, #68]	; (8002c6c <HAL_DMA_Init+0x16c>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40020407 	.word	0x40020407
 8002c54:	bffdfff8 	.word	0xbffdfff8
 8002c58:	cccccccd 	.word	0xcccccccd
 8002c5c:	40020000 	.word	0x40020000
 8002c60:	bffdfbf8 	.word	0xbffdfbf8
 8002c64:	40020400 	.word	0x40020400
 8002c68:	400200a8 	.word	0x400200a8
 8002c6c:	400204a8 	.word	0x400204a8

08002c70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_DMA_Start_IT+0x20>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e04b      	b.n	8002d28 <HAL_DMA_Start_IT+0xb8>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d13a      	bne.n	8002d1a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	68b9      	ldr	r1, [r7, #8]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f95f 	bl	8002f8c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 020e 	orr.w	r2, r2, #14
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e00f      	b.n	8002d08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0204 	bic.w	r2, r2, #4
 8002cf6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 020a 	orr.w	r2, r2, #10
 8002d06:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e005      	b.n	8002d26 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
 8002d24:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d008      	beq.n	8002d5a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e022      	b.n	8002da0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 020e 	bic.w	r2, r2, #14
 8002d68:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0201 	bic.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f003 021c 	and.w	r2, r3, #28
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2101      	movs	r1, #1
 8002d88:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d005      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
 8002dce:	e029      	b.n	8002e24 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 020e 	bic.w	r2, r2, #14
 8002dde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	f003 021c 	and.w	r2, r3, #28
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002e02:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4798      	blx	r3
    }
  }
  return status;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	f003 031c 	and.w	r3, r3, #28
 8002e4e:	2204      	movs	r2, #4
 8002e50:	409a      	lsls	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d026      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x7a>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d021      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d107      	bne.n	8002e82 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0204 	bic.w	r2, r2, #4
 8002e80:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f003 021c 	and.w	r2, r3, #28
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	2104      	movs	r1, #4
 8002e90:	fa01 f202 	lsl.w	r2, r1, r2
 8002e94:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d071      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002ea6:	e06c      	b.n	8002f82 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	f003 031c 	and.w	r3, r3, #28
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d02e      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xec>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d029      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10b      	bne.n	8002eec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 020a 	bic.w	r2, r2, #10
 8002ee2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	f003 021c 	and.w	r2, r3, #28
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	2102      	movs	r1, #2
 8002efa:	fa01 f202 	lsl.w	r2, r1, r2
 8002efe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d038      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f18:	e033      	b.n	8002f82 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f003 031c 	and.w	r3, r3, #28
 8002f22:	2208      	movs	r2, #8
 8002f24:	409a      	lsls	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d02a      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x156>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d025      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 020e 	bic.w	r2, r2, #14
 8002f46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	f003 021c 	and.w	r2, r3, #28
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	2101      	movs	r1, #1
 8002f56:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d004      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
}
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f003 021c 	and.w	r2, r3, #28
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d108      	bne.n	8002fd0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fce:	e007      	b.n	8002fe0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	60da      	str	r2, [r3, #12]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffa:	e17f      	b.n	80032fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	2101      	movs	r1, #1
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	4013      	ands	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8171 	beq.w	80032f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d005      	beq.n	800302c <HAL_GPIO_Init+0x40>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d130      	bne.n	800308e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003062:	2201      	movs	r2, #1
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	f003 0201 	and.w	r2, r3, #1
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b03      	cmp	r3, #3
 8003098:	d118      	bne.n	80030cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030a0:	2201      	movs	r2, #1
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	08db      	lsrs	r3, r3, #3
 80030b6:	f003 0201 	and.w	r2, r3, #1
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d017      	beq.n	8003108 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	2203      	movs	r2, #3
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d123      	bne.n	800315c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	08da      	lsrs	r2, r3, #3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3208      	adds	r2, #8
 800311c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	220f      	movs	r2, #15
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	08da      	lsrs	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3208      	adds	r2, #8
 8003156:	6939      	ldr	r1, [r7, #16]
 8003158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	2203      	movs	r2, #3
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0203 	and.w	r2, r3, #3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80ac 	beq.w	80032f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319e:	4b5f      	ldr	r3, [pc, #380]	; (800331c <HAL_GPIO_Init+0x330>)
 80031a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a2:	4a5e      	ldr	r2, [pc, #376]	; (800331c <HAL_GPIO_Init+0x330>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6613      	str	r3, [r2, #96]	; 0x60
 80031aa:	4b5c      	ldr	r3, [pc, #368]	; (800331c <HAL_GPIO_Init+0x330>)
 80031ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031b6:	4a5a      	ldr	r2, [pc, #360]	; (8003320 <HAL_GPIO_Init+0x334>)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	3302      	adds	r3, #2
 80031be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	220f      	movs	r2, #15
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031e0:	d025      	beq.n	800322e <HAL_GPIO_Init+0x242>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4f      	ldr	r2, [pc, #316]	; (8003324 <HAL_GPIO_Init+0x338>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01f      	beq.n	800322a <HAL_GPIO_Init+0x23e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4e      	ldr	r2, [pc, #312]	; (8003328 <HAL_GPIO_Init+0x33c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d019      	beq.n	8003226 <HAL_GPIO_Init+0x23a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4d      	ldr	r2, [pc, #308]	; (800332c <HAL_GPIO_Init+0x340>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_GPIO_Init+0x236>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4c      	ldr	r2, [pc, #304]	; (8003330 <HAL_GPIO_Init+0x344>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00d      	beq.n	800321e <HAL_GPIO_Init+0x232>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4b      	ldr	r2, [pc, #300]	; (8003334 <HAL_GPIO_Init+0x348>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d007      	beq.n	800321a <HAL_GPIO_Init+0x22e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4a      	ldr	r2, [pc, #296]	; (8003338 <HAL_GPIO_Init+0x34c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_GPIO_Init+0x22a>
 8003212:	2306      	movs	r3, #6
 8003214:	e00c      	b.n	8003230 <HAL_GPIO_Init+0x244>
 8003216:	2307      	movs	r3, #7
 8003218:	e00a      	b.n	8003230 <HAL_GPIO_Init+0x244>
 800321a:	2305      	movs	r3, #5
 800321c:	e008      	b.n	8003230 <HAL_GPIO_Init+0x244>
 800321e:	2304      	movs	r3, #4
 8003220:	e006      	b.n	8003230 <HAL_GPIO_Init+0x244>
 8003222:	2303      	movs	r3, #3
 8003224:	e004      	b.n	8003230 <HAL_GPIO_Init+0x244>
 8003226:	2302      	movs	r3, #2
 8003228:	e002      	b.n	8003230 <HAL_GPIO_Init+0x244>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_GPIO_Init+0x244>
 800322e:	2300      	movs	r3, #0
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	f002 0203 	and.w	r2, r2, #3
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	4093      	lsls	r3, r2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003240:	4937      	ldr	r1, [pc, #220]	; (8003320 <HAL_GPIO_Init+0x334>)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	3302      	adds	r3, #2
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800324e:	4b3b      	ldr	r3, [pc, #236]	; (800333c <HAL_GPIO_Init+0x350>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003272:	4a32      	ldr	r2, [pc, #200]	; (800333c <HAL_GPIO_Init+0x350>)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003278:	4b30      	ldr	r3, [pc, #192]	; (800333c <HAL_GPIO_Init+0x350>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	43db      	mvns	r3, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800329c:	4a27      	ldr	r2, [pc, #156]	; (800333c <HAL_GPIO_Init+0x350>)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032a2:	4b26      	ldr	r3, [pc, #152]	; (800333c <HAL_GPIO_Init+0x350>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032c6:	4a1d      	ldr	r2, [pc, #116]	; (800333c <HAL_GPIO_Init+0x350>)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <HAL_GPIO_Init+0x350>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032f0:	4a12      	ldr	r2, [pc, #72]	; (800333c <HAL_GPIO_Init+0x350>)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	3301      	adds	r3, #1
 80032fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fa22 f303 	lsr.w	r3, r2, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	f47f ae78 	bne.w	8002ffc <HAL_GPIO_Init+0x10>
  }
}
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	40010000 	.word	0x40010000
 8003324:	48000400 	.word	0x48000400
 8003328:	48000800 	.word	0x48000800
 800332c:	48000c00 	.word	0x48000c00
 8003330:	48001000 	.word	0x48001000
 8003334:	48001400 	.word	0x48001400
 8003338:	48001800 	.word	0x48001800
 800333c:	40010400 	.word	0x40010400

08003340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e081      	b.n	8003456 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f8a8 	bl	80034bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2224      	movs	r2, #36	; 0x24
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003390:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	e006      	b.n	80033c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d104      	bne.n	80033da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69d9      	ldr	r1, [r3, #28]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1a      	ldr	r2, [r3, #32]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e021      	b.n	80034b4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	; 0x24
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f821 	bl	80034d0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	4608      	mov	r0, r1
 80034ee:	4611      	mov	r1, r2
 80034f0:	461a      	mov	r2, r3
 80034f2:	4603      	mov	r3, r0
 80034f4:	817b      	strh	r3, [r7, #10]
 80034f6:	460b      	mov	r3, r1
 80034f8:	813b      	strh	r3, [r7, #8]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b20      	cmp	r3, #32
 8003508:	f040 80f9 	bne.w	80036fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_I2C_Mem_Write+0x34>
 8003512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0ed      	b.n	8003700 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_I2C_Mem_Write+0x4e>
 800352e:	2302      	movs	r3, #2
 8003530:	e0e6      	b.n	8003700 <HAL_I2C_Mem_Write+0x21c>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800353a:	f7ff f9f3 	bl	8002924 <HAL_GetTick>
 800353e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2319      	movs	r3, #25
 8003546:	2201      	movs	r2, #1
 8003548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fac3 	bl	8003ad8 <I2C_WaitOnFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0d1      	b.n	8003700 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2221      	movs	r2, #33	; 0x21
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2240      	movs	r2, #64	; 0x40
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a3a      	ldr	r2, [r7, #32]
 8003576:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800357c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003584:	88f8      	ldrh	r0, [r7, #6]
 8003586:	893a      	ldrh	r2, [r7, #8]
 8003588:	8979      	ldrh	r1, [r7, #10]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	4603      	mov	r3, r0
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f9d3 	bl	8003940 <I2C_RequestMemoryWrite>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0a9      	b.n	8003700 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2bff      	cmp	r3, #255	; 0xff
 80035b4:	d90e      	bls.n	80035d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	22ff      	movs	r2, #255	; 0xff
 80035ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	8979      	ldrh	r1, [r7, #10]
 80035c4:	2300      	movs	r3, #0
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fc2b 	bl	8003e28 <I2C_TransferConfig>
 80035d2:	e00f      	b.n	80035f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	8979      	ldrh	r1, [r7, #10]
 80035e6:	2300      	movs	r3, #0
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fc1a 	bl	8003e28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 faad 	bl	8003b58 <I2C_WaitOnTXISFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e07b      	b.n	8003700 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	781a      	ldrb	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d034      	beq.n	80036ac <HAL_I2C_Mem_Write+0x1c8>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	d130      	bne.n	80036ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	2200      	movs	r2, #0
 8003652:	2180      	movs	r1, #128	; 0x80
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 fa3f 	bl	8003ad8 <I2C_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e04d      	b.n	8003700 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	2bff      	cmp	r3, #255	; 0xff
 800366c:	d90e      	bls.n	800368c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	22ff      	movs	r2, #255	; 0xff
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	b2da      	uxtb	r2, r3
 800367a:	8979      	ldrh	r1, [r7, #10]
 800367c:	2300      	movs	r3, #0
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fbcf 	bl	8003e28 <I2C_TransferConfig>
 800368a:	e00f      	b.n	80036ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	b2da      	uxtb	r2, r3
 800369c:	8979      	ldrh	r1, [r7, #10]
 800369e:	2300      	movs	r3, #0
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fbbe 	bl	8003e28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d19e      	bne.n	80035f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fa8c 	bl	8003bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e01a      	b.n	8003700 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2220      	movs	r2, #32
 80036d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <HAL_I2C_Mem_Write+0x224>)
 80036de:	400b      	ands	r3, r1
 80036e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
  }
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	fe00e800 	.word	0xfe00e800

0800370c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	4608      	mov	r0, r1
 8003716:	4611      	mov	r1, r2
 8003718:	461a      	mov	r2, r3
 800371a:	4603      	mov	r3, r0
 800371c:	817b      	strh	r3, [r7, #10]
 800371e:	460b      	mov	r3, r1
 8003720:	813b      	strh	r3, [r7, #8]
 8003722:	4613      	mov	r3, r2
 8003724:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b20      	cmp	r3, #32
 8003730:	f040 80fd 	bne.w	800392e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_I2C_Mem_Read+0x34>
 800373a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800373c:	2b00      	cmp	r3, #0
 800373e:	d105      	bne.n	800374c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003746:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0f1      	b.n	8003930 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_I2C_Mem_Read+0x4e>
 8003756:	2302      	movs	r3, #2
 8003758:	e0ea      	b.n	8003930 <HAL_I2C_Mem_Read+0x224>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003762:	f7ff f8df 	bl	8002924 <HAL_GetTick>
 8003766:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2319      	movs	r3, #25
 800376e:	2201      	movs	r2, #1
 8003770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f9af 	bl	8003ad8 <I2C_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0d5      	b.n	8003930 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2222      	movs	r2, #34	; 0x22
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2240      	movs	r2, #64	; 0x40
 8003790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a3a      	ldr	r2, [r7, #32]
 800379e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ac:	88f8      	ldrh	r0, [r7, #6]
 80037ae:	893a      	ldrh	r2, [r7, #8]
 80037b0:	8979      	ldrh	r1, [r7, #10]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	4603      	mov	r3, r0
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f913 	bl	80039e8 <I2C_RequestMemoryRead>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0ad      	b.n	8003930 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2bff      	cmp	r3, #255	; 0xff
 80037dc:	d90e      	bls.n	80037fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	22ff      	movs	r2, #255	; 0xff
 80037e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	8979      	ldrh	r1, [r7, #10]
 80037ec:	4b52      	ldr	r3, [pc, #328]	; (8003938 <HAL_I2C_Mem_Read+0x22c>)
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fb17 	bl	8003e28 <I2C_TransferConfig>
 80037fa:	e00f      	b.n	800381c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380a:	b2da      	uxtb	r2, r3
 800380c:	8979      	ldrh	r1, [r7, #10]
 800380e:	4b4a      	ldr	r3, [pc, #296]	; (8003938 <HAL_I2C_Mem_Read+0x22c>)
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 fb06 	bl	8003e28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	2200      	movs	r2, #0
 8003824:	2104      	movs	r1, #4
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f956 	bl	8003ad8 <I2C_WaitOnFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e07c      	b.n	8003930 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d034      	beq.n	80038dc <HAL_I2C_Mem_Read+0x1d0>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003876:	2b00      	cmp	r3, #0
 8003878:	d130      	bne.n	80038dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	2200      	movs	r2, #0
 8003882:	2180      	movs	r1, #128	; 0x80
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f927 	bl	8003ad8 <I2C_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e04d      	b.n	8003930 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2bff      	cmp	r3, #255	; 0xff
 800389c:	d90e      	bls.n	80038bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	22ff      	movs	r2, #255	; 0xff
 80038a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	8979      	ldrh	r1, [r7, #10]
 80038ac:	2300      	movs	r3, #0
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fab7 	bl	8003e28 <I2C_TransferConfig>
 80038ba:	e00f      	b.n	80038dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	8979      	ldrh	r1, [r7, #10]
 80038ce:	2300      	movs	r3, #0
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 faa6 	bl	8003e28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d19a      	bne.n	800381c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f974 	bl	8003bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e01a      	b.n	8003930 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2220      	movs	r2, #32
 8003900:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_I2C_Mem_Read+0x230>)
 800390e:	400b      	ands	r3, r1
 8003910:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	80002400 	.word	0x80002400
 800393c:	fe00e800 	.word	0xfe00e800

08003940 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	4608      	mov	r0, r1
 800394a:	4611      	mov	r1, r2
 800394c:	461a      	mov	r2, r3
 800394e:	4603      	mov	r3, r0
 8003950:	817b      	strh	r3, [r7, #10]
 8003952:	460b      	mov	r3, r1
 8003954:	813b      	strh	r3, [r7, #8]
 8003956:	4613      	mov	r3, r2
 8003958:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	8979      	ldrh	r1, [r7, #10]
 8003960:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <I2C_RequestMemoryWrite+0xa4>)
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fa5d 	bl	8003e28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	69b9      	ldr	r1, [r7, #24]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f8f0 	bl	8003b58 <I2C_WaitOnTXISFlagUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e02c      	b.n	80039dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d105      	bne.n	8003994 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003988:	893b      	ldrh	r3, [r7, #8]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	629a      	str	r2, [r3, #40]	; 0x28
 8003992:	e015      	b.n	80039c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003994:	893b      	ldrh	r3, [r7, #8]
 8003996:	0a1b      	lsrs	r3, r3, #8
 8003998:	b29b      	uxth	r3, r3
 800399a:	b2da      	uxtb	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	69b9      	ldr	r1, [r7, #24]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f8d6 	bl	8003b58 <I2C_WaitOnTXISFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e012      	b.n	80039dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039b6:	893b      	ldrh	r3, [r7, #8]
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	2200      	movs	r2, #0
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f884 	bl	8003ad8 <I2C_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	80002000 	.word	0x80002000

080039e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	4608      	mov	r0, r1
 80039f2:	4611      	mov	r1, r2
 80039f4:	461a      	mov	r2, r3
 80039f6:	4603      	mov	r3, r0
 80039f8:	817b      	strh	r3, [r7, #10]
 80039fa:	460b      	mov	r3, r1
 80039fc:	813b      	strh	r3, [r7, #8]
 80039fe:	4613      	mov	r3, r2
 8003a00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	8979      	ldrh	r1, [r7, #10]
 8003a08:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <I2C_RequestMemoryRead+0xa4>)
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fa0a 	bl	8003e28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	69b9      	ldr	r1, [r7, #24]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f89d 	bl	8003b58 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e02c      	b.n	8003a82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d105      	bne.n	8003a3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a2e:	893b      	ldrh	r3, [r7, #8]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
 8003a38:	e015      	b.n	8003a66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a3a:	893b      	ldrh	r3, [r7, #8]
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	69b9      	ldr	r1, [r7, #24]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f883 	bl	8003b58 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e012      	b.n	8003a82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a5c:	893b      	ldrh	r3, [r7, #8]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2140      	movs	r1, #64	; 0x40
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f831 	bl	8003ad8 <I2C_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	80002000 	.word	0x80002000

08003a90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d103      	bne.n	8003aae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d007      	beq.n	8003acc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	619a      	str	r2, [r3, #24]
  }
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ae8:	e022      	b.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d01e      	beq.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7fe ff17 	bl	8002924 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d113      	bne.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e00f      	b.n	8003b50 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d0cd      	beq.n	8003aea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b64:	e02c      	b.n	8003bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f870 	bl	8003c50 <I2C_IsErrorOccurred>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e02a      	b.n	8003bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b80:	d01e      	beq.n	8003bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b82:	f7fe fecf 	bl	8002924 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d302      	bcc.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d113      	bne.n	8003bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9c:	f043 0220 	orr.w	r2, r3, #32
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e007      	b.n	8003bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d1cb      	bne.n	8003b66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003be4:	e028      	b.n	8003c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f830 	bl	8003c50 <I2C_IsErrorOccurred>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e026      	b.n	8003c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfa:	f7fe fe93 	bl	8002924 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d302      	bcc.n	8003c10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d113      	bne.n	8003c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	f043 0220 	orr.w	r2, r3, #32
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e007      	b.n	8003c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d1cf      	bne.n	8003be6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	; 0x28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d075      	beq.n	8003d68 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2210      	movs	r2, #16
 8003c82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c84:	e056      	b.n	8003d34 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8c:	d052      	beq.n	8003d34 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c8e:	f7fe fe49 	bl	8002924 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d302      	bcc.n	8003ca4 <I2C_IsErrorOccurred+0x54>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d147      	bne.n	8003d34 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc6:	d12e      	bne.n	8003d26 <I2C_IsErrorOccurred+0xd6>
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cce:	d02a      	beq.n	8003d26 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d027      	beq.n	8003d26 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ce4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ce6:	f7fe fe1d 	bl	8002924 <HAL_GetTick>
 8003cea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cec:	e01b      	b.n	8003d26 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cee:	f7fe fe19 	bl	8002924 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b19      	cmp	r3, #25
 8003cfa:	d914      	bls.n	8003d26 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	f043 0220 	orr.w	r2, r3, #32
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d1dc      	bne.n	8003cee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d003      	beq.n	8003d4a <I2C_IsErrorOccurred+0xfa>
 8003d42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d09d      	beq.n	8003c86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d103      	bne.n	8003d5a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2220      	movs	r2, #32
 8003d58:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f043 0304 	orr.w	r3, r3, #4
 8003d60:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f043 0308 	orr.w	r3, r3, #8
 8003da2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f043 0302 	orr.w	r3, r3, #2
 8003dc4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d01c      	beq.n	8003e18 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7ff fe56 	bl	8003a90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6859      	ldr	r1, [r3, #4]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <I2C_IsErrorOccurred+0x1d4>)
 8003df0:	400b      	ands	r3, r1
 8003df2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3728      	adds	r7, #40	; 0x28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	fe00e800 	.word	0xfe00e800

08003e28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	607b      	str	r3, [r7, #4]
 8003e32:	460b      	mov	r3, r1
 8003e34:	817b      	strh	r3, [r7, #10]
 8003e36:	4613      	mov	r3, r2
 8003e38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e3a:	897b      	ldrh	r3, [r7, #10]
 8003e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e40:	7a7b      	ldrb	r3, [r7, #9]
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	0d5b      	lsrs	r3, r3, #21
 8003e62:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <I2C_TransferConfig+0x60>)
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	ea02 0103 	and.w	r1, r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	03ff63ff 	.word	0x03ff63ff

08003e8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d138      	bne.n	8003f14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e032      	b.n	8003f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2224      	movs	r2, #36	; 0x24
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ede:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6819      	ldr	r1, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
	...

08003f24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f28:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <HAL_PWREx_GetVoltageRange+0x18>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40007000 	.word	0x40007000

08003f40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4e:	d130      	bne.n	8003fb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f50:	4b23      	ldr	r3, [pc, #140]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f5c:	d038      	beq.n	8003fd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f5e:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f66:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f6e:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2232      	movs	r2, #50	; 0x32
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	4a1b      	ldr	r2, [pc, #108]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	0c9b      	lsrs	r3, r3, #18
 8003f80:	3301      	adds	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f84:	e002      	b.n	8003f8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f8c:	4b14      	ldr	r3, [pc, #80]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f98:	d102      	bne.n	8003fa0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f2      	bne.n	8003f86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fa0:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fac:	d110      	bne.n	8003fd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e00f      	b.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fb2:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fbe:	d007      	beq.n	8003fd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fc0:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fc8:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	20000000 	.word	0x20000000
 8003fe8:	431bde83 	.word	0x431bde83

08003fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e3ca      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ffe:	4b97      	ldr	r3, [pc, #604]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004008:	4b94      	ldr	r3, [pc, #592]	; (800425c <HAL_RCC_OscConfig+0x270>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80e4 	beq.w	80041e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <HAL_RCC_OscConfig+0x4a>
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b0c      	cmp	r3, #12
 800402a:	f040 808b 	bne.w	8004144 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b01      	cmp	r3, #1
 8004032:	f040 8087 	bne.w	8004144 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004036:	4b89      	ldr	r3, [pc, #548]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x62>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e3a2      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	4b82      	ldr	r3, [pc, #520]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d004      	beq.n	8004068 <HAL_RCC_OscConfig+0x7c>
 800405e:	4b7f      	ldr	r3, [pc, #508]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004066:	e005      	b.n	8004074 <HAL_RCC_OscConfig+0x88>
 8004068:	4b7c      	ldr	r3, [pc, #496]	; (800425c <HAL_RCC_OscConfig+0x270>)
 800406a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004074:	4293      	cmp	r3, r2
 8004076:	d223      	bcs.n	80040c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fd87 	bl	8004b90 <RCC_SetFlashLatencyFromMSIRange>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e383      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800408c:	4b73      	ldr	r3, [pc, #460]	; (800425c <HAL_RCC_OscConfig+0x270>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a72      	ldr	r2, [pc, #456]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004092:	f043 0308 	orr.w	r3, r3, #8
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	4b70      	ldr	r3, [pc, #448]	; (800425c <HAL_RCC_OscConfig+0x270>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	496d      	ldr	r1, [pc, #436]	; (800425c <HAL_RCC_OscConfig+0x270>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040aa:	4b6c      	ldr	r3, [pc, #432]	; (800425c <HAL_RCC_OscConfig+0x270>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	021b      	lsls	r3, r3, #8
 80040b8:	4968      	ldr	r1, [pc, #416]	; (800425c <HAL_RCC_OscConfig+0x270>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]
 80040be:	e025      	b.n	800410c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040c0:	4b66      	ldr	r3, [pc, #408]	; (800425c <HAL_RCC_OscConfig+0x270>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a65      	ldr	r2, [pc, #404]	; (800425c <HAL_RCC_OscConfig+0x270>)
 80040c6:	f043 0308 	orr.w	r3, r3, #8
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	4b63      	ldr	r3, [pc, #396]	; (800425c <HAL_RCC_OscConfig+0x270>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	4960      	ldr	r1, [pc, #384]	; (800425c <HAL_RCC_OscConfig+0x270>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040de:	4b5f      	ldr	r3, [pc, #380]	; (800425c <HAL_RCC_OscConfig+0x270>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	495b      	ldr	r1, [pc, #364]	; (800425c <HAL_RCC_OscConfig+0x270>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fd47 	bl	8004b90 <RCC_SetFlashLatencyFromMSIRange>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e343      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800410c:	f000 fc4a 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b52      	ldr	r3, [pc, #328]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	4950      	ldr	r1, [pc, #320]	; (8004260 <HAL_RCC_OscConfig+0x274>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
 8004128:	4a4e      	ldr	r2, [pc, #312]	; (8004264 <HAL_RCC_OscConfig+0x278>)
 800412a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800412c:	4b4e      	ldr	r3, [pc, #312]	; (8004268 <HAL_RCC_OscConfig+0x27c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f7fd f93f 	bl	80013b4 <HAL_InitTick>
 8004136:	4603      	mov	r3, r0
 8004138:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d052      	beq.n	80041e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	e327      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d032      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800414c:	4b43      	ldr	r3, [pc, #268]	; (800425c <HAL_RCC_OscConfig+0x270>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a42      	ldr	r2, [pc, #264]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004158:	f7fe fbe4 	bl	8002924 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004160:	f7fe fbe0 	bl	8002924 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e310      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004172:	4b3a      	ldr	r3, [pc, #232]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800417e:	4b37      	ldr	r3, [pc, #220]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a36      	ldr	r2, [pc, #216]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004184:	f043 0308 	orr.w	r3, r3, #8
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b34      	ldr	r3, [pc, #208]	; (800425c <HAL_RCC_OscConfig+0x270>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4931      	ldr	r1, [pc, #196]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004198:	4313      	orrs	r3, r2
 800419a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800419c:	4b2f      	ldr	r3, [pc, #188]	; (800425c <HAL_RCC_OscConfig+0x270>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	021b      	lsls	r3, r3, #8
 80041aa:	492c      	ldr	r1, [pc, #176]	; (800425c <HAL_RCC_OscConfig+0x270>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	604b      	str	r3, [r1, #4]
 80041b0:	e01a      	b.n	80041e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041b2:	4b2a      	ldr	r3, [pc, #168]	; (800425c <HAL_RCC_OscConfig+0x270>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a29      	ldr	r2, [pc, #164]	; (800425c <HAL_RCC_OscConfig+0x270>)
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041be:	f7fe fbb1 	bl	8002924 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041c6:	f7fe fbad 	bl	8002924 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e2dd      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041d8:	4b20      	ldr	r3, [pc, #128]	; (800425c <HAL_RCC_OscConfig+0x270>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCC_OscConfig+0x1da>
 80041e4:	e000      	b.n	80041e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d074      	beq.n	80042de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d005      	beq.n	8004206 <HAL_RCC_OscConfig+0x21a>
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b0c      	cmp	r3, #12
 80041fe:	d10e      	bne.n	800421e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2b03      	cmp	r3, #3
 8004204:	d10b      	bne.n	800421e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d064      	beq.n	80042dc <HAL_RCC_OscConfig+0x2f0>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d160      	bne.n	80042dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e2ba      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004226:	d106      	bne.n	8004236 <HAL_RCC_OscConfig+0x24a>
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <HAL_RCC_OscConfig+0x270>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a0b      	ldr	r2, [pc, #44]	; (800425c <HAL_RCC_OscConfig+0x270>)
 800422e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	e026      	b.n	8004284 <HAL_RCC_OscConfig+0x298>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800423e:	d115      	bne.n	800426c <HAL_RCC_OscConfig+0x280>
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a05      	ldr	r2, [pc, #20]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004246:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4b03      	ldr	r3, [pc, #12]	; (800425c <HAL_RCC_OscConfig+0x270>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a02      	ldr	r2, [pc, #8]	; (800425c <HAL_RCC_OscConfig+0x270>)
 8004252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	e014      	b.n	8004284 <HAL_RCC_OscConfig+0x298>
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
 8004260:	0800f6cc 	.word	0x0800f6cc
 8004264:	20000000 	.word	0x20000000
 8004268:	2000006c 	.word	0x2000006c
 800426c:	4ba0      	ldr	r3, [pc, #640]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a9f      	ldr	r2, [pc, #636]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 8004272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	4b9d      	ldr	r3, [pc, #628]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a9c      	ldr	r2, [pc, #624]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 800427e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d013      	beq.n	80042b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fe fb4a 	bl	8002924 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004294:	f7fe fb46 	bl	8002924 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e276      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042a6:	4b92      	ldr	r3, [pc, #584]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x2a8>
 80042b2:	e014      	b.n	80042de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fe fb36 	bl	8002924 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fe fb32 	bl	8002924 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e262      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ce:	4b88      	ldr	r3, [pc, #544]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x2d0>
 80042da:	e000      	b.n	80042de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d060      	beq.n	80043ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_OscConfig+0x310>
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	d119      	bne.n	800432a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d116      	bne.n	800432a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042fc:	4b7c      	ldr	r3, [pc, #496]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_RCC_OscConfig+0x328>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e23f      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004314:	4b76      	ldr	r3, [pc, #472]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	061b      	lsls	r3, r3, #24
 8004322:	4973      	ldr	r1, [pc, #460]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 8004324:	4313      	orrs	r3, r2
 8004326:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004328:	e040      	b.n	80043ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d023      	beq.n	800437a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004332:	4b6f      	ldr	r3, [pc, #444]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6e      	ldr	r2, [pc, #440]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 8004338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433e:	f7fe faf1 	bl	8002924 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004346:	f7fe faed 	bl	8002924 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e21d      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004358:	4b65      	ldr	r3, [pc, #404]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004364:	4b62      	ldr	r3, [pc, #392]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	495f      	ldr	r1, [pc, #380]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 8004374:	4313      	orrs	r3, r2
 8004376:	604b      	str	r3, [r1, #4]
 8004378:	e018      	b.n	80043ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800437a:	4b5d      	ldr	r3, [pc, #372]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a5c      	ldr	r2, [pc, #368]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 8004380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004386:	f7fe facd 	bl	8002924 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438e:	f7fe fac9 	bl	8002924 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e1f9      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043a0:	4b53      	ldr	r3, [pc, #332]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f0      	bne.n	800438e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d03c      	beq.n	8004432 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01c      	beq.n	80043fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c0:	4b4b      	ldr	r3, [pc, #300]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 80043c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c6:	4a4a      	ldr	r2, [pc, #296]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 80043c8:	f043 0301 	orr.w	r3, r3, #1
 80043cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fe faa8 	bl	8002924 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d8:	f7fe faa4 	bl	8002924 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e1d4      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ea:	4b41      	ldr	r3, [pc, #260]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 80043ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ef      	beq.n	80043d8 <HAL_RCC_OscConfig+0x3ec>
 80043f8:	e01b      	b.n	8004432 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043fa:	4b3d      	ldr	r3, [pc, #244]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 80043fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004400:	4a3b      	ldr	r2, [pc, #236]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440a:	f7fe fa8b 	bl	8002924 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004412:	f7fe fa87 	bl	8002924 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e1b7      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004424:	4b32      	ldr	r3, [pc, #200]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 8004426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1ef      	bne.n	8004412 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 80a6 	beq.w	800458c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004440:	2300      	movs	r3, #0
 8004442:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004444:	4b2a      	ldr	r3, [pc, #168]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 8004446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10d      	bne.n	800446c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004450:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004454:	4a26      	ldr	r2, [pc, #152]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 8004456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445a:	6593      	str	r3, [r2, #88]	; 0x58
 800445c:	4b24      	ldr	r3, [pc, #144]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004468:	2301      	movs	r3, #1
 800446a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446c:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <HAL_RCC_OscConfig+0x508>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d118      	bne.n	80044aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004478:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <HAL_RCC_OscConfig+0x508>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <HAL_RCC_OscConfig+0x508>)
 800447e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004482:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004484:	f7fe fa4e 	bl	8002924 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448c:	f7fe fa4a 	bl	8002924 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e17a      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449e:	4b15      	ldr	r3, [pc, #84]	; (80044f4 <HAL_RCC_OscConfig+0x508>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d108      	bne.n	80044c4 <HAL_RCC_OscConfig+0x4d8>
 80044b2:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b8:	4a0d      	ldr	r2, [pc, #52]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044c2:	e029      	b.n	8004518 <HAL_RCC_OscConfig+0x52c>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b05      	cmp	r3, #5
 80044ca:	d115      	bne.n	80044f8 <HAL_RCC_OscConfig+0x50c>
 80044cc:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	4a07      	ldr	r2, [pc, #28]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 80044d4:	f043 0304 	orr.w	r3, r3, #4
 80044d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	4a03      	ldr	r2, [pc, #12]	; (80044f0 <HAL_RCC_OscConfig+0x504>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ec:	e014      	b.n	8004518 <HAL_RCC_OscConfig+0x52c>
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40007000 	.word	0x40007000
 80044f8:	4b9c      	ldr	r3, [pc, #624]	; (800476c <HAL_RCC_OscConfig+0x780>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fe:	4a9b      	ldr	r2, [pc, #620]	; (800476c <HAL_RCC_OscConfig+0x780>)
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004508:	4b98      	ldr	r3, [pc, #608]	; (800476c <HAL_RCC_OscConfig+0x780>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	4a97      	ldr	r2, [pc, #604]	; (800476c <HAL_RCC_OscConfig+0x780>)
 8004510:	f023 0304 	bic.w	r3, r3, #4
 8004514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d016      	beq.n	800454e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004520:	f7fe fa00 	bl	8002924 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004526:	e00a      	b.n	800453e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004528:	f7fe f9fc 	bl	8002924 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f241 3288 	movw	r2, #5000	; 0x1388
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e12a      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453e:	4b8b      	ldr	r3, [pc, #556]	; (800476c <HAL_RCC_OscConfig+0x780>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ed      	beq.n	8004528 <HAL_RCC_OscConfig+0x53c>
 800454c:	e015      	b.n	800457a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454e:	f7fe f9e9 	bl	8002924 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004554:	e00a      	b.n	800456c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004556:	f7fe f9e5 	bl	8002924 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f241 3288 	movw	r2, #5000	; 0x1388
 8004564:	4293      	cmp	r3, r2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e113      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800456c:	4b7f      	ldr	r3, [pc, #508]	; (800476c <HAL_RCC_OscConfig+0x780>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1ed      	bne.n	8004556 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800457a:	7ffb      	ldrb	r3, [r7, #31]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d105      	bne.n	800458c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004580:	4b7a      	ldr	r3, [pc, #488]	; (800476c <HAL_RCC_OscConfig+0x780>)
 8004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004584:	4a79      	ldr	r2, [pc, #484]	; (800476c <HAL_RCC_OscConfig+0x780>)
 8004586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800458a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80fe 	beq.w	8004792 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	2b02      	cmp	r3, #2
 800459c:	f040 80d0 	bne.w	8004740 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045a0:	4b72      	ldr	r3, [pc, #456]	; (800476c <HAL_RCC_OscConfig+0x780>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f003 0203 	and.w	r2, r3, #3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d130      	bne.n	8004616 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	3b01      	subs	r3, #1
 80045c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d127      	bne.n	8004616 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d11f      	bne.n	8004616 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045e0:	2a07      	cmp	r2, #7
 80045e2:	bf14      	ite	ne
 80045e4:	2201      	movne	r2, #1
 80045e6:	2200      	moveq	r2, #0
 80045e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d113      	bne.n	8004616 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	085b      	lsrs	r3, r3, #1
 80045fa:	3b01      	subs	r3, #1
 80045fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045fe:	429a      	cmp	r2, r3
 8004600:	d109      	bne.n	8004616 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	3b01      	subs	r3, #1
 8004610:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d06e      	beq.n	80046f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b0c      	cmp	r3, #12
 800461a:	d069      	beq.n	80046f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800461c:	4b53      	ldr	r3, [pc, #332]	; (800476c <HAL_RCC_OscConfig+0x780>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d105      	bne.n	8004634 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004628:	4b50      	ldr	r3, [pc, #320]	; (800476c <HAL_RCC_OscConfig+0x780>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0ad      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004638:	4b4c      	ldr	r3, [pc, #304]	; (800476c <HAL_RCC_OscConfig+0x780>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a4b      	ldr	r2, [pc, #300]	; (800476c <HAL_RCC_OscConfig+0x780>)
 800463e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004642:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004644:	f7fe f96e 	bl	8002924 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fe f96a 	bl	8002924 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e09a      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800465e:	4b43      	ldr	r3, [pc, #268]	; (800476c <HAL_RCC_OscConfig+0x780>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800466a:	4b40      	ldr	r3, [pc, #256]	; (800476c <HAL_RCC_OscConfig+0x780>)
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	4b40      	ldr	r3, [pc, #256]	; (8004770 <HAL_RCC_OscConfig+0x784>)
 8004670:	4013      	ands	r3, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800467a:	3a01      	subs	r2, #1
 800467c:	0112      	lsls	r2, r2, #4
 800467e:	4311      	orrs	r1, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004684:	0212      	lsls	r2, r2, #8
 8004686:	4311      	orrs	r1, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800468c:	0852      	lsrs	r2, r2, #1
 800468e:	3a01      	subs	r2, #1
 8004690:	0552      	lsls	r2, r2, #21
 8004692:	4311      	orrs	r1, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004698:	0852      	lsrs	r2, r2, #1
 800469a:	3a01      	subs	r2, #1
 800469c:	0652      	lsls	r2, r2, #25
 800469e:	4311      	orrs	r1, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046a4:	0912      	lsrs	r2, r2, #4
 80046a6:	0452      	lsls	r2, r2, #17
 80046a8:	430a      	orrs	r2, r1
 80046aa:	4930      	ldr	r1, [pc, #192]	; (800476c <HAL_RCC_OscConfig+0x780>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046b0:	4b2e      	ldr	r3, [pc, #184]	; (800476c <HAL_RCC_OscConfig+0x780>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2d      	ldr	r2, [pc, #180]	; (800476c <HAL_RCC_OscConfig+0x780>)
 80046b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046bc:	4b2b      	ldr	r3, [pc, #172]	; (800476c <HAL_RCC_OscConfig+0x780>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4a2a      	ldr	r2, [pc, #168]	; (800476c <HAL_RCC_OscConfig+0x780>)
 80046c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046c8:	f7fe f92c 	bl	8002924 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d0:	f7fe f928 	bl	8002924 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e058      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e2:	4b22      	ldr	r3, [pc, #136]	; (800476c <HAL_RCC_OscConfig+0x780>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046ee:	e050      	b.n	8004792 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e04f      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f4:	4b1d      	ldr	r3, [pc, #116]	; (800476c <HAL_RCC_OscConfig+0x780>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d148      	bne.n	8004792 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004700:	4b1a      	ldr	r3, [pc, #104]	; (800476c <HAL_RCC_OscConfig+0x780>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a19      	ldr	r2, [pc, #100]	; (800476c <HAL_RCC_OscConfig+0x780>)
 8004706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800470a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <HAL_RCC_OscConfig+0x780>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4a16      	ldr	r2, [pc, #88]	; (800476c <HAL_RCC_OscConfig+0x780>)
 8004712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004716:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004718:	f7fe f904 	bl	8002924 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004720:	f7fe f900 	bl	8002924 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e030      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004732:	4b0e      	ldr	r3, [pc, #56]	; (800476c <HAL_RCC_OscConfig+0x780>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCC_OscConfig+0x734>
 800473e:	e028      	b.n	8004792 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d023      	beq.n	800478e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004746:	4b09      	ldr	r3, [pc, #36]	; (800476c <HAL_RCC_OscConfig+0x780>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a08      	ldr	r2, [pc, #32]	; (800476c <HAL_RCC_OscConfig+0x780>)
 800474c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004752:	f7fe f8e7 	bl	8002924 <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004758:	e00c      	b.n	8004774 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475a:	f7fe f8e3 	bl	8002924 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d905      	bls.n	8004774 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e013      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
 800476c:	40021000 	.word	0x40021000
 8004770:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004774:	4b09      	ldr	r3, [pc, #36]	; (800479c <HAL_RCC_OscConfig+0x7b0>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1ec      	bne.n	800475a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_RCC_OscConfig+0x7b0>)
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	4905      	ldr	r1, [pc, #20]	; (800479c <HAL_RCC_OscConfig+0x7b0>)
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCC_OscConfig+0x7b4>)
 8004788:	4013      	ands	r3, r2
 800478a:	60cb      	str	r3, [r1, #12]
 800478c:	e001      	b.n	8004792 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	feeefffc 	.word	0xfeeefffc

080047a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0e7      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b75      	ldr	r3, [pc, #468]	; (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d910      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b72      	ldr	r3, [pc, #456]	; (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 0207 	bic.w	r2, r3, #7
 80047ce:	4970      	ldr	r1, [pc, #448]	; (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b6e      	ldr	r3, [pc, #440]	; (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0cf      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d010      	beq.n	8004816 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	4b66      	ldr	r3, [pc, #408]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004800:	429a      	cmp	r2, r3
 8004802:	d908      	bls.n	8004816 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004804:	4b63      	ldr	r3, [pc, #396]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	4960      	ldr	r1, [pc, #384]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d04c      	beq.n	80048bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b03      	cmp	r3, #3
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800482a:	4b5a      	ldr	r3, [pc, #360]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d121      	bne.n	800487a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e0a6      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d107      	bne.n	8004852 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004842:	4b54      	ldr	r3, [pc, #336]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d115      	bne.n	800487a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e09a      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d107      	bne.n	800486a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800485a:	4b4e      	ldr	r3, [pc, #312]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e08e      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800486a:	4b4a      	ldr	r3, [pc, #296]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e086      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800487a:	4b46      	ldr	r3, [pc, #280]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f023 0203 	bic.w	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	4943      	ldr	r1, [pc, #268]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004888:	4313      	orrs	r3, r2
 800488a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488c:	f7fe f84a 	bl	8002924 <HAL_GetTick>
 8004890:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004892:	e00a      	b.n	80048aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004894:	f7fe f846 	bl	8002924 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e06e      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	4b3a      	ldr	r3, [pc, #232]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 020c 	and.w	r2, r3, #12
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d1eb      	bne.n	8004894 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d010      	beq.n	80048ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	4b31      	ldr	r3, [pc, #196]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d208      	bcs.n	80048ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d8:	4b2e      	ldr	r3, [pc, #184]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	492b      	ldr	r1, [pc, #172]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048ea:	4b29      	ldr	r3, [pc, #164]	; (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d210      	bcs.n	800491a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f023 0207 	bic.w	r2, r3, #7
 8004900:	4923      	ldr	r1, [pc, #140]	; (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	4313      	orrs	r3, r2
 8004906:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004908:	4b21      	ldr	r3, [pc, #132]	; (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d001      	beq.n	800491a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e036      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004926:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	4918      	ldr	r1, [pc, #96]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004934:	4313      	orrs	r3, r2
 8004936:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d009      	beq.n	8004958 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004944:	4b13      	ldr	r3, [pc, #76]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	4910      	ldr	r1, [pc, #64]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004954:	4313      	orrs	r3, r2
 8004956:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004958:	f000 f824 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 800495c:	4602      	mov	r2, r0
 800495e:	4b0d      	ldr	r3, [pc, #52]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	490b      	ldr	r1, [pc, #44]	; (8004998 <HAL_RCC_ClockConfig+0x1f4>)
 800496a:	5ccb      	ldrb	r3, [r1, r3]
 800496c:	f003 031f 	and.w	r3, r3, #31
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
 8004974:	4a09      	ldr	r2, [pc, #36]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 8004976:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <HAL_RCC_ClockConfig+0x1fc>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f7fc fd19 	bl	80013b4 <HAL_InitTick>
 8004982:	4603      	mov	r3, r0
 8004984:	72fb      	strb	r3, [r7, #11]

  return status;
 8004986:	7afb      	ldrb	r3, [r7, #11]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40022000 	.word	0x40022000
 8004994:	40021000 	.word	0x40021000
 8004998:	0800f6cc 	.word	0x0800f6cc
 800499c:	20000000 	.word	0x20000000
 80049a0:	2000006c 	.word	0x2000006c

080049a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b089      	sub	sp, #36	; 0x24
 80049a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	2300      	movs	r3, #0
 80049b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049b2:	4b3e      	ldr	r3, [pc, #248]	; (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049bc:	4b3b      	ldr	r3, [pc, #236]	; (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0x34>
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b0c      	cmp	r3, #12
 80049d0:	d121      	bne.n	8004a16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d11e      	bne.n	8004a16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049d8:	4b34      	ldr	r3, [pc, #208]	; (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d107      	bne.n	80049f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049e4:	4b31      	ldr	r3, [pc, #196]	; (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 80049e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ea:	0a1b      	lsrs	r3, r3, #8
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	e005      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049f4:	4b2d      	ldr	r3, [pc, #180]	; (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	091b      	lsrs	r3, r3, #4
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a00:	4a2b      	ldr	r2, [pc, #172]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10d      	bne.n	8004a2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a14:	e00a      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d102      	bne.n	8004a22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a1c:	4b25      	ldr	r3, [pc, #148]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a1e:	61bb      	str	r3, [r7, #24]
 8004a20:	e004      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a28:	4b23      	ldr	r3, [pc, #140]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b0c      	cmp	r3, #12
 8004a30:	d134      	bne.n	8004a9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a32:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d003      	beq.n	8004a4a <HAL_RCC_GetSysClockFreq+0xa6>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d003      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0xac>
 8004a48:	e005      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a4a:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a4c:	617b      	str	r3, [r7, #20]
      break;
 8004a4e:	e005      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a50:	4b19      	ldr	r3, [pc, #100]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a52:	617b      	str	r3, [r7, #20]
      break;
 8004a54:	e002      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	617b      	str	r3, [r7, #20]
      break;
 8004a5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a5c:	4b13      	ldr	r3, [pc, #76]	; (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	3301      	adds	r3, #1
 8004a68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	0a1b      	lsrs	r3, r3, #8
 8004a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	fb03 f202 	mul.w	r2, r3, r2
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	0e5b      	lsrs	r3, r3, #25
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a9c:	69bb      	ldr	r3, [r7, #24]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3724      	adds	r7, #36	; 0x24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	0800f6e4 	.word	0x0800f6e4
 8004ab4:	00f42400 	.word	0x00f42400
 8004ab8:	007a1200 	.word	0x007a1200

08004abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac0:	4b03      	ldr	r3, [pc, #12]	; (8004ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	20000000 	.word	0x20000000

08004ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ad8:	f7ff fff0 	bl	8004abc <HAL_RCC_GetHCLKFreq>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	0a1b      	lsrs	r3, r3, #8
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	4904      	ldr	r1, [pc, #16]	; (8004afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aea:	5ccb      	ldrb	r3, [r1, r3]
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40021000 	.word	0x40021000
 8004afc:	0800f6dc 	.word	0x0800f6dc

08004b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b04:	f7ff ffda 	bl	8004abc <HAL_RCC_GetHCLKFreq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	0adb      	lsrs	r3, r3, #11
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	4904      	ldr	r1, [pc, #16]	; (8004b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b16:	5ccb      	ldrb	r3, [r1, r3]
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40021000 	.word	0x40021000
 8004b28:	0800f6dc 	.word	0x0800f6dc

08004b2c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	220f      	movs	r2, #15
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004b3c:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <HAL_RCC_GetClockConfig+0x5c>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0203 	and.w	r2, r3, #3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004b48:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <HAL_RCC_GetClockConfig+0x5c>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004b54:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <HAL_RCC_GetClockConfig+0x5c>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <HAL_RCC_GetClockConfig+0x5c>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	08db      	lsrs	r3, r3, #3
 8004b66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004b6e:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <HAL_RCC_GetClockConfig+0x60>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0207 	and.w	r2, r3, #7
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	601a      	str	r2, [r3, #0]
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	40022000 	.word	0x40022000

08004b90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b9c:	4b2a      	ldr	r3, [pc, #168]	; (8004c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ba8:	f7ff f9bc 	bl	8003f24 <HAL_PWREx_GetVoltageRange>
 8004bac:	6178      	str	r0, [r7, #20]
 8004bae:	e014      	b.n	8004bda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bb0:	4b25      	ldr	r3, [pc, #148]	; (8004c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb4:	4a24      	ldr	r2, [pc, #144]	; (8004c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bba:	6593      	str	r3, [r2, #88]	; 0x58
 8004bbc:	4b22      	ldr	r3, [pc, #136]	; (8004c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bc8:	f7ff f9ac 	bl	8003f24 <HAL_PWREx_GetVoltageRange>
 8004bcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bce:	4b1e      	ldr	r3, [pc, #120]	; (8004c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	4a1d      	ldr	r2, [pc, #116]	; (8004c48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be0:	d10b      	bne.n	8004bfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b80      	cmp	r3, #128	; 0x80
 8004be6:	d919      	bls.n	8004c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2ba0      	cmp	r3, #160	; 0xa0
 8004bec:	d902      	bls.n	8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bee:	2302      	movs	r3, #2
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	e013      	b.n	8004c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	e010      	b.n	8004c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b80      	cmp	r3, #128	; 0x80
 8004bfe:	d902      	bls.n	8004c06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c00:	2303      	movs	r3, #3
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	e00a      	b.n	8004c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b80      	cmp	r3, #128	; 0x80
 8004c0a:	d102      	bne.n	8004c12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	e004      	b.n	8004c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b70      	cmp	r3, #112	; 0x70
 8004c16:	d101      	bne.n	8004c1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c18:	2301      	movs	r3, #1
 8004c1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f023 0207 	bic.w	r2, r3, #7
 8004c24:	4909      	ldr	r1, [pc, #36]	; (8004c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c2c:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d001      	beq.n	8004c3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40022000 	.word	0x40022000

08004c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c58:	2300      	movs	r3, #0
 8004c5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d041      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c74:	d02a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c7a:	d824      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c80:	d008      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c86:	d81e      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c90:	d010      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c92:	e018      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c94:	4b86      	ldr	r3, [pc, #536]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4a85      	ldr	r2, [pc, #532]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ca0:	e015      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fabb 	bl	8005224 <RCCEx_PLLSAI1_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cb2:	e00c      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3320      	adds	r3, #32
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fba6 	bl	800540c <RCCEx_PLLSAI2_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cc4:	e003      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	74fb      	strb	r3, [r7, #19]
      break;
 8004cca:	e000      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cce:	7cfb      	ldrb	r3, [r7, #19]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cd4:	4b76      	ldr	r3, [pc, #472]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ce2:	4973      	ldr	r1, [pc, #460]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004cea:	e001      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cec:	7cfb      	ldrb	r3, [r7, #19]
 8004cee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d041      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d04:	d02a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d0a:	d824      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d10:	d008      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d16:	d81e      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d20:	d010      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d22:	e018      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d24:	4b62      	ldr	r3, [pc, #392]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4a61      	ldr	r2, [pc, #388]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d30:	e015      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3304      	adds	r3, #4
 8004d36:	2100      	movs	r1, #0
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fa73 	bl	8005224 <RCCEx_PLLSAI1_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d42:	e00c      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3320      	adds	r3, #32
 8004d48:	2100      	movs	r1, #0
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fb5e 	bl	800540c <RCCEx_PLLSAI2_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d54:	e003      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	74fb      	strb	r3, [r7, #19]
      break;
 8004d5a:	e000      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d5e:	7cfb      	ldrb	r3, [r7, #19]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10b      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d64:	4b52      	ldr	r3, [pc, #328]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d72:	494f      	ldr	r1, [pc, #316]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d7a:	e001      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	7cfb      	ldrb	r3, [r7, #19]
 8004d7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80a0 	beq.w	8004ece <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d92:	4b47      	ldr	r3, [pc, #284]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004da2:	2300      	movs	r3, #0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00d      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da8:	4b41      	ldr	r3, [pc, #260]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dac:	4a40      	ldr	r2, [pc, #256]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db2:	6593      	str	r3, [r2, #88]	; 0x58
 8004db4:	4b3e      	ldr	r3, [pc, #248]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dc4:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a3a      	ldr	r2, [pc, #232]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dd0:	f7fd fda8 	bl	8002924 <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dd6:	e009      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd8:	f7fd fda4 	bl	8002924 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d902      	bls.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	74fb      	strb	r3, [r7, #19]
        break;
 8004dea:	e005      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dec:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0ef      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d15c      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dfe:	4b2c      	ldr	r3, [pc, #176]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01f      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d019      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e1c:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e28:	4b21      	ldr	r3, [pc, #132]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2e:	4a20      	ldr	r2, [pc, #128]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e38:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3e:	4a1c      	ldr	r2, [pc, #112]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e48:	4a19      	ldr	r2, [pc, #100]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d016      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5a:	f7fd fd63 	bl	8002924 <HAL_GetTick>
 8004e5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e60:	e00b      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e62:	f7fd fd5f 	bl	8002924 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d902      	bls.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	74fb      	strb	r3, [r7, #19]
            break;
 8004e78:	e006      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e7a:	4b0d      	ldr	r3, [pc, #52]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0ec      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004e88:	7cfb      	ldrb	r3, [r7, #19]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e8e:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e9e:	4904      	ldr	r1, [pc, #16]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ea6:	e009      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ea8:	7cfb      	ldrb	r3, [r7, #19]
 8004eaa:	74bb      	strb	r3, [r7, #18]
 8004eac:	e006      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004eae:	bf00      	nop
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb8:	7cfb      	ldrb	r3, [r7, #19]
 8004eba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ebc:	7c7b      	ldrb	r3, [r7, #17]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d105      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec2:	4b9e      	ldr	r3, [pc, #632]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec6:	4a9d      	ldr	r2, [pc, #628]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eda:	4b98      	ldr	r3, [pc, #608]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee0:	f023 0203 	bic.w	r2, r3, #3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	4994      	ldr	r1, [pc, #592]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004efc:	4b8f      	ldr	r3, [pc, #572]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f02:	f023 020c 	bic.w	r2, r3, #12
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0a:	498c      	ldr	r1, [pc, #560]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f1e:	4b87      	ldr	r3, [pc, #540]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	4983      	ldr	r1, [pc, #524]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f40:	4b7e      	ldr	r3, [pc, #504]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	497b      	ldr	r1, [pc, #492]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f62:	4b76      	ldr	r3, [pc, #472]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f70:	4972      	ldr	r1, [pc, #456]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f84:	4b6d      	ldr	r3, [pc, #436]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	496a      	ldr	r1, [pc, #424]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fa6:	4b65      	ldr	r3, [pc, #404]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb4:	4961      	ldr	r1, [pc, #388]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fc8:	4b5c      	ldr	r3, [pc, #368]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd6:	4959      	ldr	r1, [pc, #356]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fea:	4b54      	ldr	r3, [pc, #336]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff8:	4950      	ldr	r1, [pc, #320]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800500c:	4b4b      	ldr	r3, [pc, #300]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005012:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	4948      	ldr	r1, [pc, #288]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800502e:	4b43      	ldr	r3, [pc, #268]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005034:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503c:	493f      	ldr	r1, [pc, #252]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d028      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005050:	4b3a      	ldr	r3, [pc, #232]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800505e:	4937      	ldr	r1, [pc, #220]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800506a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800506e:	d106      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005070:	4b32      	ldr	r3, [pc, #200]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4a31      	ldr	r2, [pc, #196]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800507a:	60d3      	str	r3, [r2, #12]
 800507c:	e011      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005082:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005086:	d10c      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	2101      	movs	r1, #1
 800508e:	4618      	mov	r0, r3
 8005090:	f000 f8c8 	bl	8005224 <RCCEx_PLLSAI1_Config>
 8005094:	4603      	mov	r3, r0
 8005096:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005098:	7cfb      	ldrb	r3, [r7, #19]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800509e:	7cfb      	ldrb	r3, [r7, #19]
 80050a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d028      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050ae:	4b23      	ldr	r3, [pc, #140]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050bc:	491f      	ldr	r1, [pc, #124]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050cc:	d106      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050ce:	4b1b      	ldr	r3, [pc, #108]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	4a1a      	ldr	r2, [pc, #104]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050d8:	60d3      	str	r3, [r2, #12]
 80050da:	e011      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050e4:	d10c      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3304      	adds	r3, #4
 80050ea:	2101      	movs	r1, #1
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 f899 	bl	8005224 <RCCEx_PLLSAI1_Config>
 80050f2:	4603      	mov	r3, r0
 80050f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050f6:	7cfb      	ldrb	r3, [r7, #19]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80050fc:	7cfb      	ldrb	r3, [r7, #19]
 80050fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d02b      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005112:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511a:	4908      	ldr	r1, [pc, #32]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005126:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800512a:	d109      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800512c:	4b03      	ldr	r3, [pc, #12]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	4a02      	ldr	r2, [pc, #8]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005136:	60d3      	str	r3, [r2, #12]
 8005138:	e014      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800513a:	bf00      	nop
 800513c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005148:	d10c      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3304      	adds	r3, #4
 800514e:	2101      	movs	r1, #1
 8005150:	4618      	mov	r0, r3
 8005152:	f000 f867 	bl	8005224 <RCCEx_PLLSAI1_Config>
 8005156:	4603      	mov	r3, r0
 8005158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800515a:	7cfb      	ldrb	r3, [r7, #19]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005160:	7cfb      	ldrb	r3, [r7, #19]
 8005162:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d02f      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005170:	4b2b      	ldr	r3, [pc, #172]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800517e:	4928      	ldr	r1, [pc, #160]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800518e:	d10d      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3304      	adds	r3, #4
 8005194:	2102      	movs	r1, #2
 8005196:	4618      	mov	r0, r3
 8005198:	f000 f844 	bl	8005224 <RCCEx_PLLSAI1_Config>
 800519c:	4603      	mov	r3, r0
 800519e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d014      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80051a6:	7cfb      	ldrb	r3, [r7, #19]
 80051a8:	74bb      	strb	r3, [r7, #18]
 80051aa:	e011      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051b4:	d10c      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3320      	adds	r3, #32
 80051ba:	2102      	movs	r1, #2
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 f925 	bl	800540c <RCCEx_PLLSAI2_Config>
 80051c2:	4603      	mov	r3, r0
 80051c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051c6:	7cfb      	ldrb	r3, [r7, #19]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80051cc:	7cfb      	ldrb	r3, [r7, #19]
 80051ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051dc:	4b10      	ldr	r3, [pc, #64]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ea:	490d      	ldr	r1, [pc, #52]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00b      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051fe:	4b08      	ldr	r3, [pc, #32]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005204:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800520e:	4904      	ldr	r1, [pc, #16]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005216:	7cbb      	ldrb	r3, [r7, #18]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40021000 	.word	0x40021000

08005224 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005232:	4b75      	ldr	r3, [pc, #468]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d018      	beq.n	8005270 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800523e:	4b72      	ldr	r3, [pc, #456]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0203 	and.w	r2, r3, #3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d10d      	bne.n	800526a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
       ||
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005256:	4b6c      	ldr	r3, [pc, #432]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	091b      	lsrs	r3, r3, #4
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
       ||
 8005266:	429a      	cmp	r2, r3
 8005268:	d047      	beq.n	80052fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	73fb      	strb	r3, [r7, #15]
 800526e:	e044      	b.n	80052fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b03      	cmp	r3, #3
 8005276:	d018      	beq.n	80052aa <RCCEx_PLLSAI1_Config+0x86>
 8005278:	2b03      	cmp	r3, #3
 800527a:	d825      	bhi.n	80052c8 <RCCEx_PLLSAI1_Config+0xa4>
 800527c:	2b01      	cmp	r3, #1
 800527e:	d002      	beq.n	8005286 <RCCEx_PLLSAI1_Config+0x62>
 8005280:	2b02      	cmp	r3, #2
 8005282:	d009      	beq.n	8005298 <RCCEx_PLLSAI1_Config+0x74>
 8005284:	e020      	b.n	80052c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005286:	4b60      	ldr	r3, [pc, #384]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d11d      	bne.n	80052ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005296:	e01a      	b.n	80052ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005298:	4b5b      	ldr	r3, [pc, #364]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d116      	bne.n	80052d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a8:	e013      	b.n	80052d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052aa:	4b57      	ldr	r3, [pc, #348]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10f      	bne.n	80052d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052b6:	4b54      	ldr	r3, [pc, #336]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052c6:	e006      	b.n	80052d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	73fb      	strb	r3, [r7, #15]
      break;
 80052cc:	e004      	b.n	80052d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052ce:	bf00      	nop
 80052d0:	e002      	b.n	80052d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052d2:	bf00      	nop
 80052d4:	e000      	b.n	80052d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10d      	bne.n	80052fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052de:	4b4a      	ldr	r3, [pc, #296]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6819      	ldr	r1, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	430b      	orrs	r3, r1
 80052f4:	4944      	ldr	r1, [pc, #272]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d17d      	bne.n	80053fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005300:	4b41      	ldr	r3, [pc, #260]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a40      	ldr	r2, [pc, #256]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005306:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800530a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530c:	f7fd fb0a 	bl	8002924 <HAL_GetTick>
 8005310:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005312:	e009      	b.n	8005328 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005314:	f7fd fb06 	bl	8002924 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d902      	bls.n	8005328 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	73fb      	strb	r3, [r7, #15]
        break;
 8005326:	e005      	b.n	8005334 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005328:	4b37      	ldr	r3, [pc, #220]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ef      	bne.n	8005314 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d160      	bne.n	80053fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d111      	bne.n	8005364 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005340:	4b31      	ldr	r3, [pc, #196]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6892      	ldr	r2, [r2, #8]
 8005350:	0211      	lsls	r1, r2, #8
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	68d2      	ldr	r2, [r2, #12]
 8005356:	0912      	lsrs	r2, r2, #4
 8005358:	0452      	lsls	r2, r2, #17
 800535a:	430a      	orrs	r2, r1
 800535c:	492a      	ldr	r1, [pc, #168]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 800535e:	4313      	orrs	r3, r2
 8005360:	610b      	str	r3, [r1, #16]
 8005362:	e027      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d112      	bne.n	8005390 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800536a:	4b27      	ldr	r3, [pc, #156]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005372:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6892      	ldr	r2, [r2, #8]
 800537a:	0211      	lsls	r1, r2, #8
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6912      	ldr	r2, [r2, #16]
 8005380:	0852      	lsrs	r2, r2, #1
 8005382:	3a01      	subs	r2, #1
 8005384:	0552      	lsls	r2, r2, #21
 8005386:	430a      	orrs	r2, r1
 8005388:	491f      	ldr	r1, [pc, #124]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 800538a:	4313      	orrs	r3, r2
 800538c:	610b      	str	r3, [r1, #16]
 800538e:	e011      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005390:	4b1d      	ldr	r3, [pc, #116]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005398:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6892      	ldr	r2, [r2, #8]
 80053a0:	0211      	lsls	r1, r2, #8
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6952      	ldr	r2, [r2, #20]
 80053a6:	0852      	lsrs	r2, r2, #1
 80053a8:	3a01      	subs	r2, #1
 80053aa:	0652      	lsls	r2, r2, #25
 80053ac:	430a      	orrs	r2, r1
 80053ae:	4916      	ldr	r1, [pc, #88]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053b4:	4b14      	ldr	r3, [pc, #80]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a13      	ldr	r2, [pc, #76]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c0:	f7fd fab0 	bl	8002924 <HAL_GetTick>
 80053c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053c6:	e009      	b.n	80053dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053c8:	f7fd faac 	bl	8002924 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d902      	bls.n	80053dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	73fb      	strb	r3, [r7, #15]
          break;
 80053da:	e005      	b.n	80053e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0ef      	beq.n	80053c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053ee:	4b06      	ldr	r3, [pc, #24]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	4904      	ldr	r1, [pc, #16]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40021000 	.word	0x40021000

0800540c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800541a:	4b6a      	ldr	r3, [pc, #424]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d018      	beq.n	8005458 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005426:	4b67      	ldr	r3, [pc, #412]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f003 0203 	and.w	r2, r3, #3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d10d      	bne.n	8005452 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
       ||
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800543e:	4b61      	ldr	r3, [pc, #388]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
       ||
 800544e:	429a      	cmp	r2, r3
 8005450:	d047      	beq.n	80054e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	73fb      	strb	r3, [r7, #15]
 8005456:	e044      	b.n	80054e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b03      	cmp	r3, #3
 800545e:	d018      	beq.n	8005492 <RCCEx_PLLSAI2_Config+0x86>
 8005460:	2b03      	cmp	r3, #3
 8005462:	d825      	bhi.n	80054b0 <RCCEx_PLLSAI2_Config+0xa4>
 8005464:	2b01      	cmp	r3, #1
 8005466:	d002      	beq.n	800546e <RCCEx_PLLSAI2_Config+0x62>
 8005468:	2b02      	cmp	r3, #2
 800546a:	d009      	beq.n	8005480 <RCCEx_PLLSAI2_Config+0x74>
 800546c:	e020      	b.n	80054b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800546e:	4b55      	ldr	r3, [pc, #340]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d11d      	bne.n	80054b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800547e:	e01a      	b.n	80054b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005480:	4b50      	ldr	r3, [pc, #320]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005488:	2b00      	cmp	r3, #0
 800548a:	d116      	bne.n	80054ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005490:	e013      	b.n	80054ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005492:	4b4c      	ldr	r3, [pc, #304]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10f      	bne.n	80054be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800549e:	4b49      	ldr	r3, [pc, #292]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d109      	bne.n	80054be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054ae:	e006      	b.n	80054be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	73fb      	strb	r3, [r7, #15]
      break;
 80054b4:	e004      	b.n	80054c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054b6:	bf00      	nop
 80054b8:	e002      	b.n	80054c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054ba:	bf00      	nop
 80054bc:	e000      	b.n	80054c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054be:	bf00      	nop
    }

    if(status == HAL_OK)
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10d      	bne.n	80054e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054c6:	4b3f      	ldr	r3, [pc, #252]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6819      	ldr	r1, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	430b      	orrs	r3, r1
 80054dc:	4939      	ldr	r1, [pc, #228]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d167      	bne.n	80055b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054e8:	4b36      	ldr	r3, [pc, #216]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a35      	ldr	r2, [pc, #212]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f4:	f7fd fa16 	bl	8002924 <HAL_GetTick>
 80054f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054fa:	e009      	b.n	8005510 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054fc:	f7fd fa12 	bl	8002924 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d902      	bls.n	8005510 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	73fb      	strb	r3, [r7, #15]
        break;
 800550e:	e005      	b.n	800551c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005510:	4b2c      	ldr	r3, [pc, #176]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1ef      	bne.n	80054fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d14a      	bne.n	80055b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d111      	bne.n	800554c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005528:	4b26      	ldr	r3, [pc, #152]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6892      	ldr	r2, [r2, #8]
 8005538:	0211      	lsls	r1, r2, #8
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	68d2      	ldr	r2, [r2, #12]
 800553e:	0912      	lsrs	r2, r2, #4
 8005540:	0452      	lsls	r2, r2, #17
 8005542:	430a      	orrs	r2, r1
 8005544:	491f      	ldr	r1, [pc, #124]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005546:	4313      	orrs	r3, r2
 8005548:	614b      	str	r3, [r1, #20]
 800554a:	e011      	b.n	8005570 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800554c:	4b1d      	ldr	r3, [pc, #116]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005554:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6892      	ldr	r2, [r2, #8]
 800555c:	0211      	lsls	r1, r2, #8
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6912      	ldr	r2, [r2, #16]
 8005562:	0852      	lsrs	r2, r2, #1
 8005564:	3a01      	subs	r2, #1
 8005566:	0652      	lsls	r2, r2, #25
 8005568:	430a      	orrs	r2, r1
 800556a:	4916      	ldr	r1, [pc, #88]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800556c:	4313      	orrs	r3, r2
 800556e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005570:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557c:	f7fd f9d2 	bl	8002924 <HAL_GetTick>
 8005580:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005582:	e009      	b.n	8005598 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005584:	f7fd f9ce 	bl	8002924 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d902      	bls.n	8005598 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	73fb      	strb	r3, [r7, #15]
          break;
 8005596:	e005      	b.n	80055a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005598:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0ef      	beq.n	8005584 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055aa:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	4904      	ldr	r1, [pc, #16]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40021000 	.word	0x40021000

080055c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e049      	b.n	800566e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f841 	bl	8005676 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3304      	adds	r3, #4
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f000 fc6a 	bl	8005ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	d001      	beq.n	80056a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e04f      	b.n	8005744 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a23      	ldr	r2, [pc, #140]	; (8005750 <HAL_TIM_Base_Start_IT+0xc4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01d      	beq.n	8005702 <HAL_TIM_Base_Start_IT+0x76>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ce:	d018      	beq.n	8005702 <HAL_TIM_Base_Start_IT+0x76>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1f      	ldr	r2, [pc, #124]	; (8005754 <HAL_TIM_Base_Start_IT+0xc8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <HAL_TIM_Base_Start_IT+0x76>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <HAL_TIM_Base_Start_IT+0xcc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00e      	beq.n	8005702 <HAL_TIM_Base_Start_IT+0x76>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1c      	ldr	r2, [pc, #112]	; (800575c <HAL_TIM_Base_Start_IT+0xd0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_TIM_Base_Start_IT+0x76>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1b      	ldr	r2, [pc, #108]	; (8005760 <HAL_TIM_Base_Start_IT+0xd4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d004      	beq.n	8005702 <HAL_TIM_Base_Start_IT+0x76>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a19      	ldr	r2, [pc, #100]	; (8005764 <HAL_TIM_Base_Start_IT+0xd8>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d115      	bne.n	800572e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	4b17      	ldr	r3, [pc, #92]	; (8005768 <HAL_TIM_Base_Start_IT+0xdc>)
 800570a:	4013      	ands	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b06      	cmp	r3, #6
 8005712:	d015      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0xb4>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571a:	d011      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572c:	e008      	b.n	8005740 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0201 	orr.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e000      	b.n	8005742 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005740:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	40012c00 	.word	0x40012c00
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800
 800575c:	40000c00 	.word	0x40000c00
 8005760:	40013400 	.word	0x40013400
 8005764:	40014000 	.word	0x40014000
 8005768:	00010007 	.word	0x00010007

0800576c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e049      	b.n	8005812 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fb fff8 	bl	8001788 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3304      	adds	r3, #4
 80057a8:	4619      	mov	r1, r3
 80057aa:	4610      	mov	r0, r2
 80057ac:	f000 fb98 	bl	8005ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <HAL_TIM_PWM_Start+0x24>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	e03c      	b.n	80058ba <HAL_TIM_PWM_Start+0x9e>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b04      	cmp	r3, #4
 8005844:	d109      	bne.n	800585a <HAL_TIM_PWM_Start+0x3e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	bf14      	ite	ne
 8005852:	2301      	movne	r3, #1
 8005854:	2300      	moveq	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	e02f      	b.n	80058ba <HAL_TIM_PWM_Start+0x9e>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b08      	cmp	r3, #8
 800585e:	d109      	bne.n	8005874 <HAL_TIM_PWM_Start+0x58>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	bf14      	ite	ne
 800586c:	2301      	movne	r3, #1
 800586e:	2300      	moveq	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	e022      	b.n	80058ba <HAL_TIM_PWM_Start+0x9e>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b0c      	cmp	r3, #12
 8005878:	d109      	bne.n	800588e <HAL_TIM_PWM_Start+0x72>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b01      	cmp	r3, #1
 8005884:	bf14      	ite	ne
 8005886:	2301      	movne	r3, #1
 8005888:	2300      	moveq	r3, #0
 800588a:	b2db      	uxtb	r3, r3
 800588c:	e015      	b.n	80058ba <HAL_TIM_PWM_Start+0x9e>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b10      	cmp	r3, #16
 8005892:	d109      	bne.n	80058a8 <HAL_TIM_PWM_Start+0x8c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	bf14      	ite	ne
 80058a0:	2301      	movne	r3, #1
 80058a2:	2300      	moveq	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	e008      	b.n	80058ba <HAL_TIM_PWM_Start+0x9e>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	bf14      	ite	ne
 80058b4:	2301      	movne	r3, #1
 80058b6:	2300      	moveq	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e09c      	b.n	80059fc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d104      	bne.n	80058d2 <HAL_TIM_PWM_Start+0xb6>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058d0:	e023      	b.n	800591a <HAL_TIM_PWM_Start+0xfe>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d104      	bne.n	80058e2 <HAL_TIM_PWM_Start+0xc6>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058e0:	e01b      	b.n	800591a <HAL_TIM_PWM_Start+0xfe>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d104      	bne.n	80058f2 <HAL_TIM_PWM_Start+0xd6>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f0:	e013      	b.n	800591a <HAL_TIM_PWM_Start+0xfe>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b0c      	cmp	r3, #12
 80058f6:	d104      	bne.n	8005902 <HAL_TIM_PWM_Start+0xe6>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005900:	e00b      	b.n	800591a <HAL_TIM_PWM_Start+0xfe>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b10      	cmp	r3, #16
 8005906:	d104      	bne.n	8005912 <HAL_TIM_PWM_Start+0xf6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005910:	e003      	b.n	800591a <HAL_TIM_PWM_Start+0xfe>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2202      	movs	r2, #2
 8005916:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2201      	movs	r2, #1
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fe4c 	bl	80065c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a35      	ldr	r2, [pc, #212]	; (8005a04 <HAL_TIM_PWM_Start+0x1e8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <HAL_TIM_PWM_Start+0x13e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a34      	ldr	r2, [pc, #208]	; (8005a08 <HAL_TIM_PWM_Start+0x1ec>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00e      	beq.n	800595a <HAL_TIM_PWM_Start+0x13e>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a32      	ldr	r2, [pc, #200]	; (8005a0c <HAL_TIM_PWM_Start+0x1f0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d009      	beq.n	800595a <HAL_TIM_PWM_Start+0x13e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a31      	ldr	r2, [pc, #196]	; (8005a10 <HAL_TIM_PWM_Start+0x1f4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d004      	beq.n	800595a <HAL_TIM_PWM_Start+0x13e>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a2f      	ldr	r2, [pc, #188]	; (8005a14 <HAL_TIM_PWM_Start+0x1f8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d101      	bne.n	800595e <HAL_TIM_PWM_Start+0x142>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <HAL_TIM_PWM_Start+0x144>
 800595e:	2300      	movs	r3, #0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d007      	beq.n	8005974 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005972:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a22      	ldr	r2, [pc, #136]	; (8005a04 <HAL_TIM_PWM_Start+0x1e8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01d      	beq.n	80059ba <HAL_TIM_PWM_Start+0x19e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005986:	d018      	beq.n	80059ba <HAL_TIM_PWM_Start+0x19e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a22      	ldr	r2, [pc, #136]	; (8005a18 <HAL_TIM_PWM_Start+0x1fc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <HAL_TIM_PWM_Start+0x19e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a21      	ldr	r2, [pc, #132]	; (8005a1c <HAL_TIM_PWM_Start+0x200>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00e      	beq.n	80059ba <HAL_TIM_PWM_Start+0x19e>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <HAL_TIM_PWM_Start+0x204>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d009      	beq.n	80059ba <HAL_TIM_PWM_Start+0x19e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <HAL_TIM_PWM_Start+0x1ec>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d004      	beq.n	80059ba <HAL_TIM_PWM_Start+0x19e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a15      	ldr	r2, [pc, #84]	; (8005a0c <HAL_TIM_PWM_Start+0x1f0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d115      	bne.n	80059e6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	4b18      	ldr	r3, [pc, #96]	; (8005a24 <HAL_TIM_PWM_Start+0x208>)
 80059c2:	4013      	ands	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b06      	cmp	r3, #6
 80059ca:	d015      	beq.n	80059f8 <HAL_TIM_PWM_Start+0x1dc>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d2:	d011      	beq.n	80059f8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0201 	orr.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e4:	e008      	b.n	80059f8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0201 	orr.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	e000      	b.n	80059fa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40012c00 	.word	0x40012c00
 8005a08:	40013400 	.word	0x40013400
 8005a0c:	40014000 	.word	0x40014000
 8005a10:	40014400 	.word	0x40014400
 8005a14:	40014800 	.word	0x40014800
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	40000c00 	.word	0x40000c00
 8005a24:	00010007 	.word	0x00010007

08005a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d122      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d11b      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0202 	mvn.w	r2, #2
 8005a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fa1a 	bl	8005ea4 <HAL_TIM_IC_CaptureCallback>
 8005a70:	e005      	b.n	8005a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fa0c 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fa1d 	bl	8005eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d122      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d11b      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f06f 0204 	mvn.w	r2, #4
 8005aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2202      	movs	r2, #2
 8005aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f9f0 	bl	8005ea4 <HAL_TIM_IC_CaptureCallback>
 8005ac4:	e005      	b.n	8005ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f9e2 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f9f3 	bl	8005eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b08      	cmp	r3, #8
 8005ae4:	d122      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d11b      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f06f 0208 	mvn.w	r2, #8
 8005afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2204      	movs	r2, #4
 8005b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f9c6 	bl	8005ea4 <HAL_TIM_IC_CaptureCallback>
 8005b18:	e005      	b.n	8005b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f9b8 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f9c9 	bl	8005eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2b10      	cmp	r3, #16
 8005b38:	d122      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b10      	cmp	r3, #16
 8005b46:	d11b      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0210 	mvn.w	r2, #16
 8005b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2208      	movs	r2, #8
 8005b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f99c 	bl	8005ea4 <HAL_TIM_IC_CaptureCallback>
 8005b6c:	e005      	b.n	8005b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f98e 	bl	8005e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f99f 	bl	8005eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d10e      	bne.n	8005bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d107      	bne.n	8005bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0201 	mvn.w	r2, #1
 8005ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fb fbc4 	bl	8001334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	2b80      	cmp	r3, #128	; 0x80
 8005bb8:	d10e      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc4:	2b80      	cmp	r3, #128	; 0x80
 8005bc6:	d107      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fdac 	bl	8006730 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be6:	d10e      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf2:	2b80      	cmp	r3, #128	; 0x80
 8005bf4:	d107      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fd9f 	bl	8006744 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d10e      	bne.n	8005c32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1e:	2b40      	cmp	r3, #64	; 0x40
 8005c20:	d107      	bne.n	8005c32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f94d 	bl	8005ecc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d10e      	bne.n	8005c5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d107      	bne.n	8005c5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f06f 0220 	mvn.w	r2, #32
 8005c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fd5f 	bl	800671c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c5e:	bf00      	nop
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e0ff      	b.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b14      	cmp	r3, #20
 8005c92:	f200 80f0 	bhi.w	8005e76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cf1 	.word	0x08005cf1
 8005ca0:	08005e77 	.word	0x08005e77
 8005ca4:	08005e77 	.word	0x08005e77
 8005ca8:	08005e77 	.word	0x08005e77
 8005cac:	08005d31 	.word	0x08005d31
 8005cb0:	08005e77 	.word	0x08005e77
 8005cb4:	08005e77 	.word	0x08005e77
 8005cb8:	08005e77 	.word	0x08005e77
 8005cbc:	08005d73 	.word	0x08005d73
 8005cc0:	08005e77 	.word	0x08005e77
 8005cc4:	08005e77 	.word	0x08005e77
 8005cc8:	08005e77 	.word	0x08005e77
 8005ccc:	08005db3 	.word	0x08005db3
 8005cd0:	08005e77 	.word	0x08005e77
 8005cd4:	08005e77 	.word	0x08005e77
 8005cd8:	08005e77 	.word	0x08005e77
 8005cdc:	08005df5 	.word	0x08005df5
 8005ce0:	08005e77 	.word	0x08005e77
 8005ce4:	08005e77 	.word	0x08005e77
 8005ce8:	08005e77 	.word	0x08005e77
 8005cec:	08005e35 	.word	0x08005e35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 f98c 	bl	8006014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0208 	orr.w	r2, r2, #8
 8005d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0204 	bic.w	r2, r2, #4
 8005d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6999      	ldr	r1, [r3, #24]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	619a      	str	r2, [r3, #24]
      break;
 8005d2e:	e0a5      	b.n	8005e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 f9fc 	bl	8006134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699a      	ldr	r2, [r3, #24]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6999      	ldr	r1, [r3, #24]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	021a      	lsls	r2, r3, #8
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	619a      	str	r2, [r3, #24]
      break;
 8005d70:	e084      	b.n	8005e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fa65 	bl	8006248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0208 	orr.w	r2, r2, #8
 8005d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0204 	bic.w	r2, r2, #4
 8005d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69d9      	ldr	r1, [r3, #28]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	61da      	str	r2, [r3, #28]
      break;
 8005db0:	e064      	b.n	8005e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68b9      	ldr	r1, [r7, #8]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 facd 	bl	8006358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69da      	ldr	r2, [r3, #28]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69d9      	ldr	r1, [r3, #28]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	021a      	lsls	r2, r3, #8
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	61da      	str	r2, [r3, #28]
      break;
 8005df2:	e043      	b.n	8005e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fb16 	bl	800642c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0208 	orr.w	r2, r2, #8
 8005e0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0204 	bic.w	r2, r2, #4
 8005e1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e32:	e023      	b.n	8005e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68b9      	ldr	r1, [r7, #8]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fb5a 	bl	80064f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	021a      	lsls	r2, r3, #8
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e74:	e002      	b.n	8005e7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	75fb      	strb	r3, [r7, #23]
      break;
 8005e7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop

08005e90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a40      	ldr	r2, [pc, #256]	; (8005ff4 <TIM_Base_SetConfig+0x114>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <TIM_Base_SetConfig+0x40>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efe:	d00f      	beq.n	8005f20 <TIM_Base_SetConfig+0x40>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a3d      	ldr	r2, [pc, #244]	; (8005ff8 <TIM_Base_SetConfig+0x118>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00b      	beq.n	8005f20 <TIM_Base_SetConfig+0x40>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a3c      	ldr	r2, [pc, #240]	; (8005ffc <TIM_Base_SetConfig+0x11c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d007      	beq.n	8005f20 <TIM_Base_SetConfig+0x40>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a3b      	ldr	r2, [pc, #236]	; (8006000 <TIM_Base_SetConfig+0x120>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d003      	beq.n	8005f20 <TIM_Base_SetConfig+0x40>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a3a      	ldr	r2, [pc, #232]	; (8006004 <TIM_Base_SetConfig+0x124>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d108      	bne.n	8005f32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a2f      	ldr	r2, [pc, #188]	; (8005ff4 <TIM_Base_SetConfig+0x114>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d01f      	beq.n	8005f7a <TIM_Base_SetConfig+0x9a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f40:	d01b      	beq.n	8005f7a <TIM_Base_SetConfig+0x9a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a2c      	ldr	r2, [pc, #176]	; (8005ff8 <TIM_Base_SetConfig+0x118>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d017      	beq.n	8005f7a <TIM_Base_SetConfig+0x9a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a2b      	ldr	r2, [pc, #172]	; (8005ffc <TIM_Base_SetConfig+0x11c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d013      	beq.n	8005f7a <TIM_Base_SetConfig+0x9a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a2a      	ldr	r2, [pc, #168]	; (8006000 <TIM_Base_SetConfig+0x120>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00f      	beq.n	8005f7a <TIM_Base_SetConfig+0x9a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a29      	ldr	r2, [pc, #164]	; (8006004 <TIM_Base_SetConfig+0x124>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00b      	beq.n	8005f7a <TIM_Base_SetConfig+0x9a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a28      	ldr	r2, [pc, #160]	; (8006008 <TIM_Base_SetConfig+0x128>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d007      	beq.n	8005f7a <TIM_Base_SetConfig+0x9a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a27      	ldr	r2, [pc, #156]	; (800600c <TIM_Base_SetConfig+0x12c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d003      	beq.n	8005f7a <TIM_Base_SetConfig+0x9a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a26      	ldr	r2, [pc, #152]	; (8006010 <TIM_Base_SetConfig+0x130>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d108      	bne.n	8005f8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a10      	ldr	r2, [pc, #64]	; (8005ff4 <TIM_Base_SetConfig+0x114>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00f      	beq.n	8005fd8 <TIM_Base_SetConfig+0xf8>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a12      	ldr	r2, [pc, #72]	; (8006004 <TIM_Base_SetConfig+0x124>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00b      	beq.n	8005fd8 <TIM_Base_SetConfig+0xf8>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a11      	ldr	r2, [pc, #68]	; (8006008 <TIM_Base_SetConfig+0x128>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d007      	beq.n	8005fd8 <TIM_Base_SetConfig+0xf8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a10      	ldr	r2, [pc, #64]	; (800600c <TIM_Base_SetConfig+0x12c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d003      	beq.n	8005fd8 <TIM_Base_SetConfig+0xf8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <TIM_Base_SetConfig+0x130>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d103      	bne.n	8005fe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	615a      	str	r2, [r3, #20]
}
 8005fe6:	bf00      	nop
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40012c00 	.word	0x40012c00
 8005ff8:	40000400 	.word	0x40000400
 8005ffc:	40000800 	.word	0x40000800
 8006000:	40000c00 	.word	0x40000c00
 8006004:	40013400 	.word	0x40013400
 8006008:	40014000 	.word	0x40014000
 800600c:	40014400 	.word	0x40014400
 8006010:	40014800 	.word	0x40014800

08006014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f023 0201 	bic.w	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0303 	bic.w	r3, r3, #3
 800604e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f023 0302 	bic.w	r3, r3, #2
 8006060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a2c      	ldr	r2, [pc, #176]	; (8006120 <TIM_OC1_SetConfig+0x10c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00f      	beq.n	8006094 <TIM_OC1_SetConfig+0x80>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a2b      	ldr	r2, [pc, #172]	; (8006124 <TIM_OC1_SetConfig+0x110>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00b      	beq.n	8006094 <TIM_OC1_SetConfig+0x80>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a2a      	ldr	r2, [pc, #168]	; (8006128 <TIM_OC1_SetConfig+0x114>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d007      	beq.n	8006094 <TIM_OC1_SetConfig+0x80>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a29      	ldr	r2, [pc, #164]	; (800612c <TIM_OC1_SetConfig+0x118>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_OC1_SetConfig+0x80>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a28      	ldr	r2, [pc, #160]	; (8006130 <TIM_OC1_SetConfig+0x11c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d10c      	bne.n	80060ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f023 0308 	bic.w	r3, r3, #8
 800609a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f023 0304 	bic.w	r3, r3, #4
 80060ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a1b      	ldr	r2, [pc, #108]	; (8006120 <TIM_OC1_SetConfig+0x10c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00f      	beq.n	80060d6 <TIM_OC1_SetConfig+0xc2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a1a      	ldr	r2, [pc, #104]	; (8006124 <TIM_OC1_SetConfig+0x110>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00b      	beq.n	80060d6 <TIM_OC1_SetConfig+0xc2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a19      	ldr	r2, [pc, #100]	; (8006128 <TIM_OC1_SetConfig+0x114>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d007      	beq.n	80060d6 <TIM_OC1_SetConfig+0xc2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a18      	ldr	r2, [pc, #96]	; (800612c <TIM_OC1_SetConfig+0x118>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d003      	beq.n	80060d6 <TIM_OC1_SetConfig+0xc2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a17      	ldr	r2, [pc, #92]	; (8006130 <TIM_OC1_SetConfig+0x11c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d111      	bne.n	80060fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	621a      	str	r2, [r3, #32]
}
 8006114:	bf00      	nop
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	40012c00 	.word	0x40012c00
 8006124:	40013400 	.word	0x40013400
 8006128:	40014000 	.word	0x40014000
 800612c:	40014400 	.word	0x40014400
 8006130:	40014800 	.word	0x40014800

08006134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f023 0210 	bic.w	r2, r3, #16
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800616e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	021b      	lsls	r3, r3, #8
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f023 0320 	bic.w	r3, r3, #32
 8006182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a28      	ldr	r2, [pc, #160]	; (8006234 <TIM_OC2_SetConfig+0x100>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d003      	beq.n	80061a0 <TIM_OC2_SetConfig+0x6c>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a27      	ldr	r2, [pc, #156]	; (8006238 <TIM_OC2_SetConfig+0x104>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d10d      	bne.n	80061bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a1d      	ldr	r2, [pc, #116]	; (8006234 <TIM_OC2_SetConfig+0x100>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00f      	beq.n	80061e4 <TIM_OC2_SetConfig+0xb0>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a1c      	ldr	r2, [pc, #112]	; (8006238 <TIM_OC2_SetConfig+0x104>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00b      	beq.n	80061e4 <TIM_OC2_SetConfig+0xb0>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a1b      	ldr	r2, [pc, #108]	; (800623c <TIM_OC2_SetConfig+0x108>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d007      	beq.n	80061e4 <TIM_OC2_SetConfig+0xb0>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a1a      	ldr	r2, [pc, #104]	; (8006240 <TIM_OC2_SetConfig+0x10c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d003      	beq.n	80061e4 <TIM_OC2_SetConfig+0xb0>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a19      	ldr	r2, [pc, #100]	; (8006244 <TIM_OC2_SetConfig+0x110>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d113      	bne.n	800620c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	4313      	orrs	r3, r2
 800620a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	621a      	str	r2, [r3, #32]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40012c00 	.word	0x40012c00
 8006238:	40013400 	.word	0x40013400
 800623c:	40014000 	.word	0x40014000
 8006240:	40014400 	.word	0x40014400
 8006244:	40014800 	.word	0x40014800

08006248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0303 	bic.w	r3, r3, #3
 8006282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a27      	ldr	r2, [pc, #156]	; (8006344 <TIM_OC3_SetConfig+0xfc>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d003      	beq.n	80062b2 <TIM_OC3_SetConfig+0x6a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a26      	ldr	r2, [pc, #152]	; (8006348 <TIM_OC3_SetConfig+0x100>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d10d      	bne.n	80062ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	021b      	lsls	r3, r3, #8
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a1c      	ldr	r2, [pc, #112]	; (8006344 <TIM_OC3_SetConfig+0xfc>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_OC3_SetConfig+0xae>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a1b      	ldr	r2, [pc, #108]	; (8006348 <TIM_OC3_SetConfig+0x100>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_OC3_SetConfig+0xae>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a1a      	ldr	r2, [pc, #104]	; (800634c <TIM_OC3_SetConfig+0x104>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_OC3_SetConfig+0xae>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a19      	ldr	r2, [pc, #100]	; (8006350 <TIM_OC3_SetConfig+0x108>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_OC3_SetConfig+0xae>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a18      	ldr	r2, [pc, #96]	; (8006354 <TIM_OC3_SetConfig+0x10c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d113      	bne.n	800631e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	011b      	lsls	r3, r3, #4
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	621a      	str	r2, [r3, #32]
}
 8006338:	bf00      	nop
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40013400 	.word	0x40013400
 800634c:	40014000 	.word	0x40014000
 8006350:	40014400 	.word	0x40014400
 8006354:	40014800 	.word	0x40014800

08006358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800638a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	031b      	lsls	r3, r3, #12
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a18      	ldr	r2, [pc, #96]	; (8006418 <TIM_OC4_SetConfig+0xc0>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00f      	beq.n	80063dc <TIM_OC4_SetConfig+0x84>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a17      	ldr	r2, [pc, #92]	; (800641c <TIM_OC4_SetConfig+0xc4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00b      	beq.n	80063dc <TIM_OC4_SetConfig+0x84>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a16      	ldr	r2, [pc, #88]	; (8006420 <TIM_OC4_SetConfig+0xc8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d007      	beq.n	80063dc <TIM_OC4_SetConfig+0x84>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a15      	ldr	r2, [pc, #84]	; (8006424 <TIM_OC4_SetConfig+0xcc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_OC4_SetConfig+0x84>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a14      	ldr	r2, [pc, #80]	; (8006428 <TIM_OC4_SetConfig+0xd0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d109      	bne.n	80063f0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	019b      	lsls	r3, r3, #6
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	621a      	str	r2, [r3, #32]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40012c00 	.word	0x40012c00
 800641c:	40013400 	.word	0x40013400
 8006420:	40014000 	.word	0x40014000
 8006424:	40014400 	.word	0x40014400
 8006428:	40014800 	.word	0x40014800

0800642c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800645a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006470:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	041b      	lsls	r3, r3, #16
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a17      	ldr	r2, [pc, #92]	; (80064e0 <TIM_OC5_SetConfig+0xb4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00f      	beq.n	80064a6 <TIM_OC5_SetConfig+0x7a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a16      	ldr	r2, [pc, #88]	; (80064e4 <TIM_OC5_SetConfig+0xb8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00b      	beq.n	80064a6 <TIM_OC5_SetConfig+0x7a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a15      	ldr	r2, [pc, #84]	; (80064e8 <TIM_OC5_SetConfig+0xbc>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d007      	beq.n	80064a6 <TIM_OC5_SetConfig+0x7a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a14      	ldr	r2, [pc, #80]	; (80064ec <TIM_OC5_SetConfig+0xc0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d003      	beq.n	80064a6 <TIM_OC5_SetConfig+0x7a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a13      	ldr	r2, [pc, #76]	; (80064f0 <TIM_OC5_SetConfig+0xc4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d109      	bne.n	80064ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	621a      	str	r2, [r3, #32]
}
 80064d4:	bf00      	nop
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	40012c00 	.word	0x40012c00
 80064e4:	40013400 	.word	0x40013400
 80064e8:	40014000 	.word	0x40014000
 80064ec:	40014400 	.word	0x40014400
 80064f0:	40014800 	.word	0x40014800

080064f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800653a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	051b      	lsls	r3, r3, #20
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a18      	ldr	r2, [pc, #96]	; (80065ac <TIM_OC6_SetConfig+0xb8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00f      	beq.n	8006570 <TIM_OC6_SetConfig+0x7c>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a17      	ldr	r2, [pc, #92]	; (80065b0 <TIM_OC6_SetConfig+0xbc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00b      	beq.n	8006570 <TIM_OC6_SetConfig+0x7c>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a16      	ldr	r2, [pc, #88]	; (80065b4 <TIM_OC6_SetConfig+0xc0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d007      	beq.n	8006570 <TIM_OC6_SetConfig+0x7c>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <TIM_OC6_SetConfig+0xc4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d003      	beq.n	8006570 <TIM_OC6_SetConfig+0x7c>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a14      	ldr	r2, [pc, #80]	; (80065bc <TIM_OC6_SetConfig+0xc8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d109      	bne.n	8006584 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006576:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	029b      	lsls	r3, r3, #10
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	621a      	str	r2, [r3, #32]
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40013400 	.word	0x40013400
 80065b4:	40014000 	.word	0x40014000
 80065b8:	40014400 	.word	0x40014400
 80065bc:	40014800 	.word	0x40014800

080065c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f003 031f 	and.w	r3, r3, #31
 80065d2:	2201      	movs	r2, #1
 80065d4:	fa02 f303 	lsl.w	r3, r2, r3
 80065d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a1a      	ldr	r2, [r3, #32]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	43db      	mvns	r3, r3
 80065e2:	401a      	ands	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a1a      	ldr	r2, [r3, #32]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f003 031f 	and.w	r3, r3, #31
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	fa01 f303 	lsl.w	r3, r1, r3
 80065f8:	431a      	orrs	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	621a      	str	r2, [r3, #32]
}
 80065fe:	bf00      	nop
 8006600:	371c      	adds	r7, #28
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
	...

0800660c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006620:	2302      	movs	r3, #2
 8006622:	e068      	b.n	80066f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a2e      	ldr	r2, [pc, #184]	; (8006704 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d004      	beq.n	8006658 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a2d      	ldr	r2, [pc, #180]	; (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d108      	bne.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800665e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006670:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4313      	orrs	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a1e      	ldr	r2, [pc, #120]	; (8006704 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d01d      	beq.n	80066ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006696:	d018      	beq.n	80066ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a1b      	ldr	r2, [pc, #108]	; (800670c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d013      	beq.n	80066ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a1a      	ldr	r2, [pc, #104]	; (8006710 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00e      	beq.n	80066ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a18      	ldr	r2, [pc, #96]	; (8006714 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d009      	beq.n	80066ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a13      	ldr	r2, [pc, #76]	; (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d004      	beq.n	80066ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a14      	ldr	r2, [pc, #80]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d10c      	bne.n	80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40012c00 	.word	0x40012c00
 8006708:	40013400 	.word	0x40013400
 800670c:	40000400 	.word	0x40000400
 8006710:	40000800 	.word	0x40000800
 8006714:	40000c00 	.word	0x40000c00
 8006718:	40014000 	.word	0x40014000

0800671c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e040      	b.n	80067ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fb f88c 	bl	8001898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2224      	movs	r2, #36	; 0x24
 8006784:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0201 	bic.w	r2, r2, #1
 8006794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fbc8 	bl	8006f2c <UART_SetConfig>
 800679c:	4603      	mov	r3, r0
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d101      	bne.n	80067a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e022      	b.n	80067ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fe74 	bl	800749c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0201 	orr.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fefb 	bl	80075e0 <UART_CheckIdleState>
 80067ea:	4603      	mov	r3, r0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08a      	sub	sp, #40	; 0x28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006806:	2b20      	cmp	r3, #32
 8006808:	d178      	bne.n	80068fc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <HAL_UART_Transmit_DMA+0x22>
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e071      	b.n	80068fe <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006820:	2b01      	cmp	r3, #1
 8006822:	d101      	bne.n	8006828 <HAL_UART_Transmit_DMA+0x34>
 8006824:	2302      	movs	r3, #2
 8006826:	e06a      	b.n	80068fe <HAL_UART_Transmit_DMA+0x10a>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	88fa      	ldrh	r2, [r7, #6]
 800683a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	88fa      	ldrh	r2, [r7, #6]
 8006842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2221      	movs	r2, #33	; 0x21
 8006852:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d02b      	beq.n	80068b4 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006860:	4a29      	ldr	r2, [pc, #164]	; (8006908 <HAL_UART_Transmit_DMA+0x114>)
 8006862:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006868:	4a28      	ldr	r2, [pc, #160]	; (800690c <HAL_UART_Transmit_DMA+0x118>)
 800686a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006870:	4a27      	ldr	r2, [pc, #156]	; (8006910 <HAL_UART_Transmit_DMA+0x11c>)
 8006872:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006878:	2200      	movs	r2, #0
 800687a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006884:	4619      	mov	r1, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3328      	adds	r3, #40	; 0x28
 800688c:	461a      	mov	r2, r3
 800688e:	88fb      	ldrh	r3, [r7, #6]
 8006890:	f7fc f9ee 	bl	8002c70 <HAL_DMA_Start_IT>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00c      	beq.n	80068b4 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2210      	movs	r2, #16
 800689e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e024      	b.n	80068fe <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2240      	movs	r2, #64	; 0x40
 80068ba:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3308      	adds	r3, #8
 80068ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	613b      	str	r3, [r7, #16]
   return(result);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3308      	adds	r3, #8
 80068e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e4:	623a      	str	r2, [r7, #32]
 80068e6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	69f9      	ldr	r1, [r7, #28]
 80068ea:	6a3a      	ldr	r2, [r7, #32]
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e5      	bne.n	80068c4 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	e000      	b.n	80068fe <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80068fc:	2302      	movs	r3, #2
  }
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3728      	adds	r7, #40	; 0x28
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	0800790d 	.word	0x0800790d
 800690c:	080079a7 	.word	0x080079a7
 8006910:	080079c3 	.word	0x080079c3

08006914 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b0ba      	sub	sp, #232	; 0xe8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800693a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800693e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006942:	4013      	ands	r3, r2
 8006944:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800694c:	2b00      	cmp	r3, #0
 800694e:	d115      	bne.n	800697c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00f      	beq.n	800697c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d009      	beq.n	800697c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 82a6 	beq.w	8006ebe <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	4798      	blx	r3
      }
      return;
 800697a:	e2a0      	b.n	8006ebe <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800697c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 8117 	beq.w	8006bb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006996:	4b85      	ldr	r3, [pc, #532]	; (8006bac <HAL_UART_IRQHandler+0x298>)
 8006998:	4013      	ands	r3, r2
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 810a 	beq.w	8006bb4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d011      	beq.n	80069d0 <HAL_UART_IRQHandler+0xbc>
 80069ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2201      	movs	r2, #1
 80069be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c6:	f043 0201 	orr.w	r2, r3, #1
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d011      	beq.n	8006a00 <HAL_UART_IRQHandler+0xec>
 80069dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00b      	beq.n	8006a00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2202      	movs	r2, #2
 80069ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069f6:	f043 0204 	orr.w	r2, r3, #4
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d011      	beq.n	8006a30 <HAL_UART_IRQHandler+0x11c>
 8006a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00b      	beq.n	8006a30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2204      	movs	r2, #4
 8006a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a26:	f043 0202 	orr.w	r2, r3, #2
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a34:	f003 0308 	and.w	r3, r3, #8
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d017      	beq.n	8006a6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d105      	bne.n	8006a54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2208      	movs	r2, #8
 8006a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a62:	f043 0208 	orr.w	r2, r3, #8
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d012      	beq.n	8006a9e <HAL_UART_IRQHandler+0x18a>
 8006a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00c      	beq.n	8006a9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a94:	f043 0220 	orr.w	r2, r3, #32
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 820c 	beq.w	8006ec2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae6:	2b40      	cmp	r3, #64	; 0x40
 8006ae8:	d005      	beq.n	8006af6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d04f      	beq.n	8006b96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fea5 	bl	8007846 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b06:	2b40      	cmp	r3, #64	; 0x40
 8006b08:	d141      	bne.n	8006b8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3308      	adds	r3, #8
 8006b10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3308      	adds	r3, #8
 8006b32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1d9      	bne.n	8006b0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d013      	beq.n	8006b86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b62:	4a13      	ldr	r2, [pc, #76]	; (8006bb0 <HAL_UART_IRQHandler+0x29c>)
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fc f91e 	bl	8002dac <HAL_DMA_Abort_IT>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d017      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006b80:	4610      	mov	r0, r2
 8006b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b84:	e00f      	b.n	8006ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f9ba 	bl	8006f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8c:	e00b      	b.n	8006ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f9b6 	bl	8006f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b94:	e007      	b.n	8006ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f9b2 	bl	8006f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006ba4:	e18d      	b.n	8006ec2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba6:	bf00      	nop
    return;
 8006ba8:	e18b      	b.n	8006ec2 <HAL_UART_IRQHandler+0x5ae>
 8006baa:	bf00      	nop
 8006bac:	04000120 	.word	0x04000120
 8006bb0:	08007a3f 	.word	0x08007a3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	f040 8146 	bne.w	8006e4a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 813f 	beq.w	8006e4a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8138 	beq.w	8006e4a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2210      	movs	r2, #16
 8006be0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bec:	2b40      	cmp	r3, #64	; 0x40
 8006bee:	f040 80b4 	bne.w	8006d5a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bfe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 815f 	beq.w	8006ec6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c12:	429a      	cmp	r2, r3
 8006c14:	f080 8157 	bcs.w	8006ec6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f040 8085 	bne.w	8006d3e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1da      	bne.n	8006c34 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ca2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006caa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e1      	bne.n	8006c7e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3308      	adds	r3, #8
 8006cda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ce0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ce4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e3      	bne.n	8006cba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d0e:	f023 0310 	bic.w	r3, r3, #16
 8006d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d20:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d22:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e4      	bne.n	8006cfe <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fb fff9 	bl	8002d30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f8de 	bl	8006f14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d58:	e0b5      	b.n	8006ec6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 80a7 	beq.w	8006eca <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006d7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 80a2 	beq.w	8006eca <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006da8:	647b      	str	r3, [r7, #68]	; 0x44
 8006daa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e4      	bne.n	8006d86 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	623b      	str	r3, [r7, #32]
   return(result);
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	f023 0301 	bic.w	r3, r3, #1
 8006dd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3308      	adds	r3, #8
 8006ddc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006de0:	633a      	str	r2, [r7, #48]	; 0x30
 8006de2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e3      	bne.n	8006dbc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 0310 	bic.w	r3, r3, #16
 8006e1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	69b9      	ldr	r1, [r7, #24]
 8006e2e:	69fa      	ldr	r2, [r7, #28]
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	617b      	str	r3, [r7, #20]
   return(result);
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e4      	bne.n	8006e06 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f866 	bl	8006f14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e48:	e03f      	b.n	8006eca <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00e      	beq.n	8006e74 <HAL_UART_IRQHandler+0x560>
 8006e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d008      	beq.n	8006e74 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fe26 	bl	8007abe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e72:	e02d      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00e      	beq.n	8006e9e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d008      	beq.n	8006e9e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01c      	beq.n	8006ece <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4798      	blx	r3
    }
    return;
 8006e9c:	e017      	b.n	8006ece <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d012      	beq.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
 8006eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00c      	beq.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fdd7 	bl	8007a6a <UART_EndTransmit_IT>
    return;
 8006ebc:	e008      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ebe:	bf00      	nop
 8006ec0:	e006      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006ec2:	bf00      	nop
 8006ec4:	e004      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ec6:	bf00      	nop
 8006ec8:	e002      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006eca:	bf00      	nop
 8006ecc:	e000      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006ece:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ed0:	37e8      	adds	r7, #232	; 0xe8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop

08006ed8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f30:	b08a      	sub	sp, #40	; 0x28
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	431a      	orrs	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	4ba4      	ldr	r3, [pc, #656]	; (80071ec <UART_SetConfig+0x2c0>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	6812      	ldr	r2, [r2, #0]
 8006f62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f64:	430b      	orrs	r3, r1
 8006f66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a99      	ldr	r2, [pc, #612]	; (80071f0 <UART_SetConfig+0x2c4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f94:	4313      	orrs	r3, r2
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a90      	ldr	r2, [pc, #576]	; (80071f4 <UART_SetConfig+0x2c8>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d126      	bne.n	8007004 <UART_SetConfig+0xd8>
 8006fb6:	4b90      	ldr	r3, [pc, #576]	; (80071f8 <UART_SetConfig+0x2cc>)
 8006fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d81b      	bhi.n	8006ffc <UART_SetConfig+0xd0>
 8006fc4:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <UART_SetConfig+0xa0>)
 8006fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fca:	bf00      	nop
 8006fcc:	08006fdd 	.word	0x08006fdd
 8006fd0:	08006fed 	.word	0x08006fed
 8006fd4:	08006fe5 	.word	0x08006fe5
 8006fd8:	08006ff5 	.word	0x08006ff5
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fe2:	e116      	b.n	8007212 <UART_SetConfig+0x2e6>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fea:	e112      	b.n	8007212 <UART_SetConfig+0x2e6>
 8006fec:	2304      	movs	r3, #4
 8006fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ff2:	e10e      	b.n	8007212 <UART_SetConfig+0x2e6>
 8006ff4:	2308      	movs	r3, #8
 8006ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ffa:	e10a      	b.n	8007212 <UART_SetConfig+0x2e6>
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007002:	e106      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a7c      	ldr	r2, [pc, #496]	; (80071fc <UART_SetConfig+0x2d0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d138      	bne.n	8007080 <UART_SetConfig+0x154>
 800700e:	4b7a      	ldr	r3, [pc, #488]	; (80071f8 <UART_SetConfig+0x2cc>)
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007014:	f003 030c 	and.w	r3, r3, #12
 8007018:	2b0c      	cmp	r3, #12
 800701a:	d82d      	bhi.n	8007078 <UART_SetConfig+0x14c>
 800701c:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <UART_SetConfig+0xf8>)
 800701e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007022:	bf00      	nop
 8007024:	08007059 	.word	0x08007059
 8007028:	08007079 	.word	0x08007079
 800702c:	08007079 	.word	0x08007079
 8007030:	08007079 	.word	0x08007079
 8007034:	08007069 	.word	0x08007069
 8007038:	08007079 	.word	0x08007079
 800703c:	08007079 	.word	0x08007079
 8007040:	08007079 	.word	0x08007079
 8007044:	08007061 	.word	0x08007061
 8007048:	08007079 	.word	0x08007079
 800704c:	08007079 	.word	0x08007079
 8007050:	08007079 	.word	0x08007079
 8007054:	08007071 	.word	0x08007071
 8007058:	2300      	movs	r3, #0
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705e:	e0d8      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007060:	2302      	movs	r3, #2
 8007062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007066:	e0d4      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007068:	2304      	movs	r3, #4
 800706a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800706e:	e0d0      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007070:	2308      	movs	r3, #8
 8007072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007076:	e0cc      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007078:	2310      	movs	r3, #16
 800707a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800707e:	e0c8      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a5e      	ldr	r2, [pc, #376]	; (8007200 <UART_SetConfig+0x2d4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d125      	bne.n	80070d6 <UART_SetConfig+0x1aa>
 800708a:	4b5b      	ldr	r3, [pc, #364]	; (80071f8 <UART_SetConfig+0x2cc>)
 800708c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007090:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007094:	2b30      	cmp	r3, #48	; 0x30
 8007096:	d016      	beq.n	80070c6 <UART_SetConfig+0x19a>
 8007098:	2b30      	cmp	r3, #48	; 0x30
 800709a:	d818      	bhi.n	80070ce <UART_SetConfig+0x1a2>
 800709c:	2b20      	cmp	r3, #32
 800709e:	d00a      	beq.n	80070b6 <UART_SetConfig+0x18a>
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	d814      	bhi.n	80070ce <UART_SetConfig+0x1a2>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <UART_SetConfig+0x182>
 80070a8:	2b10      	cmp	r3, #16
 80070aa:	d008      	beq.n	80070be <UART_SetConfig+0x192>
 80070ac:	e00f      	b.n	80070ce <UART_SetConfig+0x1a2>
 80070ae:	2300      	movs	r3, #0
 80070b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070b4:	e0ad      	b.n	8007212 <UART_SetConfig+0x2e6>
 80070b6:	2302      	movs	r3, #2
 80070b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070bc:	e0a9      	b.n	8007212 <UART_SetConfig+0x2e6>
 80070be:	2304      	movs	r3, #4
 80070c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c4:	e0a5      	b.n	8007212 <UART_SetConfig+0x2e6>
 80070c6:	2308      	movs	r3, #8
 80070c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070cc:	e0a1      	b.n	8007212 <UART_SetConfig+0x2e6>
 80070ce:	2310      	movs	r3, #16
 80070d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d4:	e09d      	b.n	8007212 <UART_SetConfig+0x2e6>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a4a      	ldr	r2, [pc, #296]	; (8007204 <UART_SetConfig+0x2d8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d125      	bne.n	800712c <UART_SetConfig+0x200>
 80070e0:	4b45      	ldr	r3, [pc, #276]	; (80071f8 <UART_SetConfig+0x2cc>)
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070ea:	2bc0      	cmp	r3, #192	; 0xc0
 80070ec:	d016      	beq.n	800711c <UART_SetConfig+0x1f0>
 80070ee:	2bc0      	cmp	r3, #192	; 0xc0
 80070f0:	d818      	bhi.n	8007124 <UART_SetConfig+0x1f8>
 80070f2:	2b80      	cmp	r3, #128	; 0x80
 80070f4:	d00a      	beq.n	800710c <UART_SetConfig+0x1e0>
 80070f6:	2b80      	cmp	r3, #128	; 0x80
 80070f8:	d814      	bhi.n	8007124 <UART_SetConfig+0x1f8>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <UART_SetConfig+0x1d8>
 80070fe:	2b40      	cmp	r3, #64	; 0x40
 8007100:	d008      	beq.n	8007114 <UART_SetConfig+0x1e8>
 8007102:	e00f      	b.n	8007124 <UART_SetConfig+0x1f8>
 8007104:	2300      	movs	r3, #0
 8007106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800710a:	e082      	b.n	8007212 <UART_SetConfig+0x2e6>
 800710c:	2302      	movs	r3, #2
 800710e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007112:	e07e      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007114:	2304      	movs	r3, #4
 8007116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800711a:	e07a      	b.n	8007212 <UART_SetConfig+0x2e6>
 800711c:	2308      	movs	r3, #8
 800711e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007122:	e076      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007124:	2310      	movs	r3, #16
 8007126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800712a:	e072      	b.n	8007212 <UART_SetConfig+0x2e6>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a35      	ldr	r2, [pc, #212]	; (8007208 <UART_SetConfig+0x2dc>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d12a      	bne.n	800718c <UART_SetConfig+0x260>
 8007136:	4b30      	ldr	r3, [pc, #192]	; (80071f8 <UART_SetConfig+0x2cc>)
 8007138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007140:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007144:	d01a      	beq.n	800717c <UART_SetConfig+0x250>
 8007146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800714a:	d81b      	bhi.n	8007184 <UART_SetConfig+0x258>
 800714c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007150:	d00c      	beq.n	800716c <UART_SetConfig+0x240>
 8007152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007156:	d815      	bhi.n	8007184 <UART_SetConfig+0x258>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <UART_SetConfig+0x238>
 800715c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007160:	d008      	beq.n	8007174 <UART_SetConfig+0x248>
 8007162:	e00f      	b.n	8007184 <UART_SetConfig+0x258>
 8007164:	2300      	movs	r3, #0
 8007166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800716a:	e052      	b.n	8007212 <UART_SetConfig+0x2e6>
 800716c:	2302      	movs	r3, #2
 800716e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007172:	e04e      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007174:	2304      	movs	r3, #4
 8007176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800717a:	e04a      	b.n	8007212 <UART_SetConfig+0x2e6>
 800717c:	2308      	movs	r3, #8
 800717e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007182:	e046      	b.n	8007212 <UART_SetConfig+0x2e6>
 8007184:	2310      	movs	r3, #16
 8007186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800718a:	e042      	b.n	8007212 <UART_SetConfig+0x2e6>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a17      	ldr	r2, [pc, #92]	; (80071f0 <UART_SetConfig+0x2c4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d13a      	bne.n	800720c <UART_SetConfig+0x2e0>
 8007196:	4b18      	ldr	r3, [pc, #96]	; (80071f8 <UART_SetConfig+0x2cc>)
 8007198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800719c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071a4:	d01a      	beq.n	80071dc <UART_SetConfig+0x2b0>
 80071a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071aa:	d81b      	bhi.n	80071e4 <UART_SetConfig+0x2b8>
 80071ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071b0:	d00c      	beq.n	80071cc <UART_SetConfig+0x2a0>
 80071b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071b6:	d815      	bhi.n	80071e4 <UART_SetConfig+0x2b8>
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <UART_SetConfig+0x298>
 80071bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c0:	d008      	beq.n	80071d4 <UART_SetConfig+0x2a8>
 80071c2:	e00f      	b.n	80071e4 <UART_SetConfig+0x2b8>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ca:	e022      	b.n	8007212 <UART_SetConfig+0x2e6>
 80071cc:	2302      	movs	r3, #2
 80071ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071d2:	e01e      	b.n	8007212 <UART_SetConfig+0x2e6>
 80071d4:	2304      	movs	r3, #4
 80071d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071da:	e01a      	b.n	8007212 <UART_SetConfig+0x2e6>
 80071dc:	2308      	movs	r3, #8
 80071de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e2:	e016      	b.n	8007212 <UART_SetConfig+0x2e6>
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ea:	e012      	b.n	8007212 <UART_SetConfig+0x2e6>
 80071ec:	efff69f3 	.word	0xefff69f3
 80071f0:	40008000 	.word	0x40008000
 80071f4:	40013800 	.word	0x40013800
 80071f8:	40021000 	.word	0x40021000
 80071fc:	40004400 	.word	0x40004400
 8007200:	40004800 	.word	0x40004800
 8007204:	40004c00 	.word	0x40004c00
 8007208:	40005000 	.word	0x40005000
 800720c:	2310      	movs	r3, #16
 800720e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a9f      	ldr	r2, [pc, #636]	; (8007494 <UART_SetConfig+0x568>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d17a      	bne.n	8007312 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800721c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007220:	2b08      	cmp	r3, #8
 8007222:	d824      	bhi.n	800726e <UART_SetConfig+0x342>
 8007224:	a201      	add	r2, pc, #4	; (adr r2, 800722c <UART_SetConfig+0x300>)
 8007226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722a:	bf00      	nop
 800722c:	08007251 	.word	0x08007251
 8007230:	0800726f 	.word	0x0800726f
 8007234:	08007259 	.word	0x08007259
 8007238:	0800726f 	.word	0x0800726f
 800723c:	0800725f 	.word	0x0800725f
 8007240:	0800726f 	.word	0x0800726f
 8007244:	0800726f 	.word	0x0800726f
 8007248:	0800726f 	.word	0x0800726f
 800724c:	08007267 	.word	0x08007267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007250:	f7fd fc40 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8007254:	61f8      	str	r0, [r7, #28]
        break;
 8007256:	e010      	b.n	800727a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007258:	4b8f      	ldr	r3, [pc, #572]	; (8007498 <UART_SetConfig+0x56c>)
 800725a:	61fb      	str	r3, [r7, #28]
        break;
 800725c:	e00d      	b.n	800727a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800725e:	f7fd fba1 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 8007262:	61f8      	str	r0, [r7, #28]
        break;
 8007264:	e009      	b.n	800727a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800726a:	61fb      	str	r3, [r7, #28]
        break;
 800726c:	e005      	b.n	800727a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007278:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 80fb 	beq.w	8007478 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	4613      	mov	r3, r2
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	4413      	add	r3, r2
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	429a      	cmp	r2, r3
 8007290:	d305      	bcc.n	800729e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	429a      	cmp	r2, r3
 800729c:	d903      	bls.n	80072a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80072a4:	e0e8      	b.n	8007478 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	2200      	movs	r2, #0
 80072aa:	461c      	mov	r4, r3
 80072ac:	4615      	mov	r5, r2
 80072ae:	f04f 0200 	mov.w	r2, #0
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	022b      	lsls	r3, r5, #8
 80072b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80072bc:	0222      	lsls	r2, r4, #8
 80072be:	68f9      	ldr	r1, [r7, #12]
 80072c0:	6849      	ldr	r1, [r1, #4]
 80072c2:	0849      	lsrs	r1, r1, #1
 80072c4:	2000      	movs	r0, #0
 80072c6:	4688      	mov	r8, r1
 80072c8:	4681      	mov	r9, r0
 80072ca:	eb12 0a08 	adds.w	sl, r2, r8
 80072ce:	eb43 0b09 	adc.w	fp, r3, r9
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072e0:	4650      	mov	r0, sl
 80072e2:	4659      	mov	r1, fp
 80072e4:	f7f9 fcd0 	bl	8000c88 <__aeabi_uldivmod>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4613      	mov	r3, r2
 80072ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072f6:	d308      	bcc.n	800730a <UART_SetConfig+0x3de>
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fe:	d204      	bcs.n	800730a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	60da      	str	r2, [r3, #12]
 8007308:	e0b6      	b.n	8007478 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007310:	e0b2      	b.n	8007478 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800731a:	d15e      	bne.n	80073da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800731c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007320:	2b08      	cmp	r3, #8
 8007322:	d828      	bhi.n	8007376 <UART_SetConfig+0x44a>
 8007324:	a201      	add	r2, pc, #4	; (adr r2, 800732c <UART_SetConfig+0x400>)
 8007326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732a:	bf00      	nop
 800732c:	08007351 	.word	0x08007351
 8007330:	08007359 	.word	0x08007359
 8007334:	08007361 	.word	0x08007361
 8007338:	08007377 	.word	0x08007377
 800733c:	08007367 	.word	0x08007367
 8007340:	08007377 	.word	0x08007377
 8007344:	08007377 	.word	0x08007377
 8007348:	08007377 	.word	0x08007377
 800734c:	0800736f 	.word	0x0800736f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007350:	f7fd fbc0 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8007354:	61f8      	str	r0, [r7, #28]
        break;
 8007356:	e014      	b.n	8007382 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007358:	f7fd fbd2 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 800735c:	61f8      	str	r0, [r7, #28]
        break;
 800735e:	e010      	b.n	8007382 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007360:	4b4d      	ldr	r3, [pc, #308]	; (8007498 <UART_SetConfig+0x56c>)
 8007362:	61fb      	str	r3, [r7, #28]
        break;
 8007364:	e00d      	b.n	8007382 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007366:	f7fd fb1d 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 800736a:	61f8      	str	r0, [r7, #28]
        break;
 800736c:	e009      	b.n	8007382 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800736e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007372:	61fb      	str	r3, [r7, #28]
        break;
 8007374:	e005      	b.n	8007382 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007380:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d077      	beq.n	8007478 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	005a      	lsls	r2, r3, #1
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	085b      	lsrs	r3, r3, #1
 8007392:	441a      	add	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	fbb2 f3f3 	udiv	r3, r2, r3
 800739c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b0f      	cmp	r3, #15
 80073a2:	d916      	bls.n	80073d2 <UART_SetConfig+0x4a6>
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073aa:	d212      	bcs.n	80073d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	f023 030f 	bic.w	r3, r3, #15
 80073b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	085b      	lsrs	r3, r3, #1
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f003 0307 	and.w	r3, r3, #7
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	8afb      	ldrh	r3, [r7, #22]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	8afa      	ldrh	r2, [r7, #22]
 80073ce:	60da      	str	r2, [r3, #12]
 80073d0:	e052      	b.n	8007478 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80073d8:	e04e      	b.n	8007478 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073de:	2b08      	cmp	r3, #8
 80073e0:	d827      	bhi.n	8007432 <UART_SetConfig+0x506>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <UART_SetConfig+0x4bc>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	0800740d 	.word	0x0800740d
 80073ec:	08007415 	.word	0x08007415
 80073f0:	0800741d 	.word	0x0800741d
 80073f4:	08007433 	.word	0x08007433
 80073f8:	08007423 	.word	0x08007423
 80073fc:	08007433 	.word	0x08007433
 8007400:	08007433 	.word	0x08007433
 8007404:	08007433 	.word	0x08007433
 8007408:	0800742b 	.word	0x0800742b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800740c:	f7fd fb62 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8007410:	61f8      	str	r0, [r7, #28]
        break;
 8007412:	e014      	b.n	800743e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007414:	f7fd fb74 	bl	8004b00 <HAL_RCC_GetPCLK2Freq>
 8007418:	61f8      	str	r0, [r7, #28]
        break;
 800741a:	e010      	b.n	800743e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800741c:	4b1e      	ldr	r3, [pc, #120]	; (8007498 <UART_SetConfig+0x56c>)
 800741e:	61fb      	str	r3, [r7, #28]
        break;
 8007420:	e00d      	b.n	800743e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007422:	f7fd fabf 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 8007426:	61f8      	str	r0, [r7, #28]
        break;
 8007428:	e009      	b.n	800743e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800742a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800742e:	61fb      	str	r3, [r7, #28]
        break;
 8007430:	e005      	b.n	800743e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800743c:	bf00      	nop
    }

    if (pclk != 0U)
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d019      	beq.n	8007478 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	085a      	lsrs	r2, r3, #1
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	441a      	add	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	fbb2 f3f3 	udiv	r3, r2, r3
 8007456:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	2b0f      	cmp	r3, #15
 800745c:	d909      	bls.n	8007472 <UART_SetConfig+0x546>
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007464:	d205      	bcs.n	8007472 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	b29a      	uxth	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	60da      	str	r2, [r3, #12]
 8007470:	e002      	b.n	8007478 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007484:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007488:	4618      	mov	r0, r3
 800748a:	3728      	adds	r7, #40	; 0x28
 800748c:	46bd      	mov	sp, r7
 800748e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007492:	bf00      	nop
 8007494:	40008000 	.word	0x40008000
 8007498:	00f42400 	.word	0x00f42400

0800749c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00a      	beq.n	80074e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00a      	beq.n	800750a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	f003 0310 	and.w	r3, r3, #16
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00a      	beq.n	800754e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d01a      	beq.n	80075b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800759a:	d10a      	bne.n	80075b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	605a      	str	r2, [r3, #4]
  }
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075f0:	f7fb f998 	bl	8002924 <HAL_GetTick>
 80075f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b08      	cmp	r3, #8
 8007602:	d10e      	bne.n	8007622 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f82d 	bl	8007672 <UART_WaitOnFlagUntilTimeout>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e023      	b.n	800766a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b04      	cmp	r3, #4
 800762e:	d10e      	bne.n	800764e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f817 	bl	8007672 <UART_WaitOnFlagUntilTimeout>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e00d      	b.n	800766a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2220      	movs	r2, #32
 8007652:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2220      	movs	r2, #32
 8007658:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b09c      	sub	sp, #112	; 0x70
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	603b      	str	r3, [r7, #0]
 800767e:	4613      	mov	r3, r2
 8007680:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007682:	e0a5      	b.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768a:	f000 80a1 	beq.w	80077d0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800768e:	f7fb f949 	bl	8002924 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800769a:	429a      	cmp	r2, r3
 800769c:	d302      	bcc.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800769e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d13e      	bne.n	8007722 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076b8:	667b      	str	r3, [r7, #100]	; 0x64
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80076d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e6      	bne.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3308      	adds	r3, #8
 80076dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e8:	f023 0301 	bic.w	r3, r3, #1
 80076ec:	663b      	str	r3, [r7, #96]	; 0x60
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3308      	adds	r3, #8
 80076f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80076f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e5      	bne.n	80076d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2220      	movs	r2, #32
 800770e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2220      	movs	r2, #32
 8007714:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e067      	b.n	80077f2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d04f      	beq.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800773a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800773e:	d147      	bne.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007748:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	e853 3f00 	ldrex	r3, [r3]
 8007756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800775e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
 800776a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800776e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007770:	e841 2300 	strex	r3, r2, [r1]
 8007774:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e6      	bne.n	800774a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3308      	adds	r3, #8
 8007782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	e853 3f00 	ldrex	r3, [r3]
 800778a:	613b      	str	r3, [r7, #16]
   return(result);
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f023 0301 	bic.w	r3, r3, #1
 8007792:	66bb      	str	r3, [r7, #104]	; 0x68
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3308      	adds	r3, #8
 800779a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800779c:	623a      	str	r2, [r7, #32]
 800779e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	69f9      	ldr	r1, [r7, #28]
 80077a2:	6a3a      	ldr	r2, [r7, #32]
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e5      	bne.n	800777c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2220      	movs	r2, #32
 80077b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2220      	movs	r2, #32
 80077ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2220      	movs	r2, #32
 80077c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e010      	b.n	80077f2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69da      	ldr	r2, [r3, #28]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	4013      	ands	r3, r2
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	429a      	cmp	r2, r3
 80077de:	bf0c      	ite	eq
 80077e0:	2301      	moveq	r3, #1
 80077e2:	2300      	movne	r3, #0
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	461a      	mov	r2, r3
 80077e8:	79fb      	ldrb	r3, [r7, #7]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	f43f af4a 	beq.w	8007684 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3770      	adds	r7, #112	; 0x70
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b089      	sub	sp, #36	; 0x24
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	e853 3f00 	ldrex	r3, [r3]
 800780e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007816:	61fb      	str	r3, [r7, #28]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	461a      	mov	r2, r3
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	61bb      	str	r3, [r7, #24]
 8007822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007824:	6979      	ldr	r1, [r7, #20]
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	e841 2300 	strex	r3, r2, [r1]
 800782c:	613b      	str	r3, [r7, #16]
   return(result);
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e6      	bne.n	8007802 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2220      	movs	r2, #32
 8007838:	679a      	str	r2, [r3, #120]	; 0x78
}
 800783a:	bf00      	nop
 800783c:	3724      	adds	r7, #36	; 0x24
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007846:	b480      	push	{r7}
 8007848:	b095      	sub	sp, #84	; 0x54
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800786c:	643b      	str	r3, [r7, #64]	; 0x40
 800786e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007872:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007874:	e841 2300 	strex	r3, r2, [r1]
 8007878:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e6      	bne.n	800784e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3308      	adds	r3, #8
 8007886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	f023 0301 	bic.w	r3, r3, #1
 8007896:	64bb      	str	r3, [r7, #72]	; 0x48
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3308      	adds	r3, #8
 800789e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078a8:	e841 2300 	strex	r3, r2, [r1]
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e5      	bne.n	8007880 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d118      	bne.n	80078ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f023 0310 	bic.w	r3, r3, #16
 80078d0:	647b      	str	r3, [r7, #68]	; 0x44
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078da:	61bb      	str	r3, [r7, #24]
 80078dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	6979      	ldr	r1, [r7, #20]
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	e841 2300 	strex	r3, r2, [r1]
 80078e6:	613b      	str	r3, [r7, #16]
   return(result);
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1e6      	bne.n	80078bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2220      	movs	r2, #32
 80078f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007900:	bf00      	nop
 8007902:	3754      	adds	r7, #84	; 0x54
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b090      	sub	sp, #64	; 0x40
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007918:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b00      	cmp	r3, #0
 8007926:	d137      	bne.n	8007998 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792a:	2200      	movs	r2, #0
 800792c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3308      	adds	r3, #8
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	623b      	str	r3, [r7, #32]
   return(result);
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007946:	63bb      	str	r3, [r7, #56]	; 0x38
 8007948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3308      	adds	r3, #8
 800794e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007950:	633a      	str	r2, [r7, #48]	; 0x30
 8007952:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e5      	bne.n	8007930 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	60fb      	str	r3, [r7, #12]
   return(result);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007978:	637b      	str	r3, [r7, #52]	; 0x34
 800797a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007982:	61fb      	str	r3, [r7, #28]
 8007984:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	69b9      	ldr	r1, [r7, #24]
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	617b      	str	r3, [r7, #20]
   return(result);
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e6      	bne.n	8007964 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007996:	e002      	b.n	800799e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007998:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800799a:	f7ff fa9d 	bl	8006ed8 <HAL_UART_TxCpltCallback>
}
 800799e:	bf00      	nop
 80079a0:	3740      	adds	r7, #64	; 0x40
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f7ff fa99 	bl	8006eec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ba:	bf00      	nop
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b086      	sub	sp, #24
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079d4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079da:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e6:	2b80      	cmp	r3, #128	; 0x80
 80079e8:	d109      	bne.n	80079fe <UART_DMAError+0x3c>
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	2b21      	cmp	r3, #33	; 0x21
 80079ee:	d106      	bne.n	80079fe <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80079f8:	6978      	ldr	r0, [r7, #20]
 80079fa:	f7ff fefe 	bl	80077fa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a08:	2b40      	cmp	r3, #64	; 0x40
 8007a0a:	d109      	bne.n	8007a20 <UART_DMAError+0x5e>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b22      	cmp	r3, #34	; 0x22
 8007a10:	d106      	bne.n	8007a20 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007a1a:	6978      	ldr	r0, [r7, #20]
 8007a1c:	f7ff ff13 	bl	8007846 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a26:	f043 0210 	orr.w	r2, r3, #16
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a30:	6978      	ldr	r0, [r7, #20]
 8007a32:	f7ff fa65 	bl	8006f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a36:	bf00      	nop
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f7ff fa4f 	bl	8006f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a62:	bf00      	nop
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b088      	sub	sp, #32
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a86:	61fb      	str	r3, [r7, #28]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	61bb      	str	r3, [r7, #24]
 8007a92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	6979      	ldr	r1, [r7, #20]
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	e841 2300 	strex	r3, r2, [r1]
 8007a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e6      	bne.n	8007a72 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff fa11 	bl	8006ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ab6:	bf00      	nop
 8007ab8:	3720      	adds	r7, #32
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	4603      	mov	r3, r0
 8007ada:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007adc:	2300      	movs	r3, #0
 8007ade:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ae4:	2b84      	cmp	r3, #132	; 0x84
 8007ae6:	d005      	beq.n	8007af4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007ae8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	3303      	adds	r3, #3
 8007af2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007af4:	68fb      	ldr	r3, [r7, #12]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b06:	f001 f9f3 	bl	8008ef0 <vTaskStartScheduler>
  
  return osOK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b12:	b089      	sub	sp, #36	; 0x24
 8007b14:	af04      	add	r7, sp, #16
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d020      	beq.n	8007b64 <osThreadCreate+0x54>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d01c      	beq.n	8007b64 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685c      	ldr	r4, [r3, #4]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681d      	ldr	r5, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691e      	ldr	r6, [r3, #16]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff ffc8 	bl	8007ad2 <makeFreeRtosPriority>
 8007b42:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b4c:	9202      	str	r2, [sp, #8]
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	9100      	str	r1, [sp, #0]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	4632      	mov	r2, r6
 8007b56:	4629      	mov	r1, r5
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f000 ff65 	bl	8008a28 <xTaskCreateStatic>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	e01c      	b.n	8007b9e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685c      	ldr	r4, [r3, #4]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b70:	b29e      	uxth	r6, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7ff ffaa 	bl	8007ad2 <makeFreeRtosPriority>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	f107 030c 	add.w	r3, r7, #12
 8007b84:	9301      	str	r3, [sp, #4]
 8007b86:	9200      	str	r2, [sp, #0]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	4632      	mov	r2, r6
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f000 ffa7 	bl	8008ae2 <xTaskCreate>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d001      	beq.n	8007b9e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e000      	b.n	8007ba0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ba8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <osDelay+0x16>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	e000      	b.n	8007bc0 <osDelay+0x18>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 f961 	bl	8008e88 <vTaskDelay>
  
  return osOK;
 8007bc6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f103 0208 	add.w	r2, r3, #8
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f04f 32ff 	mov.w	r2, #4294967295
 8007be8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f103 0208 	add.w	r2, r3, #8
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f103 0208 	add.w	r2, r3, #8
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
}
 8007c66:	bf00      	nop
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c72:	b480      	push	{r7}
 8007c74:	b085      	sub	sp, #20
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c88:	d103      	bne.n	8007c92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	e00c      	b.n	8007cac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3308      	adds	r3, #8
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	e002      	b.n	8007ca0 <vListInsert+0x2e>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	60fb      	str	r3, [r7, #12]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d2f6      	bcs.n	8007c9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	601a      	str	r2, [r3, #0]
}
 8007cd8:	bf00      	nop
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	6892      	ldr	r2, [r2, #8]
 8007cfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	6852      	ldr	r2, [r2, #4]
 8007d04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d103      	bne.n	8007d18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	1e5a      	subs	r2, r3, #1
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10a      	bne.n	8007d62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d5e:	bf00      	nop
 8007d60:	e7fe      	b.n	8007d60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007d62:	f002 fbdf 	bl	800a524 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6e:	68f9      	ldr	r1, [r7, #12]
 8007d70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d72:	fb01 f303 	mul.w	r3, r1, r3
 8007d76:	441a      	add	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d92:	3b01      	subs	r3, #1
 8007d94:	68f9      	ldr	r1, [r7, #12]
 8007d96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d98:	fb01 f303 	mul.w	r3, r1, r3
 8007d9c:	441a      	add	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	22ff      	movs	r2, #255	; 0xff
 8007da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	22ff      	movs	r2, #255	; 0xff
 8007dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d114      	bne.n	8007de2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01a      	beq.n	8007df6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3310      	adds	r3, #16
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 fb4d 	bl	8009464 <xTaskRemoveFromEventList>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d012      	beq.n	8007df6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007dd0:	4b0c      	ldr	r3, [pc, #48]	; (8007e04 <xQueueGenericReset+0xcc>)
 8007dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	e009      	b.n	8007df6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3310      	adds	r3, #16
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff fef2 	bl	8007bd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3324      	adds	r3, #36	; 0x24
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7ff feed 	bl	8007bd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007df6:	f002 fbc5 	bl	800a584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007dfa:	2301      	movs	r3, #1
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	e000ed04 	.word	0xe000ed04

08007e08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08e      	sub	sp, #56	; 0x38
 8007e0c:	af02      	add	r7, sp, #8
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
 8007e14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10a      	bne.n	8007e4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e4a:	bf00      	nop
 8007e4c:	e7fe      	b.n	8007e4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <xQueueGenericCreateStatic+0x52>
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <xQueueGenericCreateStatic+0x56>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e000      	b.n	8007e60 <xQueueGenericCreateStatic+0x58>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	623b      	str	r3, [r7, #32]
}
 8007e76:	bf00      	nop
 8007e78:	e7fe      	b.n	8007e78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <xQueueGenericCreateStatic+0x7e>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <xQueueGenericCreateStatic+0x82>
 8007e86:	2301      	movs	r3, #1
 8007e88:	e000      	b.n	8007e8c <xQueueGenericCreateStatic+0x84>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10a      	bne.n	8007ea6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	61fb      	str	r3, [r7, #28]
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ea6:	2348      	movs	r3, #72	; 0x48
 8007ea8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2b48      	cmp	r3, #72	; 0x48
 8007eae:	d00a      	beq.n	8007ec6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	61bb      	str	r3, [r7, #24]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ec6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00d      	beq.n	8007eee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007eda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	68b9      	ldr	r1, [r7, #8]
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 f83f 	bl	8007f6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3730      	adds	r7, #48	; 0x30
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	4613      	mov	r3, r2
 8007f04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10a      	bne.n	8007f22 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	613b      	str	r3, [r7, #16]
}
 8007f1e:	bf00      	nop
 8007f20:	e7fe      	b.n	8007f20 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	fb02 f303 	mul.w	r3, r2, r3
 8007f2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	3348      	adds	r3, #72	; 0x48
 8007f30:	4618      	mov	r0, r3
 8007f32:	f002 fc19 	bl	800a768 <pvPortMalloc>
 8007f36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d011      	beq.n	8007f62 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	3348      	adds	r3, #72	; 0x48
 8007f46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f50:	79fa      	ldrb	r2, [r7, #7]
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	4613      	mov	r3, r2
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 f805 	bl	8007f6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f62:	69bb      	ldr	r3, [r7, #24]
	}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3720      	adds	r7, #32
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d103      	bne.n	8007f88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	e002      	b.n	8007f8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	69b8      	ldr	r0, [r7, #24]
 8007f9e:	f7ff fecb 	bl	8007d38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007fa2:	bf00      	nop
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00e      	beq.n	8007fd6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007fca:	2300      	movs	r3, #0
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2100      	movs	r1, #0
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f81d 	bl	8008010 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b086      	sub	sp, #24
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	617b      	str	r3, [r7, #20]
 8007fec:	2300      	movs	r3, #0
 8007fee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007ff0:	79fb      	ldrb	r3, [r7, #7]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	6939      	ldr	r1, [r7, #16]
 8007ff6:	6978      	ldr	r0, [r7, #20]
 8007ff8:	f7ff ff7e 	bl	8007ef8 <xQueueGenericCreate>
 8007ffc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f7ff ffd3 	bl	8007faa <prvInitialiseMutex>

		return xNewQueue;
 8008004:	68fb      	ldr	r3, [r7, #12]
	}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08e      	sub	sp, #56	; 0x38
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800801e:	2300      	movs	r3, #0
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <xQueueGenericSend+0x32>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d103      	bne.n	8008050 <xQueueGenericSend+0x40>
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <xQueueGenericSend+0x44>
 8008050:	2301      	movs	r3, #1
 8008052:	e000      	b.n	8008056 <xQueueGenericSend+0x46>
 8008054:	2300      	movs	r3, #0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <xQueueGenericSend+0x60>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800806c:	bf00      	nop
 800806e:	e7fe      	b.n	800806e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d103      	bne.n	800807e <xQueueGenericSend+0x6e>
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807a:	2b01      	cmp	r3, #1
 800807c:	d101      	bne.n	8008082 <xQueueGenericSend+0x72>
 800807e:	2301      	movs	r3, #1
 8008080:	e000      	b.n	8008084 <xQueueGenericSend+0x74>
 8008082:	2300      	movs	r3, #0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10a      	bne.n	800809e <xQueueGenericSend+0x8e>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	623b      	str	r3, [r7, #32]
}
 800809a:	bf00      	nop
 800809c:	e7fe      	b.n	800809c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800809e:	f001 fba1 	bl	80097e4 <xTaskGetSchedulerState>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d102      	bne.n	80080ae <xQueueGenericSend+0x9e>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <xQueueGenericSend+0xa2>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e000      	b.n	80080b4 <xQueueGenericSend+0xa4>
 80080b2:	2300      	movs	r3, #0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10a      	bne.n	80080ce <xQueueGenericSend+0xbe>
	__asm volatile
 80080b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	61fb      	str	r3, [r7, #28]
}
 80080ca:	bf00      	nop
 80080cc:	e7fe      	b.n	80080cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ce:	f002 fa29 	bl	800a524 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080da:	429a      	cmp	r2, r3
 80080dc:	d302      	bcc.n	80080e4 <xQueueGenericSend+0xd4>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d129      	bne.n	8008138 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	68b9      	ldr	r1, [r7, #8]
 80080e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ea:	f000 fb2f 	bl	800874c <prvCopyDataToQueue>
 80080ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d010      	beq.n	800811a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	3324      	adds	r3, #36	; 0x24
 80080fc:	4618      	mov	r0, r3
 80080fe:	f001 f9b1 	bl	8009464 <xTaskRemoveFromEventList>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d013      	beq.n	8008130 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008108:	4b3f      	ldr	r3, [pc, #252]	; (8008208 <xQueueGenericSend+0x1f8>)
 800810a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	e00a      	b.n	8008130 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811c:	2b00      	cmp	r3, #0
 800811e:	d007      	beq.n	8008130 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008120:	4b39      	ldr	r3, [pc, #228]	; (8008208 <xQueueGenericSend+0x1f8>)
 8008122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008130:	f002 fa28 	bl	800a584 <vPortExitCritical>
				return pdPASS;
 8008134:	2301      	movs	r3, #1
 8008136:	e063      	b.n	8008200 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800813e:	f002 fa21 	bl	800a584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008142:	2300      	movs	r3, #0
 8008144:	e05c      	b.n	8008200 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008148:	2b00      	cmp	r3, #0
 800814a:	d106      	bne.n	800815a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800814c:	f107 0314 	add.w	r3, r7, #20
 8008150:	4618      	mov	r0, r3
 8008152:	f001 f9e9 	bl	8009528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008156:	2301      	movs	r3, #1
 8008158:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800815a:	f002 fa13 	bl	800a584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800815e:	f000 ff37 	bl	8008fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008162:	f002 f9df 	bl	800a524 <vPortEnterCritical>
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800816c:	b25b      	sxtb	r3, r3
 800816e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008172:	d103      	bne.n	800817c <xQueueGenericSend+0x16c>
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008182:	b25b      	sxtb	r3, r3
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008188:	d103      	bne.n	8008192 <xQueueGenericSend+0x182>
 800818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008192:	f002 f9f7 	bl	800a584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008196:	1d3a      	adds	r2, r7, #4
 8008198:	f107 0314 	add.w	r3, r7, #20
 800819c:	4611      	mov	r1, r2
 800819e:	4618      	mov	r0, r3
 80081a0:	f001 f9d8 	bl	8009554 <xTaskCheckForTimeOut>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d124      	bne.n	80081f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ac:	f000 fbc6 	bl	800893c <prvIsQueueFull>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d018      	beq.n	80081e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	3310      	adds	r3, #16
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	4611      	mov	r1, r2
 80081be:	4618      	mov	r0, r3
 80081c0:	f001 f900 	bl	80093c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081c6:	f000 fb51 	bl	800886c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081ca:	f000 ff0f 	bl	8008fec <xTaskResumeAll>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f47f af7c 	bne.w	80080ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <xQueueGenericSend+0x1f8>)
 80081d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	e772      	b.n	80080ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ea:	f000 fb3f 	bl	800886c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ee:	f000 fefd 	bl	8008fec <xTaskResumeAll>
 80081f2:	e76c      	b.n	80080ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081f6:	f000 fb39 	bl	800886c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081fa:	f000 fef7 	bl	8008fec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008200:	4618      	mov	r0, r3
 8008202:	3738      	adds	r7, #56	; 0x38
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	e000ed04 	.word	0xe000ed04

0800820c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b090      	sub	sp, #64	; 0x40
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d103      	bne.n	8008248 <xQueueGenericSendFromISR+0x3c>
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <xQueueGenericSendFromISR+0x40>
 8008248:	2301      	movs	r3, #1
 800824a:	e000      	b.n	800824e <xQueueGenericSendFromISR+0x42>
 800824c:	2300      	movs	r3, #0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10a      	bne.n	8008268 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d103      	bne.n	8008276 <xQueueGenericSendFromISR+0x6a>
 800826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008272:	2b01      	cmp	r3, #1
 8008274:	d101      	bne.n	800827a <xQueueGenericSendFromISR+0x6e>
 8008276:	2301      	movs	r3, #1
 8008278:	e000      	b.n	800827c <xQueueGenericSendFromISR+0x70>
 800827a:	2300      	movs	r3, #0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10a      	bne.n	8008296 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	623b      	str	r3, [r7, #32]
}
 8008292:	bf00      	nop
 8008294:	e7fe      	b.n	8008294 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008296:	f002 fa27 	bl	800a6e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800829a:	f3ef 8211 	mrs	r2, BASEPRI
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	61fa      	str	r2, [r7, #28]
 80082b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082be:	429a      	cmp	r2, r3
 80082c0:	d302      	bcc.n	80082c8 <xQueueGenericSendFromISR+0xbc>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d12f      	bne.n	8008328 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082de:	f000 fa35 	bl	800874c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ea:	d112      	bne.n	8008312 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d016      	beq.n	8008322 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	3324      	adds	r3, #36	; 0x24
 80082f8:	4618      	mov	r0, r3
 80082fa:	f001 f8b3 	bl	8009464 <xTaskRemoveFromEventList>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00e      	beq.n	8008322 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00b      	beq.n	8008322 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	e007      	b.n	8008322 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008312:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008316:	3301      	adds	r3, #1
 8008318:	b2db      	uxtb	r3, r3
 800831a:	b25a      	sxtb	r2, r3
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008322:	2301      	movs	r3, #1
 8008324:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008326:	e001      	b.n	800832c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008328:	2300      	movs	r3, #0
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800832c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008336:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800833a:	4618      	mov	r0, r3
 800833c:	3740      	adds	r7, #64	; 0x40
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08c      	sub	sp, #48	; 0x30
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008350:	2300      	movs	r3, #0
 8008352:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10a      	bne.n	8008374 <xQueueReceive+0x30>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	623b      	str	r3, [r7, #32]
}
 8008370:	bf00      	nop
 8008372:	e7fe      	b.n	8008372 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d103      	bne.n	8008382 <xQueueReceive+0x3e>
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <xQueueReceive+0x42>
 8008382:	2301      	movs	r3, #1
 8008384:	e000      	b.n	8008388 <xQueueReceive+0x44>
 8008386:	2300      	movs	r3, #0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <xQueueReceive+0x5e>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	61fb      	str	r3, [r7, #28]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083a2:	f001 fa1f 	bl	80097e4 <xTaskGetSchedulerState>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d102      	bne.n	80083b2 <xQueueReceive+0x6e>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <xQueueReceive+0x72>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <xQueueReceive+0x74>
 80083b6:	2300      	movs	r3, #0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10a      	bne.n	80083d2 <xQueueReceive+0x8e>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	61bb      	str	r3, [r7, #24]
}
 80083ce:	bf00      	nop
 80083d0:	e7fe      	b.n	80083d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083d2:	f002 f8a7 	bl	800a524 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d01f      	beq.n	8008422 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e6:	f000 fa1b 	bl	8008820 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	1e5a      	subs	r2, r3, #1
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00f      	beq.n	800841a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	3310      	adds	r3, #16
 80083fe:	4618      	mov	r0, r3
 8008400:	f001 f830 	bl	8009464 <xTaskRemoveFromEventList>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800840a:	4b3d      	ldr	r3, [pc, #244]	; (8008500 <xQueueReceive+0x1bc>)
 800840c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800841a:	f002 f8b3 	bl	800a584 <vPortExitCritical>
				return pdPASS;
 800841e:	2301      	movs	r3, #1
 8008420:	e069      	b.n	80084f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d103      	bne.n	8008430 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008428:	f002 f8ac 	bl	800a584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800842c:	2300      	movs	r3, #0
 800842e:	e062      	b.n	80084f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008432:	2b00      	cmp	r3, #0
 8008434:	d106      	bne.n	8008444 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008436:	f107 0310 	add.w	r3, r7, #16
 800843a:	4618      	mov	r0, r3
 800843c:	f001 f874 	bl	8009528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008440:	2301      	movs	r3, #1
 8008442:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008444:	f002 f89e 	bl	800a584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008448:	f000 fdc2 	bl	8008fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800844c:	f002 f86a 	bl	800a524 <vPortEnterCritical>
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008456:	b25b      	sxtb	r3, r3
 8008458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845c:	d103      	bne.n	8008466 <xQueueReceive+0x122>
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800846c:	b25b      	sxtb	r3, r3
 800846e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008472:	d103      	bne.n	800847c <xQueueReceive+0x138>
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800847c:	f002 f882 	bl	800a584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008480:	1d3a      	adds	r2, r7, #4
 8008482:	f107 0310 	add.w	r3, r7, #16
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f001 f863 	bl	8009554 <xTaskCheckForTimeOut>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d123      	bne.n	80084dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008496:	f000 fa3b 	bl	8008910 <prvIsQueueEmpty>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d017      	beq.n	80084d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a2:	3324      	adds	r3, #36	; 0x24
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	4611      	mov	r1, r2
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 ff8b 	bl	80093c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b0:	f000 f9dc 	bl	800886c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084b4:	f000 fd9a 	bl	8008fec <xTaskResumeAll>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d189      	bne.n	80083d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80084be:	4b10      	ldr	r3, [pc, #64]	; (8008500 <xQueueReceive+0x1bc>)
 80084c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	e780      	b.n	80083d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d2:	f000 f9cb 	bl	800886c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084d6:	f000 fd89 	bl	8008fec <xTaskResumeAll>
 80084da:	e77a      	b.n	80083d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084de:	f000 f9c5 	bl	800886c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084e2:	f000 fd83 	bl	8008fec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e8:	f000 fa12 	bl	8008910 <prvIsQueueEmpty>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f43f af6f 	beq.w	80083d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3730      	adds	r7, #48	; 0x30
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	e000ed04 	.word	0xe000ed04

08008504 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b08e      	sub	sp, #56	; 0x38
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800850e:	2300      	movs	r3, #0
 8008510:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008516:	2300      	movs	r3, #0
 8008518:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	623b      	str	r3, [r7, #32]
}
 8008532:	bf00      	nop
 8008534:	e7fe      	b.n	8008534 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	61fb      	str	r3, [r7, #28]
}
 8008550:	bf00      	nop
 8008552:	e7fe      	b.n	8008552 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008554:	f001 f946 	bl	80097e4 <xTaskGetSchedulerState>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d102      	bne.n	8008564 <xQueueSemaphoreTake+0x60>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <xQueueSemaphoreTake+0x64>
 8008564:	2301      	movs	r3, #1
 8008566:	e000      	b.n	800856a <xQueueSemaphoreTake+0x66>
 8008568:	2300      	movs	r3, #0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10a      	bne.n	8008584 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	61bb      	str	r3, [r7, #24]
}
 8008580:	bf00      	nop
 8008582:	e7fe      	b.n	8008582 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008584:	f001 ffce 	bl	800a524 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008590:	2b00      	cmp	r3, #0
 8008592:	d024      	beq.n	80085de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	1e5a      	subs	r2, r3, #1
 8008598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d104      	bne.n	80085ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80085a4:	f001 fac6 	bl	8009b34 <pvTaskIncrementMutexHeldCount>
 80085a8:	4602      	mov	r2, r0
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00f      	beq.n	80085d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b8:	3310      	adds	r3, #16
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 ff52 	bl	8009464 <xTaskRemoveFromEventList>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d007      	beq.n	80085d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085c6:	4b54      	ldr	r3, [pc, #336]	; (8008718 <xQueueSemaphoreTake+0x214>)
 80085c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085d6:	f001 ffd5 	bl	800a584 <vPortExitCritical>
				return pdPASS;
 80085da:	2301      	movs	r3, #1
 80085dc:	e097      	b.n	800870e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d111      	bne.n	8008608 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80085e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00a      	beq.n	8008600 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	617b      	str	r3, [r7, #20]
}
 80085fc:	bf00      	nop
 80085fe:	e7fe      	b.n	80085fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008600:	f001 ffc0 	bl	800a584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008604:	2300      	movs	r3, #0
 8008606:	e082      	b.n	800870e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860a:	2b00      	cmp	r3, #0
 800860c:	d106      	bne.n	800861c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800860e:	f107 030c 	add.w	r3, r7, #12
 8008612:	4618      	mov	r0, r3
 8008614:	f000 ff88 	bl	8009528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008618:	2301      	movs	r3, #1
 800861a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800861c:	f001 ffb2 	bl	800a584 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008620:	f000 fcd6 	bl	8008fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008624:	f001 ff7e 	bl	800a524 <vPortEnterCritical>
 8008628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800862e:	b25b      	sxtb	r3, r3
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008634:	d103      	bne.n	800863e <xQueueSemaphoreTake+0x13a>
 8008636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800863e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008644:	b25b      	sxtb	r3, r3
 8008646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864a:	d103      	bne.n	8008654 <xQueueSemaphoreTake+0x150>
 800864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008654:	f001 ff96 	bl	800a584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008658:	463a      	mov	r2, r7
 800865a:	f107 030c 	add.w	r3, r7, #12
 800865e:	4611      	mov	r1, r2
 8008660:	4618      	mov	r0, r3
 8008662:	f000 ff77 	bl	8009554 <xTaskCheckForTimeOut>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d132      	bne.n	80086d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800866c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800866e:	f000 f94f 	bl	8008910 <prvIsQueueEmpty>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d026      	beq.n	80086c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d109      	bne.n	8008694 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008680:	f001 ff50 	bl	800a524 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	4618      	mov	r0, r3
 800868a:	f001 f8c9 	bl	8009820 <xTaskPriorityInherit>
 800868e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008690:	f001 ff78 	bl	800a584 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	3324      	adds	r3, #36	; 0x24
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	4611      	mov	r1, r2
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fe91 	bl	80093c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086a4:	f000 f8e2 	bl	800886c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086a8:	f000 fca0 	bl	8008fec <xTaskResumeAll>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f47f af68 	bne.w	8008584 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80086b4:	4b18      	ldr	r3, [pc, #96]	; (8008718 <xQueueSemaphoreTake+0x214>)
 80086b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	e75e      	b.n	8008584 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80086c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086c8:	f000 f8d0 	bl	800886c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086cc:	f000 fc8e 	bl	8008fec <xTaskResumeAll>
 80086d0:	e758      	b.n	8008584 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80086d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086d4:	f000 f8ca 	bl	800886c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086d8:	f000 fc88 	bl	8008fec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086de:	f000 f917 	bl	8008910 <prvIsQueueEmpty>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f43f af4d 	beq.w	8008584 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00d      	beq.n	800870c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80086f0:	f001 ff18 	bl	800a524 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80086f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086f6:	f000 f811 	bl	800871c <prvGetDisinheritPriorityAfterTimeout>
 80086fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008702:	4618      	mov	r0, r3
 8008704:	f001 f988 	bl	8009a18 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008708:	f001 ff3c 	bl	800a584 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800870c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800870e:	4618      	mov	r0, r3
 8008710:	3738      	adds	r7, #56	; 0x38
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	e000ed04 	.word	0xe000ed04

0800871c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	2b00      	cmp	r3, #0
 800872a:	d006      	beq.n	800873a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f1c3 0307 	rsb	r3, r3, #7
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	e001      	b.n	800873e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800873e:	68fb      	ldr	r3, [r7, #12]
	}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008758:	2300      	movs	r3, #0
 800875a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10d      	bne.n	8008786 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d14d      	bne.n	800880e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	4618      	mov	r0, r3
 8008778:	f001 f8c8 	bl	800990c <xTaskPriorityDisinherit>
 800877c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	609a      	str	r2, [r3, #8]
 8008784:	e043      	b.n	800880e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d119      	bne.n	80087c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6858      	ldr	r0, [r3, #4]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008794:	461a      	mov	r2, r3
 8008796:	68b9      	ldr	r1, [r7, #8]
 8008798:	f002 faf3 	bl	800ad82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a4:	441a      	add	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d32b      	bcc.n	800880e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	605a      	str	r2, [r3, #4]
 80087be:	e026      	b.n	800880e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	68d8      	ldr	r0, [r3, #12]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c8:	461a      	mov	r2, r3
 80087ca:	68b9      	ldr	r1, [r7, #8]
 80087cc:	f002 fad9 	bl	800ad82 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d8:	425b      	negs	r3, r3
 80087da:	441a      	add	r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	68da      	ldr	r2, [r3, #12]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d207      	bcs.n	80087fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f4:	425b      	negs	r3, r3
 80087f6:	441a      	add	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d105      	bne.n	800880e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	3b01      	subs	r3, #1
 800880c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	1c5a      	adds	r2, r3, #1
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008816:	697b      	ldr	r3, [r7, #20]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882e:	2b00      	cmp	r3, #0
 8008830:	d018      	beq.n	8008864 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	441a      	add	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68da      	ldr	r2, [r3, #12]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	429a      	cmp	r2, r3
 800884a:	d303      	bcc.n	8008854 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68d9      	ldr	r1, [r3, #12]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885c:	461a      	mov	r2, r3
 800885e:	6838      	ldr	r0, [r7, #0]
 8008860:	f002 fa8f 	bl	800ad82 <memcpy>
	}
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008874:	f001 fe56 	bl	800a524 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800887e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008880:	e011      	b.n	80088a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008886:	2b00      	cmp	r3, #0
 8008888:	d012      	beq.n	80088b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	3324      	adds	r3, #36	; 0x24
 800888e:	4618      	mov	r0, r3
 8008890:	f000 fde8 	bl	8009464 <xTaskRemoveFromEventList>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800889a:	f000 febd 	bl	8009618 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	dce9      	bgt.n	8008882 <prvUnlockQueue+0x16>
 80088ae:	e000      	b.n	80088b2 <prvUnlockQueue+0x46>
					break;
 80088b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	22ff      	movs	r2, #255	; 0xff
 80088b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088ba:	f001 fe63 	bl	800a584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088be:	f001 fe31 	bl	800a524 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088ca:	e011      	b.n	80088f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d012      	beq.n	80088fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3310      	adds	r3, #16
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 fdc3 	bl	8009464 <xTaskRemoveFromEventList>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088e4:	f000 fe98 	bl	8009618 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	dce9      	bgt.n	80088cc <prvUnlockQueue+0x60>
 80088f8:	e000      	b.n	80088fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80088fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	22ff      	movs	r2, #255	; 0xff
 8008900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008904:	f001 fe3e 	bl	800a584 <vPortExitCritical>
}
 8008908:	bf00      	nop
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008918:	f001 fe04 	bl	800a524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008920:	2b00      	cmp	r3, #0
 8008922:	d102      	bne.n	800892a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008924:	2301      	movs	r3, #1
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	e001      	b.n	800892e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800892a:	2300      	movs	r3, #0
 800892c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800892e:	f001 fe29 	bl	800a584 <vPortExitCritical>

	return xReturn;
 8008932:	68fb      	ldr	r3, [r7, #12]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008944:	f001 fdee 	bl	800a524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008950:	429a      	cmp	r2, r3
 8008952:	d102      	bne.n	800895a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008954:	2301      	movs	r3, #1
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	e001      	b.n	800895e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800895a:	2300      	movs	r3, #0
 800895c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800895e:	f001 fe11 	bl	800a584 <vPortExitCritical>

	return xReturn;
 8008962:	68fb      	ldr	r3, [r7, #12]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008976:	2300      	movs	r3, #0
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	e014      	b.n	80089a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800897c:	4a0f      	ldr	r2, [pc, #60]	; (80089bc <vQueueAddToRegistry+0x50>)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10b      	bne.n	80089a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008988:	490c      	ldr	r1, [pc, #48]	; (80089bc <vQueueAddToRegistry+0x50>)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008992:	4a0a      	ldr	r2, [pc, #40]	; (80089bc <vQueueAddToRegistry+0x50>)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	00db      	lsls	r3, r3, #3
 8008998:	4413      	add	r3, r2
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800899e:	e006      	b.n	80089ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3301      	adds	r3, #1
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b07      	cmp	r3, #7
 80089aa:	d9e7      	bls.n	800897c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089ac:	bf00      	nop
 80089ae:	bf00      	nop
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	20000c2c 	.word	0x20000c2c

080089c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089d0:	f001 fda8 	bl	800a524 <vPortEnterCritical>
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089da:	b25b      	sxtb	r3, r3
 80089dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e0:	d103      	bne.n	80089ea <vQueueWaitForMessageRestricted+0x2a>
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089f0:	b25b      	sxtb	r3, r3
 80089f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f6:	d103      	bne.n	8008a00 <vQueueWaitForMessageRestricted+0x40>
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a00:	f001 fdc0 	bl	800a584 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d106      	bne.n	8008a1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	3324      	adds	r3, #36	; 0x24
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fcf9 	bl	800940c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a1a:	6978      	ldr	r0, [r7, #20]
 8008a1c:	f7ff ff26 	bl	800886c <prvUnlockQueue>
	}
 8008a20:	bf00      	nop
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b08e      	sub	sp, #56	; 0x38
 8008a2c:	af04      	add	r7, sp, #16
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
 8008a34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	623b      	str	r3, [r7, #32]
}
 8008a4e:	bf00      	nop
 8008a50:	e7fe      	b.n	8008a50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <xTaskCreateStatic+0x46>
	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	61fb      	str	r3, [r7, #28]
}
 8008a6a:	bf00      	nop
 8008a6c:	e7fe      	b.n	8008a6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a6e:	23b4      	movs	r3, #180	; 0xb4
 8008a70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	2bb4      	cmp	r3, #180	; 0xb4
 8008a76:	d00a      	beq.n	8008a8e <xTaskCreateStatic+0x66>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	61bb      	str	r3, [r7, #24]
}
 8008a8a:	bf00      	nop
 8008a8c:	e7fe      	b.n	8008a8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d01e      	beq.n	8008ad4 <xTaskCreateStatic+0xac>
 8008a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01b      	beq.n	8008ad4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aa4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9303      	str	r3, [sp, #12]
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	9302      	str	r3, [sp, #8]
 8008ab6:	f107 0314 	add.w	r3, r7, #20
 8008aba:	9301      	str	r3, [sp, #4]
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	68b9      	ldr	r1, [r7, #8]
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 f850 	bl	8008b6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ace:	f000 f8f3 	bl	8008cb8 <prvAddNewTaskToReadyList>
 8008ad2:	e001      	b.n	8008ad8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ad8:	697b      	ldr	r3, [r7, #20]
	}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3728      	adds	r7, #40	; 0x28
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b08c      	sub	sp, #48	; 0x30
 8008ae6:	af04      	add	r7, sp, #16
 8008ae8:	60f8      	str	r0, [r7, #12]
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	603b      	str	r3, [r7, #0]
 8008aee:	4613      	mov	r3, r2
 8008af0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008af2:	88fb      	ldrh	r3, [r7, #6]
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f001 fe36 	bl	800a768 <pvPortMalloc>
 8008afc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00e      	beq.n	8008b22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b04:	20b4      	movs	r0, #180	; 0xb4
 8008b06:	f001 fe2f 	bl	800a768 <pvPortMalloc>
 8008b0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	631a      	str	r2, [r3, #48]	; 0x30
 8008b18:	e005      	b.n	8008b26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b1a:	6978      	ldr	r0, [r7, #20]
 8008b1c:	f001 fef0 	bl	800a900 <vPortFree>
 8008b20:	e001      	b.n	8008b26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b22:	2300      	movs	r3, #0
 8008b24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d017      	beq.n	8008b5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b34:	88fa      	ldrh	r2, [r7, #6]
 8008b36:	2300      	movs	r3, #0
 8008b38:	9303      	str	r3, [sp, #12]
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	9302      	str	r3, [sp, #8]
 8008b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	68b9      	ldr	r1, [r7, #8]
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f000 f80e 	bl	8008b6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b50:	69f8      	ldr	r0, [r7, #28]
 8008b52:	f000 f8b1 	bl	8008cb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b56:	2301      	movs	r3, #1
 8008b58:	61bb      	str	r3, [r7, #24]
 8008b5a:	e002      	b.n	8008b62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b62:	69bb      	ldr	r3, [r7, #24]
	}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3720      	adds	r7, #32
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	461a      	mov	r2, r3
 8008b84:	21a5      	movs	r1, #165	; 0xa5
 8008b86:	f002 f90a 	bl	800ad9e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b94:	3b01      	subs	r3, #1
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	f023 0307 	bic.w	r3, r3, #7
 8008ba2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00a      	beq.n	8008bc4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	617b      	str	r3, [r7, #20]
}
 8008bc0:	bf00      	nop
 8008bc2:	e7fe      	b.n	8008bc2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d01f      	beq.n	8008c0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bca:	2300      	movs	r3, #0
 8008bcc:	61fb      	str	r3, [r7, #28]
 8008bce:	e012      	b.n	8008bf6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	7819      	ldrb	r1, [r3, #0]
 8008bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	4413      	add	r3, r2
 8008bde:	3334      	adds	r3, #52	; 0x34
 8008be0:	460a      	mov	r2, r1
 8008be2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	4413      	add	r3, r2
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d006      	beq.n	8008bfe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	61fb      	str	r3, [r7, #28]
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	2b0f      	cmp	r3, #15
 8008bfa:	d9e9      	bls.n	8008bd0 <prvInitialiseNewTask+0x64>
 8008bfc:	e000      	b.n	8008c00 <prvInitialiseNewTask+0x94>
			{
				break;
 8008bfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c08:	e003      	b.n	8008c12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	2b06      	cmp	r3, #6
 8008c16:	d901      	bls.n	8008c1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c18:	2306      	movs	r3, #6
 8008c1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c26:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c30:	3304      	adds	r3, #4
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe ffec 	bl	8007c10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	3318      	adds	r3, #24
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fe ffe7 	bl	8007c10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	f1c3 0207 	rsb	r2, r3, #7
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	334c      	adds	r3, #76	; 0x4c
 8008c6c:	2260      	movs	r2, #96	; 0x60
 8008c6e:	2100      	movs	r1, #0
 8008c70:	4618      	mov	r0, r3
 8008c72:	f002 f894 	bl	800ad9e <memset>
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	4a0c      	ldr	r2, [pc, #48]	; (8008cac <prvInitialiseNewTask+0x140>)
 8008c7a:	651a      	str	r2, [r3, #80]	; 0x50
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7e:	4a0c      	ldr	r2, [pc, #48]	; (8008cb0 <prvInitialiseNewTask+0x144>)
 8008c80:	655a      	str	r2, [r3, #84]	; 0x54
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	4a0b      	ldr	r2, [pc, #44]	; (8008cb4 <prvInitialiseNewTask+0x148>)
 8008c86:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	68f9      	ldr	r1, [r7, #12]
 8008c8c:	69b8      	ldr	r0, [r7, #24]
 8008c8e:	f001 fb19 	bl	800a2c4 <pxPortInitialiseStack>
 8008c92:	4602      	mov	r2, r0
 8008c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ca4:	bf00      	nop
 8008ca6:	3720      	adds	r7, #32
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	0800f734 	.word	0x0800f734
 8008cb0:	0800f754 	.word	0x0800f754
 8008cb4:	0800f714 	.word	0x0800f714

08008cb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cc0:	f001 fc30 	bl	800a524 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cc4:	4b2a      	ldr	r3, [pc, #168]	; (8008d70 <prvAddNewTaskToReadyList+0xb8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	4a29      	ldr	r2, [pc, #164]	; (8008d70 <prvAddNewTaskToReadyList+0xb8>)
 8008ccc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cce:	4b29      	ldr	r3, [pc, #164]	; (8008d74 <prvAddNewTaskToReadyList+0xbc>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d109      	bne.n	8008cea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cd6:	4a27      	ldr	r2, [pc, #156]	; (8008d74 <prvAddNewTaskToReadyList+0xbc>)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cdc:	4b24      	ldr	r3, [pc, #144]	; (8008d70 <prvAddNewTaskToReadyList+0xb8>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d110      	bne.n	8008d06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ce4:	f000 fcbc 	bl	8009660 <prvInitialiseTaskLists>
 8008ce8:	e00d      	b.n	8008d06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cea:	4b23      	ldr	r3, [pc, #140]	; (8008d78 <prvAddNewTaskToReadyList+0xc0>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d109      	bne.n	8008d06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cf2:	4b20      	ldr	r3, [pc, #128]	; (8008d74 <prvAddNewTaskToReadyList+0xbc>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d802      	bhi.n	8008d06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d00:	4a1c      	ldr	r2, [pc, #112]	; (8008d74 <prvAddNewTaskToReadyList+0xbc>)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d06:	4b1d      	ldr	r3, [pc, #116]	; (8008d7c <prvAddNewTaskToReadyList+0xc4>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	4a1b      	ldr	r2, [pc, #108]	; (8008d7c <prvAddNewTaskToReadyList+0xc4>)
 8008d0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	2201      	movs	r2, #1
 8008d16:	409a      	lsls	r2, r3
 8008d18:	4b19      	ldr	r3, [pc, #100]	; (8008d80 <prvAddNewTaskToReadyList+0xc8>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	4a18      	ldr	r2, [pc, #96]	; (8008d80 <prvAddNewTaskToReadyList+0xc8>)
 8008d20:	6013      	str	r3, [r2, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d26:	4613      	mov	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4a15      	ldr	r2, [pc, #84]	; (8008d84 <prvAddNewTaskToReadyList+0xcc>)
 8008d30:	441a      	add	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	3304      	adds	r3, #4
 8008d36:	4619      	mov	r1, r3
 8008d38:	4610      	mov	r0, r2
 8008d3a:	f7fe ff76 	bl	8007c2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d3e:	f001 fc21 	bl	800a584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d42:	4b0d      	ldr	r3, [pc, #52]	; (8008d78 <prvAddNewTaskToReadyList+0xc0>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00e      	beq.n	8008d68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d4a:	4b0a      	ldr	r3, [pc, #40]	; (8008d74 <prvAddNewTaskToReadyList+0xbc>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d207      	bcs.n	8008d68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d58:	4b0b      	ldr	r3, [pc, #44]	; (8008d88 <prvAddNewTaskToReadyList+0xd0>)
 8008d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d68:	bf00      	nop
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	20000d6c 	.word	0x20000d6c
 8008d74:	20000c6c 	.word	0x20000c6c
 8008d78:	20000d78 	.word	0x20000d78
 8008d7c:	20000d88 	.word	0x20000d88
 8008d80:	20000d74 	.word	0x20000d74
 8008d84:	20000c70 	.word	0x20000c70
 8008d88:	e000ed04 	.word	0xe000ed04

08008d8c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08a      	sub	sp, #40	; 0x28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008d96:	2300      	movs	r3, #0
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10a      	bne.n	8008db6 <vTaskDelayUntil+0x2a>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	617b      	str	r3, [r7, #20]
}
 8008db2:	bf00      	nop
 8008db4:	e7fe      	b.n	8008db4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10a      	bne.n	8008dd2 <vTaskDelayUntil+0x46>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	613b      	str	r3, [r7, #16]
}
 8008dce:	bf00      	nop
 8008dd0:	e7fe      	b.n	8008dd0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008dd2:	4b2a      	ldr	r3, [pc, #168]	; (8008e7c <vTaskDelayUntil+0xf0>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00a      	beq.n	8008df0 <vTaskDelayUntil+0x64>
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	60fb      	str	r3, [r7, #12]
}
 8008dec:	bf00      	nop
 8008dee:	e7fe      	b.n	8008dee <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008df0:	f000 f8ee 	bl	8008fd0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008df4:	4b22      	ldr	r3, [pc, #136]	; (8008e80 <vTaskDelayUntil+0xf4>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	4413      	add	r3, r2
 8008e02:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6a3a      	ldr	r2, [r7, #32]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d20b      	bcs.n	8008e26 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69fa      	ldr	r2, [r7, #28]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d211      	bcs.n	8008e3c <vTaskDelayUntil+0xb0>
 8008e18:	69fa      	ldr	r2, [r7, #28]
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d90d      	bls.n	8008e3c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008e20:	2301      	movs	r3, #1
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24
 8008e24:	e00a      	b.n	8008e3c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	69fa      	ldr	r2, [r7, #28]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d303      	bcc.n	8008e38 <vTaskDelayUntil+0xac>
 8008e30:	69fa      	ldr	r2, [r7, #28]
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d901      	bls.n	8008e3c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	69fa      	ldr	r2, [r7, #28]
 8008e40:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d006      	beq.n	8008e56 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008e48:	69fa      	ldr	r2, [r7, #28]
 8008e4a:	6a3b      	ldr	r3, [r7, #32]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	2100      	movs	r1, #0
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 fe83 	bl	8009b5c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008e56:	f000 f8c9 	bl	8008fec <xTaskResumeAll>
 8008e5a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d107      	bne.n	8008e72 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008e62:	4b08      	ldr	r3, [pc, #32]	; (8008e84 <vTaskDelayUntil+0xf8>)
 8008e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e72:	bf00      	nop
 8008e74:	3728      	adds	r7, #40	; 0x28
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20000d94 	.word	0x20000d94
 8008e80:	20000d70 	.word	0x20000d70
 8008e84:	e000ed04 	.word	0xe000ed04

08008e88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d017      	beq.n	8008eca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e9a:	4b13      	ldr	r3, [pc, #76]	; (8008ee8 <vTaskDelay+0x60>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <vTaskDelay+0x30>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	60bb      	str	r3, [r7, #8]
}
 8008eb4:	bf00      	nop
 8008eb6:	e7fe      	b.n	8008eb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008eb8:	f000 f88a 	bl	8008fd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fe4c 	bl	8009b5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ec4:	f000 f892 	bl	8008fec <xTaskResumeAll>
 8008ec8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d107      	bne.n	8008ee0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ed0:	4b06      	ldr	r3, [pc, #24]	; (8008eec <vTaskDelay+0x64>)
 8008ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ee0:	bf00      	nop
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	20000d94 	.word	0x20000d94
 8008eec:	e000ed04 	.word	0xe000ed04

08008ef0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08a      	sub	sp, #40	; 0x28
 8008ef4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008efe:	463a      	mov	r2, r7
 8008f00:	1d39      	adds	r1, r7, #4
 8008f02:	f107 0308 	add.w	r3, r7, #8
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7f8 f8a8 	bl	800105c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	9202      	str	r2, [sp, #8]
 8008f14:	9301      	str	r3, [sp, #4]
 8008f16:	2300      	movs	r3, #0
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	460a      	mov	r2, r1
 8008f1e:	4924      	ldr	r1, [pc, #144]	; (8008fb0 <vTaskStartScheduler+0xc0>)
 8008f20:	4824      	ldr	r0, [pc, #144]	; (8008fb4 <vTaskStartScheduler+0xc4>)
 8008f22:	f7ff fd81 	bl	8008a28 <xTaskCreateStatic>
 8008f26:	4603      	mov	r3, r0
 8008f28:	4a23      	ldr	r2, [pc, #140]	; (8008fb8 <vTaskStartScheduler+0xc8>)
 8008f2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f2c:	4b22      	ldr	r3, [pc, #136]	; (8008fb8 <vTaskStartScheduler+0xc8>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f34:	2301      	movs	r3, #1
 8008f36:	617b      	str	r3, [r7, #20]
 8008f38:	e001      	b.n	8008f3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d102      	bne.n	8008f4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f44:	f000 fe70 	bl	8009c28 <xTimerCreateTimerTask>
 8008f48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d11b      	bne.n	8008f88 <vTaskStartScheduler+0x98>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	613b      	str	r3, [r7, #16]
}
 8008f62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f64:	4b15      	ldr	r3, [pc, #84]	; (8008fbc <vTaskStartScheduler+0xcc>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	334c      	adds	r3, #76	; 0x4c
 8008f6a:	4a15      	ldr	r2, [pc, #84]	; (8008fc0 <vTaskStartScheduler+0xd0>)
 8008f6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f6e:	4b15      	ldr	r3, [pc, #84]	; (8008fc4 <vTaskStartScheduler+0xd4>)
 8008f70:	f04f 32ff 	mov.w	r2, #4294967295
 8008f74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f76:	4b14      	ldr	r3, [pc, #80]	; (8008fc8 <vTaskStartScheduler+0xd8>)
 8008f78:	2201      	movs	r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f7c:	4b13      	ldr	r3, [pc, #76]	; (8008fcc <vTaskStartScheduler+0xdc>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f82:	f001 fa2d 	bl	800a3e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f86:	e00e      	b.n	8008fa6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8e:	d10a      	bne.n	8008fa6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	60fb      	str	r3, [r7, #12]
}
 8008fa2:	bf00      	nop
 8008fa4:	e7fe      	b.n	8008fa4 <vTaskStartScheduler+0xb4>
}
 8008fa6:	bf00      	nop
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	0800f6b4 	.word	0x0800f6b4
 8008fb4:	08009631 	.word	0x08009631
 8008fb8:	20000d90 	.word	0x20000d90
 8008fbc:	20000c6c 	.word	0x20000c6c
 8008fc0:	20000078 	.word	0x20000078
 8008fc4:	20000d8c 	.word	0x20000d8c
 8008fc8:	20000d78 	.word	0x20000d78
 8008fcc:	20000d70 	.word	0x20000d70

08008fd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008fd4:	4b04      	ldr	r3, [pc, #16]	; (8008fe8 <vTaskSuspendAll+0x18>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	4a03      	ldr	r2, [pc, #12]	; (8008fe8 <vTaskSuspendAll+0x18>)
 8008fdc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008fde:	bf00      	nop
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	20000d94 	.word	0x20000d94

08008fec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ffa:	4b41      	ldr	r3, [pc, #260]	; (8009100 <xTaskResumeAll+0x114>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10a      	bne.n	8009018 <xTaskResumeAll+0x2c>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	603b      	str	r3, [r7, #0]
}
 8009014:	bf00      	nop
 8009016:	e7fe      	b.n	8009016 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009018:	f001 fa84 	bl	800a524 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800901c:	4b38      	ldr	r3, [pc, #224]	; (8009100 <xTaskResumeAll+0x114>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3b01      	subs	r3, #1
 8009022:	4a37      	ldr	r2, [pc, #220]	; (8009100 <xTaskResumeAll+0x114>)
 8009024:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009026:	4b36      	ldr	r3, [pc, #216]	; (8009100 <xTaskResumeAll+0x114>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d161      	bne.n	80090f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800902e:	4b35      	ldr	r3, [pc, #212]	; (8009104 <xTaskResumeAll+0x118>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d05d      	beq.n	80090f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009036:	e02e      	b.n	8009096 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009038:	4b33      	ldr	r3, [pc, #204]	; (8009108 <xTaskResumeAll+0x11c>)
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	3318      	adds	r3, #24
 8009044:	4618      	mov	r0, r3
 8009046:	f7fe fe4d 	bl	8007ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	3304      	adds	r3, #4
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fe48 	bl	8007ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009058:	2201      	movs	r2, #1
 800905a:	409a      	lsls	r2, r3
 800905c:	4b2b      	ldr	r3, [pc, #172]	; (800910c <xTaskResumeAll+0x120>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4313      	orrs	r3, r2
 8009062:	4a2a      	ldr	r2, [pc, #168]	; (800910c <xTaskResumeAll+0x120>)
 8009064:	6013      	str	r3, [r2, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4a27      	ldr	r2, [pc, #156]	; (8009110 <xTaskResumeAll+0x124>)
 8009074:	441a      	add	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3304      	adds	r3, #4
 800907a:	4619      	mov	r1, r3
 800907c:	4610      	mov	r0, r2
 800907e:	f7fe fdd4 	bl	8007c2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009086:	4b23      	ldr	r3, [pc, #140]	; (8009114 <xTaskResumeAll+0x128>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908c:	429a      	cmp	r2, r3
 800908e:	d302      	bcc.n	8009096 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009090:	4b21      	ldr	r3, [pc, #132]	; (8009118 <xTaskResumeAll+0x12c>)
 8009092:	2201      	movs	r2, #1
 8009094:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009096:	4b1c      	ldr	r3, [pc, #112]	; (8009108 <xTaskResumeAll+0x11c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1cc      	bne.n	8009038 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090a4:	f000 fb7e 	bl	80097a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090a8:	4b1c      	ldr	r3, [pc, #112]	; (800911c <xTaskResumeAll+0x130>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d010      	beq.n	80090d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090b4:	f000 f846 	bl	8009144 <xTaskIncrementTick>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80090be:	4b16      	ldr	r3, [pc, #88]	; (8009118 <xTaskResumeAll+0x12c>)
 80090c0:	2201      	movs	r2, #1
 80090c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1f1      	bne.n	80090b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80090d0:	4b12      	ldr	r3, [pc, #72]	; (800911c <xTaskResumeAll+0x130>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090d6:	4b10      	ldr	r3, [pc, #64]	; (8009118 <xTaskResumeAll+0x12c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d009      	beq.n	80090f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80090de:	2301      	movs	r3, #1
 80090e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80090e2:	4b0f      	ldr	r3, [pc, #60]	; (8009120 <xTaskResumeAll+0x134>)
 80090e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090f2:	f001 fa47 	bl	800a584 <vPortExitCritical>

	return xAlreadyYielded;
 80090f6:	68bb      	ldr	r3, [r7, #8]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20000d94 	.word	0x20000d94
 8009104:	20000d6c 	.word	0x20000d6c
 8009108:	20000d2c 	.word	0x20000d2c
 800910c:	20000d74 	.word	0x20000d74
 8009110:	20000c70 	.word	0x20000c70
 8009114:	20000c6c 	.word	0x20000c6c
 8009118:	20000d80 	.word	0x20000d80
 800911c:	20000d7c 	.word	0x20000d7c
 8009120:	e000ed04 	.word	0xe000ed04

08009124 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <xTaskGetTickCount+0x1c>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009130:	687b      	ldr	r3, [r7, #4]
}
 8009132:	4618      	mov	r0, r3
 8009134:	370c      	adds	r7, #12
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	20000d70 	.word	0x20000d70

08009144 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800914a:	2300      	movs	r3, #0
 800914c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800914e:	4b4e      	ldr	r3, [pc, #312]	; (8009288 <xTaskIncrementTick+0x144>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	f040 808e 	bne.w	8009274 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009158:	4b4c      	ldr	r3, [pc, #304]	; (800928c <xTaskIncrementTick+0x148>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	3301      	adds	r3, #1
 800915e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009160:	4a4a      	ldr	r2, [pc, #296]	; (800928c <xTaskIncrementTick+0x148>)
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d120      	bne.n	80091ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800916c:	4b48      	ldr	r3, [pc, #288]	; (8009290 <xTaskIncrementTick+0x14c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00a      	beq.n	800918c <xTaskIncrementTick+0x48>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	603b      	str	r3, [r7, #0]
}
 8009188:	bf00      	nop
 800918a:	e7fe      	b.n	800918a <xTaskIncrementTick+0x46>
 800918c:	4b40      	ldr	r3, [pc, #256]	; (8009290 <xTaskIncrementTick+0x14c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	4b40      	ldr	r3, [pc, #256]	; (8009294 <xTaskIncrementTick+0x150>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a3e      	ldr	r2, [pc, #248]	; (8009290 <xTaskIncrementTick+0x14c>)
 8009198:	6013      	str	r3, [r2, #0]
 800919a:	4a3e      	ldr	r2, [pc, #248]	; (8009294 <xTaskIncrementTick+0x150>)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	4b3d      	ldr	r3, [pc, #244]	; (8009298 <xTaskIncrementTick+0x154>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3301      	adds	r3, #1
 80091a6:	4a3c      	ldr	r2, [pc, #240]	; (8009298 <xTaskIncrementTick+0x154>)
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	f000 fafb 	bl	80097a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091ae:	4b3b      	ldr	r3, [pc, #236]	; (800929c <xTaskIncrementTick+0x158>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d348      	bcc.n	800924a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091b8:	4b35      	ldr	r3, [pc, #212]	; (8009290 <xTaskIncrementTick+0x14c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d104      	bne.n	80091cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091c2:	4b36      	ldr	r3, [pc, #216]	; (800929c <xTaskIncrementTick+0x158>)
 80091c4:	f04f 32ff 	mov.w	r2, #4294967295
 80091c8:	601a      	str	r2, [r3, #0]
					break;
 80091ca:	e03e      	b.n	800924a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091cc:	4b30      	ldr	r3, [pc, #192]	; (8009290 <xTaskIncrementTick+0x14c>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d203      	bcs.n	80091ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091e4:	4a2d      	ldr	r2, [pc, #180]	; (800929c <xTaskIncrementTick+0x158>)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091ea:	e02e      	b.n	800924a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	3304      	adds	r3, #4
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe fd77 	bl	8007ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d004      	beq.n	8009208 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	3318      	adds	r3, #24
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe fd6e 	bl	8007ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920c:	2201      	movs	r2, #1
 800920e:	409a      	lsls	r2, r3
 8009210:	4b23      	ldr	r3, [pc, #140]	; (80092a0 <xTaskIncrementTick+0x15c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4313      	orrs	r3, r2
 8009216:	4a22      	ldr	r2, [pc, #136]	; (80092a0 <xTaskIncrementTick+0x15c>)
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800921e:	4613      	mov	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4a1f      	ldr	r2, [pc, #124]	; (80092a4 <xTaskIncrementTick+0x160>)
 8009228:	441a      	add	r2, r3
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	3304      	adds	r3, #4
 800922e:	4619      	mov	r1, r3
 8009230:	4610      	mov	r0, r2
 8009232:	f7fe fcfa 	bl	8007c2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923a:	4b1b      	ldr	r3, [pc, #108]	; (80092a8 <xTaskIncrementTick+0x164>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009240:	429a      	cmp	r2, r3
 8009242:	d3b9      	bcc.n	80091b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009244:	2301      	movs	r3, #1
 8009246:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009248:	e7b6      	b.n	80091b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800924a:	4b17      	ldr	r3, [pc, #92]	; (80092a8 <xTaskIncrementTick+0x164>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009250:	4914      	ldr	r1, [pc, #80]	; (80092a4 <xTaskIncrementTick+0x160>)
 8009252:	4613      	mov	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	440b      	add	r3, r1
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b01      	cmp	r3, #1
 8009260:	d901      	bls.n	8009266 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009262:	2301      	movs	r3, #1
 8009264:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009266:	4b11      	ldr	r3, [pc, #68]	; (80092ac <xTaskIncrementTick+0x168>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d007      	beq.n	800927e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800926e:	2301      	movs	r3, #1
 8009270:	617b      	str	r3, [r7, #20]
 8009272:	e004      	b.n	800927e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009274:	4b0e      	ldr	r3, [pc, #56]	; (80092b0 <xTaskIncrementTick+0x16c>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3301      	adds	r3, #1
 800927a:	4a0d      	ldr	r2, [pc, #52]	; (80092b0 <xTaskIncrementTick+0x16c>)
 800927c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800927e:	697b      	ldr	r3, [r7, #20]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3718      	adds	r7, #24
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20000d94 	.word	0x20000d94
 800928c:	20000d70 	.word	0x20000d70
 8009290:	20000d24 	.word	0x20000d24
 8009294:	20000d28 	.word	0x20000d28
 8009298:	20000d84 	.word	0x20000d84
 800929c:	20000d8c 	.word	0x20000d8c
 80092a0:	20000d74 	.word	0x20000d74
 80092a4:	20000c70 	.word	0x20000c70
 80092a8:	20000c6c 	.word	0x20000c6c
 80092ac:	20000d80 	.word	0x20000d80
 80092b0:	20000d7c 	.word	0x20000d7c

080092b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b088      	sub	sp, #32
 80092b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092ba:	4b3c      	ldr	r3, [pc, #240]	; (80093ac <vTaskSwitchContext+0xf8>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092c2:	4b3b      	ldr	r3, [pc, #236]	; (80093b0 <vTaskSwitchContext+0xfc>)
 80092c4:	2201      	movs	r2, #1
 80092c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092c8:	e06b      	b.n	80093a2 <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 80092ca:	4b39      	ldr	r3, [pc, #228]	; (80093b0 <vTaskSwitchContext+0xfc>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80092d0:	4b38      	ldr	r3, [pc, #224]	; (80093b4 <vTaskSwitchContext+0x100>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d6:	61fb      	str	r3, [r7, #28]
 80092d8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80092dc:	61bb      	str	r3, [r7, #24]
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	69ba      	ldr	r2, [r7, #24]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d111      	bne.n	800930c <vTaskSwitchContext+0x58>
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	3304      	adds	r3, #4
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	69ba      	ldr	r2, [r7, #24]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d10b      	bne.n	800930c <vTaskSwitchContext+0x58>
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	3308      	adds	r3, #8
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	69ba      	ldr	r2, [r7, #24]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d105      	bne.n	800930c <vTaskSwitchContext+0x58>
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	330c      	adds	r3, #12
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	429a      	cmp	r2, r3
 800930a:	d008      	beq.n	800931e <vTaskSwitchContext+0x6a>
 800930c:	4b29      	ldr	r3, [pc, #164]	; (80093b4 <vTaskSwitchContext+0x100>)
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	4b28      	ldr	r3, [pc, #160]	; (80093b4 <vTaskSwitchContext+0x100>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3334      	adds	r3, #52	; 0x34
 8009316:	4619      	mov	r1, r3
 8009318:	4610      	mov	r0, r2
 800931a:	f7f7 fe93 	bl	8001044 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800931e:	4b26      	ldr	r3, [pc, #152]	; (80093b8 <vTaskSwitchContext+0x104>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	fab3 f383 	clz	r3, r3
 800932a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800932c:	7afb      	ldrb	r3, [r7, #11]
 800932e:	f1c3 031f 	rsb	r3, r3, #31
 8009332:	617b      	str	r3, [r7, #20]
 8009334:	4921      	ldr	r1, [pc, #132]	; (80093bc <vTaskSwitchContext+0x108>)
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	4613      	mov	r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4413      	add	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	440b      	add	r3, r1
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10a      	bne.n	800935e <vTaskSwitchContext+0xaa>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	607b      	str	r3, [r7, #4]
}
 800935a:	bf00      	nop
 800935c:	e7fe      	b.n	800935c <vTaskSwitchContext+0xa8>
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	4613      	mov	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4a14      	ldr	r2, [pc, #80]	; (80093bc <vTaskSwitchContext+0x108>)
 800936a:	4413      	add	r3, r2
 800936c:	613b      	str	r3, [r7, #16]
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	605a      	str	r2, [r3, #4]
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	3308      	adds	r3, #8
 8009380:	429a      	cmp	r2, r3
 8009382:	d104      	bne.n	800938e <vTaskSwitchContext+0xda>
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	605a      	str	r2, [r3, #4]
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	4a07      	ldr	r2, [pc, #28]	; (80093b4 <vTaskSwitchContext+0x100>)
 8009396:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009398:	4b06      	ldr	r3, [pc, #24]	; (80093b4 <vTaskSwitchContext+0x100>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	334c      	adds	r3, #76	; 0x4c
 800939e:	4a08      	ldr	r2, [pc, #32]	; (80093c0 <vTaskSwitchContext+0x10c>)
 80093a0:	6013      	str	r3, [r2, #0]
}
 80093a2:	bf00      	nop
 80093a4:	3720      	adds	r7, #32
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20000d94 	.word	0x20000d94
 80093b0:	20000d80 	.word	0x20000d80
 80093b4:	20000c6c 	.word	0x20000c6c
 80093b8:	20000d74 	.word	0x20000d74
 80093bc:	20000c70 	.word	0x20000c70
 80093c0:	20000078 	.word	0x20000078

080093c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10a      	bne.n	80093ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	60fb      	str	r3, [r7, #12]
}
 80093e6:	bf00      	nop
 80093e8:	e7fe      	b.n	80093e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093ea:	4b07      	ldr	r3, [pc, #28]	; (8009408 <vTaskPlaceOnEventList+0x44>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3318      	adds	r3, #24
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7fe fc3d 	bl	8007c72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093f8:	2101      	movs	r1, #1
 80093fa:	6838      	ldr	r0, [r7, #0]
 80093fc:	f000 fbae 	bl	8009b5c <prvAddCurrentTaskToDelayedList>
}
 8009400:	bf00      	nop
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	20000c6c 	.word	0x20000c6c

0800940c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	617b      	str	r3, [r7, #20]
}
 8009430:	bf00      	nop
 8009432:	e7fe      	b.n	8009432 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009434:	4b0a      	ldr	r3, [pc, #40]	; (8009460 <vTaskPlaceOnEventListRestricted+0x54>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3318      	adds	r3, #24
 800943a:	4619      	mov	r1, r3
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f7fe fbf4 	bl	8007c2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009448:	f04f 33ff 	mov.w	r3, #4294967295
 800944c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800944e:	6879      	ldr	r1, [r7, #4]
 8009450:	68b8      	ldr	r0, [r7, #8]
 8009452:	f000 fb83 	bl	8009b5c <prvAddCurrentTaskToDelayedList>
	}
 8009456:	bf00      	nop
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20000c6c 	.word	0x20000c6c

08009464 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10a      	bne.n	8009490 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	60fb      	str	r3, [r7, #12]
}
 800948c:	bf00      	nop
 800948e:	e7fe      	b.n	800948e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	3318      	adds	r3, #24
 8009494:	4618      	mov	r0, r3
 8009496:	f7fe fc25 	bl	8007ce4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800949a:	4b1d      	ldr	r3, [pc, #116]	; (8009510 <xTaskRemoveFromEventList+0xac>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d11c      	bne.n	80094dc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	3304      	adds	r3, #4
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe fc1c 	bl	8007ce4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b0:	2201      	movs	r2, #1
 80094b2:	409a      	lsls	r2, r3
 80094b4:	4b17      	ldr	r3, [pc, #92]	; (8009514 <xTaskRemoveFromEventList+0xb0>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	4a16      	ldr	r2, [pc, #88]	; (8009514 <xTaskRemoveFromEventList+0xb0>)
 80094bc:	6013      	str	r3, [r2, #0]
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4a13      	ldr	r2, [pc, #76]	; (8009518 <xTaskRemoveFromEventList+0xb4>)
 80094cc:	441a      	add	r2, r3
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	3304      	adds	r3, #4
 80094d2:	4619      	mov	r1, r3
 80094d4:	4610      	mov	r0, r2
 80094d6:	f7fe fba8 	bl	8007c2a <vListInsertEnd>
 80094da:	e005      	b.n	80094e8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	3318      	adds	r3, #24
 80094e0:	4619      	mov	r1, r3
 80094e2:	480e      	ldr	r0, [pc, #56]	; (800951c <xTaskRemoveFromEventList+0xb8>)
 80094e4:	f7fe fba1 	bl	8007c2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ec:	4b0c      	ldr	r3, [pc, #48]	; (8009520 <xTaskRemoveFromEventList+0xbc>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d905      	bls.n	8009502 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80094f6:	2301      	movs	r3, #1
 80094f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80094fa:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <xTaskRemoveFromEventList+0xc0>)
 80094fc:	2201      	movs	r2, #1
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	e001      	b.n	8009506 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009502:	2300      	movs	r3, #0
 8009504:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009506:	697b      	ldr	r3, [r7, #20]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	20000d94 	.word	0x20000d94
 8009514:	20000d74 	.word	0x20000d74
 8009518:	20000c70 	.word	0x20000c70
 800951c:	20000d2c 	.word	0x20000d2c
 8009520:	20000c6c 	.word	0x20000c6c
 8009524:	20000d80 	.word	0x20000d80

08009528 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009530:	4b06      	ldr	r3, [pc, #24]	; (800954c <vTaskInternalSetTimeOutState+0x24>)
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009538:	4b05      	ldr	r3, [pc, #20]	; (8009550 <vTaskInternalSetTimeOutState+0x28>)
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	605a      	str	r2, [r3, #4]
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	20000d84 	.word	0x20000d84
 8009550:	20000d70 	.word	0x20000d70

08009554 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10a      	bne.n	800957a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	613b      	str	r3, [r7, #16]
}
 8009576:	bf00      	nop
 8009578:	e7fe      	b.n	8009578 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	60fb      	str	r3, [r7, #12]
}
 8009592:	bf00      	nop
 8009594:	e7fe      	b.n	8009594 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009596:	f000 ffc5 	bl	800a524 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800959a:	4b1d      	ldr	r3, [pc, #116]	; (8009610 <xTaskCheckForTimeOut+0xbc>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	69ba      	ldr	r2, [r7, #24]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b2:	d102      	bne.n	80095ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095b4:	2300      	movs	r3, #0
 80095b6:	61fb      	str	r3, [r7, #28]
 80095b8:	e023      	b.n	8009602 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	4b15      	ldr	r3, [pc, #84]	; (8009614 <xTaskCheckForTimeOut+0xc0>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d007      	beq.n	80095d6 <xTaskCheckForTimeOut+0x82>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	69ba      	ldr	r2, [r7, #24]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d302      	bcc.n	80095d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095d0:	2301      	movs	r3, #1
 80095d2:	61fb      	str	r3, [r7, #28]
 80095d4:	e015      	b.n	8009602 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d20b      	bcs.n	80095f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	1ad2      	subs	r2, r2, r3
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff ff9b 	bl	8009528 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80095f2:	2300      	movs	r3, #0
 80095f4:	61fb      	str	r3, [r7, #28]
 80095f6:	e004      	b.n	8009602 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	2200      	movs	r2, #0
 80095fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80095fe:	2301      	movs	r3, #1
 8009600:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009602:	f000 ffbf 	bl	800a584 <vPortExitCritical>

	return xReturn;
 8009606:	69fb      	ldr	r3, [r7, #28]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3720      	adds	r7, #32
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	20000d70 	.word	0x20000d70
 8009614:	20000d84 	.word	0x20000d84

08009618 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009618:	b480      	push	{r7}
 800961a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800961c:	4b03      	ldr	r3, [pc, #12]	; (800962c <vTaskMissedYield+0x14>)
 800961e:	2201      	movs	r2, #1
 8009620:	601a      	str	r2, [r3, #0]
}
 8009622:	bf00      	nop
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	20000d80 	.word	0x20000d80

08009630 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009638:	f000 f852 	bl	80096e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800963c:	4b06      	ldr	r3, [pc, #24]	; (8009658 <prvIdleTask+0x28>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d9f9      	bls.n	8009638 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009644:	4b05      	ldr	r3, [pc, #20]	; (800965c <prvIdleTask+0x2c>)
 8009646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009654:	e7f0      	b.n	8009638 <prvIdleTask+0x8>
 8009656:	bf00      	nop
 8009658:	20000c70 	.word	0x20000c70
 800965c:	e000ed04 	.word	0xe000ed04

08009660 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009666:	2300      	movs	r3, #0
 8009668:	607b      	str	r3, [r7, #4]
 800966a:	e00c      	b.n	8009686 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	4613      	mov	r3, r2
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4a12      	ldr	r2, [pc, #72]	; (80096c0 <prvInitialiseTaskLists+0x60>)
 8009678:	4413      	add	r3, r2
 800967a:	4618      	mov	r0, r3
 800967c:	f7fe faa8 	bl	8007bd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3301      	adds	r3, #1
 8009684:	607b      	str	r3, [r7, #4]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b06      	cmp	r3, #6
 800968a:	d9ef      	bls.n	800966c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800968c:	480d      	ldr	r0, [pc, #52]	; (80096c4 <prvInitialiseTaskLists+0x64>)
 800968e:	f7fe fa9f 	bl	8007bd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009692:	480d      	ldr	r0, [pc, #52]	; (80096c8 <prvInitialiseTaskLists+0x68>)
 8009694:	f7fe fa9c 	bl	8007bd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009698:	480c      	ldr	r0, [pc, #48]	; (80096cc <prvInitialiseTaskLists+0x6c>)
 800969a:	f7fe fa99 	bl	8007bd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800969e:	480c      	ldr	r0, [pc, #48]	; (80096d0 <prvInitialiseTaskLists+0x70>)
 80096a0:	f7fe fa96 	bl	8007bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096a4:	480b      	ldr	r0, [pc, #44]	; (80096d4 <prvInitialiseTaskLists+0x74>)
 80096a6:	f7fe fa93 	bl	8007bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096aa:	4b0b      	ldr	r3, [pc, #44]	; (80096d8 <prvInitialiseTaskLists+0x78>)
 80096ac:	4a05      	ldr	r2, [pc, #20]	; (80096c4 <prvInitialiseTaskLists+0x64>)
 80096ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096b0:	4b0a      	ldr	r3, [pc, #40]	; (80096dc <prvInitialiseTaskLists+0x7c>)
 80096b2:	4a05      	ldr	r2, [pc, #20]	; (80096c8 <prvInitialiseTaskLists+0x68>)
 80096b4:	601a      	str	r2, [r3, #0]
}
 80096b6:	bf00      	nop
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20000c70 	.word	0x20000c70
 80096c4:	20000cfc 	.word	0x20000cfc
 80096c8:	20000d10 	.word	0x20000d10
 80096cc:	20000d2c 	.word	0x20000d2c
 80096d0:	20000d40 	.word	0x20000d40
 80096d4:	20000d58 	.word	0x20000d58
 80096d8:	20000d24 	.word	0x20000d24
 80096dc:	20000d28 	.word	0x20000d28

080096e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096e6:	e019      	b.n	800971c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096e8:	f000 ff1c 	bl	800a524 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ec:	4b10      	ldr	r3, [pc, #64]	; (8009730 <prvCheckTasksWaitingTermination+0x50>)
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	3304      	adds	r3, #4
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fe faf3 	bl	8007ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80096fe:	4b0d      	ldr	r3, [pc, #52]	; (8009734 <prvCheckTasksWaitingTermination+0x54>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3b01      	subs	r3, #1
 8009704:	4a0b      	ldr	r2, [pc, #44]	; (8009734 <prvCheckTasksWaitingTermination+0x54>)
 8009706:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009708:	4b0b      	ldr	r3, [pc, #44]	; (8009738 <prvCheckTasksWaitingTermination+0x58>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3b01      	subs	r3, #1
 800970e:	4a0a      	ldr	r2, [pc, #40]	; (8009738 <prvCheckTasksWaitingTermination+0x58>)
 8009710:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009712:	f000 ff37 	bl	800a584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f810 	bl	800973c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800971c:	4b06      	ldr	r3, [pc, #24]	; (8009738 <prvCheckTasksWaitingTermination+0x58>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1e1      	bne.n	80096e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	20000d40 	.word	0x20000d40
 8009734:	20000d6c 	.word	0x20000d6c
 8009738:	20000d54 	.word	0x20000d54

0800973c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	334c      	adds	r3, #76	; 0x4c
 8009748:	4618      	mov	r0, r3
 800974a:	f002 fa4d 	bl	800bbe8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009754:	2b00      	cmp	r3, #0
 8009756:	d108      	bne.n	800976a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975c:	4618      	mov	r0, r3
 800975e:	f001 f8cf 	bl	800a900 <vPortFree>
				vPortFree( pxTCB );
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f001 f8cc 	bl	800a900 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009768:	e018      	b.n	800979c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009770:	2b01      	cmp	r3, #1
 8009772:	d103      	bne.n	800977c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f001 f8c3 	bl	800a900 <vPortFree>
	}
 800977a:	e00f      	b.n	800979c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009782:	2b02      	cmp	r3, #2
 8009784:	d00a      	beq.n	800979c <prvDeleteTCB+0x60>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	60fb      	str	r3, [r7, #12]
}
 8009798:	bf00      	nop
 800979a:	e7fe      	b.n	800979a <prvDeleteTCB+0x5e>
	}
 800979c:	bf00      	nop
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097aa:	4b0c      	ldr	r3, [pc, #48]	; (80097dc <prvResetNextTaskUnblockTime+0x38>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d104      	bne.n	80097be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097b4:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <prvResetNextTaskUnblockTime+0x3c>)
 80097b6:	f04f 32ff 	mov.w	r2, #4294967295
 80097ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097bc:	e008      	b.n	80097d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097be:	4b07      	ldr	r3, [pc, #28]	; (80097dc <prvResetNextTaskUnblockTime+0x38>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	4a04      	ldr	r2, [pc, #16]	; (80097e0 <prvResetNextTaskUnblockTime+0x3c>)
 80097ce:	6013      	str	r3, [r2, #0]
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	20000d24 	.word	0x20000d24
 80097e0:	20000d8c 	.word	0x20000d8c

080097e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097ea:	4b0b      	ldr	r3, [pc, #44]	; (8009818 <xTaskGetSchedulerState+0x34>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d102      	bne.n	80097f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097f2:	2301      	movs	r3, #1
 80097f4:	607b      	str	r3, [r7, #4]
 80097f6:	e008      	b.n	800980a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097f8:	4b08      	ldr	r3, [pc, #32]	; (800981c <xTaskGetSchedulerState+0x38>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d102      	bne.n	8009806 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009800:	2302      	movs	r3, #2
 8009802:	607b      	str	r3, [r7, #4]
 8009804:	e001      	b.n	800980a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009806:	2300      	movs	r3, #0
 8009808:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800980a:	687b      	ldr	r3, [r7, #4]
	}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	20000d78 	.word	0x20000d78
 800981c:	20000d94 	.word	0x20000d94

08009820 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800982c:	2300      	movs	r3, #0
 800982e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d05e      	beq.n	80098f4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983a:	4b31      	ldr	r3, [pc, #196]	; (8009900 <xTaskPriorityInherit+0xe0>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009840:	429a      	cmp	r2, r3
 8009842:	d24e      	bcs.n	80098e2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	2b00      	cmp	r3, #0
 800984a:	db06      	blt.n	800985a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800984c:	4b2c      	ldr	r3, [pc, #176]	; (8009900 <xTaskPriorityInherit+0xe0>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009852:	f1c3 0207 	rsb	r2, r3, #7
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	6959      	ldr	r1, [r3, #20]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009862:	4613      	mov	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4413      	add	r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4a26      	ldr	r2, [pc, #152]	; (8009904 <xTaskPriorityInherit+0xe4>)
 800986c:	4413      	add	r3, r2
 800986e:	4299      	cmp	r1, r3
 8009870:	d12f      	bne.n	80098d2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	3304      	adds	r3, #4
 8009876:	4618      	mov	r0, r3
 8009878:	f7fe fa34 	bl	8007ce4 <uxListRemove>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10a      	bne.n	8009898 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009886:	2201      	movs	r2, #1
 8009888:	fa02 f303 	lsl.w	r3, r2, r3
 800988c:	43da      	mvns	r2, r3
 800988e:	4b1e      	ldr	r3, [pc, #120]	; (8009908 <xTaskPriorityInherit+0xe8>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4013      	ands	r3, r2
 8009894:	4a1c      	ldr	r2, [pc, #112]	; (8009908 <xTaskPriorityInherit+0xe8>)
 8009896:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009898:	4b19      	ldr	r3, [pc, #100]	; (8009900 <xTaskPriorityInherit+0xe0>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a6:	2201      	movs	r2, #1
 80098a8:	409a      	lsls	r2, r3
 80098aa:	4b17      	ldr	r3, [pc, #92]	; (8009908 <xTaskPriorityInherit+0xe8>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	4a15      	ldr	r2, [pc, #84]	; (8009908 <xTaskPriorityInherit+0xe8>)
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b8:	4613      	mov	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4a10      	ldr	r2, [pc, #64]	; (8009904 <xTaskPriorityInherit+0xe4>)
 80098c2:	441a      	add	r2, r3
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	3304      	adds	r3, #4
 80098c8:	4619      	mov	r1, r3
 80098ca:	4610      	mov	r0, r2
 80098cc:	f7fe f9ad 	bl	8007c2a <vListInsertEnd>
 80098d0:	e004      	b.n	80098dc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80098d2:	4b0b      	ldr	r3, [pc, #44]	; (8009900 <xTaskPriorityInherit+0xe0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80098dc:	2301      	movs	r3, #1
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	e008      	b.n	80098f4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098e6:	4b06      	ldr	r3, [pc, #24]	; (8009900 <xTaskPriorityInherit+0xe0>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d201      	bcs.n	80098f4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80098f0:	2301      	movs	r3, #1
 80098f2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098f4:	68fb      	ldr	r3, [r7, #12]
	}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000c6c 	.word	0x20000c6c
 8009904:	20000c70 	.word	0x20000c70
 8009908:	20000d74 	.word	0x20000d74

0800990c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009918:	2300      	movs	r3, #0
 800991a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d06e      	beq.n	8009a00 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009922:	4b3a      	ldr	r3, [pc, #232]	; (8009a0c <xTaskPriorityDisinherit+0x100>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	429a      	cmp	r2, r3
 800992a:	d00a      	beq.n	8009942 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	60fb      	str	r3, [r7, #12]
}
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10a      	bne.n	8009960 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	60bb      	str	r3, [r7, #8]
}
 800995c:	bf00      	nop
 800995e:	e7fe      	b.n	800995e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009964:	1e5a      	subs	r2, r3, #1
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009972:	429a      	cmp	r2, r3
 8009974:	d044      	beq.n	8009a00 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800997a:	2b00      	cmp	r3, #0
 800997c:	d140      	bne.n	8009a00 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	3304      	adds	r3, #4
 8009982:	4618      	mov	r0, r3
 8009984:	f7fe f9ae 	bl	8007ce4 <uxListRemove>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d115      	bne.n	80099ba <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009992:	491f      	ldr	r1, [pc, #124]	; (8009a10 <xTaskPriorityDisinherit+0x104>)
 8009994:	4613      	mov	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	4413      	add	r3, r2
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	440b      	add	r3, r1
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10a      	bne.n	80099ba <xTaskPriorityDisinherit+0xae>
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a8:	2201      	movs	r2, #1
 80099aa:	fa02 f303 	lsl.w	r3, r2, r3
 80099ae:	43da      	mvns	r2, r3
 80099b0:	4b18      	ldr	r3, [pc, #96]	; (8009a14 <xTaskPriorityDisinherit+0x108>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4013      	ands	r3, r2
 80099b6:	4a17      	ldr	r2, [pc, #92]	; (8009a14 <xTaskPriorityDisinherit+0x108>)
 80099b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c6:	f1c3 0207 	rsb	r2, r3, #7
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d2:	2201      	movs	r2, #1
 80099d4:	409a      	lsls	r2, r3
 80099d6:	4b0f      	ldr	r3, [pc, #60]	; (8009a14 <xTaskPriorityDisinherit+0x108>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4313      	orrs	r3, r2
 80099dc:	4a0d      	ldr	r2, [pc, #52]	; (8009a14 <xTaskPriorityDisinherit+0x108>)
 80099de:	6013      	str	r3, [r2, #0]
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e4:	4613      	mov	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4a08      	ldr	r2, [pc, #32]	; (8009a10 <xTaskPriorityDisinherit+0x104>)
 80099ee:	441a      	add	r2, r3
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	3304      	adds	r3, #4
 80099f4:	4619      	mov	r1, r3
 80099f6:	4610      	mov	r0, r2
 80099f8:	f7fe f917 	bl	8007c2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099fc:	2301      	movs	r3, #1
 80099fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a00:	697b      	ldr	r3, [r7, #20]
	}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	20000c6c 	.word	0x20000c6c
 8009a10:	20000c70 	.word	0x20000c70
 8009a14:	20000d74 	.word	0x20000d74

08009a18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009a26:	2301      	movs	r3, #1
 8009a28:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d077      	beq.n	8009b20 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10a      	bne.n	8009a4e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	60fb      	str	r3, [r7, #12]
}
 8009a4a:	bf00      	nop
 8009a4c:	e7fe      	b.n	8009a4c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d902      	bls.n	8009a5e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	61fb      	str	r3, [r7, #28]
 8009a5c:	e002      	b.n	8009a64 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a68:	69fa      	ldr	r2, [r7, #28]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d058      	beq.n	8009b20 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d153      	bne.n	8009b20 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009a78:	4b2b      	ldr	r3, [pc, #172]	; (8009b28 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d10a      	bne.n	8009a98 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	60bb      	str	r3, [r7, #8]
}
 8009a94:	bf00      	nop
 8009a96:	e7fe      	b.n	8009a96 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	69fa      	ldr	r2, [r7, #28]
 8009aa2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	db04      	blt.n	8009ab6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	f1c3 0207 	rsb	r2, r3, #7
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	6959      	ldr	r1, [r3, #20]
 8009aba:	693a      	ldr	r2, [r7, #16]
 8009abc:	4613      	mov	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4a19      	ldr	r2, [pc, #100]	; (8009b2c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009ac6:	4413      	add	r3, r2
 8009ac8:	4299      	cmp	r1, r3
 8009aca:	d129      	bne.n	8009b20 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fe f907 	bl	8007ce4 <uxListRemove>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10a      	bne.n	8009af2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae6:	43da      	mvns	r2, r3
 8009ae8:	4b11      	ldr	r3, [pc, #68]	; (8009b30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4013      	ands	r3, r2
 8009aee:	4a10      	ldr	r2, [pc, #64]	; (8009b30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009af0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af6:	2201      	movs	r2, #1
 8009af8:	409a      	lsls	r2, r3
 8009afa:	4b0d      	ldr	r3, [pc, #52]	; (8009b30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	4a0b      	ldr	r2, [pc, #44]	; (8009b30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009b02:	6013      	str	r3, [r2, #0]
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b08:	4613      	mov	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4413      	add	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4a06      	ldr	r2, [pc, #24]	; (8009b2c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009b12:	441a      	add	r2, r3
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	3304      	adds	r3, #4
 8009b18:	4619      	mov	r1, r3
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	f7fe f885 	bl	8007c2a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b20:	bf00      	nop
 8009b22:	3720      	adds	r7, #32
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	20000c6c 	.word	0x20000c6c
 8009b2c:	20000c70 	.word	0x20000c70
 8009b30:	20000d74 	.word	0x20000d74

08009b34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009b34:	b480      	push	{r7}
 8009b36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009b38:	4b07      	ldr	r3, [pc, #28]	; (8009b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d004      	beq.n	8009b4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009b40:	4b05      	ldr	r3, [pc, #20]	; (8009b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b46:	3201      	adds	r2, #1
 8009b48:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009b4a:	4b03      	ldr	r3, [pc, #12]	; (8009b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
	}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr
 8009b58:	20000c6c 	.word	0x20000c6c

08009b5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b66:	4b29      	ldr	r3, [pc, #164]	; (8009c0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b6c:	4b28      	ldr	r3, [pc, #160]	; (8009c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	3304      	adds	r3, #4
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fe f8b6 	bl	8007ce4 <uxListRemove>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10b      	bne.n	8009b96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009b7e:	4b24      	ldr	r3, [pc, #144]	; (8009c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b84:	2201      	movs	r2, #1
 8009b86:	fa02 f303 	lsl.w	r3, r2, r3
 8009b8a:	43da      	mvns	r2, r3
 8009b8c:	4b21      	ldr	r3, [pc, #132]	; (8009c14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4013      	ands	r3, r2
 8009b92:	4a20      	ldr	r2, [pc, #128]	; (8009c14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009b94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9c:	d10a      	bne.n	8009bb4 <prvAddCurrentTaskToDelayedList+0x58>
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d007      	beq.n	8009bb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ba4:	4b1a      	ldr	r3, [pc, #104]	; (8009c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3304      	adds	r3, #4
 8009baa:	4619      	mov	r1, r3
 8009bac:	481a      	ldr	r0, [pc, #104]	; (8009c18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009bae:	f7fe f83c 	bl	8007c2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bb2:	e026      	b.n	8009c02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4413      	add	r3, r2
 8009bba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bbc:	4b14      	ldr	r3, [pc, #80]	; (8009c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d209      	bcs.n	8009be0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bcc:	4b13      	ldr	r3, [pc, #76]	; (8009c1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	4b0f      	ldr	r3, [pc, #60]	; (8009c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f7fe f84a 	bl	8007c72 <vListInsert>
}
 8009bde:	e010      	b.n	8009c02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009be0:	4b0f      	ldr	r3, [pc, #60]	; (8009c20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	4b0a      	ldr	r3, [pc, #40]	; (8009c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	3304      	adds	r3, #4
 8009bea:	4619      	mov	r1, r3
 8009bec:	4610      	mov	r0, r2
 8009bee:	f7fe f840 	bl	8007c72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009bf2:	4b0c      	ldr	r3, [pc, #48]	; (8009c24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d202      	bcs.n	8009c02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009bfc:	4a09      	ldr	r2, [pc, #36]	; (8009c24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	6013      	str	r3, [r2, #0]
}
 8009c02:	bf00      	nop
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20000d70 	.word	0x20000d70
 8009c10:	20000c6c 	.word	0x20000c6c
 8009c14:	20000d74 	.word	0x20000d74
 8009c18:	20000d58 	.word	0x20000d58
 8009c1c:	20000d28 	.word	0x20000d28
 8009c20:	20000d24 	.word	0x20000d24
 8009c24:	20000d8c 	.word	0x20000d8c

08009c28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b08a      	sub	sp, #40	; 0x28
 8009c2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c32:	f000 fb07 	bl	800a244 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c36:	4b1c      	ldr	r3, [pc, #112]	; (8009ca8 <xTimerCreateTimerTask+0x80>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d021      	beq.n	8009c82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c46:	1d3a      	adds	r2, r7, #4
 8009c48:	f107 0108 	add.w	r1, r7, #8
 8009c4c:	f107 030c 	add.w	r3, r7, #12
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7f7 fa1d 	bl	8001090 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c56:	6879      	ldr	r1, [r7, #4]
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	9202      	str	r2, [sp, #8]
 8009c5e:	9301      	str	r3, [sp, #4]
 8009c60:	2302      	movs	r3, #2
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	2300      	movs	r3, #0
 8009c66:	460a      	mov	r2, r1
 8009c68:	4910      	ldr	r1, [pc, #64]	; (8009cac <xTimerCreateTimerTask+0x84>)
 8009c6a:	4811      	ldr	r0, [pc, #68]	; (8009cb0 <xTimerCreateTimerTask+0x88>)
 8009c6c:	f7fe fedc 	bl	8008a28 <xTaskCreateStatic>
 8009c70:	4603      	mov	r3, r0
 8009c72:	4a10      	ldr	r2, [pc, #64]	; (8009cb4 <xTimerCreateTimerTask+0x8c>)
 8009c74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c76:	4b0f      	ldr	r3, [pc, #60]	; (8009cb4 <xTimerCreateTimerTask+0x8c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10a      	bne.n	8009c9e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	613b      	str	r3, [r7, #16]
}
 8009c9a:	bf00      	nop
 8009c9c:	e7fe      	b.n	8009c9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c9e:	697b      	ldr	r3, [r7, #20]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3718      	adds	r7, #24
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	20000dc8 	.word	0x20000dc8
 8009cac:	0800f6bc 	.word	0x0800f6bc
 8009cb0:	08009ded 	.word	0x08009ded
 8009cb4:	20000dcc 	.word	0x20000dcc

08009cb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b08a      	sub	sp, #40	; 0x28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
 8009cc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10a      	bne.n	8009ce6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	623b      	str	r3, [r7, #32]
}
 8009ce2:	bf00      	nop
 8009ce4:	e7fe      	b.n	8009ce4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ce6:	4b1a      	ldr	r3, [pc, #104]	; (8009d50 <xTimerGenericCommand+0x98>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d02a      	beq.n	8009d44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2b05      	cmp	r3, #5
 8009cfe:	dc18      	bgt.n	8009d32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d00:	f7ff fd70 	bl	80097e4 <xTaskGetSchedulerState>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d109      	bne.n	8009d1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d0a:	4b11      	ldr	r3, [pc, #68]	; (8009d50 <xTimerGenericCommand+0x98>)
 8009d0c:	6818      	ldr	r0, [r3, #0]
 8009d0e:	f107 0110 	add.w	r1, r7, #16
 8009d12:	2300      	movs	r3, #0
 8009d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d16:	f7fe f97b 	bl	8008010 <xQueueGenericSend>
 8009d1a:	6278      	str	r0, [r7, #36]	; 0x24
 8009d1c:	e012      	b.n	8009d44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d1e:	4b0c      	ldr	r3, [pc, #48]	; (8009d50 <xTimerGenericCommand+0x98>)
 8009d20:	6818      	ldr	r0, [r3, #0]
 8009d22:	f107 0110 	add.w	r1, r7, #16
 8009d26:	2300      	movs	r3, #0
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f7fe f971 	bl	8008010 <xQueueGenericSend>
 8009d2e:	6278      	str	r0, [r7, #36]	; 0x24
 8009d30:	e008      	b.n	8009d44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d32:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <xTimerGenericCommand+0x98>)
 8009d34:	6818      	ldr	r0, [r3, #0]
 8009d36:	f107 0110 	add.w	r1, r7, #16
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	f7fe fa65 	bl	800820c <xQueueGenericSendFromISR>
 8009d42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3728      	adds	r7, #40	; 0x28
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	20000dc8 	.word	0x20000dc8

08009d54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b088      	sub	sp, #32
 8009d58:	af02      	add	r7, sp, #8
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d5e:	4b22      	ldr	r3, [pc, #136]	; (8009de8 <prvProcessExpiredTimer+0x94>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	3304      	adds	r3, #4
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fd ffb9 	bl	8007ce4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d78:	f003 0304 	and.w	r3, r3, #4
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d022      	beq.n	8009dc6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	699a      	ldr	r2, [r3, #24]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	18d1      	adds	r1, r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	6978      	ldr	r0, [r7, #20]
 8009d8e:	f000 f8d1 	bl	8009f34 <prvInsertTimerInActiveList>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d01f      	beq.n	8009dd8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d98:	2300      	movs	r3, #0
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	2100      	movs	r1, #0
 8009da2:	6978      	ldr	r0, [r7, #20]
 8009da4:	f7ff ff88 	bl	8009cb8 <xTimerGenericCommand>
 8009da8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d113      	bne.n	8009dd8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	60fb      	str	r3, [r7, #12]
}
 8009dc2:	bf00      	nop
 8009dc4:	e7fe      	b.n	8009dc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009dcc:	f023 0301 	bic.w	r3, r3, #1
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	6978      	ldr	r0, [r7, #20]
 8009dde:	4798      	blx	r3
}
 8009de0:	bf00      	nop
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20000dc0 	.word	0x20000dc0

08009dec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009df4:	f107 0308 	add.w	r3, r7, #8
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 f857 	bl	8009eac <prvGetNextExpireTime>
 8009dfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	4619      	mov	r1, r3
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f000 f803 	bl	8009e10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e0a:	f000 f8d5 	bl	8009fb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e0e:	e7f1      	b.n	8009df4 <prvTimerTask+0x8>

08009e10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e1a:	f7ff f8d9 	bl	8008fd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e1e:	f107 0308 	add.w	r3, r7, #8
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 f866 	bl	8009ef4 <prvSampleTimeNow>
 8009e28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d130      	bne.n	8009e92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10a      	bne.n	8009e4c <prvProcessTimerOrBlockTask+0x3c>
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d806      	bhi.n	8009e4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e3e:	f7ff f8d5 	bl	8008fec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e42:	68f9      	ldr	r1, [r7, #12]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7ff ff85 	bl	8009d54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e4a:	e024      	b.n	8009e96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d008      	beq.n	8009e64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e52:	4b13      	ldr	r3, [pc, #76]	; (8009ea0 <prvProcessTimerOrBlockTask+0x90>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <prvProcessTimerOrBlockTask+0x50>
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e000      	b.n	8009e62 <prvProcessTimerOrBlockTask+0x52>
 8009e60:	2300      	movs	r3, #0
 8009e62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e64:	4b0f      	ldr	r3, [pc, #60]	; (8009ea4 <prvProcessTimerOrBlockTask+0x94>)
 8009e66:	6818      	ldr	r0, [r3, #0]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	4619      	mov	r1, r3
 8009e72:	f7fe fda5 	bl	80089c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e76:	f7ff f8b9 	bl	8008fec <xTaskResumeAll>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10a      	bne.n	8009e96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e80:	4b09      	ldr	r3, [pc, #36]	; (8009ea8 <prvProcessTimerOrBlockTask+0x98>)
 8009e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e86:	601a      	str	r2, [r3, #0]
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	f3bf 8f6f 	isb	sy
}
 8009e90:	e001      	b.n	8009e96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e92:	f7ff f8ab 	bl	8008fec <xTaskResumeAll>
}
 8009e96:	bf00      	nop
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	20000dc4 	.word	0x20000dc4
 8009ea4:	20000dc8 	.word	0x20000dc8
 8009ea8:	e000ed04 	.word	0xe000ed04

08009eac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009eb4:	4b0e      	ldr	r3, [pc, #56]	; (8009ef0 <prvGetNextExpireTime+0x44>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <prvGetNextExpireTime+0x16>
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	e000      	b.n	8009ec4 <prvGetNextExpireTime+0x18>
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d105      	bne.n	8009edc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ed0:	4b07      	ldr	r3, [pc, #28]	; (8009ef0 <prvGetNextExpireTime+0x44>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60fb      	str	r3, [r7, #12]
 8009eda:	e001      	b.n	8009ee0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009edc:	2300      	movs	r3, #0
 8009ede:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3714      	adds	r7, #20
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	20000dc0 	.word	0x20000dc0

08009ef4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009efc:	f7ff f912 	bl	8009124 <xTaskGetTickCount>
 8009f00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f02:	4b0b      	ldr	r3, [pc, #44]	; (8009f30 <prvSampleTimeNow+0x3c>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d205      	bcs.n	8009f18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f0c:	f000 f936 	bl	800a17c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	e002      	b.n	8009f1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f1e:	4a04      	ldr	r2, [pc, #16]	; (8009f30 <prvSampleTimeNow+0x3c>)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f24:	68fb      	ldr	r3, [r7, #12]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20000dd0 	.word	0x20000dd0

08009f34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
 8009f40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f42:	2300      	movs	r3, #0
 8009f44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d812      	bhi.n	8009f80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	1ad2      	subs	r2, r2, r3
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d302      	bcc.n	8009f6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	617b      	str	r3, [r7, #20]
 8009f6c:	e01b      	b.n	8009fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f6e:	4b10      	ldr	r3, [pc, #64]	; (8009fb0 <prvInsertTimerInActiveList+0x7c>)
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3304      	adds	r3, #4
 8009f76:	4619      	mov	r1, r3
 8009f78:	4610      	mov	r0, r2
 8009f7a:	f7fd fe7a 	bl	8007c72 <vListInsert>
 8009f7e:	e012      	b.n	8009fa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d206      	bcs.n	8009f96 <prvInsertTimerInActiveList+0x62>
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d302      	bcc.n	8009f96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f90:	2301      	movs	r3, #1
 8009f92:	617b      	str	r3, [r7, #20]
 8009f94:	e007      	b.n	8009fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f96:	4b07      	ldr	r3, [pc, #28]	; (8009fb4 <prvInsertTimerInActiveList+0x80>)
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	f7fd fe66 	bl	8007c72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009fa6:	697b      	ldr	r3, [r7, #20]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3718      	adds	r7, #24
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	20000dc4 	.word	0x20000dc4
 8009fb4:	20000dc0 	.word	0x20000dc0

08009fb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08e      	sub	sp, #56	; 0x38
 8009fbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fbe:	e0ca      	b.n	800a156 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	da18      	bge.n	8009ff8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009fc6:	1d3b      	adds	r3, r7, #4
 8009fc8:	3304      	adds	r3, #4
 8009fca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10a      	bne.n	8009fe8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	61fb      	str	r3, [r7, #28]
}
 8009fe4:	bf00      	nop
 8009fe6:	e7fe      	b.n	8009fe6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fee:	6850      	ldr	r0, [r2, #4]
 8009ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ff2:	6892      	ldr	r2, [r2, #8]
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f2c0 80aa 	blt.w	800a154 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	695b      	ldr	r3, [r3, #20]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d004      	beq.n	800a016 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00e:	3304      	adds	r3, #4
 800a010:	4618      	mov	r0, r3
 800a012:	f7fd fe67 	bl	8007ce4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a016:	463b      	mov	r3, r7
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff ff6b 	bl	8009ef4 <prvSampleTimeNow>
 800a01e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b09      	cmp	r3, #9
 800a024:	f200 8097 	bhi.w	800a156 <prvProcessReceivedCommands+0x19e>
 800a028:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <prvProcessReceivedCommands+0x78>)
 800a02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02e:	bf00      	nop
 800a030:	0800a059 	.word	0x0800a059
 800a034:	0800a059 	.word	0x0800a059
 800a038:	0800a059 	.word	0x0800a059
 800a03c:	0800a0cd 	.word	0x0800a0cd
 800a040:	0800a0e1 	.word	0x0800a0e1
 800a044:	0800a12b 	.word	0x0800a12b
 800a048:	0800a059 	.word	0x0800a059
 800a04c:	0800a059 	.word	0x0800a059
 800a050:	0800a0cd 	.word	0x0800a0cd
 800a054:	0800a0e1 	.word	0x0800a0e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a05e:	f043 0301 	orr.w	r3, r3, #1
 800a062:	b2da      	uxtb	r2, r3
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	18d1      	adds	r1, r2, r3
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a078:	f7ff ff5c 	bl	8009f34 <prvInsertTimerInActiveList>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d069      	beq.n	800a156 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a088:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a090:	f003 0304 	and.w	r3, r3, #4
 800a094:	2b00      	cmp	r3, #0
 800a096:	d05e      	beq.n	800a156 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	699b      	ldr	r3, [r3, #24]
 800a09e:	441a      	add	r2, r3
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0aa:	f7ff fe05 	bl	8009cb8 <xTimerGenericCommand>
 800a0ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d14f      	bne.n	800a156 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	61bb      	str	r3, [r7, #24]
}
 800a0c8:	bf00      	nop
 800a0ca:	e7fe      	b.n	800a0ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0d2:	f023 0301 	bic.w	r3, r3, #1
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800a0de:	e03a      	b.n	800a156 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0e6:	f043 0301 	orr.w	r3, r3, #1
 800a0ea:	b2da      	uxtb	r2, r3
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	699b      	ldr	r3, [r3, #24]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10a      	bne.n	800a116 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	617b      	str	r3, [r7, #20]
}
 800a112:	bf00      	nop
 800a114:	e7fe      	b.n	800a114 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a118:	699a      	ldr	r2, [r3, #24]
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	18d1      	adds	r1, r2, r3
 800a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a124:	f7ff ff06 	bl	8009f34 <prvInsertTimerInActiveList>
					break;
 800a128:	e015      	b.n	800a156 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a130:	f003 0302 	and.w	r3, r3, #2
 800a134:	2b00      	cmp	r3, #0
 800a136:	d103      	bne.n	800a140 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a13a:	f000 fbe1 	bl	800a900 <vPortFree>
 800a13e:	e00a      	b.n	800a156 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a146:	f023 0301 	bic.w	r3, r3, #1
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a152:	e000      	b.n	800a156 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a154:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a156:	4b08      	ldr	r3, [pc, #32]	; (800a178 <prvProcessReceivedCommands+0x1c0>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	1d39      	adds	r1, r7, #4
 800a15c:	2200      	movs	r2, #0
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe f8f0 	bl	8008344 <xQueueReceive>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	f47f af2a 	bne.w	8009fc0 <prvProcessReceivedCommands+0x8>
	}
}
 800a16c:	bf00      	nop
 800a16e:	bf00      	nop
 800a170:	3730      	adds	r7, #48	; 0x30
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	20000dc8 	.word	0x20000dc8

0800a17c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a182:	e048      	b.n	800a216 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a184:	4b2d      	ldr	r3, [pc, #180]	; (800a23c <prvSwitchTimerLists+0xc0>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a18e:	4b2b      	ldr	r3, [pc, #172]	; (800a23c <prvSwitchTimerLists+0xc0>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3304      	adds	r3, #4
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fd fda1 	bl	8007ce4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d02e      	beq.n	800a216 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	4413      	add	r3, r2
 800a1c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d90e      	bls.n	800a1e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	68ba      	ldr	r2, [r7, #8]
 800a1ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1d6:	4b19      	ldr	r3, [pc, #100]	; (800a23c <prvSwitchTimerLists+0xc0>)
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	3304      	adds	r3, #4
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	f7fd fd46 	bl	8007c72 <vListInsert>
 800a1e6:	e016      	b.n	800a216 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f7ff fd60 	bl	8009cb8 <xTimerGenericCommand>
 800a1f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	603b      	str	r3, [r7, #0]
}
 800a212:	bf00      	nop
 800a214:	e7fe      	b.n	800a214 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a216:	4b09      	ldr	r3, [pc, #36]	; (800a23c <prvSwitchTimerLists+0xc0>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1b1      	bne.n	800a184 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a220:	4b06      	ldr	r3, [pc, #24]	; (800a23c <prvSwitchTimerLists+0xc0>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a226:	4b06      	ldr	r3, [pc, #24]	; (800a240 <prvSwitchTimerLists+0xc4>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a04      	ldr	r2, [pc, #16]	; (800a23c <prvSwitchTimerLists+0xc0>)
 800a22c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a22e:	4a04      	ldr	r2, [pc, #16]	; (800a240 <prvSwitchTimerLists+0xc4>)
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	6013      	str	r3, [r2, #0]
}
 800a234:	bf00      	nop
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20000dc0 	.word	0x20000dc0
 800a240:	20000dc4 	.word	0x20000dc4

0800a244 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a24a:	f000 f96b 	bl	800a524 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a24e:	4b15      	ldr	r3, [pc, #84]	; (800a2a4 <prvCheckForValidListAndQueue+0x60>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d120      	bne.n	800a298 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a256:	4814      	ldr	r0, [pc, #80]	; (800a2a8 <prvCheckForValidListAndQueue+0x64>)
 800a258:	f7fd fcba 	bl	8007bd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a25c:	4813      	ldr	r0, [pc, #76]	; (800a2ac <prvCheckForValidListAndQueue+0x68>)
 800a25e:	f7fd fcb7 	bl	8007bd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a262:	4b13      	ldr	r3, [pc, #76]	; (800a2b0 <prvCheckForValidListAndQueue+0x6c>)
 800a264:	4a10      	ldr	r2, [pc, #64]	; (800a2a8 <prvCheckForValidListAndQueue+0x64>)
 800a266:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a268:	4b12      	ldr	r3, [pc, #72]	; (800a2b4 <prvCheckForValidListAndQueue+0x70>)
 800a26a:	4a10      	ldr	r2, [pc, #64]	; (800a2ac <prvCheckForValidListAndQueue+0x68>)
 800a26c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a26e:	2300      	movs	r3, #0
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	4b11      	ldr	r3, [pc, #68]	; (800a2b8 <prvCheckForValidListAndQueue+0x74>)
 800a274:	4a11      	ldr	r2, [pc, #68]	; (800a2bc <prvCheckForValidListAndQueue+0x78>)
 800a276:	2110      	movs	r1, #16
 800a278:	200a      	movs	r0, #10
 800a27a:	f7fd fdc5 	bl	8007e08 <xQueueGenericCreateStatic>
 800a27e:	4603      	mov	r3, r0
 800a280:	4a08      	ldr	r2, [pc, #32]	; (800a2a4 <prvCheckForValidListAndQueue+0x60>)
 800a282:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a284:	4b07      	ldr	r3, [pc, #28]	; (800a2a4 <prvCheckForValidListAndQueue+0x60>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d005      	beq.n	800a298 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a28c:	4b05      	ldr	r3, [pc, #20]	; (800a2a4 <prvCheckForValidListAndQueue+0x60>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	490b      	ldr	r1, [pc, #44]	; (800a2c0 <prvCheckForValidListAndQueue+0x7c>)
 800a292:	4618      	mov	r0, r3
 800a294:	f7fe fb6a 	bl	800896c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a298:	f000 f974 	bl	800a584 <vPortExitCritical>
}
 800a29c:	bf00      	nop
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20000dc8 	.word	0x20000dc8
 800a2a8:	20000d98 	.word	0x20000d98
 800a2ac:	20000dac 	.word	0x20000dac
 800a2b0:	20000dc0 	.word	0x20000dc0
 800a2b4:	20000dc4 	.word	0x20000dc4
 800a2b8:	20000e74 	.word	0x20000e74
 800a2bc:	20000dd4 	.word	0x20000dd4
 800a2c0:	0800f6c4 	.word	0x0800f6c4

0800a2c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	3b04      	subs	r3, #4
 800a2d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3b04      	subs	r3, #4
 800a2e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	f023 0201 	bic.w	r2, r3, #1
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3b04      	subs	r3, #4
 800a2f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2f4:	4a0c      	ldr	r2, [pc, #48]	; (800a328 <pxPortInitialiseStack+0x64>)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	3b14      	subs	r3, #20
 800a2fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3b04      	subs	r3, #4
 800a30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f06f 0202 	mvn.w	r2, #2
 800a312:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	3b20      	subs	r3, #32
 800a318:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a31a:	68fb      	ldr	r3, [r7, #12]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3714      	adds	r7, #20
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	0800a32d 	.word	0x0800a32d

0800a32c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a336:	4b12      	ldr	r3, [pc, #72]	; (800a380 <prvTaskExitError+0x54>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33e:	d00a      	beq.n	800a356 <prvTaskExitError+0x2a>
	__asm volatile
 800a340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a344:	f383 8811 	msr	BASEPRI, r3
 800a348:	f3bf 8f6f 	isb	sy
 800a34c:	f3bf 8f4f 	dsb	sy
 800a350:	60fb      	str	r3, [r7, #12]
}
 800a352:	bf00      	nop
 800a354:	e7fe      	b.n	800a354 <prvTaskExitError+0x28>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	60bb      	str	r3, [r7, #8]
}
 800a368:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a36a:	bf00      	nop
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d0fc      	beq.n	800a36c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a372:	bf00      	nop
 800a374:	bf00      	nop
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	20000074 	.word	0x20000074
	...

0800a390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a390:	4b07      	ldr	r3, [pc, #28]	; (800a3b0 <pxCurrentTCBConst2>)
 800a392:	6819      	ldr	r1, [r3, #0]
 800a394:	6808      	ldr	r0, [r1, #0]
 800a396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39a:	f380 8809 	msr	PSP, r0
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f04f 0000 	mov.w	r0, #0
 800a3a6:	f380 8811 	msr	BASEPRI, r0
 800a3aa:	4770      	bx	lr
 800a3ac:	f3af 8000 	nop.w

0800a3b0 <pxCurrentTCBConst2>:
 800a3b0:	20000c6c 	.word	0x20000c6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop

0800a3b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3b8:	4808      	ldr	r0, [pc, #32]	; (800a3dc <prvPortStartFirstTask+0x24>)
 800a3ba:	6800      	ldr	r0, [r0, #0]
 800a3bc:	6800      	ldr	r0, [r0, #0]
 800a3be:	f380 8808 	msr	MSP, r0
 800a3c2:	f04f 0000 	mov.w	r0, #0
 800a3c6:	f380 8814 	msr	CONTROL, r0
 800a3ca:	b662      	cpsie	i
 800a3cc:	b661      	cpsie	f
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	df00      	svc	0
 800a3d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3da:	bf00      	nop
 800a3dc:	e000ed08 	.word	0xe000ed08

0800a3e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a3e6:	4b46      	ldr	r3, [pc, #280]	; (800a500 <xPortStartScheduler+0x120>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a46      	ldr	r2, [pc, #280]	; (800a504 <xPortStartScheduler+0x124>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d10a      	bne.n	800a406 <xPortStartScheduler+0x26>
	__asm volatile
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	613b      	str	r3, [r7, #16]
}
 800a402:	bf00      	nop
 800a404:	e7fe      	b.n	800a404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a406:	4b3e      	ldr	r3, [pc, #248]	; (800a500 <xPortStartScheduler+0x120>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a3f      	ldr	r2, [pc, #252]	; (800a508 <xPortStartScheduler+0x128>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d10a      	bne.n	800a426 <xPortStartScheduler+0x46>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	60fb      	str	r3, [r7, #12]
}
 800a422:	bf00      	nop
 800a424:	e7fe      	b.n	800a424 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a426:	4b39      	ldr	r3, [pc, #228]	; (800a50c <xPortStartScheduler+0x12c>)
 800a428:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	22ff      	movs	r2, #255	; 0xff
 800a436:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a440:	78fb      	ldrb	r3, [r7, #3]
 800a442:	b2db      	uxtb	r3, r3
 800a444:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	4b31      	ldr	r3, [pc, #196]	; (800a510 <xPortStartScheduler+0x130>)
 800a44c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a44e:	4b31      	ldr	r3, [pc, #196]	; (800a514 <xPortStartScheduler+0x134>)
 800a450:	2207      	movs	r2, #7
 800a452:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a454:	e009      	b.n	800a46a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a456:	4b2f      	ldr	r3, [pc, #188]	; (800a514 <xPortStartScheduler+0x134>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	3b01      	subs	r3, #1
 800a45c:	4a2d      	ldr	r2, [pc, #180]	; (800a514 <xPortStartScheduler+0x134>)
 800a45e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	b2db      	uxtb	r3, r3
 800a464:	005b      	lsls	r3, r3, #1
 800a466:	b2db      	uxtb	r3, r3
 800a468:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a46a:	78fb      	ldrb	r3, [r7, #3]
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a472:	2b80      	cmp	r3, #128	; 0x80
 800a474:	d0ef      	beq.n	800a456 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a476:	4b27      	ldr	r3, [pc, #156]	; (800a514 <xPortStartScheduler+0x134>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f1c3 0307 	rsb	r3, r3, #7
 800a47e:	2b04      	cmp	r3, #4
 800a480:	d00a      	beq.n	800a498 <xPortStartScheduler+0xb8>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	60bb      	str	r3, [r7, #8]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a498:	4b1e      	ldr	r3, [pc, #120]	; (800a514 <xPortStartScheduler+0x134>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	021b      	lsls	r3, r3, #8
 800a49e:	4a1d      	ldr	r2, [pc, #116]	; (800a514 <xPortStartScheduler+0x134>)
 800a4a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a4a2:	4b1c      	ldr	r3, [pc, #112]	; (800a514 <xPortStartScheduler+0x134>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4aa:	4a1a      	ldr	r2, [pc, #104]	; (800a514 <xPortStartScheduler+0x134>)
 800a4ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	b2da      	uxtb	r2, r3
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4b6:	4b18      	ldr	r3, [pc, #96]	; (800a518 <xPortStartScheduler+0x138>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a17      	ldr	r2, [pc, #92]	; (800a518 <xPortStartScheduler+0x138>)
 800a4bc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a4c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4c2:	4b15      	ldr	r3, [pc, #84]	; (800a518 <xPortStartScheduler+0x138>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a14      	ldr	r2, [pc, #80]	; (800a518 <xPortStartScheduler+0x138>)
 800a4c8:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 800a4cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4ce:	f000 f8dd 	bl	800a68c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4d2:	4b12      	ldr	r3, [pc, #72]	; (800a51c <xPortStartScheduler+0x13c>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4d8:	f000 f8fc 	bl	800a6d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4dc:	4b10      	ldr	r3, [pc, #64]	; (800a520 <xPortStartScheduler+0x140>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a0f      	ldr	r2, [pc, #60]	; (800a520 <xPortStartScheduler+0x140>)
 800a4e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a4e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4e8:	f7ff ff66 	bl	800a3b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4ec:	f7fe fee2 	bl	80092b4 <vTaskSwitchContext>
	prvTaskExitError();
 800a4f0:	f7ff ff1c 	bl	800a32c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3718      	adds	r7, #24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	e000ed00 	.word	0xe000ed00
 800a504:	410fc271 	.word	0x410fc271
 800a508:	410fc270 	.word	0x410fc270
 800a50c:	e000e400 	.word	0xe000e400
 800a510:	20000ebc 	.word	0x20000ebc
 800a514:	20000ec0 	.word	0x20000ec0
 800a518:	e000ed20 	.word	0xe000ed20
 800a51c:	20000074 	.word	0x20000074
 800a520:	e000ef34 	.word	0xe000ef34

0800a524 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
	__asm volatile
 800a52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52e:	f383 8811 	msr	BASEPRI, r3
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	607b      	str	r3, [r7, #4]
}
 800a53c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a53e:	4b0f      	ldr	r3, [pc, #60]	; (800a57c <vPortEnterCritical+0x58>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3301      	adds	r3, #1
 800a544:	4a0d      	ldr	r2, [pc, #52]	; (800a57c <vPortEnterCritical+0x58>)
 800a546:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a548:	4b0c      	ldr	r3, [pc, #48]	; (800a57c <vPortEnterCritical+0x58>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d10f      	bne.n	800a570 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a550:	4b0b      	ldr	r3, [pc, #44]	; (800a580 <vPortEnterCritical+0x5c>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00a      	beq.n	800a570 <vPortEnterCritical+0x4c>
	__asm volatile
 800a55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55e:	f383 8811 	msr	BASEPRI, r3
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	603b      	str	r3, [r7, #0]
}
 800a56c:	bf00      	nop
 800a56e:	e7fe      	b.n	800a56e <vPortEnterCritical+0x4a>
	}
}
 800a570:	bf00      	nop
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	20000074 	.word	0x20000074
 800a580:	e000ed04 	.word	0xe000ed04

0800a584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a58a:	4b12      	ldr	r3, [pc, #72]	; (800a5d4 <vPortExitCritical+0x50>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10a      	bne.n	800a5a8 <vPortExitCritical+0x24>
	__asm volatile
 800a592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	607b      	str	r3, [r7, #4]
}
 800a5a4:	bf00      	nop
 800a5a6:	e7fe      	b.n	800a5a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a5a8:	4b0a      	ldr	r3, [pc, #40]	; (800a5d4 <vPortExitCritical+0x50>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	4a09      	ldr	r2, [pc, #36]	; (800a5d4 <vPortExitCritical+0x50>)
 800a5b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5b2:	4b08      	ldr	r3, [pc, #32]	; (800a5d4 <vPortExitCritical+0x50>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d105      	bne.n	800a5c6 <vPortExitCritical+0x42>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	f383 8811 	msr	BASEPRI, r3
}
 800a5c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5c6:	bf00      	nop
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	20000074 	.word	0x20000074
	...

0800a5e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5e0:	f3ef 8009 	mrs	r0, PSP
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	4b15      	ldr	r3, [pc, #84]	; (800a640 <pxCurrentTCBConst>)
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	f01e 0f10 	tst.w	lr, #16
 800a5f0:	bf08      	it	eq
 800a5f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fa:	6010      	str	r0, [r2, #0]
 800a5fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a600:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a604:	f380 8811 	msr	BASEPRI, r0
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f7fe fe50 	bl	80092b4 <vTaskSwitchContext>
 800a614:	f04f 0000 	mov.w	r0, #0
 800a618:	f380 8811 	msr	BASEPRI, r0
 800a61c:	bc09      	pop	{r0, r3}
 800a61e:	6819      	ldr	r1, [r3, #0]
 800a620:	6808      	ldr	r0, [r1, #0]
 800a622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a626:	f01e 0f10 	tst.w	lr, #16
 800a62a:	bf08      	it	eq
 800a62c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a630:	f380 8809 	msr	PSP, r0
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	f3af 8000 	nop.w

0800a640 <pxCurrentTCBConst>:
 800a640:	20000c6c 	.word	0x20000c6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a644:	bf00      	nop
 800a646:	bf00      	nop

0800a648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	607b      	str	r3, [r7, #4]
}
 800a660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a662:	f7fe fd6f 	bl	8009144 <xTaskIncrementTick>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d003      	beq.n	800a674 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a66c:	4b06      	ldr	r3, [pc, #24]	; (800a688 <SysTick_Handler+0x40>)
 800a66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a672:	601a      	str	r2, [r3, #0]
 800a674:	2300      	movs	r3, #0
 800a676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	f383 8811 	msr	BASEPRI, r3
}
 800a67e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	e000ed04 	.word	0xe000ed04

0800a68c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a68c:	b480      	push	{r7}
 800a68e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a690:	4b0b      	ldr	r3, [pc, #44]	; (800a6c0 <vPortSetupTimerInterrupt+0x34>)
 800a692:	2200      	movs	r2, #0
 800a694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a696:	4b0b      	ldr	r3, [pc, #44]	; (800a6c4 <vPortSetupTimerInterrupt+0x38>)
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a69c:	4b0a      	ldr	r3, [pc, #40]	; (800a6c8 <vPortSetupTimerInterrupt+0x3c>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a0a      	ldr	r2, [pc, #40]	; (800a6cc <vPortSetupTimerInterrupt+0x40>)
 800a6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6a6:	099b      	lsrs	r3, r3, #6
 800a6a8:	4a09      	ldr	r2, [pc, #36]	; (800a6d0 <vPortSetupTimerInterrupt+0x44>)
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a6ae:	4b04      	ldr	r3, [pc, #16]	; (800a6c0 <vPortSetupTimerInterrupt+0x34>)
 800a6b0:	2207      	movs	r2, #7
 800a6b2:	601a      	str	r2, [r3, #0]
}
 800a6b4:	bf00      	nop
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	e000e010 	.word	0xe000e010
 800a6c4:	e000e018 	.word	0xe000e018
 800a6c8:	20000000 	.word	0x20000000
 800a6cc:	10624dd3 	.word	0x10624dd3
 800a6d0:	e000e014 	.word	0xe000e014

0800a6d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a6e4 <vPortEnableVFP+0x10>
 800a6d8:	6801      	ldr	r1, [r0, #0]
 800a6da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a6de:	6001      	str	r1, [r0, #0]
 800a6e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6e2:	bf00      	nop
 800a6e4:	e000ed88 	.word	0xe000ed88

0800a6e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6ee:	f3ef 8305 	mrs	r3, IPSR
 800a6f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2b0f      	cmp	r3, #15
 800a6f8:	d914      	bls.n	800a724 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a6fa:	4a17      	ldr	r2, [pc, #92]	; (800a758 <vPortValidateInterruptPriority+0x70>)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4413      	add	r3, r2
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a704:	4b15      	ldr	r3, [pc, #84]	; (800a75c <vPortValidateInterruptPriority+0x74>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	7afa      	ldrb	r2, [r7, #11]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d20a      	bcs.n	800a724 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	607b      	str	r3, [r7, #4]
}
 800a720:	bf00      	nop
 800a722:	e7fe      	b.n	800a722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a724:	4b0e      	ldr	r3, [pc, #56]	; (800a760 <vPortValidateInterruptPriority+0x78>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a72c:	4b0d      	ldr	r3, [pc, #52]	; (800a764 <vPortValidateInterruptPriority+0x7c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	429a      	cmp	r2, r3
 800a732:	d90a      	bls.n	800a74a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	603b      	str	r3, [r7, #0]
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <vPortValidateInterruptPriority+0x60>
	}
 800a74a:	bf00      	nop
 800a74c:	3714      	adds	r7, #20
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	e000e3f0 	.word	0xe000e3f0
 800a75c:	20000ebc 	.word	0x20000ebc
 800a760:	e000ed0c 	.word	0xe000ed0c
 800a764:	20000ec0 	.word	0x20000ec0

0800a768 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b08a      	sub	sp, #40	; 0x28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a770:	2300      	movs	r3, #0
 800a772:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a774:	f7fe fc2c 	bl	8008fd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a778:	4b5b      	ldr	r3, [pc, #364]	; (800a8e8 <pvPortMalloc+0x180>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a780:	f000 f920 	bl	800a9c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a784:	4b59      	ldr	r3, [pc, #356]	; (800a8ec <pvPortMalloc+0x184>)
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4013      	ands	r3, r2
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f040 8093 	bne.w	800a8b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d01d      	beq.n	800a7d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a798:	2208      	movs	r2, #8
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4413      	add	r3, r2
 800a79e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d014      	beq.n	800a7d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f023 0307 	bic.w	r3, r3, #7
 800a7b0:	3308      	adds	r3, #8
 800a7b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f003 0307 	and.w	r3, r3, #7
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00a      	beq.n	800a7d4 <pvPortMalloc+0x6c>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	617b      	str	r3, [r7, #20]
}
 800a7d0:	bf00      	nop
 800a7d2:	e7fe      	b.n	800a7d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d06e      	beq.n	800a8b8 <pvPortMalloc+0x150>
 800a7da:	4b45      	ldr	r3, [pc, #276]	; (800a8f0 <pvPortMalloc+0x188>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d869      	bhi.n	800a8b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7e4:	4b43      	ldr	r3, [pc, #268]	; (800a8f4 <pvPortMalloc+0x18c>)
 800a7e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7e8:	4b42      	ldr	r3, [pc, #264]	; (800a8f4 <pvPortMalloc+0x18c>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7ee:	e004      	b.n	800a7fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	429a      	cmp	r2, r3
 800a802:	d903      	bls.n	800a80c <pvPortMalloc+0xa4>
 800a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1f1      	bne.n	800a7f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a80c:	4b36      	ldr	r3, [pc, #216]	; (800a8e8 <pvPortMalloc+0x180>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a812:	429a      	cmp	r2, r3
 800a814:	d050      	beq.n	800a8b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a816:	6a3b      	ldr	r3, [r7, #32]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2208      	movs	r2, #8
 800a81c:	4413      	add	r3, r2
 800a81e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	6a3b      	ldr	r3, [r7, #32]
 800a826:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	1ad2      	subs	r2, r2, r3
 800a830:	2308      	movs	r3, #8
 800a832:	005b      	lsls	r3, r3, #1
 800a834:	429a      	cmp	r2, r3
 800a836:	d91f      	bls.n	800a878 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4413      	add	r3, r2
 800a83e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	f003 0307 	and.w	r3, r3, #7
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00a      	beq.n	800a860 <pvPortMalloc+0xf8>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	613b      	str	r3, [r7, #16]
}
 800a85c:	bf00      	nop
 800a85e:	e7fe      	b.n	800a85e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	685a      	ldr	r2, [r3, #4]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	1ad2      	subs	r2, r2, r3
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a872:	69b8      	ldr	r0, [r7, #24]
 800a874:	f000 f908 	bl	800aa88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a878:	4b1d      	ldr	r3, [pc, #116]	; (800a8f0 <pvPortMalloc+0x188>)
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	4a1b      	ldr	r2, [pc, #108]	; (800a8f0 <pvPortMalloc+0x188>)
 800a884:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a886:	4b1a      	ldr	r3, [pc, #104]	; (800a8f0 <pvPortMalloc+0x188>)
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	4b1b      	ldr	r3, [pc, #108]	; (800a8f8 <pvPortMalloc+0x190>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d203      	bcs.n	800a89a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a892:	4b17      	ldr	r3, [pc, #92]	; (800a8f0 <pvPortMalloc+0x188>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a18      	ldr	r2, [pc, #96]	; (800a8f8 <pvPortMalloc+0x190>)
 800a898:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	4b13      	ldr	r3, [pc, #76]	; (800a8ec <pvPortMalloc+0x184>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	431a      	orrs	r2, r3
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a8ae:	4b13      	ldr	r3, [pc, #76]	; (800a8fc <pvPortMalloc+0x194>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	4a11      	ldr	r2, [pc, #68]	; (800a8fc <pvPortMalloc+0x194>)
 800a8b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8b8:	f7fe fb98 	bl	8008fec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	f003 0307 	and.w	r3, r3, #7
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00a      	beq.n	800a8dc <pvPortMalloc+0x174>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	60fb      	str	r3, [r7, #12]
}
 800a8d8:	bf00      	nop
 800a8da:	e7fe      	b.n	800a8da <pvPortMalloc+0x172>
	return pvReturn;
 800a8dc:	69fb      	ldr	r3, [r7, #28]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3728      	adds	r7, #40	; 0x28
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	200083fc 	.word	0x200083fc
 800a8ec:	20008410 	.word	0x20008410
 800a8f0:	20008400 	.word	0x20008400
 800a8f4:	200083f4 	.word	0x200083f4
 800a8f8:	20008404 	.word	0x20008404
 800a8fc:	20008408 	.word	0x20008408

0800a900 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d04d      	beq.n	800a9ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a912:	2308      	movs	r3, #8
 800a914:	425b      	negs	r3, r3
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	4413      	add	r3, r2
 800a91a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	685a      	ldr	r2, [r3, #4]
 800a924:	4b24      	ldr	r3, [pc, #144]	; (800a9b8 <vPortFree+0xb8>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4013      	ands	r3, r2
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10a      	bne.n	800a944 <vPortFree+0x44>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	60fb      	str	r3, [r7, #12]
}
 800a940:	bf00      	nop
 800a942:	e7fe      	b.n	800a942 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00a      	beq.n	800a962 <vPortFree+0x62>
	__asm volatile
 800a94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a950:	f383 8811 	msr	BASEPRI, r3
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	60bb      	str	r3, [r7, #8]
}
 800a95e:	bf00      	nop
 800a960:	e7fe      	b.n	800a960 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	685a      	ldr	r2, [r3, #4]
 800a966:	4b14      	ldr	r3, [pc, #80]	; (800a9b8 <vPortFree+0xb8>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4013      	ands	r3, r2
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d01e      	beq.n	800a9ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d11a      	bne.n	800a9ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	685a      	ldr	r2, [r3, #4]
 800a97c:	4b0e      	ldr	r3, [pc, #56]	; (800a9b8 <vPortFree+0xb8>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	43db      	mvns	r3, r3
 800a982:	401a      	ands	r2, r3
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a988:	f7fe fb22 	bl	8008fd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	685a      	ldr	r2, [r3, #4]
 800a990:	4b0a      	ldr	r3, [pc, #40]	; (800a9bc <vPortFree+0xbc>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4413      	add	r3, r2
 800a996:	4a09      	ldr	r2, [pc, #36]	; (800a9bc <vPortFree+0xbc>)
 800a998:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a99a:	6938      	ldr	r0, [r7, #16]
 800a99c:	f000 f874 	bl	800aa88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a9a0:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <vPortFree+0xc0>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	4a06      	ldr	r2, [pc, #24]	; (800a9c0 <vPortFree+0xc0>)
 800a9a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a9aa:	f7fe fb1f 	bl	8008fec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a9ae:	bf00      	nop
 800a9b0:	3718      	adds	r7, #24
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20008410 	.word	0x20008410
 800a9bc:	20008400 	.word	0x20008400
 800a9c0:	2000840c 	.word	0x2000840c

0800a9c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9ca:	f247 5330 	movw	r3, #30000	; 0x7530
 800a9ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9d0:	4b27      	ldr	r3, [pc, #156]	; (800aa70 <prvHeapInit+0xac>)
 800a9d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f003 0307 	and.w	r3, r3, #7
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00c      	beq.n	800a9f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3307      	adds	r3, #7
 800a9e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f023 0307 	bic.w	r3, r3, #7
 800a9ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	4a1f      	ldr	r2, [pc, #124]	; (800aa70 <prvHeapInit+0xac>)
 800a9f4:	4413      	add	r3, r2
 800a9f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9fc:	4a1d      	ldr	r2, [pc, #116]	; (800aa74 <prvHeapInit+0xb0>)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa02:	4b1c      	ldr	r3, [pc, #112]	; (800aa74 <prvHeapInit+0xb0>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa10:	2208      	movs	r2, #8
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	1a9b      	subs	r3, r3, r2
 800aa16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f023 0307 	bic.w	r3, r3, #7
 800aa1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4a15      	ldr	r2, [pc, #84]	; (800aa78 <prvHeapInit+0xb4>)
 800aa24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa26:	4b14      	ldr	r3, [pc, #80]	; (800aa78 <prvHeapInit+0xb4>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa2e:	4b12      	ldr	r3, [pc, #72]	; (800aa78 <prvHeapInit+0xb4>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	1ad2      	subs	r2, r2, r3
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa44:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <prvHeapInit+0xb4>)
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	4a0a      	ldr	r2, [pc, #40]	; (800aa7c <prvHeapInit+0xb8>)
 800aa52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	4a09      	ldr	r2, [pc, #36]	; (800aa80 <prvHeapInit+0xbc>)
 800aa5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa5c:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <prvHeapInit+0xc0>)
 800aa5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa62:	601a      	str	r2, [r3, #0]
}
 800aa64:	bf00      	nop
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	20000ec4 	.word	0x20000ec4
 800aa74:	200083f4 	.word	0x200083f4
 800aa78:	200083fc 	.word	0x200083fc
 800aa7c:	20008404 	.word	0x20008404
 800aa80:	20008400 	.word	0x20008400
 800aa84:	20008410 	.word	0x20008410

0800aa88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa90:	4b28      	ldr	r3, [pc, #160]	; (800ab34 <prvInsertBlockIntoFreeList+0xac>)
 800aa92:	60fb      	str	r3, [r7, #12]
 800aa94:	e002      	b.n	800aa9c <prvInsertBlockIntoFreeList+0x14>
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d8f7      	bhi.n	800aa96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	4413      	add	r3, r2
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d108      	bne.n	800aaca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	441a      	add	r2, r3
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	441a      	add	r2, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d118      	bne.n	800ab10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	4b15      	ldr	r3, [pc, #84]	; (800ab38 <prvInsertBlockIntoFreeList+0xb0>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d00d      	beq.n	800ab06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	441a      	add	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	e008      	b.n	800ab18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab06:	4b0c      	ldr	r3, [pc, #48]	; (800ab38 <prvInsertBlockIntoFreeList+0xb0>)
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	601a      	str	r2, [r3, #0]
 800ab0e:	e003      	b.n	800ab18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d002      	beq.n	800ab26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab26:	bf00      	nop
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	200083f4 	.word	0x200083f4
 800ab38:	200083fc 	.word	0x200083fc

0800ab3c <__errno>:
 800ab3c:	4b01      	ldr	r3, [pc, #4]	; (800ab44 <__errno+0x8>)
 800ab3e:	6818      	ldr	r0, [r3, #0]
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	20000078 	.word	0x20000078

0800ab48 <std>:
 800ab48:	2300      	movs	r3, #0
 800ab4a:	b510      	push	{r4, lr}
 800ab4c:	4604      	mov	r4, r0
 800ab4e:	e9c0 3300 	strd	r3, r3, [r0]
 800ab52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab56:	6083      	str	r3, [r0, #8]
 800ab58:	8181      	strh	r1, [r0, #12]
 800ab5a:	6643      	str	r3, [r0, #100]	; 0x64
 800ab5c:	81c2      	strh	r2, [r0, #14]
 800ab5e:	6183      	str	r3, [r0, #24]
 800ab60:	4619      	mov	r1, r3
 800ab62:	2208      	movs	r2, #8
 800ab64:	305c      	adds	r0, #92	; 0x5c
 800ab66:	f000 f91a 	bl	800ad9e <memset>
 800ab6a:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <std+0x38>)
 800ab6c:	6263      	str	r3, [r4, #36]	; 0x24
 800ab6e:	4b05      	ldr	r3, [pc, #20]	; (800ab84 <std+0x3c>)
 800ab70:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab72:	4b05      	ldr	r3, [pc, #20]	; (800ab88 <std+0x40>)
 800ab74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab76:	4b05      	ldr	r3, [pc, #20]	; (800ab8c <std+0x44>)
 800ab78:	6224      	str	r4, [r4, #32]
 800ab7a:	6323      	str	r3, [r4, #48]	; 0x30
 800ab7c:	bd10      	pop	{r4, pc}
 800ab7e:	bf00      	nop
 800ab80:	0800bd75 	.word	0x0800bd75
 800ab84:	0800bd97 	.word	0x0800bd97
 800ab88:	0800bdcf 	.word	0x0800bdcf
 800ab8c:	0800bdf3 	.word	0x0800bdf3

0800ab90 <_cleanup_r>:
 800ab90:	4901      	ldr	r1, [pc, #4]	; (800ab98 <_cleanup_r+0x8>)
 800ab92:	f000 b8af 	b.w	800acf4 <_fwalk_reent>
 800ab96:	bf00      	nop
 800ab98:	0800db59 	.word	0x0800db59

0800ab9c <__sfmoreglue>:
 800ab9c:	b570      	push	{r4, r5, r6, lr}
 800ab9e:	2268      	movs	r2, #104	; 0x68
 800aba0:	1e4d      	subs	r5, r1, #1
 800aba2:	4355      	muls	r5, r2
 800aba4:	460e      	mov	r6, r1
 800aba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abaa:	f000 f921 	bl	800adf0 <_malloc_r>
 800abae:	4604      	mov	r4, r0
 800abb0:	b140      	cbz	r0, 800abc4 <__sfmoreglue+0x28>
 800abb2:	2100      	movs	r1, #0
 800abb4:	e9c0 1600 	strd	r1, r6, [r0]
 800abb8:	300c      	adds	r0, #12
 800abba:	60a0      	str	r0, [r4, #8]
 800abbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abc0:	f000 f8ed 	bl	800ad9e <memset>
 800abc4:	4620      	mov	r0, r4
 800abc6:	bd70      	pop	{r4, r5, r6, pc}

0800abc8 <__sfp_lock_acquire>:
 800abc8:	4801      	ldr	r0, [pc, #4]	; (800abd0 <__sfp_lock_acquire+0x8>)
 800abca:	f000 b8d8 	b.w	800ad7e <__retarget_lock_acquire_recursive>
 800abce:	bf00      	nop
 800abd0:	20008415 	.word	0x20008415

0800abd4 <__sfp_lock_release>:
 800abd4:	4801      	ldr	r0, [pc, #4]	; (800abdc <__sfp_lock_release+0x8>)
 800abd6:	f000 b8d3 	b.w	800ad80 <__retarget_lock_release_recursive>
 800abda:	bf00      	nop
 800abdc:	20008415 	.word	0x20008415

0800abe0 <__sinit_lock_acquire>:
 800abe0:	4801      	ldr	r0, [pc, #4]	; (800abe8 <__sinit_lock_acquire+0x8>)
 800abe2:	f000 b8cc 	b.w	800ad7e <__retarget_lock_acquire_recursive>
 800abe6:	bf00      	nop
 800abe8:	20008416 	.word	0x20008416

0800abec <__sinit_lock_release>:
 800abec:	4801      	ldr	r0, [pc, #4]	; (800abf4 <__sinit_lock_release+0x8>)
 800abee:	f000 b8c7 	b.w	800ad80 <__retarget_lock_release_recursive>
 800abf2:	bf00      	nop
 800abf4:	20008416 	.word	0x20008416

0800abf8 <__sinit>:
 800abf8:	b510      	push	{r4, lr}
 800abfa:	4604      	mov	r4, r0
 800abfc:	f7ff fff0 	bl	800abe0 <__sinit_lock_acquire>
 800ac00:	69a3      	ldr	r3, [r4, #24]
 800ac02:	b11b      	cbz	r3, 800ac0c <__sinit+0x14>
 800ac04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac08:	f7ff bff0 	b.w	800abec <__sinit_lock_release>
 800ac0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac10:	6523      	str	r3, [r4, #80]	; 0x50
 800ac12:	4b13      	ldr	r3, [pc, #76]	; (800ac60 <__sinit+0x68>)
 800ac14:	4a13      	ldr	r2, [pc, #76]	; (800ac64 <__sinit+0x6c>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac1a:	42a3      	cmp	r3, r4
 800ac1c:	bf04      	itt	eq
 800ac1e:	2301      	moveq	r3, #1
 800ac20:	61a3      	streq	r3, [r4, #24]
 800ac22:	4620      	mov	r0, r4
 800ac24:	f000 f820 	bl	800ac68 <__sfp>
 800ac28:	6060      	str	r0, [r4, #4]
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f000 f81c 	bl	800ac68 <__sfp>
 800ac30:	60a0      	str	r0, [r4, #8]
 800ac32:	4620      	mov	r0, r4
 800ac34:	f000 f818 	bl	800ac68 <__sfp>
 800ac38:	2200      	movs	r2, #0
 800ac3a:	60e0      	str	r0, [r4, #12]
 800ac3c:	2104      	movs	r1, #4
 800ac3e:	6860      	ldr	r0, [r4, #4]
 800ac40:	f7ff ff82 	bl	800ab48 <std>
 800ac44:	68a0      	ldr	r0, [r4, #8]
 800ac46:	2201      	movs	r2, #1
 800ac48:	2109      	movs	r1, #9
 800ac4a:	f7ff ff7d 	bl	800ab48 <std>
 800ac4e:	68e0      	ldr	r0, [r4, #12]
 800ac50:	2202      	movs	r2, #2
 800ac52:	2112      	movs	r1, #18
 800ac54:	f7ff ff78 	bl	800ab48 <std>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	61a3      	str	r3, [r4, #24]
 800ac5c:	e7d2      	b.n	800ac04 <__sinit+0xc>
 800ac5e:	bf00      	nop
 800ac60:	0800f774 	.word	0x0800f774
 800ac64:	0800ab91 	.word	0x0800ab91

0800ac68 <__sfp>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	4607      	mov	r7, r0
 800ac6c:	f7ff ffac 	bl	800abc8 <__sfp_lock_acquire>
 800ac70:	4b1e      	ldr	r3, [pc, #120]	; (800acec <__sfp+0x84>)
 800ac72:	681e      	ldr	r6, [r3, #0]
 800ac74:	69b3      	ldr	r3, [r6, #24]
 800ac76:	b913      	cbnz	r3, 800ac7e <__sfp+0x16>
 800ac78:	4630      	mov	r0, r6
 800ac7a:	f7ff ffbd 	bl	800abf8 <__sinit>
 800ac7e:	3648      	adds	r6, #72	; 0x48
 800ac80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac84:	3b01      	subs	r3, #1
 800ac86:	d503      	bpl.n	800ac90 <__sfp+0x28>
 800ac88:	6833      	ldr	r3, [r6, #0]
 800ac8a:	b30b      	cbz	r3, 800acd0 <__sfp+0x68>
 800ac8c:	6836      	ldr	r6, [r6, #0]
 800ac8e:	e7f7      	b.n	800ac80 <__sfp+0x18>
 800ac90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac94:	b9d5      	cbnz	r5, 800accc <__sfp+0x64>
 800ac96:	4b16      	ldr	r3, [pc, #88]	; (800acf0 <__sfp+0x88>)
 800ac98:	60e3      	str	r3, [r4, #12]
 800ac9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac9e:	6665      	str	r5, [r4, #100]	; 0x64
 800aca0:	f000 f86c 	bl	800ad7c <__retarget_lock_init_recursive>
 800aca4:	f7ff ff96 	bl	800abd4 <__sfp_lock_release>
 800aca8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800acac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800acb0:	6025      	str	r5, [r4, #0]
 800acb2:	61a5      	str	r5, [r4, #24]
 800acb4:	2208      	movs	r2, #8
 800acb6:	4629      	mov	r1, r5
 800acb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800acbc:	f000 f86f 	bl	800ad9e <memset>
 800acc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acc8:	4620      	mov	r0, r4
 800acca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800accc:	3468      	adds	r4, #104	; 0x68
 800acce:	e7d9      	b.n	800ac84 <__sfp+0x1c>
 800acd0:	2104      	movs	r1, #4
 800acd2:	4638      	mov	r0, r7
 800acd4:	f7ff ff62 	bl	800ab9c <__sfmoreglue>
 800acd8:	4604      	mov	r4, r0
 800acda:	6030      	str	r0, [r6, #0]
 800acdc:	2800      	cmp	r0, #0
 800acde:	d1d5      	bne.n	800ac8c <__sfp+0x24>
 800ace0:	f7ff ff78 	bl	800abd4 <__sfp_lock_release>
 800ace4:	230c      	movs	r3, #12
 800ace6:	603b      	str	r3, [r7, #0]
 800ace8:	e7ee      	b.n	800acc8 <__sfp+0x60>
 800acea:	bf00      	nop
 800acec:	0800f774 	.word	0x0800f774
 800acf0:	ffff0001 	.word	0xffff0001

0800acf4 <_fwalk_reent>:
 800acf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acf8:	4606      	mov	r6, r0
 800acfa:	4688      	mov	r8, r1
 800acfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad00:	2700      	movs	r7, #0
 800ad02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad06:	f1b9 0901 	subs.w	r9, r9, #1
 800ad0a:	d505      	bpl.n	800ad18 <_fwalk_reent+0x24>
 800ad0c:	6824      	ldr	r4, [r4, #0]
 800ad0e:	2c00      	cmp	r4, #0
 800ad10:	d1f7      	bne.n	800ad02 <_fwalk_reent+0xe>
 800ad12:	4638      	mov	r0, r7
 800ad14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad18:	89ab      	ldrh	r3, [r5, #12]
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d907      	bls.n	800ad2e <_fwalk_reent+0x3a>
 800ad1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad22:	3301      	adds	r3, #1
 800ad24:	d003      	beq.n	800ad2e <_fwalk_reent+0x3a>
 800ad26:	4629      	mov	r1, r5
 800ad28:	4630      	mov	r0, r6
 800ad2a:	47c0      	blx	r8
 800ad2c:	4307      	orrs	r7, r0
 800ad2e:	3568      	adds	r5, #104	; 0x68
 800ad30:	e7e9      	b.n	800ad06 <_fwalk_reent+0x12>
	...

0800ad34 <__libc_init_array>:
 800ad34:	b570      	push	{r4, r5, r6, lr}
 800ad36:	4d0d      	ldr	r5, [pc, #52]	; (800ad6c <__libc_init_array+0x38>)
 800ad38:	4c0d      	ldr	r4, [pc, #52]	; (800ad70 <__libc_init_array+0x3c>)
 800ad3a:	1b64      	subs	r4, r4, r5
 800ad3c:	10a4      	asrs	r4, r4, #2
 800ad3e:	2600      	movs	r6, #0
 800ad40:	42a6      	cmp	r6, r4
 800ad42:	d109      	bne.n	800ad58 <__libc_init_array+0x24>
 800ad44:	4d0b      	ldr	r5, [pc, #44]	; (800ad74 <__libc_init_array+0x40>)
 800ad46:	4c0c      	ldr	r4, [pc, #48]	; (800ad78 <__libc_init_array+0x44>)
 800ad48:	f004 fc3a 	bl	800f5c0 <_init>
 800ad4c:	1b64      	subs	r4, r4, r5
 800ad4e:	10a4      	asrs	r4, r4, #2
 800ad50:	2600      	movs	r6, #0
 800ad52:	42a6      	cmp	r6, r4
 800ad54:	d105      	bne.n	800ad62 <__libc_init_array+0x2e>
 800ad56:	bd70      	pop	{r4, r5, r6, pc}
 800ad58:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad5c:	4798      	blx	r3
 800ad5e:	3601      	adds	r6, #1
 800ad60:	e7ee      	b.n	800ad40 <__libc_init_array+0xc>
 800ad62:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad66:	4798      	blx	r3
 800ad68:	3601      	adds	r6, #1
 800ad6a:	e7f2      	b.n	800ad52 <__libc_init_array+0x1e>
 800ad6c:	0800fbc8 	.word	0x0800fbc8
 800ad70:	0800fbc8 	.word	0x0800fbc8
 800ad74:	0800fbc8 	.word	0x0800fbc8
 800ad78:	0800fbcc 	.word	0x0800fbcc

0800ad7c <__retarget_lock_init_recursive>:
 800ad7c:	4770      	bx	lr

0800ad7e <__retarget_lock_acquire_recursive>:
 800ad7e:	4770      	bx	lr

0800ad80 <__retarget_lock_release_recursive>:
 800ad80:	4770      	bx	lr

0800ad82 <memcpy>:
 800ad82:	440a      	add	r2, r1
 800ad84:	4291      	cmp	r1, r2
 800ad86:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad8a:	d100      	bne.n	800ad8e <memcpy+0xc>
 800ad8c:	4770      	bx	lr
 800ad8e:	b510      	push	{r4, lr}
 800ad90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad98:	4291      	cmp	r1, r2
 800ad9a:	d1f9      	bne.n	800ad90 <memcpy+0xe>
 800ad9c:	bd10      	pop	{r4, pc}

0800ad9e <memset>:
 800ad9e:	4402      	add	r2, r0
 800ada0:	4603      	mov	r3, r0
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d100      	bne.n	800ada8 <memset+0xa>
 800ada6:	4770      	bx	lr
 800ada8:	f803 1b01 	strb.w	r1, [r3], #1
 800adac:	e7f9      	b.n	800ada2 <memset+0x4>
	...

0800adb0 <sbrk_aligned>:
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	4e0e      	ldr	r6, [pc, #56]	; (800adec <sbrk_aligned+0x3c>)
 800adb4:	460c      	mov	r4, r1
 800adb6:	6831      	ldr	r1, [r6, #0]
 800adb8:	4605      	mov	r5, r0
 800adba:	b911      	cbnz	r1, 800adc2 <sbrk_aligned+0x12>
 800adbc:	f000 ff70 	bl	800bca0 <_sbrk_r>
 800adc0:	6030      	str	r0, [r6, #0]
 800adc2:	4621      	mov	r1, r4
 800adc4:	4628      	mov	r0, r5
 800adc6:	f000 ff6b 	bl	800bca0 <_sbrk_r>
 800adca:	1c43      	adds	r3, r0, #1
 800adcc:	d00a      	beq.n	800ade4 <sbrk_aligned+0x34>
 800adce:	1cc4      	adds	r4, r0, #3
 800add0:	f024 0403 	bic.w	r4, r4, #3
 800add4:	42a0      	cmp	r0, r4
 800add6:	d007      	beq.n	800ade8 <sbrk_aligned+0x38>
 800add8:	1a21      	subs	r1, r4, r0
 800adda:	4628      	mov	r0, r5
 800addc:	f000 ff60 	bl	800bca0 <_sbrk_r>
 800ade0:	3001      	adds	r0, #1
 800ade2:	d101      	bne.n	800ade8 <sbrk_aligned+0x38>
 800ade4:	f04f 34ff 	mov.w	r4, #4294967295
 800ade8:	4620      	mov	r0, r4
 800adea:	bd70      	pop	{r4, r5, r6, pc}
 800adec:	2000841c 	.word	0x2000841c

0800adf0 <_malloc_r>:
 800adf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf4:	1ccd      	adds	r5, r1, #3
 800adf6:	f025 0503 	bic.w	r5, r5, #3
 800adfa:	3508      	adds	r5, #8
 800adfc:	2d0c      	cmp	r5, #12
 800adfe:	bf38      	it	cc
 800ae00:	250c      	movcc	r5, #12
 800ae02:	2d00      	cmp	r5, #0
 800ae04:	4607      	mov	r7, r0
 800ae06:	db01      	blt.n	800ae0c <_malloc_r+0x1c>
 800ae08:	42a9      	cmp	r1, r5
 800ae0a:	d905      	bls.n	800ae18 <_malloc_r+0x28>
 800ae0c:	230c      	movs	r3, #12
 800ae0e:	603b      	str	r3, [r7, #0]
 800ae10:	2600      	movs	r6, #0
 800ae12:	4630      	mov	r0, r6
 800ae14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae18:	4e2e      	ldr	r6, [pc, #184]	; (800aed4 <_malloc_r+0xe4>)
 800ae1a:	f003 faf1 	bl	800e400 <__malloc_lock>
 800ae1e:	6833      	ldr	r3, [r6, #0]
 800ae20:	461c      	mov	r4, r3
 800ae22:	bb34      	cbnz	r4, 800ae72 <_malloc_r+0x82>
 800ae24:	4629      	mov	r1, r5
 800ae26:	4638      	mov	r0, r7
 800ae28:	f7ff ffc2 	bl	800adb0 <sbrk_aligned>
 800ae2c:	1c43      	adds	r3, r0, #1
 800ae2e:	4604      	mov	r4, r0
 800ae30:	d14d      	bne.n	800aece <_malloc_r+0xde>
 800ae32:	6834      	ldr	r4, [r6, #0]
 800ae34:	4626      	mov	r6, r4
 800ae36:	2e00      	cmp	r6, #0
 800ae38:	d140      	bne.n	800aebc <_malloc_r+0xcc>
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4638      	mov	r0, r7
 800ae40:	eb04 0803 	add.w	r8, r4, r3
 800ae44:	f000 ff2c 	bl	800bca0 <_sbrk_r>
 800ae48:	4580      	cmp	r8, r0
 800ae4a:	d13a      	bne.n	800aec2 <_malloc_r+0xd2>
 800ae4c:	6821      	ldr	r1, [r4, #0]
 800ae4e:	3503      	adds	r5, #3
 800ae50:	1a6d      	subs	r5, r5, r1
 800ae52:	f025 0503 	bic.w	r5, r5, #3
 800ae56:	3508      	adds	r5, #8
 800ae58:	2d0c      	cmp	r5, #12
 800ae5a:	bf38      	it	cc
 800ae5c:	250c      	movcc	r5, #12
 800ae5e:	4629      	mov	r1, r5
 800ae60:	4638      	mov	r0, r7
 800ae62:	f7ff ffa5 	bl	800adb0 <sbrk_aligned>
 800ae66:	3001      	adds	r0, #1
 800ae68:	d02b      	beq.n	800aec2 <_malloc_r+0xd2>
 800ae6a:	6823      	ldr	r3, [r4, #0]
 800ae6c:	442b      	add	r3, r5
 800ae6e:	6023      	str	r3, [r4, #0]
 800ae70:	e00e      	b.n	800ae90 <_malloc_r+0xa0>
 800ae72:	6822      	ldr	r2, [r4, #0]
 800ae74:	1b52      	subs	r2, r2, r5
 800ae76:	d41e      	bmi.n	800aeb6 <_malloc_r+0xc6>
 800ae78:	2a0b      	cmp	r2, #11
 800ae7a:	d916      	bls.n	800aeaa <_malloc_r+0xba>
 800ae7c:	1961      	adds	r1, r4, r5
 800ae7e:	42a3      	cmp	r3, r4
 800ae80:	6025      	str	r5, [r4, #0]
 800ae82:	bf18      	it	ne
 800ae84:	6059      	strne	r1, [r3, #4]
 800ae86:	6863      	ldr	r3, [r4, #4]
 800ae88:	bf08      	it	eq
 800ae8a:	6031      	streq	r1, [r6, #0]
 800ae8c:	5162      	str	r2, [r4, r5]
 800ae8e:	604b      	str	r3, [r1, #4]
 800ae90:	4638      	mov	r0, r7
 800ae92:	f104 060b 	add.w	r6, r4, #11
 800ae96:	f003 fab9 	bl	800e40c <__malloc_unlock>
 800ae9a:	f026 0607 	bic.w	r6, r6, #7
 800ae9e:	1d23      	adds	r3, r4, #4
 800aea0:	1af2      	subs	r2, r6, r3
 800aea2:	d0b6      	beq.n	800ae12 <_malloc_r+0x22>
 800aea4:	1b9b      	subs	r3, r3, r6
 800aea6:	50a3      	str	r3, [r4, r2]
 800aea8:	e7b3      	b.n	800ae12 <_malloc_r+0x22>
 800aeaa:	6862      	ldr	r2, [r4, #4]
 800aeac:	42a3      	cmp	r3, r4
 800aeae:	bf0c      	ite	eq
 800aeb0:	6032      	streq	r2, [r6, #0]
 800aeb2:	605a      	strne	r2, [r3, #4]
 800aeb4:	e7ec      	b.n	800ae90 <_malloc_r+0xa0>
 800aeb6:	4623      	mov	r3, r4
 800aeb8:	6864      	ldr	r4, [r4, #4]
 800aeba:	e7b2      	b.n	800ae22 <_malloc_r+0x32>
 800aebc:	4634      	mov	r4, r6
 800aebe:	6876      	ldr	r6, [r6, #4]
 800aec0:	e7b9      	b.n	800ae36 <_malloc_r+0x46>
 800aec2:	230c      	movs	r3, #12
 800aec4:	603b      	str	r3, [r7, #0]
 800aec6:	4638      	mov	r0, r7
 800aec8:	f003 faa0 	bl	800e40c <__malloc_unlock>
 800aecc:	e7a1      	b.n	800ae12 <_malloc_r+0x22>
 800aece:	6025      	str	r5, [r4, #0]
 800aed0:	e7de      	b.n	800ae90 <_malloc_r+0xa0>
 800aed2:	bf00      	nop
 800aed4:	20008418 	.word	0x20008418

0800aed8 <__cvt>:
 800aed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aedc:	ec55 4b10 	vmov	r4, r5, d0
 800aee0:	2d00      	cmp	r5, #0
 800aee2:	460e      	mov	r6, r1
 800aee4:	4619      	mov	r1, r3
 800aee6:	462b      	mov	r3, r5
 800aee8:	bfbb      	ittet	lt
 800aeea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aeee:	461d      	movlt	r5, r3
 800aef0:	2300      	movge	r3, #0
 800aef2:	232d      	movlt	r3, #45	; 0x2d
 800aef4:	700b      	strb	r3, [r1, #0]
 800aef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aef8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aefc:	4691      	mov	r9, r2
 800aefe:	f023 0820 	bic.w	r8, r3, #32
 800af02:	bfbc      	itt	lt
 800af04:	4622      	movlt	r2, r4
 800af06:	4614      	movlt	r4, r2
 800af08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af0c:	d005      	beq.n	800af1a <__cvt+0x42>
 800af0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af12:	d100      	bne.n	800af16 <__cvt+0x3e>
 800af14:	3601      	adds	r6, #1
 800af16:	2102      	movs	r1, #2
 800af18:	e000      	b.n	800af1c <__cvt+0x44>
 800af1a:	2103      	movs	r1, #3
 800af1c:	ab03      	add	r3, sp, #12
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	ab02      	add	r3, sp, #8
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	ec45 4b10 	vmov	d0, r4, r5
 800af28:	4653      	mov	r3, sl
 800af2a:	4632      	mov	r2, r6
 800af2c:	f001 ffa0 	bl	800ce70 <_dtoa_r>
 800af30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af34:	4607      	mov	r7, r0
 800af36:	d102      	bne.n	800af3e <__cvt+0x66>
 800af38:	f019 0f01 	tst.w	r9, #1
 800af3c:	d022      	beq.n	800af84 <__cvt+0xac>
 800af3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af42:	eb07 0906 	add.w	r9, r7, r6
 800af46:	d110      	bne.n	800af6a <__cvt+0x92>
 800af48:	783b      	ldrb	r3, [r7, #0]
 800af4a:	2b30      	cmp	r3, #48	; 0x30
 800af4c:	d10a      	bne.n	800af64 <__cvt+0x8c>
 800af4e:	2200      	movs	r2, #0
 800af50:	2300      	movs	r3, #0
 800af52:	4620      	mov	r0, r4
 800af54:	4629      	mov	r1, r5
 800af56:	f7f5 fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800af5a:	b918      	cbnz	r0, 800af64 <__cvt+0x8c>
 800af5c:	f1c6 0601 	rsb	r6, r6, #1
 800af60:	f8ca 6000 	str.w	r6, [sl]
 800af64:	f8da 3000 	ldr.w	r3, [sl]
 800af68:	4499      	add	r9, r3
 800af6a:	2200      	movs	r2, #0
 800af6c:	2300      	movs	r3, #0
 800af6e:	4620      	mov	r0, r4
 800af70:	4629      	mov	r1, r5
 800af72:	f7f5 fda9 	bl	8000ac8 <__aeabi_dcmpeq>
 800af76:	b108      	cbz	r0, 800af7c <__cvt+0xa4>
 800af78:	f8cd 900c 	str.w	r9, [sp, #12]
 800af7c:	2230      	movs	r2, #48	; 0x30
 800af7e:	9b03      	ldr	r3, [sp, #12]
 800af80:	454b      	cmp	r3, r9
 800af82:	d307      	bcc.n	800af94 <__cvt+0xbc>
 800af84:	9b03      	ldr	r3, [sp, #12]
 800af86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af88:	1bdb      	subs	r3, r3, r7
 800af8a:	4638      	mov	r0, r7
 800af8c:	6013      	str	r3, [r2, #0]
 800af8e:	b004      	add	sp, #16
 800af90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af94:	1c59      	adds	r1, r3, #1
 800af96:	9103      	str	r1, [sp, #12]
 800af98:	701a      	strb	r2, [r3, #0]
 800af9a:	e7f0      	b.n	800af7e <__cvt+0xa6>

0800af9c <__exponent>:
 800af9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af9e:	4603      	mov	r3, r0
 800afa0:	2900      	cmp	r1, #0
 800afa2:	bfb8      	it	lt
 800afa4:	4249      	neglt	r1, r1
 800afa6:	f803 2b02 	strb.w	r2, [r3], #2
 800afaa:	bfb4      	ite	lt
 800afac:	222d      	movlt	r2, #45	; 0x2d
 800afae:	222b      	movge	r2, #43	; 0x2b
 800afb0:	2909      	cmp	r1, #9
 800afb2:	7042      	strb	r2, [r0, #1]
 800afb4:	dd2a      	ble.n	800b00c <__exponent+0x70>
 800afb6:	f10d 0407 	add.w	r4, sp, #7
 800afba:	46a4      	mov	ip, r4
 800afbc:	270a      	movs	r7, #10
 800afbe:	46a6      	mov	lr, r4
 800afc0:	460a      	mov	r2, r1
 800afc2:	fb91 f6f7 	sdiv	r6, r1, r7
 800afc6:	fb07 1516 	mls	r5, r7, r6, r1
 800afca:	3530      	adds	r5, #48	; 0x30
 800afcc:	2a63      	cmp	r2, #99	; 0x63
 800afce:	f104 34ff 	add.w	r4, r4, #4294967295
 800afd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800afd6:	4631      	mov	r1, r6
 800afd8:	dcf1      	bgt.n	800afbe <__exponent+0x22>
 800afda:	3130      	adds	r1, #48	; 0x30
 800afdc:	f1ae 0502 	sub.w	r5, lr, #2
 800afe0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800afe4:	1c44      	adds	r4, r0, #1
 800afe6:	4629      	mov	r1, r5
 800afe8:	4561      	cmp	r1, ip
 800afea:	d30a      	bcc.n	800b002 <__exponent+0x66>
 800afec:	f10d 0209 	add.w	r2, sp, #9
 800aff0:	eba2 020e 	sub.w	r2, r2, lr
 800aff4:	4565      	cmp	r5, ip
 800aff6:	bf88      	it	hi
 800aff8:	2200      	movhi	r2, #0
 800affa:	4413      	add	r3, r2
 800affc:	1a18      	subs	r0, r3, r0
 800affe:	b003      	add	sp, #12
 800b000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b002:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b006:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b00a:	e7ed      	b.n	800afe8 <__exponent+0x4c>
 800b00c:	2330      	movs	r3, #48	; 0x30
 800b00e:	3130      	adds	r1, #48	; 0x30
 800b010:	7083      	strb	r3, [r0, #2]
 800b012:	70c1      	strb	r1, [r0, #3]
 800b014:	1d03      	adds	r3, r0, #4
 800b016:	e7f1      	b.n	800affc <__exponent+0x60>

0800b018 <_printf_float>:
 800b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01c:	ed2d 8b02 	vpush	{d8}
 800b020:	b08d      	sub	sp, #52	; 0x34
 800b022:	460c      	mov	r4, r1
 800b024:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b028:	4616      	mov	r6, r2
 800b02a:	461f      	mov	r7, r3
 800b02c:	4605      	mov	r5, r0
 800b02e:	f003 f951 	bl	800e2d4 <_localeconv_r>
 800b032:	f8d0 a000 	ldr.w	sl, [r0]
 800b036:	4650      	mov	r0, sl
 800b038:	f7f5 f8ca 	bl	80001d0 <strlen>
 800b03c:	2300      	movs	r3, #0
 800b03e:	930a      	str	r3, [sp, #40]	; 0x28
 800b040:	6823      	ldr	r3, [r4, #0]
 800b042:	9305      	str	r3, [sp, #20]
 800b044:	f8d8 3000 	ldr.w	r3, [r8]
 800b048:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b04c:	3307      	adds	r3, #7
 800b04e:	f023 0307 	bic.w	r3, r3, #7
 800b052:	f103 0208 	add.w	r2, r3, #8
 800b056:	f8c8 2000 	str.w	r2, [r8]
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b062:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b066:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b06a:	9307      	str	r3, [sp, #28]
 800b06c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b070:	ee08 0a10 	vmov	s16, r0
 800b074:	4b9f      	ldr	r3, [pc, #636]	; (800b2f4 <_printf_float+0x2dc>)
 800b076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b07a:	f04f 32ff 	mov.w	r2, #4294967295
 800b07e:	f7f5 fd55 	bl	8000b2c <__aeabi_dcmpun>
 800b082:	bb88      	cbnz	r0, 800b0e8 <_printf_float+0xd0>
 800b084:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b088:	4b9a      	ldr	r3, [pc, #616]	; (800b2f4 <_printf_float+0x2dc>)
 800b08a:	f04f 32ff 	mov.w	r2, #4294967295
 800b08e:	f7f5 fd2f 	bl	8000af0 <__aeabi_dcmple>
 800b092:	bb48      	cbnz	r0, 800b0e8 <_printf_float+0xd0>
 800b094:	2200      	movs	r2, #0
 800b096:	2300      	movs	r3, #0
 800b098:	4640      	mov	r0, r8
 800b09a:	4649      	mov	r1, r9
 800b09c:	f7f5 fd1e 	bl	8000adc <__aeabi_dcmplt>
 800b0a0:	b110      	cbz	r0, 800b0a8 <_printf_float+0x90>
 800b0a2:	232d      	movs	r3, #45	; 0x2d
 800b0a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0a8:	4b93      	ldr	r3, [pc, #588]	; (800b2f8 <_printf_float+0x2e0>)
 800b0aa:	4894      	ldr	r0, [pc, #592]	; (800b2fc <_printf_float+0x2e4>)
 800b0ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b0b0:	bf94      	ite	ls
 800b0b2:	4698      	movls	r8, r3
 800b0b4:	4680      	movhi	r8, r0
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	6123      	str	r3, [r4, #16]
 800b0ba:	9b05      	ldr	r3, [sp, #20]
 800b0bc:	f023 0204 	bic.w	r2, r3, #4
 800b0c0:	6022      	str	r2, [r4, #0]
 800b0c2:	f04f 0900 	mov.w	r9, #0
 800b0c6:	9700      	str	r7, [sp, #0]
 800b0c8:	4633      	mov	r3, r6
 800b0ca:	aa0b      	add	r2, sp, #44	; 0x2c
 800b0cc:	4621      	mov	r1, r4
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	f000 f9d8 	bl	800b484 <_printf_common>
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	f040 8090 	bne.w	800b1fa <_printf_float+0x1e2>
 800b0da:	f04f 30ff 	mov.w	r0, #4294967295
 800b0de:	b00d      	add	sp, #52	; 0x34
 800b0e0:	ecbd 8b02 	vpop	{d8}
 800b0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e8:	4642      	mov	r2, r8
 800b0ea:	464b      	mov	r3, r9
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	f7f5 fd1c 	bl	8000b2c <__aeabi_dcmpun>
 800b0f4:	b140      	cbz	r0, 800b108 <_printf_float+0xf0>
 800b0f6:	464b      	mov	r3, r9
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	bfbc      	itt	lt
 800b0fc:	232d      	movlt	r3, #45	; 0x2d
 800b0fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b102:	487f      	ldr	r0, [pc, #508]	; (800b300 <_printf_float+0x2e8>)
 800b104:	4b7f      	ldr	r3, [pc, #508]	; (800b304 <_printf_float+0x2ec>)
 800b106:	e7d1      	b.n	800b0ac <_printf_float+0x94>
 800b108:	6863      	ldr	r3, [r4, #4]
 800b10a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b10e:	9206      	str	r2, [sp, #24]
 800b110:	1c5a      	adds	r2, r3, #1
 800b112:	d13f      	bne.n	800b194 <_printf_float+0x17c>
 800b114:	2306      	movs	r3, #6
 800b116:	6063      	str	r3, [r4, #4]
 800b118:	9b05      	ldr	r3, [sp, #20]
 800b11a:	6861      	ldr	r1, [r4, #4]
 800b11c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b120:	2300      	movs	r3, #0
 800b122:	9303      	str	r3, [sp, #12]
 800b124:	ab0a      	add	r3, sp, #40	; 0x28
 800b126:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b12a:	ab09      	add	r3, sp, #36	; 0x24
 800b12c:	ec49 8b10 	vmov	d0, r8, r9
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	6022      	str	r2, [r4, #0]
 800b134:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b138:	4628      	mov	r0, r5
 800b13a:	f7ff fecd 	bl	800aed8 <__cvt>
 800b13e:	9b06      	ldr	r3, [sp, #24]
 800b140:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b142:	2b47      	cmp	r3, #71	; 0x47
 800b144:	4680      	mov	r8, r0
 800b146:	d108      	bne.n	800b15a <_printf_float+0x142>
 800b148:	1cc8      	adds	r0, r1, #3
 800b14a:	db02      	blt.n	800b152 <_printf_float+0x13a>
 800b14c:	6863      	ldr	r3, [r4, #4]
 800b14e:	4299      	cmp	r1, r3
 800b150:	dd41      	ble.n	800b1d6 <_printf_float+0x1be>
 800b152:	f1ab 0b02 	sub.w	fp, fp, #2
 800b156:	fa5f fb8b 	uxtb.w	fp, fp
 800b15a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b15e:	d820      	bhi.n	800b1a2 <_printf_float+0x18a>
 800b160:	3901      	subs	r1, #1
 800b162:	465a      	mov	r2, fp
 800b164:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b168:	9109      	str	r1, [sp, #36]	; 0x24
 800b16a:	f7ff ff17 	bl	800af9c <__exponent>
 800b16e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b170:	1813      	adds	r3, r2, r0
 800b172:	2a01      	cmp	r2, #1
 800b174:	4681      	mov	r9, r0
 800b176:	6123      	str	r3, [r4, #16]
 800b178:	dc02      	bgt.n	800b180 <_printf_float+0x168>
 800b17a:	6822      	ldr	r2, [r4, #0]
 800b17c:	07d2      	lsls	r2, r2, #31
 800b17e:	d501      	bpl.n	800b184 <_printf_float+0x16c>
 800b180:	3301      	adds	r3, #1
 800b182:	6123      	str	r3, [r4, #16]
 800b184:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d09c      	beq.n	800b0c6 <_printf_float+0xae>
 800b18c:	232d      	movs	r3, #45	; 0x2d
 800b18e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b192:	e798      	b.n	800b0c6 <_printf_float+0xae>
 800b194:	9a06      	ldr	r2, [sp, #24]
 800b196:	2a47      	cmp	r2, #71	; 0x47
 800b198:	d1be      	bne.n	800b118 <_printf_float+0x100>
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1bc      	bne.n	800b118 <_printf_float+0x100>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e7b9      	b.n	800b116 <_printf_float+0xfe>
 800b1a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b1a6:	d118      	bne.n	800b1da <_printf_float+0x1c2>
 800b1a8:	2900      	cmp	r1, #0
 800b1aa:	6863      	ldr	r3, [r4, #4]
 800b1ac:	dd0b      	ble.n	800b1c6 <_printf_float+0x1ae>
 800b1ae:	6121      	str	r1, [r4, #16]
 800b1b0:	b913      	cbnz	r3, 800b1b8 <_printf_float+0x1a0>
 800b1b2:	6822      	ldr	r2, [r4, #0]
 800b1b4:	07d0      	lsls	r0, r2, #31
 800b1b6:	d502      	bpl.n	800b1be <_printf_float+0x1a6>
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	440b      	add	r3, r1
 800b1bc:	6123      	str	r3, [r4, #16]
 800b1be:	65a1      	str	r1, [r4, #88]	; 0x58
 800b1c0:	f04f 0900 	mov.w	r9, #0
 800b1c4:	e7de      	b.n	800b184 <_printf_float+0x16c>
 800b1c6:	b913      	cbnz	r3, 800b1ce <_printf_float+0x1b6>
 800b1c8:	6822      	ldr	r2, [r4, #0]
 800b1ca:	07d2      	lsls	r2, r2, #31
 800b1cc:	d501      	bpl.n	800b1d2 <_printf_float+0x1ba>
 800b1ce:	3302      	adds	r3, #2
 800b1d0:	e7f4      	b.n	800b1bc <_printf_float+0x1a4>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e7f2      	b.n	800b1bc <_printf_float+0x1a4>
 800b1d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b1da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1dc:	4299      	cmp	r1, r3
 800b1de:	db05      	blt.n	800b1ec <_printf_float+0x1d4>
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	6121      	str	r1, [r4, #16]
 800b1e4:	07d8      	lsls	r0, r3, #31
 800b1e6:	d5ea      	bpl.n	800b1be <_printf_float+0x1a6>
 800b1e8:	1c4b      	adds	r3, r1, #1
 800b1ea:	e7e7      	b.n	800b1bc <_printf_float+0x1a4>
 800b1ec:	2900      	cmp	r1, #0
 800b1ee:	bfd4      	ite	le
 800b1f0:	f1c1 0202 	rsble	r2, r1, #2
 800b1f4:	2201      	movgt	r2, #1
 800b1f6:	4413      	add	r3, r2
 800b1f8:	e7e0      	b.n	800b1bc <_printf_float+0x1a4>
 800b1fa:	6823      	ldr	r3, [r4, #0]
 800b1fc:	055a      	lsls	r2, r3, #21
 800b1fe:	d407      	bmi.n	800b210 <_printf_float+0x1f8>
 800b200:	6923      	ldr	r3, [r4, #16]
 800b202:	4642      	mov	r2, r8
 800b204:	4631      	mov	r1, r6
 800b206:	4628      	mov	r0, r5
 800b208:	47b8      	blx	r7
 800b20a:	3001      	adds	r0, #1
 800b20c:	d12c      	bne.n	800b268 <_printf_float+0x250>
 800b20e:	e764      	b.n	800b0da <_printf_float+0xc2>
 800b210:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b214:	f240 80e0 	bls.w	800b3d8 <_printf_float+0x3c0>
 800b218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b21c:	2200      	movs	r2, #0
 800b21e:	2300      	movs	r3, #0
 800b220:	f7f5 fc52 	bl	8000ac8 <__aeabi_dcmpeq>
 800b224:	2800      	cmp	r0, #0
 800b226:	d034      	beq.n	800b292 <_printf_float+0x27a>
 800b228:	4a37      	ldr	r2, [pc, #220]	; (800b308 <_printf_float+0x2f0>)
 800b22a:	2301      	movs	r3, #1
 800b22c:	4631      	mov	r1, r6
 800b22e:	4628      	mov	r0, r5
 800b230:	47b8      	blx	r7
 800b232:	3001      	adds	r0, #1
 800b234:	f43f af51 	beq.w	800b0da <_printf_float+0xc2>
 800b238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b23c:	429a      	cmp	r2, r3
 800b23e:	db02      	blt.n	800b246 <_printf_float+0x22e>
 800b240:	6823      	ldr	r3, [r4, #0]
 800b242:	07d8      	lsls	r0, r3, #31
 800b244:	d510      	bpl.n	800b268 <_printf_float+0x250>
 800b246:	ee18 3a10 	vmov	r3, s16
 800b24a:	4652      	mov	r2, sl
 800b24c:	4631      	mov	r1, r6
 800b24e:	4628      	mov	r0, r5
 800b250:	47b8      	blx	r7
 800b252:	3001      	adds	r0, #1
 800b254:	f43f af41 	beq.w	800b0da <_printf_float+0xc2>
 800b258:	f04f 0800 	mov.w	r8, #0
 800b25c:	f104 091a 	add.w	r9, r4, #26
 800b260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b262:	3b01      	subs	r3, #1
 800b264:	4543      	cmp	r3, r8
 800b266:	dc09      	bgt.n	800b27c <_printf_float+0x264>
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	079b      	lsls	r3, r3, #30
 800b26c:	f100 8105 	bmi.w	800b47a <_printf_float+0x462>
 800b270:	68e0      	ldr	r0, [r4, #12]
 800b272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b274:	4298      	cmp	r0, r3
 800b276:	bfb8      	it	lt
 800b278:	4618      	movlt	r0, r3
 800b27a:	e730      	b.n	800b0de <_printf_float+0xc6>
 800b27c:	2301      	movs	r3, #1
 800b27e:	464a      	mov	r2, r9
 800b280:	4631      	mov	r1, r6
 800b282:	4628      	mov	r0, r5
 800b284:	47b8      	blx	r7
 800b286:	3001      	adds	r0, #1
 800b288:	f43f af27 	beq.w	800b0da <_printf_float+0xc2>
 800b28c:	f108 0801 	add.w	r8, r8, #1
 800b290:	e7e6      	b.n	800b260 <_printf_float+0x248>
 800b292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b294:	2b00      	cmp	r3, #0
 800b296:	dc39      	bgt.n	800b30c <_printf_float+0x2f4>
 800b298:	4a1b      	ldr	r2, [pc, #108]	; (800b308 <_printf_float+0x2f0>)
 800b29a:	2301      	movs	r3, #1
 800b29c:	4631      	mov	r1, r6
 800b29e:	4628      	mov	r0, r5
 800b2a0:	47b8      	blx	r7
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	f43f af19 	beq.w	800b0da <_printf_float+0xc2>
 800b2a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	d102      	bne.n	800b2b6 <_printf_float+0x29e>
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	07d9      	lsls	r1, r3, #31
 800b2b4:	d5d8      	bpl.n	800b268 <_printf_float+0x250>
 800b2b6:	ee18 3a10 	vmov	r3, s16
 800b2ba:	4652      	mov	r2, sl
 800b2bc:	4631      	mov	r1, r6
 800b2be:	4628      	mov	r0, r5
 800b2c0:	47b8      	blx	r7
 800b2c2:	3001      	adds	r0, #1
 800b2c4:	f43f af09 	beq.w	800b0da <_printf_float+0xc2>
 800b2c8:	f04f 0900 	mov.w	r9, #0
 800b2cc:	f104 0a1a 	add.w	sl, r4, #26
 800b2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d2:	425b      	negs	r3, r3
 800b2d4:	454b      	cmp	r3, r9
 800b2d6:	dc01      	bgt.n	800b2dc <_printf_float+0x2c4>
 800b2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2da:	e792      	b.n	800b202 <_printf_float+0x1ea>
 800b2dc:	2301      	movs	r3, #1
 800b2de:	4652      	mov	r2, sl
 800b2e0:	4631      	mov	r1, r6
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	47b8      	blx	r7
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	f43f aef7 	beq.w	800b0da <_printf_float+0xc2>
 800b2ec:	f109 0901 	add.w	r9, r9, #1
 800b2f0:	e7ee      	b.n	800b2d0 <_printf_float+0x2b8>
 800b2f2:	bf00      	nop
 800b2f4:	7fefffff 	.word	0x7fefffff
 800b2f8:	0800f778 	.word	0x0800f778
 800b2fc:	0800f77c 	.word	0x0800f77c
 800b300:	0800f784 	.word	0x0800f784
 800b304:	0800f780 	.word	0x0800f780
 800b308:	0800f788 	.word	0x0800f788
 800b30c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b30e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b310:	429a      	cmp	r2, r3
 800b312:	bfa8      	it	ge
 800b314:	461a      	movge	r2, r3
 800b316:	2a00      	cmp	r2, #0
 800b318:	4691      	mov	r9, r2
 800b31a:	dc37      	bgt.n	800b38c <_printf_float+0x374>
 800b31c:	f04f 0b00 	mov.w	fp, #0
 800b320:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b324:	f104 021a 	add.w	r2, r4, #26
 800b328:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b32a:	9305      	str	r3, [sp, #20]
 800b32c:	eba3 0309 	sub.w	r3, r3, r9
 800b330:	455b      	cmp	r3, fp
 800b332:	dc33      	bgt.n	800b39c <_printf_float+0x384>
 800b334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b338:	429a      	cmp	r2, r3
 800b33a:	db3b      	blt.n	800b3b4 <_printf_float+0x39c>
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	07da      	lsls	r2, r3, #31
 800b340:	d438      	bmi.n	800b3b4 <_printf_float+0x39c>
 800b342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b344:	9a05      	ldr	r2, [sp, #20]
 800b346:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b348:	1a9a      	subs	r2, r3, r2
 800b34a:	eba3 0901 	sub.w	r9, r3, r1
 800b34e:	4591      	cmp	r9, r2
 800b350:	bfa8      	it	ge
 800b352:	4691      	movge	r9, r2
 800b354:	f1b9 0f00 	cmp.w	r9, #0
 800b358:	dc35      	bgt.n	800b3c6 <_printf_float+0x3ae>
 800b35a:	f04f 0800 	mov.w	r8, #0
 800b35e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b362:	f104 0a1a 	add.w	sl, r4, #26
 800b366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b36a:	1a9b      	subs	r3, r3, r2
 800b36c:	eba3 0309 	sub.w	r3, r3, r9
 800b370:	4543      	cmp	r3, r8
 800b372:	f77f af79 	ble.w	800b268 <_printf_float+0x250>
 800b376:	2301      	movs	r3, #1
 800b378:	4652      	mov	r2, sl
 800b37a:	4631      	mov	r1, r6
 800b37c:	4628      	mov	r0, r5
 800b37e:	47b8      	blx	r7
 800b380:	3001      	adds	r0, #1
 800b382:	f43f aeaa 	beq.w	800b0da <_printf_float+0xc2>
 800b386:	f108 0801 	add.w	r8, r8, #1
 800b38a:	e7ec      	b.n	800b366 <_printf_float+0x34e>
 800b38c:	4613      	mov	r3, r2
 800b38e:	4631      	mov	r1, r6
 800b390:	4642      	mov	r2, r8
 800b392:	4628      	mov	r0, r5
 800b394:	47b8      	blx	r7
 800b396:	3001      	adds	r0, #1
 800b398:	d1c0      	bne.n	800b31c <_printf_float+0x304>
 800b39a:	e69e      	b.n	800b0da <_printf_float+0xc2>
 800b39c:	2301      	movs	r3, #1
 800b39e:	4631      	mov	r1, r6
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	9205      	str	r2, [sp, #20]
 800b3a4:	47b8      	blx	r7
 800b3a6:	3001      	adds	r0, #1
 800b3a8:	f43f ae97 	beq.w	800b0da <_printf_float+0xc2>
 800b3ac:	9a05      	ldr	r2, [sp, #20]
 800b3ae:	f10b 0b01 	add.w	fp, fp, #1
 800b3b2:	e7b9      	b.n	800b328 <_printf_float+0x310>
 800b3b4:	ee18 3a10 	vmov	r3, s16
 800b3b8:	4652      	mov	r2, sl
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	4628      	mov	r0, r5
 800b3be:	47b8      	blx	r7
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	d1be      	bne.n	800b342 <_printf_float+0x32a>
 800b3c4:	e689      	b.n	800b0da <_printf_float+0xc2>
 800b3c6:	9a05      	ldr	r2, [sp, #20]
 800b3c8:	464b      	mov	r3, r9
 800b3ca:	4442      	add	r2, r8
 800b3cc:	4631      	mov	r1, r6
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	47b8      	blx	r7
 800b3d2:	3001      	adds	r0, #1
 800b3d4:	d1c1      	bne.n	800b35a <_printf_float+0x342>
 800b3d6:	e680      	b.n	800b0da <_printf_float+0xc2>
 800b3d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3da:	2a01      	cmp	r2, #1
 800b3dc:	dc01      	bgt.n	800b3e2 <_printf_float+0x3ca>
 800b3de:	07db      	lsls	r3, r3, #31
 800b3e0:	d538      	bpl.n	800b454 <_printf_float+0x43c>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	4642      	mov	r2, r8
 800b3e6:	4631      	mov	r1, r6
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	47b8      	blx	r7
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	f43f ae74 	beq.w	800b0da <_printf_float+0xc2>
 800b3f2:	ee18 3a10 	vmov	r3, s16
 800b3f6:	4652      	mov	r2, sl
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	47b8      	blx	r7
 800b3fe:	3001      	adds	r0, #1
 800b400:	f43f ae6b 	beq.w	800b0da <_printf_float+0xc2>
 800b404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b408:	2200      	movs	r2, #0
 800b40a:	2300      	movs	r3, #0
 800b40c:	f7f5 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b410:	b9d8      	cbnz	r0, 800b44a <_printf_float+0x432>
 800b412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b414:	f108 0201 	add.w	r2, r8, #1
 800b418:	3b01      	subs	r3, #1
 800b41a:	4631      	mov	r1, r6
 800b41c:	4628      	mov	r0, r5
 800b41e:	47b8      	blx	r7
 800b420:	3001      	adds	r0, #1
 800b422:	d10e      	bne.n	800b442 <_printf_float+0x42a>
 800b424:	e659      	b.n	800b0da <_printf_float+0xc2>
 800b426:	2301      	movs	r3, #1
 800b428:	4652      	mov	r2, sl
 800b42a:	4631      	mov	r1, r6
 800b42c:	4628      	mov	r0, r5
 800b42e:	47b8      	blx	r7
 800b430:	3001      	adds	r0, #1
 800b432:	f43f ae52 	beq.w	800b0da <_printf_float+0xc2>
 800b436:	f108 0801 	add.w	r8, r8, #1
 800b43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b43c:	3b01      	subs	r3, #1
 800b43e:	4543      	cmp	r3, r8
 800b440:	dcf1      	bgt.n	800b426 <_printf_float+0x40e>
 800b442:	464b      	mov	r3, r9
 800b444:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b448:	e6dc      	b.n	800b204 <_printf_float+0x1ec>
 800b44a:	f04f 0800 	mov.w	r8, #0
 800b44e:	f104 0a1a 	add.w	sl, r4, #26
 800b452:	e7f2      	b.n	800b43a <_printf_float+0x422>
 800b454:	2301      	movs	r3, #1
 800b456:	4642      	mov	r2, r8
 800b458:	e7df      	b.n	800b41a <_printf_float+0x402>
 800b45a:	2301      	movs	r3, #1
 800b45c:	464a      	mov	r2, r9
 800b45e:	4631      	mov	r1, r6
 800b460:	4628      	mov	r0, r5
 800b462:	47b8      	blx	r7
 800b464:	3001      	adds	r0, #1
 800b466:	f43f ae38 	beq.w	800b0da <_printf_float+0xc2>
 800b46a:	f108 0801 	add.w	r8, r8, #1
 800b46e:	68e3      	ldr	r3, [r4, #12]
 800b470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b472:	1a5b      	subs	r3, r3, r1
 800b474:	4543      	cmp	r3, r8
 800b476:	dcf0      	bgt.n	800b45a <_printf_float+0x442>
 800b478:	e6fa      	b.n	800b270 <_printf_float+0x258>
 800b47a:	f04f 0800 	mov.w	r8, #0
 800b47e:	f104 0919 	add.w	r9, r4, #25
 800b482:	e7f4      	b.n	800b46e <_printf_float+0x456>

0800b484 <_printf_common>:
 800b484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b488:	4616      	mov	r6, r2
 800b48a:	4699      	mov	r9, r3
 800b48c:	688a      	ldr	r2, [r1, #8]
 800b48e:	690b      	ldr	r3, [r1, #16]
 800b490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b494:	4293      	cmp	r3, r2
 800b496:	bfb8      	it	lt
 800b498:	4613      	movlt	r3, r2
 800b49a:	6033      	str	r3, [r6, #0]
 800b49c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4a0:	4607      	mov	r7, r0
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	b10a      	cbz	r2, 800b4aa <_printf_common+0x26>
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	6033      	str	r3, [r6, #0]
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	0699      	lsls	r1, r3, #26
 800b4ae:	bf42      	ittt	mi
 800b4b0:	6833      	ldrmi	r3, [r6, #0]
 800b4b2:	3302      	addmi	r3, #2
 800b4b4:	6033      	strmi	r3, [r6, #0]
 800b4b6:	6825      	ldr	r5, [r4, #0]
 800b4b8:	f015 0506 	ands.w	r5, r5, #6
 800b4bc:	d106      	bne.n	800b4cc <_printf_common+0x48>
 800b4be:	f104 0a19 	add.w	sl, r4, #25
 800b4c2:	68e3      	ldr	r3, [r4, #12]
 800b4c4:	6832      	ldr	r2, [r6, #0]
 800b4c6:	1a9b      	subs	r3, r3, r2
 800b4c8:	42ab      	cmp	r3, r5
 800b4ca:	dc26      	bgt.n	800b51a <_printf_common+0x96>
 800b4cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4d0:	1e13      	subs	r3, r2, #0
 800b4d2:	6822      	ldr	r2, [r4, #0]
 800b4d4:	bf18      	it	ne
 800b4d6:	2301      	movne	r3, #1
 800b4d8:	0692      	lsls	r2, r2, #26
 800b4da:	d42b      	bmi.n	800b534 <_printf_common+0xb0>
 800b4dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4e0:	4649      	mov	r1, r9
 800b4e2:	4638      	mov	r0, r7
 800b4e4:	47c0      	blx	r8
 800b4e6:	3001      	adds	r0, #1
 800b4e8:	d01e      	beq.n	800b528 <_printf_common+0xa4>
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	68e5      	ldr	r5, [r4, #12]
 800b4ee:	6832      	ldr	r2, [r6, #0]
 800b4f0:	f003 0306 	and.w	r3, r3, #6
 800b4f4:	2b04      	cmp	r3, #4
 800b4f6:	bf08      	it	eq
 800b4f8:	1aad      	subeq	r5, r5, r2
 800b4fa:	68a3      	ldr	r3, [r4, #8]
 800b4fc:	6922      	ldr	r2, [r4, #16]
 800b4fe:	bf0c      	ite	eq
 800b500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b504:	2500      	movne	r5, #0
 800b506:	4293      	cmp	r3, r2
 800b508:	bfc4      	itt	gt
 800b50a:	1a9b      	subgt	r3, r3, r2
 800b50c:	18ed      	addgt	r5, r5, r3
 800b50e:	2600      	movs	r6, #0
 800b510:	341a      	adds	r4, #26
 800b512:	42b5      	cmp	r5, r6
 800b514:	d11a      	bne.n	800b54c <_printf_common+0xc8>
 800b516:	2000      	movs	r0, #0
 800b518:	e008      	b.n	800b52c <_printf_common+0xa8>
 800b51a:	2301      	movs	r3, #1
 800b51c:	4652      	mov	r2, sl
 800b51e:	4649      	mov	r1, r9
 800b520:	4638      	mov	r0, r7
 800b522:	47c0      	blx	r8
 800b524:	3001      	adds	r0, #1
 800b526:	d103      	bne.n	800b530 <_printf_common+0xac>
 800b528:	f04f 30ff 	mov.w	r0, #4294967295
 800b52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b530:	3501      	adds	r5, #1
 800b532:	e7c6      	b.n	800b4c2 <_printf_common+0x3e>
 800b534:	18e1      	adds	r1, r4, r3
 800b536:	1c5a      	adds	r2, r3, #1
 800b538:	2030      	movs	r0, #48	; 0x30
 800b53a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b53e:	4422      	add	r2, r4
 800b540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b548:	3302      	adds	r3, #2
 800b54a:	e7c7      	b.n	800b4dc <_printf_common+0x58>
 800b54c:	2301      	movs	r3, #1
 800b54e:	4622      	mov	r2, r4
 800b550:	4649      	mov	r1, r9
 800b552:	4638      	mov	r0, r7
 800b554:	47c0      	blx	r8
 800b556:	3001      	adds	r0, #1
 800b558:	d0e6      	beq.n	800b528 <_printf_common+0xa4>
 800b55a:	3601      	adds	r6, #1
 800b55c:	e7d9      	b.n	800b512 <_printf_common+0x8e>
	...

0800b560 <_printf_i>:
 800b560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b564:	7e0f      	ldrb	r7, [r1, #24]
 800b566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b568:	2f78      	cmp	r7, #120	; 0x78
 800b56a:	4691      	mov	r9, r2
 800b56c:	4680      	mov	r8, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	469a      	mov	sl, r3
 800b572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b576:	d807      	bhi.n	800b588 <_printf_i+0x28>
 800b578:	2f62      	cmp	r7, #98	; 0x62
 800b57a:	d80a      	bhi.n	800b592 <_printf_i+0x32>
 800b57c:	2f00      	cmp	r7, #0
 800b57e:	f000 80d8 	beq.w	800b732 <_printf_i+0x1d2>
 800b582:	2f58      	cmp	r7, #88	; 0x58
 800b584:	f000 80a3 	beq.w	800b6ce <_printf_i+0x16e>
 800b588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b58c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b590:	e03a      	b.n	800b608 <_printf_i+0xa8>
 800b592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b596:	2b15      	cmp	r3, #21
 800b598:	d8f6      	bhi.n	800b588 <_printf_i+0x28>
 800b59a:	a101      	add	r1, pc, #4	; (adr r1, 800b5a0 <_printf_i+0x40>)
 800b59c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5a0:	0800b5f9 	.word	0x0800b5f9
 800b5a4:	0800b60d 	.word	0x0800b60d
 800b5a8:	0800b589 	.word	0x0800b589
 800b5ac:	0800b589 	.word	0x0800b589
 800b5b0:	0800b589 	.word	0x0800b589
 800b5b4:	0800b589 	.word	0x0800b589
 800b5b8:	0800b60d 	.word	0x0800b60d
 800b5bc:	0800b589 	.word	0x0800b589
 800b5c0:	0800b589 	.word	0x0800b589
 800b5c4:	0800b589 	.word	0x0800b589
 800b5c8:	0800b589 	.word	0x0800b589
 800b5cc:	0800b719 	.word	0x0800b719
 800b5d0:	0800b63d 	.word	0x0800b63d
 800b5d4:	0800b6fb 	.word	0x0800b6fb
 800b5d8:	0800b589 	.word	0x0800b589
 800b5dc:	0800b589 	.word	0x0800b589
 800b5e0:	0800b73b 	.word	0x0800b73b
 800b5e4:	0800b589 	.word	0x0800b589
 800b5e8:	0800b63d 	.word	0x0800b63d
 800b5ec:	0800b589 	.word	0x0800b589
 800b5f0:	0800b589 	.word	0x0800b589
 800b5f4:	0800b703 	.word	0x0800b703
 800b5f8:	682b      	ldr	r3, [r5, #0]
 800b5fa:	1d1a      	adds	r2, r3, #4
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	602a      	str	r2, [r5, #0]
 800b600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b608:	2301      	movs	r3, #1
 800b60a:	e0a3      	b.n	800b754 <_printf_i+0x1f4>
 800b60c:	6820      	ldr	r0, [r4, #0]
 800b60e:	6829      	ldr	r1, [r5, #0]
 800b610:	0606      	lsls	r6, r0, #24
 800b612:	f101 0304 	add.w	r3, r1, #4
 800b616:	d50a      	bpl.n	800b62e <_printf_i+0xce>
 800b618:	680e      	ldr	r6, [r1, #0]
 800b61a:	602b      	str	r3, [r5, #0]
 800b61c:	2e00      	cmp	r6, #0
 800b61e:	da03      	bge.n	800b628 <_printf_i+0xc8>
 800b620:	232d      	movs	r3, #45	; 0x2d
 800b622:	4276      	negs	r6, r6
 800b624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b628:	485e      	ldr	r0, [pc, #376]	; (800b7a4 <_printf_i+0x244>)
 800b62a:	230a      	movs	r3, #10
 800b62c:	e019      	b.n	800b662 <_printf_i+0x102>
 800b62e:	680e      	ldr	r6, [r1, #0]
 800b630:	602b      	str	r3, [r5, #0]
 800b632:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b636:	bf18      	it	ne
 800b638:	b236      	sxthne	r6, r6
 800b63a:	e7ef      	b.n	800b61c <_printf_i+0xbc>
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	6820      	ldr	r0, [r4, #0]
 800b640:	1d19      	adds	r1, r3, #4
 800b642:	6029      	str	r1, [r5, #0]
 800b644:	0601      	lsls	r1, r0, #24
 800b646:	d501      	bpl.n	800b64c <_printf_i+0xec>
 800b648:	681e      	ldr	r6, [r3, #0]
 800b64a:	e002      	b.n	800b652 <_printf_i+0xf2>
 800b64c:	0646      	lsls	r6, r0, #25
 800b64e:	d5fb      	bpl.n	800b648 <_printf_i+0xe8>
 800b650:	881e      	ldrh	r6, [r3, #0]
 800b652:	4854      	ldr	r0, [pc, #336]	; (800b7a4 <_printf_i+0x244>)
 800b654:	2f6f      	cmp	r7, #111	; 0x6f
 800b656:	bf0c      	ite	eq
 800b658:	2308      	moveq	r3, #8
 800b65a:	230a      	movne	r3, #10
 800b65c:	2100      	movs	r1, #0
 800b65e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b662:	6865      	ldr	r5, [r4, #4]
 800b664:	60a5      	str	r5, [r4, #8]
 800b666:	2d00      	cmp	r5, #0
 800b668:	bfa2      	ittt	ge
 800b66a:	6821      	ldrge	r1, [r4, #0]
 800b66c:	f021 0104 	bicge.w	r1, r1, #4
 800b670:	6021      	strge	r1, [r4, #0]
 800b672:	b90e      	cbnz	r6, 800b678 <_printf_i+0x118>
 800b674:	2d00      	cmp	r5, #0
 800b676:	d04d      	beq.n	800b714 <_printf_i+0x1b4>
 800b678:	4615      	mov	r5, r2
 800b67a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b67e:	fb03 6711 	mls	r7, r3, r1, r6
 800b682:	5dc7      	ldrb	r7, [r0, r7]
 800b684:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b688:	4637      	mov	r7, r6
 800b68a:	42bb      	cmp	r3, r7
 800b68c:	460e      	mov	r6, r1
 800b68e:	d9f4      	bls.n	800b67a <_printf_i+0x11a>
 800b690:	2b08      	cmp	r3, #8
 800b692:	d10b      	bne.n	800b6ac <_printf_i+0x14c>
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	07de      	lsls	r6, r3, #31
 800b698:	d508      	bpl.n	800b6ac <_printf_i+0x14c>
 800b69a:	6923      	ldr	r3, [r4, #16]
 800b69c:	6861      	ldr	r1, [r4, #4]
 800b69e:	4299      	cmp	r1, r3
 800b6a0:	bfde      	ittt	le
 800b6a2:	2330      	movle	r3, #48	; 0x30
 800b6a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b6ac:	1b52      	subs	r2, r2, r5
 800b6ae:	6122      	str	r2, [r4, #16]
 800b6b0:	f8cd a000 	str.w	sl, [sp]
 800b6b4:	464b      	mov	r3, r9
 800b6b6:	aa03      	add	r2, sp, #12
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	4640      	mov	r0, r8
 800b6bc:	f7ff fee2 	bl	800b484 <_printf_common>
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	d14c      	bne.n	800b75e <_printf_i+0x1fe>
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c8:	b004      	add	sp, #16
 800b6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ce:	4835      	ldr	r0, [pc, #212]	; (800b7a4 <_printf_i+0x244>)
 800b6d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b6d4:	6829      	ldr	r1, [r5, #0]
 800b6d6:	6823      	ldr	r3, [r4, #0]
 800b6d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b6dc:	6029      	str	r1, [r5, #0]
 800b6de:	061d      	lsls	r5, r3, #24
 800b6e0:	d514      	bpl.n	800b70c <_printf_i+0x1ac>
 800b6e2:	07df      	lsls	r7, r3, #31
 800b6e4:	bf44      	itt	mi
 800b6e6:	f043 0320 	orrmi.w	r3, r3, #32
 800b6ea:	6023      	strmi	r3, [r4, #0]
 800b6ec:	b91e      	cbnz	r6, 800b6f6 <_printf_i+0x196>
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	f023 0320 	bic.w	r3, r3, #32
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	2310      	movs	r3, #16
 800b6f8:	e7b0      	b.n	800b65c <_printf_i+0xfc>
 800b6fa:	6823      	ldr	r3, [r4, #0]
 800b6fc:	f043 0320 	orr.w	r3, r3, #32
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	2378      	movs	r3, #120	; 0x78
 800b704:	4828      	ldr	r0, [pc, #160]	; (800b7a8 <_printf_i+0x248>)
 800b706:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b70a:	e7e3      	b.n	800b6d4 <_printf_i+0x174>
 800b70c:	0659      	lsls	r1, r3, #25
 800b70e:	bf48      	it	mi
 800b710:	b2b6      	uxthmi	r6, r6
 800b712:	e7e6      	b.n	800b6e2 <_printf_i+0x182>
 800b714:	4615      	mov	r5, r2
 800b716:	e7bb      	b.n	800b690 <_printf_i+0x130>
 800b718:	682b      	ldr	r3, [r5, #0]
 800b71a:	6826      	ldr	r6, [r4, #0]
 800b71c:	6961      	ldr	r1, [r4, #20]
 800b71e:	1d18      	adds	r0, r3, #4
 800b720:	6028      	str	r0, [r5, #0]
 800b722:	0635      	lsls	r5, r6, #24
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	d501      	bpl.n	800b72c <_printf_i+0x1cc>
 800b728:	6019      	str	r1, [r3, #0]
 800b72a:	e002      	b.n	800b732 <_printf_i+0x1d2>
 800b72c:	0670      	lsls	r0, r6, #25
 800b72e:	d5fb      	bpl.n	800b728 <_printf_i+0x1c8>
 800b730:	8019      	strh	r1, [r3, #0]
 800b732:	2300      	movs	r3, #0
 800b734:	6123      	str	r3, [r4, #16]
 800b736:	4615      	mov	r5, r2
 800b738:	e7ba      	b.n	800b6b0 <_printf_i+0x150>
 800b73a:	682b      	ldr	r3, [r5, #0]
 800b73c:	1d1a      	adds	r2, r3, #4
 800b73e:	602a      	str	r2, [r5, #0]
 800b740:	681d      	ldr	r5, [r3, #0]
 800b742:	6862      	ldr	r2, [r4, #4]
 800b744:	2100      	movs	r1, #0
 800b746:	4628      	mov	r0, r5
 800b748:	f7f4 fd4a 	bl	80001e0 <memchr>
 800b74c:	b108      	cbz	r0, 800b752 <_printf_i+0x1f2>
 800b74e:	1b40      	subs	r0, r0, r5
 800b750:	6060      	str	r0, [r4, #4]
 800b752:	6863      	ldr	r3, [r4, #4]
 800b754:	6123      	str	r3, [r4, #16]
 800b756:	2300      	movs	r3, #0
 800b758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b75c:	e7a8      	b.n	800b6b0 <_printf_i+0x150>
 800b75e:	6923      	ldr	r3, [r4, #16]
 800b760:	462a      	mov	r2, r5
 800b762:	4649      	mov	r1, r9
 800b764:	4640      	mov	r0, r8
 800b766:	47d0      	blx	sl
 800b768:	3001      	adds	r0, #1
 800b76a:	d0ab      	beq.n	800b6c4 <_printf_i+0x164>
 800b76c:	6823      	ldr	r3, [r4, #0]
 800b76e:	079b      	lsls	r3, r3, #30
 800b770:	d413      	bmi.n	800b79a <_printf_i+0x23a>
 800b772:	68e0      	ldr	r0, [r4, #12]
 800b774:	9b03      	ldr	r3, [sp, #12]
 800b776:	4298      	cmp	r0, r3
 800b778:	bfb8      	it	lt
 800b77a:	4618      	movlt	r0, r3
 800b77c:	e7a4      	b.n	800b6c8 <_printf_i+0x168>
 800b77e:	2301      	movs	r3, #1
 800b780:	4632      	mov	r2, r6
 800b782:	4649      	mov	r1, r9
 800b784:	4640      	mov	r0, r8
 800b786:	47d0      	blx	sl
 800b788:	3001      	adds	r0, #1
 800b78a:	d09b      	beq.n	800b6c4 <_printf_i+0x164>
 800b78c:	3501      	adds	r5, #1
 800b78e:	68e3      	ldr	r3, [r4, #12]
 800b790:	9903      	ldr	r1, [sp, #12]
 800b792:	1a5b      	subs	r3, r3, r1
 800b794:	42ab      	cmp	r3, r5
 800b796:	dcf2      	bgt.n	800b77e <_printf_i+0x21e>
 800b798:	e7eb      	b.n	800b772 <_printf_i+0x212>
 800b79a:	2500      	movs	r5, #0
 800b79c:	f104 0619 	add.w	r6, r4, #25
 800b7a0:	e7f5      	b.n	800b78e <_printf_i+0x22e>
 800b7a2:	bf00      	nop
 800b7a4:	0800f78a 	.word	0x0800f78a
 800b7a8:	0800f79b 	.word	0x0800f79b

0800b7ac <_scanf_float>:
 800b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	b087      	sub	sp, #28
 800b7b2:	4617      	mov	r7, r2
 800b7b4:	9303      	str	r3, [sp, #12]
 800b7b6:	688b      	ldr	r3, [r1, #8]
 800b7b8:	1e5a      	subs	r2, r3, #1
 800b7ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b7be:	bf83      	ittte	hi
 800b7c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b7c4:	195b      	addhi	r3, r3, r5
 800b7c6:	9302      	strhi	r3, [sp, #8]
 800b7c8:	2300      	movls	r3, #0
 800b7ca:	bf86      	itte	hi
 800b7cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b7d0:	608b      	strhi	r3, [r1, #8]
 800b7d2:	9302      	strls	r3, [sp, #8]
 800b7d4:	680b      	ldr	r3, [r1, #0]
 800b7d6:	468b      	mov	fp, r1
 800b7d8:	2500      	movs	r5, #0
 800b7da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b7de:	f84b 3b1c 	str.w	r3, [fp], #28
 800b7e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b7e6:	4680      	mov	r8, r0
 800b7e8:	460c      	mov	r4, r1
 800b7ea:	465e      	mov	r6, fp
 800b7ec:	46aa      	mov	sl, r5
 800b7ee:	46a9      	mov	r9, r5
 800b7f0:	9501      	str	r5, [sp, #4]
 800b7f2:	68a2      	ldr	r2, [r4, #8]
 800b7f4:	b152      	cbz	r2, 800b80c <_scanf_float+0x60>
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	2b4e      	cmp	r3, #78	; 0x4e
 800b7fc:	d864      	bhi.n	800b8c8 <_scanf_float+0x11c>
 800b7fe:	2b40      	cmp	r3, #64	; 0x40
 800b800:	d83c      	bhi.n	800b87c <_scanf_float+0xd0>
 800b802:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b806:	b2c8      	uxtb	r0, r1
 800b808:	280e      	cmp	r0, #14
 800b80a:	d93a      	bls.n	800b882 <_scanf_float+0xd6>
 800b80c:	f1b9 0f00 	cmp.w	r9, #0
 800b810:	d003      	beq.n	800b81a <_scanf_float+0x6e>
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b81e:	f1ba 0f01 	cmp.w	sl, #1
 800b822:	f200 8113 	bhi.w	800ba4c <_scanf_float+0x2a0>
 800b826:	455e      	cmp	r6, fp
 800b828:	f200 8105 	bhi.w	800ba36 <_scanf_float+0x28a>
 800b82c:	2501      	movs	r5, #1
 800b82e:	4628      	mov	r0, r5
 800b830:	b007      	add	sp, #28
 800b832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b836:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b83a:	2a0d      	cmp	r2, #13
 800b83c:	d8e6      	bhi.n	800b80c <_scanf_float+0x60>
 800b83e:	a101      	add	r1, pc, #4	; (adr r1, 800b844 <_scanf_float+0x98>)
 800b840:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b844:	0800b983 	.word	0x0800b983
 800b848:	0800b80d 	.word	0x0800b80d
 800b84c:	0800b80d 	.word	0x0800b80d
 800b850:	0800b80d 	.word	0x0800b80d
 800b854:	0800b9e3 	.word	0x0800b9e3
 800b858:	0800b9bb 	.word	0x0800b9bb
 800b85c:	0800b80d 	.word	0x0800b80d
 800b860:	0800b80d 	.word	0x0800b80d
 800b864:	0800b991 	.word	0x0800b991
 800b868:	0800b80d 	.word	0x0800b80d
 800b86c:	0800b80d 	.word	0x0800b80d
 800b870:	0800b80d 	.word	0x0800b80d
 800b874:	0800b80d 	.word	0x0800b80d
 800b878:	0800b949 	.word	0x0800b949
 800b87c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b880:	e7db      	b.n	800b83a <_scanf_float+0x8e>
 800b882:	290e      	cmp	r1, #14
 800b884:	d8c2      	bhi.n	800b80c <_scanf_float+0x60>
 800b886:	a001      	add	r0, pc, #4	; (adr r0, 800b88c <_scanf_float+0xe0>)
 800b888:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b88c:	0800b93b 	.word	0x0800b93b
 800b890:	0800b80d 	.word	0x0800b80d
 800b894:	0800b93b 	.word	0x0800b93b
 800b898:	0800b9cf 	.word	0x0800b9cf
 800b89c:	0800b80d 	.word	0x0800b80d
 800b8a0:	0800b8e9 	.word	0x0800b8e9
 800b8a4:	0800b925 	.word	0x0800b925
 800b8a8:	0800b925 	.word	0x0800b925
 800b8ac:	0800b925 	.word	0x0800b925
 800b8b0:	0800b925 	.word	0x0800b925
 800b8b4:	0800b925 	.word	0x0800b925
 800b8b8:	0800b925 	.word	0x0800b925
 800b8bc:	0800b925 	.word	0x0800b925
 800b8c0:	0800b925 	.word	0x0800b925
 800b8c4:	0800b925 	.word	0x0800b925
 800b8c8:	2b6e      	cmp	r3, #110	; 0x6e
 800b8ca:	d809      	bhi.n	800b8e0 <_scanf_float+0x134>
 800b8cc:	2b60      	cmp	r3, #96	; 0x60
 800b8ce:	d8b2      	bhi.n	800b836 <_scanf_float+0x8a>
 800b8d0:	2b54      	cmp	r3, #84	; 0x54
 800b8d2:	d077      	beq.n	800b9c4 <_scanf_float+0x218>
 800b8d4:	2b59      	cmp	r3, #89	; 0x59
 800b8d6:	d199      	bne.n	800b80c <_scanf_float+0x60>
 800b8d8:	2d07      	cmp	r5, #7
 800b8da:	d197      	bne.n	800b80c <_scanf_float+0x60>
 800b8dc:	2508      	movs	r5, #8
 800b8de:	e029      	b.n	800b934 <_scanf_float+0x188>
 800b8e0:	2b74      	cmp	r3, #116	; 0x74
 800b8e2:	d06f      	beq.n	800b9c4 <_scanf_float+0x218>
 800b8e4:	2b79      	cmp	r3, #121	; 0x79
 800b8e6:	e7f6      	b.n	800b8d6 <_scanf_float+0x12a>
 800b8e8:	6821      	ldr	r1, [r4, #0]
 800b8ea:	05c8      	lsls	r0, r1, #23
 800b8ec:	d51a      	bpl.n	800b924 <_scanf_float+0x178>
 800b8ee:	9b02      	ldr	r3, [sp, #8]
 800b8f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b8f4:	6021      	str	r1, [r4, #0]
 800b8f6:	f109 0901 	add.w	r9, r9, #1
 800b8fa:	b11b      	cbz	r3, 800b904 <_scanf_float+0x158>
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	3201      	adds	r2, #1
 800b900:	9302      	str	r3, [sp, #8]
 800b902:	60a2      	str	r2, [r4, #8]
 800b904:	68a3      	ldr	r3, [r4, #8]
 800b906:	3b01      	subs	r3, #1
 800b908:	60a3      	str	r3, [r4, #8]
 800b90a:	6923      	ldr	r3, [r4, #16]
 800b90c:	3301      	adds	r3, #1
 800b90e:	6123      	str	r3, [r4, #16]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	3b01      	subs	r3, #1
 800b914:	2b00      	cmp	r3, #0
 800b916:	607b      	str	r3, [r7, #4]
 800b918:	f340 8084 	ble.w	800ba24 <_scanf_float+0x278>
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	3301      	adds	r3, #1
 800b920:	603b      	str	r3, [r7, #0]
 800b922:	e766      	b.n	800b7f2 <_scanf_float+0x46>
 800b924:	eb1a 0f05 	cmn.w	sl, r5
 800b928:	f47f af70 	bne.w	800b80c <_scanf_float+0x60>
 800b92c:	6822      	ldr	r2, [r4, #0]
 800b92e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b932:	6022      	str	r2, [r4, #0]
 800b934:	f806 3b01 	strb.w	r3, [r6], #1
 800b938:	e7e4      	b.n	800b904 <_scanf_float+0x158>
 800b93a:	6822      	ldr	r2, [r4, #0]
 800b93c:	0610      	lsls	r0, r2, #24
 800b93e:	f57f af65 	bpl.w	800b80c <_scanf_float+0x60>
 800b942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b946:	e7f4      	b.n	800b932 <_scanf_float+0x186>
 800b948:	f1ba 0f00 	cmp.w	sl, #0
 800b94c:	d10e      	bne.n	800b96c <_scanf_float+0x1c0>
 800b94e:	f1b9 0f00 	cmp.w	r9, #0
 800b952:	d10e      	bne.n	800b972 <_scanf_float+0x1c6>
 800b954:	6822      	ldr	r2, [r4, #0]
 800b956:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b95a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b95e:	d108      	bne.n	800b972 <_scanf_float+0x1c6>
 800b960:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b964:	6022      	str	r2, [r4, #0]
 800b966:	f04f 0a01 	mov.w	sl, #1
 800b96a:	e7e3      	b.n	800b934 <_scanf_float+0x188>
 800b96c:	f1ba 0f02 	cmp.w	sl, #2
 800b970:	d055      	beq.n	800ba1e <_scanf_float+0x272>
 800b972:	2d01      	cmp	r5, #1
 800b974:	d002      	beq.n	800b97c <_scanf_float+0x1d0>
 800b976:	2d04      	cmp	r5, #4
 800b978:	f47f af48 	bne.w	800b80c <_scanf_float+0x60>
 800b97c:	3501      	adds	r5, #1
 800b97e:	b2ed      	uxtb	r5, r5
 800b980:	e7d8      	b.n	800b934 <_scanf_float+0x188>
 800b982:	f1ba 0f01 	cmp.w	sl, #1
 800b986:	f47f af41 	bne.w	800b80c <_scanf_float+0x60>
 800b98a:	f04f 0a02 	mov.w	sl, #2
 800b98e:	e7d1      	b.n	800b934 <_scanf_float+0x188>
 800b990:	b97d      	cbnz	r5, 800b9b2 <_scanf_float+0x206>
 800b992:	f1b9 0f00 	cmp.w	r9, #0
 800b996:	f47f af3c 	bne.w	800b812 <_scanf_float+0x66>
 800b99a:	6822      	ldr	r2, [r4, #0]
 800b99c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b9a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b9a4:	f47f af39 	bne.w	800b81a <_scanf_float+0x6e>
 800b9a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b9ac:	6022      	str	r2, [r4, #0]
 800b9ae:	2501      	movs	r5, #1
 800b9b0:	e7c0      	b.n	800b934 <_scanf_float+0x188>
 800b9b2:	2d03      	cmp	r5, #3
 800b9b4:	d0e2      	beq.n	800b97c <_scanf_float+0x1d0>
 800b9b6:	2d05      	cmp	r5, #5
 800b9b8:	e7de      	b.n	800b978 <_scanf_float+0x1cc>
 800b9ba:	2d02      	cmp	r5, #2
 800b9bc:	f47f af26 	bne.w	800b80c <_scanf_float+0x60>
 800b9c0:	2503      	movs	r5, #3
 800b9c2:	e7b7      	b.n	800b934 <_scanf_float+0x188>
 800b9c4:	2d06      	cmp	r5, #6
 800b9c6:	f47f af21 	bne.w	800b80c <_scanf_float+0x60>
 800b9ca:	2507      	movs	r5, #7
 800b9cc:	e7b2      	b.n	800b934 <_scanf_float+0x188>
 800b9ce:	6822      	ldr	r2, [r4, #0]
 800b9d0:	0591      	lsls	r1, r2, #22
 800b9d2:	f57f af1b 	bpl.w	800b80c <_scanf_float+0x60>
 800b9d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b9da:	6022      	str	r2, [r4, #0]
 800b9dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800b9e0:	e7a8      	b.n	800b934 <_scanf_float+0x188>
 800b9e2:	6822      	ldr	r2, [r4, #0]
 800b9e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b9e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b9ec:	d006      	beq.n	800b9fc <_scanf_float+0x250>
 800b9ee:	0550      	lsls	r0, r2, #21
 800b9f0:	f57f af0c 	bpl.w	800b80c <_scanf_float+0x60>
 800b9f4:	f1b9 0f00 	cmp.w	r9, #0
 800b9f8:	f43f af0f 	beq.w	800b81a <_scanf_float+0x6e>
 800b9fc:	0591      	lsls	r1, r2, #22
 800b9fe:	bf58      	it	pl
 800ba00:	9901      	ldrpl	r1, [sp, #4]
 800ba02:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ba06:	bf58      	it	pl
 800ba08:	eba9 0101 	subpl.w	r1, r9, r1
 800ba0c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ba10:	bf58      	it	pl
 800ba12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ba16:	6022      	str	r2, [r4, #0]
 800ba18:	f04f 0900 	mov.w	r9, #0
 800ba1c:	e78a      	b.n	800b934 <_scanf_float+0x188>
 800ba1e:	f04f 0a03 	mov.w	sl, #3
 800ba22:	e787      	b.n	800b934 <_scanf_float+0x188>
 800ba24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ba28:	4639      	mov	r1, r7
 800ba2a:	4640      	mov	r0, r8
 800ba2c:	4798      	blx	r3
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	f43f aedf 	beq.w	800b7f2 <_scanf_float+0x46>
 800ba34:	e6ea      	b.n	800b80c <_scanf_float+0x60>
 800ba36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba3e:	463a      	mov	r2, r7
 800ba40:	4640      	mov	r0, r8
 800ba42:	4798      	blx	r3
 800ba44:	6923      	ldr	r3, [r4, #16]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	6123      	str	r3, [r4, #16]
 800ba4a:	e6ec      	b.n	800b826 <_scanf_float+0x7a>
 800ba4c:	1e6b      	subs	r3, r5, #1
 800ba4e:	2b06      	cmp	r3, #6
 800ba50:	d825      	bhi.n	800ba9e <_scanf_float+0x2f2>
 800ba52:	2d02      	cmp	r5, #2
 800ba54:	d836      	bhi.n	800bac4 <_scanf_float+0x318>
 800ba56:	455e      	cmp	r6, fp
 800ba58:	f67f aee8 	bls.w	800b82c <_scanf_float+0x80>
 800ba5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba64:	463a      	mov	r2, r7
 800ba66:	4640      	mov	r0, r8
 800ba68:	4798      	blx	r3
 800ba6a:	6923      	ldr	r3, [r4, #16]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	6123      	str	r3, [r4, #16]
 800ba70:	e7f1      	b.n	800ba56 <_scanf_float+0x2aa>
 800ba72:	9802      	ldr	r0, [sp, #8]
 800ba74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba78:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ba7c:	9002      	str	r0, [sp, #8]
 800ba7e:	463a      	mov	r2, r7
 800ba80:	4640      	mov	r0, r8
 800ba82:	4798      	blx	r3
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	3b01      	subs	r3, #1
 800ba88:	6123      	str	r3, [r4, #16]
 800ba8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba8e:	fa5f fa8a 	uxtb.w	sl, sl
 800ba92:	f1ba 0f02 	cmp.w	sl, #2
 800ba96:	d1ec      	bne.n	800ba72 <_scanf_float+0x2c6>
 800ba98:	3d03      	subs	r5, #3
 800ba9a:	b2ed      	uxtb	r5, r5
 800ba9c:	1b76      	subs	r6, r6, r5
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	05da      	lsls	r2, r3, #23
 800baa2:	d52f      	bpl.n	800bb04 <_scanf_float+0x358>
 800baa4:	055b      	lsls	r3, r3, #21
 800baa6:	d510      	bpl.n	800baca <_scanf_float+0x31e>
 800baa8:	455e      	cmp	r6, fp
 800baaa:	f67f aebf 	bls.w	800b82c <_scanf_float+0x80>
 800baae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bab2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bab6:	463a      	mov	r2, r7
 800bab8:	4640      	mov	r0, r8
 800baba:	4798      	blx	r3
 800babc:	6923      	ldr	r3, [r4, #16]
 800babe:	3b01      	subs	r3, #1
 800bac0:	6123      	str	r3, [r4, #16]
 800bac2:	e7f1      	b.n	800baa8 <_scanf_float+0x2fc>
 800bac4:	46aa      	mov	sl, r5
 800bac6:	9602      	str	r6, [sp, #8]
 800bac8:	e7df      	b.n	800ba8a <_scanf_float+0x2de>
 800baca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bace:	6923      	ldr	r3, [r4, #16]
 800bad0:	2965      	cmp	r1, #101	; 0x65
 800bad2:	f103 33ff 	add.w	r3, r3, #4294967295
 800bad6:	f106 35ff 	add.w	r5, r6, #4294967295
 800bada:	6123      	str	r3, [r4, #16]
 800badc:	d00c      	beq.n	800baf8 <_scanf_float+0x34c>
 800bade:	2945      	cmp	r1, #69	; 0x45
 800bae0:	d00a      	beq.n	800baf8 <_scanf_float+0x34c>
 800bae2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bae6:	463a      	mov	r2, r7
 800bae8:	4640      	mov	r0, r8
 800baea:	4798      	blx	r3
 800baec:	6923      	ldr	r3, [r4, #16]
 800baee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800baf2:	3b01      	subs	r3, #1
 800baf4:	1eb5      	subs	r5, r6, #2
 800baf6:	6123      	str	r3, [r4, #16]
 800baf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bafc:	463a      	mov	r2, r7
 800bafe:	4640      	mov	r0, r8
 800bb00:	4798      	blx	r3
 800bb02:	462e      	mov	r6, r5
 800bb04:	6825      	ldr	r5, [r4, #0]
 800bb06:	f015 0510 	ands.w	r5, r5, #16
 800bb0a:	d159      	bne.n	800bbc0 <_scanf_float+0x414>
 800bb0c:	7035      	strb	r5, [r6, #0]
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bb14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb18:	d11b      	bne.n	800bb52 <_scanf_float+0x3a6>
 800bb1a:	9b01      	ldr	r3, [sp, #4]
 800bb1c:	454b      	cmp	r3, r9
 800bb1e:	eba3 0209 	sub.w	r2, r3, r9
 800bb22:	d123      	bne.n	800bb6c <_scanf_float+0x3c0>
 800bb24:	2200      	movs	r2, #0
 800bb26:	4659      	mov	r1, fp
 800bb28:	4640      	mov	r0, r8
 800bb2a:	f000 ff8b 	bl	800ca44 <_strtod_r>
 800bb2e:	6822      	ldr	r2, [r4, #0]
 800bb30:	9b03      	ldr	r3, [sp, #12]
 800bb32:	f012 0f02 	tst.w	r2, #2
 800bb36:	ec57 6b10 	vmov	r6, r7, d0
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	d021      	beq.n	800bb82 <_scanf_float+0x3d6>
 800bb3e:	9903      	ldr	r1, [sp, #12]
 800bb40:	1d1a      	adds	r2, r3, #4
 800bb42:	600a      	str	r2, [r1, #0]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	e9c3 6700 	strd	r6, r7, [r3]
 800bb4a:	68e3      	ldr	r3, [r4, #12]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	60e3      	str	r3, [r4, #12]
 800bb50:	e66d      	b.n	800b82e <_scanf_float+0x82>
 800bb52:	9b04      	ldr	r3, [sp, #16]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d0e5      	beq.n	800bb24 <_scanf_float+0x378>
 800bb58:	9905      	ldr	r1, [sp, #20]
 800bb5a:	230a      	movs	r3, #10
 800bb5c:	462a      	mov	r2, r5
 800bb5e:	3101      	adds	r1, #1
 800bb60:	4640      	mov	r0, r8
 800bb62:	f000 fff7 	bl	800cb54 <_strtol_r>
 800bb66:	9b04      	ldr	r3, [sp, #16]
 800bb68:	9e05      	ldr	r6, [sp, #20]
 800bb6a:	1ac2      	subs	r2, r0, r3
 800bb6c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bb70:	429e      	cmp	r6, r3
 800bb72:	bf28      	it	cs
 800bb74:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bb78:	4912      	ldr	r1, [pc, #72]	; (800bbc4 <_scanf_float+0x418>)
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f000 f8da 	bl	800bd34 <siprintf>
 800bb80:	e7d0      	b.n	800bb24 <_scanf_float+0x378>
 800bb82:	9903      	ldr	r1, [sp, #12]
 800bb84:	f012 0f04 	tst.w	r2, #4
 800bb88:	f103 0204 	add.w	r2, r3, #4
 800bb8c:	600a      	str	r2, [r1, #0]
 800bb8e:	d1d9      	bne.n	800bb44 <_scanf_float+0x398>
 800bb90:	f8d3 8000 	ldr.w	r8, [r3]
 800bb94:	ee10 2a10 	vmov	r2, s0
 800bb98:	ee10 0a10 	vmov	r0, s0
 800bb9c:	463b      	mov	r3, r7
 800bb9e:	4639      	mov	r1, r7
 800bba0:	f7f4 ffc4 	bl	8000b2c <__aeabi_dcmpun>
 800bba4:	b128      	cbz	r0, 800bbb2 <_scanf_float+0x406>
 800bba6:	4808      	ldr	r0, [pc, #32]	; (800bbc8 <_scanf_float+0x41c>)
 800bba8:	f000 f88a 	bl	800bcc0 <nanf>
 800bbac:	ed88 0a00 	vstr	s0, [r8]
 800bbb0:	e7cb      	b.n	800bb4a <_scanf_float+0x39e>
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	4639      	mov	r1, r7
 800bbb6:	f7f5 f817 	bl	8000be8 <__aeabi_d2f>
 800bbba:	f8c8 0000 	str.w	r0, [r8]
 800bbbe:	e7c4      	b.n	800bb4a <_scanf_float+0x39e>
 800bbc0:	2500      	movs	r5, #0
 800bbc2:	e634      	b.n	800b82e <_scanf_float+0x82>
 800bbc4:	0800f7ac 	.word	0x0800f7ac
 800bbc8:	0800f843 	.word	0x0800f843

0800bbcc <cleanup_glue>:
 800bbcc:	b538      	push	{r3, r4, r5, lr}
 800bbce:	460c      	mov	r4, r1
 800bbd0:	6809      	ldr	r1, [r1, #0]
 800bbd2:	4605      	mov	r5, r0
 800bbd4:	b109      	cbz	r1, 800bbda <cleanup_glue+0xe>
 800bbd6:	f7ff fff9 	bl	800bbcc <cleanup_glue>
 800bbda:	4621      	mov	r1, r4
 800bbdc:	4628      	mov	r0, r5
 800bbde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbe2:	f003 b8f1 	b.w	800edc8 <_free_r>
	...

0800bbe8 <_reclaim_reent>:
 800bbe8:	4b2c      	ldr	r3, [pc, #176]	; (800bc9c <_reclaim_reent+0xb4>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4283      	cmp	r3, r0
 800bbee:	b570      	push	{r4, r5, r6, lr}
 800bbf0:	4604      	mov	r4, r0
 800bbf2:	d051      	beq.n	800bc98 <_reclaim_reent+0xb0>
 800bbf4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bbf6:	b143      	cbz	r3, 800bc0a <_reclaim_reent+0x22>
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d14a      	bne.n	800bc94 <_reclaim_reent+0xac>
 800bbfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc00:	6819      	ldr	r1, [r3, #0]
 800bc02:	b111      	cbz	r1, 800bc0a <_reclaim_reent+0x22>
 800bc04:	4620      	mov	r0, r4
 800bc06:	f003 f8df 	bl	800edc8 <_free_r>
 800bc0a:	6961      	ldr	r1, [r4, #20]
 800bc0c:	b111      	cbz	r1, 800bc14 <_reclaim_reent+0x2c>
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f003 f8da 	bl	800edc8 <_free_r>
 800bc14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bc16:	b111      	cbz	r1, 800bc1e <_reclaim_reent+0x36>
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f003 f8d5 	bl	800edc8 <_free_r>
 800bc1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bc20:	b111      	cbz	r1, 800bc28 <_reclaim_reent+0x40>
 800bc22:	4620      	mov	r0, r4
 800bc24:	f003 f8d0 	bl	800edc8 <_free_r>
 800bc28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bc2a:	b111      	cbz	r1, 800bc32 <_reclaim_reent+0x4a>
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f003 f8cb 	bl	800edc8 <_free_r>
 800bc32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bc34:	b111      	cbz	r1, 800bc3c <_reclaim_reent+0x54>
 800bc36:	4620      	mov	r0, r4
 800bc38:	f003 f8c6 	bl	800edc8 <_free_r>
 800bc3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bc3e:	b111      	cbz	r1, 800bc46 <_reclaim_reent+0x5e>
 800bc40:	4620      	mov	r0, r4
 800bc42:	f003 f8c1 	bl	800edc8 <_free_r>
 800bc46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bc48:	b111      	cbz	r1, 800bc50 <_reclaim_reent+0x68>
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f003 f8bc 	bl	800edc8 <_free_r>
 800bc50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc52:	b111      	cbz	r1, 800bc5a <_reclaim_reent+0x72>
 800bc54:	4620      	mov	r0, r4
 800bc56:	f003 f8b7 	bl	800edc8 <_free_r>
 800bc5a:	69a3      	ldr	r3, [r4, #24]
 800bc5c:	b1e3      	cbz	r3, 800bc98 <_reclaim_reent+0xb0>
 800bc5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bc60:	4620      	mov	r0, r4
 800bc62:	4798      	blx	r3
 800bc64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bc66:	b1b9      	cbz	r1, 800bc98 <_reclaim_reent+0xb0>
 800bc68:	4620      	mov	r0, r4
 800bc6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc6e:	f7ff bfad 	b.w	800bbcc <cleanup_glue>
 800bc72:	5949      	ldr	r1, [r1, r5]
 800bc74:	b941      	cbnz	r1, 800bc88 <_reclaim_reent+0xa0>
 800bc76:	3504      	adds	r5, #4
 800bc78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc7a:	2d80      	cmp	r5, #128	; 0x80
 800bc7c:	68d9      	ldr	r1, [r3, #12]
 800bc7e:	d1f8      	bne.n	800bc72 <_reclaim_reent+0x8a>
 800bc80:	4620      	mov	r0, r4
 800bc82:	f003 f8a1 	bl	800edc8 <_free_r>
 800bc86:	e7ba      	b.n	800bbfe <_reclaim_reent+0x16>
 800bc88:	680e      	ldr	r6, [r1, #0]
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f003 f89c 	bl	800edc8 <_free_r>
 800bc90:	4631      	mov	r1, r6
 800bc92:	e7ef      	b.n	800bc74 <_reclaim_reent+0x8c>
 800bc94:	2500      	movs	r5, #0
 800bc96:	e7ef      	b.n	800bc78 <_reclaim_reent+0x90>
 800bc98:	bd70      	pop	{r4, r5, r6, pc}
 800bc9a:	bf00      	nop
 800bc9c:	20000078 	.word	0x20000078

0800bca0 <_sbrk_r>:
 800bca0:	b538      	push	{r3, r4, r5, lr}
 800bca2:	4d06      	ldr	r5, [pc, #24]	; (800bcbc <_sbrk_r+0x1c>)
 800bca4:	2300      	movs	r3, #0
 800bca6:	4604      	mov	r4, r0
 800bca8:	4608      	mov	r0, r1
 800bcaa:	602b      	str	r3, [r5, #0]
 800bcac:	f7f5 fcca 	bl	8001644 <_sbrk>
 800bcb0:	1c43      	adds	r3, r0, #1
 800bcb2:	d102      	bne.n	800bcba <_sbrk_r+0x1a>
 800bcb4:	682b      	ldr	r3, [r5, #0]
 800bcb6:	b103      	cbz	r3, 800bcba <_sbrk_r+0x1a>
 800bcb8:	6023      	str	r3, [r4, #0]
 800bcba:	bd38      	pop	{r3, r4, r5, pc}
 800bcbc:	20008420 	.word	0x20008420

0800bcc0 <nanf>:
 800bcc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bcc8 <nanf+0x8>
 800bcc4:	4770      	bx	lr
 800bcc6:	bf00      	nop
 800bcc8:	7fc00000 	.word	0x7fc00000

0800bccc <sniprintf>:
 800bccc:	b40c      	push	{r2, r3}
 800bcce:	b530      	push	{r4, r5, lr}
 800bcd0:	4b17      	ldr	r3, [pc, #92]	; (800bd30 <sniprintf+0x64>)
 800bcd2:	1e0c      	subs	r4, r1, #0
 800bcd4:	681d      	ldr	r5, [r3, #0]
 800bcd6:	b09d      	sub	sp, #116	; 0x74
 800bcd8:	da08      	bge.n	800bcec <sniprintf+0x20>
 800bcda:	238b      	movs	r3, #139	; 0x8b
 800bcdc:	602b      	str	r3, [r5, #0]
 800bcde:	f04f 30ff 	mov.w	r0, #4294967295
 800bce2:	b01d      	add	sp, #116	; 0x74
 800bce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bce8:	b002      	add	sp, #8
 800bcea:	4770      	bx	lr
 800bcec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bcf0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bcf4:	bf14      	ite	ne
 800bcf6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bcfa:	4623      	moveq	r3, r4
 800bcfc:	9304      	str	r3, [sp, #16]
 800bcfe:	9307      	str	r3, [sp, #28]
 800bd00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd04:	9002      	str	r0, [sp, #8]
 800bd06:	9006      	str	r0, [sp, #24]
 800bd08:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bd0e:	ab21      	add	r3, sp, #132	; 0x84
 800bd10:	a902      	add	r1, sp, #8
 800bd12:	4628      	mov	r0, r5
 800bd14:	9301      	str	r3, [sp, #4]
 800bd16:	f003 f8ff 	bl	800ef18 <_svfiprintf_r>
 800bd1a:	1c43      	adds	r3, r0, #1
 800bd1c:	bfbc      	itt	lt
 800bd1e:	238b      	movlt	r3, #139	; 0x8b
 800bd20:	602b      	strlt	r3, [r5, #0]
 800bd22:	2c00      	cmp	r4, #0
 800bd24:	d0dd      	beq.n	800bce2 <sniprintf+0x16>
 800bd26:	9b02      	ldr	r3, [sp, #8]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	701a      	strb	r2, [r3, #0]
 800bd2c:	e7d9      	b.n	800bce2 <sniprintf+0x16>
 800bd2e:	bf00      	nop
 800bd30:	20000078 	.word	0x20000078

0800bd34 <siprintf>:
 800bd34:	b40e      	push	{r1, r2, r3}
 800bd36:	b500      	push	{lr}
 800bd38:	b09c      	sub	sp, #112	; 0x70
 800bd3a:	ab1d      	add	r3, sp, #116	; 0x74
 800bd3c:	9002      	str	r0, [sp, #8]
 800bd3e:	9006      	str	r0, [sp, #24]
 800bd40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd44:	4809      	ldr	r0, [pc, #36]	; (800bd6c <siprintf+0x38>)
 800bd46:	9107      	str	r1, [sp, #28]
 800bd48:	9104      	str	r1, [sp, #16]
 800bd4a:	4909      	ldr	r1, [pc, #36]	; (800bd70 <siprintf+0x3c>)
 800bd4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd50:	9105      	str	r1, [sp, #20]
 800bd52:	6800      	ldr	r0, [r0, #0]
 800bd54:	9301      	str	r3, [sp, #4]
 800bd56:	a902      	add	r1, sp, #8
 800bd58:	f003 f8de 	bl	800ef18 <_svfiprintf_r>
 800bd5c:	9b02      	ldr	r3, [sp, #8]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	701a      	strb	r2, [r3, #0]
 800bd62:	b01c      	add	sp, #112	; 0x70
 800bd64:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd68:	b003      	add	sp, #12
 800bd6a:	4770      	bx	lr
 800bd6c:	20000078 	.word	0x20000078
 800bd70:	ffff0208 	.word	0xffff0208

0800bd74 <__sread>:
 800bd74:	b510      	push	{r4, lr}
 800bd76:	460c      	mov	r4, r1
 800bd78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd7c:	f003 fb26 	bl	800f3cc <_read_r>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	bfab      	itete	ge
 800bd84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd86:	89a3      	ldrhlt	r3, [r4, #12]
 800bd88:	181b      	addge	r3, r3, r0
 800bd8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd8e:	bfac      	ite	ge
 800bd90:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd92:	81a3      	strhlt	r3, [r4, #12]
 800bd94:	bd10      	pop	{r4, pc}

0800bd96 <__swrite>:
 800bd96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd9a:	461f      	mov	r7, r3
 800bd9c:	898b      	ldrh	r3, [r1, #12]
 800bd9e:	05db      	lsls	r3, r3, #23
 800bda0:	4605      	mov	r5, r0
 800bda2:	460c      	mov	r4, r1
 800bda4:	4616      	mov	r6, r2
 800bda6:	d505      	bpl.n	800bdb4 <__swrite+0x1e>
 800bda8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdac:	2302      	movs	r3, #2
 800bdae:	2200      	movs	r2, #0
 800bdb0:	f002 fa94 	bl	800e2dc <_lseek_r>
 800bdb4:	89a3      	ldrh	r3, [r4, #12]
 800bdb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdbe:	81a3      	strh	r3, [r4, #12]
 800bdc0:	4632      	mov	r2, r6
 800bdc2:	463b      	mov	r3, r7
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdca:	f000 bf17 	b.w	800cbfc <_write_r>

0800bdce <__sseek>:
 800bdce:	b510      	push	{r4, lr}
 800bdd0:	460c      	mov	r4, r1
 800bdd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdd6:	f002 fa81 	bl	800e2dc <_lseek_r>
 800bdda:	1c43      	adds	r3, r0, #1
 800bddc:	89a3      	ldrh	r3, [r4, #12]
 800bdde:	bf15      	itete	ne
 800bde0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bde2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bde6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bdea:	81a3      	strheq	r3, [r4, #12]
 800bdec:	bf18      	it	ne
 800bdee:	81a3      	strhne	r3, [r4, #12]
 800bdf0:	bd10      	pop	{r4, pc}

0800bdf2 <__sclose>:
 800bdf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf6:	f000 bf9f 	b.w	800cd38 <_close_r>

0800bdfa <sulp>:
 800bdfa:	b570      	push	{r4, r5, r6, lr}
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	460d      	mov	r5, r1
 800be00:	ec45 4b10 	vmov	d0, r4, r5
 800be04:	4616      	mov	r6, r2
 800be06:	f002 fe79 	bl	800eafc <__ulp>
 800be0a:	ec51 0b10 	vmov	r0, r1, d0
 800be0e:	b17e      	cbz	r6, 800be30 <sulp+0x36>
 800be10:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800be14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be18:	2b00      	cmp	r3, #0
 800be1a:	dd09      	ble.n	800be30 <sulp+0x36>
 800be1c:	051b      	lsls	r3, r3, #20
 800be1e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800be22:	2400      	movs	r4, #0
 800be24:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800be28:	4622      	mov	r2, r4
 800be2a:	462b      	mov	r3, r5
 800be2c:	f7f4 fbe4 	bl	80005f8 <__aeabi_dmul>
 800be30:	bd70      	pop	{r4, r5, r6, pc}
 800be32:	0000      	movs	r0, r0
 800be34:	0000      	movs	r0, r0
	...

0800be38 <_strtod_l>:
 800be38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	ed2d 8b02 	vpush	{d8}
 800be40:	b09d      	sub	sp, #116	; 0x74
 800be42:	461f      	mov	r7, r3
 800be44:	2300      	movs	r3, #0
 800be46:	9318      	str	r3, [sp, #96]	; 0x60
 800be48:	4ba2      	ldr	r3, [pc, #648]	; (800c0d4 <_strtod_l+0x29c>)
 800be4a:	9213      	str	r2, [sp, #76]	; 0x4c
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	9305      	str	r3, [sp, #20]
 800be50:	4604      	mov	r4, r0
 800be52:	4618      	mov	r0, r3
 800be54:	4688      	mov	r8, r1
 800be56:	f7f4 f9bb 	bl	80001d0 <strlen>
 800be5a:	f04f 0a00 	mov.w	sl, #0
 800be5e:	4605      	mov	r5, r0
 800be60:	f04f 0b00 	mov.w	fp, #0
 800be64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800be68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be6a:	781a      	ldrb	r2, [r3, #0]
 800be6c:	2a2b      	cmp	r2, #43	; 0x2b
 800be6e:	d04e      	beq.n	800bf0e <_strtod_l+0xd6>
 800be70:	d83b      	bhi.n	800beea <_strtod_l+0xb2>
 800be72:	2a0d      	cmp	r2, #13
 800be74:	d834      	bhi.n	800bee0 <_strtod_l+0xa8>
 800be76:	2a08      	cmp	r2, #8
 800be78:	d834      	bhi.n	800bee4 <_strtod_l+0xac>
 800be7a:	2a00      	cmp	r2, #0
 800be7c:	d03e      	beq.n	800befc <_strtod_l+0xc4>
 800be7e:	2300      	movs	r3, #0
 800be80:	930a      	str	r3, [sp, #40]	; 0x28
 800be82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800be84:	7833      	ldrb	r3, [r6, #0]
 800be86:	2b30      	cmp	r3, #48	; 0x30
 800be88:	f040 80b0 	bne.w	800bfec <_strtod_l+0x1b4>
 800be8c:	7873      	ldrb	r3, [r6, #1]
 800be8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800be92:	2b58      	cmp	r3, #88	; 0x58
 800be94:	d168      	bne.n	800bf68 <_strtod_l+0x130>
 800be96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be98:	9301      	str	r3, [sp, #4]
 800be9a:	ab18      	add	r3, sp, #96	; 0x60
 800be9c:	9702      	str	r7, [sp, #8]
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	4a8d      	ldr	r2, [pc, #564]	; (800c0d8 <_strtod_l+0x2a0>)
 800bea2:	ab19      	add	r3, sp, #100	; 0x64
 800bea4:	a917      	add	r1, sp, #92	; 0x5c
 800bea6:	4620      	mov	r0, r4
 800bea8:	f001 ff0c 	bl	800dcc4 <__gethex>
 800beac:	f010 0707 	ands.w	r7, r0, #7
 800beb0:	4605      	mov	r5, r0
 800beb2:	d005      	beq.n	800bec0 <_strtod_l+0x88>
 800beb4:	2f06      	cmp	r7, #6
 800beb6:	d12c      	bne.n	800bf12 <_strtod_l+0xda>
 800beb8:	3601      	adds	r6, #1
 800beba:	2300      	movs	r3, #0
 800bebc:	9617      	str	r6, [sp, #92]	; 0x5c
 800bebe:	930a      	str	r3, [sp, #40]	; 0x28
 800bec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f040 8590 	bne.w	800c9e8 <_strtod_l+0xbb0>
 800bec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beca:	b1eb      	cbz	r3, 800bf08 <_strtod_l+0xd0>
 800becc:	4652      	mov	r2, sl
 800bece:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bed2:	ec43 2b10 	vmov	d0, r2, r3
 800bed6:	b01d      	add	sp, #116	; 0x74
 800bed8:	ecbd 8b02 	vpop	{d8}
 800bedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee0:	2a20      	cmp	r2, #32
 800bee2:	d1cc      	bne.n	800be7e <_strtod_l+0x46>
 800bee4:	3301      	adds	r3, #1
 800bee6:	9317      	str	r3, [sp, #92]	; 0x5c
 800bee8:	e7be      	b.n	800be68 <_strtod_l+0x30>
 800beea:	2a2d      	cmp	r2, #45	; 0x2d
 800beec:	d1c7      	bne.n	800be7e <_strtod_l+0x46>
 800beee:	2201      	movs	r2, #1
 800bef0:	920a      	str	r2, [sp, #40]	; 0x28
 800bef2:	1c5a      	adds	r2, r3, #1
 800bef4:	9217      	str	r2, [sp, #92]	; 0x5c
 800bef6:	785b      	ldrb	r3, [r3, #1]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1c2      	bne.n	800be82 <_strtod_l+0x4a>
 800befc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800befe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f040 856e 	bne.w	800c9e4 <_strtod_l+0xbac>
 800bf08:	4652      	mov	r2, sl
 800bf0a:	465b      	mov	r3, fp
 800bf0c:	e7e1      	b.n	800bed2 <_strtod_l+0x9a>
 800bf0e:	2200      	movs	r2, #0
 800bf10:	e7ee      	b.n	800bef0 <_strtod_l+0xb8>
 800bf12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bf14:	b13a      	cbz	r2, 800bf26 <_strtod_l+0xee>
 800bf16:	2135      	movs	r1, #53	; 0x35
 800bf18:	a81a      	add	r0, sp, #104	; 0x68
 800bf1a:	f002 fefa 	bl	800ed12 <__copybits>
 800bf1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bf20:	4620      	mov	r0, r4
 800bf22:	f002 fab9 	bl	800e498 <_Bfree>
 800bf26:	3f01      	subs	r7, #1
 800bf28:	2f04      	cmp	r7, #4
 800bf2a:	d806      	bhi.n	800bf3a <_strtod_l+0x102>
 800bf2c:	e8df f007 	tbb	[pc, r7]
 800bf30:	1714030a 	.word	0x1714030a
 800bf34:	0a          	.byte	0x0a
 800bf35:	00          	.byte	0x00
 800bf36:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800bf3a:	0728      	lsls	r0, r5, #28
 800bf3c:	d5c0      	bpl.n	800bec0 <_strtod_l+0x88>
 800bf3e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bf42:	e7bd      	b.n	800bec0 <_strtod_l+0x88>
 800bf44:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800bf48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bf4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bf4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bf52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bf56:	e7f0      	b.n	800bf3a <_strtod_l+0x102>
 800bf58:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c0dc <_strtod_l+0x2a4>
 800bf5c:	e7ed      	b.n	800bf3a <_strtod_l+0x102>
 800bf5e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bf62:	f04f 3aff 	mov.w	sl, #4294967295
 800bf66:	e7e8      	b.n	800bf3a <_strtod_l+0x102>
 800bf68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf6a:	1c5a      	adds	r2, r3, #1
 800bf6c:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf6e:	785b      	ldrb	r3, [r3, #1]
 800bf70:	2b30      	cmp	r3, #48	; 0x30
 800bf72:	d0f9      	beq.n	800bf68 <_strtod_l+0x130>
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d0a3      	beq.n	800bec0 <_strtod_l+0x88>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	f04f 0900 	mov.w	r9, #0
 800bf7e:	9304      	str	r3, [sp, #16]
 800bf80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf82:	9308      	str	r3, [sp, #32]
 800bf84:	f8cd 901c 	str.w	r9, [sp, #28]
 800bf88:	464f      	mov	r7, r9
 800bf8a:	220a      	movs	r2, #10
 800bf8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bf8e:	7806      	ldrb	r6, [r0, #0]
 800bf90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bf94:	b2d9      	uxtb	r1, r3
 800bf96:	2909      	cmp	r1, #9
 800bf98:	d92a      	bls.n	800bff0 <_strtod_l+0x1b8>
 800bf9a:	9905      	ldr	r1, [sp, #20]
 800bf9c:	462a      	mov	r2, r5
 800bf9e:	f003 fa2f 	bl	800f400 <strncmp>
 800bfa2:	b398      	cbz	r0, 800c00c <_strtod_l+0x1d4>
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	4632      	mov	r2, r6
 800bfa8:	463d      	mov	r5, r7
 800bfaa:	9005      	str	r0, [sp, #20]
 800bfac:	4603      	mov	r3, r0
 800bfae:	2a65      	cmp	r2, #101	; 0x65
 800bfb0:	d001      	beq.n	800bfb6 <_strtod_l+0x17e>
 800bfb2:	2a45      	cmp	r2, #69	; 0x45
 800bfb4:	d118      	bne.n	800bfe8 <_strtod_l+0x1b0>
 800bfb6:	b91d      	cbnz	r5, 800bfc0 <_strtod_l+0x188>
 800bfb8:	9a04      	ldr	r2, [sp, #16]
 800bfba:	4302      	orrs	r2, r0
 800bfbc:	d09e      	beq.n	800befc <_strtod_l+0xc4>
 800bfbe:	2500      	movs	r5, #0
 800bfc0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800bfc4:	f108 0201 	add.w	r2, r8, #1
 800bfc8:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfca:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bfce:	2a2b      	cmp	r2, #43	; 0x2b
 800bfd0:	d075      	beq.n	800c0be <_strtod_l+0x286>
 800bfd2:	2a2d      	cmp	r2, #45	; 0x2d
 800bfd4:	d07b      	beq.n	800c0ce <_strtod_l+0x296>
 800bfd6:	f04f 0c00 	mov.w	ip, #0
 800bfda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bfde:	2909      	cmp	r1, #9
 800bfe0:	f240 8082 	bls.w	800c0e8 <_strtod_l+0x2b0>
 800bfe4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bfe8:	2600      	movs	r6, #0
 800bfea:	e09d      	b.n	800c128 <_strtod_l+0x2f0>
 800bfec:	2300      	movs	r3, #0
 800bfee:	e7c4      	b.n	800bf7a <_strtod_l+0x142>
 800bff0:	2f08      	cmp	r7, #8
 800bff2:	bfd8      	it	le
 800bff4:	9907      	ldrle	r1, [sp, #28]
 800bff6:	f100 0001 	add.w	r0, r0, #1
 800bffa:	bfda      	itte	le
 800bffc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c000:	9307      	strle	r3, [sp, #28]
 800c002:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c006:	3701      	adds	r7, #1
 800c008:	9017      	str	r0, [sp, #92]	; 0x5c
 800c00a:	e7bf      	b.n	800bf8c <_strtod_l+0x154>
 800c00c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c00e:	195a      	adds	r2, r3, r5
 800c010:	9217      	str	r2, [sp, #92]	; 0x5c
 800c012:	5d5a      	ldrb	r2, [r3, r5]
 800c014:	2f00      	cmp	r7, #0
 800c016:	d037      	beq.n	800c088 <_strtod_l+0x250>
 800c018:	9005      	str	r0, [sp, #20]
 800c01a:	463d      	mov	r5, r7
 800c01c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c020:	2b09      	cmp	r3, #9
 800c022:	d912      	bls.n	800c04a <_strtod_l+0x212>
 800c024:	2301      	movs	r3, #1
 800c026:	e7c2      	b.n	800bfae <_strtod_l+0x176>
 800c028:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c02a:	1c5a      	adds	r2, r3, #1
 800c02c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c02e:	785a      	ldrb	r2, [r3, #1]
 800c030:	3001      	adds	r0, #1
 800c032:	2a30      	cmp	r2, #48	; 0x30
 800c034:	d0f8      	beq.n	800c028 <_strtod_l+0x1f0>
 800c036:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c03a:	2b08      	cmp	r3, #8
 800c03c:	f200 84d9 	bhi.w	800c9f2 <_strtod_l+0xbba>
 800c040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c042:	9005      	str	r0, [sp, #20]
 800c044:	2000      	movs	r0, #0
 800c046:	9308      	str	r3, [sp, #32]
 800c048:	4605      	mov	r5, r0
 800c04a:	3a30      	subs	r2, #48	; 0x30
 800c04c:	f100 0301 	add.w	r3, r0, #1
 800c050:	d014      	beq.n	800c07c <_strtod_l+0x244>
 800c052:	9905      	ldr	r1, [sp, #20]
 800c054:	4419      	add	r1, r3
 800c056:	9105      	str	r1, [sp, #20]
 800c058:	462b      	mov	r3, r5
 800c05a:	eb00 0e05 	add.w	lr, r0, r5
 800c05e:	210a      	movs	r1, #10
 800c060:	4573      	cmp	r3, lr
 800c062:	d113      	bne.n	800c08c <_strtod_l+0x254>
 800c064:	182b      	adds	r3, r5, r0
 800c066:	2b08      	cmp	r3, #8
 800c068:	f105 0501 	add.w	r5, r5, #1
 800c06c:	4405      	add	r5, r0
 800c06e:	dc1c      	bgt.n	800c0aa <_strtod_l+0x272>
 800c070:	9907      	ldr	r1, [sp, #28]
 800c072:	230a      	movs	r3, #10
 800c074:	fb03 2301 	mla	r3, r3, r1, r2
 800c078:	9307      	str	r3, [sp, #28]
 800c07a:	2300      	movs	r3, #0
 800c07c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c07e:	1c51      	adds	r1, r2, #1
 800c080:	9117      	str	r1, [sp, #92]	; 0x5c
 800c082:	7852      	ldrb	r2, [r2, #1]
 800c084:	4618      	mov	r0, r3
 800c086:	e7c9      	b.n	800c01c <_strtod_l+0x1e4>
 800c088:	4638      	mov	r0, r7
 800c08a:	e7d2      	b.n	800c032 <_strtod_l+0x1fa>
 800c08c:	2b08      	cmp	r3, #8
 800c08e:	dc04      	bgt.n	800c09a <_strtod_l+0x262>
 800c090:	9e07      	ldr	r6, [sp, #28]
 800c092:	434e      	muls	r6, r1
 800c094:	9607      	str	r6, [sp, #28]
 800c096:	3301      	adds	r3, #1
 800c098:	e7e2      	b.n	800c060 <_strtod_l+0x228>
 800c09a:	f103 0c01 	add.w	ip, r3, #1
 800c09e:	f1bc 0f10 	cmp.w	ip, #16
 800c0a2:	bfd8      	it	le
 800c0a4:	fb01 f909 	mulle.w	r9, r1, r9
 800c0a8:	e7f5      	b.n	800c096 <_strtod_l+0x25e>
 800c0aa:	2d10      	cmp	r5, #16
 800c0ac:	bfdc      	itt	le
 800c0ae:	230a      	movle	r3, #10
 800c0b0:	fb03 2909 	mlale	r9, r3, r9, r2
 800c0b4:	e7e1      	b.n	800c07a <_strtod_l+0x242>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	9305      	str	r3, [sp, #20]
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e77c      	b.n	800bfb8 <_strtod_l+0x180>
 800c0be:	f04f 0c00 	mov.w	ip, #0
 800c0c2:	f108 0202 	add.w	r2, r8, #2
 800c0c6:	9217      	str	r2, [sp, #92]	; 0x5c
 800c0c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c0cc:	e785      	b.n	800bfda <_strtod_l+0x1a2>
 800c0ce:	f04f 0c01 	mov.w	ip, #1
 800c0d2:	e7f6      	b.n	800c0c2 <_strtod_l+0x28a>
 800c0d4:	0800fa3c 	.word	0x0800fa3c
 800c0d8:	0800f7b4 	.word	0x0800f7b4
 800c0dc:	7ff00000 	.word	0x7ff00000
 800c0e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c0e2:	1c51      	adds	r1, r2, #1
 800c0e4:	9117      	str	r1, [sp, #92]	; 0x5c
 800c0e6:	7852      	ldrb	r2, [r2, #1]
 800c0e8:	2a30      	cmp	r2, #48	; 0x30
 800c0ea:	d0f9      	beq.n	800c0e0 <_strtod_l+0x2a8>
 800c0ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c0f0:	2908      	cmp	r1, #8
 800c0f2:	f63f af79 	bhi.w	800bfe8 <_strtod_l+0x1b0>
 800c0f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c0fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c0fc:	9206      	str	r2, [sp, #24]
 800c0fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c100:	1c51      	adds	r1, r2, #1
 800c102:	9117      	str	r1, [sp, #92]	; 0x5c
 800c104:	7852      	ldrb	r2, [r2, #1]
 800c106:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c10a:	2e09      	cmp	r6, #9
 800c10c:	d937      	bls.n	800c17e <_strtod_l+0x346>
 800c10e:	9e06      	ldr	r6, [sp, #24]
 800c110:	1b89      	subs	r1, r1, r6
 800c112:	2908      	cmp	r1, #8
 800c114:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c118:	dc02      	bgt.n	800c120 <_strtod_l+0x2e8>
 800c11a:	4576      	cmp	r6, lr
 800c11c:	bfa8      	it	ge
 800c11e:	4676      	movge	r6, lr
 800c120:	f1bc 0f00 	cmp.w	ip, #0
 800c124:	d000      	beq.n	800c128 <_strtod_l+0x2f0>
 800c126:	4276      	negs	r6, r6
 800c128:	2d00      	cmp	r5, #0
 800c12a:	d14d      	bne.n	800c1c8 <_strtod_l+0x390>
 800c12c:	9904      	ldr	r1, [sp, #16]
 800c12e:	4301      	orrs	r1, r0
 800c130:	f47f aec6 	bne.w	800bec0 <_strtod_l+0x88>
 800c134:	2b00      	cmp	r3, #0
 800c136:	f47f aee1 	bne.w	800befc <_strtod_l+0xc4>
 800c13a:	2a69      	cmp	r2, #105	; 0x69
 800c13c:	d027      	beq.n	800c18e <_strtod_l+0x356>
 800c13e:	dc24      	bgt.n	800c18a <_strtod_l+0x352>
 800c140:	2a49      	cmp	r2, #73	; 0x49
 800c142:	d024      	beq.n	800c18e <_strtod_l+0x356>
 800c144:	2a4e      	cmp	r2, #78	; 0x4e
 800c146:	f47f aed9 	bne.w	800befc <_strtod_l+0xc4>
 800c14a:	499f      	ldr	r1, [pc, #636]	; (800c3c8 <_strtod_l+0x590>)
 800c14c:	a817      	add	r0, sp, #92	; 0x5c
 800c14e:	f002 f811 	bl	800e174 <__match>
 800c152:	2800      	cmp	r0, #0
 800c154:	f43f aed2 	beq.w	800befc <_strtod_l+0xc4>
 800c158:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	2b28      	cmp	r3, #40	; 0x28
 800c15e:	d12d      	bne.n	800c1bc <_strtod_l+0x384>
 800c160:	499a      	ldr	r1, [pc, #616]	; (800c3cc <_strtod_l+0x594>)
 800c162:	aa1a      	add	r2, sp, #104	; 0x68
 800c164:	a817      	add	r0, sp, #92	; 0x5c
 800c166:	f002 f819 	bl	800e19c <__hexnan>
 800c16a:	2805      	cmp	r0, #5
 800c16c:	d126      	bne.n	800c1bc <_strtod_l+0x384>
 800c16e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c170:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c174:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c178:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c17c:	e6a0      	b.n	800bec0 <_strtod_l+0x88>
 800c17e:	210a      	movs	r1, #10
 800c180:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c184:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c188:	e7b9      	b.n	800c0fe <_strtod_l+0x2c6>
 800c18a:	2a6e      	cmp	r2, #110	; 0x6e
 800c18c:	e7db      	b.n	800c146 <_strtod_l+0x30e>
 800c18e:	4990      	ldr	r1, [pc, #576]	; (800c3d0 <_strtod_l+0x598>)
 800c190:	a817      	add	r0, sp, #92	; 0x5c
 800c192:	f001 ffef 	bl	800e174 <__match>
 800c196:	2800      	cmp	r0, #0
 800c198:	f43f aeb0 	beq.w	800befc <_strtod_l+0xc4>
 800c19c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c19e:	498d      	ldr	r1, [pc, #564]	; (800c3d4 <_strtod_l+0x59c>)
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	a817      	add	r0, sp, #92	; 0x5c
 800c1a4:	9317      	str	r3, [sp, #92]	; 0x5c
 800c1a6:	f001 ffe5 	bl	800e174 <__match>
 800c1aa:	b910      	cbnz	r0, 800c1b2 <_strtod_l+0x37a>
 800c1ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	9317      	str	r3, [sp, #92]	; 0x5c
 800c1b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c3e4 <_strtod_l+0x5ac>
 800c1b6:	f04f 0a00 	mov.w	sl, #0
 800c1ba:	e681      	b.n	800bec0 <_strtod_l+0x88>
 800c1bc:	4886      	ldr	r0, [pc, #536]	; (800c3d8 <_strtod_l+0x5a0>)
 800c1be:	f003 f917 	bl	800f3f0 <nan>
 800c1c2:	ec5b ab10 	vmov	sl, fp, d0
 800c1c6:	e67b      	b.n	800bec0 <_strtod_l+0x88>
 800c1c8:	9b05      	ldr	r3, [sp, #20]
 800c1ca:	9807      	ldr	r0, [sp, #28]
 800c1cc:	1af3      	subs	r3, r6, r3
 800c1ce:	2f00      	cmp	r7, #0
 800c1d0:	bf08      	it	eq
 800c1d2:	462f      	moveq	r7, r5
 800c1d4:	2d10      	cmp	r5, #16
 800c1d6:	9306      	str	r3, [sp, #24]
 800c1d8:	46a8      	mov	r8, r5
 800c1da:	bfa8      	it	ge
 800c1dc:	f04f 0810 	movge.w	r8, #16
 800c1e0:	f7f4 f990 	bl	8000504 <__aeabi_ui2d>
 800c1e4:	2d09      	cmp	r5, #9
 800c1e6:	4682      	mov	sl, r0
 800c1e8:	468b      	mov	fp, r1
 800c1ea:	dd13      	ble.n	800c214 <_strtod_l+0x3dc>
 800c1ec:	4b7b      	ldr	r3, [pc, #492]	; (800c3dc <_strtod_l+0x5a4>)
 800c1ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c1f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c1f6:	f7f4 f9ff 	bl	80005f8 <__aeabi_dmul>
 800c1fa:	4682      	mov	sl, r0
 800c1fc:	4648      	mov	r0, r9
 800c1fe:	468b      	mov	fp, r1
 800c200:	f7f4 f980 	bl	8000504 <__aeabi_ui2d>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	4650      	mov	r0, sl
 800c20a:	4659      	mov	r1, fp
 800c20c:	f7f4 f83e 	bl	800028c <__adddf3>
 800c210:	4682      	mov	sl, r0
 800c212:	468b      	mov	fp, r1
 800c214:	2d0f      	cmp	r5, #15
 800c216:	dc38      	bgt.n	800c28a <_strtod_l+0x452>
 800c218:	9b06      	ldr	r3, [sp, #24]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f43f ae50 	beq.w	800bec0 <_strtod_l+0x88>
 800c220:	dd24      	ble.n	800c26c <_strtod_l+0x434>
 800c222:	2b16      	cmp	r3, #22
 800c224:	dc0b      	bgt.n	800c23e <_strtod_l+0x406>
 800c226:	496d      	ldr	r1, [pc, #436]	; (800c3dc <_strtod_l+0x5a4>)
 800c228:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c22c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c230:	4652      	mov	r2, sl
 800c232:	465b      	mov	r3, fp
 800c234:	f7f4 f9e0 	bl	80005f8 <__aeabi_dmul>
 800c238:	4682      	mov	sl, r0
 800c23a:	468b      	mov	fp, r1
 800c23c:	e640      	b.n	800bec0 <_strtod_l+0x88>
 800c23e:	9a06      	ldr	r2, [sp, #24]
 800c240:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c244:	4293      	cmp	r3, r2
 800c246:	db20      	blt.n	800c28a <_strtod_l+0x452>
 800c248:	4c64      	ldr	r4, [pc, #400]	; (800c3dc <_strtod_l+0x5a4>)
 800c24a:	f1c5 050f 	rsb	r5, r5, #15
 800c24e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c252:	4652      	mov	r2, sl
 800c254:	465b      	mov	r3, fp
 800c256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c25a:	f7f4 f9cd 	bl	80005f8 <__aeabi_dmul>
 800c25e:	9b06      	ldr	r3, [sp, #24]
 800c260:	1b5d      	subs	r5, r3, r5
 800c262:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c266:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c26a:	e7e3      	b.n	800c234 <_strtod_l+0x3fc>
 800c26c:	9b06      	ldr	r3, [sp, #24]
 800c26e:	3316      	adds	r3, #22
 800c270:	db0b      	blt.n	800c28a <_strtod_l+0x452>
 800c272:	9b05      	ldr	r3, [sp, #20]
 800c274:	1b9e      	subs	r6, r3, r6
 800c276:	4b59      	ldr	r3, [pc, #356]	; (800c3dc <_strtod_l+0x5a4>)
 800c278:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c27c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c280:	4650      	mov	r0, sl
 800c282:	4659      	mov	r1, fp
 800c284:	f7f4 fae2 	bl	800084c <__aeabi_ddiv>
 800c288:	e7d6      	b.n	800c238 <_strtod_l+0x400>
 800c28a:	9b06      	ldr	r3, [sp, #24]
 800c28c:	eba5 0808 	sub.w	r8, r5, r8
 800c290:	4498      	add	r8, r3
 800c292:	f1b8 0f00 	cmp.w	r8, #0
 800c296:	dd74      	ble.n	800c382 <_strtod_l+0x54a>
 800c298:	f018 030f 	ands.w	r3, r8, #15
 800c29c:	d00a      	beq.n	800c2b4 <_strtod_l+0x47c>
 800c29e:	494f      	ldr	r1, [pc, #316]	; (800c3dc <_strtod_l+0x5a4>)
 800c2a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c2a4:	4652      	mov	r2, sl
 800c2a6:	465b      	mov	r3, fp
 800c2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2ac:	f7f4 f9a4 	bl	80005f8 <__aeabi_dmul>
 800c2b0:	4682      	mov	sl, r0
 800c2b2:	468b      	mov	fp, r1
 800c2b4:	f038 080f 	bics.w	r8, r8, #15
 800c2b8:	d04f      	beq.n	800c35a <_strtod_l+0x522>
 800c2ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c2be:	dd22      	ble.n	800c306 <_strtod_l+0x4ce>
 800c2c0:	2500      	movs	r5, #0
 800c2c2:	462e      	mov	r6, r5
 800c2c4:	9507      	str	r5, [sp, #28]
 800c2c6:	9505      	str	r5, [sp, #20]
 800c2c8:	2322      	movs	r3, #34	; 0x22
 800c2ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c3e4 <_strtod_l+0x5ac>
 800c2ce:	6023      	str	r3, [r4, #0]
 800c2d0:	f04f 0a00 	mov.w	sl, #0
 800c2d4:	9b07      	ldr	r3, [sp, #28]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f43f adf2 	beq.w	800bec0 <_strtod_l+0x88>
 800c2dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f002 f8da 	bl	800e498 <_Bfree>
 800c2e4:	9905      	ldr	r1, [sp, #20]
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	f002 f8d6 	bl	800e498 <_Bfree>
 800c2ec:	4631      	mov	r1, r6
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	f002 f8d2 	bl	800e498 <_Bfree>
 800c2f4:	9907      	ldr	r1, [sp, #28]
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f002 f8ce 	bl	800e498 <_Bfree>
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	4620      	mov	r0, r4
 800c300:	f002 f8ca 	bl	800e498 <_Bfree>
 800c304:	e5dc      	b.n	800bec0 <_strtod_l+0x88>
 800c306:	4b36      	ldr	r3, [pc, #216]	; (800c3e0 <_strtod_l+0x5a8>)
 800c308:	9304      	str	r3, [sp, #16]
 800c30a:	2300      	movs	r3, #0
 800c30c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c310:	4650      	mov	r0, sl
 800c312:	4659      	mov	r1, fp
 800c314:	4699      	mov	r9, r3
 800c316:	f1b8 0f01 	cmp.w	r8, #1
 800c31a:	dc21      	bgt.n	800c360 <_strtod_l+0x528>
 800c31c:	b10b      	cbz	r3, 800c322 <_strtod_l+0x4ea>
 800c31e:	4682      	mov	sl, r0
 800c320:	468b      	mov	fp, r1
 800c322:	4b2f      	ldr	r3, [pc, #188]	; (800c3e0 <_strtod_l+0x5a8>)
 800c324:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c328:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c32c:	4652      	mov	r2, sl
 800c32e:	465b      	mov	r3, fp
 800c330:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c334:	f7f4 f960 	bl	80005f8 <__aeabi_dmul>
 800c338:	4b2a      	ldr	r3, [pc, #168]	; (800c3e4 <_strtod_l+0x5ac>)
 800c33a:	460a      	mov	r2, r1
 800c33c:	400b      	ands	r3, r1
 800c33e:	492a      	ldr	r1, [pc, #168]	; (800c3e8 <_strtod_l+0x5b0>)
 800c340:	428b      	cmp	r3, r1
 800c342:	4682      	mov	sl, r0
 800c344:	d8bc      	bhi.n	800c2c0 <_strtod_l+0x488>
 800c346:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c34a:	428b      	cmp	r3, r1
 800c34c:	bf86      	itte	hi
 800c34e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c3ec <_strtod_l+0x5b4>
 800c352:	f04f 3aff 	movhi.w	sl, #4294967295
 800c356:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c35a:	2300      	movs	r3, #0
 800c35c:	9304      	str	r3, [sp, #16]
 800c35e:	e084      	b.n	800c46a <_strtod_l+0x632>
 800c360:	f018 0f01 	tst.w	r8, #1
 800c364:	d005      	beq.n	800c372 <_strtod_l+0x53a>
 800c366:	9b04      	ldr	r3, [sp, #16]
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	f7f4 f944 	bl	80005f8 <__aeabi_dmul>
 800c370:	2301      	movs	r3, #1
 800c372:	9a04      	ldr	r2, [sp, #16]
 800c374:	3208      	adds	r2, #8
 800c376:	f109 0901 	add.w	r9, r9, #1
 800c37a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c37e:	9204      	str	r2, [sp, #16]
 800c380:	e7c9      	b.n	800c316 <_strtod_l+0x4de>
 800c382:	d0ea      	beq.n	800c35a <_strtod_l+0x522>
 800c384:	f1c8 0800 	rsb	r8, r8, #0
 800c388:	f018 020f 	ands.w	r2, r8, #15
 800c38c:	d00a      	beq.n	800c3a4 <_strtod_l+0x56c>
 800c38e:	4b13      	ldr	r3, [pc, #76]	; (800c3dc <_strtod_l+0x5a4>)
 800c390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c394:	4650      	mov	r0, sl
 800c396:	4659      	mov	r1, fp
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	f7f4 fa56 	bl	800084c <__aeabi_ddiv>
 800c3a0:	4682      	mov	sl, r0
 800c3a2:	468b      	mov	fp, r1
 800c3a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c3a8:	d0d7      	beq.n	800c35a <_strtod_l+0x522>
 800c3aa:	f1b8 0f1f 	cmp.w	r8, #31
 800c3ae:	dd1f      	ble.n	800c3f0 <_strtod_l+0x5b8>
 800c3b0:	2500      	movs	r5, #0
 800c3b2:	462e      	mov	r6, r5
 800c3b4:	9507      	str	r5, [sp, #28]
 800c3b6:	9505      	str	r5, [sp, #20]
 800c3b8:	2322      	movs	r3, #34	; 0x22
 800c3ba:	f04f 0a00 	mov.w	sl, #0
 800c3be:	f04f 0b00 	mov.w	fp, #0
 800c3c2:	6023      	str	r3, [r4, #0]
 800c3c4:	e786      	b.n	800c2d4 <_strtod_l+0x49c>
 800c3c6:	bf00      	nop
 800c3c8:	0800f785 	.word	0x0800f785
 800c3cc:	0800f7c8 	.word	0x0800f7c8
 800c3d0:	0800f77d 	.word	0x0800f77d
 800c3d4:	0800f948 	.word	0x0800f948
 800c3d8:	0800f843 	.word	0x0800f843
 800c3dc:	0800fad8 	.word	0x0800fad8
 800c3e0:	0800fab0 	.word	0x0800fab0
 800c3e4:	7ff00000 	.word	0x7ff00000
 800c3e8:	7ca00000 	.word	0x7ca00000
 800c3ec:	7fefffff 	.word	0x7fefffff
 800c3f0:	f018 0310 	ands.w	r3, r8, #16
 800c3f4:	bf18      	it	ne
 800c3f6:	236a      	movne	r3, #106	; 0x6a
 800c3f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c7a8 <_strtod_l+0x970>
 800c3fc:	9304      	str	r3, [sp, #16]
 800c3fe:	4650      	mov	r0, sl
 800c400:	4659      	mov	r1, fp
 800c402:	2300      	movs	r3, #0
 800c404:	f018 0f01 	tst.w	r8, #1
 800c408:	d004      	beq.n	800c414 <_strtod_l+0x5dc>
 800c40a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c40e:	f7f4 f8f3 	bl	80005f8 <__aeabi_dmul>
 800c412:	2301      	movs	r3, #1
 800c414:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c418:	f109 0908 	add.w	r9, r9, #8
 800c41c:	d1f2      	bne.n	800c404 <_strtod_l+0x5cc>
 800c41e:	b10b      	cbz	r3, 800c424 <_strtod_l+0x5ec>
 800c420:	4682      	mov	sl, r0
 800c422:	468b      	mov	fp, r1
 800c424:	9b04      	ldr	r3, [sp, #16]
 800c426:	b1c3      	cbz	r3, 800c45a <_strtod_l+0x622>
 800c428:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c42c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c430:	2b00      	cmp	r3, #0
 800c432:	4659      	mov	r1, fp
 800c434:	dd11      	ble.n	800c45a <_strtod_l+0x622>
 800c436:	2b1f      	cmp	r3, #31
 800c438:	f340 8124 	ble.w	800c684 <_strtod_l+0x84c>
 800c43c:	2b34      	cmp	r3, #52	; 0x34
 800c43e:	bfde      	ittt	le
 800c440:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c444:	f04f 33ff 	movle.w	r3, #4294967295
 800c448:	fa03 f202 	lslle.w	r2, r3, r2
 800c44c:	f04f 0a00 	mov.w	sl, #0
 800c450:	bfcc      	ite	gt
 800c452:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c456:	ea02 0b01 	andle.w	fp, r2, r1
 800c45a:	2200      	movs	r2, #0
 800c45c:	2300      	movs	r3, #0
 800c45e:	4650      	mov	r0, sl
 800c460:	4659      	mov	r1, fp
 800c462:	f7f4 fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 800c466:	2800      	cmp	r0, #0
 800c468:	d1a2      	bne.n	800c3b0 <_strtod_l+0x578>
 800c46a:	9b07      	ldr	r3, [sp, #28]
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	9908      	ldr	r1, [sp, #32]
 800c470:	462b      	mov	r3, r5
 800c472:	463a      	mov	r2, r7
 800c474:	4620      	mov	r0, r4
 800c476:	f002 f877 	bl	800e568 <__s2b>
 800c47a:	9007      	str	r0, [sp, #28]
 800c47c:	2800      	cmp	r0, #0
 800c47e:	f43f af1f 	beq.w	800c2c0 <_strtod_l+0x488>
 800c482:	9b05      	ldr	r3, [sp, #20]
 800c484:	1b9e      	subs	r6, r3, r6
 800c486:	9b06      	ldr	r3, [sp, #24]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	bfb4      	ite	lt
 800c48c:	4633      	movlt	r3, r6
 800c48e:	2300      	movge	r3, #0
 800c490:	930c      	str	r3, [sp, #48]	; 0x30
 800c492:	9b06      	ldr	r3, [sp, #24]
 800c494:	2500      	movs	r5, #0
 800c496:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c49a:	9312      	str	r3, [sp, #72]	; 0x48
 800c49c:	462e      	mov	r6, r5
 800c49e:	9b07      	ldr	r3, [sp, #28]
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	6859      	ldr	r1, [r3, #4]
 800c4a4:	f001 ffb8 	bl	800e418 <_Balloc>
 800c4a8:	9005      	str	r0, [sp, #20]
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	f43f af0c 	beq.w	800c2c8 <_strtod_l+0x490>
 800c4b0:	9b07      	ldr	r3, [sp, #28]
 800c4b2:	691a      	ldr	r2, [r3, #16]
 800c4b4:	3202      	adds	r2, #2
 800c4b6:	f103 010c 	add.w	r1, r3, #12
 800c4ba:	0092      	lsls	r2, r2, #2
 800c4bc:	300c      	adds	r0, #12
 800c4be:	f7fe fc60 	bl	800ad82 <memcpy>
 800c4c2:	ec4b ab10 	vmov	d0, sl, fp
 800c4c6:	aa1a      	add	r2, sp, #104	; 0x68
 800c4c8:	a919      	add	r1, sp, #100	; 0x64
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f002 fb92 	bl	800ebf4 <__d2b>
 800c4d0:	ec4b ab18 	vmov	d8, sl, fp
 800c4d4:	9018      	str	r0, [sp, #96]	; 0x60
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	f43f aef6 	beq.w	800c2c8 <_strtod_l+0x490>
 800c4dc:	2101      	movs	r1, #1
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f002 f8dc 	bl	800e69c <__i2b>
 800c4e4:	4606      	mov	r6, r0
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	f43f aeee 	beq.w	800c2c8 <_strtod_l+0x490>
 800c4ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c4ee:	9904      	ldr	r1, [sp, #16]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	bfab      	itete	ge
 800c4f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c4f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c4f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c4fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c4fe:	bfac      	ite	ge
 800c500:	eb03 0902 	addge.w	r9, r3, r2
 800c504:	1ad7      	sublt	r7, r2, r3
 800c506:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c508:	eba3 0801 	sub.w	r8, r3, r1
 800c50c:	4490      	add	r8, r2
 800c50e:	4ba1      	ldr	r3, [pc, #644]	; (800c794 <_strtod_l+0x95c>)
 800c510:	f108 38ff 	add.w	r8, r8, #4294967295
 800c514:	4598      	cmp	r8, r3
 800c516:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c51a:	f280 80c7 	bge.w	800c6ac <_strtod_l+0x874>
 800c51e:	eba3 0308 	sub.w	r3, r3, r8
 800c522:	2b1f      	cmp	r3, #31
 800c524:	eba2 0203 	sub.w	r2, r2, r3
 800c528:	f04f 0101 	mov.w	r1, #1
 800c52c:	f300 80b1 	bgt.w	800c692 <_strtod_l+0x85a>
 800c530:	fa01 f303 	lsl.w	r3, r1, r3
 800c534:	930d      	str	r3, [sp, #52]	; 0x34
 800c536:	2300      	movs	r3, #0
 800c538:	9308      	str	r3, [sp, #32]
 800c53a:	eb09 0802 	add.w	r8, r9, r2
 800c53e:	9b04      	ldr	r3, [sp, #16]
 800c540:	45c1      	cmp	r9, r8
 800c542:	4417      	add	r7, r2
 800c544:	441f      	add	r7, r3
 800c546:	464b      	mov	r3, r9
 800c548:	bfa8      	it	ge
 800c54a:	4643      	movge	r3, r8
 800c54c:	42bb      	cmp	r3, r7
 800c54e:	bfa8      	it	ge
 800c550:	463b      	movge	r3, r7
 800c552:	2b00      	cmp	r3, #0
 800c554:	bfc2      	ittt	gt
 800c556:	eba8 0803 	subgt.w	r8, r8, r3
 800c55a:	1aff      	subgt	r7, r7, r3
 800c55c:	eba9 0903 	subgt.w	r9, r9, r3
 800c560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c562:	2b00      	cmp	r3, #0
 800c564:	dd17      	ble.n	800c596 <_strtod_l+0x75e>
 800c566:	4631      	mov	r1, r6
 800c568:	461a      	mov	r2, r3
 800c56a:	4620      	mov	r0, r4
 800c56c:	f002 f956 	bl	800e81c <__pow5mult>
 800c570:	4606      	mov	r6, r0
 800c572:	2800      	cmp	r0, #0
 800c574:	f43f aea8 	beq.w	800c2c8 <_strtod_l+0x490>
 800c578:	4601      	mov	r1, r0
 800c57a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c57c:	4620      	mov	r0, r4
 800c57e:	f002 f8a3 	bl	800e6c8 <__multiply>
 800c582:	900b      	str	r0, [sp, #44]	; 0x2c
 800c584:	2800      	cmp	r0, #0
 800c586:	f43f ae9f 	beq.w	800c2c8 <_strtod_l+0x490>
 800c58a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c58c:	4620      	mov	r0, r4
 800c58e:	f001 ff83 	bl	800e498 <_Bfree>
 800c592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c594:	9318      	str	r3, [sp, #96]	; 0x60
 800c596:	f1b8 0f00 	cmp.w	r8, #0
 800c59a:	f300 808c 	bgt.w	800c6b6 <_strtod_l+0x87e>
 800c59e:	9b06      	ldr	r3, [sp, #24]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	dd08      	ble.n	800c5b6 <_strtod_l+0x77e>
 800c5a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c5a6:	9905      	ldr	r1, [sp, #20]
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f002 f937 	bl	800e81c <__pow5mult>
 800c5ae:	9005      	str	r0, [sp, #20]
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	f43f ae89 	beq.w	800c2c8 <_strtod_l+0x490>
 800c5b6:	2f00      	cmp	r7, #0
 800c5b8:	dd08      	ble.n	800c5cc <_strtod_l+0x794>
 800c5ba:	9905      	ldr	r1, [sp, #20]
 800c5bc:	463a      	mov	r2, r7
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f002 f986 	bl	800e8d0 <__lshift>
 800c5c4:	9005      	str	r0, [sp, #20]
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	f43f ae7e 	beq.w	800c2c8 <_strtod_l+0x490>
 800c5cc:	f1b9 0f00 	cmp.w	r9, #0
 800c5d0:	dd08      	ble.n	800c5e4 <_strtod_l+0x7ac>
 800c5d2:	4631      	mov	r1, r6
 800c5d4:	464a      	mov	r2, r9
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f002 f97a 	bl	800e8d0 <__lshift>
 800c5dc:	4606      	mov	r6, r0
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	f43f ae72 	beq.w	800c2c8 <_strtod_l+0x490>
 800c5e4:	9a05      	ldr	r2, [sp, #20]
 800c5e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f002 f9fd 	bl	800e9e8 <__mdiff>
 800c5ee:	4605      	mov	r5, r0
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	f43f ae69 	beq.w	800c2c8 <_strtod_l+0x490>
 800c5f6:	68c3      	ldr	r3, [r0, #12]
 800c5f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	60c3      	str	r3, [r0, #12]
 800c5fe:	4631      	mov	r1, r6
 800c600:	f002 f9d6 	bl	800e9b0 <__mcmp>
 800c604:	2800      	cmp	r0, #0
 800c606:	da60      	bge.n	800c6ca <_strtod_l+0x892>
 800c608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c60a:	ea53 030a 	orrs.w	r3, r3, sl
 800c60e:	f040 8082 	bne.w	800c716 <_strtod_l+0x8de>
 800c612:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c616:	2b00      	cmp	r3, #0
 800c618:	d17d      	bne.n	800c716 <_strtod_l+0x8de>
 800c61a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c61e:	0d1b      	lsrs	r3, r3, #20
 800c620:	051b      	lsls	r3, r3, #20
 800c622:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c626:	d976      	bls.n	800c716 <_strtod_l+0x8de>
 800c628:	696b      	ldr	r3, [r5, #20]
 800c62a:	b913      	cbnz	r3, 800c632 <_strtod_l+0x7fa>
 800c62c:	692b      	ldr	r3, [r5, #16]
 800c62e:	2b01      	cmp	r3, #1
 800c630:	dd71      	ble.n	800c716 <_strtod_l+0x8de>
 800c632:	4629      	mov	r1, r5
 800c634:	2201      	movs	r2, #1
 800c636:	4620      	mov	r0, r4
 800c638:	f002 f94a 	bl	800e8d0 <__lshift>
 800c63c:	4631      	mov	r1, r6
 800c63e:	4605      	mov	r5, r0
 800c640:	f002 f9b6 	bl	800e9b0 <__mcmp>
 800c644:	2800      	cmp	r0, #0
 800c646:	dd66      	ble.n	800c716 <_strtod_l+0x8de>
 800c648:	9904      	ldr	r1, [sp, #16]
 800c64a:	4a53      	ldr	r2, [pc, #332]	; (800c798 <_strtod_l+0x960>)
 800c64c:	465b      	mov	r3, fp
 800c64e:	2900      	cmp	r1, #0
 800c650:	f000 8081 	beq.w	800c756 <_strtod_l+0x91e>
 800c654:	ea02 010b 	and.w	r1, r2, fp
 800c658:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c65c:	dc7b      	bgt.n	800c756 <_strtod_l+0x91e>
 800c65e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c662:	f77f aea9 	ble.w	800c3b8 <_strtod_l+0x580>
 800c666:	4b4d      	ldr	r3, [pc, #308]	; (800c79c <_strtod_l+0x964>)
 800c668:	4650      	mov	r0, sl
 800c66a:	4659      	mov	r1, fp
 800c66c:	2200      	movs	r2, #0
 800c66e:	f7f3 ffc3 	bl	80005f8 <__aeabi_dmul>
 800c672:	460b      	mov	r3, r1
 800c674:	4303      	orrs	r3, r0
 800c676:	bf08      	it	eq
 800c678:	2322      	moveq	r3, #34	; 0x22
 800c67a:	4682      	mov	sl, r0
 800c67c:	468b      	mov	fp, r1
 800c67e:	bf08      	it	eq
 800c680:	6023      	streq	r3, [r4, #0]
 800c682:	e62b      	b.n	800c2dc <_strtod_l+0x4a4>
 800c684:	f04f 32ff 	mov.w	r2, #4294967295
 800c688:	fa02 f303 	lsl.w	r3, r2, r3
 800c68c:	ea03 0a0a 	and.w	sl, r3, sl
 800c690:	e6e3      	b.n	800c45a <_strtod_l+0x622>
 800c692:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c696:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c69a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c69e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c6a2:	fa01 f308 	lsl.w	r3, r1, r8
 800c6a6:	9308      	str	r3, [sp, #32]
 800c6a8:	910d      	str	r1, [sp, #52]	; 0x34
 800c6aa:	e746      	b.n	800c53a <_strtod_l+0x702>
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	9308      	str	r3, [sp, #32]
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	930d      	str	r3, [sp, #52]	; 0x34
 800c6b4:	e741      	b.n	800c53a <_strtod_l+0x702>
 800c6b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c6b8:	4642      	mov	r2, r8
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f002 f908 	bl	800e8d0 <__lshift>
 800c6c0:	9018      	str	r0, [sp, #96]	; 0x60
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	f47f af6b 	bne.w	800c59e <_strtod_l+0x766>
 800c6c8:	e5fe      	b.n	800c2c8 <_strtod_l+0x490>
 800c6ca:	465f      	mov	r7, fp
 800c6cc:	d16e      	bne.n	800c7ac <_strtod_l+0x974>
 800c6ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c6d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6d4:	b342      	cbz	r2, 800c728 <_strtod_l+0x8f0>
 800c6d6:	4a32      	ldr	r2, [pc, #200]	; (800c7a0 <_strtod_l+0x968>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d128      	bne.n	800c72e <_strtod_l+0x8f6>
 800c6dc:	9b04      	ldr	r3, [sp, #16]
 800c6de:	4651      	mov	r1, sl
 800c6e0:	b1eb      	cbz	r3, 800c71e <_strtod_l+0x8e6>
 800c6e2:	4b2d      	ldr	r3, [pc, #180]	; (800c798 <_strtod_l+0x960>)
 800c6e4:	403b      	ands	r3, r7
 800c6e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ee:	d819      	bhi.n	800c724 <_strtod_l+0x8ec>
 800c6f0:	0d1b      	lsrs	r3, r3, #20
 800c6f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c6f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c6fa:	4299      	cmp	r1, r3
 800c6fc:	d117      	bne.n	800c72e <_strtod_l+0x8f6>
 800c6fe:	4b29      	ldr	r3, [pc, #164]	; (800c7a4 <_strtod_l+0x96c>)
 800c700:	429f      	cmp	r7, r3
 800c702:	d102      	bne.n	800c70a <_strtod_l+0x8d2>
 800c704:	3101      	adds	r1, #1
 800c706:	f43f addf 	beq.w	800c2c8 <_strtod_l+0x490>
 800c70a:	4b23      	ldr	r3, [pc, #140]	; (800c798 <_strtod_l+0x960>)
 800c70c:	403b      	ands	r3, r7
 800c70e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c712:	f04f 0a00 	mov.w	sl, #0
 800c716:	9b04      	ldr	r3, [sp, #16]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1a4      	bne.n	800c666 <_strtod_l+0x82e>
 800c71c:	e5de      	b.n	800c2dc <_strtod_l+0x4a4>
 800c71e:	f04f 33ff 	mov.w	r3, #4294967295
 800c722:	e7ea      	b.n	800c6fa <_strtod_l+0x8c2>
 800c724:	4613      	mov	r3, r2
 800c726:	e7e8      	b.n	800c6fa <_strtod_l+0x8c2>
 800c728:	ea53 030a 	orrs.w	r3, r3, sl
 800c72c:	d08c      	beq.n	800c648 <_strtod_l+0x810>
 800c72e:	9b08      	ldr	r3, [sp, #32]
 800c730:	b1db      	cbz	r3, 800c76a <_strtod_l+0x932>
 800c732:	423b      	tst	r3, r7
 800c734:	d0ef      	beq.n	800c716 <_strtod_l+0x8de>
 800c736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c738:	9a04      	ldr	r2, [sp, #16]
 800c73a:	4650      	mov	r0, sl
 800c73c:	4659      	mov	r1, fp
 800c73e:	b1c3      	cbz	r3, 800c772 <_strtod_l+0x93a>
 800c740:	f7ff fb5b 	bl	800bdfa <sulp>
 800c744:	4602      	mov	r2, r0
 800c746:	460b      	mov	r3, r1
 800c748:	ec51 0b18 	vmov	r0, r1, d8
 800c74c:	f7f3 fd9e 	bl	800028c <__adddf3>
 800c750:	4682      	mov	sl, r0
 800c752:	468b      	mov	fp, r1
 800c754:	e7df      	b.n	800c716 <_strtod_l+0x8de>
 800c756:	4013      	ands	r3, r2
 800c758:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c75c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c760:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c764:	f04f 3aff 	mov.w	sl, #4294967295
 800c768:	e7d5      	b.n	800c716 <_strtod_l+0x8de>
 800c76a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c76c:	ea13 0f0a 	tst.w	r3, sl
 800c770:	e7e0      	b.n	800c734 <_strtod_l+0x8fc>
 800c772:	f7ff fb42 	bl	800bdfa <sulp>
 800c776:	4602      	mov	r2, r0
 800c778:	460b      	mov	r3, r1
 800c77a:	ec51 0b18 	vmov	r0, r1, d8
 800c77e:	f7f3 fd83 	bl	8000288 <__aeabi_dsub>
 800c782:	2200      	movs	r2, #0
 800c784:	2300      	movs	r3, #0
 800c786:	4682      	mov	sl, r0
 800c788:	468b      	mov	fp, r1
 800c78a:	f7f4 f99d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c78e:	2800      	cmp	r0, #0
 800c790:	d0c1      	beq.n	800c716 <_strtod_l+0x8de>
 800c792:	e611      	b.n	800c3b8 <_strtod_l+0x580>
 800c794:	fffffc02 	.word	0xfffffc02
 800c798:	7ff00000 	.word	0x7ff00000
 800c79c:	39500000 	.word	0x39500000
 800c7a0:	000fffff 	.word	0x000fffff
 800c7a4:	7fefffff 	.word	0x7fefffff
 800c7a8:	0800f7e0 	.word	0x0800f7e0
 800c7ac:	4631      	mov	r1, r6
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	f002 fa7c 	bl	800ecac <__ratio>
 800c7b4:	ec59 8b10 	vmov	r8, r9, d0
 800c7b8:	ee10 0a10 	vmov	r0, s0
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7c2:	4649      	mov	r1, r9
 800c7c4:	f7f4 f994 	bl	8000af0 <__aeabi_dcmple>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d07a      	beq.n	800c8c2 <_strtod_l+0xa8a>
 800c7cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d04a      	beq.n	800c868 <_strtod_l+0xa30>
 800c7d2:	4b95      	ldr	r3, [pc, #596]	; (800ca28 <_strtod_l+0xbf0>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c7da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ca28 <_strtod_l+0xbf0>
 800c7de:	f04f 0800 	mov.w	r8, #0
 800c7e2:	4b92      	ldr	r3, [pc, #584]	; (800ca2c <_strtod_l+0xbf4>)
 800c7e4:	403b      	ands	r3, r7
 800c7e6:	930d      	str	r3, [sp, #52]	; 0x34
 800c7e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7ea:	4b91      	ldr	r3, [pc, #580]	; (800ca30 <_strtod_l+0xbf8>)
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	f040 80b0 	bne.w	800c952 <_strtod_l+0xb1a>
 800c7f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c7f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c7fa:	ec4b ab10 	vmov	d0, sl, fp
 800c7fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c802:	f002 f97b 	bl	800eafc <__ulp>
 800c806:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c80a:	ec53 2b10 	vmov	r2, r3, d0
 800c80e:	f7f3 fef3 	bl	80005f8 <__aeabi_dmul>
 800c812:	4652      	mov	r2, sl
 800c814:	465b      	mov	r3, fp
 800c816:	f7f3 fd39 	bl	800028c <__adddf3>
 800c81a:	460b      	mov	r3, r1
 800c81c:	4983      	ldr	r1, [pc, #524]	; (800ca2c <_strtod_l+0xbf4>)
 800c81e:	4a85      	ldr	r2, [pc, #532]	; (800ca34 <_strtod_l+0xbfc>)
 800c820:	4019      	ands	r1, r3
 800c822:	4291      	cmp	r1, r2
 800c824:	4682      	mov	sl, r0
 800c826:	d960      	bls.n	800c8ea <_strtod_l+0xab2>
 800c828:	ee18 3a90 	vmov	r3, s17
 800c82c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c830:	4293      	cmp	r3, r2
 800c832:	d104      	bne.n	800c83e <_strtod_l+0xa06>
 800c834:	ee18 3a10 	vmov	r3, s16
 800c838:	3301      	adds	r3, #1
 800c83a:	f43f ad45 	beq.w	800c2c8 <_strtod_l+0x490>
 800c83e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ca40 <_strtod_l+0xc08>
 800c842:	f04f 3aff 	mov.w	sl, #4294967295
 800c846:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c848:	4620      	mov	r0, r4
 800c84a:	f001 fe25 	bl	800e498 <_Bfree>
 800c84e:	9905      	ldr	r1, [sp, #20]
 800c850:	4620      	mov	r0, r4
 800c852:	f001 fe21 	bl	800e498 <_Bfree>
 800c856:	4631      	mov	r1, r6
 800c858:	4620      	mov	r0, r4
 800c85a:	f001 fe1d 	bl	800e498 <_Bfree>
 800c85e:	4629      	mov	r1, r5
 800c860:	4620      	mov	r0, r4
 800c862:	f001 fe19 	bl	800e498 <_Bfree>
 800c866:	e61a      	b.n	800c49e <_strtod_l+0x666>
 800c868:	f1ba 0f00 	cmp.w	sl, #0
 800c86c:	d11b      	bne.n	800c8a6 <_strtod_l+0xa6e>
 800c86e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c872:	b9f3      	cbnz	r3, 800c8b2 <_strtod_l+0xa7a>
 800c874:	4b6c      	ldr	r3, [pc, #432]	; (800ca28 <_strtod_l+0xbf0>)
 800c876:	2200      	movs	r2, #0
 800c878:	4640      	mov	r0, r8
 800c87a:	4649      	mov	r1, r9
 800c87c:	f7f4 f92e 	bl	8000adc <__aeabi_dcmplt>
 800c880:	b9d0      	cbnz	r0, 800c8b8 <_strtod_l+0xa80>
 800c882:	4640      	mov	r0, r8
 800c884:	4649      	mov	r1, r9
 800c886:	4b6c      	ldr	r3, [pc, #432]	; (800ca38 <_strtod_l+0xc00>)
 800c888:	2200      	movs	r2, #0
 800c88a:	f7f3 feb5 	bl	80005f8 <__aeabi_dmul>
 800c88e:	4680      	mov	r8, r0
 800c890:	4689      	mov	r9, r1
 800c892:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c896:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c89a:	9315      	str	r3, [sp, #84]	; 0x54
 800c89c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c8a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c8a4:	e79d      	b.n	800c7e2 <_strtod_l+0x9aa>
 800c8a6:	f1ba 0f01 	cmp.w	sl, #1
 800c8aa:	d102      	bne.n	800c8b2 <_strtod_l+0xa7a>
 800c8ac:	2f00      	cmp	r7, #0
 800c8ae:	f43f ad83 	beq.w	800c3b8 <_strtod_l+0x580>
 800c8b2:	4b62      	ldr	r3, [pc, #392]	; (800ca3c <_strtod_l+0xc04>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	e78e      	b.n	800c7d6 <_strtod_l+0x99e>
 800c8b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ca38 <_strtod_l+0xc00>
 800c8bc:	f04f 0800 	mov.w	r8, #0
 800c8c0:	e7e7      	b.n	800c892 <_strtod_l+0xa5a>
 800c8c2:	4b5d      	ldr	r3, [pc, #372]	; (800ca38 <_strtod_l+0xc00>)
 800c8c4:	4640      	mov	r0, r8
 800c8c6:	4649      	mov	r1, r9
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f7f3 fe95 	bl	80005f8 <__aeabi_dmul>
 800c8ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d0:	4680      	mov	r8, r0
 800c8d2:	4689      	mov	r9, r1
 800c8d4:	b933      	cbnz	r3, 800c8e4 <_strtod_l+0xaac>
 800c8d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8da:	900e      	str	r0, [sp, #56]	; 0x38
 800c8dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c8e2:	e7dd      	b.n	800c8a0 <_strtod_l+0xa68>
 800c8e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c8e8:	e7f9      	b.n	800c8de <_strtod_l+0xaa6>
 800c8ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c8ee:	9b04      	ldr	r3, [sp, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1a8      	bne.n	800c846 <_strtod_l+0xa0e>
 800c8f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c8f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8fa:	0d1b      	lsrs	r3, r3, #20
 800c8fc:	051b      	lsls	r3, r3, #20
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d1a1      	bne.n	800c846 <_strtod_l+0xa0e>
 800c902:	4640      	mov	r0, r8
 800c904:	4649      	mov	r1, r9
 800c906:	f7f4 f9d7 	bl	8000cb8 <__aeabi_d2lz>
 800c90a:	f7f3 fe47 	bl	800059c <__aeabi_l2d>
 800c90e:	4602      	mov	r2, r0
 800c910:	460b      	mov	r3, r1
 800c912:	4640      	mov	r0, r8
 800c914:	4649      	mov	r1, r9
 800c916:	f7f3 fcb7 	bl	8000288 <__aeabi_dsub>
 800c91a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c91c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c920:	ea43 030a 	orr.w	r3, r3, sl
 800c924:	4313      	orrs	r3, r2
 800c926:	4680      	mov	r8, r0
 800c928:	4689      	mov	r9, r1
 800c92a:	d055      	beq.n	800c9d8 <_strtod_l+0xba0>
 800c92c:	a336      	add	r3, pc, #216	; (adr r3, 800ca08 <_strtod_l+0xbd0>)
 800c92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c932:	f7f4 f8d3 	bl	8000adc <__aeabi_dcmplt>
 800c936:	2800      	cmp	r0, #0
 800c938:	f47f acd0 	bne.w	800c2dc <_strtod_l+0x4a4>
 800c93c:	a334      	add	r3, pc, #208	; (adr r3, 800ca10 <_strtod_l+0xbd8>)
 800c93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c942:	4640      	mov	r0, r8
 800c944:	4649      	mov	r1, r9
 800c946:	f7f4 f8e7 	bl	8000b18 <__aeabi_dcmpgt>
 800c94a:	2800      	cmp	r0, #0
 800c94c:	f43f af7b 	beq.w	800c846 <_strtod_l+0xa0e>
 800c950:	e4c4      	b.n	800c2dc <_strtod_l+0x4a4>
 800c952:	9b04      	ldr	r3, [sp, #16]
 800c954:	b333      	cbz	r3, 800c9a4 <_strtod_l+0xb6c>
 800c956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c958:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c95c:	d822      	bhi.n	800c9a4 <_strtod_l+0xb6c>
 800c95e:	a32e      	add	r3, pc, #184	; (adr r3, 800ca18 <_strtod_l+0xbe0>)
 800c960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c964:	4640      	mov	r0, r8
 800c966:	4649      	mov	r1, r9
 800c968:	f7f4 f8c2 	bl	8000af0 <__aeabi_dcmple>
 800c96c:	b1a0      	cbz	r0, 800c998 <_strtod_l+0xb60>
 800c96e:	4649      	mov	r1, r9
 800c970:	4640      	mov	r0, r8
 800c972:	f7f4 f919 	bl	8000ba8 <__aeabi_d2uiz>
 800c976:	2801      	cmp	r0, #1
 800c978:	bf38      	it	cc
 800c97a:	2001      	movcc	r0, #1
 800c97c:	f7f3 fdc2 	bl	8000504 <__aeabi_ui2d>
 800c980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c982:	4680      	mov	r8, r0
 800c984:	4689      	mov	r9, r1
 800c986:	bb23      	cbnz	r3, 800c9d2 <_strtod_l+0xb9a>
 800c988:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c98c:	9010      	str	r0, [sp, #64]	; 0x40
 800c98e:	9311      	str	r3, [sp, #68]	; 0x44
 800c990:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c994:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c99a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c99c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c9a0:	1a9b      	subs	r3, r3, r2
 800c9a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c9a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c9a8:	eeb0 0a48 	vmov.f32	s0, s16
 800c9ac:	eef0 0a68 	vmov.f32	s1, s17
 800c9b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c9b4:	f002 f8a2 	bl	800eafc <__ulp>
 800c9b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c9bc:	ec53 2b10 	vmov	r2, r3, d0
 800c9c0:	f7f3 fe1a 	bl	80005f8 <__aeabi_dmul>
 800c9c4:	ec53 2b18 	vmov	r2, r3, d8
 800c9c8:	f7f3 fc60 	bl	800028c <__adddf3>
 800c9cc:	4682      	mov	sl, r0
 800c9ce:	468b      	mov	fp, r1
 800c9d0:	e78d      	b.n	800c8ee <_strtod_l+0xab6>
 800c9d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c9d6:	e7db      	b.n	800c990 <_strtod_l+0xb58>
 800c9d8:	a311      	add	r3, pc, #68	; (adr r3, 800ca20 <_strtod_l+0xbe8>)
 800c9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9de:	f7f4 f87d 	bl	8000adc <__aeabi_dcmplt>
 800c9e2:	e7b2      	b.n	800c94a <_strtod_l+0xb12>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c9e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c9ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9ec:	6013      	str	r3, [r2, #0]
 800c9ee:	f7ff ba6b 	b.w	800bec8 <_strtod_l+0x90>
 800c9f2:	2a65      	cmp	r2, #101	; 0x65
 800c9f4:	f43f ab5f 	beq.w	800c0b6 <_strtod_l+0x27e>
 800c9f8:	2a45      	cmp	r2, #69	; 0x45
 800c9fa:	f43f ab5c 	beq.w	800c0b6 <_strtod_l+0x27e>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	f7ff bb94 	b.w	800c12c <_strtod_l+0x2f4>
 800ca04:	f3af 8000 	nop.w
 800ca08:	94a03595 	.word	0x94a03595
 800ca0c:	3fdfffff 	.word	0x3fdfffff
 800ca10:	35afe535 	.word	0x35afe535
 800ca14:	3fe00000 	.word	0x3fe00000
 800ca18:	ffc00000 	.word	0xffc00000
 800ca1c:	41dfffff 	.word	0x41dfffff
 800ca20:	94a03595 	.word	0x94a03595
 800ca24:	3fcfffff 	.word	0x3fcfffff
 800ca28:	3ff00000 	.word	0x3ff00000
 800ca2c:	7ff00000 	.word	0x7ff00000
 800ca30:	7fe00000 	.word	0x7fe00000
 800ca34:	7c9fffff 	.word	0x7c9fffff
 800ca38:	3fe00000 	.word	0x3fe00000
 800ca3c:	bff00000 	.word	0xbff00000
 800ca40:	7fefffff 	.word	0x7fefffff

0800ca44 <_strtod_r>:
 800ca44:	4b01      	ldr	r3, [pc, #4]	; (800ca4c <_strtod_r+0x8>)
 800ca46:	f7ff b9f7 	b.w	800be38 <_strtod_l>
 800ca4a:	bf00      	nop
 800ca4c:	200000e0 	.word	0x200000e0

0800ca50 <_strtol_l.constprop.0>:
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca56:	d001      	beq.n	800ca5c <_strtol_l.constprop.0+0xc>
 800ca58:	2b24      	cmp	r3, #36	; 0x24
 800ca5a:	d906      	bls.n	800ca6a <_strtol_l.constprop.0+0x1a>
 800ca5c:	f7fe f86e 	bl	800ab3c <__errno>
 800ca60:	2316      	movs	r3, #22
 800ca62:	6003      	str	r3, [r0, #0]
 800ca64:	2000      	movs	r0, #0
 800ca66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cb50 <_strtol_l.constprop.0+0x100>
 800ca6e:	460d      	mov	r5, r1
 800ca70:	462e      	mov	r6, r5
 800ca72:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca76:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ca7a:	f017 0708 	ands.w	r7, r7, #8
 800ca7e:	d1f7      	bne.n	800ca70 <_strtol_l.constprop.0+0x20>
 800ca80:	2c2d      	cmp	r4, #45	; 0x2d
 800ca82:	d132      	bne.n	800caea <_strtol_l.constprop.0+0x9a>
 800ca84:	782c      	ldrb	r4, [r5, #0]
 800ca86:	2701      	movs	r7, #1
 800ca88:	1cb5      	adds	r5, r6, #2
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d05b      	beq.n	800cb46 <_strtol_l.constprop.0+0xf6>
 800ca8e:	2b10      	cmp	r3, #16
 800ca90:	d109      	bne.n	800caa6 <_strtol_l.constprop.0+0x56>
 800ca92:	2c30      	cmp	r4, #48	; 0x30
 800ca94:	d107      	bne.n	800caa6 <_strtol_l.constprop.0+0x56>
 800ca96:	782c      	ldrb	r4, [r5, #0]
 800ca98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ca9c:	2c58      	cmp	r4, #88	; 0x58
 800ca9e:	d14d      	bne.n	800cb3c <_strtol_l.constprop.0+0xec>
 800caa0:	786c      	ldrb	r4, [r5, #1]
 800caa2:	2310      	movs	r3, #16
 800caa4:	3502      	adds	r5, #2
 800caa6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800caaa:	f108 38ff 	add.w	r8, r8, #4294967295
 800caae:	f04f 0c00 	mov.w	ip, #0
 800cab2:	fbb8 f9f3 	udiv	r9, r8, r3
 800cab6:	4666      	mov	r6, ip
 800cab8:	fb03 8a19 	mls	sl, r3, r9, r8
 800cabc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cac0:	f1be 0f09 	cmp.w	lr, #9
 800cac4:	d816      	bhi.n	800caf4 <_strtol_l.constprop.0+0xa4>
 800cac6:	4674      	mov	r4, lr
 800cac8:	42a3      	cmp	r3, r4
 800caca:	dd24      	ble.n	800cb16 <_strtol_l.constprop.0+0xc6>
 800cacc:	f1bc 0f00 	cmp.w	ip, #0
 800cad0:	db1e      	blt.n	800cb10 <_strtol_l.constprop.0+0xc0>
 800cad2:	45b1      	cmp	r9, r6
 800cad4:	d31c      	bcc.n	800cb10 <_strtol_l.constprop.0+0xc0>
 800cad6:	d101      	bne.n	800cadc <_strtol_l.constprop.0+0x8c>
 800cad8:	45a2      	cmp	sl, r4
 800cada:	db19      	blt.n	800cb10 <_strtol_l.constprop.0+0xc0>
 800cadc:	fb06 4603 	mla	r6, r6, r3, r4
 800cae0:	f04f 0c01 	mov.w	ip, #1
 800cae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cae8:	e7e8      	b.n	800cabc <_strtol_l.constprop.0+0x6c>
 800caea:	2c2b      	cmp	r4, #43	; 0x2b
 800caec:	bf04      	itt	eq
 800caee:	782c      	ldrbeq	r4, [r5, #0]
 800caf0:	1cb5      	addeq	r5, r6, #2
 800caf2:	e7ca      	b.n	800ca8a <_strtol_l.constprop.0+0x3a>
 800caf4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800caf8:	f1be 0f19 	cmp.w	lr, #25
 800cafc:	d801      	bhi.n	800cb02 <_strtol_l.constprop.0+0xb2>
 800cafe:	3c37      	subs	r4, #55	; 0x37
 800cb00:	e7e2      	b.n	800cac8 <_strtol_l.constprop.0+0x78>
 800cb02:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cb06:	f1be 0f19 	cmp.w	lr, #25
 800cb0a:	d804      	bhi.n	800cb16 <_strtol_l.constprop.0+0xc6>
 800cb0c:	3c57      	subs	r4, #87	; 0x57
 800cb0e:	e7db      	b.n	800cac8 <_strtol_l.constprop.0+0x78>
 800cb10:	f04f 3cff 	mov.w	ip, #4294967295
 800cb14:	e7e6      	b.n	800cae4 <_strtol_l.constprop.0+0x94>
 800cb16:	f1bc 0f00 	cmp.w	ip, #0
 800cb1a:	da05      	bge.n	800cb28 <_strtol_l.constprop.0+0xd8>
 800cb1c:	2322      	movs	r3, #34	; 0x22
 800cb1e:	6003      	str	r3, [r0, #0]
 800cb20:	4646      	mov	r6, r8
 800cb22:	b942      	cbnz	r2, 800cb36 <_strtol_l.constprop.0+0xe6>
 800cb24:	4630      	mov	r0, r6
 800cb26:	e79e      	b.n	800ca66 <_strtol_l.constprop.0+0x16>
 800cb28:	b107      	cbz	r7, 800cb2c <_strtol_l.constprop.0+0xdc>
 800cb2a:	4276      	negs	r6, r6
 800cb2c:	2a00      	cmp	r2, #0
 800cb2e:	d0f9      	beq.n	800cb24 <_strtol_l.constprop.0+0xd4>
 800cb30:	f1bc 0f00 	cmp.w	ip, #0
 800cb34:	d000      	beq.n	800cb38 <_strtol_l.constprop.0+0xe8>
 800cb36:	1e69      	subs	r1, r5, #1
 800cb38:	6011      	str	r1, [r2, #0]
 800cb3a:	e7f3      	b.n	800cb24 <_strtol_l.constprop.0+0xd4>
 800cb3c:	2430      	movs	r4, #48	; 0x30
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1b1      	bne.n	800caa6 <_strtol_l.constprop.0+0x56>
 800cb42:	2308      	movs	r3, #8
 800cb44:	e7af      	b.n	800caa6 <_strtol_l.constprop.0+0x56>
 800cb46:	2c30      	cmp	r4, #48	; 0x30
 800cb48:	d0a5      	beq.n	800ca96 <_strtol_l.constprop.0+0x46>
 800cb4a:	230a      	movs	r3, #10
 800cb4c:	e7ab      	b.n	800caa6 <_strtol_l.constprop.0+0x56>
 800cb4e:	bf00      	nop
 800cb50:	0800f845 	.word	0x0800f845

0800cb54 <_strtol_r>:
 800cb54:	f7ff bf7c 	b.w	800ca50 <_strtol_l.constprop.0>

0800cb58 <__swbuf_r>:
 800cb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb5a:	460e      	mov	r6, r1
 800cb5c:	4614      	mov	r4, r2
 800cb5e:	4605      	mov	r5, r0
 800cb60:	b118      	cbz	r0, 800cb6a <__swbuf_r+0x12>
 800cb62:	6983      	ldr	r3, [r0, #24]
 800cb64:	b90b      	cbnz	r3, 800cb6a <__swbuf_r+0x12>
 800cb66:	f7fe f847 	bl	800abf8 <__sinit>
 800cb6a:	4b21      	ldr	r3, [pc, #132]	; (800cbf0 <__swbuf_r+0x98>)
 800cb6c:	429c      	cmp	r4, r3
 800cb6e:	d12b      	bne.n	800cbc8 <__swbuf_r+0x70>
 800cb70:	686c      	ldr	r4, [r5, #4]
 800cb72:	69a3      	ldr	r3, [r4, #24]
 800cb74:	60a3      	str	r3, [r4, #8]
 800cb76:	89a3      	ldrh	r3, [r4, #12]
 800cb78:	071a      	lsls	r2, r3, #28
 800cb7a:	d52f      	bpl.n	800cbdc <__swbuf_r+0x84>
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	b36b      	cbz	r3, 800cbdc <__swbuf_r+0x84>
 800cb80:	6923      	ldr	r3, [r4, #16]
 800cb82:	6820      	ldr	r0, [r4, #0]
 800cb84:	1ac0      	subs	r0, r0, r3
 800cb86:	6963      	ldr	r3, [r4, #20]
 800cb88:	b2f6      	uxtb	r6, r6
 800cb8a:	4283      	cmp	r3, r0
 800cb8c:	4637      	mov	r7, r6
 800cb8e:	dc04      	bgt.n	800cb9a <__swbuf_r+0x42>
 800cb90:	4621      	mov	r1, r4
 800cb92:	4628      	mov	r0, r5
 800cb94:	f000 ffe0 	bl	800db58 <_fflush_r>
 800cb98:	bb30      	cbnz	r0, 800cbe8 <__swbuf_r+0x90>
 800cb9a:	68a3      	ldr	r3, [r4, #8]
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	60a3      	str	r3, [r4, #8]
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	1c5a      	adds	r2, r3, #1
 800cba4:	6022      	str	r2, [r4, #0]
 800cba6:	701e      	strb	r6, [r3, #0]
 800cba8:	6963      	ldr	r3, [r4, #20]
 800cbaa:	3001      	adds	r0, #1
 800cbac:	4283      	cmp	r3, r0
 800cbae:	d004      	beq.n	800cbba <__swbuf_r+0x62>
 800cbb0:	89a3      	ldrh	r3, [r4, #12]
 800cbb2:	07db      	lsls	r3, r3, #31
 800cbb4:	d506      	bpl.n	800cbc4 <__swbuf_r+0x6c>
 800cbb6:	2e0a      	cmp	r6, #10
 800cbb8:	d104      	bne.n	800cbc4 <__swbuf_r+0x6c>
 800cbba:	4621      	mov	r1, r4
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	f000 ffcb 	bl	800db58 <_fflush_r>
 800cbc2:	b988      	cbnz	r0, 800cbe8 <__swbuf_r+0x90>
 800cbc4:	4638      	mov	r0, r7
 800cbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbc8:	4b0a      	ldr	r3, [pc, #40]	; (800cbf4 <__swbuf_r+0x9c>)
 800cbca:	429c      	cmp	r4, r3
 800cbcc:	d101      	bne.n	800cbd2 <__swbuf_r+0x7a>
 800cbce:	68ac      	ldr	r4, [r5, #8]
 800cbd0:	e7cf      	b.n	800cb72 <__swbuf_r+0x1a>
 800cbd2:	4b09      	ldr	r3, [pc, #36]	; (800cbf8 <__swbuf_r+0xa0>)
 800cbd4:	429c      	cmp	r4, r3
 800cbd6:	bf08      	it	eq
 800cbd8:	68ec      	ldreq	r4, [r5, #12]
 800cbda:	e7ca      	b.n	800cb72 <__swbuf_r+0x1a>
 800cbdc:	4621      	mov	r1, r4
 800cbde:	4628      	mov	r0, r5
 800cbe0:	f000 f81e 	bl	800cc20 <__swsetup_r>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d0cb      	beq.n	800cb80 <__swbuf_r+0x28>
 800cbe8:	f04f 37ff 	mov.w	r7, #4294967295
 800cbec:	e7ea      	b.n	800cbc4 <__swbuf_r+0x6c>
 800cbee:	bf00      	nop
 800cbf0:	0800f734 	.word	0x0800f734
 800cbf4:	0800f754 	.word	0x0800f754
 800cbf8:	0800f714 	.word	0x0800f714

0800cbfc <_write_r>:
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	4d07      	ldr	r5, [pc, #28]	; (800cc1c <_write_r+0x20>)
 800cc00:	4604      	mov	r4, r0
 800cc02:	4608      	mov	r0, r1
 800cc04:	4611      	mov	r1, r2
 800cc06:	2200      	movs	r2, #0
 800cc08:	602a      	str	r2, [r5, #0]
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	f7f4 fcc9 	bl	80015a2 <_write>
 800cc10:	1c43      	adds	r3, r0, #1
 800cc12:	d102      	bne.n	800cc1a <_write_r+0x1e>
 800cc14:	682b      	ldr	r3, [r5, #0]
 800cc16:	b103      	cbz	r3, 800cc1a <_write_r+0x1e>
 800cc18:	6023      	str	r3, [r4, #0]
 800cc1a:	bd38      	pop	{r3, r4, r5, pc}
 800cc1c:	20008420 	.word	0x20008420

0800cc20 <__swsetup_r>:
 800cc20:	4b32      	ldr	r3, [pc, #200]	; (800ccec <__swsetup_r+0xcc>)
 800cc22:	b570      	push	{r4, r5, r6, lr}
 800cc24:	681d      	ldr	r5, [r3, #0]
 800cc26:	4606      	mov	r6, r0
 800cc28:	460c      	mov	r4, r1
 800cc2a:	b125      	cbz	r5, 800cc36 <__swsetup_r+0x16>
 800cc2c:	69ab      	ldr	r3, [r5, #24]
 800cc2e:	b913      	cbnz	r3, 800cc36 <__swsetup_r+0x16>
 800cc30:	4628      	mov	r0, r5
 800cc32:	f7fd ffe1 	bl	800abf8 <__sinit>
 800cc36:	4b2e      	ldr	r3, [pc, #184]	; (800ccf0 <__swsetup_r+0xd0>)
 800cc38:	429c      	cmp	r4, r3
 800cc3a:	d10f      	bne.n	800cc5c <__swsetup_r+0x3c>
 800cc3c:	686c      	ldr	r4, [r5, #4]
 800cc3e:	89a3      	ldrh	r3, [r4, #12]
 800cc40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc44:	0719      	lsls	r1, r3, #28
 800cc46:	d42c      	bmi.n	800cca2 <__swsetup_r+0x82>
 800cc48:	06dd      	lsls	r5, r3, #27
 800cc4a:	d411      	bmi.n	800cc70 <__swsetup_r+0x50>
 800cc4c:	2309      	movs	r3, #9
 800cc4e:	6033      	str	r3, [r6, #0]
 800cc50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc54:	81a3      	strh	r3, [r4, #12]
 800cc56:	f04f 30ff 	mov.w	r0, #4294967295
 800cc5a:	e03e      	b.n	800ccda <__swsetup_r+0xba>
 800cc5c:	4b25      	ldr	r3, [pc, #148]	; (800ccf4 <__swsetup_r+0xd4>)
 800cc5e:	429c      	cmp	r4, r3
 800cc60:	d101      	bne.n	800cc66 <__swsetup_r+0x46>
 800cc62:	68ac      	ldr	r4, [r5, #8]
 800cc64:	e7eb      	b.n	800cc3e <__swsetup_r+0x1e>
 800cc66:	4b24      	ldr	r3, [pc, #144]	; (800ccf8 <__swsetup_r+0xd8>)
 800cc68:	429c      	cmp	r4, r3
 800cc6a:	bf08      	it	eq
 800cc6c:	68ec      	ldreq	r4, [r5, #12]
 800cc6e:	e7e6      	b.n	800cc3e <__swsetup_r+0x1e>
 800cc70:	0758      	lsls	r0, r3, #29
 800cc72:	d512      	bpl.n	800cc9a <__swsetup_r+0x7a>
 800cc74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc76:	b141      	cbz	r1, 800cc8a <__swsetup_r+0x6a>
 800cc78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc7c:	4299      	cmp	r1, r3
 800cc7e:	d002      	beq.n	800cc86 <__swsetup_r+0x66>
 800cc80:	4630      	mov	r0, r6
 800cc82:	f002 f8a1 	bl	800edc8 <_free_r>
 800cc86:	2300      	movs	r3, #0
 800cc88:	6363      	str	r3, [r4, #52]	; 0x34
 800cc8a:	89a3      	ldrh	r3, [r4, #12]
 800cc8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc90:	81a3      	strh	r3, [r4, #12]
 800cc92:	2300      	movs	r3, #0
 800cc94:	6063      	str	r3, [r4, #4]
 800cc96:	6923      	ldr	r3, [r4, #16]
 800cc98:	6023      	str	r3, [r4, #0]
 800cc9a:	89a3      	ldrh	r3, [r4, #12]
 800cc9c:	f043 0308 	orr.w	r3, r3, #8
 800cca0:	81a3      	strh	r3, [r4, #12]
 800cca2:	6923      	ldr	r3, [r4, #16]
 800cca4:	b94b      	cbnz	r3, 800ccba <__swsetup_r+0x9a>
 800cca6:	89a3      	ldrh	r3, [r4, #12]
 800cca8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ccac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccb0:	d003      	beq.n	800ccba <__swsetup_r+0x9a>
 800ccb2:	4621      	mov	r1, r4
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	f001 fb49 	bl	800e34c <__smakebuf_r>
 800ccba:	89a0      	ldrh	r0, [r4, #12]
 800ccbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccc0:	f010 0301 	ands.w	r3, r0, #1
 800ccc4:	d00a      	beq.n	800ccdc <__swsetup_r+0xbc>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	60a3      	str	r3, [r4, #8]
 800ccca:	6963      	ldr	r3, [r4, #20]
 800cccc:	425b      	negs	r3, r3
 800ccce:	61a3      	str	r3, [r4, #24]
 800ccd0:	6923      	ldr	r3, [r4, #16]
 800ccd2:	b943      	cbnz	r3, 800cce6 <__swsetup_r+0xc6>
 800ccd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ccd8:	d1ba      	bne.n	800cc50 <__swsetup_r+0x30>
 800ccda:	bd70      	pop	{r4, r5, r6, pc}
 800ccdc:	0781      	lsls	r1, r0, #30
 800ccde:	bf58      	it	pl
 800cce0:	6963      	ldrpl	r3, [r4, #20]
 800cce2:	60a3      	str	r3, [r4, #8]
 800cce4:	e7f4      	b.n	800ccd0 <__swsetup_r+0xb0>
 800cce6:	2000      	movs	r0, #0
 800cce8:	e7f7      	b.n	800ccda <__swsetup_r+0xba>
 800ccea:	bf00      	nop
 800ccec:	20000078 	.word	0x20000078
 800ccf0:	0800f734 	.word	0x0800f734
 800ccf4:	0800f754 	.word	0x0800f754
 800ccf8:	0800f714 	.word	0x0800f714

0800ccfc <__assert_func>:
 800ccfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccfe:	4614      	mov	r4, r2
 800cd00:	461a      	mov	r2, r3
 800cd02:	4b09      	ldr	r3, [pc, #36]	; (800cd28 <__assert_func+0x2c>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4605      	mov	r5, r0
 800cd08:	68d8      	ldr	r0, [r3, #12]
 800cd0a:	b14c      	cbz	r4, 800cd20 <__assert_func+0x24>
 800cd0c:	4b07      	ldr	r3, [pc, #28]	; (800cd2c <__assert_func+0x30>)
 800cd0e:	9100      	str	r1, [sp, #0]
 800cd10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd14:	4906      	ldr	r1, [pc, #24]	; (800cd30 <__assert_func+0x34>)
 800cd16:	462b      	mov	r3, r5
 800cd18:	f000 ff5a 	bl	800dbd0 <fiprintf>
 800cd1c:	f002 fb91 	bl	800f442 <abort>
 800cd20:	4b04      	ldr	r3, [pc, #16]	; (800cd34 <__assert_func+0x38>)
 800cd22:	461c      	mov	r4, r3
 800cd24:	e7f3      	b.n	800cd0e <__assert_func+0x12>
 800cd26:	bf00      	nop
 800cd28:	20000078 	.word	0x20000078
 800cd2c:	0800f808 	.word	0x0800f808
 800cd30:	0800f815 	.word	0x0800f815
 800cd34:	0800f843 	.word	0x0800f843

0800cd38 <_close_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4d06      	ldr	r5, [pc, #24]	; (800cd54 <_close_r+0x1c>)
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	4604      	mov	r4, r0
 800cd40:	4608      	mov	r0, r1
 800cd42:	602b      	str	r3, [r5, #0]
 800cd44:	f7f4 fc49 	bl	80015da <_close>
 800cd48:	1c43      	adds	r3, r0, #1
 800cd4a:	d102      	bne.n	800cd52 <_close_r+0x1a>
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	b103      	cbz	r3, 800cd52 <_close_r+0x1a>
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	20008420 	.word	0x20008420

0800cd58 <quorem>:
 800cd58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5c:	6903      	ldr	r3, [r0, #16]
 800cd5e:	690c      	ldr	r4, [r1, #16]
 800cd60:	42a3      	cmp	r3, r4
 800cd62:	4607      	mov	r7, r0
 800cd64:	f2c0 8081 	blt.w	800ce6a <quorem+0x112>
 800cd68:	3c01      	subs	r4, #1
 800cd6a:	f101 0814 	add.w	r8, r1, #20
 800cd6e:	f100 0514 	add.w	r5, r0, #20
 800cd72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd76:	9301      	str	r3, [sp, #4]
 800cd78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cd7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd80:	3301      	adds	r3, #1
 800cd82:	429a      	cmp	r2, r3
 800cd84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cd88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cd8c:	fbb2 f6f3 	udiv	r6, r2, r3
 800cd90:	d331      	bcc.n	800cdf6 <quorem+0x9e>
 800cd92:	f04f 0e00 	mov.w	lr, #0
 800cd96:	4640      	mov	r0, r8
 800cd98:	46ac      	mov	ip, r5
 800cd9a:	46f2      	mov	sl, lr
 800cd9c:	f850 2b04 	ldr.w	r2, [r0], #4
 800cda0:	b293      	uxth	r3, r2
 800cda2:	fb06 e303 	mla	r3, r6, r3, lr
 800cda6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	ebaa 0303 	sub.w	r3, sl, r3
 800cdb0:	f8dc a000 	ldr.w	sl, [ip]
 800cdb4:	0c12      	lsrs	r2, r2, #16
 800cdb6:	fa13 f38a 	uxtah	r3, r3, sl
 800cdba:	fb06 e202 	mla	r2, r6, r2, lr
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	9b00      	ldr	r3, [sp, #0]
 800cdc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cdc6:	b292      	uxth	r2, r2
 800cdc8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cdcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cdd0:	f8bd 3000 	ldrh.w	r3, [sp]
 800cdd4:	4581      	cmp	r9, r0
 800cdd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdda:	f84c 3b04 	str.w	r3, [ip], #4
 800cdde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cde2:	d2db      	bcs.n	800cd9c <quorem+0x44>
 800cde4:	f855 300b 	ldr.w	r3, [r5, fp]
 800cde8:	b92b      	cbnz	r3, 800cdf6 <quorem+0x9e>
 800cdea:	9b01      	ldr	r3, [sp, #4]
 800cdec:	3b04      	subs	r3, #4
 800cdee:	429d      	cmp	r5, r3
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	d32e      	bcc.n	800ce52 <quorem+0xfa>
 800cdf4:	613c      	str	r4, [r7, #16]
 800cdf6:	4638      	mov	r0, r7
 800cdf8:	f001 fdda 	bl	800e9b0 <__mcmp>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	db24      	blt.n	800ce4a <quorem+0xf2>
 800ce00:	3601      	adds	r6, #1
 800ce02:	4628      	mov	r0, r5
 800ce04:	f04f 0c00 	mov.w	ip, #0
 800ce08:	f858 2b04 	ldr.w	r2, [r8], #4
 800ce0c:	f8d0 e000 	ldr.w	lr, [r0]
 800ce10:	b293      	uxth	r3, r2
 800ce12:	ebac 0303 	sub.w	r3, ip, r3
 800ce16:	0c12      	lsrs	r2, r2, #16
 800ce18:	fa13 f38e 	uxtah	r3, r3, lr
 800ce1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ce20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce2a:	45c1      	cmp	r9, r8
 800ce2c:	f840 3b04 	str.w	r3, [r0], #4
 800ce30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ce34:	d2e8      	bcs.n	800ce08 <quorem+0xb0>
 800ce36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce3e:	b922      	cbnz	r2, 800ce4a <quorem+0xf2>
 800ce40:	3b04      	subs	r3, #4
 800ce42:	429d      	cmp	r5, r3
 800ce44:	461a      	mov	r2, r3
 800ce46:	d30a      	bcc.n	800ce5e <quorem+0x106>
 800ce48:	613c      	str	r4, [r7, #16]
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	b003      	add	sp, #12
 800ce4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce52:	6812      	ldr	r2, [r2, #0]
 800ce54:	3b04      	subs	r3, #4
 800ce56:	2a00      	cmp	r2, #0
 800ce58:	d1cc      	bne.n	800cdf4 <quorem+0x9c>
 800ce5a:	3c01      	subs	r4, #1
 800ce5c:	e7c7      	b.n	800cdee <quorem+0x96>
 800ce5e:	6812      	ldr	r2, [r2, #0]
 800ce60:	3b04      	subs	r3, #4
 800ce62:	2a00      	cmp	r2, #0
 800ce64:	d1f0      	bne.n	800ce48 <quorem+0xf0>
 800ce66:	3c01      	subs	r4, #1
 800ce68:	e7eb      	b.n	800ce42 <quorem+0xea>
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	e7ee      	b.n	800ce4c <quorem+0xf4>
	...

0800ce70 <_dtoa_r>:
 800ce70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce74:	ed2d 8b04 	vpush	{d8-d9}
 800ce78:	ec57 6b10 	vmov	r6, r7, d0
 800ce7c:	b093      	sub	sp, #76	; 0x4c
 800ce7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ce80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ce84:	9106      	str	r1, [sp, #24]
 800ce86:	ee10 aa10 	vmov	sl, s0
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce8e:	930c      	str	r3, [sp, #48]	; 0x30
 800ce90:	46bb      	mov	fp, r7
 800ce92:	b975      	cbnz	r5, 800ceb2 <_dtoa_r+0x42>
 800ce94:	2010      	movs	r0, #16
 800ce96:	f001 fa99 	bl	800e3cc <malloc>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	6260      	str	r0, [r4, #36]	; 0x24
 800ce9e:	b920      	cbnz	r0, 800ceaa <_dtoa_r+0x3a>
 800cea0:	4ba7      	ldr	r3, [pc, #668]	; (800d140 <_dtoa_r+0x2d0>)
 800cea2:	21ea      	movs	r1, #234	; 0xea
 800cea4:	48a7      	ldr	r0, [pc, #668]	; (800d144 <_dtoa_r+0x2d4>)
 800cea6:	f7ff ff29 	bl	800ccfc <__assert_func>
 800ceaa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ceae:	6005      	str	r5, [r0, #0]
 800ceb0:	60c5      	str	r5, [r0, #12]
 800ceb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ceb4:	6819      	ldr	r1, [r3, #0]
 800ceb6:	b151      	cbz	r1, 800cece <_dtoa_r+0x5e>
 800ceb8:	685a      	ldr	r2, [r3, #4]
 800ceba:	604a      	str	r2, [r1, #4]
 800cebc:	2301      	movs	r3, #1
 800cebe:	4093      	lsls	r3, r2
 800cec0:	608b      	str	r3, [r1, #8]
 800cec2:	4620      	mov	r0, r4
 800cec4:	f001 fae8 	bl	800e498 <_Bfree>
 800cec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ceca:	2200      	movs	r2, #0
 800cecc:	601a      	str	r2, [r3, #0]
 800cece:	1e3b      	subs	r3, r7, #0
 800ced0:	bfaa      	itet	ge
 800ced2:	2300      	movge	r3, #0
 800ced4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ced8:	f8c8 3000 	strge.w	r3, [r8]
 800cedc:	4b9a      	ldr	r3, [pc, #616]	; (800d148 <_dtoa_r+0x2d8>)
 800cede:	bfbc      	itt	lt
 800cee0:	2201      	movlt	r2, #1
 800cee2:	f8c8 2000 	strlt.w	r2, [r8]
 800cee6:	ea33 030b 	bics.w	r3, r3, fp
 800ceea:	d11b      	bne.n	800cf24 <_dtoa_r+0xb4>
 800ceec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ceee:	f242 730f 	movw	r3, #9999	; 0x270f
 800cef2:	6013      	str	r3, [r2, #0]
 800cef4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cef8:	4333      	orrs	r3, r6
 800cefa:	f000 8592 	beq.w	800da22 <_dtoa_r+0xbb2>
 800cefe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf00:	b963      	cbnz	r3, 800cf1c <_dtoa_r+0xac>
 800cf02:	4b92      	ldr	r3, [pc, #584]	; (800d14c <_dtoa_r+0x2dc>)
 800cf04:	e022      	b.n	800cf4c <_dtoa_r+0xdc>
 800cf06:	4b92      	ldr	r3, [pc, #584]	; (800d150 <_dtoa_r+0x2e0>)
 800cf08:	9301      	str	r3, [sp, #4]
 800cf0a:	3308      	adds	r3, #8
 800cf0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cf0e:	6013      	str	r3, [r2, #0]
 800cf10:	9801      	ldr	r0, [sp, #4]
 800cf12:	b013      	add	sp, #76	; 0x4c
 800cf14:	ecbd 8b04 	vpop	{d8-d9}
 800cf18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf1c:	4b8b      	ldr	r3, [pc, #556]	; (800d14c <_dtoa_r+0x2dc>)
 800cf1e:	9301      	str	r3, [sp, #4]
 800cf20:	3303      	adds	r3, #3
 800cf22:	e7f3      	b.n	800cf0c <_dtoa_r+0x9c>
 800cf24:	2200      	movs	r2, #0
 800cf26:	2300      	movs	r3, #0
 800cf28:	4650      	mov	r0, sl
 800cf2a:	4659      	mov	r1, fp
 800cf2c:	f7f3 fdcc 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf30:	ec4b ab19 	vmov	d9, sl, fp
 800cf34:	4680      	mov	r8, r0
 800cf36:	b158      	cbz	r0, 800cf50 <_dtoa_r+0xe0>
 800cf38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	6013      	str	r3, [r2, #0]
 800cf3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	f000 856b 	beq.w	800da1c <_dtoa_r+0xbac>
 800cf46:	4883      	ldr	r0, [pc, #524]	; (800d154 <_dtoa_r+0x2e4>)
 800cf48:	6018      	str	r0, [r3, #0]
 800cf4a:	1e43      	subs	r3, r0, #1
 800cf4c:	9301      	str	r3, [sp, #4]
 800cf4e:	e7df      	b.n	800cf10 <_dtoa_r+0xa0>
 800cf50:	ec4b ab10 	vmov	d0, sl, fp
 800cf54:	aa10      	add	r2, sp, #64	; 0x40
 800cf56:	a911      	add	r1, sp, #68	; 0x44
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f001 fe4b 	bl	800ebf4 <__d2b>
 800cf5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cf62:	ee08 0a10 	vmov	s16, r0
 800cf66:	2d00      	cmp	r5, #0
 800cf68:	f000 8084 	beq.w	800d074 <_dtoa_r+0x204>
 800cf6c:	ee19 3a90 	vmov	r3, s19
 800cf70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cf78:	4656      	mov	r6, sl
 800cf7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cf7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cf82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cf86:	4b74      	ldr	r3, [pc, #464]	; (800d158 <_dtoa_r+0x2e8>)
 800cf88:	2200      	movs	r2, #0
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	4639      	mov	r1, r7
 800cf8e:	f7f3 f97b 	bl	8000288 <__aeabi_dsub>
 800cf92:	a365      	add	r3, pc, #404	; (adr r3, 800d128 <_dtoa_r+0x2b8>)
 800cf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf98:	f7f3 fb2e 	bl	80005f8 <__aeabi_dmul>
 800cf9c:	a364      	add	r3, pc, #400	; (adr r3, 800d130 <_dtoa_r+0x2c0>)
 800cf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa2:	f7f3 f973 	bl	800028c <__adddf3>
 800cfa6:	4606      	mov	r6, r0
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	460f      	mov	r7, r1
 800cfac:	f7f3 faba 	bl	8000524 <__aeabi_i2d>
 800cfb0:	a361      	add	r3, pc, #388	; (adr r3, 800d138 <_dtoa_r+0x2c8>)
 800cfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb6:	f7f3 fb1f 	bl	80005f8 <__aeabi_dmul>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	4639      	mov	r1, r7
 800cfc2:	f7f3 f963 	bl	800028c <__adddf3>
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	460f      	mov	r7, r1
 800cfca:	f7f3 fdc5 	bl	8000b58 <__aeabi_d2iz>
 800cfce:	2200      	movs	r2, #0
 800cfd0:	9000      	str	r0, [sp, #0]
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	4639      	mov	r1, r7
 800cfd8:	f7f3 fd80 	bl	8000adc <__aeabi_dcmplt>
 800cfdc:	b150      	cbz	r0, 800cff4 <_dtoa_r+0x184>
 800cfde:	9800      	ldr	r0, [sp, #0]
 800cfe0:	f7f3 faa0 	bl	8000524 <__aeabi_i2d>
 800cfe4:	4632      	mov	r2, r6
 800cfe6:	463b      	mov	r3, r7
 800cfe8:	f7f3 fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfec:	b910      	cbnz	r0, 800cff4 <_dtoa_r+0x184>
 800cfee:	9b00      	ldr	r3, [sp, #0]
 800cff0:	3b01      	subs	r3, #1
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	9b00      	ldr	r3, [sp, #0]
 800cff6:	2b16      	cmp	r3, #22
 800cff8:	d85a      	bhi.n	800d0b0 <_dtoa_r+0x240>
 800cffa:	9a00      	ldr	r2, [sp, #0]
 800cffc:	4b57      	ldr	r3, [pc, #348]	; (800d15c <_dtoa_r+0x2ec>)
 800cffe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d006:	ec51 0b19 	vmov	r0, r1, d9
 800d00a:	f7f3 fd67 	bl	8000adc <__aeabi_dcmplt>
 800d00e:	2800      	cmp	r0, #0
 800d010:	d050      	beq.n	800d0b4 <_dtoa_r+0x244>
 800d012:	9b00      	ldr	r3, [sp, #0]
 800d014:	3b01      	subs	r3, #1
 800d016:	9300      	str	r3, [sp, #0]
 800d018:	2300      	movs	r3, #0
 800d01a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d01c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d01e:	1b5d      	subs	r5, r3, r5
 800d020:	1e6b      	subs	r3, r5, #1
 800d022:	9305      	str	r3, [sp, #20]
 800d024:	bf45      	ittet	mi
 800d026:	f1c5 0301 	rsbmi	r3, r5, #1
 800d02a:	9304      	strmi	r3, [sp, #16]
 800d02c:	2300      	movpl	r3, #0
 800d02e:	2300      	movmi	r3, #0
 800d030:	bf4c      	ite	mi
 800d032:	9305      	strmi	r3, [sp, #20]
 800d034:	9304      	strpl	r3, [sp, #16]
 800d036:	9b00      	ldr	r3, [sp, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	db3d      	blt.n	800d0b8 <_dtoa_r+0x248>
 800d03c:	9b05      	ldr	r3, [sp, #20]
 800d03e:	9a00      	ldr	r2, [sp, #0]
 800d040:	920a      	str	r2, [sp, #40]	; 0x28
 800d042:	4413      	add	r3, r2
 800d044:	9305      	str	r3, [sp, #20]
 800d046:	2300      	movs	r3, #0
 800d048:	9307      	str	r3, [sp, #28]
 800d04a:	9b06      	ldr	r3, [sp, #24]
 800d04c:	2b09      	cmp	r3, #9
 800d04e:	f200 8089 	bhi.w	800d164 <_dtoa_r+0x2f4>
 800d052:	2b05      	cmp	r3, #5
 800d054:	bfc4      	itt	gt
 800d056:	3b04      	subgt	r3, #4
 800d058:	9306      	strgt	r3, [sp, #24]
 800d05a:	9b06      	ldr	r3, [sp, #24]
 800d05c:	f1a3 0302 	sub.w	r3, r3, #2
 800d060:	bfcc      	ite	gt
 800d062:	2500      	movgt	r5, #0
 800d064:	2501      	movle	r5, #1
 800d066:	2b03      	cmp	r3, #3
 800d068:	f200 8087 	bhi.w	800d17a <_dtoa_r+0x30a>
 800d06c:	e8df f003 	tbb	[pc, r3]
 800d070:	59383a2d 	.word	0x59383a2d
 800d074:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d078:	441d      	add	r5, r3
 800d07a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d07e:	2b20      	cmp	r3, #32
 800d080:	bfc1      	itttt	gt
 800d082:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d086:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d08a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d08e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d092:	bfda      	itte	le
 800d094:	f1c3 0320 	rsble	r3, r3, #32
 800d098:	fa06 f003 	lslle.w	r0, r6, r3
 800d09c:	4318      	orrgt	r0, r3
 800d09e:	f7f3 fa31 	bl	8000504 <__aeabi_ui2d>
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	4606      	mov	r6, r0
 800d0a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d0aa:	3d01      	subs	r5, #1
 800d0ac:	930e      	str	r3, [sp, #56]	; 0x38
 800d0ae:	e76a      	b.n	800cf86 <_dtoa_r+0x116>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e7b2      	b.n	800d01a <_dtoa_r+0x1aa>
 800d0b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d0b6:	e7b1      	b.n	800d01c <_dtoa_r+0x1ac>
 800d0b8:	9b04      	ldr	r3, [sp, #16]
 800d0ba:	9a00      	ldr	r2, [sp, #0]
 800d0bc:	1a9b      	subs	r3, r3, r2
 800d0be:	9304      	str	r3, [sp, #16]
 800d0c0:	4253      	negs	r3, r2
 800d0c2:	9307      	str	r3, [sp, #28]
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	930a      	str	r3, [sp, #40]	; 0x28
 800d0c8:	e7bf      	b.n	800d04a <_dtoa_r+0x1da>
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	9308      	str	r3, [sp, #32]
 800d0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	dc55      	bgt.n	800d180 <_dtoa_r+0x310>
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d0da:	461a      	mov	r2, r3
 800d0dc:	9209      	str	r2, [sp, #36]	; 0x24
 800d0de:	e00c      	b.n	800d0fa <_dtoa_r+0x28a>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e7f3      	b.n	800d0cc <_dtoa_r+0x25c>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0e8:	9308      	str	r3, [sp, #32]
 800d0ea:	9b00      	ldr	r3, [sp, #0]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	9302      	str	r3, [sp, #8]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	9303      	str	r3, [sp, #12]
 800d0f6:	bfb8      	it	lt
 800d0f8:	2301      	movlt	r3, #1
 800d0fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	6042      	str	r2, [r0, #4]
 800d100:	2204      	movs	r2, #4
 800d102:	f102 0614 	add.w	r6, r2, #20
 800d106:	429e      	cmp	r6, r3
 800d108:	6841      	ldr	r1, [r0, #4]
 800d10a:	d93d      	bls.n	800d188 <_dtoa_r+0x318>
 800d10c:	4620      	mov	r0, r4
 800d10e:	f001 f983 	bl	800e418 <_Balloc>
 800d112:	9001      	str	r0, [sp, #4]
 800d114:	2800      	cmp	r0, #0
 800d116:	d13b      	bne.n	800d190 <_dtoa_r+0x320>
 800d118:	4b11      	ldr	r3, [pc, #68]	; (800d160 <_dtoa_r+0x2f0>)
 800d11a:	4602      	mov	r2, r0
 800d11c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d120:	e6c0      	b.n	800cea4 <_dtoa_r+0x34>
 800d122:	2301      	movs	r3, #1
 800d124:	e7df      	b.n	800d0e6 <_dtoa_r+0x276>
 800d126:	bf00      	nop
 800d128:	636f4361 	.word	0x636f4361
 800d12c:	3fd287a7 	.word	0x3fd287a7
 800d130:	8b60c8b3 	.word	0x8b60c8b3
 800d134:	3fc68a28 	.word	0x3fc68a28
 800d138:	509f79fb 	.word	0x509f79fb
 800d13c:	3fd34413 	.word	0x3fd34413
 800d140:	0800f952 	.word	0x0800f952
 800d144:	0800f969 	.word	0x0800f969
 800d148:	7ff00000 	.word	0x7ff00000
 800d14c:	0800f94e 	.word	0x0800f94e
 800d150:	0800f945 	.word	0x0800f945
 800d154:	0800f789 	.word	0x0800f789
 800d158:	3ff80000 	.word	0x3ff80000
 800d15c:	0800fad8 	.word	0x0800fad8
 800d160:	0800f9c4 	.word	0x0800f9c4
 800d164:	2501      	movs	r5, #1
 800d166:	2300      	movs	r3, #0
 800d168:	9306      	str	r3, [sp, #24]
 800d16a:	9508      	str	r5, [sp, #32]
 800d16c:	f04f 33ff 	mov.w	r3, #4294967295
 800d170:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d174:	2200      	movs	r2, #0
 800d176:	2312      	movs	r3, #18
 800d178:	e7b0      	b.n	800d0dc <_dtoa_r+0x26c>
 800d17a:	2301      	movs	r3, #1
 800d17c:	9308      	str	r3, [sp, #32]
 800d17e:	e7f5      	b.n	800d16c <_dtoa_r+0x2fc>
 800d180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d182:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d186:	e7b8      	b.n	800d0fa <_dtoa_r+0x28a>
 800d188:	3101      	adds	r1, #1
 800d18a:	6041      	str	r1, [r0, #4]
 800d18c:	0052      	lsls	r2, r2, #1
 800d18e:	e7b8      	b.n	800d102 <_dtoa_r+0x292>
 800d190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d192:	9a01      	ldr	r2, [sp, #4]
 800d194:	601a      	str	r2, [r3, #0]
 800d196:	9b03      	ldr	r3, [sp, #12]
 800d198:	2b0e      	cmp	r3, #14
 800d19a:	f200 809d 	bhi.w	800d2d8 <_dtoa_r+0x468>
 800d19e:	2d00      	cmp	r5, #0
 800d1a0:	f000 809a 	beq.w	800d2d8 <_dtoa_r+0x468>
 800d1a4:	9b00      	ldr	r3, [sp, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	dd32      	ble.n	800d210 <_dtoa_r+0x3a0>
 800d1aa:	4ab7      	ldr	r2, [pc, #732]	; (800d488 <_dtoa_r+0x618>)
 800d1ac:	f003 030f 	and.w	r3, r3, #15
 800d1b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d1b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d1b8:	9b00      	ldr	r3, [sp, #0]
 800d1ba:	05d8      	lsls	r0, r3, #23
 800d1bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d1c0:	d516      	bpl.n	800d1f0 <_dtoa_r+0x380>
 800d1c2:	4bb2      	ldr	r3, [pc, #712]	; (800d48c <_dtoa_r+0x61c>)
 800d1c4:	ec51 0b19 	vmov	r0, r1, d9
 800d1c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d1cc:	f7f3 fb3e 	bl	800084c <__aeabi_ddiv>
 800d1d0:	f007 070f 	and.w	r7, r7, #15
 800d1d4:	4682      	mov	sl, r0
 800d1d6:	468b      	mov	fp, r1
 800d1d8:	2503      	movs	r5, #3
 800d1da:	4eac      	ldr	r6, [pc, #688]	; (800d48c <_dtoa_r+0x61c>)
 800d1dc:	b957      	cbnz	r7, 800d1f4 <_dtoa_r+0x384>
 800d1de:	4642      	mov	r2, r8
 800d1e0:	464b      	mov	r3, r9
 800d1e2:	4650      	mov	r0, sl
 800d1e4:	4659      	mov	r1, fp
 800d1e6:	f7f3 fb31 	bl	800084c <__aeabi_ddiv>
 800d1ea:	4682      	mov	sl, r0
 800d1ec:	468b      	mov	fp, r1
 800d1ee:	e028      	b.n	800d242 <_dtoa_r+0x3d2>
 800d1f0:	2502      	movs	r5, #2
 800d1f2:	e7f2      	b.n	800d1da <_dtoa_r+0x36a>
 800d1f4:	07f9      	lsls	r1, r7, #31
 800d1f6:	d508      	bpl.n	800d20a <_dtoa_r+0x39a>
 800d1f8:	4640      	mov	r0, r8
 800d1fa:	4649      	mov	r1, r9
 800d1fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d200:	f7f3 f9fa 	bl	80005f8 <__aeabi_dmul>
 800d204:	3501      	adds	r5, #1
 800d206:	4680      	mov	r8, r0
 800d208:	4689      	mov	r9, r1
 800d20a:	107f      	asrs	r7, r7, #1
 800d20c:	3608      	adds	r6, #8
 800d20e:	e7e5      	b.n	800d1dc <_dtoa_r+0x36c>
 800d210:	f000 809b 	beq.w	800d34a <_dtoa_r+0x4da>
 800d214:	9b00      	ldr	r3, [sp, #0]
 800d216:	4f9d      	ldr	r7, [pc, #628]	; (800d48c <_dtoa_r+0x61c>)
 800d218:	425e      	negs	r6, r3
 800d21a:	4b9b      	ldr	r3, [pc, #620]	; (800d488 <_dtoa_r+0x618>)
 800d21c:	f006 020f 	and.w	r2, r6, #15
 800d220:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d228:	ec51 0b19 	vmov	r0, r1, d9
 800d22c:	f7f3 f9e4 	bl	80005f8 <__aeabi_dmul>
 800d230:	1136      	asrs	r6, r6, #4
 800d232:	4682      	mov	sl, r0
 800d234:	468b      	mov	fp, r1
 800d236:	2300      	movs	r3, #0
 800d238:	2502      	movs	r5, #2
 800d23a:	2e00      	cmp	r6, #0
 800d23c:	d17a      	bne.n	800d334 <_dtoa_r+0x4c4>
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1d3      	bne.n	800d1ea <_dtoa_r+0x37a>
 800d242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d244:	2b00      	cmp	r3, #0
 800d246:	f000 8082 	beq.w	800d34e <_dtoa_r+0x4de>
 800d24a:	4b91      	ldr	r3, [pc, #580]	; (800d490 <_dtoa_r+0x620>)
 800d24c:	2200      	movs	r2, #0
 800d24e:	4650      	mov	r0, sl
 800d250:	4659      	mov	r1, fp
 800d252:	f7f3 fc43 	bl	8000adc <__aeabi_dcmplt>
 800d256:	2800      	cmp	r0, #0
 800d258:	d079      	beq.n	800d34e <_dtoa_r+0x4de>
 800d25a:	9b03      	ldr	r3, [sp, #12]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d076      	beq.n	800d34e <_dtoa_r+0x4de>
 800d260:	9b02      	ldr	r3, [sp, #8]
 800d262:	2b00      	cmp	r3, #0
 800d264:	dd36      	ble.n	800d2d4 <_dtoa_r+0x464>
 800d266:	9b00      	ldr	r3, [sp, #0]
 800d268:	4650      	mov	r0, sl
 800d26a:	4659      	mov	r1, fp
 800d26c:	1e5f      	subs	r7, r3, #1
 800d26e:	2200      	movs	r2, #0
 800d270:	4b88      	ldr	r3, [pc, #544]	; (800d494 <_dtoa_r+0x624>)
 800d272:	f7f3 f9c1 	bl	80005f8 <__aeabi_dmul>
 800d276:	9e02      	ldr	r6, [sp, #8]
 800d278:	4682      	mov	sl, r0
 800d27a:	468b      	mov	fp, r1
 800d27c:	3501      	adds	r5, #1
 800d27e:	4628      	mov	r0, r5
 800d280:	f7f3 f950 	bl	8000524 <__aeabi_i2d>
 800d284:	4652      	mov	r2, sl
 800d286:	465b      	mov	r3, fp
 800d288:	f7f3 f9b6 	bl	80005f8 <__aeabi_dmul>
 800d28c:	4b82      	ldr	r3, [pc, #520]	; (800d498 <_dtoa_r+0x628>)
 800d28e:	2200      	movs	r2, #0
 800d290:	f7f2 fffc 	bl	800028c <__adddf3>
 800d294:	46d0      	mov	r8, sl
 800d296:	46d9      	mov	r9, fp
 800d298:	4682      	mov	sl, r0
 800d29a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d29e:	2e00      	cmp	r6, #0
 800d2a0:	d158      	bne.n	800d354 <_dtoa_r+0x4e4>
 800d2a2:	4b7e      	ldr	r3, [pc, #504]	; (800d49c <_dtoa_r+0x62c>)
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	4640      	mov	r0, r8
 800d2a8:	4649      	mov	r1, r9
 800d2aa:	f7f2 ffed 	bl	8000288 <__aeabi_dsub>
 800d2ae:	4652      	mov	r2, sl
 800d2b0:	465b      	mov	r3, fp
 800d2b2:	4680      	mov	r8, r0
 800d2b4:	4689      	mov	r9, r1
 800d2b6:	f7f3 fc2f 	bl	8000b18 <__aeabi_dcmpgt>
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	f040 8295 	bne.w	800d7ea <_dtoa_r+0x97a>
 800d2c0:	4652      	mov	r2, sl
 800d2c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d2c6:	4640      	mov	r0, r8
 800d2c8:	4649      	mov	r1, r9
 800d2ca:	f7f3 fc07 	bl	8000adc <__aeabi_dcmplt>
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	f040 8289 	bne.w	800d7e6 <_dtoa_r+0x976>
 800d2d4:	ec5b ab19 	vmov	sl, fp, d9
 800d2d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f2c0 8148 	blt.w	800d570 <_dtoa_r+0x700>
 800d2e0:	9a00      	ldr	r2, [sp, #0]
 800d2e2:	2a0e      	cmp	r2, #14
 800d2e4:	f300 8144 	bgt.w	800d570 <_dtoa_r+0x700>
 800d2e8:	4b67      	ldr	r3, [pc, #412]	; (800d488 <_dtoa_r+0x618>)
 800d2ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f280 80d5 	bge.w	800d4a4 <_dtoa_r+0x634>
 800d2fa:	9b03      	ldr	r3, [sp, #12]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f300 80d1 	bgt.w	800d4a4 <_dtoa_r+0x634>
 800d302:	f040 826f 	bne.w	800d7e4 <_dtoa_r+0x974>
 800d306:	4b65      	ldr	r3, [pc, #404]	; (800d49c <_dtoa_r+0x62c>)
 800d308:	2200      	movs	r2, #0
 800d30a:	4640      	mov	r0, r8
 800d30c:	4649      	mov	r1, r9
 800d30e:	f7f3 f973 	bl	80005f8 <__aeabi_dmul>
 800d312:	4652      	mov	r2, sl
 800d314:	465b      	mov	r3, fp
 800d316:	f7f3 fbf5 	bl	8000b04 <__aeabi_dcmpge>
 800d31a:	9e03      	ldr	r6, [sp, #12]
 800d31c:	4637      	mov	r7, r6
 800d31e:	2800      	cmp	r0, #0
 800d320:	f040 8245 	bne.w	800d7ae <_dtoa_r+0x93e>
 800d324:	9d01      	ldr	r5, [sp, #4]
 800d326:	2331      	movs	r3, #49	; 0x31
 800d328:	f805 3b01 	strb.w	r3, [r5], #1
 800d32c:	9b00      	ldr	r3, [sp, #0]
 800d32e:	3301      	adds	r3, #1
 800d330:	9300      	str	r3, [sp, #0]
 800d332:	e240      	b.n	800d7b6 <_dtoa_r+0x946>
 800d334:	07f2      	lsls	r2, r6, #31
 800d336:	d505      	bpl.n	800d344 <_dtoa_r+0x4d4>
 800d338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d33c:	f7f3 f95c 	bl	80005f8 <__aeabi_dmul>
 800d340:	3501      	adds	r5, #1
 800d342:	2301      	movs	r3, #1
 800d344:	1076      	asrs	r6, r6, #1
 800d346:	3708      	adds	r7, #8
 800d348:	e777      	b.n	800d23a <_dtoa_r+0x3ca>
 800d34a:	2502      	movs	r5, #2
 800d34c:	e779      	b.n	800d242 <_dtoa_r+0x3d2>
 800d34e:	9f00      	ldr	r7, [sp, #0]
 800d350:	9e03      	ldr	r6, [sp, #12]
 800d352:	e794      	b.n	800d27e <_dtoa_r+0x40e>
 800d354:	9901      	ldr	r1, [sp, #4]
 800d356:	4b4c      	ldr	r3, [pc, #304]	; (800d488 <_dtoa_r+0x618>)
 800d358:	4431      	add	r1, r6
 800d35a:	910d      	str	r1, [sp, #52]	; 0x34
 800d35c:	9908      	ldr	r1, [sp, #32]
 800d35e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d362:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d366:	2900      	cmp	r1, #0
 800d368:	d043      	beq.n	800d3f2 <_dtoa_r+0x582>
 800d36a:	494d      	ldr	r1, [pc, #308]	; (800d4a0 <_dtoa_r+0x630>)
 800d36c:	2000      	movs	r0, #0
 800d36e:	f7f3 fa6d 	bl	800084c <__aeabi_ddiv>
 800d372:	4652      	mov	r2, sl
 800d374:	465b      	mov	r3, fp
 800d376:	f7f2 ff87 	bl	8000288 <__aeabi_dsub>
 800d37a:	9d01      	ldr	r5, [sp, #4]
 800d37c:	4682      	mov	sl, r0
 800d37e:	468b      	mov	fp, r1
 800d380:	4649      	mov	r1, r9
 800d382:	4640      	mov	r0, r8
 800d384:	f7f3 fbe8 	bl	8000b58 <__aeabi_d2iz>
 800d388:	4606      	mov	r6, r0
 800d38a:	f7f3 f8cb 	bl	8000524 <__aeabi_i2d>
 800d38e:	4602      	mov	r2, r0
 800d390:	460b      	mov	r3, r1
 800d392:	4640      	mov	r0, r8
 800d394:	4649      	mov	r1, r9
 800d396:	f7f2 ff77 	bl	8000288 <__aeabi_dsub>
 800d39a:	3630      	adds	r6, #48	; 0x30
 800d39c:	f805 6b01 	strb.w	r6, [r5], #1
 800d3a0:	4652      	mov	r2, sl
 800d3a2:	465b      	mov	r3, fp
 800d3a4:	4680      	mov	r8, r0
 800d3a6:	4689      	mov	r9, r1
 800d3a8:	f7f3 fb98 	bl	8000adc <__aeabi_dcmplt>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	d163      	bne.n	800d478 <_dtoa_r+0x608>
 800d3b0:	4642      	mov	r2, r8
 800d3b2:	464b      	mov	r3, r9
 800d3b4:	4936      	ldr	r1, [pc, #216]	; (800d490 <_dtoa_r+0x620>)
 800d3b6:	2000      	movs	r0, #0
 800d3b8:	f7f2 ff66 	bl	8000288 <__aeabi_dsub>
 800d3bc:	4652      	mov	r2, sl
 800d3be:	465b      	mov	r3, fp
 800d3c0:	f7f3 fb8c 	bl	8000adc <__aeabi_dcmplt>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	f040 80b5 	bne.w	800d534 <_dtoa_r+0x6c4>
 800d3ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3cc:	429d      	cmp	r5, r3
 800d3ce:	d081      	beq.n	800d2d4 <_dtoa_r+0x464>
 800d3d0:	4b30      	ldr	r3, [pc, #192]	; (800d494 <_dtoa_r+0x624>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	4650      	mov	r0, sl
 800d3d6:	4659      	mov	r1, fp
 800d3d8:	f7f3 f90e 	bl	80005f8 <__aeabi_dmul>
 800d3dc:	4b2d      	ldr	r3, [pc, #180]	; (800d494 <_dtoa_r+0x624>)
 800d3de:	4682      	mov	sl, r0
 800d3e0:	468b      	mov	fp, r1
 800d3e2:	4640      	mov	r0, r8
 800d3e4:	4649      	mov	r1, r9
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f7f3 f906 	bl	80005f8 <__aeabi_dmul>
 800d3ec:	4680      	mov	r8, r0
 800d3ee:	4689      	mov	r9, r1
 800d3f0:	e7c6      	b.n	800d380 <_dtoa_r+0x510>
 800d3f2:	4650      	mov	r0, sl
 800d3f4:	4659      	mov	r1, fp
 800d3f6:	f7f3 f8ff 	bl	80005f8 <__aeabi_dmul>
 800d3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3fc:	9d01      	ldr	r5, [sp, #4]
 800d3fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800d400:	4682      	mov	sl, r0
 800d402:	468b      	mov	fp, r1
 800d404:	4649      	mov	r1, r9
 800d406:	4640      	mov	r0, r8
 800d408:	f7f3 fba6 	bl	8000b58 <__aeabi_d2iz>
 800d40c:	4606      	mov	r6, r0
 800d40e:	f7f3 f889 	bl	8000524 <__aeabi_i2d>
 800d412:	3630      	adds	r6, #48	; 0x30
 800d414:	4602      	mov	r2, r0
 800d416:	460b      	mov	r3, r1
 800d418:	4640      	mov	r0, r8
 800d41a:	4649      	mov	r1, r9
 800d41c:	f7f2 ff34 	bl	8000288 <__aeabi_dsub>
 800d420:	f805 6b01 	strb.w	r6, [r5], #1
 800d424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d426:	429d      	cmp	r5, r3
 800d428:	4680      	mov	r8, r0
 800d42a:	4689      	mov	r9, r1
 800d42c:	f04f 0200 	mov.w	r2, #0
 800d430:	d124      	bne.n	800d47c <_dtoa_r+0x60c>
 800d432:	4b1b      	ldr	r3, [pc, #108]	; (800d4a0 <_dtoa_r+0x630>)
 800d434:	4650      	mov	r0, sl
 800d436:	4659      	mov	r1, fp
 800d438:	f7f2 ff28 	bl	800028c <__adddf3>
 800d43c:	4602      	mov	r2, r0
 800d43e:	460b      	mov	r3, r1
 800d440:	4640      	mov	r0, r8
 800d442:	4649      	mov	r1, r9
 800d444:	f7f3 fb68 	bl	8000b18 <__aeabi_dcmpgt>
 800d448:	2800      	cmp	r0, #0
 800d44a:	d173      	bne.n	800d534 <_dtoa_r+0x6c4>
 800d44c:	4652      	mov	r2, sl
 800d44e:	465b      	mov	r3, fp
 800d450:	4913      	ldr	r1, [pc, #76]	; (800d4a0 <_dtoa_r+0x630>)
 800d452:	2000      	movs	r0, #0
 800d454:	f7f2 ff18 	bl	8000288 <__aeabi_dsub>
 800d458:	4602      	mov	r2, r0
 800d45a:	460b      	mov	r3, r1
 800d45c:	4640      	mov	r0, r8
 800d45e:	4649      	mov	r1, r9
 800d460:	f7f3 fb3c 	bl	8000adc <__aeabi_dcmplt>
 800d464:	2800      	cmp	r0, #0
 800d466:	f43f af35 	beq.w	800d2d4 <_dtoa_r+0x464>
 800d46a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d46c:	1e6b      	subs	r3, r5, #1
 800d46e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d470:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d474:	2b30      	cmp	r3, #48	; 0x30
 800d476:	d0f8      	beq.n	800d46a <_dtoa_r+0x5fa>
 800d478:	9700      	str	r7, [sp, #0]
 800d47a:	e049      	b.n	800d510 <_dtoa_r+0x6a0>
 800d47c:	4b05      	ldr	r3, [pc, #20]	; (800d494 <_dtoa_r+0x624>)
 800d47e:	f7f3 f8bb 	bl	80005f8 <__aeabi_dmul>
 800d482:	4680      	mov	r8, r0
 800d484:	4689      	mov	r9, r1
 800d486:	e7bd      	b.n	800d404 <_dtoa_r+0x594>
 800d488:	0800fad8 	.word	0x0800fad8
 800d48c:	0800fab0 	.word	0x0800fab0
 800d490:	3ff00000 	.word	0x3ff00000
 800d494:	40240000 	.word	0x40240000
 800d498:	401c0000 	.word	0x401c0000
 800d49c:	40140000 	.word	0x40140000
 800d4a0:	3fe00000 	.word	0x3fe00000
 800d4a4:	9d01      	ldr	r5, [sp, #4]
 800d4a6:	4656      	mov	r6, sl
 800d4a8:	465f      	mov	r7, fp
 800d4aa:	4642      	mov	r2, r8
 800d4ac:	464b      	mov	r3, r9
 800d4ae:	4630      	mov	r0, r6
 800d4b0:	4639      	mov	r1, r7
 800d4b2:	f7f3 f9cb 	bl	800084c <__aeabi_ddiv>
 800d4b6:	f7f3 fb4f 	bl	8000b58 <__aeabi_d2iz>
 800d4ba:	4682      	mov	sl, r0
 800d4bc:	f7f3 f832 	bl	8000524 <__aeabi_i2d>
 800d4c0:	4642      	mov	r2, r8
 800d4c2:	464b      	mov	r3, r9
 800d4c4:	f7f3 f898 	bl	80005f8 <__aeabi_dmul>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	4639      	mov	r1, r7
 800d4d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d4d4:	f7f2 fed8 	bl	8000288 <__aeabi_dsub>
 800d4d8:	f805 6b01 	strb.w	r6, [r5], #1
 800d4dc:	9e01      	ldr	r6, [sp, #4]
 800d4de:	9f03      	ldr	r7, [sp, #12]
 800d4e0:	1bae      	subs	r6, r5, r6
 800d4e2:	42b7      	cmp	r7, r6
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	d135      	bne.n	800d556 <_dtoa_r+0x6e6>
 800d4ea:	f7f2 fecf 	bl	800028c <__adddf3>
 800d4ee:	4642      	mov	r2, r8
 800d4f0:	464b      	mov	r3, r9
 800d4f2:	4606      	mov	r6, r0
 800d4f4:	460f      	mov	r7, r1
 800d4f6:	f7f3 fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 800d4fa:	b9d0      	cbnz	r0, 800d532 <_dtoa_r+0x6c2>
 800d4fc:	4642      	mov	r2, r8
 800d4fe:	464b      	mov	r3, r9
 800d500:	4630      	mov	r0, r6
 800d502:	4639      	mov	r1, r7
 800d504:	f7f3 fae0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d508:	b110      	cbz	r0, 800d510 <_dtoa_r+0x6a0>
 800d50a:	f01a 0f01 	tst.w	sl, #1
 800d50e:	d110      	bne.n	800d532 <_dtoa_r+0x6c2>
 800d510:	4620      	mov	r0, r4
 800d512:	ee18 1a10 	vmov	r1, s16
 800d516:	f000 ffbf 	bl	800e498 <_Bfree>
 800d51a:	2300      	movs	r3, #0
 800d51c:	9800      	ldr	r0, [sp, #0]
 800d51e:	702b      	strb	r3, [r5, #0]
 800d520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d522:	3001      	adds	r0, #1
 800d524:	6018      	str	r0, [r3, #0]
 800d526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d528:	2b00      	cmp	r3, #0
 800d52a:	f43f acf1 	beq.w	800cf10 <_dtoa_r+0xa0>
 800d52e:	601d      	str	r5, [r3, #0]
 800d530:	e4ee      	b.n	800cf10 <_dtoa_r+0xa0>
 800d532:	9f00      	ldr	r7, [sp, #0]
 800d534:	462b      	mov	r3, r5
 800d536:	461d      	mov	r5, r3
 800d538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d53c:	2a39      	cmp	r2, #57	; 0x39
 800d53e:	d106      	bne.n	800d54e <_dtoa_r+0x6de>
 800d540:	9a01      	ldr	r2, [sp, #4]
 800d542:	429a      	cmp	r2, r3
 800d544:	d1f7      	bne.n	800d536 <_dtoa_r+0x6c6>
 800d546:	9901      	ldr	r1, [sp, #4]
 800d548:	2230      	movs	r2, #48	; 0x30
 800d54a:	3701      	adds	r7, #1
 800d54c:	700a      	strb	r2, [r1, #0]
 800d54e:	781a      	ldrb	r2, [r3, #0]
 800d550:	3201      	adds	r2, #1
 800d552:	701a      	strb	r2, [r3, #0]
 800d554:	e790      	b.n	800d478 <_dtoa_r+0x608>
 800d556:	4ba6      	ldr	r3, [pc, #664]	; (800d7f0 <_dtoa_r+0x980>)
 800d558:	2200      	movs	r2, #0
 800d55a:	f7f3 f84d 	bl	80005f8 <__aeabi_dmul>
 800d55e:	2200      	movs	r2, #0
 800d560:	2300      	movs	r3, #0
 800d562:	4606      	mov	r6, r0
 800d564:	460f      	mov	r7, r1
 800d566:	f7f3 faaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800d56a:	2800      	cmp	r0, #0
 800d56c:	d09d      	beq.n	800d4aa <_dtoa_r+0x63a>
 800d56e:	e7cf      	b.n	800d510 <_dtoa_r+0x6a0>
 800d570:	9a08      	ldr	r2, [sp, #32]
 800d572:	2a00      	cmp	r2, #0
 800d574:	f000 80d7 	beq.w	800d726 <_dtoa_r+0x8b6>
 800d578:	9a06      	ldr	r2, [sp, #24]
 800d57a:	2a01      	cmp	r2, #1
 800d57c:	f300 80ba 	bgt.w	800d6f4 <_dtoa_r+0x884>
 800d580:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d582:	2a00      	cmp	r2, #0
 800d584:	f000 80b2 	beq.w	800d6ec <_dtoa_r+0x87c>
 800d588:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d58c:	9e07      	ldr	r6, [sp, #28]
 800d58e:	9d04      	ldr	r5, [sp, #16]
 800d590:	9a04      	ldr	r2, [sp, #16]
 800d592:	441a      	add	r2, r3
 800d594:	9204      	str	r2, [sp, #16]
 800d596:	9a05      	ldr	r2, [sp, #20]
 800d598:	2101      	movs	r1, #1
 800d59a:	441a      	add	r2, r3
 800d59c:	4620      	mov	r0, r4
 800d59e:	9205      	str	r2, [sp, #20]
 800d5a0:	f001 f87c 	bl	800e69c <__i2b>
 800d5a4:	4607      	mov	r7, r0
 800d5a6:	2d00      	cmp	r5, #0
 800d5a8:	dd0c      	ble.n	800d5c4 <_dtoa_r+0x754>
 800d5aa:	9b05      	ldr	r3, [sp, #20]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	dd09      	ble.n	800d5c4 <_dtoa_r+0x754>
 800d5b0:	42ab      	cmp	r3, r5
 800d5b2:	9a04      	ldr	r2, [sp, #16]
 800d5b4:	bfa8      	it	ge
 800d5b6:	462b      	movge	r3, r5
 800d5b8:	1ad2      	subs	r2, r2, r3
 800d5ba:	9204      	str	r2, [sp, #16]
 800d5bc:	9a05      	ldr	r2, [sp, #20]
 800d5be:	1aed      	subs	r5, r5, r3
 800d5c0:	1ad3      	subs	r3, r2, r3
 800d5c2:	9305      	str	r3, [sp, #20]
 800d5c4:	9b07      	ldr	r3, [sp, #28]
 800d5c6:	b31b      	cbz	r3, 800d610 <_dtoa_r+0x7a0>
 800d5c8:	9b08      	ldr	r3, [sp, #32]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	f000 80af 	beq.w	800d72e <_dtoa_r+0x8be>
 800d5d0:	2e00      	cmp	r6, #0
 800d5d2:	dd13      	ble.n	800d5fc <_dtoa_r+0x78c>
 800d5d4:	4639      	mov	r1, r7
 800d5d6:	4632      	mov	r2, r6
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f001 f91f 	bl	800e81c <__pow5mult>
 800d5de:	ee18 2a10 	vmov	r2, s16
 800d5e2:	4601      	mov	r1, r0
 800d5e4:	4607      	mov	r7, r0
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f001 f86e 	bl	800e6c8 <__multiply>
 800d5ec:	ee18 1a10 	vmov	r1, s16
 800d5f0:	4680      	mov	r8, r0
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f000 ff50 	bl	800e498 <_Bfree>
 800d5f8:	ee08 8a10 	vmov	s16, r8
 800d5fc:	9b07      	ldr	r3, [sp, #28]
 800d5fe:	1b9a      	subs	r2, r3, r6
 800d600:	d006      	beq.n	800d610 <_dtoa_r+0x7a0>
 800d602:	ee18 1a10 	vmov	r1, s16
 800d606:	4620      	mov	r0, r4
 800d608:	f001 f908 	bl	800e81c <__pow5mult>
 800d60c:	ee08 0a10 	vmov	s16, r0
 800d610:	2101      	movs	r1, #1
 800d612:	4620      	mov	r0, r4
 800d614:	f001 f842 	bl	800e69c <__i2b>
 800d618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	4606      	mov	r6, r0
 800d61e:	f340 8088 	ble.w	800d732 <_dtoa_r+0x8c2>
 800d622:	461a      	mov	r2, r3
 800d624:	4601      	mov	r1, r0
 800d626:	4620      	mov	r0, r4
 800d628:	f001 f8f8 	bl	800e81c <__pow5mult>
 800d62c:	9b06      	ldr	r3, [sp, #24]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	4606      	mov	r6, r0
 800d632:	f340 8081 	ble.w	800d738 <_dtoa_r+0x8c8>
 800d636:	f04f 0800 	mov.w	r8, #0
 800d63a:	6933      	ldr	r3, [r6, #16]
 800d63c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d640:	6918      	ldr	r0, [r3, #16]
 800d642:	f000 ffdb 	bl	800e5fc <__hi0bits>
 800d646:	f1c0 0020 	rsb	r0, r0, #32
 800d64a:	9b05      	ldr	r3, [sp, #20]
 800d64c:	4418      	add	r0, r3
 800d64e:	f010 001f 	ands.w	r0, r0, #31
 800d652:	f000 8092 	beq.w	800d77a <_dtoa_r+0x90a>
 800d656:	f1c0 0320 	rsb	r3, r0, #32
 800d65a:	2b04      	cmp	r3, #4
 800d65c:	f340 808a 	ble.w	800d774 <_dtoa_r+0x904>
 800d660:	f1c0 001c 	rsb	r0, r0, #28
 800d664:	9b04      	ldr	r3, [sp, #16]
 800d666:	4403      	add	r3, r0
 800d668:	9304      	str	r3, [sp, #16]
 800d66a:	9b05      	ldr	r3, [sp, #20]
 800d66c:	4403      	add	r3, r0
 800d66e:	4405      	add	r5, r0
 800d670:	9305      	str	r3, [sp, #20]
 800d672:	9b04      	ldr	r3, [sp, #16]
 800d674:	2b00      	cmp	r3, #0
 800d676:	dd07      	ble.n	800d688 <_dtoa_r+0x818>
 800d678:	ee18 1a10 	vmov	r1, s16
 800d67c:	461a      	mov	r2, r3
 800d67e:	4620      	mov	r0, r4
 800d680:	f001 f926 	bl	800e8d0 <__lshift>
 800d684:	ee08 0a10 	vmov	s16, r0
 800d688:	9b05      	ldr	r3, [sp, #20]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	dd05      	ble.n	800d69a <_dtoa_r+0x82a>
 800d68e:	4631      	mov	r1, r6
 800d690:	461a      	mov	r2, r3
 800d692:	4620      	mov	r0, r4
 800d694:	f001 f91c 	bl	800e8d0 <__lshift>
 800d698:	4606      	mov	r6, r0
 800d69a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d06e      	beq.n	800d77e <_dtoa_r+0x90e>
 800d6a0:	ee18 0a10 	vmov	r0, s16
 800d6a4:	4631      	mov	r1, r6
 800d6a6:	f001 f983 	bl	800e9b0 <__mcmp>
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	da67      	bge.n	800d77e <_dtoa_r+0x90e>
 800d6ae:	9b00      	ldr	r3, [sp, #0]
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	ee18 1a10 	vmov	r1, s16
 800d6b6:	9300      	str	r3, [sp, #0]
 800d6b8:	220a      	movs	r2, #10
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f000 ff0d 	bl	800e4dc <__multadd>
 800d6c2:	9b08      	ldr	r3, [sp, #32]
 800d6c4:	ee08 0a10 	vmov	s16, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f000 81b1 	beq.w	800da30 <_dtoa_r+0xbc0>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	4639      	mov	r1, r7
 800d6d2:	220a      	movs	r2, #10
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	f000 ff01 	bl	800e4dc <__multadd>
 800d6da:	9b02      	ldr	r3, [sp, #8]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	4607      	mov	r7, r0
 800d6e0:	f300 808e 	bgt.w	800d800 <_dtoa_r+0x990>
 800d6e4:	9b06      	ldr	r3, [sp, #24]
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	dc51      	bgt.n	800d78e <_dtoa_r+0x91e>
 800d6ea:	e089      	b.n	800d800 <_dtoa_r+0x990>
 800d6ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d6f2:	e74b      	b.n	800d58c <_dtoa_r+0x71c>
 800d6f4:	9b03      	ldr	r3, [sp, #12]
 800d6f6:	1e5e      	subs	r6, r3, #1
 800d6f8:	9b07      	ldr	r3, [sp, #28]
 800d6fa:	42b3      	cmp	r3, r6
 800d6fc:	bfbf      	itttt	lt
 800d6fe:	9b07      	ldrlt	r3, [sp, #28]
 800d700:	9607      	strlt	r6, [sp, #28]
 800d702:	1af2      	sublt	r2, r6, r3
 800d704:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d706:	bfb6      	itet	lt
 800d708:	189b      	addlt	r3, r3, r2
 800d70a:	1b9e      	subge	r6, r3, r6
 800d70c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d70e:	9b03      	ldr	r3, [sp, #12]
 800d710:	bfb8      	it	lt
 800d712:	2600      	movlt	r6, #0
 800d714:	2b00      	cmp	r3, #0
 800d716:	bfb7      	itett	lt
 800d718:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d71c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d720:	1a9d      	sublt	r5, r3, r2
 800d722:	2300      	movlt	r3, #0
 800d724:	e734      	b.n	800d590 <_dtoa_r+0x720>
 800d726:	9e07      	ldr	r6, [sp, #28]
 800d728:	9d04      	ldr	r5, [sp, #16]
 800d72a:	9f08      	ldr	r7, [sp, #32]
 800d72c:	e73b      	b.n	800d5a6 <_dtoa_r+0x736>
 800d72e:	9a07      	ldr	r2, [sp, #28]
 800d730:	e767      	b.n	800d602 <_dtoa_r+0x792>
 800d732:	9b06      	ldr	r3, [sp, #24]
 800d734:	2b01      	cmp	r3, #1
 800d736:	dc18      	bgt.n	800d76a <_dtoa_r+0x8fa>
 800d738:	f1ba 0f00 	cmp.w	sl, #0
 800d73c:	d115      	bne.n	800d76a <_dtoa_r+0x8fa>
 800d73e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d742:	b993      	cbnz	r3, 800d76a <_dtoa_r+0x8fa>
 800d744:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d748:	0d1b      	lsrs	r3, r3, #20
 800d74a:	051b      	lsls	r3, r3, #20
 800d74c:	b183      	cbz	r3, 800d770 <_dtoa_r+0x900>
 800d74e:	9b04      	ldr	r3, [sp, #16]
 800d750:	3301      	adds	r3, #1
 800d752:	9304      	str	r3, [sp, #16]
 800d754:	9b05      	ldr	r3, [sp, #20]
 800d756:	3301      	adds	r3, #1
 800d758:	9305      	str	r3, [sp, #20]
 800d75a:	f04f 0801 	mov.w	r8, #1
 800d75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d760:	2b00      	cmp	r3, #0
 800d762:	f47f af6a 	bne.w	800d63a <_dtoa_r+0x7ca>
 800d766:	2001      	movs	r0, #1
 800d768:	e76f      	b.n	800d64a <_dtoa_r+0x7da>
 800d76a:	f04f 0800 	mov.w	r8, #0
 800d76e:	e7f6      	b.n	800d75e <_dtoa_r+0x8ee>
 800d770:	4698      	mov	r8, r3
 800d772:	e7f4      	b.n	800d75e <_dtoa_r+0x8ee>
 800d774:	f43f af7d 	beq.w	800d672 <_dtoa_r+0x802>
 800d778:	4618      	mov	r0, r3
 800d77a:	301c      	adds	r0, #28
 800d77c:	e772      	b.n	800d664 <_dtoa_r+0x7f4>
 800d77e:	9b03      	ldr	r3, [sp, #12]
 800d780:	2b00      	cmp	r3, #0
 800d782:	dc37      	bgt.n	800d7f4 <_dtoa_r+0x984>
 800d784:	9b06      	ldr	r3, [sp, #24]
 800d786:	2b02      	cmp	r3, #2
 800d788:	dd34      	ble.n	800d7f4 <_dtoa_r+0x984>
 800d78a:	9b03      	ldr	r3, [sp, #12]
 800d78c:	9302      	str	r3, [sp, #8]
 800d78e:	9b02      	ldr	r3, [sp, #8]
 800d790:	b96b      	cbnz	r3, 800d7ae <_dtoa_r+0x93e>
 800d792:	4631      	mov	r1, r6
 800d794:	2205      	movs	r2, #5
 800d796:	4620      	mov	r0, r4
 800d798:	f000 fea0 	bl	800e4dc <__multadd>
 800d79c:	4601      	mov	r1, r0
 800d79e:	4606      	mov	r6, r0
 800d7a0:	ee18 0a10 	vmov	r0, s16
 800d7a4:	f001 f904 	bl	800e9b0 <__mcmp>
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	f73f adbb 	bgt.w	800d324 <_dtoa_r+0x4b4>
 800d7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7b0:	9d01      	ldr	r5, [sp, #4]
 800d7b2:	43db      	mvns	r3, r3
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	f04f 0800 	mov.w	r8, #0
 800d7ba:	4631      	mov	r1, r6
 800d7bc:	4620      	mov	r0, r4
 800d7be:	f000 fe6b 	bl	800e498 <_Bfree>
 800d7c2:	2f00      	cmp	r7, #0
 800d7c4:	f43f aea4 	beq.w	800d510 <_dtoa_r+0x6a0>
 800d7c8:	f1b8 0f00 	cmp.w	r8, #0
 800d7cc:	d005      	beq.n	800d7da <_dtoa_r+0x96a>
 800d7ce:	45b8      	cmp	r8, r7
 800d7d0:	d003      	beq.n	800d7da <_dtoa_r+0x96a>
 800d7d2:	4641      	mov	r1, r8
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	f000 fe5f 	bl	800e498 <_Bfree>
 800d7da:	4639      	mov	r1, r7
 800d7dc:	4620      	mov	r0, r4
 800d7de:	f000 fe5b 	bl	800e498 <_Bfree>
 800d7e2:	e695      	b.n	800d510 <_dtoa_r+0x6a0>
 800d7e4:	2600      	movs	r6, #0
 800d7e6:	4637      	mov	r7, r6
 800d7e8:	e7e1      	b.n	800d7ae <_dtoa_r+0x93e>
 800d7ea:	9700      	str	r7, [sp, #0]
 800d7ec:	4637      	mov	r7, r6
 800d7ee:	e599      	b.n	800d324 <_dtoa_r+0x4b4>
 800d7f0:	40240000 	.word	0x40240000
 800d7f4:	9b08      	ldr	r3, [sp, #32]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f000 80ca 	beq.w	800d990 <_dtoa_r+0xb20>
 800d7fc:	9b03      	ldr	r3, [sp, #12]
 800d7fe:	9302      	str	r3, [sp, #8]
 800d800:	2d00      	cmp	r5, #0
 800d802:	dd05      	ble.n	800d810 <_dtoa_r+0x9a0>
 800d804:	4639      	mov	r1, r7
 800d806:	462a      	mov	r2, r5
 800d808:	4620      	mov	r0, r4
 800d80a:	f001 f861 	bl	800e8d0 <__lshift>
 800d80e:	4607      	mov	r7, r0
 800d810:	f1b8 0f00 	cmp.w	r8, #0
 800d814:	d05b      	beq.n	800d8ce <_dtoa_r+0xa5e>
 800d816:	6879      	ldr	r1, [r7, #4]
 800d818:	4620      	mov	r0, r4
 800d81a:	f000 fdfd 	bl	800e418 <_Balloc>
 800d81e:	4605      	mov	r5, r0
 800d820:	b928      	cbnz	r0, 800d82e <_dtoa_r+0x9be>
 800d822:	4b87      	ldr	r3, [pc, #540]	; (800da40 <_dtoa_r+0xbd0>)
 800d824:	4602      	mov	r2, r0
 800d826:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d82a:	f7ff bb3b 	b.w	800cea4 <_dtoa_r+0x34>
 800d82e:	693a      	ldr	r2, [r7, #16]
 800d830:	3202      	adds	r2, #2
 800d832:	0092      	lsls	r2, r2, #2
 800d834:	f107 010c 	add.w	r1, r7, #12
 800d838:	300c      	adds	r0, #12
 800d83a:	f7fd faa2 	bl	800ad82 <memcpy>
 800d83e:	2201      	movs	r2, #1
 800d840:	4629      	mov	r1, r5
 800d842:	4620      	mov	r0, r4
 800d844:	f001 f844 	bl	800e8d0 <__lshift>
 800d848:	9b01      	ldr	r3, [sp, #4]
 800d84a:	f103 0901 	add.w	r9, r3, #1
 800d84e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d852:	4413      	add	r3, r2
 800d854:	9305      	str	r3, [sp, #20]
 800d856:	f00a 0301 	and.w	r3, sl, #1
 800d85a:	46b8      	mov	r8, r7
 800d85c:	9304      	str	r3, [sp, #16]
 800d85e:	4607      	mov	r7, r0
 800d860:	4631      	mov	r1, r6
 800d862:	ee18 0a10 	vmov	r0, s16
 800d866:	f7ff fa77 	bl	800cd58 <quorem>
 800d86a:	4641      	mov	r1, r8
 800d86c:	9002      	str	r0, [sp, #8]
 800d86e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d872:	ee18 0a10 	vmov	r0, s16
 800d876:	f001 f89b 	bl	800e9b0 <__mcmp>
 800d87a:	463a      	mov	r2, r7
 800d87c:	9003      	str	r0, [sp, #12]
 800d87e:	4631      	mov	r1, r6
 800d880:	4620      	mov	r0, r4
 800d882:	f001 f8b1 	bl	800e9e8 <__mdiff>
 800d886:	68c2      	ldr	r2, [r0, #12]
 800d888:	f109 3bff 	add.w	fp, r9, #4294967295
 800d88c:	4605      	mov	r5, r0
 800d88e:	bb02      	cbnz	r2, 800d8d2 <_dtoa_r+0xa62>
 800d890:	4601      	mov	r1, r0
 800d892:	ee18 0a10 	vmov	r0, s16
 800d896:	f001 f88b 	bl	800e9b0 <__mcmp>
 800d89a:	4602      	mov	r2, r0
 800d89c:	4629      	mov	r1, r5
 800d89e:	4620      	mov	r0, r4
 800d8a0:	9207      	str	r2, [sp, #28]
 800d8a2:	f000 fdf9 	bl	800e498 <_Bfree>
 800d8a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d8aa:	ea43 0102 	orr.w	r1, r3, r2
 800d8ae:	9b04      	ldr	r3, [sp, #16]
 800d8b0:	430b      	orrs	r3, r1
 800d8b2:	464d      	mov	r5, r9
 800d8b4:	d10f      	bne.n	800d8d6 <_dtoa_r+0xa66>
 800d8b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d8ba:	d02a      	beq.n	800d912 <_dtoa_r+0xaa2>
 800d8bc:	9b03      	ldr	r3, [sp, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	dd02      	ble.n	800d8c8 <_dtoa_r+0xa58>
 800d8c2:	9b02      	ldr	r3, [sp, #8]
 800d8c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d8c8:	f88b a000 	strb.w	sl, [fp]
 800d8cc:	e775      	b.n	800d7ba <_dtoa_r+0x94a>
 800d8ce:	4638      	mov	r0, r7
 800d8d0:	e7ba      	b.n	800d848 <_dtoa_r+0x9d8>
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	e7e2      	b.n	800d89c <_dtoa_r+0xa2c>
 800d8d6:	9b03      	ldr	r3, [sp, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	db04      	blt.n	800d8e6 <_dtoa_r+0xa76>
 800d8dc:	9906      	ldr	r1, [sp, #24]
 800d8de:	430b      	orrs	r3, r1
 800d8e0:	9904      	ldr	r1, [sp, #16]
 800d8e2:	430b      	orrs	r3, r1
 800d8e4:	d122      	bne.n	800d92c <_dtoa_r+0xabc>
 800d8e6:	2a00      	cmp	r2, #0
 800d8e8:	ddee      	ble.n	800d8c8 <_dtoa_r+0xa58>
 800d8ea:	ee18 1a10 	vmov	r1, s16
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f000 ffed 	bl	800e8d0 <__lshift>
 800d8f6:	4631      	mov	r1, r6
 800d8f8:	ee08 0a10 	vmov	s16, r0
 800d8fc:	f001 f858 	bl	800e9b0 <__mcmp>
 800d900:	2800      	cmp	r0, #0
 800d902:	dc03      	bgt.n	800d90c <_dtoa_r+0xa9c>
 800d904:	d1e0      	bne.n	800d8c8 <_dtoa_r+0xa58>
 800d906:	f01a 0f01 	tst.w	sl, #1
 800d90a:	d0dd      	beq.n	800d8c8 <_dtoa_r+0xa58>
 800d90c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d910:	d1d7      	bne.n	800d8c2 <_dtoa_r+0xa52>
 800d912:	2339      	movs	r3, #57	; 0x39
 800d914:	f88b 3000 	strb.w	r3, [fp]
 800d918:	462b      	mov	r3, r5
 800d91a:	461d      	mov	r5, r3
 800d91c:	3b01      	subs	r3, #1
 800d91e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d922:	2a39      	cmp	r2, #57	; 0x39
 800d924:	d071      	beq.n	800da0a <_dtoa_r+0xb9a>
 800d926:	3201      	adds	r2, #1
 800d928:	701a      	strb	r2, [r3, #0]
 800d92a:	e746      	b.n	800d7ba <_dtoa_r+0x94a>
 800d92c:	2a00      	cmp	r2, #0
 800d92e:	dd07      	ble.n	800d940 <_dtoa_r+0xad0>
 800d930:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d934:	d0ed      	beq.n	800d912 <_dtoa_r+0xaa2>
 800d936:	f10a 0301 	add.w	r3, sl, #1
 800d93a:	f88b 3000 	strb.w	r3, [fp]
 800d93e:	e73c      	b.n	800d7ba <_dtoa_r+0x94a>
 800d940:	9b05      	ldr	r3, [sp, #20]
 800d942:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d946:	4599      	cmp	r9, r3
 800d948:	d047      	beq.n	800d9da <_dtoa_r+0xb6a>
 800d94a:	ee18 1a10 	vmov	r1, s16
 800d94e:	2300      	movs	r3, #0
 800d950:	220a      	movs	r2, #10
 800d952:	4620      	mov	r0, r4
 800d954:	f000 fdc2 	bl	800e4dc <__multadd>
 800d958:	45b8      	cmp	r8, r7
 800d95a:	ee08 0a10 	vmov	s16, r0
 800d95e:	f04f 0300 	mov.w	r3, #0
 800d962:	f04f 020a 	mov.w	r2, #10
 800d966:	4641      	mov	r1, r8
 800d968:	4620      	mov	r0, r4
 800d96a:	d106      	bne.n	800d97a <_dtoa_r+0xb0a>
 800d96c:	f000 fdb6 	bl	800e4dc <__multadd>
 800d970:	4680      	mov	r8, r0
 800d972:	4607      	mov	r7, r0
 800d974:	f109 0901 	add.w	r9, r9, #1
 800d978:	e772      	b.n	800d860 <_dtoa_r+0x9f0>
 800d97a:	f000 fdaf 	bl	800e4dc <__multadd>
 800d97e:	4639      	mov	r1, r7
 800d980:	4680      	mov	r8, r0
 800d982:	2300      	movs	r3, #0
 800d984:	220a      	movs	r2, #10
 800d986:	4620      	mov	r0, r4
 800d988:	f000 fda8 	bl	800e4dc <__multadd>
 800d98c:	4607      	mov	r7, r0
 800d98e:	e7f1      	b.n	800d974 <_dtoa_r+0xb04>
 800d990:	9b03      	ldr	r3, [sp, #12]
 800d992:	9302      	str	r3, [sp, #8]
 800d994:	9d01      	ldr	r5, [sp, #4]
 800d996:	ee18 0a10 	vmov	r0, s16
 800d99a:	4631      	mov	r1, r6
 800d99c:	f7ff f9dc 	bl	800cd58 <quorem>
 800d9a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d9a4:	9b01      	ldr	r3, [sp, #4]
 800d9a6:	f805 ab01 	strb.w	sl, [r5], #1
 800d9aa:	1aea      	subs	r2, r5, r3
 800d9ac:	9b02      	ldr	r3, [sp, #8]
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	dd09      	ble.n	800d9c6 <_dtoa_r+0xb56>
 800d9b2:	ee18 1a10 	vmov	r1, s16
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	220a      	movs	r2, #10
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	f000 fd8e 	bl	800e4dc <__multadd>
 800d9c0:	ee08 0a10 	vmov	s16, r0
 800d9c4:	e7e7      	b.n	800d996 <_dtoa_r+0xb26>
 800d9c6:	9b02      	ldr	r3, [sp, #8]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	bfc8      	it	gt
 800d9cc:	461d      	movgt	r5, r3
 800d9ce:	9b01      	ldr	r3, [sp, #4]
 800d9d0:	bfd8      	it	le
 800d9d2:	2501      	movle	r5, #1
 800d9d4:	441d      	add	r5, r3
 800d9d6:	f04f 0800 	mov.w	r8, #0
 800d9da:	ee18 1a10 	vmov	r1, s16
 800d9de:	2201      	movs	r2, #1
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	f000 ff75 	bl	800e8d0 <__lshift>
 800d9e6:	4631      	mov	r1, r6
 800d9e8:	ee08 0a10 	vmov	s16, r0
 800d9ec:	f000 ffe0 	bl	800e9b0 <__mcmp>
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	dc91      	bgt.n	800d918 <_dtoa_r+0xaa8>
 800d9f4:	d102      	bne.n	800d9fc <_dtoa_r+0xb8c>
 800d9f6:	f01a 0f01 	tst.w	sl, #1
 800d9fa:	d18d      	bne.n	800d918 <_dtoa_r+0xaa8>
 800d9fc:	462b      	mov	r3, r5
 800d9fe:	461d      	mov	r5, r3
 800da00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da04:	2a30      	cmp	r2, #48	; 0x30
 800da06:	d0fa      	beq.n	800d9fe <_dtoa_r+0xb8e>
 800da08:	e6d7      	b.n	800d7ba <_dtoa_r+0x94a>
 800da0a:	9a01      	ldr	r2, [sp, #4]
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d184      	bne.n	800d91a <_dtoa_r+0xaaa>
 800da10:	9b00      	ldr	r3, [sp, #0]
 800da12:	3301      	adds	r3, #1
 800da14:	9300      	str	r3, [sp, #0]
 800da16:	2331      	movs	r3, #49	; 0x31
 800da18:	7013      	strb	r3, [r2, #0]
 800da1a:	e6ce      	b.n	800d7ba <_dtoa_r+0x94a>
 800da1c:	4b09      	ldr	r3, [pc, #36]	; (800da44 <_dtoa_r+0xbd4>)
 800da1e:	f7ff ba95 	b.w	800cf4c <_dtoa_r+0xdc>
 800da22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da24:	2b00      	cmp	r3, #0
 800da26:	f47f aa6e 	bne.w	800cf06 <_dtoa_r+0x96>
 800da2a:	4b07      	ldr	r3, [pc, #28]	; (800da48 <_dtoa_r+0xbd8>)
 800da2c:	f7ff ba8e 	b.w	800cf4c <_dtoa_r+0xdc>
 800da30:	9b02      	ldr	r3, [sp, #8]
 800da32:	2b00      	cmp	r3, #0
 800da34:	dcae      	bgt.n	800d994 <_dtoa_r+0xb24>
 800da36:	9b06      	ldr	r3, [sp, #24]
 800da38:	2b02      	cmp	r3, #2
 800da3a:	f73f aea8 	bgt.w	800d78e <_dtoa_r+0x91e>
 800da3e:	e7a9      	b.n	800d994 <_dtoa_r+0xb24>
 800da40:	0800f9c4 	.word	0x0800f9c4
 800da44:	0800f788 	.word	0x0800f788
 800da48:	0800f945 	.word	0x0800f945

0800da4c <__sflush_r>:
 800da4c:	898a      	ldrh	r2, [r1, #12]
 800da4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da52:	4605      	mov	r5, r0
 800da54:	0710      	lsls	r0, r2, #28
 800da56:	460c      	mov	r4, r1
 800da58:	d458      	bmi.n	800db0c <__sflush_r+0xc0>
 800da5a:	684b      	ldr	r3, [r1, #4]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	dc05      	bgt.n	800da6c <__sflush_r+0x20>
 800da60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da62:	2b00      	cmp	r3, #0
 800da64:	dc02      	bgt.n	800da6c <__sflush_r+0x20>
 800da66:	2000      	movs	r0, #0
 800da68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da6e:	2e00      	cmp	r6, #0
 800da70:	d0f9      	beq.n	800da66 <__sflush_r+0x1a>
 800da72:	2300      	movs	r3, #0
 800da74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da78:	682f      	ldr	r7, [r5, #0]
 800da7a:	602b      	str	r3, [r5, #0]
 800da7c:	d032      	beq.n	800dae4 <__sflush_r+0x98>
 800da7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da80:	89a3      	ldrh	r3, [r4, #12]
 800da82:	075a      	lsls	r2, r3, #29
 800da84:	d505      	bpl.n	800da92 <__sflush_r+0x46>
 800da86:	6863      	ldr	r3, [r4, #4]
 800da88:	1ac0      	subs	r0, r0, r3
 800da8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da8c:	b10b      	cbz	r3, 800da92 <__sflush_r+0x46>
 800da8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da90:	1ac0      	subs	r0, r0, r3
 800da92:	2300      	movs	r3, #0
 800da94:	4602      	mov	r2, r0
 800da96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da98:	6a21      	ldr	r1, [r4, #32]
 800da9a:	4628      	mov	r0, r5
 800da9c:	47b0      	blx	r6
 800da9e:	1c43      	adds	r3, r0, #1
 800daa0:	89a3      	ldrh	r3, [r4, #12]
 800daa2:	d106      	bne.n	800dab2 <__sflush_r+0x66>
 800daa4:	6829      	ldr	r1, [r5, #0]
 800daa6:	291d      	cmp	r1, #29
 800daa8:	d82c      	bhi.n	800db04 <__sflush_r+0xb8>
 800daaa:	4a2a      	ldr	r2, [pc, #168]	; (800db54 <__sflush_r+0x108>)
 800daac:	40ca      	lsrs	r2, r1
 800daae:	07d6      	lsls	r6, r2, #31
 800dab0:	d528      	bpl.n	800db04 <__sflush_r+0xb8>
 800dab2:	2200      	movs	r2, #0
 800dab4:	6062      	str	r2, [r4, #4]
 800dab6:	04d9      	lsls	r1, r3, #19
 800dab8:	6922      	ldr	r2, [r4, #16]
 800daba:	6022      	str	r2, [r4, #0]
 800dabc:	d504      	bpl.n	800dac8 <__sflush_r+0x7c>
 800dabe:	1c42      	adds	r2, r0, #1
 800dac0:	d101      	bne.n	800dac6 <__sflush_r+0x7a>
 800dac2:	682b      	ldr	r3, [r5, #0]
 800dac4:	b903      	cbnz	r3, 800dac8 <__sflush_r+0x7c>
 800dac6:	6560      	str	r0, [r4, #84]	; 0x54
 800dac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800daca:	602f      	str	r7, [r5, #0]
 800dacc:	2900      	cmp	r1, #0
 800dace:	d0ca      	beq.n	800da66 <__sflush_r+0x1a>
 800dad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dad4:	4299      	cmp	r1, r3
 800dad6:	d002      	beq.n	800dade <__sflush_r+0x92>
 800dad8:	4628      	mov	r0, r5
 800dada:	f001 f975 	bl	800edc8 <_free_r>
 800dade:	2000      	movs	r0, #0
 800dae0:	6360      	str	r0, [r4, #52]	; 0x34
 800dae2:	e7c1      	b.n	800da68 <__sflush_r+0x1c>
 800dae4:	6a21      	ldr	r1, [r4, #32]
 800dae6:	2301      	movs	r3, #1
 800dae8:	4628      	mov	r0, r5
 800daea:	47b0      	blx	r6
 800daec:	1c41      	adds	r1, r0, #1
 800daee:	d1c7      	bne.n	800da80 <__sflush_r+0x34>
 800daf0:	682b      	ldr	r3, [r5, #0]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d0c4      	beq.n	800da80 <__sflush_r+0x34>
 800daf6:	2b1d      	cmp	r3, #29
 800daf8:	d001      	beq.n	800dafe <__sflush_r+0xb2>
 800dafa:	2b16      	cmp	r3, #22
 800dafc:	d101      	bne.n	800db02 <__sflush_r+0xb6>
 800dafe:	602f      	str	r7, [r5, #0]
 800db00:	e7b1      	b.n	800da66 <__sflush_r+0x1a>
 800db02:	89a3      	ldrh	r3, [r4, #12]
 800db04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db08:	81a3      	strh	r3, [r4, #12]
 800db0a:	e7ad      	b.n	800da68 <__sflush_r+0x1c>
 800db0c:	690f      	ldr	r7, [r1, #16]
 800db0e:	2f00      	cmp	r7, #0
 800db10:	d0a9      	beq.n	800da66 <__sflush_r+0x1a>
 800db12:	0793      	lsls	r3, r2, #30
 800db14:	680e      	ldr	r6, [r1, #0]
 800db16:	bf08      	it	eq
 800db18:	694b      	ldreq	r3, [r1, #20]
 800db1a:	600f      	str	r7, [r1, #0]
 800db1c:	bf18      	it	ne
 800db1e:	2300      	movne	r3, #0
 800db20:	eba6 0807 	sub.w	r8, r6, r7
 800db24:	608b      	str	r3, [r1, #8]
 800db26:	f1b8 0f00 	cmp.w	r8, #0
 800db2a:	dd9c      	ble.n	800da66 <__sflush_r+0x1a>
 800db2c:	6a21      	ldr	r1, [r4, #32]
 800db2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db30:	4643      	mov	r3, r8
 800db32:	463a      	mov	r2, r7
 800db34:	4628      	mov	r0, r5
 800db36:	47b0      	blx	r6
 800db38:	2800      	cmp	r0, #0
 800db3a:	dc06      	bgt.n	800db4a <__sflush_r+0xfe>
 800db3c:	89a3      	ldrh	r3, [r4, #12]
 800db3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db42:	81a3      	strh	r3, [r4, #12]
 800db44:	f04f 30ff 	mov.w	r0, #4294967295
 800db48:	e78e      	b.n	800da68 <__sflush_r+0x1c>
 800db4a:	4407      	add	r7, r0
 800db4c:	eba8 0800 	sub.w	r8, r8, r0
 800db50:	e7e9      	b.n	800db26 <__sflush_r+0xda>
 800db52:	bf00      	nop
 800db54:	20400001 	.word	0x20400001

0800db58 <_fflush_r>:
 800db58:	b538      	push	{r3, r4, r5, lr}
 800db5a:	690b      	ldr	r3, [r1, #16]
 800db5c:	4605      	mov	r5, r0
 800db5e:	460c      	mov	r4, r1
 800db60:	b913      	cbnz	r3, 800db68 <_fflush_r+0x10>
 800db62:	2500      	movs	r5, #0
 800db64:	4628      	mov	r0, r5
 800db66:	bd38      	pop	{r3, r4, r5, pc}
 800db68:	b118      	cbz	r0, 800db72 <_fflush_r+0x1a>
 800db6a:	6983      	ldr	r3, [r0, #24]
 800db6c:	b90b      	cbnz	r3, 800db72 <_fflush_r+0x1a>
 800db6e:	f7fd f843 	bl	800abf8 <__sinit>
 800db72:	4b14      	ldr	r3, [pc, #80]	; (800dbc4 <_fflush_r+0x6c>)
 800db74:	429c      	cmp	r4, r3
 800db76:	d11b      	bne.n	800dbb0 <_fflush_r+0x58>
 800db78:	686c      	ldr	r4, [r5, #4]
 800db7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d0ef      	beq.n	800db62 <_fflush_r+0xa>
 800db82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db84:	07d0      	lsls	r0, r2, #31
 800db86:	d404      	bmi.n	800db92 <_fflush_r+0x3a>
 800db88:	0599      	lsls	r1, r3, #22
 800db8a:	d402      	bmi.n	800db92 <_fflush_r+0x3a>
 800db8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db8e:	f7fd f8f6 	bl	800ad7e <__retarget_lock_acquire_recursive>
 800db92:	4628      	mov	r0, r5
 800db94:	4621      	mov	r1, r4
 800db96:	f7ff ff59 	bl	800da4c <__sflush_r>
 800db9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db9c:	07da      	lsls	r2, r3, #31
 800db9e:	4605      	mov	r5, r0
 800dba0:	d4e0      	bmi.n	800db64 <_fflush_r+0xc>
 800dba2:	89a3      	ldrh	r3, [r4, #12]
 800dba4:	059b      	lsls	r3, r3, #22
 800dba6:	d4dd      	bmi.n	800db64 <_fflush_r+0xc>
 800dba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbaa:	f7fd f8e9 	bl	800ad80 <__retarget_lock_release_recursive>
 800dbae:	e7d9      	b.n	800db64 <_fflush_r+0xc>
 800dbb0:	4b05      	ldr	r3, [pc, #20]	; (800dbc8 <_fflush_r+0x70>)
 800dbb2:	429c      	cmp	r4, r3
 800dbb4:	d101      	bne.n	800dbba <_fflush_r+0x62>
 800dbb6:	68ac      	ldr	r4, [r5, #8]
 800dbb8:	e7df      	b.n	800db7a <_fflush_r+0x22>
 800dbba:	4b04      	ldr	r3, [pc, #16]	; (800dbcc <_fflush_r+0x74>)
 800dbbc:	429c      	cmp	r4, r3
 800dbbe:	bf08      	it	eq
 800dbc0:	68ec      	ldreq	r4, [r5, #12]
 800dbc2:	e7da      	b.n	800db7a <_fflush_r+0x22>
 800dbc4:	0800f734 	.word	0x0800f734
 800dbc8:	0800f754 	.word	0x0800f754
 800dbcc:	0800f714 	.word	0x0800f714

0800dbd0 <fiprintf>:
 800dbd0:	b40e      	push	{r1, r2, r3}
 800dbd2:	b503      	push	{r0, r1, lr}
 800dbd4:	4601      	mov	r1, r0
 800dbd6:	ab03      	add	r3, sp, #12
 800dbd8:	4805      	ldr	r0, [pc, #20]	; (800dbf0 <fiprintf+0x20>)
 800dbda:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbde:	6800      	ldr	r0, [r0, #0]
 800dbe0:	9301      	str	r3, [sp, #4]
 800dbe2:	f001 fac3 	bl	800f16c <_vfiprintf_r>
 800dbe6:	b002      	add	sp, #8
 800dbe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbec:	b003      	add	sp, #12
 800dbee:	4770      	bx	lr
 800dbf0:	20000078 	.word	0x20000078

0800dbf4 <rshift>:
 800dbf4:	6903      	ldr	r3, [r0, #16]
 800dbf6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dbfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dc02:	f100 0414 	add.w	r4, r0, #20
 800dc06:	dd45      	ble.n	800dc94 <rshift+0xa0>
 800dc08:	f011 011f 	ands.w	r1, r1, #31
 800dc0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc14:	d10c      	bne.n	800dc30 <rshift+0x3c>
 800dc16:	f100 0710 	add.w	r7, r0, #16
 800dc1a:	4629      	mov	r1, r5
 800dc1c:	42b1      	cmp	r1, r6
 800dc1e:	d334      	bcc.n	800dc8a <rshift+0x96>
 800dc20:	1a9b      	subs	r3, r3, r2
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	1eea      	subs	r2, r5, #3
 800dc26:	4296      	cmp	r6, r2
 800dc28:	bf38      	it	cc
 800dc2a:	2300      	movcc	r3, #0
 800dc2c:	4423      	add	r3, r4
 800dc2e:	e015      	b.n	800dc5c <rshift+0x68>
 800dc30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc34:	f1c1 0820 	rsb	r8, r1, #32
 800dc38:	40cf      	lsrs	r7, r1
 800dc3a:	f105 0e04 	add.w	lr, r5, #4
 800dc3e:	46a1      	mov	r9, r4
 800dc40:	4576      	cmp	r6, lr
 800dc42:	46f4      	mov	ip, lr
 800dc44:	d815      	bhi.n	800dc72 <rshift+0x7e>
 800dc46:	1a9a      	subs	r2, r3, r2
 800dc48:	0092      	lsls	r2, r2, #2
 800dc4a:	3a04      	subs	r2, #4
 800dc4c:	3501      	adds	r5, #1
 800dc4e:	42ae      	cmp	r6, r5
 800dc50:	bf38      	it	cc
 800dc52:	2200      	movcc	r2, #0
 800dc54:	18a3      	adds	r3, r4, r2
 800dc56:	50a7      	str	r7, [r4, r2]
 800dc58:	b107      	cbz	r7, 800dc5c <rshift+0x68>
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	1b1a      	subs	r2, r3, r4
 800dc5e:	42a3      	cmp	r3, r4
 800dc60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dc64:	bf08      	it	eq
 800dc66:	2300      	moveq	r3, #0
 800dc68:	6102      	str	r2, [r0, #16]
 800dc6a:	bf08      	it	eq
 800dc6c:	6143      	streq	r3, [r0, #20]
 800dc6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc72:	f8dc c000 	ldr.w	ip, [ip]
 800dc76:	fa0c fc08 	lsl.w	ip, ip, r8
 800dc7a:	ea4c 0707 	orr.w	r7, ip, r7
 800dc7e:	f849 7b04 	str.w	r7, [r9], #4
 800dc82:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dc86:	40cf      	lsrs	r7, r1
 800dc88:	e7da      	b.n	800dc40 <rshift+0x4c>
 800dc8a:	f851 cb04 	ldr.w	ip, [r1], #4
 800dc8e:	f847 cf04 	str.w	ip, [r7, #4]!
 800dc92:	e7c3      	b.n	800dc1c <rshift+0x28>
 800dc94:	4623      	mov	r3, r4
 800dc96:	e7e1      	b.n	800dc5c <rshift+0x68>

0800dc98 <__hexdig_fun>:
 800dc98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dc9c:	2b09      	cmp	r3, #9
 800dc9e:	d802      	bhi.n	800dca6 <__hexdig_fun+0xe>
 800dca0:	3820      	subs	r0, #32
 800dca2:	b2c0      	uxtb	r0, r0
 800dca4:	4770      	bx	lr
 800dca6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dcaa:	2b05      	cmp	r3, #5
 800dcac:	d801      	bhi.n	800dcb2 <__hexdig_fun+0x1a>
 800dcae:	3847      	subs	r0, #71	; 0x47
 800dcb0:	e7f7      	b.n	800dca2 <__hexdig_fun+0xa>
 800dcb2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dcb6:	2b05      	cmp	r3, #5
 800dcb8:	d801      	bhi.n	800dcbe <__hexdig_fun+0x26>
 800dcba:	3827      	subs	r0, #39	; 0x27
 800dcbc:	e7f1      	b.n	800dca2 <__hexdig_fun+0xa>
 800dcbe:	2000      	movs	r0, #0
 800dcc0:	4770      	bx	lr
	...

0800dcc4 <__gethex>:
 800dcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc8:	ed2d 8b02 	vpush	{d8}
 800dccc:	b089      	sub	sp, #36	; 0x24
 800dcce:	ee08 0a10 	vmov	s16, r0
 800dcd2:	9304      	str	r3, [sp, #16]
 800dcd4:	4bb4      	ldr	r3, [pc, #720]	; (800dfa8 <__gethex+0x2e4>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	9301      	str	r3, [sp, #4]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	468b      	mov	fp, r1
 800dcde:	4690      	mov	r8, r2
 800dce0:	f7f2 fa76 	bl	80001d0 <strlen>
 800dce4:	9b01      	ldr	r3, [sp, #4]
 800dce6:	f8db 2000 	ldr.w	r2, [fp]
 800dcea:	4403      	add	r3, r0
 800dcec:	4682      	mov	sl, r0
 800dcee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dcf2:	9305      	str	r3, [sp, #20]
 800dcf4:	1c93      	adds	r3, r2, #2
 800dcf6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dcfa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dcfe:	32fe      	adds	r2, #254	; 0xfe
 800dd00:	18d1      	adds	r1, r2, r3
 800dd02:	461f      	mov	r7, r3
 800dd04:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dd08:	9100      	str	r1, [sp, #0]
 800dd0a:	2830      	cmp	r0, #48	; 0x30
 800dd0c:	d0f8      	beq.n	800dd00 <__gethex+0x3c>
 800dd0e:	f7ff ffc3 	bl	800dc98 <__hexdig_fun>
 800dd12:	4604      	mov	r4, r0
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d13a      	bne.n	800dd8e <__gethex+0xca>
 800dd18:	9901      	ldr	r1, [sp, #4]
 800dd1a:	4652      	mov	r2, sl
 800dd1c:	4638      	mov	r0, r7
 800dd1e:	f001 fb6f 	bl	800f400 <strncmp>
 800dd22:	4605      	mov	r5, r0
 800dd24:	2800      	cmp	r0, #0
 800dd26:	d168      	bne.n	800ddfa <__gethex+0x136>
 800dd28:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dd2c:	eb07 060a 	add.w	r6, r7, sl
 800dd30:	f7ff ffb2 	bl	800dc98 <__hexdig_fun>
 800dd34:	2800      	cmp	r0, #0
 800dd36:	d062      	beq.n	800ddfe <__gethex+0x13a>
 800dd38:	4633      	mov	r3, r6
 800dd3a:	7818      	ldrb	r0, [r3, #0]
 800dd3c:	2830      	cmp	r0, #48	; 0x30
 800dd3e:	461f      	mov	r7, r3
 800dd40:	f103 0301 	add.w	r3, r3, #1
 800dd44:	d0f9      	beq.n	800dd3a <__gethex+0x76>
 800dd46:	f7ff ffa7 	bl	800dc98 <__hexdig_fun>
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	fab0 f480 	clz	r4, r0
 800dd50:	0964      	lsrs	r4, r4, #5
 800dd52:	4635      	mov	r5, r6
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	463a      	mov	r2, r7
 800dd58:	4616      	mov	r6, r2
 800dd5a:	3201      	adds	r2, #1
 800dd5c:	7830      	ldrb	r0, [r6, #0]
 800dd5e:	f7ff ff9b 	bl	800dc98 <__hexdig_fun>
 800dd62:	2800      	cmp	r0, #0
 800dd64:	d1f8      	bne.n	800dd58 <__gethex+0x94>
 800dd66:	9901      	ldr	r1, [sp, #4]
 800dd68:	4652      	mov	r2, sl
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	f001 fb48 	bl	800f400 <strncmp>
 800dd70:	b980      	cbnz	r0, 800dd94 <__gethex+0xd0>
 800dd72:	b94d      	cbnz	r5, 800dd88 <__gethex+0xc4>
 800dd74:	eb06 050a 	add.w	r5, r6, sl
 800dd78:	462a      	mov	r2, r5
 800dd7a:	4616      	mov	r6, r2
 800dd7c:	3201      	adds	r2, #1
 800dd7e:	7830      	ldrb	r0, [r6, #0]
 800dd80:	f7ff ff8a 	bl	800dc98 <__hexdig_fun>
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d1f8      	bne.n	800dd7a <__gethex+0xb6>
 800dd88:	1bad      	subs	r5, r5, r6
 800dd8a:	00ad      	lsls	r5, r5, #2
 800dd8c:	e004      	b.n	800dd98 <__gethex+0xd4>
 800dd8e:	2400      	movs	r4, #0
 800dd90:	4625      	mov	r5, r4
 800dd92:	e7e0      	b.n	800dd56 <__gethex+0x92>
 800dd94:	2d00      	cmp	r5, #0
 800dd96:	d1f7      	bne.n	800dd88 <__gethex+0xc4>
 800dd98:	7833      	ldrb	r3, [r6, #0]
 800dd9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dd9e:	2b50      	cmp	r3, #80	; 0x50
 800dda0:	d13b      	bne.n	800de1a <__gethex+0x156>
 800dda2:	7873      	ldrb	r3, [r6, #1]
 800dda4:	2b2b      	cmp	r3, #43	; 0x2b
 800dda6:	d02c      	beq.n	800de02 <__gethex+0x13e>
 800dda8:	2b2d      	cmp	r3, #45	; 0x2d
 800ddaa:	d02e      	beq.n	800de0a <__gethex+0x146>
 800ddac:	1c71      	adds	r1, r6, #1
 800ddae:	f04f 0900 	mov.w	r9, #0
 800ddb2:	7808      	ldrb	r0, [r1, #0]
 800ddb4:	f7ff ff70 	bl	800dc98 <__hexdig_fun>
 800ddb8:	1e43      	subs	r3, r0, #1
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	2b18      	cmp	r3, #24
 800ddbe:	d82c      	bhi.n	800de1a <__gethex+0x156>
 800ddc0:	f1a0 0210 	sub.w	r2, r0, #16
 800ddc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ddc8:	f7ff ff66 	bl	800dc98 <__hexdig_fun>
 800ddcc:	1e43      	subs	r3, r0, #1
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	2b18      	cmp	r3, #24
 800ddd2:	d91d      	bls.n	800de10 <__gethex+0x14c>
 800ddd4:	f1b9 0f00 	cmp.w	r9, #0
 800ddd8:	d000      	beq.n	800dddc <__gethex+0x118>
 800ddda:	4252      	negs	r2, r2
 800dddc:	4415      	add	r5, r2
 800ddde:	f8cb 1000 	str.w	r1, [fp]
 800dde2:	b1e4      	cbz	r4, 800de1e <__gethex+0x15a>
 800dde4:	9b00      	ldr	r3, [sp, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	bf14      	ite	ne
 800ddea:	2700      	movne	r7, #0
 800ddec:	2706      	moveq	r7, #6
 800ddee:	4638      	mov	r0, r7
 800ddf0:	b009      	add	sp, #36	; 0x24
 800ddf2:	ecbd 8b02 	vpop	{d8}
 800ddf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddfa:	463e      	mov	r6, r7
 800ddfc:	4625      	mov	r5, r4
 800ddfe:	2401      	movs	r4, #1
 800de00:	e7ca      	b.n	800dd98 <__gethex+0xd4>
 800de02:	f04f 0900 	mov.w	r9, #0
 800de06:	1cb1      	adds	r1, r6, #2
 800de08:	e7d3      	b.n	800ddb2 <__gethex+0xee>
 800de0a:	f04f 0901 	mov.w	r9, #1
 800de0e:	e7fa      	b.n	800de06 <__gethex+0x142>
 800de10:	230a      	movs	r3, #10
 800de12:	fb03 0202 	mla	r2, r3, r2, r0
 800de16:	3a10      	subs	r2, #16
 800de18:	e7d4      	b.n	800ddc4 <__gethex+0x100>
 800de1a:	4631      	mov	r1, r6
 800de1c:	e7df      	b.n	800ddde <__gethex+0x11a>
 800de1e:	1bf3      	subs	r3, r6, r7
 800de20:	3b01      	subs	r3, #1
 800de22:	4621      	mov	r1, r4
 800de24:	2b07      	cmp	r3, #7
 800de26:	dc0b      	bgt.n	800de40 <__gethex+0x17c>
 800de28:	ee18 0a10 	vmov	r0, s16
 800de2c:	f000 faf4 	bl	800e418 <_Balloc>
 800de30:	4604      	mov	r4, r0
 800de32:	b940      	cbnz	r0, 800de46 <__gethex+0x182>
 800de34:	4b5d      	ldr	r3, [pc, #372]	; (800dfac <__gethex+0x2e8>)
 800de36:	4602      	mov	r2, r0
 800de38:	21de      	movs	r1, #222	; 0xde
 800de3a:	485d      	ldr	r0, [pc, #372]	; (800dfb0 <__gethex+0x2ec>)
 800de3c:	f7fe ff5e 	bl	800ccfc <__assert_func>
 800de40:	3101      	adds	r1, #1
 800de42:	105b      	asrs	r3, r3, #1
 800de44:	e7ee      	b.n	800de24 <__gethex+0x160>
 800de46:	f100 0914 	add.w	r9, r0, #20
 800de4a:	f04f 0b00 	mov.w	fp, #0
 800de4e:	f1ca 0301 	rsb	r3, sl, #1
 800de52:	f8cd 9008 	str.w	r9, [sp, #8]
 800de56:	f8cd b000 	str.w	fp, [sp]
 800de5a:	9306      	str	r3, [sp, #24]
 800de5c:	42b7      	cmp	r7, r6
 800de5e:	d340      	bcc.n	800dee2 <__gethex+0x21e>
 800de60:	9802      	ldr	r0, [sp, #8]
 800de62:	9b00      	ldr	r3, [sp, #0]
 800de64:	f840 3b04 	str.w	r3, [r0], #4
 800de68:	eba0 0009 	sub.w	r0, r0, r9
 800de6c:	1080      	asrs	r0, r0, #2
 800de6e:	0146      	lsls	r6, r0, #5
 800de70:	6120      	str	r0, [r4, #16]
 800de72:	4618      	mov	r0, r3
 800de74:	f000 fbc2 	bl	800e5fc <__hi0bits>
 800de78:	1a30      	subs	r0, r6, r0
 800de7a:	f8d8 6000 	ldr.w	r6, [r8]
 800de7e:	42b0      	cmp	r0, r6
 800de80:	dd63      	ble.n	800df4a <__gethex+0x286>
 800de82:	1b87      	subs	r7, r0, r6
 800de84:	4639      	mov	r1, r7
 800de86:	4620      	mov	r0, r4
 800de88:	f000 ff66 	bl	800ed58 <__any_on>
 800de8c:	4682      	mov	sl, r0
 800de8e:	b1a8      	cbz	r0, 800debc <__gethex+0x1f8>
 800de90:	1e7b      	subs	r3, r7, #1
 800de92:	1159      	asrs	r1, r3, #5
 800de94:	f003 021f 	and.w	r2, r3, #31
 800de98:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800de9c:	f04f 0a01 	mov.w	sl, #1
 800dea0:	fa0a f202 	lsl.w	r2, sl, r2
 800dea4:	420a      	tst	r2, r1
 800dea6:	d009      	beq.n	800debc <__gethex+0x1f8>
 800dea8:	4553      	cmp	r3, sl
 800deaa:	dd05      	ble.n	800deb8 <__gethex+0x1f4>
 800deac:	1eb9      	subs	r1, r7, #2
 800deae:	4620      	mov	r0, r4
 800deb0:	f000 ff52 	bl	800ed58 <__any_on>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	d145      	bne.n	800df44 <__gethex+0x280>
 800deb8:	f04f 0a02 	mov.w	sl, #2
 800debc:	4639      	mov	r1, r7
 800debe:	4620      	mov	r0, r4
 800dec0:	f7ff fe98 	bl	800dbf4 <rshift>
 800dec4:	443d      	add	r5, r7
 800dec6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800deca:	42ab      	cmp	r3, r5
 800decc:	da4c      	bge.n	800df68 <__gethex+0x2a4>
 800dece:	ee18 0a10 	vmov	r0, s16
 800ded2:	4621      	mov	r1, r4
 800ded4:	f000 fae0 	bl	800e498 <_Bfree>
 800ded8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800deda:	2300      	movs	r3, #0
 800dedc:	6013      	str	r3, [r2, #0]
 800dede:	27a3      	movs	r7, #163	; 0xa3
 800dee0:	e785      	b.n	800ddee <__gethex+0x12a>
 800dee2:	1e73      	subs	r3, r6, #1
 800dee4:	9a05      	ldr	r2, [sp, #20]
 800dee6:	9303      	str	r3, [sp, #12]
 800dee8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800deec:	4293      	cmp	r3, r2
 800deee:	d019      	beq.n	800df24 <__gethex+0x260>
 800def0:	f1bb 0f20 	cmp.w	fp, #32
 800def4:	d107      	bne.n	800df06 <__gethex+0x242>
 800def6:	9b02      	ldr	r3, [sp, #8]
 800def8:	9a00      	ldr	r2, [sp, #0]
 800defa:	f843 2b04 	str.w	r2, [r3], #4
 800defe:	9302      	str	r3, [sp, #8]
 800df00:	2300      	movs	r3, #0
 800df02:	9300      	str	r3, [sp, #0]
 800df04:	469b      	mov	fp, r3
 800df06:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800df0a:	f7ff fec5 	bl	800dc98 <__hexdig_fun>
 800df0e:	9b00      	ldr	r3, [sp, #0]
 800df10:	f000 000f 	and.w	r0, r0, #15
 800df14:	fa00 f00b 	lsl.w	r0, r0, fp
 800df18:	4303      	orrs	r3, r0
 800df1a:	9300      	str	r3, [sp, #0]
 800df1c:	f10b 0b04 	add.w	fp, fp, #4
 800df20:	9b03      	ldr	r3, [sp, #12]
 800df22:	e00d      	b.n	800df40 <__gethex+0x27c>
 800df24:	9b03      	ldr	r3, [sp, #12]
 800df26:	9a06      	ldr	r2, [sp, #24]
 800df28:	4413      	add	r3, r2
 800df2a:	42bb      	cmp	r3, r7
 800df2c:	d3e0      	bcc.n	800def0 <__gethex+0x22c>
 800df2e:	4618      	mov	r0, r3
 800df30:	9901      	ldr	r1, [sp, #4]
 800df32:	9307      	str	r3, [sp, #28]
 800df34:	4652      	mov	r2, sl
 800df36:	f001 fa63 	bl	800f400 <strncmp>
 800df3a:	9b07      	ldr	r3, [sp, #28]
 800df3c:	2800      	cmp	r0, #0
 800df3e:	d1d7      	bne.n	800def0 <__gethex+0x22c>
 800df40:	461e      	mov	r6, r3
 800df42:	e78b      	b.n	800de5c <__gethex+0x198>
 800df44:	f04f 0a03 	mov.w	sl, #3
 800df48:	e7b8      	b.n	800debc <__gethex+0x1f8>
 800df4a:	da0a      	bge.n	800df62 <__gethex+0x29e>
 800df4c:	1a37      	subs	r7, r6, r0
 800df4e:	4621      	mov	r1, r4
 800df50:	ee18 0a10 	vmov	r0, s16
 800df54:	463a      	mov	r2, r7
 800df56:	f000 fcbb 	bl	800e8d0 <__lshift>
 800df5a:	1bed      	subs	r5, r5, r7
 800df5c:	4604      	mov	r4, r0
 800df5e:	f100 0914 	add.w	r9, r0, #20
 800df62:	f04f 0a00 	mov.w	sl, #0
 800df66:	e7ae      	b.n	800dec6 <__gethex+0x202>
 800df68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800df6c:	42a8      	cmp	r0, r5
 800df6e:	dd72      	ble.n	800e056 <__gethex+0x392>
 800df70:	1b45      	subs	r5, r0, r5
 800df72:	42ae      	cmp	r6, r5
 800df74:	dc36      	bgt.n	800dfe4 <__gethex+0x320>
 800df76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df7a:	2b02      	cmp	r3, #2
 800df7c:	d02a      	beq.n	800dfd4 <__gethex+0x310>
 800df7e:	2b03      	cmp	r3, #3
 800df80:	d02c      	beq.n	800dfdc <__gethex+0x318>
 800df82:	2b01      	cmp	r3, #1
 800df84:	d11c      	bne.n	800dfc0 <__gethex+0x2fc>
 800df86:	42ae      	cmp	r6, r5
 800df88:	d11a      	bne.n	800dfc0 <__gethex+0x2fc>
 800df8a:	2e01      	cmp	r6, #1
 800df8c:	d112      	bne.n	800dfb4 <__gethex+0x2f0>
 800df8e:	9a04      	ldr	r2, [sp, #16]
 800df90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df94:	6013      	str	r3, [r2, #0]
 800df96:	2301      	movs	r3, #1
 800df98:	6123      	str	r3, [r4, #16]
 800df9a:	f8c9 3000 	str.w	r3, [r9]
 800df9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfa0:	2762      	movs	r7, #98	; 0x62
 800dfa2:	601c      	str	r4, [r3, #0]
 800dfa4:	e723      	b.n	800ddee <__gethex+0x12a>
 800dfa6:	bf00      	nop
 800dfa8:	0800fa3c 	.word	0x0800fa3c
 800dfac:	0800f9c4 	.word	0x0800f9c4
 800dfb0:	0800f9d5 	.word	0x0800f9d5
 800dfb4:	1e71      	subs	r1, r6, #1
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f000 fece 	bl	800ed58 <__any_on>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d1e6      	bne.n	800df8e <__gethex+0x2ca>
 800dfc0:	ee18 0a10 	vmov	r0, s16
 800dfc4:	4621      	mov	r1, r4
 800dfc6:	f000 fa67 	bl	800e498 <_Bfree>
 800dfca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dfcc:	2300      	movs	r3, #0
 800dfce:	6013      	str	r3, [r2, #0]
 800dfd0:	2750      	movs	r7, #80	; 0x50
 800dfd2:	e70c      	b.n	800ddee <__gethex+0x12a>
 800dfd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d1f2      	bne.n	800dfc0 <__gethex+0x2fc>
 800dfda:	e7d8      	b.n	800df8e <__gethex+0x2ca>
 800dfdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1d5      	bne.n	800df8e <__gethex+0x2ca>
 800dfe2:	e7ed      	b.n	800dfc0 <__gethex+0x2fc>
 800dfe4:	1e6f      	subs	r7, r5, #1
 800dfe6:	f1ba 0f00 	cmp.w	sl, #0
 800dfea:	d131      	bne.n	800e050 <__gethex+0x38c>
 800dfec:	b127      	cbz	r7, 800dff8 <__gethex+0x334>
 800dfee:	4639      	mov	r1, r7
 800dff0:	4620      	mov	r0, r4
 800dff2:	f000 feb1 	bl	800ed58 <__any_on>
 800dff6:	4682      	mov	sl, r0
 800dff8:	117b      	asrs	r3, r7, #5
 800dffa:	2101      	movs	r1, #1
 800dffc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e000:	f007 071f 	and.w	r7, r7, #31
 800e004:	fa01 f707 	lsl.w	r7, r1, r7
 800e008:	421f      	tst	r7, r3
 800e00a:	4629      	mov	r1, r5
 800e00c:	4620      	mov	r0, r4
 800e00e:	bf18      	it	ne
 800e010:	f04a 0a02 	orrne.w	sl, sl, #2
 800e014:	1b76      	subs	r6, r6, r5
 800e016:	f7ff fded 	bl	800dbf4 <rshift>
 800e01a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e01e:	2702      	movs	r7, #2
 800e020:	f1ba 0f00 	cmp.w	sl, #0
 800e024:	d048      	beq.n	800e0b8 <__gethex+0x3f4>
 800e026:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e02a:	2b02      	cmp	r3, #2
 800e02c:	d015      	beq.n	800e05a <__gethex+0x396>
 800e02e:	2b03      	cmp	r3, #3
 800e030:	d017      	beq.n	800e062 <__gethex+0x39e>
 800e032:	2b01      	cmp	r3, #1
 800e034:	d109      	bne.n	800e04a <__gethex+0x386>
 800e036:	f01a 0f02 	tst.w	sl, #2
 800e03a:	d006      	beq.n	800e04a <__gethex+0x386>
 800e03c:	f8d9 0000 	ldr.w	r0, [r9]
 800e040:	ea4a 0a00 	orr.w	sl, sl, r0
 800e044:	f01a 0f01 	tst.w	sl, #1
 800e048:	d10e      	bne.n	800e068 <__gethex+0x3a4>
 800e04a:	f047 0710 	orr.w	r7, r7, #16
 800e04e:	e033      	b.n	800e0b8 <__gethex+0x3f4>
 800e050:	f04f 0a01 	mov.w	sl, #1
 800e054:	e7d0      	b.n	800dff8 <__gethex+0x334>
 800e056:	2701      	movs	r7, #1
 800e058:	e7e2      	b.n	800e020 <__gethex+0x35c>
 800e05a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e05c:	f1c3 0301 	rsb	r3, r3, #1
 800e060:	9315      	str	r3, [sp, #84]	; 0x54
 800e062:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e064:	2b00      	cmp	r3, #0
 800e066:	d0f0      	beq.n	800e04a <__gethex+0x386>
 800e068:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e06c:	f104 0314 	add.w	r3, r4, #20
 800e070:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e074:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e078:	f04f 0c00 	mov.w	ip, #0
 800e07c:	4618      	mov	r0, r3
 800e07e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e082:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e086:	d01c      	beq.n	800e0c2 <__gethex+0x3fe>
 800e088:	3201      	adds	r2, #1
 800e08a:	6002      	str	r2, [r0, #0]
 800e08c:	2f02      	cmp	r7, #2
 800e08e:	f104 0314 	add.w	r3, r4, #20
 800e092:	d13f      	bne.n	800e114 <__gethex+0x450>
 800e094:	f8d8 2000 	ldr.w	r2, [r8]
 800e098:	3a01      	subs	r2, #1
 800e09a:	42b2      	cmp	r2, r6
 800e09c:	d10a      	bne.n	800e0b4 <__gethex+0x3f0>
 800e09e:	1171      	asrs	r1, r6, #5
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e0a6:	f006 061f 	and.w	r6, r6, #31
 800e0aa:	fa02 f606 	lsl.w	r6, r2, r6
 800e0ae:	421e      	tst	r6, r3
 800e0b0:	bf18      	it	ne
 800e0b2:	4617      	movne	r7, r2
 800e0b4:	f047 0720 	orr.w	r7, r7, #32
 800e0b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e0ba:	601c      	str	r4, [r3, #0]
 800e0bc:	9b04      	ldr	r3, [sp, #16]
 800e0be:	601d      	str	r5, [r3, #0]
 800e0c0:	e695      	b.n	800ddee <__gethex+0x12a>
 800e0c2:	4299      	cmp	r1, r3
 800e0c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e0c8:	d8d8      	bhi.n	800e07c <__gethex+0x3b8>
 800e0ca:	68a3      	ldr	r3, [r4, #8]
 800e0cc:	459b      	cmp	fp, r3
 800e0ce:	db19      	blt.n	800e104 <__gethex+0x440>
 800e0d0:	6861      	ldr	r1, [r4, #4]
 800e0d2:	ee18 0a10 	vmov	r0, s16
 800e0d6:	3101      	adds	r1, #1
 800e0d8:	f000 f99e 	bl	800e418 <_Balloc>
 800e0dc:	4681      	mov	r9, r0
 800e0de:	b918      	cbnz	r0, 800e0e8 <__gethex+0x424>
 800e0e0:	4b1a      	ldr	r3, [pc, #104]	; (800e14c <__gethex+0x488>)
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	2184      	movs	r1, #132	; 0x84
 800e0e6:	e6a8      	b.n	800de3a <__gethex+0x176>
 800e0e8:	6922      	ldr	r2, [r4, #16]
 800e0ea:	3202      	adds	r2, #2
 800e0ec:	f104 010c 	add.w	r1, r4, #12
 800e0f0:	0092      	lsls	r2, r2, #2
 800e0f2:	300c      	adds	r0, #12
 800e0f4:	f7fc fe45 	bl	800ad82 <memcpy>
 800e0f8:	4621      	mov	r1, r4
 800e0fa:	ee18 0a10 	vmov	r0, s16
 800e0fe:	f000 f9cb 	bl	800e498 <_Bfree>
 800e102:	464c      	mov	r4, r9
 800e104:	6923      	ldr	r3, [r4, #16]
 800e106:	1c5a      	adds	r2, r3, #1
 800e108:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e10c:	6122      	str	r2, [r4, #16]
 800e10e:	2201      	movs	r2, #1
 800e110:	615a      	str	r2, [r3, #20]
 800e112:	e7bb      	b.n	800e08c <__gethex+0x3c8>
 800e114:	6922      	ldr	r2, [r4, #16]
 800e116:	455a      	cmp	r2, fp
 800e118:	dd0b      	ble.n	800e132 <__gethex+0x46e>
 800e11a:	2101      	movs	r1, #1
 800e11c:	4620      	mov	r0, r4
 800e11e:	f7ff fd69 	bl	800dbf4 <rshift>
 800e122:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e126:	3501      	adds	r5, #1
 800e128:	42ab      	cmp	r3, r5
 800e12a:	f6ff aed0 	blt.w	800dece <__gethex+0x20a>
 800e12e:	2701      	movs	r7, #1
 800e130:	e7c0      	b.n	800e0b4 <__gethex+0x3f0>
 800e132:	f016 061f 	ands.w	r6, r6, #31
 800e136:	d0fa      	beq.n	800e12e <__gethex+0x46a>
 800e138:	4453      	add	r3, sl
 800e13a:	f1c6 0620 	rsb	r6, r6, #32
 800e13e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e142:	f000 fa5b 	bl	800e5fc <__hi0bits>
 800e146:	42b0      	cmp	r0, r6
 800e148:	dbe7      	blt.n	800e11a <__gethex+0x456>
 800e14a:	e7f0      	b.n	800e12e <__gethex+0x46a>
 800e14c:	0800f9c4 	.word	0x0800f9c4

0800e150 <L_shift>:
 800e150:	f1c2 0208 	rsb	r2, r2, #8
 800e154:	0092      	lsls	r2, r2, #2
 800e156:	b570      	push	{r4, r5, r6, lr}
 800e158:	f1c2 0620 	rsb	r6, r2, #32
 800e15c:	6843      	ldr	r3, [r0, #4]
 800e15e:	6804      	ldr	r4, [r0, #0]
 800e160:	fa03 f506 	lsl.w	r5, r3, r6
 800e164:	432c      	orrs	r4, r5
 800e166:	40d3      	lsrs	r3, r2
 800e168:	6004      	str	r4, [r0, #0]
 800e16a:	f840 3f04 	str.w	r3, [r0, #4]!
 800e16e:	4288      	cmp	r0, r1
 800e170:	d3f4      	bcc.n	800e15c <L_shift+0xc>
 800e172:	bd70      	pop	{r4, r5, r6, pc}

0800e174 <__match>:
 800e174:	b530      	push	{r4, r5, lr}
 800e176:	6803      	ldr	r3, [r0, #0]
 800e178:	3301      	adds	r3, #1
 800e17a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e17e:	b914      	cbnz	r4, 800e186 <__match+0x12>
 800e180:	6003      	str	r3, [r0, #0]
 800e182:	2001      	movs	r0, #1
 800e184:	bd30      	pop	{r4, r5, pc}
 800e186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e18a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e18e:	2d19      	cmp	r5, #25
 800e190:	bf98      	it	ls
 800e192:	3220      	addls	r2, #32
 800e194:	42a2      	cmp	r2, r4
 800e196:	d0f0      	beq.n	800e17a <__match+0x6>
 800e198:	2000      	movs	r0, #0
 800e19a:	e7f3      	b.n	800e184 <__match+0x10>

0800e19c <__hexnan>:
 800e19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a0:	680b      	ldr	r3, [r1, #0]
 800e1a2:	115e      	asrs	r6, r3, #5
 800e1a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e1a8:	f013 031f 	ands.w	r3, r3, #31
 800e1ac:	b087      	sub	sp, #28
 800e1ae:	bf18      	it	ne
 800e1b0:	3604      	addne	r6, #4
 800e1b2:	2500      	movs	r5, #0
 800e1b4:	1f37      	subs	r7, r6, #4
 800e1b6:	4690      	mov	r8, r2
 800e1b8:	6802      	ldr	r2, [r0, #0]
 800e1ba:	9301      	str	r3, [sp, #4]
 800e1bc:	4682      	mov	sl, r0
 800e1be:	f846 5c04 	str.w	r5, [r6, #-4]
 800e1c2:	46b9      	mov	r9, r7
 800e1c4:	463c      	mov	r4, r7
 800e1c6:	9502      	str	r5, [sp, #8]
 800e1c8:	46ab      	mov	fp, r5
 800e1ca:	7851      	ldrb	r1, [r2, #1]
 800e1cc:	1c53      	adds	r3, r2, #1
 800e1ce:	9303      	str	r3, [sp, #12]
 800e1d0:	b341      	cbz	r1, 800e224 <__hexnan+0x88>
 800e1d2:	4608      	mov	r0, r1
 800e1d4:	9205      	str	r2, [sp, #20]
 800e1d6:	9104      	str	r1, [sp, #16]
 800e1d8:	f7ff fd5e 	bl	800dc98 <__hexdig_fun>
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	d14f      	bne.n	800e280 <__hexnan+0xe4>
 800e1e0:	9904      	ldr	r1, [sp, #16]
 800e1e2:	9a05      	ldr	r2, [sp, #20]
 800e1e4:	2920      	cmp	r1, #32
 800e1e6:	d818      	bhi.n	800e21a <__hexnan+0x7e>
 800e1e8:	9b02      	ldr	r3, [sp, #8]
 800e1ea:	459b      	cmp	fp, r3
 800e1ec:	dd13      	ble.n	800e216 <__hexnan+0x7a>
 800e1ee:	454c      	cmp	r4, r9
 800e1f0:	d206      	bcs.n	800e200 <__hexnan+0x64>
 800e1f2:	2d07      	cmp	r5, #7
 800e1f4:	dc04      	bgt.n	800e200 <__hexnan+0x64>
 800e1f6:	462a      	mov	r2, r5
 800e1f8:	4649      	mov	r1, r9
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f7ff ffa8 	bl	800e150 <L_shift>
 800e200:	4544      	cmp	r4, r8
 800e202:	d950      	bls.n	800e2a6 <__hexnan+0x10a>
 800e204:	2300      	movs	r3, #0
 800e206:	f1a4 0904 	sub.w	r9, r4, #4
 800e20a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e20e:	f8cd b008 	str.w	fp, [sp, #8]
 800e212:	464c      	mov	r4, r9
 800e214:	461d      	mov	r5, r3
 800e216:	9a03      	ldr	r2, [sp, #12]
 800e218:	e7d7      	b.n	800e1ca <__hexnan+0x2e>
 800e21a:	2929      	cmp	r1, #41	; 0x29
 800e21c:	d156      	bne.n	800e2cc <__hexnan+0x130>
 800e21e:	3202      	adds	r2, #2
 800e220:	f8ca 2000 	str.w	r2, [sl]
 800e224:	f1bb 0f00 	cmp.w	fp, #0
 800e228:	d050      	beq.n	800e2cc <__hexnan+0x130>
 800e22a:	454c      	cmp	r4, r9
 800e22c:	d206      	bcs.n	800e23c <__hexnan+0xa0>
 800e22e:	2d07      	cmp	r5, #7
 800e230:	dc04      	bgt.n	800e23c <__hexnan+0xa0>
 800e232:	462a      	mov	r2, r5
 800e234:	4649      	mov	r1, r9
 800e236:	4620      	mov	r0, r4
 800e238:	f7ff ff8a 	bl	800e150 <L_shift>
 800e23c:	4544      	cmp	r4, r8
 800e23e:	d934      	bls.n	800e2aa <__hexnan+0x10e>
 800e240:	f1a8 0204 	sub.w	r2, r8, #4
 800e244:	4623      	mov	r3, r4
 800e246:	f853 1b04 	ldr.w	r1, [r3], #4
 800e24a:	f842 1f04 	str.w	r1, [r2, #4]!
 800e24e:	429f      	cmp	r7, r3
 800e250:	d2f9      	bcs.n	800e246 <__hexnan+0xaa>
 800e252:	1b3b      	subs	r3, r7, r4
 800e254:	f023 0303 	bic.w	r3, r3, #3
 800e258:	3304      	adds	r3, #4
 800e25a:	3401      	adds	r4, #1
 800e25c:	3e03      	subs	r6, #3
 800e25e:	42b4      	cmp	r4, r6
 800e260:	bf88      	it	hi
 800e262:	2304      	movhi	r3, #4
 800e264:	4443      	add	r3, r8
 800e266:	2200      	movs	r2, #0
 800e268:	f843 2b04 	str.w	r2, [r3], #4
 800e26c:	429f      	cmp	r7, r3
 800e26e:	d2fb      	bcs.n	800e268 <__hexnan+0xcc>
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	b91b      	cbnz	r3, 800e27c <__hexnan+0xe0>
 800e274:	4547      	cmp	r7, r8
 800e276:	d127      	bne.n	800e2c8 <__hexnan+0x12c>
 800e278:	2301      	movs	r3, #1
 800e27a:	603b      	str	r3, [r7, #0]
 800e27c:	2005      	movs	r0, #5
 800e27e:	e026      	b.n	800e2ce <__hexnan+0x132>
 800e280:	3501      	adds	r5, #1
 800e282:	2d08      	cmp	r5, #8
 800e284:	f10b 0b01 	add.w	fp, fp, #1
 800e288:	dd06      	ble.n	800e298 <__hexnan+0xfc>
 800e28a:	4544      	cmp	r4, r8
 800e28c:	d9c3      	bls.n	800e216 <__hexnan+0x7a>
 800e28e:	2300      	movs	r3, #0
 800e290:	f844 3c04 	str.w	r3, [r4, #-4]
 800e294:	2501      	movs	r5, #1
 800e296:	3c04      	subs	r4, #4
 800e298:	6822      	ldr	r2, [r4, #0]
 800e29a:	f000 000f 	and.w	r0, r0, #15
 800e29e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e2a2:	6022      	str	r2, [r4, #0]
 800e2a4:	e7b7      	b.n	800e216 <__hexnan+0x7a>
 800e2a6:	2508      	movs	r5, #8
 800e2a8:	e7b5      	b.n	800e216 <__hexnan+0x7a>
 800e2aa:	9b01      	ldr	r3, [sp, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d0df      	beq.n	800e270 <__hexnan+0xd4>
 800e2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b4:	f1c3 0320 	rsb	r3, r3, #32
 800e2b8:	fa22 f303 	lsr.w	r3, r2, r3
 800e2bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e2c0:	401a      	ands	r2, r3
 800e2c2:	f846 2c04 	str.w	r2, [r6, #-4]
 800e2c6:	e7d3      	b.n	800e270 <__hexnan+0xd4>
 800e2c8:	3f04      	subs	r7, #4
 800e2ca:	e7d1      	b.n	800e270 <__hexnan+0xd4>
 800e2cc:	2004      	movs	r0, #4
 800e2ce:	b007      	add	sp, #28
 800e2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e2d4 <_localeconv_r>:
 800e2d4:	4800      	ldr	r0, [pc, #0]	; (800e2d8 <_localeconv_r+0x4>)
 800e2d6:	4770      	bx	lr
 800e2d8:	200001d0 	.word	0x200001d0

0800e2dc <_lseek_r>:
 800e2dc:	b538      	push	{r3, r4, r5, lr}
 800e2de:	4d07      	ldr	r5, [pc, #28]	; (800e2fc <_lseek_r+0x20>)
 800e2e0:	4604      	mov	r4, r0
 800e2e2:	4608      	mov	r0, r1
 800e2e4:	4611      	mov	r1, r2
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	602a      	str	r2, [r5, #0]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	f7f3 f99c 	bl	8001628 <_lseek>
 800e2f0:	1c43      	adds	r3, r0, #1
 800e2f2:	d102      	bne.n	800e2fa <_lseek_r+0x1e>
 800e2f4:	682b      	ldr	r3, [r5, #0]
 800e2f6:	b103      	cbz	r3, 800e2fa <_lseek_r+0x1e>
 800e2f8:	6023      	str	r3, [r4, #0]
 800e2fa:	bd38      	pop	{r3, r4, r5, pc}
 800e2fc:	20008420 	.word	0x20008420

0800e300 <__swhatbuf_r>:
 800e300:	b570      	push	{r4, r5, r6, lr}
 800e302:	460e      	mov	r6, r1
 800e304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e308:	2900      	cmp	r1, #0
 800e30a:	b096      	sub	sp, #88	; 0x58
 800e30c:	4614      	mov	r4, r2
 800e30e:	461d      	mov	r5, r3
 800e310:	da08      	bge.n	800e324 <__swhatbuf_r+0x24>
 800e312:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e316:	2200      	movs	r2, #0
 800e318:	602a      	str	r2, [r5, #0]
 800e31a:	061a      	lsls	r2, r3, #24
 800e31c:	d410      	bmi.n	800e340 <__swhatbuf_r+0x40>
 800e31e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e322:	e00e      	b.n	800e342 <__swhatbuf_r+0x42>
 800e324:	466a      	mov	r2, sp
 800e326:	f001 f893 	bl	800f450 <_fstat_r>
 800e32a:	2800      	cmp	r0, #0
 800e32c:	dbf1      	blt.n	800e312 <__swhatbuf_r+0x12>
 800e32e:	9a01      	ldr	r2, [sp, #4]
 800e330:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e334:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e338:	425a      	negs	r2, r3
 800e33a:	415a      	adcs	r2, r3
 800e33c:	602a      	str	r2, [r5, #0]
 800e33e:	e7ee      	b.n	800e31e <__swhatbuf_r+0x1e>
 800e340:	2340      	movs	r3, #64	; 0x40
 800e342:	2000      	movs	r0, #0
 800e344:	6023      	str	r3, [r4, #0]
 800e346:	b016      	add	sp, #88	; 0x58
 800e348:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e34c <__smakebuf_r>:
 800e34c:	898b      	ldrh	r3, [r1, #12]
 800e34e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e350:	079d      	lsls	r5, r3, #30
 800e352:	4606      	mov	r6, r0
 800e354:	460c      	mov	r4, r1
 800e356:	d507      	bpl.n	800e368 <__smakebuf_r+0x1c>
 800e358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e35c:	6023      	str	r3, [r4, #0]
 800e35e:	6123      	str	r3, [r4, #16]
 800e360:	2301      	movs	r3, #1
 800e362:	6163      	str	r3, [r4, #20]
 800e364:	b002      	add	sp, #8
 800e366:	bd70      	pop	{r4, r5, r6, pc}
 800e368:	ab01      	add	r3, sp, #4
 800e36a:	466a      	mov	r2, sp
 800e36c:	f7ff ffc8 	bl	800e300 <__swhatbuf_r>
 800e370:	9900      	ldr	r1, [sp, #0]
 800e372:	4605      	mov	r5, r0
 800e374:	4630      	mov	r0, r6
 800e376:	f7fc fd3b 	bl	800adf0 <_malloc_r>
 800e37a:	b948      	cbnz	r0, 800e390 <__smakebuf_r+0x44>
 800e37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e380:	059a      	lsls	r2, r3, #22
 800e382:	d4ef      	bmi.n	800e364 <__smakebuf_r+0x18>
 800e384:	f023 0303 	bic.w	r3, r3, #3
 800e388:	f043 0302 	orr.w	r3, r3, #2
 800e38c:	81a3      	strh	r3, [r4, #12]
 800e38e:	e7e3      	b.n	800e358 <__smakebuf_r+0xc>
 800e390:	4b0d      	ldr	r3, [pc, #52]	; (800e3c8 <__smakebuf_r+0x7c>)
 800e392:	62b3      	str	r3, [r6, #40]	; 0x28
 800e394:	89a3      	ldrh	r3, [r4, #12]
 800e396:	6020      	str	r0, [r4, #0]
 800e398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e39c:	81a3      	strh	r3, [r4, #12]
 800e39e:	9b00      	ldr	r3, [sp, #0]
 800e3a0:	6163      	str	r3, [r4, #20]
 800e3a2:	9b01      	ldr	r3, [sp, #4]
 800e3a4:	6120      	str	r0, [r4, #16]
 800e3a6:	b15b      	cbz	r3, 800e3c0 <__smakebuf_r+0x74>
 800e3a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	f001 f861 	bl	800f474 <_isatty_r>
 800e3b2:	b128      	cbz	r0, 800e3c0 <__smakebuf_r+0x74>
 800e3b4:	89a3      	ldrh	r3, [r4, #12]
 800e3b6:	f023 0303 	bic.w	r3, r3, #3
 800e3ba:	f043 0301 	orr.w	r3, r3, #1
 800e3be:	81a3      	strh	r3, [r4, #12]
 800e3c0:	89a0      	ldrh	r0, [r4, #12]
 800e3c2:	4305      	orrs	r5, r0
 800e3c4:	81a5      	strh	r5, [r4, #12]
 800e3c6:	e7cd      	b.n	800e364 <__smakebuf_r+0x18>
 800e3c8:	0800ab91 	.word	0x0800ab91

0800e3cc <malloc>:
 800e3cc:	4b02      	ldr	r3, [pc, #8]	; (800e3d8 <malloc+0xc>)
 800e3ce:	4601      	mov	r1, r0
 800e3d0:	6818      	ldr	r0, [r3, #0]
 800e3d2:	f7fc bd0d 	b.w	800adf0 <_malloc_r>
 800e3d6:	bf00      	nop
 800e3d8:	20000078 	.word	0x20000078

0800e3dc <__ascii_mbtowc>:
 800e3dc:	b082      	sub	sp, #8
 800e3de:	b901      	cbnz	r1, 800e3e2 <__ascii_mbtowc+0x6>
 800e3e0:	a901      	add	r1, sp, #4
 800e3e2:	b142      	cbz	r2, 800e3f6 <__ascii_mbtowc+0x1a>
 800e3e4:	b14b      	cbz	r3, 800e3fa <__ascii_mbtowc+0x1e>
 800e3e6:	7813      	ldrb	r3, [r2, #0]
 800e3e8:	600b      	str	r3, [r1, #0]
 800e3ea:	7812      	ldrb	r2, [r2, #0]
 800e3ec:	1e10      	subs	r0, r2, #0
 800e3ee:	bf18      	it	ne
 800e3f0:	2001      	movne	r0, #1
 800e3f2:	b002      	add	sp, #8
 800e3f4:	4770      	bx	lr
 800e3f6:	4610      	mov	r0, r2
 800e3f8:	e7fb      	b.n	800e3f2 <__ascii_mbtowc+0x16>
 800e3fa:	f06f 0001 	mvn.w	r0, #1
 800e3fe:	e7f8      	b.n	800e3f2 <__ascii_mbtowc+0x16>

0800e400 <__malloc_lock>:
 800e400:	4801      	ldr	r0, [pc, #4]	; (800e408 <__malloc_lock+0x8>)
 800e402:	f7fc bcbc 	b.w	800ad7e <__retarget_lock_acquire_recursive>
 800e406:	bf00      	nop
 800e408:	20008414 	.word	0x20008414

0800e40c <__malloc_unlock>:
 800e40c:	4801      	ldr	r0, [pc, #4]	; (800e414 <__malloc_unlock+0x8>)
 800e40e:	f7fc bcb7 	b.w	800ad80 <__retarget_lock_release_recursive>
 800e412:	bf00      	nop
 800e414:	20008414 	.word	0x20008414

0800e418 <_Balloc>:
 800e418:	b570      	push	{r4, r5, r6, lr}
 800e41a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e41c:	4604      	mov	r4, r0
 800e41e:	460d      	mov	r5, r1
 800e420:	b976      	cbnz	r6, 800e440 <_Balloc+0x28>
 800e422:	2010      	movs	r0, #16
 800e424:	f7ff ffd2 	bl	800e3cc <malloc>
 800e428:	4602      	mov	r2, r0
 800e42a:	6260      	str	r0, [r4, #36]	; 0x24
 800e42c:	b920      	cbnz	r0, 800e438 <_Balloc+0x20>
 800e42e:	4b18      	ldr	r3, [pc, #96]	; (800e490 <_Balloc+0x78>)
 800e430:	4818      	ldr	r0, [pc, #96]	; (800e494 <_Balloc+0x7c>)
 800e432:	2166      	movs	r1, #102	; 0x66
 800e434:	f7fe fc62 	bl	800ccfc <__assert_func>
 800e438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e43c:	6006      	str	r6, [r0, #0]
 800e43e:	60c6      	str	r6, [r0, #12]
 800e440:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e442:	68f3      	ldr	r3, [r6, #12]
 800e444:	b183      	cbz	r3, 800e468 <_Balloc+0x50>
 800e446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e44e:	b9b8      	cbnz	r0, 800e480 <_Balloc+0x68>
 800e450:	2101      	movs	r1, #1
 800e452:	fa01 f605 	lsl.w	r6, r1, r5
 800e456:	1d72      	adds	r2, r6, #5
 800e458:	0092      	lsls	r2, r2, #2
 800e45a:	4620      	mov	r0, r4
 800e45c:	f000 fc9d 	bl	800ed9a <_calloc_r>
 800e460:	b160      	cbz	r0, 800e47c <_Balloc+0x64>
 800e462:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e466:	e00e      	b.n	800e486 <_Balloc+0x6e>
 800e468:	2221      	movs	r2, #33	; 0x21
 800e46a:	2104      	movs	r1, #4
 800e46c:	4620      	mov	r0, r4
 800e46e:	f000 fc94 	bl	800ed9a <_calloc_r>
 800e472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e474:	60f0      	str	r0, [r6, #12]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d1e4      	bne.n	800e446 <_Balloc+0x2e>
 800e47c:	2000      	movs	r0, #0
 800e47e:	bd70      	pop	{r4, r5, r6, pc}
 800e480:	6802      	ldr	r2, [r0, #0]
 800e482:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e486:	2300      	movs	r3, #0
 800e488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e48c:	e7f7      	b.n	800e47e <_Balloc+0x66>
 800e48e:	bf00      	nop
 800e490:	0800f952 	.word	0x0800f952
 800e494:	0800fa50 	.word	0x0800fa50

0800e498 <_Bfree>:
 800e498:	b570      	push	{r4, r5, r6, lr}
 800e49a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e49c:	4605      	mov	r5, r0
 800e49e:	460c      	mov	r4, r1
 800e4a0:	b976      	cbnz	r6, 800e4c0 <_Bfree+0x28>
 800e4a2:	2010      	movs	r0, #16
 800e4a4:	f7ff ff92 	bl	800e3cc <malloc>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	6268      	str	r0, [r5, #36]	; 0x24
 800e4ac:	b920      	cbnz	r0, 800e4b8 <_Bfree+0x20>
 800e4ae:	4b09      	ldr	r3, [pc, #36]	; (800e4d4 <_Bfree+0x3c>)
 800e4b0:	4809      	ldr	r0, [pc, #36]	; (800e4d8 <_Bfree+0x40>)
 800e4b2:	218a      	movs	r1, #138	; 0x8a
 800e4b4:	f7fe fc22 	bl	800ccfc <__assert_func>
 800e4b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4bc:	6006      	str	r6, [r0, #0]
 800e4be:	60c6      	str	r6, [r0, #12]
 800e4c0:	b13c      	cbz	r4, 800e4d2 <_Bfree+0x3a>
 800e4c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e4c4:	6862      	ldr	r2, [r4, #4]
 800e4c6:	68db      	ldr	r3, [r3, #12]
 800e4c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4cc:	6021      	str	r1, [r4, #0]
 800e4ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4d2:	bd70      	pop	{r4, r5, r6, pc}
 800e4d4:	0800f952 	.word	0x0800f952
 800e4d8:	0800fa50 	.word	0x0800fa50

0800e4dc <__multadd>:
 800e4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e0:	690d      	ldr	r5, [r1, #16]
 800e4e2:	4607      	mov	r7, r0
 800e4e4:	460c      	mov	r4, r1
 800e4e6:	461e      	mov	r6, r3
 800e4e8:	f101 0c14 	add.w	ip, r1, #20
 800e4ec:	2000      	movs	r0, #0
 800e4ee:	f8dc 3000 	ldr.w	r3, [ip]
 800e4f2:	b299      	uxth	r1, r3
 800e4f4:	fb02 6101 	mla	r1, r2, r1, r6
 800e4f8:	0c1e      	lsrs	r6, r3, #16
 800e4fa:	0c0b      	lsrs	r3, r1, #16
 800e4fc:	fb02 3306 	mla	r3, r2, r6, r3
 800e500:	b289      	uxth	r1, r1
 800e502:	3001      	adds	r0, #1
 800e504:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e508:	4285      	cmp	r5, r0
 800e50a:	f84c 1b04 	str.w	r1, [ip], #4
 800e50e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e512:	dcec      	bgt.n	800e4ee <__multadd+0x12>
 800e514:	b30e      	cbz	r6, 800e55a <__multadd+0x7e>
 800e516:	68a3      	ldr	r3, [r4, #8]
 800e518:	42ab      	cmp	r3, r5
 800e51a:	dc19      	bgt.n	800e550 <__multadd+0x74>
 800e51c:	6861      	ldr	r1, [r4, #4]
 800e51e:	4638      	mov	r0, r7
 800e520:	3101      	adds	r1, #1
 800e522:	f7ff ff79 	bl	800e418 <_Balloc>
 800e526:	4680      	mov	r8, r0
 800e528:	b928      	cbnz	r0, 800e536 <__multadd+0x5a>
 800e52a:	4602      	mov	r2, r0
 800e52c:	4b0c      	ldr	r3, [pc, #48]	; (800e560 <__multadd+0x84>)
 800e52e:	480d      	ldr	r0, [pc, #52]	; (800e564 <__multadd+0x88>)
 800e530:	21b5      	movs	r1, #181	; 0xb5
 800e532:	f7fe fbe3 	bl	800ccfc <__assert_func>
 800e536:	6922      	ldr	r2, [r4, #16]
 800e538:	3202      	adds	r2, #2
 800e53a:	f104 010c 	add.w	r1, r4, #12
 800e53e:	0092      	lsls	r2, r2, #2
 800e540:	300c      	adds	r0, #12
 800e542:	f7fc fc1e 	bl	800ad82 <memcpy>
 800e546:	4621      	mov	r1, r4
 800e548:	4638      	mov	r0, r7
 800e54a:	f7ff ffa5 	bl	800e498 <_Bfree>
 800e54e:	4644      	mov	r4, r8
 800e550:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e554:	3501      	adds	r5, #1
 800e556:	615e      	str	r6, [r3, #20]
 800e558:	6125      	str	r5, [r4, #16]
 800e55a:	4620      	mov	r0, r4
 800e55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e560:	0800f9c4 	.word	0x0800f9c4
 800e564:	0800fa50 	.word	0x0800fa50

0800e568 <__s2b>:
 800e568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e56c:	460c      	mov	r4, r1
 800e56e:	4615      	mov	r5, r2
 800e570:	461f      	mov	r7, r3
 800e572:	2209      	movs	r2, #9
 800e574:	3308      	adds	r3, #8
 800e576:	4606      	mov	r6, r0
 800e578:	fb93 f3f2 	sdiv	r3, r3, r2
 800e57c:	2100      	movs	r1, #0
 800e57e:	2201      	movs	r2, #1
 800e580:	429a      	cmp	r2, r3
 800e582:	db09      	blt.n	800e598 <__s2b+0x30>
 800e584:	4630      	mov	r0, r6
 800e586:	f7ff ff47 	bl	800e418 <_Balloc>
 800e58a:	b940      	cbnz	r0, 800e59e <__s2b+0x36>
 800e58c:	4602      	mov	r2, r0
 800e58e:	4b19      	ldr	r3, [pc, #100]	; (800e5f4 <__s2b+0x8c>)
 800e590:	4819      	ldr	r0, [pc, #100]	; (800e5f8 <__s2b+0x90>)
 800e592:	21ce      	movs	r1, #206	; 0xce
 800e594:	f7fe fbb2 	bl	800ccfc <__assert_func>
 800e598:	0052      	lsls	r2, r2, #1
 800e59a:	3101      	adds	r1, #1
 800e59c:	e7f0      	b.n	800e580 <__s2b+0x18>
 800e59e:	9b08      	ldr	r3, [sp, #32]
 800e5a0:	6143      	str	r3, [r0, #20]
 800e5a2:	2d09      	cmp	r5, #9
 800e5a4:	f04f 0301 	mov.w	r3, #1
 800e5a8:	6103      	str	r3, [r0, #16]
 800e5aa:	dd16      	ble.n	800e5da <__s2b+0x72>
 800e5ac:	f104 0909 	add.w	r9, r4, #9
 800e5b0:	46c8      	mov	r8, r9
 800e5b2:	442c      	add	r4, r5
 800e5b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e5b8:	4601      	mov	r1, r0
 800e5ba:	3b30      	subs	r3, #48	; 0x30
 800e5bc:	220a      	movs	r2, #10
 800e5be:	4630      	mov	r0, r6
 800e5c0:	f7ff ff8c 	bl	800e4dc <__multadd>
 800e5c4:	45a0      	cmp	r8, r4
 800e5c6:	d1f5      	bne.n	800e5b4 <__s2b+0x4c>
 800e5c8:	f1a5 0408 	sub.w	r4, r5, #8
 800e5cc:	444c      	add	r4, r9
 800e5ce:	1b2d      	subs	r5, r5, r4
 800e5d0:	1963      	adds	r3, r4, r5
 800e5d2:	42bb      	cmp	r3, r7
 800e5d4:	db04      	blt.n	800e5e0 <__s2b+0x78>
 800e5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5da:	340a      	adds	r4, #10
 800e5dc:	2509      	movs	r5, #9
 800e5de:	e7f6      	b.n	800e5ce <__s2b+0x66>
 800e5e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e5e4:	4601      	mov	r1, r0
 800e5e6:	3b30      	subs	r3, #48	; 0x30
 800e5e8:	220a      	movs	r2, #10
 800e5ea:	4630      	mov	r0, r6
 800e5ec:	f7ff ff76 	bl	800e4dc <__multadd>
 800e5f0:	e7ee      	b.n	800e5d0 <__s2b+0x68>
 800e5f2:	bf00      	nop
 800e5f4:	0800f9c4 	.word	0x0800f9c4
 800e5f8:	0800fa50 	.word	0x0800fa50

0800e5fc <__hi0bits>:
 800e5fc:	0c03      	lsrs	r3, r0, #16
 800e5fe:	041b      	lsls	r3, r3, #16
 800e600:	b9d3      	cbnz	r3, 800e638 <__hi0bits+0x3c>
 800e602:	0400      	lsls	r0, r0, #16
 800e604:	2310      	movs	r3, #16
 800e606:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e60a:	bf04      	itt	eq
 800e60c:	0200      	lsleq	r0, r0, #8
 800e60e:	3308      	addeq	r3, #8
 800e610:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e614:	bf04      	itt	eq
 800e616:	0100      	lsleq	r0, r0, #4
 800e618:	3304      	addeq	r3, #4
 800e61a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e61e:	bf04      	itt	eq
 800e620:	0080      	lsleq	r0, r0, #2
 800e622:	3302      	addeq	r3, #2
 800e624:	2800      	cmp	r0, #0
 800e626:	db05      	blt.n	800e634 <__hi0bits+0x38>
 800e628:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e62c:	f103 0301 	add.w	r3, r3, #1
 800e630:	bf08      	it	eq
 800e632:	2320      	moveq	r3, #32
 800e634:	4618      	mov	r0, r3
 800e636:	4770      	bx	lr
 800e638:	2300      	movs	r3, #0
 800e63a:	e7e4      	b.n	800e606 <__hi0bits+0xa>

0800e63c <__lo0bits>:
 800e63c:	6803      	ldr	r3, [r0, #0]
 800e63e:	f013 0207 	ands.w	r2, r3, #7
 800e642:	4601      	mov	r1, r0
 800e644:	d00b      	beq.n	800e65e <__lo0bits+0x22>
 800e646:	07da      	lsls	r2, r3, #31
 800e648:	d423      	bmi.n	800e692 <__lo0bits+0x56>
 800e64a:	0798      	lsls	r0, r3, #30
 800e64c:	bf49      	itett	mi
 800e64e:	085b      	lsrmi	r3, r3, #1
 800e650:	089b      	lsrpl	r3, r3, #2
 800e652:	2001      	movmi	r0, #1
 800e654:	600b      	strmi	r3, [r1, #0]
 800e656:	bf5c      	itt	pl
 800e658:	600b      	strpl	r3, [r1, #0]
 800e65a:	2002      	movpl	r0, #2
 800e65c:	4770      	bx	lr
 800e65e:	b298      	uxth	r0, r3
 800e660:	b9a8      	cbnz	r0, 800e68e <__lo0bits+0x52>
 800e662:	0c1b      	lsrs	r3, r3, #16
 800e664:	2010      	movs	r0, #16
 800e666:	b2da      	uxtb	r2, r3
 800e668:	b90a      	cbnz	r2, 800e66e <__lo0bits+0x32>
 800e66a:	3008      	adds	r0, #8
 800e66c:	0a1b      	lsrs	r3, r3, #8
 800e66e:	071a      	lsls	r2, r3, #28
 800e670:	bf04      	itt	eq
 800e672:	091b      	lsreq	r3, r3, #4
 800e674:	3004      	addeq	r0, #4
 800e676:	079a      	lsls	r2, r3, #30
 800e678:	bf04      	itt	eq
 800e67a:	089b      	lsreq	r3, r3, #2
 800e67c:	3002      	addeq	r0, #2
 800e67e:	07da      	lsls	r2, r3, #31
 800e680:	d403      	bmi.n	800e68a <__lo0bits+0x4e>
 800e682:	085b      	lsrs	r3, r3, #1
 800e684:	f100 0001 	add.w	r0, r0, #1
 800e688:	d005      	beq.n	800e696 <__lo0bits+0x5a>
 800e68a:	600b      	str	r3, [r1, #0]
 800e68c:	4770      	bx	lr
 800e68e:	4610      	mov	r0, r2
 800e690:	e7e9      	b.n	800e666 <__lo0bits+0x2a>
 800e692:	2000      	movs	r0, #0
 800e694:	4770      	bx	lr
 800e696:	2020      	movs	r0, #32
 800e698:	4770      	bx	lr
	...

0800e69c <__i2b>:
 800e69c:	b510      	push	{r4, lr}
 800e69e:	460c      	mov	r4, r1
 800e6a0:	2101      	movs	r1, #1
 800e6a2:	f7ff feb9 	bl	800e418 <_Balloc>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	b928      	cbnz	r0, 800e6b6 <__i2b+0x1a>
 800e6aa:	4b05      	ldr	r3, [pc, #20]	; (800e6c0 <__i2b+0x24>)
 800e6ac:	4805      	ldr	r0, [pc, #20]	; (800e6c4 <__i2b+0x28>)
 800e6ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e6b2:	f7fe fb23 	bl	800ccfc <__assert_func>
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	6144      	str	r4, [r0, #20]
 800e6ba:	6103      	str	r3, [r0, #16]
 800e6bc:	bd10      	pop	{r4, pc}
 800e6be:	bf00      	nop
 800e6c0:	0800f9c4 	.word	0x0800f9c4
 800e6c4:	0800fa50 	.word	0x0800fa50

0800e6c8 <__multiply>:
 800e6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6cc:	4691      	mov	r9, r2
 800e6ce:	690a      	ldr	r2, [r1, #16]
 800e6d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	bfb8      	it	lt
 800e6d8:	460b      	movlt	r3, r1
 800e6da:	460c      	mov	r4, r1
 800e6dc:	bfbc      	itt	lt
 800e6de:	464c      	movlt	r4, r9
 800e6e0:	4699      	movlt	r9, r3
 800e6e2:	6927      	ldr	r7, [r4, #16]
 800e6e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e6e8:	68a3      	ldr	r3, [r4, #8]
 800e6ea:	6861      	ldr	r1, [r4, #4]
 800e6ec:	eb07 060a 	add.w	r6, r7, sl
 800e6f0:	42b3      	cmp	r3, r6
 800e6f2:	b085      	sub	sp, #20
 800e6f4:	bfb8      	it	lt
 800e6f6:	3101      	addlt	r1, #1
 800e6f8:	f7ff fe8e 	bl	800e418 <_Balloc>
 800e6fc:	b930      	cbnz	r0, 800e70c <__multiply+0x44>
 800e6fe:	4602      	mov	r2, r0
 800e700:	4b44      	ldr	r3, [pc, #272]	; (800e814 <__multiply+0x14c>)
 800e702:	4845      	ldr	r0, [pc, #276]	; (800e818 <__multiply+0x150>)
 800e704:	f240 115d 	movw	r1, #349	; 0x15d
 800e708:	f7fe faf8 	bl	800ccfc <__assert_func>
 800e70c:	f100 0514 	add.w	r5, r0, #20
 800e710:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e714:	462b      	mov	r3, r5
 800e716:	2200      	movs	r2, #0
 800e718:	4543      	cmp	r3, r8
 800e71a:	d321      	bcc.n	800e760 <__multiply+0x98>
 800e71c:	f104 0314 	add.w	r3, r4, #20
 800e720:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e724:	f109 0314 	add.w	r3, r9, #20
 800e728:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e72c:	9202      	str	r2, [sp, #8]
 800e72e:	1b3a      	subs	r2, r7, r4
 800e730:	3a15      	subs	r2, #21
 800e732:	f022 0203 	bic.w	r2, r2, #3
 800e736:	3204      	adds	r2, #4
 800e738:	f104 0115 	add.w	r1, r4, #21
 800e73c:	428f      	cmp	r7, r1
 800e73e:	bf38      	it	cc
 800e740:	2204      	movcc	r2, #4
 800e742:	9201      	str	r2, [sp, #4]
 800e744:	9a02      	ldr	r2, [sp, #8]
 800e746:	9303      	str	r3, [sp, #12]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d80c      	bhi.n	800e766 <__multiply+0x9e>
 800e74c:	2e00      	cmp	r6, #0
 800e74e:	dd03      	ble.n	800e758 <__multiply+0x90>
 800e750:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e754:	2b00      	cmp	r3, #0
 800e756:	d05a      	beq.n	800e80e <__multiply+0x146>
 800e758:	6106      	str	r6, [r0, #16]
 800e75a:	b005      	add	sp, #20
 800e75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e760:	f843 2b04 	str.w	r2, [r3], #4
 800e764:	e7d8      	b.n	800e718 <__multiply+0x50>
 800e766:	f8b3 a000 	ldrh.w	sl, [r3]
 800e76a:	f1ba 0f00 	cmp.w	sl, #0
 800e76e:	d024      	beq.n	800e7ba <__multiply+0xf2>
 800e770:	f104 0e14 	add.w	lr, r4, #20
 800e774:	46a9      	mov	r9, r5
 800e776:	f04f 0c00 	mov.w	ip, #0
 800e77a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e77e:	f8d9 1000 	ldr.w	r1, [r9]
 800e782:	fa1f fb82 	uxth.w	fp, r2
 800e786:	b289      	uxth	r1, r1
 800e788:	fb0a 110b 	mla	r1, sl, fp, r1
 800e78c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e790:	f8d9 2000 	ldr.w	r2, [r9]
 800e794:	4461      	add	r1, ip
 800e796:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e79a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e79e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e7a2:	b289      	uxth	r1, r1
 800e7a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e7a8:	4577      	cmp	r7, lr
 800e7aa:	f849 1b04 	str.w	r1, [r9], #4
 800e7ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e7b2:	d8e2      	bhi.n	800e77a <__multiply+0xb2>
 800e7b4:	9a01      	ldr	r2, [sp, #4]
 800e7b6:	f845 c002 	str.w	ip, [r5, r2]
 800e7ba:	9a03      	ldr	r2, [sp, #12]
 800e7bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e7c0:	3304      	adds	r3, #4
 800e7c2:	f1b9 0f00 	cmp.w	r9, #0
 800e7c6:	d020      	beq.n	800e80a <__multiply+0x142>
 800e7c8:	6829      	ldr	r1, [r5, #0]
 800e7ca:	f104 0c14 	add.w	ip, r4, #20
 800e7ce:	46ae      	mov	lr, r5
 800e7d0:	f04f 0a00 	mov.w	sl, #0
 800e7d4:	f8bc b000 	ldrh.w	fp, [ip]
 800e7d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e7dc:	fb09 220b 	mla	r2, r9, fp, r2
 800e7e0:	4492      	add	sl, r2
 800e7e2:	b289      	uxth	r1, r1
 800e7e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e7e8:	f84e 1b04 	str.w	r1, [lr], #4
 800e7ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e7f0:	f8be 1000 	ldrh.w	r1, [lr]
 800e7f4:	0c12      	lsrs	r2, r2, #16
 800e7f6:	fb09 1102 	mla	r1, r9, r2, r1
 800e7fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e7fe:	4567      	cmp	r7, ip
 800e800:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e804:	d8e6      	bhi.n	800e7d4 <__multiply+0x10c>
 800e806:	9a01      	ldr	r2, [sp, #4]
 800e808:	50a9      	str	r1, [r5, r2]
 800e80a:	3504      	adds	r5, #4
 800e80c:	e79a      	b.n	800e744 <__multiply+0x7c>
 800e80e:	3e01      	subs	r6, #1
 800e810:	e79c      	b.n	800e74c <__multiply+0x84>
 800e812:	bf00      	nop
 800e814:	0800f9c4 	.word	0x0800f9c4
 800e818:	0800fa50 	.word	0x0800fa50

0800e81c <__pow5mult>:
 800e81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e820:	4615      	mov	r5, r2
 800e822:	f012 0203 	ands.w	r2, r2, #3
 800e826:	4606      	mov	r6, r0
 800e828:	460f      	mov	r7, r1
 800e82a:	d007      	beq.n	800e83c <__pow5mult+0x20>
 800e82c:	4c25      	ldr	r4, [pc, #148]	; (800e8c4 <__pow5mult+0xa8>)
 800e82e:	3a01      	subs	r2, #1
 800e830:	2300      	movs	r3, #0
 800e832:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e836:	f7ff fe51 	bl	800e4dc <__multadd>
 800e83a:	4607      	mov	r7, r0
 800e83c:	10ad      	asrs	r5, r5, #2
 800e83e:	d03d      	beq.n	800e8bc <__pow5mult+0xa0>
 800e840:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e842:	b97c      	cbnz	r4, 800e864 <__pow5mult+0x48>
 800e844:	2010      	movs	r0, #16
 800e846:	f7ff fdc1 	bl	800e3cc <malloc>
 800e84a:	4602      	mov	r2, r0
 800e84c:	6270      	str	r0, [r6, #36]	; 0x24
 800e84e:	b928      	cbnz	r0, 800e85c <__pow5mult+0x40>
 800e850:	4b1d      	ldr	r3, [pc, #116]	; (800e8c8 <__pow5mult+0xac>)
 800e852:	481e      	ldr	r0, [pc, #120]	; (800e8cc <__pow5mult+0xb0>)
 800e854:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e858:	f7fe fa50 	bl	800ccfc <__assert_func>
 800e85c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e860:	6004      	str	r4, [r0, #0]
 800e862:	60c4      	str	r4, [r0, #12]
 800e864:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e868:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e86c:	b94c      	cbnz	r4, 800e882 <__pow5mult+0x66>
 800e86e:	f240 2171 	movw	r1, #625	; 0x271
 800e872:	4630      	mov	r0, r6
 800e874:	f7ff ff12 	bl	800e69c <__i2b>
 800e878:	2300      	movs	r3, #0
 800e87a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e87e:	4604      	mov	r4, r0
 800e880:	6003      	str	r3, [r0, #0]
 800e882:	f04f 0900 	mov.w	r9, #0
 800e886:	07eb      	lsls	r3, r5, #31
 800e888:	d50a      	bpl.n	800e8a0 <__pow5mult+0x84>
 800e88a:	4639      	mov	r1, r7
 800e88c:	4622      	mov	r2, r4
 800e88e:	4630      	mov	r0, r6
 800e890:	f7ff ff1a 	bl	800e6c8 <__multiply>
 800e894:	4639      	mov	r1, r7
 800e896:	4680      	mov	r8, r0
 800e898:	4630      	mov	r0, r6
 800e89a:	f7ff fdfd 	bl	800e498 <_Bfree>
 800e89e:	4647      	mov	r7, r8
 800e8a0:	106d      	asrs	r5, r5, #1
 800e8a2:	d00b      	beq.n	800e8bc <__pow5mult+0xa0>
 800e8a4:	6820      	ldr	r0, [r4, #0]
 800e8a6:	b938      	cbnz	r0, 800e8b8 <__pow5mult+0x9c>
 800e8a8:	4622      	mov	r2, r4
 800e8aa:	4621      	mov	r1, r4
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	f7ff ff0b 	bl	800e6c8 <__multiply>
 800e8b2:	6020      	str	r0, [r4, #0]
 800e8b4:	f8c0 9000 	str.w	r9, [r0]
 800e8b8:	4604      	mov	r4, r0
 800e8ba:	e7e4      	b.n	800e886 <__pow5mult+0x6a>
 800e8bc:	4638      	mov	r0, r7
 800e8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8c2:	bf00      	nop
 800e8c4:	0800fba0 	.word	0x0800fba0
 800e8c8:	0800f952 	.word	0x0800f952
 800e8cc:	0800fa50 	.word	0x0800fa50

0800e8d0 <__lshift>:
 800e8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8d4:	460c      	mov	r4, r1
 800e8d6:	6849      	ldr	r1, [r1, #4]
 800e8d8:	6923      	ldr	r3, [r4, #16]
 800e8da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e8de:	68a3      	ldr	r3, [r4, #8]
 800e8e0:	4607      	mov	r7, r0
 800e8e2:	4691      	mov	r9, r2
 800e8e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e8e8:	f108 0601 	add.w	r6, r8, #1
 800e8ec:	42b3      	cmp	r3, r6
 800e8ee:	db0b      	blt.n	800e908 <__lshift+0x38>
 800e8f0:	4638      	mov	r0, r7
 800e8f2:	f7ff fd91 	bl	800e418 <_Balloc>
 800e8f6:	4605      	mov	r5, r0
 800e8f8:	b948      	cbnz	r0, 800e90e <__lshift+0x3e>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	4b2a      	ldr	r3, [pc, #168]	; (800e9a8 <__lshift+0xd8>)
 800e8fe:	482b      	ldr	r0, [pc, #172]	; (800e9ac <__lshift+0xdc>)
 800e900:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e904:	f7fe f9fa 	bl	800ccfc <__assert_func>
 800e908:	3101      	adds	r1, #1
 800e90a:	005b      	lsls	r3, r3, #1
 800e90c:	e7ee      	b.n	800e8ec <__lshift+0x1c>
 800e90e:	2300      	movs	r3, #0
 800e910:	f100 0114 	add.w	r1, r0, #20
 800e914:	f100 0210 	add.w	r2, r0, #16
 800e918:	4618      	mov	r0, r3
 800e91a:	4553      	cmp	r3, sl
 800e91c:	db37      	blt.n	800e98e <__lshift+0xbe>
 800e91e:	6920      	ldr	r0, [r4, #16]
 800e920:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e924:	f104 0314 	add.w	r3, r4, #20
 800e928:	f019 091f 	ands.w	r9, r9, #31
 800e92c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e930:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e934:	d02f      	beq.n	800e996 <__lshift+0xc6>
 800e936:	f1c9 0e20 	rsb	lr, r9, #32
 800e93a:	468a      	mov	sl, r1
 800e93c:	f04f 0c00 	mov.w	ip, #0
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	fa02 f209 	lsl.w	r2, r2, r9
 800e946:	ea42 020c 	orr.w	r2, r2, ip
 800e94a:	f84a 2b04 	str.w	r2, [sl], #4
 800e94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e952:	4298      	cmp	r0, r3
 800e954:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e958:	d8f2      	bhi.n	800e940 <__lshift+0x70>
 800e95a:	1b03      	subs	r3, r0, r4
 800e95c:	3b15      	subs	r3, #21
 800e95e:	f023 0303 	bic.w	r3, r3, #3
 800e962:	3304      	adds	r3, #4
 800e964:	f104 0215 	add.w	r2, r4, #21
 800e968:	4290      	cmp	r0, r2
 800e96a:	bf38      	it	cc
 800e96c:	2304      	movcc	r3, #4
 800e96e:	f841 c003 	str.w	ip, [r1, r3]
 800e972:	f1bc 0f00 	cmp.w	ip, #0
 800e976:	d001      	beq.n	800e97c <__lshift+0xac>
 800e978:	f108 0602 	add.w	r6, r8, #2
 800e97c:	3e01      	subs	r6, #1
 800e97e:	4638      	mov	r0, r7
 800e980:	612e      	str	r6, [r5, #16]
 800e982:	4621      	mov	r1, r4
 800e984:	f7ff fd88 	bl	800e498 <_Bfree>
 800e988:	4628      	mov	r0, r5
 800e98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e98e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e992:	3301      	adds	r3, #1
 800e994:	e7c1      	b.n	800e91a <__lshift+0x4a>
 800e996:	3904      	subs	r1, #4
 800e998:	f853 2b04 	ldr.w	r2, [r3], #4
 800e99c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9a0:	4298      	cmp	r0, r3
 800e9a2:	d8f9      	bhi.n	800e998 <__lshift+0xc8>
 800e9a4:	e7ea      	b.n	800e97c <__lshift+0xac>
 800e9a6:	bf00      	nop
 800e9a8:	0800f9c4 	.word	0x0800f9c4
 800e9ac:	0800fa50 	.word	0x0800fa50

0800e9b0 <__mcmp>:
 800e9b0:	b530      	push	{r4, r5, lr}
 800e9b2:	6902      	ldr	r2, [r0, #16]
 800e9b4:	690c      	ldr	r4, [r1, #16]
 800e9b6:	1b12      	subs	r2, r2, r4
 800e9b8:	d10e      	bne.n	800e9d8 <__mcmp+0x28>
 800e9ba:	f100 0314 	add.w	r3, r0, #20
 800e9be:	3114      	adds	r1, #20
 800e9c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e9c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e9c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e9cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e9d0:	42a5      	cmp	r5, r4
 800e9d2:	d003      	beq.n	800e9dc <__mcmp+0x2c>
 800e9d4:	d305      	bcc.n	800e9e2 <__mcmp+0x32>
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	4610      	mov	r0, r2
 800e9da:	bd30      	pop	{r4, r5, pc}
 800e9dc:	4283      	cmp	r3, r0
 800e9de:	d3f3      	bcc.n	800e9c8 <__mcmp+0x18>
 800e9e0:	e7fa      	b.n	800e9d8 <__mcmp+0x28>
 800e9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e9e6:	e7f7      	b.n	800e9d8 <__mcmp+0x28>

0800e9e8 <__mdiff>:
 800e9e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ec:	460c      	mov	r4, r1
 800e9ee:	4606      	mov	r6, r0
 800e9f0:	4611      	mov	r1, r2
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	4690      	mov	r8, r2
 800e9f6:	f7ff ffdb 	bl	800e9b0 <__mcmp>
 800e9fa:	1e05      	subs	r5, r0, #0
 800e9fc:	d110      	bne.n	800ea20 <__mdiff+0x38>
 800e9fe:	4629      	mov	r1, r5
 800ea00:	4630      	mov	r0, r6
 800ea02:	f7ff fd09 	bl	800e418 <_Balloc>
 800ea06:	b930      	cbnz	r0, 800ea16 <__mdiff+0x2e>
 800ea08:	4b3a      	ldr	r3, [pc, #232]	; (800eaf4 <__mdiff+0x10c>)
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	f240 2132 	movw	r1, #562	; 0x232
 800ea10:	4839      	ldr	r0, [pc, #228]	; (800eaf8 <__mdiff+0x110>)
 800ea12:	f7fe f973 	bl	800ccfc <__assert_func>
 800ea16:	2301      	movs	r3, #1
 800ea18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea20:	bfa4      	itt	ge
 800ea22:	4643      	movge	r3, r8
 800ea24:	46a0      	movge	r8, r4
 800ea26:	4630      	mov	r0, r6
 800ea28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea2c:	bfa6      	itte	ge
 800ea2e:	461c      	movge	r4, r3
 800ea30:	2500      	movge	r5, #0
 800ea32:	2501      	movlt	r5, #1
 800ea34:	f7ff fcf0 	bl	800e418 <_Balloc>
 800ea38:	b920      	cbnz	r0, 800ea44 <__mdiff+0x5c>
 800ea3a:	4b2e      	ldr	r3, [pc, #184]	; (800eaf4 <__mdiff+0x10c>)
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ea42:	e7e5      	b.n	800ea10 <__mdiff+0x28>
 800ea44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ea48:	6926      	ldr	r6, [r4, #16]
 800ea4a:	60c5      	str	r5, [r0, #12]
 800ea4c:	f104 0914 	add.w	r9, r4, #20
 800ea50:	f108 0514 	add.w	r5, r8, #20
 800ea54:	f100 0e14 	add.w	lr, r0, #20
 800ea58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ea5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ea60:	f108 0210 	add.w	r2, r8, #16
 800ea64:	46f2      	mov	sl, lr
 800ea66:	2100      	movs	r1, #0
 800ea68:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ea70:	fa1f f883 	uxth.w	r8, r3
 800ea74:	fa11 f18b 	uxtah	r1, r1, fp
 800ea78:	0c1b      	lsrs	r3, r3, #16
 800ea7a:	eba1 0808 	sub.w	r8, r1, r8
 800ea7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ea82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ea86:	fa1f f888 	uxth.w	r8, r8
 800ea8a:	1419      	asrs	r1, r3, #16
 800ea8c:	454e      	cmp	r6, r9
 800ea8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ea92:	f84a 3b04 	str.w	r3, [sl], #4
 800ea96:	d8e7      	bhi.n	800ea68 <__mdiff+0x80>
 800ea98:	1b33      	subs	r3, r6, r4
 800ea9a:	3b15      	subs	r3, #21
 800ea9c:	f023 0303 	bic.w	r3, r3, #3
 800eaa0:	3304      	adds	r3, #4
 800eaa2:	3415      	adds	r4, #21
 800eaa4:	42a6      	cmp	r6, r4
 800eaa6:	bf38      	it	cc
 800eaa8:	2304      	movcc	r3, #4
 800eaaa:	441d      	add	r5, r3
 800eaac:	4473      	add	r3, lr
 800eaae:	469e      	mov	lr, r3
 800eab0:	462e      	mov	r6, r5
 800eab2:	4566      	cmp	r6, ip
 800eab4:	d30e      	bcc.n	800ead4 <__mdiff+0xec>
 800eab6:	f10c 0203 	add.w	r2, ip, #3
 800eaba:	1b52      	subs	r2, r2, r5
 800eabc:	f022 0203 	bic.w	r2, r2, #3
 800eac0:	3d03      	subs	r5, #3
 800eac2:	45ac      	cmp	ip, r5
 800eac4:	bf38      	it	cc
 800eac6:	2200      	movcc	r2, #0
 800eac8:	441a      	add	r2, r3
 800eaca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eace:	b17b      	cbz	r3, 800eaf0 <__mdiff+0x108>
 800ead0:	6107      	str	r7, [r0, #16]
 800ead2:	e7a3      	b.n	800ea1c <__mdiff+0x34>
 800ead4:	f856 8b04 	ldr.w	r8, [r6], #4
 800ead8:	fa11 f288 	uxtah	r2, r1, r8
 800eadc:	1414      	asrs	r4, r2, #16
 800eade:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eae2:	b292      	uxth	r2, r2
 800eae4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eae8:	f84e 2b04 	str.w	r2, [lr], #4
 800eaec:	1421      	asrs	r1, r4, #16
 800eaee:	e7e0      	b.n	800eab2 <__mdiff+0xca>
 800eaf0:	3f01      	subs	r7, #1
 800eaf2:	e7ea      	b.n	800eaca <__mdiff+0xe2>
 800eaf4:	0800f9c4 	.word	0x0800f9c4
 800eaf8:	0800fa50 	.word	0x0800fa50

0800eafc <__ulp>:
 800eafc:	b082      	sub	sp, #8
 800eafe:	ed8d 0b00 	vstr	d0, [sp]
 800eb02:	9b01      	ldr	r3, [sp, #4]
 800eb04:	4912      	ldr	r1, [pc, #72]	; (800eb50 <__ulp+0x54>)
 800eb06:	4019      	ands	r1, r3
 800eb08:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800eb0c:	2900      	cmp	r1, #0
 800eb0e:	dd05      	ble.n	800eb1c <__ulp+0x20>
 800eb10:	2200      	movs	r2, #0
 800eb12:	460b      	mov	r3, r1
 800eb14:	ec43 2b10 	vmov	d0, r2, r3
 800eb18:	b002      	add	sp, #8
 800eb1a:	4770      	bx	lr
 800eb1c:	4249      	negs	r1, r1
 800eb1e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800eb22:	ea4f 5021 	mov.w	r0, r1, asr #20
 800eb26:	f04f 0200 	mov.w	r2, #0
 800eb2a:	f04f 0300 	mov.w	r3, #0
 800eb2e:	da04      	bge.n	800eb3a <__ulp+0x3e>
 800eb30:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800eb34:	fa41 f300 	asr.w	r3, r1, r0
 800eb38:	e7ec      	b.n	800eb14 <__ulp+0x18>
 800eb3a:	f1a0 0114 	sub.w	r1, r0, #20
 800eb3e:	291e      	cmp	r1, #30
 800eb40:	bfda      	itte	le
 800eb42:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800eb46:	fa20 f101 	lsrle.w	r1, r0, r1
 800eb4a:	2101      	movgt	r1, #1
 800eb4c:	460a      	mov	r2, r1
 800eb4e:	e7e1      	b.n	800eb14 <__ulp+0x18>
 800eb50:	7ff00000 	.word	0x7ff00000

0800eb54 <__b2d>:
 800eb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb56:	6905      	ldr	r5, [r0, #16]
 800eb58:	f100 0714 	add.w	r7, r0, #20
 800eb5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800eb60:	1f2e      	subs	r6, r5, #4
 800eb62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800eb66:	4620      	mov	r0, r4
 800eb68:	f7ff fd48 	bl	800e5fc <__hi0bits>
 800eb6c:	f1c0 0320 	rsb	r3, r0, #32
 800eb70:	280a      	cmp	r0, #10
 800eb72:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ebf0 <__b2d+0x9c>
 800eb76:	600b      	str	r3, [r1, #0]
 800eb78:	dc14      	bgt.n	800eba4 <__b2d+0x50>
 800eb7a:	f1c0 0e0b 	rsb	lr, r0, #11
 800eb7e:	fa24 f10e 	lsr.w	r1, r4, lr
 800eb82:	42b7      	cmp	r7, r6
 800eb84:	ea41 030c 	orr.w	r3, r1, ip
 800eb88:	bf34      	ite	cc
 800eb8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eb8e:	2100      	movcs	r1, #0
 800eb90:	3015      	adds	r0, #21
 800eb92:	fa04 f000 	lsl.w	r0, r4, r0
 800eb96:	fa21 f10e 	lsr.w	r1, r1, lr
 800eb9a:	ea40 0201 	orr.w	r2, r0, r1
 800eb9e:	ec43 2b10 	vmov	d0, r2, r3
 800eba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eba4:	42b7      	cmp	r7, r6
 800eba6:	bf3a      	itte	cc
 800eba8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ebac:	f1a5 0608 	subcc.w	r6, r5, #8
 800ebb0:	2100      	movcs	r1, #0
 800ebb2:	380b      	subs	r0, #11
 800ebb4:	d017      	beq.n	800ebe6 <__b2d+0x92>
 800ebb6:	f1c0 0c20 	rsb	ip, r0, #32
 800ebba:	fa04 f500 	lsl.w	r5, r4, r0
 800ebbe:	42be      	cmp	r6, r7
 800ebc0:	fa21 f40c 	lsr.w	r4, r1, ip
 800ebc4:	ea45 0504 	orr.w	r5, r5, r4
 800ebc8:	bf8c      	ite	hi
 800ebca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ebce:	2400      	movls	r4, #0
 800ebd0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ebd4:	fa01 f000 	lsl.w	r0, r1, r0
 800ebd8:	fa24 f40c 	lsr.w	r4, r4, ip
 800ebdc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ebe0:	ea40 0204 	orr.w	r2, r0, r4
 800ebe4:	e7db      	b.n	800eb9e <__b2d+0x4a>
 800ebe6:	ea44 030c 	orr.w	r3, r4, ip
 800ebea:	460a      	mov	r2, r1
 800ebec:	e7d7      	b.n	800eb9e <__b2d+0x4a>
 800ebee:	bf00      	nop
 800ebf0:	3ff00000 	.word	0x3ff00000

0800ebf4 <__d2b>:
 800ebf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ebf8:	4689      	mov	r9, r1
 800ebfa:	2101      	movs	r1, #1
 800ebfc:	ec57 6b10 	vmov	r6, r7, d0
 800ec00:	4690      	mov	r8, r2
 800ec02:	f7ff fc09 	bl	800e418 <_Balloc>
 800ec06:	4604      	mov	r4, r0
 800ec08:	b930      	cbnz	r0, 800ec18 <__d2b+0x24>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	4b25      	ldr	r3, [pc, #148]	; (800eca4 <__d2b+0xb0>)
 800ec0e:	4826      	ldr	r0, [pc, #152]	; (800eca8 <__d2b+0xb4>)
 800ec10:	f240 310a 	movw	r1, #778	; 0x30a
 800ec14:	f7fe f872 	bl	800ccfc <__assert_func>
 800ec18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ec1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec20:	bb35      	cbnz	r5, 800ec70 <__d2b+0x7c>
 800ec22:	2e00      	cmp	r6, #0
 800ec24:	9301      	str	r3, [sp, #4]
 800ec26:	d028      	beq.n	800ec7a <__d2b+0x86>
 800ec28:	4668      	mov	r0, sp
 800ec2a:	9600      	str	r6, [sp, #0]
 800ec2c:	f7ff fd06 	bl	800e63c <__lo0bits>
 800ec30:	9900      	ldr	r1, [sp, #0]
 800ec32:	b300      	cbz	r0, 800ec76 <__d2b+0x82>
 800ec34:	9a01      	ldr	r2, [sp, #4]
 800ec36:	f1c0 0320 	rsb	r3, r0, #32
 800ec3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ec3e:	430b      	orrs	r3, r1
 800ec40:	40c2      	lsrs	r2, r0
 800ec42:	6163      	str	r3, [r4, #20]
 800ec44:	9201      	str	r2, [sp, #4]
 800ec46:	9b01      	ldr	r3, [sp, #4]
 800ec48:	61a3      	str	r3, [r4, #24]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	bf14      	ite	ne
 800ec4e:	2202      	movne	r2, #2
 800ec50:	2201      	moveq	r2, #1
 800ec52:	6122      	str	r2, [r4, #16]
 800ec54:	b1d5      	cbz	r5, 800ec8c <__d2b+0x98>
 800ec56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ec5a:	4405      	add	r5, r0
 800ec5c:	f8c9 5000 	str.w	r5, [r9]
 800ec60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec64:	f8c8 0000 	str.w	r0, [r8]
 800ec68:	4620      	mov	r0, r4
 800ec6a:	b003      	add	sp, #12
 800ec6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec74:	e7d5      	b.n	800ec22 <__d2b+0x2e>
 800ec76:	6161      	str	r1, [r4, #20]
 800ec78:	e7e5      	b.n	800ec46 <__d2b+0x52>
 800ec7a:	a801      	add	r0, sp, #4
 800ec7c:	f7ff fcde 	bl	800e63c <__lo0bits>
 800ec80:	9b01      	ldr	r3, [sp, #4]
 800ec82:	6163      	str	r3, [r4, #20]
 800ec84:	2201      	movs	r2, #1
 800ec86:	6122      	str	r2, [r4, #16]
 800ec88:	3020      	adds	r0, #32
 800ec8a:	e7e3      	b.n	800ec54 <__d2b+0x60>
 800ec8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ec94:	f8c9 0000 	str.w	r0, [r9]
 800ec98:	6918      	ldr	r0, [r3, #16]
 800ec9a:	f7ff fcaf 	bl	800e5fc <__hi0bits>
 800ec9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eca2:	e7df      	b.n	800ec64 <__d2b+0x70>
 800eca4:	0800f9c4 	.word	0x0800f9c4
 800eca8:	0800fa50 	.word	0x0800fa50

0800ecac <__ratio>:
 800ecac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb0:	4688      	mov	r8, r1
 800ecb2:	4669      	mov	r1, sp
 800ecb4:	4681      	mov	r9, r0
 800ecb6:	f7ff ff4d 	bl	800eb54 <__b2d>
 800ecba:	a901      	add	r1, sp, #4
 800ecbc:	4640      	mov	r0, r8
 800ecbe:	ec55 4b10 	vmov	r4, r5, d0
 800ecc2:	f7ff ff47 	bl	800eb54 <__b2d>
 800ecc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ecca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ecce:	eba3 0c02 	sub.w	ip, r3, r2
 800ecd2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ecd6:	1a9b      	subs	r3, r3, r2
 800ecd8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ecdc:	ec51 0b10 	vmov	r0, r1, d0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	bfd6      	itet	le
 800ece4:	460a      	movle	r2, r1
 800ece6:	462a      	movgt	r2, r5
 800ece8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ecec:	468b      	mov	fp, r1
 800ecee:	462f      	mov	r7, r5
 800ecf0:	bfd4      	ite	le
 800ecf2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ecf6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	ee10 2a10 	vmov	r2, s0
 800ed00:	465b      	mov	r3, fp
 800ed02:	4639      	mov	r1, r7
 800ed04:	f7f1 fda2 	bl	800084c <__aeabi_ddiv>
 800ed08:	ec41 0b10 	vmov	d0, r0, r1
 800ed0c:	b003      	add	sp, #12
 800ed0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed12 <__copybits>:
 800ed12:	3901      	subs	r1, #1
 800ed14:	b570      	push	{r4, r5, r6, lr}
 800ed16:	1149      	asrs	r1, r1, #5
 800ed18:	6914      	ldr	r4, [r2, #16]
 800ed1a:	3101      	adds	r1, #1
 800ed1c:	f102 0314 	add.w	r3, r2, #20
 800ed20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ed24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ed28:	1f05      	subs	r5, r0, #4
 800ed2a:	42a3      	cmp	r3, r4
 800ed2c:	d30c      	bcc.n	800ed48 <__copybits+0x36>
 800ed2e:	1aa3      	subs	r3, r4, r2
 800ed30:	3b11      	subs	r3, #17
 800ed32:	f023 0303 	bic.w	r3, r3, #3
 800ed36:	3211      	adds	r2, #17
 800ed38:	42a2      	cmp	r2, r4
 800ed3a:	bf88      	it	hi
 800ed3c:	2300      	movhi	r3, #0
 800ed3e:	4418      	add	r0, r3
 800ed40:	2300      	movs	r3, #0
 800ed42:	4288      	cmp	r0, r1
 800ed44:	d305      	bcc.n	800ed52 <__copybits+0x40>
 800ed46:	bd70      	pop	{r4, r5, r6, pc}
 800ed48:	f853 6b04 	ldr.w	r6, [r3], #4
 800ed4c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ed50:	e7eb      	b.n	800ed2a <__copybits+0x18>
 800ed52:	f840 3b04 	str.w	r3, [r0], #4
 800ed56:	e7f4      	b.n	800ed42 <__copybits+0x30>

0800ed58 <__any_on>:
 800ed58:	f100 0214 	add.w	r2, r0, #20
 800ed5c:	6900      	ldr	r0, [r0, #16]
 800ed5e:	114b      	asrs	r3, r1, #5
 800ed60:	4298      	cmp	r0, r3
 800ed62:	b510      	push	{r4, lr}
 800ed64:	db11      	blt.n	800ed8a <__any_on+0x32>
 800ed66:	dd0a      	ble.n	800ed7e <__any_on+0x26>
 800ed68:	f011 011f 	ands.w	r1, r1, #31
 800ed6c:	d007      	beq.n	800ed7e <__any_on+0x26>
 800ed6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ed72:	fa24 f001 	lsr.w	r0, r4, r1
 800ed76:	fa00 f101 	lsl.w	r1, r0, r1
 800ed7a:	428c      	cmp	r4, r1
 800ed7c:	d10b      	bne.n	800ed96 <__any_on+0x3e>
 800ed7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d803      	bhi.n	800ed8e <__any_on+0x36>
 800ed86:	2000      	movs	r0, #0
 800ed88:	bd10      	pop	{r4, pc}
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	e7f7      	b.n	800ed7e <__any_on+0x26>
 800ed8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed92:	2900      	cmp	r1, #0
 800ed94:	d0f5      	beq.n	800ed82 <__any_on+0x2a>
 800ed96:	2001      	movs	r0, #1
 800ed98:	e7f6      	b.n	800ed88 <__any_on+0x30>

0800ed9a <_calloc_r>:
 800ed9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed9c:	fba1 2402 	umull	r2, r4, r1, r2
 800eda0:	b94c      	cbnz	r4, 800edb6 <_calloc_r+0x1c>
 800eda2:	4611      	mov	r1, r2
 800eda4:	9201      	str	r2, [sp, #4]
 800eda6:	f7fc f823 	bl	800adf0 <_malloc_r>
 800edaa:	9a01      	ldr	r2, [sp, #4]
 800edac:	4605      	mov	r5, r0
 800edae:	b930      	cbnz	r0, 800edbe <_calloc_r+0x24>
 800edb0:	4628      	mov	r0, r5
 800edb2:	b003      	add	sp, #12
 800edb4:	bd30      	pop	{r4, r5, pc}
 800edb6:	220c      	movs	r2, #12
 800edb8:	6002      	str	r2, [r0, #0]
 800edba:	2500      	movs	r5, #0
 800edbc:	e7f8      	b.n	800edb0 <_calloc_r+0x16>
 800edbe:	4621      	mov	r1, r4
 800edc0:	f7fb ffed 	bl	800ad9e <memset>
 800edc4:	e7f4      	b.n	800edb0 <_calloc_r+0x16>
	...

0800edc8 <_free_r>:
 800edc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edca:	2900      	cmp	r1, #0
 800edcc:	d044      	beq.n	800ee58 <_free_r+0x90>
 800edce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edd2:	9001      	str	r0, [sp, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f1a1 0404 	sub.w	r4, r1, #4
 800edda:	bfb8      	it	lt
 800eddc:	18e4      	addlt	r4, r4, r3
 800edde:	f7ff fb0f 	bl	800e400 <__malloc_lock>
 800ede2:	4a1e      	ldr	r2, [pc, #120]	; (800ee5c <_free_r+0x94>)
 800ede4:	9801      	ldr	r0, [sp, #4]
 800ede6:	6813      	ldr	r3, [r2, #0]
 800ede8:	b933      	cbnz	r3, 800edf8 <_free_r+0x30>
 800edea:	6063      	str	r3, [r4, #4]
 800edec:	6014      	str	r4, [r2, #0]
 800edee:	b003      	add	sp, #12
 800edf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800edf4:	f7ff bb0a 	b.w	800e40c <__malloc_unlock>
 800edf8:	42a3      	cmp	r3, r4
 800edfa:	d908      	bls.n	800ee0e <_free_r+0x46>
 800edfc:	6825      	ldr	r5, [r4, #0]
 800edfe:	1961      	adds	r1, r4, r5
 800ee00:	428b      	cmp	r3, r1
 800ee02:	bf01      	itttt	eq
 800ee04:	6819      	ldreq	r1, [r3, #0]
 800ee06:	685b      	ldreq	r3, [r3, #4]
 800ee08:	1949      	addeq	r1, r1, r5
 800ee0a:	6021      	streq	r1, [r4, #0]
 800ee0c:	e7ed      	b.n	800edea <_free_r+0x22>
 800ee0e:	461a      	mov	r2, r3
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	b10b      	cbz	r3, 800ee18 <_free_r+0x50>
 800ee14:	42a3      	cmp	r3, r4
 800ee16:	d9fa      	bls.n	800ee0e <_free_r+0x46>
 800ee18:	6811      	ldr	r1, [r2, #0]
 800ee1a:	1855      	adds	r5, r2, r1
 800ee1c:	42a5      	cmp	r5, r4
 800ee1e:	d10b      	bne.n	800ee38 <_free_r+0x70>
 800ee20:	6824      	ldr	r4, [r4, #0]
 800ee22:	4421      	add	r1, r4
 800ee24:	1854      	adds	r4, r2, r1
 800ee26:	42a3      	cmp	r3, r4
 800ee28:	6011      	str	r1, [r2, #0]
 800ee2a:	d1e0      	bne.n	800edee <_free_r+0x26>
 800ee2c:	681c      	ldr	r4, [r3, #0]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	6053      	str	r3, [r2, #4]
 800ee32:	4421      	add	r1, r4
 800ee34:	6011      	str	r1, [r2, #0]
 800ee36:	e7da      	b.n	800edee <_free_r+0x26>
 800ee38:	d902      	bls.n	800ee40 <_free_r+0x78>
 800ee3a:	230c      	movs	r3, #12
 800ee3c:	6003      	str	r3, [r0, #0]
 800ee3e:	e7d6      	b.n	800edee <_free_r+0x26>
 800ee40:	6825      	ldr	r5, [r4, #0]
 800ee42:	1961      	adds	r1, r4, r5
 800ee44:	428b      	cmp	r3, r1
 800ee46:	bf04      	itt	eq
 800ee48:	6819      	ldreq	r1, [r3, #0]
 800ee4a:	685b      	ldreq	r3, [r3, #4]
 800ee4c:	6063      	str	r3, [r4, #4]
 800ee4e:	bf04      	itt	eq
 800ee50:	1949      	addeq	r1, r1, r5
 800ee52:	6021      	streq	r1, [r4, #0]
 800ee54:	6054      	str	r4, [r2, #4]
 800ee56:	e7ca      	b.n	800edee <_free_r+0x26>
 800ee58:	b003      	add	sp, #12
 800ee5a:	bd30      	pop	{r4, r5, pc}
 800ee5c:	20008418 	.word	0x20008418

0800ee60 <__ssputs_r>:
 800ee60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee64:	688e      	ldr	r6, [r1, #8]
 800ee66:	429e      	cmp	r6, r3
 800ee68:	4682      	mov	sl, r0
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	4690      	mov	r8, r2
 800ee6e:	461f      	mov	r7, r3
 800ee70:	d838      	bhi.n	800eee4 <__ssputs_r+0x84>
 800ee72:	898a      	ldrh	r2, [r1, #12]
 800ee74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee78:	d032      	beq.n	800eee0 <__ssputs_r+0x80>
 800ee7a:	6825      	ldr	r5, [r4, #0]
 800ee7c:	6909      	ldr	r1, [r1, #16]
 800ee7e:	eba5 0901 	sub.w	r9, r5, r1
 800ee82:	6965      	ldr	r5, [r4, #20]
 800ee84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	444b      	add	r3, r9
 800ee90:	106d      	asrs	r5, r5, #1
 800ee92:	429d      	cmp	r5, r3
 800ee94:	bf38      	it	cc
 800ee96:	461d      	movcc	r5, r3
 800ee98:	0553      	lsls	r3, r2, #21
 800ee9a:	d531      	bpl.n	800ef00 <__ssputs_r+0xa0>
 800ee9c:	4629      	mov	r1, r5
 800ee9e:	f7fb ffa7 	bl	800adf0 <_malloc_r>
 800eea2:	4606      	mov	r6, r0
 800eea4:	b950      	cbnz	r0, 800eebc <__ssputs_r+0x5c>
 800eea6:	230c      	movs	r3, #12
 800eea8:	f8ca 3000 	str.w	r3, [sl]
 800eeac:	89a3      	ldrh	r3, [r4, #12]
 800eeae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eeb2:	81a3      	strh	r3, [r4, #12]
 800eeb4:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eebc:	6921      	ldr	r1, [r4, #16]
 800eebe:	464a      	mov	r2, r9
 800eec0:	f7fb ff5f 	bl	800ad82 <memcpy>
 800eec4:	89a3      	ldrh	r3, [r4, #12]
 800eec6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eeca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eece:	81a3      	strh	r3, [r4, #12]
 800eed0:	6126      	str	r6, [r4, #16]
 800eed2:	6165      	str	r5, [r4, #20]
 800eed4:	444e      	add	r6, r9
 800eed6:	eba5 0509 	sub.w	r5, r5, r9
 800eeda:	6026      	str	r6, [r4, #0]
 800eedc:	60a5      	str	r5, [r4, #8]
 800eede:	463e      	mov	r6, r7
 800eee0:	42be      	cmp	r6, r7
 800eee2:	d900      	bls.n	800eee6 <__ssputs_r+0x86>
 800eee4:	463e      	mov	r6, r7
 800eee6:	6820      	ldr	r0, [r4, #0]
 800eee8:	4632      	mov	r2, r6
 800eeea:	4641      	mov	r1, r8
 800eeec:	f000 fad2 	bl	800f494 <memmove>
 800eef0:	68a3      	ldr	r3, [r4, #8]
 800eef2:	1b9b      	subs	r3, r3, r6
 800eef4:	60a3      	str	r3, [r4, #8]
 800eef6:	6823      	ldr	r3, [r4, #0]
 800eef8:	4433      	add	r3, r6
 800eefa:	6023      	str	r3, [r4, #0]
 800eefc:	2000      	movs	r0, #0
 800eefe:	e7db      	b.n	800eeb8 <__ssputs_r+0x58>
 800ef00:	462a      	mov	r2, r5
 800ef02:	f000 fae1 	bl	800f4c8 <_realloc_r>
 800ef06:	4606      	mov	r6, r0
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d1e1      	bne.n	800eed0 <__ssputs_r+0x70>
 800ef0c:	6921      	ldr	r1, [r4, #16]
 800ef0e:	4650      	mov	r0, sl
 800ef10:	f7ff ff5a 	bl	800edc8 <_free_r>
 800ef14:	e7c7      	b.n	800eea6 <__ssputs_r+0x46>
	...

0800ef18 <_svfiprintf_r>:
 800ef18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef1c:	4698      	mov	r8, r3
 800ef1e:	898b      	ldrh	r3, [r1, #12]
 800ef20:	061b      	lsls	r3, r3, #24
 800ef22:	b09d      	sub	sp, #116	; 0x74
 800ef24:	4607      	mov	r7, r0
 800ef26:	460d      	mov	r5, r1
 800ef28:	4614      	mov	r4, r2
 800ef2a:	d50e      	bpl.n	800ef4a <_svfiprintf_r+0x32>
 800ef2c:	690b      	ldr	r3, [r1, #16]
 800ef2e:	b963      	cbnz	r3, 800ef4a <_svfiprintf_r+0x32>
 800ef30:	2140      	movs	r1, #64	; 0x40
 800ef32:	f7fb ff5d 	bl	800adf0 <_malloc_r>
 800ef36:	6028      	str	r0, [r5, #0]
 800ef38:	6128      	str	r0, [r5, #16]
 800ef3a:	b920      	cbnz	r0, 800ef46 <_svfiprintf_r+0x2e>
 800ef3c:	230c      	movs	r3, #12
 800ef3e:	603b      	str	r3, [r7, #0]
 800ef40:	f04f 30ff 	mov.w	r0, #4294967295
 800ef44:	e0d1      	b.n	800f0ea <_svfiprintf_r+0x1d2>
 800ef46:	2340      	movs	r3, #64	; 0x40
 800ef48:	616b      	str	r3, [r5, #20]
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef4e:	2320      	movs	r3, #32
 800ef50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef54:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef58:	2330      	movs	r3, #48	; 0x30
 800ef5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f104 <_svfiprintf_r+0x1ec>
 800ef5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef62:	f04f 0901 	mov.w	r9, #1
 800ef66:	4623      	mov	r3, r4
 800ef68:	469a      	mov	sl, r3
 800ef6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef6e:	b10a      	cbz	r2, 800ef74 <_svfiprintf_r+0x5c>
 800ef70:	2a25      	cmp	r2, #37	; 0x25
 800ef72:	d1f9      	bne.n	800ef68 <_svfiprintf_r+0x50>
 800ef74:	ebba 0b04 	subs.w	fp, sl, r4
 800ef78:	d00b      	beq.n	800ef92 <_svfiprintf_r+0x7a>
 800ef7a:	465b      	mov	r3, fp
 800ef7c:	4622      	mov	r2, r4
 800ef7e:	4629      	mov	r1, r5
 800ef80:	4638      	mov	r0, r7
 800ef82:	f7ff ff6d 	bl	800ee60 <__ssputs_r>
 800ef86:	3001      	adds	r0, #1
 800ef88:	f000 80aa 	beq.w	800f0e0 <_svfiprintf_r+0x1c8>
 800ef8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef8e:	445a      	add	r2, fp
 800ef90:	9209      	str	r2, [sp, #36]	; 0x24
 800ef92:	f89a 3000 	ldrb.w	r3, [sl]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	f000 80a2 	beq.w	800f0e0 <_svfiprintf_r+0x1c8>
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	f04f 32ff 	mov.w	r2, #4294967295
 800efa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efa6:	f10a 0a01 	add.w	sl, sl, #1
 800efaa:	9304      	str	r3, [sp, #16]
 800efac:	9307      	str	r3, [sp, #28]
 800efae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efb2:	931a      	str	r3, [sp, #104]	; 0x68
 800efb4:	4654      	mov	r4, sl
 800efb6:	2205      	movs	r2, #5
 800efb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efbc:	4851      	ldr	r0, [pc, #324]	; (800f104 <_svfiprintf_r+0x1ec>)
 800efbe:	f7f1 f90f 	bl	80001e0 <memchr>
 800efc2:	9a04      	ldr	r2, [sp, #16]
 800efc4:	b9d8      	cbnz	r0, 800effe <_svfiprintf_r+0xe6>
 800efc6:	06d0      	lsls	r0, r2, #27
 800efc8:	bf44      	itt	mi
 800efca:	2320      	movmi	r3, #32
 800efcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efd0:	0711      	lsls	r1, r2, #28
 800efd2:	bf44      	itt	mi
 800efd4:	232b      	movmi	r3, #43	; 0x2b
 800efd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efda:	f89a 3000 	ldrb.w	r3, [sl]
 800efde:	2b2a      	cmp	r3, #42	; 0x2a
 800efe0:	d015      	beq.n	800f00e <_svfiprintf_r+0xf6>
 800efe2:	9a07      	ldr	r2, [sp, #28]
 800efe4:	4654      	mov	r4, sl
 800efe6:	2000      	movs	r0, #0
 800efe8:	f04f 0c0a 	mov.w	ip, #10
 800efec:	4621      	mov	r1, r4
 800efee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eff2:	3b30      	subs	r3, #48	; 0x30
 800eff4:	2b09      	cmp	r3, #9
 800eff6:	d94e      	bls.n	800f096 <_svfiprintf_r+0x17e>
 800eff8:	b1b0      	cbz	r0, 800f028 <_svfiprintf_r+0x110>
 800effa:	9207      	str	r2, [sp, #28]
 800effc:	e014      	b.n	800f028 <_svfiprintf_r+0x110>
 800effe:	eba0 0308 	sub.w	r3, r0, r8
 800f002:	fa09 f303 	lsl.w	r3, r9, r3
 800f006:	4313      	orrs	r3, r2
 800f008:	9304      	str	r3, [sp, #16]
 800f00a:	46a2      	mov	sl, r4
 800f00c:	e7d2      	b.n	800efb4 <_svfiprintf_r+0x9c>
 800f00e:	9b03      	ldr	r3, [sp, #12]
 800f010:	1d19      	adds	r1, r3, #4
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	9103      	str	r1, [sp, #12]
 800f016:	2b00      	cmp	r3, #0
 800f018:	bfbb      	ittet	lt
 800f01a:	425b      	neglt	r3, r3
 800f01c:	f042 0202 	orrlt.w	r2, r2, #2
 800f020:	9307      	strge	r3, [sp, #28]
 800f022:	9307      	strlt	r3, [sp, #28]
 800f024:	bfb8      	it	lt
 800f026:	9204      	strlt	r2, [sp, #16]
 800f028:	7823      	ldrb	r3, [r4, #0]
 800f02a:	2b2e      	cmp	r3, #46	; 0x2e
 800f02c:	d10c      	bne.n	800f048 <_svfiprintf_r+0x130>
 800f02e:	7863      	ldrb	r3, [r4, #1]
 800f030:	2b2a      	cmp	r3, #42	; 0x2a
 800f032:	d135      	bne.n	800f0a0 <_svfiprintf_r+0x188>
 800f034:	9b03      	ldr	r3, [sp, #12]
 800f036:	1d1a      	adds	r2, r3, #4
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	9203      	str	r2, [sp, #12]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	bfb8      	it	lt
 800f040:	f04f 33ff 	movlt.w	r3, #4294967295
 800f044:	3402      	adds	r4, #2
 800f046:	9305      	str	r3, [sp, #20]
 800f048:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f114 <_svfiprintf_r+0x1fc>
 800f04c:	7821      	ldrb	r1, [r4, #0]
 800f04e:	2203      	movs	r2, #3
 800f050:	4650      	mov	r0, sl
 800f052:	f7f1 f8c5 	bl	80001e0 <memchr>
 800f056:	b140      	cbz	r0, 800f06a <_svfiprintf_r+0x152>
 800f058:	2340      	movs	r3, #64	; 0x40
 800f05a:	eba0 000a 	sub.w	r0, r0, sl
 800f05e:	fa03 f000 	lsl.w	r0, r3, r0
 800f062:	9b04      	ldr	r3, [sp, #16]
 800f064:	4303      	orrs	r3, r0
 800f066:	3401      	adds	r4, #1
 800f068:	9304      	str	r3, [sp, #16]
 800f06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f06e:	4826      	ldr	r0, [pc, #152]	; (800f108 <_svfiprintf_r+0x1f0>)
 800f070:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f074:	2206      	movs	r2, #6
 800f076:	f7f1 f8b3 	bl	80001e0 <memchr>
 800f07a:	2800      	cmp	r0, #0
 800f07c:	d038      	beq.n	800f0f0 <_svfiprintf_r+0x1d8>
 800f07e:	4b23      	ldr	r3, [pc, #140]	; (800f10c <_svfiprintf_r+0x1f4>)
 800f080:	bb1b      	cbnz	r3, 800f0ca <_svfiprintf_r+0x1b2>
 800f082:	9b03      	ldr	r3, [sp, #12]
 800f084:	3307      	adds	r3, #7
 800f086:	f023 0307 	bic.w	r3, r3, #7
 800f08a:	3308      	adds	r3, #8
 800f08c:	9303      	str	r3, [sp, #12]
 800f08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f090:	4433      	add	r3, r6
 800f092:	9309      	str	r3, [sp, #36]	; 0x24
 800f094:	e767      	b.n	800ef66 <_svfiprintf_r+0x4e>
 800f096:	fb0c 3202 	mla	r2, ip, r2, r3
 800f09a:	460c      	mov	r4, r1
 800f09c:	2001      	movs	r0, #1
 800f09e:	e7a5      	b.n	800efec <_svfiprintf_r+0xd4>
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	3401      	adds	r4, #1
 800f0a4:	9305      	str	r3, [sp, #20]
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	f04f 0c0a 	mov.w	ip, #10
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0b2:	3a30      	subs	r2, #48	; 0x30
 800f0b4:	2a09      	cmp	r2, #9
 800f0b6:	d903      	bls.n	800f0c0 <_svfiprintf_r+0x1a8>
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d0c5      	beq.n	800f048 <_svfiprintf_r+0x130>
 800f0bc:	9105      	str	r1, [sp, #20]
 800f0be:	e7c3      	b.n	800f048 <_svfiprintf_r+0x130>
 800f0c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0c4:	4604      	mov	r4, r0
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	e7f0      	b.n	800f0ac <_svfiprintf_r+0x194>
 800f0ca:	ab03      	add	r3, sp, #12
 800f0cc:	9300      	str	r3, [sp, #0]
 800f0ce:	462a      	mov	r2, r5
 800f0d0:	4b0f      	ldr	r3, [pc, #60]	; (800f110 <_svfiprintf_r+0x1f8>)
 800f0d2:	a904      	add	r1, sp, #16
 800f0d4:	4638      	mov	r0, r7
 800f0d6:	f7fb ff9f 	bl	800b018 <_printf_float>
 800f0da:	1c42      	adds	r2, r0, #1
 800f0dc:	4606      	mov	r6, r0
 800f0de:	d1d6      	bne.n	800f08e <_svfiprintf_r+0x176>
 800f0e0:	89ab      	ldrh	r3, [r5, #12]
 800f0e2:	065b      	lsls	r3, r3, #25
 800f0e4:	f53f af2c 	bmi.w	800ef40 <_svfiprintf_r+0x28>
 800f0e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0ea:	b01d      	add	sp, #116	; 0x74
 800f0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f0:	ab03      	add	r3, sp, #12
 800f0f2:	9300      	str	r3, [sp, #0]
 800f0f4:	462a      	mov	r2, r5
 800f0f6:	4b06      	ldr	r3, [pc, #24]	; (800f110 <_svfiprintf_r+0x1f8>)
 800f0f8:	a904      	add	r1, sp, #16
 800f0fa:	4638      	mov	r0, r7
 800f0fc:	f7fc fa30 	bl	800b560 <_printf_i>
 800f100:	e7eb      	b.n	800f0da <_svfiprintf_r+0x1c2>
 800f102:	bf00      	nop
 800f104:	0800fbac 	.word	0x0800fbac
 800f108:	0800fbb6 	.word	0x0800fbb6
 800f10c:	0800b019 	.word	0x0800b019
 800f110:	0800ee61 	.word	0x0800ee61
 800f114:	0800fbb2 	.word	0x0800fbb2

0800f118 <__sfputc_r>:
 800f118:	6893      	ldr	r3, [r2, #8]
 800f11a:	3b01      	subs	r3, #1
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	b410      	push	{r4}
 800f120:	6093      	str	r3, [r2, #8]
 800f122:	da08      	bge.n	800f136 <__sfputc_r+0x1e>
 800f124:	6994      	ldr	r4, [r2, #24]
 800f126:	42a3      	cmp	r3, r4
 800f128:	db01      	blt.n	800f12e <__sfputc_r+0x16>
 800f12a:	290a      	cmp	r1, #10
 800f12c:	d103      	bne.n	800f136 <__sfputc_r+0x1e>
 800f12e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f132:	f7fd bd11 	b.w	800cb58 <__swbuf_r>
 800f136:	6813      	ldr	r3, [r2, #0]
 800f138:	1c58      	adds	r0, r3, #1
 800f13a:	6010      	str	r0, [r2, #0]
 800f13c:	7019      	strb	r1, [r3, #0]
 800f13e:	4608      	mov	r0, r1
 800f140:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f144:	4770      	bx	lr

0800f146 <__sfputs_r>:
 800f146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f148:	4606      	mov	r6, r0
 800f14a:	460f      	mov	r7, r1
 800f14c:	4614      	mov	r4, r2
 800f14e:	18d5      	adds	r5, r2, r3
 800f150:	42ac      	cmp	r4, r5
 800f152:	d101      	bne.n	800f158 <__sfputs_r+0x12>
 800f154:	2000      	movs	r0, #0
 800f156:	e007      	b.n	800f168 <__sfputs_r+0x22>
 800f158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f15c:	463a      	mov	r2, r7
 800f15e:	4630      	mov	r0, r6
 800f160:	f7ff ffda 	bl	800f118 <__sfputc_r>
 800f164:	1c43      	adds	r3, r0, #1
 800f166:	d1f3      	bne.n	800f150 <__sfputs_r+0xa>
 800f168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f16c <_vfiprintf_r>:
 800f16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f170:	460d      	mov	r5, r1
 800f172:	b09d      	sub	sp, #116	; 0x74
 800f174:	4614      	mov	r4, r2
 800f176:	4698      	mov	r8, r3
 800f178:	4606      	mov	r6, r0
 800f17a:	b118      	cbz	r0, 800f184 <_vfiprintf_r+0x18>
 800f17c:	6983      	ldr	r3, [r0, #24]
 800f17e:	b90b      	cbnz	r3, 800f184 <_vfiprintf_r+0x18>
 800f180:	f7fb fd3a 	bl	800abf8 <__sinit>
 800f184:	4b89      	ldr	r3, [pc, #548]	; (800f3ac <_vfiprintf_r+0x240>)
 800f186:	429d      	cmp	r5, r3
 800f188:	d11b      	bne.n	800f1c2 <_vfiprintf_r+0x56>
 800f18a:	6875      	ldr	r5, [r6, #4]
 800f18c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f18e:	07d9      	lsls	r1, r3, #31
 800f190:	d405      	bmi.n	800f19e <_vfiprintf_r+0x32>
 800f192:	89ab      	ldrh	r3, [r5, #12]
 800f194:	059a      	lsls	r2, r3, #22
 800f196:	d402      	bmi.n	800f19e <_vfiprintf_r+0x32>
 800f198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f19a:	f7fb fdf0 	bl	800ad7e <__retarget_lock_acquire_recursive>
 800f19e:	89ab      	ldrh	r3, [r5, #12]
 800f1a0:	071b      	lsls	r3, r3, #28
 800f1a2:	d501      	bpl.n	800f1a8 <_vfiprintf_r+0x3c>
 800f1a4:	692b      	ldr	r3, [r5, #16]
 800f1a6:	b9eb      	cbnz	r3, 800f1e4 <_vfiprintf_r+0x78>
 800f1a8:	4629      	mov	r1, r5
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	f7fd fd38 	bl	800cc20 <__swsetup_r>
 800f1b0:	b1c0      	cbz	r0, 800f1e4 <_vfiprintf_r+0x78>
 800f1b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1b4:	07dc      	lsls	r4, r3, #31
 800f1b6:	d50e      	bpl.n	800f1d6 <_vfiprintf_r+0x6a>
 800f1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1bc:	b01d      	add	sp, #116	; 0x74
 800f1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c2:	4b7b      	ldr	r3, [pc, #492]	; (800f3b0 <_vfiprintf_r+0x244>)
 800f1c4:	429d      	cmp	r5, r3
 800f1c6:	d101      	bne.n	800f1cc <_vfiprintf_r+0x60>
 800f1c8:	68b5      	ldr	r5, [r6, #8]
 800f1ca:	e7df      	b.n	800f18c <_vfiprintf_r+0x20>
 800f1cc:	4b79      	ldr	r3, [pc, #484]	; (800f3b4 <_vfiprintf_r+0x248>)
 800f1ce:	429d      	cmp	r5, r3
 800f1d0:	bf08      	it	eq
 800f1d2:	68f5      	ldreq	r5, [r6, #12]
 800f1d4:	e7da      	b.n	800f18c <_vfiprintf_r+0x20>
 800f1d6:	89ab      	ldrh	r3, [r5, #12]
 800f1d8:	0598      	lsls	r0, r3, #22
 800f1da:	d4ed      	bmi.n	800f1b8 <_vfiprintf_r+0x4c>
 800f1dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1de:	f7fb fdcf 	bl	800ad80 <__retarget_lock_release_recursive>
 800f1e2:	e7e9      	b.n	800f1b8 <_vfiprintf_r+0x4c>
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f1e8:	2320      	movs	r3, #32
 800f1ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1f2:	2330      	movs	r3, #48	; 0x30
 800f1f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f3b8 <_vfiprintf_r+0x24c>
 800f1f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1fc:	f04f 0901 	mov.w	r9, #1
 800f200:	4623      	mov	r3, r4
 800f202:	469a      	mov	sl, r3
 800f204:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f208:	b10a      	cbz	r2, 800f20e <_vfiprintf_r+0xa2>
 800f20a:	2a25      	cmp	r2, #37	; 0x25
 800f20c:	d1f9      	bne.n	800f202 <_vfiprintf_r+0x96>
 800f20e:	ebba 0b04 	subs.w	fp, sl, r4
 800f212:	d00b      	beq.n	800f22c <_vfiprintf_r+0xc0>
 800f214:	465b      	mov	r3, fp
 800f216:	4622      	mov	r2, r4
 800f218:	4629      	mov	r1, r5
 800f21a:	4630      	mov	r0, r6
 800f21c:	f7ff ff93 	bl	800f146 <__sfputs_r>
 800f220:	3001      	adds	r0, #1
 800f222:	f000 80aa 	beq.w	800f37a <_vfiprintf_r+0x20e>
 800f226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f228:	445a      	add	r2, fp
 800f22a:	9209      	str	r2, [sp, #36]	; 0x24
 800f22c:	f89a 3000 	ldrb.w	r3, [sl]
 800f230:	2b00      	cmp	r3, #0
 800f232:	f000 80a2 	beq.w	800f37a <_vfiprintf_r+0x20e>
 800f236:	2300      	movs	r3, #0
 800f238:	f04f 32ff 	mov.w	r2, #4294967295
 800f23c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f240:	f10a 0a01 	add.w	sl, sl, #1
 800f244:	9304      	str	r3, [sp, #16]
 800f246:	9307      	str	r3, [sp, #28]
 800f248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f24c:	931a      	str	r3, [sp, #104]	; 0x68
 800f24e:	4654      	mov	r4, sl
 800f250:	2205      	movs	r2, #5
 800f252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f256:	4858      	ldr	r0, [pc, #352]	; (800f3b8 <_vfiprintf_r+0x24c>)
 800f258:	f7f0 ffc2 	bl	80001e0 <memchr>
 800f25c:	9a04      	ldr	r2, [sp, #16]
 800f25e:	b9d8      	cbnz	r0, 800f298 <_vfiprintf_r+0x12c>
 800f260:	06d1      	lsls	r1, r2, #27
 800f262:	bf44      	itt	mi
 800f264:	2320      	movmi	r3, #32
 800f266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f26a:	0713      	lsls	r3, r2, #28
 800f26c:	bf44      	itt	mi
 800f26e:	232b      	movmi	r3, #43	; 0x2b
 800f270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f274:	f89a 3000 	ldrb.w	r3, [sl]
 800f278:	2b2a      	cmp	r3, #42	; 0x2a
 800f27a:	d015      	beq.n	800f2a8 <_vfiprintf_r+0x13c>
 800f27c:	9a07      	ldr	r2, [sp, #28]
 800f27e:	4654      	mov	r4, sl
 800f280:	2000      	movs	r0, #0
 800f282:	f04f 0c0a 	mov.w	ip, #10
 800f286:	4621      	mov	r1, r4
 800f288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f28c:	3b30      	subs	r3, #48	; 0x30
 800f28e:	2b09      	cmp	r3, #9
 800f290:	d94e      	bls.n	800f330 <_vfiprintf_r+0x1c4>
 800f292:	b1b0      	cbz	r0, 800f2c2 <_vfiprintf_r+0x156>
 800f294:	9207      	str	r2, [sp, #28]
 800f296:	e014      	b.n	800f2c2 <_vfiprintf_r+0x156>
 800f298:	eba0 0308 	sub.w	r3, r0, r8
 800f29c:	fa09 f303 	lsl.w	r3, r9, r3
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	9304      	str	r3, [sp, #16]
 800f2a4:	46a2      	mov	sl, r4
 800f2a6:	e7d2      	b.n	800f24e <_vfiprintf_r+0xe2>
 800f2a8:	9b03      	ldr	r3, [sp, #12]
 800f2aa:	1d19      	adds	r1, r3, #4
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	9103      	str	r1, [sp, #12]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	bfbb      	ittet	lt
 800f2b4:	425b      	neglt	r3, r3
 800f2b6:	f042 0202 	orrlt.w	r2, r2, #2
 800f2ba:	9307      	strge	r3, [sp, #28]
 800f2bc:	9307      	strlt	r3, [sp, #28]
 800f2be:	bfb8      	it	lt
 800f2c0:	9204      	strlt	r2, [sp, #16]
 800f2c2:	7823      	ldrb	r3, [r4, #0]
 800f2c4:	2b2e      	cmp	r3, #46	; 0x2e
 800f2c6:	d10c      	bne.n	800f2e2 <_vfiprintf_r+0x176>
 800f2c8:	7863      	ldrb	r3, [r4, #1]
 800f2ca:	2b2a      	cmp	r3, #42	; 0x2a
 800f2cc:	d135      	bne.n	800f33a <_vfiprintf_r+0x1ce>
 800f2ce:	9b03      	ldr	r3, [sp, #12]
 800f2d0:	1d1a      	adds	r2, r3, #4
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	9203      	str	r2, [sp, #12]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	bfb8      	it	lt
 800f2da:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2de:	3402      	adds	r4, #2
 800f2e0:	9305      	str	r3, [sp, #20]
 800f2e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f3c8 <_vfiprintf_r+0x25c>
 800f2e6:	7821      	ldrb	r1, [r4, #0]
 800f2e8:	2203      	movs	r2, #3
 800f2ea:	4650      	mov	r0, sl
 800f2ec:	f7f0 ff78 	bl	80001e0 <memchr>
 800f2f0:	b140      	cbz	r0, 800f304 <_vfiprintf_r+0x198>
 800f2f2:	2340      	movs	r3, #64	; 0x40
 800f2f4:	eba0 000a 	sub.w	r0, r0, sl
 800f2f8:	fa03 f000 	lsl.w	r0, r3, r0
 800f2fc:	9b04      	ldr	r3, [sp, #16]
 800f2fe:	4303      	orrs	r3, r0
 800f300:	3401      	adds	r4, #1
 800f302:	9304      	str	r3, [sp, #16]
 800f304:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f308:	482c      	ldr	r0, [pc, #176]	; (800f3bc <_vfiprintf_r+0x250>)
 800f30a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f30e:	2206      	movs	r2, #6
 800f310:	f7f0 ff66 	bl	80001e0 <memchr>
 800f314:	2800      	cmp	r0, #0
 800f316:	d03f      	beq.n	800f398 <_vfiprintf_r+0x22c>
 800f318:	4b29      	ldr	r3, [pc, #164]	; (800f3c0 <_vfiprintf_r+0x254>)
 800f31a:	bb1b      	cbnz	r3, 800f364 <_vfiprintf_r+0x1f8>
 800f31c:	9b03      	ldr	r3, [sp, #12]
 800f31e:	3307      	adds	r3, #7
 800f320:	f023 0307 	bic.w	r3, r3, #7
 800f324:	3308      	adds	r3, #8
 800f326:	9303      	str	r3, [sp, #12]
 800f328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f32a:	443b      	add	r3, r7
 800f32c:	9309      	str	r3, [sp, #36]	; 0x24
 800f32e:	e767      	b.n	800f200 <_vfiprintf_r+0x94>
 800f330:	fb0c 3202 	mla	r2, ip, r2, r3
 800f334:	460c      	mov	r4, r1
 800f336:	2001      	movs	r0, #1
 800f338:	e7a5      	b.n	800f286 <_vfiprintf_r+0x11a>
 800f33a:	2300      	movs	r3, #0
 800f33c:	3401      	adds	r4, #1
 800f33e:	9305      	str	r3, [sp, #20]
 800f340:	4619      	mov	r1, r3
 800f342:	f04f 0c0a 	mov.w	ip, #10
 800f346:	4620      	mov	r0, r4
 800f348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f34c:	3a30      	subs	r2, #48	; 0x30
 800f34e:	2a09      	cmp	r2, #9
 800f350:	d903      	bls.n	800f35a <_vfiprintf_r+0x1ee>
 800f352:	2b00      	cmp	r3, #0
 800f354:	d0c5      	beq.n	800f2e2 <_vfiprintf_r+0x176>
 800f356:	9105      	str	r1, [sp, #20]
 800f358:	e7c3      	b.n	800f2e2 <_vfiprintf_r+0x176>
 800f35a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f35e:	4604      	mov	r4, r0
 800f360:	2301      	movs	r3, #1
 800f362:	e7f0      	b.n	800f346 <_vfiprintf_r+0x1da>
 800f364:	ab03      	add	r3, sp, #12
 800f366:	9300      	str	r3, [sp, #0]
 800f368:	462a      	mov	r2, r5
 800f36a:	4b16      	ldr	r3, [pc, #88]	; (800f3c4 <_vfiprintf_r+0x258>)
 800f36c:	a904      	add	r1, sp, #16
 800f36e:	4630      	mov	r0, r6
 800f370:	f7fb fe52 	bl	800b018 <_printf_float>
 800f374:	4607      	mov	r7, r0
 800f376:	1c78      	adds	r0, r7, #1
 800f378:	d1d6      	bne.n	800f328 <_vfiprintf_r+0x1bc>
 800f37a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f37c:	07d9      	lsls	r1, r3, #31
 800f37e:	d405      	bmi.n	800f38c <_vfiprintf_r+0x220>
 800f380:	89ab      	ldrh	r3, [r5, #12]
 800f382:	059a      	lsls	r2, r3, #22
 800f384:	d402      	bmi.n	800f38c <_vfiprintf_r+0x220>
 800f386:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f388:	f7fb fcfa 	bl	800ad80 <__retarget_lock_release_recursive>
 800f38c:	89ab      	ldrh	r3, [r5, #12]
 800f38e:	065b      	lsls	r3, r3, #25
 800f390:	f53f af12 	bmi.w	800f1b8 <_vfiprintf_r+0x4c>
 800f394:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f396:	e711      	b.n	800f1bc <_vfiprintf_r+0x50>
 800f398:	ab03      	add	r3, sp, #12
 800f39a:	9300      	str	r3, [sp, #0]
 800f39c:	462a      	mov	r2, r5
 800f39e:	4b09      	ldr	r3, [pc, #36]	; (800f3c4 <_vfiprintf_r+0x258>)
 800f3a0:	a904      	add	r1, sp, #16
 800f3a2:	4630      	mov	r0, r6
 800f3a4:	f7fc f8dc 	bl	800b560 <_printf_i>
 800f3a8:	e7e4      	b.n	800f374 <_vfiprintf_r+0x208>
 800f3aa:	bf00      	nop
 800f3ac:	0800f734 	.word	0x0800f734
 800f3b0:	0800f754 	.word	0x0800f754
 800f3b4:	0800f714 	.word	0x0800f714
 800f3b8:	0800fbac 	.word	0x0800fbac
 800f3bc:	0800fbb6 	.word	0x0800fbb6
 800f3c0:	0800b019 	.word	0x0800b019
 800f3c4:	0800f147 	.word	0x0800f147
 800f3c8:	0800fbb2 	.word	0x0800fbb2

0800f3cc <_read_r>:
 800f3cc:	b538      	push	{r3, r4, r5, lr}
 800f3ce:	4d07      	ldr	r5, [pc, #28]	; (800f3ec <_read_r+0x20>)
 800f3d0:	4604      	mov	r4, r0
 800f3d2:	4608      	mov	r0, r1
 800f3d4:	4611      	mov	r1, r2
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	602a      	str	r2, [r5, #0]
 800f3da:	461a      	mov	r2, r3
 800f3dc:	f7f2 f8c4 	bl	8001568 <_read>
 800f3e0:	1c43      	adds	r3, r0, #1
 800f3e2:	d102      	bne.n	800f3ea <_read_r+0x1e>
 800f3e4:	682b      	ldr	r3, [r5, #0]
 800f3e6:	b103      	cbz	r3, 800f3ea <_read_r+0x1e>
 800f3e8:	6023      	str	r3, [r4, #0]
 800f3ea:	bd38      	pop	{r3, r4, r5, pc}
 800f3ec:	20008420 	.word	0x20008420

0800f3f0 <nan>:
 800f3f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f3f8 <nan+0x8>
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	00000000 	.word	0x00000000
 800f3fc:	7ff80000 	.word	0x7ff80000

0800f400 <strncmp>:
 800f400:	b510      	push	{r4, lr}
 800f402:	b17a      	cbz	r2, 800f424 <strncmp+0x24>
 800f404:	4603      	mov	r3, r0
 800f406:	3901      	subs	r1, #1
 800f408:	1884      	adds	r4, r0, r2
 800f40a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f40e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f412:	4290      	cmp	r0, r2
 800f414:	d101      	bne.n	800f41a <strncmp+0x1a>
 800f416:	42a3      	cmp	r3, r4
 800f418:	d101      	bne.n	800f41e <strncmp+0x1e>
 800f41a:	1a80      	subs	r0, r0, r2
 800f41c:	bd10      	pop	{r4, pc}
 800f41e:	2800      	cmp	r0, #0
 800f420:	d1f3      	bne.n	800f40a <strncmp+0xa>
 800f422:	e7fa      	b.n	800f41a <strncmp+0x1a>
 800f424:	4610      	mov	r0, r2
 800f426:	e7f9      	b.n	800f41c <strncmp+0x1c>

0800f428 <__ascii_wctomb>:
 800f428:	b149      	cbz	r1, 800f43e <__ascii_wctomb+0x16>
 800f42a:	2aff      	cmp	r2, #255	; 0xff
 800f42c:	bf85      	ittet	hi
 800f42e:	238a      	movhi	r3, #138	; 0x8a
 800f430:	6003      	strhi	r3, [r0, #0]
 800f432:	700a      	strbls	r2, [r1, #0]
 800f434:	f04f 30ff 	movhi.w	r0, #4294967295
 800f438:	bf98      	it	ls
 800f43a:	2001      	movls	r0, #1
 800f43c:	4770      	bx	lr
 800f43e:	4608      	mov	r0, r1
 800f440:	4770      	bx	lr

0800f442 <abort>:
 800f442:	b508      	push	{r3, lr}
 800f444:	2006      	movs	r0, #6
 800f446:	f000 f897 	bl	800f578 <raise>
 800f44a:	2001      	movs	r0, #1
 800f44c:	f7f2 f882 	bl	8001554 <_exit>

0800f450 <_fstat_r>:
 800f450:	b538      	push	{r3, r4, r5, lr}
 800f452:	4d07      	ldr	r5, [pc, #28]	; (800f470 <_fstat_r+0x20>)
 800f454:	2300      	movs	r3, #0
 800f456:	4604      	mov	r4, r0
 800f458:	4608      	mov	r0, r1
 800f45a:	4611      	mov	r1, r2
 800f45c:	602b      	str	r3, [r5, #0]
 800f45e:	f7f2 f8c8 	bl	80015f2 <_fstat>
 800f462:	1c43      	adds	r3, r0, #1
 800f464:	d102      	bne.n	800f46c <_fstat_r+0x1c>
 800f466:	682b      	ldr	r3, [r5, #0]
 800f468:	b103      	cbz	r3, 800f46c <_fstat_r+0x1c>
 800f46a:	6023      	str	r3, [r4, #0]
 800f46c:	bd38      	pop	{r3, r4, r5, pc}
 800f46e:	bf00      	nop
 800f470:	20008420 	.word	0x20008420

0800f474 <_isatty_r>:
 800f474:	b538      	push	{r3, r4, r5, lr}
 800f476:	4d06      	ldr	r5, [pc, #24]	; (800f490 <_isatty_r+0x1c>)
 800f478:	2300      	movs	r3, #0
 800f47a:	4604      	mov	r4, r0
 800f47c:	4608      	mov	r0, r1
 800f47e:	602b      	str	r3, [r5, #0]
 800f480:	f7f2 f8c7 	bl	8001612 <_isatty>
 800f484:	1c43      	adds	r3, r0, #1
 800f486:	d102      	bne.n	800f48e <_isatty_r+0x1a>
 800f488:	682b      	ldr	r3, [r5, #0]
 800f48a:	b103      	cbz	r3, 800f48e <_isatty_r+0x1a>
 800f48c:	6023      	str	r3, [r4, #0]
 800f48e:	bd38      	pop	{r3, r4, r5, pc}
 800f490:	20008420 	.word	0x20008420

0800f494 <memmove>:
 800f494:	4288      	cmp	r0, r1
 800f496:	b510      	push	{r4, lr}
 800f498:	eb01 0402 	add.w	r4, r1, r2
 800f49c:	d902      	bls.n	800f4a4 <memmove+0x10>
 800f49e:	4284      	cmp	r4, r0
 800f4a0:	4623      	mov	r3, r4
 800f4a2:	d807      	bhi.n	800f4b4 <memmove+0x20>
 800f4a4:	1e43      	subs	r3, r0, #1
 800f4a6:	42a1      	cmp	r1, r4
 800f4a8:	d008      	beq.n	800f4bc <memmove+0x28>
 800f4aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4b2:	e7f8      	b.n	800f4a6 <memmove+0x12>
 800f4b4:	4402      	add	r2, r0
 800f4b6:	4601      	mov	r1, r0
 800f4b8:	428a      	cmp	r2, r1
 800f4ba:	d100      	bne.n	800f4be <memmove+0x2a>
 800f4bc:	bd10      	pop	{r4, pc}
 800f4be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f4c6:	e7f7      	b.n	800f4b8 <memmove+0x24>

0800f4c8 <_realloc_r>:
 800f4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4cc:	4680      	mov	r8, r0
 800f4ce:	4614      	mov	r4, r2
 800f4d0:	460e      	mov	r6, r1
 800f4d2:	b921      	cbnz	r1, 800f4de <_realloc_r+0x16>
 800f4d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d8:	4611      	mov	r1, r2
 800f4da:	f7fb bc89 	b.w	800adf0 <_malloc_r>
 800f4de:	b92a      	cbnz	r2, 800f4ec <_realloc_r+0x24>
 800f4e0:	f7ff fc72 	bl	800edc8 <_free_r>
 800f4e4:	4625      	mov	r5, r4
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ec:	f000 f860 	bl	800f5b0 <_malloc_usable_size_r>
 800f4f0:	4284      	cmp	r4, r0
 800f4f2:	4607      	mov	r7, r0
 800f4f4:	d802      	bhi.n	800f4fc <_realloc_r+0x34>
 800f4f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f4fa:	d812      	bhi.n	800f522 <_realloc_r+0x5a>
 800f4fc:	4621      	mov	r1, r4
 800f4fe:	4640      	mov	r0, r8
 800f500:	f7fb fc76 	bl	800adf0 <_malloc_r>
 800f504:	4605      	mov	r5, r0
 800f506:	2800      	cmp	r0, #0
 800f508:	d0ed      	beq.n	800f4e6 <_realloc_r+0x1e>
 800f50a:	42bc      	cmp	r4, r7
 800f50c:	4622      	mov	r2, r4
 800f50e:	4631      	mov	r1, r6
 800f510:	bf28      	it	cs
 800f512:	463a      	movcs	r2, r7
 800f514:	f7fb fc35 	bl	800ad82 <memcpy>
 800f518:	4631      	mov	r1, r6
 800f51a:	4640      	mov	r0, r8
 800f51c:	f7ff fc54 	bl	800edc8 <_free_r>
 800f520:	e7e1      	b.n	800f4e6 <_realloc_r+0x1e>
 800f522:	4635      	mov	r5, r6
 800f524:	e7df      	b.n	800f4e6 <_realloc_r+0x1e>

0800f526 <_raise_r>:
 800f526:	291f      	cmp	r1, #31
 800f528:	b538      	push	{r3, r4, r5, lr}
 800f52a:	4604      	mov	r4, r0
 800f52c:	460d      	mov	r5, r1
 800f52e:	d904      	bls.n	800f53a <_raise_r+0x14>
 800f530:	2316      	movs	r3, #22
 800f532:	6003      	str	r3, [r0, #0]
 800f534:	f04f 30ff 	mov.w	r0, #4294967295
 800f538:	bd38      	pop	{r3, r4, r5, pc}
 800f53a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f53c:	b112      	cbz	r2, 800f544 <_raise_r+0x1e>
 800f53e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f542:	b94b      	cbnz	r3, 800f558 <_raise_r+0x32>
 800f544:	4620      	mov	r0, r4
 800f546:	f000 f831 	bl	800f5ac <_getpid_r>
 800f54a:	462a      	mov	r2, r5
 800f54c:	4601      	mov	r1, r0
 800f54e:	4620      	mov	r0, r4
 800f550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f554:	f000 b818 	b.w	800f588 <_kill_r>
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d00a      	beq.n	800f572 <_raise_r+0x4c>
 800f55c:	1c59      	adds	r1, r3, #1
 800f55e:	d103      	bne.n	800f568 <_raise_r+0x42>
 800f560:	2316      	movs	r3, #22
 800f562:	6003      	str	r3, [r0, #0]
 800f564:	2001      	movs	r0, #1
 800f566:	e7e7      	b.n	800f538 <_raise_r+0x12>
 800f568:	2400      	movs	r4, #0
 800f56a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f56e:	4628      	mov	r0, r5
 800f570:	4798      	blx	r3
 800f572:	2000      	movs	r0, #0
 800f574:	e7e0      	b.n	800f538 <_raise_r+0x12>
	...

0800f578 <raise>:
 800f578:	4b02      	ldr	r3, [pc, #8]	; (800f584 <raise+0xc>)
 800f57a:	4601      	mov	r1, r0
 800f57c:	6818      	ldr	r0, [r3, #0]
 800f57e:	f7ff bfd2 	b.w	800f526 <_raise_r>
 800f582:	bf00      	nop
 800f584:	20000078 	.word	0x20000078

0800f588 <_kill_r>:
 800f588:	b538      	push	{r3, r4, r5, lr}
 800f58a:	4d07      	ldr	r5, [pc, #28]	; (800f5a8 <_kill_r+0x20>)
 800f58c:	2300      	movs	r3, #0
 800f58e:	4604      	mov	r4, r0
 800f590:	4608      	mov	r0, r1
 800f592:	4611      	mov	r1, r2
 800f594:	602b      	str	r3, [r5, #0]
 800f596:	f7f1 ffcd 	bl	8001534 <_kill>
 800f59a:	1c43      	adds	r3, r0, #1
 800f59c:	d102      	bne.n	800f5a4 <_kill_r+0x1c>
 800f59e:	682b      	ldr	r3, [r5, #0]
 800f5a0:	b103      	cbz	r3, 800f5a4 <_kill_r+0x1c>
 800f5a2:	6023      	str	r3, [r4, #0]
 800f5a4:	bd38      	pop	{r3, r4, r5, pc}
 800f5a6:	bf00      	nop
 800f5a8:	20008420 	.word	0x20008420

0800f5ac <_getpid_r>:
 800f5ac:	f7f1 bfba 	b.w	8001524 <_getpid>

0800f5b0 <_malloc_usable_size_r>:
 800f5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5b4:	1f18      	subs	r0, r3, #4
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	bfbc      	itt	lt
 800f5ba:	580b      	ldrlt	r3, [r1, r0]
 800f5bc:	18c0      	addlt	r0, r0, r3
 800f5be:	4770      	bx	lr

0800f5c0 <_init>:
 800f5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c2:	bf00      	nop
 800f5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5c6:	bc08      	pop	{r3}
 800f5c8:	469e      	mov	lr, r3
 800f5ca:	4770      	bx	lr

0800f5cc <_fini>:
 800f5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ce:	bf00      	nop
 800f5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5d2:	bc08      	pop	{r3}
 800f5d4:	469e      	mov	lr, r3
 800f5d6:	4770      	bx	lr
