
assignment2_mx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800dcf0  0800dcf0  0001dcf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e290  0800e290  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800e290  0800e290  0001e290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e298  0800e298  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e298  0800e298  0001e298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e29c  0800e29c  0001e29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800e2a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008158  20000218  0800e4b8  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00004200  20008370  0800e4b8  00028370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000231b1  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e50  00000000  00000000  000433f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  00048250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ac8  00000000  00000000  00049f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d3d2  00000000  00000000  0004ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002541b  00000000  00000000  00078dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104899  00000000  00000000  0009e215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a2aae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c78  00000000  00000000  001a2b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dcd8 	.word	0x0800dcd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	0800dcd8 	.word	0x0800dcd8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_DMA_Init+0x48>)
 8001000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <MX_DMA_Init+0x48>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6493      	str	r3, [r2, #72]	; 0x48
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <MX_DMA_Init+0x48>)
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2105      	movs	r1, #5
 800101a:	200e      	movs	r0, #14
 800101c:	f001 f96e 	bl	80022fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001020:	200e      	movs	r0, #14
 8001022:	f001 f987 	bl	8002334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2105      	movs	r1, #5
 800102a:	200f      	movs	r0, #15
 800102c:	f001 f966 	bl	80022fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001030:	200f      	movs	r0, #15
 8001032:	f001 f97f 	bl	8002334 <HAL_NVIC_EnableIRQ>

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4a07      	ldr	r2, [pc, #28]	; (8001088 <vApplicationGetIdleTaskMemory+0x2c>)
 800106c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <vApplicationGetIdleTaskMemory+0x30>)
 8001072:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000250 	.word	0x20000250
 800108c:	20000304 	.word	0x20000304

08001090 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4a07      	ldr	r2, [pc, #28]	; (80010bc <vApplicationGetTimerTaskMemory+0x2c>)
 80010a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <vApplicationGetTimerTaskMemory+0x30>)
 80010a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20000504 	.word	0x20000504
 80010c0:	200005b8 	.word	0x200005b8

080010c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af02      	add	r7, sp, #8
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	UART1_queue = xQueueCreate(5,sizeof(queue_UART_msg_t*));
 80010ca:	2200      	movs	r2, #0
 80010cc:	2104      	movs	r1, #4
 80010ce:	2005      	movs	r0, #5
 80010d0:	f005 fd44 	bl	8006b5c <xQueueGenericCreate>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a2a      	ldr	r2, [pc, #168]	; (8001180 <MX_FREERTOS_Init+0xbc>)
 80010d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 512);
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <MX_FREERTOS_Init+0xc0>)
 80010dc:	463c      	mov	r4, r7
 80010de:	461d      	mov	r5, r3
 80010e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010ec:	463b      	mov	r3, r7
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f005 fb3f 	bl	8006774 <osThreadCreate>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a23      	ldr	r2, [pc, #140]	; (8001188 <MX_FREERTOS_Init+0xc4>)
 80010fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  BaseType_t status =0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
//	if (UART1_queue != NULL){
		//error somehow? lol
	  status = xTaskCreate(lis_task, "lis_task", 512, (void*)1,
 8001100:	4b22      	ldr	r3, [pc, #136]	; (800118c <MX_FREERTOS_Init+0xc8>)
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	2305      	movs	r3, #5
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110e:	4920      	ldr	r1, [pc, #128]	; (8001190 <MX_FREERTOS_Init+0xcc>)
 8001110:	4820      	ldr	r0, [pc, #128]	; (8001194 <MX_FREERTOS_Init+0xd0>)
 8001112:	f006 f9c2 	bl	800749a <xTaskCreate>
 8001116:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &lis_task_handle);
	  status = xTaskCreate(uart1_task, "uart_task", 512, (void*)1,
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <MX_FREERTOS_Init+0xd4>)
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	2305      	movs	r3, #5
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001126:	491d      	ldr	r1, [pc, #116]	; (800119c <MX_FREERTOS_Init+0xd8>)
 8001128:	481d      	ldr	r0, [pc, #116]	; (80011a0 <MX_FREERTOS_Init+0xdc>)
 800112a:	f006 f9b6 	bl	800749a <xTaskCreate>
 800112e:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &uart1_task_handle);
	  status = xTaskCreate(lps_task, "lps_task", 512, (void*)1,
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_FREERTOS_Init+0xe0>)
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	2305      	movs	r3, #5
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800113e:	491a      	ldr	r1, [pc, #104]	; (80011a8 <MX_FREERTOS_Init+0xe4>)
 8001140:	481a      	ldr	r0, [pc, #104]	; (80011ac <MX_FREERTOS_Init+0xe8>)
 8001142:	f006 f9aa 	bl	800749a <xTaskCreate>
 8001146:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &lps_task_handle);
	  status = xTaskCreate(hts_task, "hts_task", 512, (void*)1,
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <MX_FREERTOS_Init+0xec>)
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	2305      	movs	r3, #5
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001156:	4917      	ldr	r1, [pc, #92]	; (80011b4 <MX_FREERTOS_Init+0xf0>)
 8001158:	4817      	ldr	r0, [pc, #92]	; (80011b8 <MX_FREERTOS_Init+0xf4>)
 800115a:	f006 f99e 	bl	800749a <xTaskCreate>
 800115e:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &hts_task_handle);
	  status = xTaskCreate(lsm_task, "lsm_task", 512, (void*)1,
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <MX_FREERTOS_Init+0xf8>)
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	2305      	movs	r3, #5
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2301      	movs	r3, #1
 800116a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116e:	4914      	ldr	r1, [pc, #80]	; (80011c0 <MX_FREERTOS_Init+0xfc>)
 8001170:	4814      	ldr	r0, [pc, #80]	; (80011c4 <MX_FREERTOS_Init+0x100>)
 8001172:	f006 f992 	bl	800749a <xTaskCreate>
 8001176:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &lsm_task_handle);
//	}
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001178:	bf00      	nop
 800117a:	3720      	adds	r7, #32
 800117c:	46bd      	mov	sp, r7
 800117e:	bdb0      	pop	{r4, r5, r7, pc}
 8001180:	20000248 	.word	0x20000248
 8001184:	0800dd38 	.word	0x0800dd38
 8001188:	2000024c 	.word	0x2000024c
 800118c:	20000238 	.word	0x20000238
 8001190:	0800dcfc 	.word	0x0800dcfc
 8001194:	08001901 	.word	0x08001901
 8001198:	20000234 	.word	0x20000234
 800119c:	0800dd08 	.word	0x0800dd08
 80011a0:	08001b3d 	.word	0x08001b3d
 80011a4:	2000023c 	.word	0x2000023c
 80011a8:	0800dd14 	.word	0x0800dd14
 80011ac:	08001945 	.word	0x08001945
 80011b0:	20000244 	.word	0x20000244
 80011b4:	0800dd20 	.word	0x0800dd20
 80011b8:	080018e3 	.word	0x080018e3
 80011bc:	20000240 	.word	0x20000240
 80011c0:	0800dd2c 	.word	0x0800dd2c
 80011c4:	08001969 	.word	0x08001969

080011c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f005 fb1b 	bl	800680c <osDelay>
 80011d6:	e7fb      	b.n	80011d0 <StartDefaultTask+0x8>

080011d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_GPIO_Init+0x68>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a13      	ldr	r2, [pc, #76]	; (8001240 <MX_GPIO_Init+0x68>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_GPIO_Init+0x68>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_GPIO_Init+0x68>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <MX_GPIO_Init+0x68>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_GPIO_Init+0x68>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 800121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001228:	2301      	movs	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	4619      	mov	r1, r3
 8001232:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_GPIO_Init+0x6c>)
 8001234:	f001 fb02 	bl	800283c <HAL_GPIO_Init>

}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000
 8001244:	48000800 	.word	0x48000800

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124c:	f000 ff66 	bl	800211c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001250:	f000 f80b 	bl	800126a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001254:	f7ff ffc0 	bl	80011d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001258:	f7ff fece 	bl	8000ff8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800125c:	f000 fa1a 	bl	8001694 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001260:	f7ff ff30 	bl	80010c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001264:	f005 fa7f 	bl	8006766 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001268:	e7fe      	b.n	8001268 <main+0x20>

0800126a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b096      	sub	sp, #88	; 0x58
 800126e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2244      	movs	r2, #68	; 0x44
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f008 f950 	bl	800951e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127e:	463b      	mov	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800128c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001290:	f002 fa7e 	bl	8003790 <HAL_PWREx_ControlVoltageScaling>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800129a:	f000 f83d 	bl	8001318 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800129e:	2302      	movs	r3, #2
 80012a0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a8:	2310      	movs	r3, #16
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4618      	mov	r0, r3
 80012b6:	f002 fac1 	bl	800383c <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80012c0:	f000 f82a 	bl	8001318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012c8:	2301      	movs	r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 fe89 	bl	8003ff4 <HAL_RCC_ClockConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012e8:	f000 f816 	bl	8001318 <Error_Handler>
  }
}
 80012ec:	bf00      	nop
 80012ee:	3758      	adds	r7, #88	; 0x58
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001306:	f000 ff21 	bl	800214c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40001000 	.word	0x40001000

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>
	...

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_MspInit+0x4c>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132e:	4a10      	ldr	r2, [pc, #64]	; (8001370 <HAL_MspInit+0x4c>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6613      	str	r3, [r2, #96]	; 0x60
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_MspInit+0x4c>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_MspInit+0x4c>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <HAL_MspInit+0x4c>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6593      	str	r3, [r2, #88]	; 0x58
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_MspInit+0x4c>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	210f      	movs	r1, #15
 800135e:	f06f 0001 	mvn.w	r0, #1
 8001362:	f000 ffcb 	bl	80022fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000

08001374 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08e      	sub	sp, #56	; 0x38
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <HAL_InitTick+0xe0>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	4a33      	ldr	r2, [pc, #204]	; (8001454 <HAL_InitTick+0xe0>)
 8001388:	f043 0310 	orr.w	r3, r3, #16
 800138c:	6593      	str	r3, [r2, #88]	; 0x58
 800138e:	4b31      	ldr	r3, [pc, #196]	; (8001454 <HAL_InitTick+0xe0>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800139a:	f107 0210 	add.w	r2, r7, #16
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 ffe9 	bl	800437c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d103      	bne.n	80013bc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013b4:	f002 ffb6 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 80013b8:	6378      	str	r0, [r7, #52]	; 0x34
 80013ba:	e004      	b.n	80013c6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013bc:	f002 ffb2 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 80013c0:	4603      	mov	r3, r0
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c8:	4a23      	ldr	r2, [pc, #140]	; (8001458 <HAL_InitTick+0xe4>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0c9b      	lsrs	r3, r3, #18
 80013d0:	3b01      	subs	r3, #1
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <HAL_InitTick+0xe8>)
 80013d6:	4a22      	ldr	r2, [pc, #136]	; (8001460 <HAL_InitTick+0xec>)
 80013d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <HAL_InitTick+0xe8>)
 80013dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013e2:	4a1e      	ldr	r2, [pc, #120]	; (800145c <HAL_InitTick+0xe8>)
 80013e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_InitTick+0xe8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_InitTick+0xe8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_InitTick+0xe8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013fa:	4818      	ldr	r0, [pc, #96]	; (800145c <HAL_InitTick+0xe8>)
 80013fc:	f003 fd0c 	bl	8004e18 <HAL_TIM_Base_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001406:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800140a:	2b00      	cmp	r3, #0
 800140c:	d11b      	bne.n	8001446 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800140e:	4813      	ldr	r0, [pc, #76]	; (800145c <HAL_InitTick+0xe8>)
 8001410:	f003 fd64 	bl	8004edc <HAL_TIM_Base_Start_IT>
 8001414:	4603      	mov	r3, r0
 8001416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800141a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800141e:	2b00      	cmp	r3, #0
 8001420:	d111      	bne.n	8001446 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001422:	2036      	movs	r0, #54	; 0x36
 8001424:	f000 ff86 	bl	8002334 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b0f      	cmp	r3, #15
 800142c:	d808      	bhi.n	8001440 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800142e:	2200      	movs	r2, #0
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	2036      	movs	r0, #54	; 0x36
 8001434:	f000 ff62 	bl	80022fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_InitTick+0xf0>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e002      	b.n	8001446 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001446:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800144a:	4618      	mov	r0, r3
 800144c:	3738      	adds	r7, #56	; 0x38
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	431bde83 	.word	0x431bde83
 800145c:	200009b8 	.word	0x200009b8
 8001460:	40001000 	.word	0x40001000
 8001464:	20000038 	.word	0x20000038

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <MemManage_Handler+0x4>

0800147a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <UsageFault_Handler+0x4>

08001486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <DMA1_Channel4_IRQHandler+0x10>)
 800149a:	f001 f8f0 	bl	800267e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000ad4 	.word	0x20000ad4

080014a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <DMA1_Channel5_IRQHandler+0x10>)
 80014ae:	f001 f8e6 	bl	800267e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000a8c 	.word	0x20000a8c

080014bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <USART1_IRQHandler+0x10>)
 80014c2:	f004 f859 	bl	8005578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000a08 	.word	0x20000a08

080014d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <TIM6_DAC_IRQHandler+0x10>)
 80014d6:	f003 fd71 	bl	8004fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200009b8 	.word	0x200009b8

080014e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return 1;
 80014e8:	2301      	movs	r3, #1
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_kill>:

int _kill(int pid, int sig)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014fe:	f007 fedd 	bl	80092bc <__errno>
 8001502:	4603      	mov	r3, r0
 8001504:	2216      	movs	r2, #22
 8001506:	601a      	str	r2, [r3, #0]
  return -1;
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_exit>:

void _exit (int status)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ffe7 	bl	80014f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001526:	e7fe      	b.n	8001526 <_exit+0x12>

08001528 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e00a      	b.n	8001550 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800153a:	f3af 8000 	nop.w
 800153e:	4601      	mov	r1, r0
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60ba      	str	r2, [r7, #8]
 8001546:	b2ca      	uxtb	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf0      	blt.n	800153a <_read+0x12>
  }

  return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e009      	b.n	8001588 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	60ba      	str	r2, [r7, #8]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	dbf1      	blt.n	8001574 <_write+0x12>
  }
  return len;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_close>:

int _close(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c2:	605a      	str	r2, [r3, #4]
  return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_isatty>:

int _isatty(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f007 fe42 	bl	80092bc <__errno>
 8001638:	4603      	mov	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20018000 	.word	0x20018000
 8001664:	00003000 	.word	0x00003000
 8001668:	20000a04 	.word	0x20000a04
 800166c:	20008370 	.word	0x20008370

08001670 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <SystemInit+0x20>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <SystemInit+0x20>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_USART1_UART_Init+0x58>)
 800169a:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <MX_USART1_UART_Init+0x5c>)
 800169c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_USART1_UART_Init+0x58>)
 80016d8:	f003 fe70 	bl	80053bc <HAL_UART_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016e2:	f7ff fe19 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000a08 	.word	0x20000a08
 80016f0:	40013800 	.word	0x40013800

080016f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b0ac      	sub	sp, #176	; 0xb0
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2288      	movs	r2, #136	; 0x88
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f007 ff02 	bl	800951e <memset>
  if(uartHandle->Instance==USART1)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a4e      	ldr	r2, [pc, #312]	; (8001858 <HAL_UART_MspInit+0x164>)
 8001720:	4293      	cmp	r3, r2
 8001722:	f040 8095 	bne.w	8001850 <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001726:	2301      	movs	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800172a:	2300      	movs	r3, #0
 800172c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4618      	mov	r0, r3
 8001734:	f002 feb4 	bl	80044a0 <HAL_RCCEx_PeriphCLKConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800173e:	f7ff fdeb 	bl	8001318 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001742:	4b46      	ldr	r3, [pc, #280]	; (800185c <HAL_UART_MspInit+0x168>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	4a45      	ldr	r2, [pc, #276]	; (800185c <HAL_UART_MspInit+0x168>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6613      	str	r3, [r2, #96]	; 0x60
 800174e:	4b43      	ldr	r3, [pc, #268]	; (800185c <HAL_UART_MspInit+0x168>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	4b40      	ldr	r3, [pc, #256]	; (800185c <HAL_UART_MspInit+0x168>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	4a3f      	ldr	r2, [pc, #252]	; (800185c <HAL_UART_MspInit+0x168>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001766:	4b3d      	ldr	r3, [pc, #244]	; (800185c <HAL_UART_MspInit+0x168>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001772:	23c0      	movs	r3, #192	; 0xc0
 8001774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800178a:	2307      	movs	r3, #7
 800178c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001790:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001794:	4619      	mov	r1, r3
 8001796:	4832      	ldr	r0, [pc, #200]	; (8001860 <HAL_UART_MspInit+0x16c>)
 8001798:	f001 f850 	bl	800283c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800179c:	4b31      	ldr	r3, [pc, #196]	; (8001864 <HAL_UART_MspInit+0x170>)
 800179e:	4a32      	ldr	r2, [pc, #200]	; (8001868 <HAL_UART_MspInit+0x174>)
 80017a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80017a2:	4b30      	ldr	r3, [pc, #192]	; (8001864 <HAL_UART_MspInit+0x170>)
 80017a4:	2202      	movs	r2, #2
 80017a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a8:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <HAL_UART_MspInit+0x170>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ae:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <HAL_UART_MspInit+0x170>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017b4:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_UART_MspInit+0x170>)
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ba:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <HAL_UART_MspInit+0x170>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c0:	4b28      	ldr	r3, [pc, #160]	; (8001864 <HAL_UART_MspInit+0x170>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_UART_MspInit+0x170>)
 80017c8:	2220      	movs	r2, #32
 80017ca:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <HAL_UART_MspInit+0x170>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017d2:	4824      	ldr	r0, [pc, #144]	; (8001864 <HAL_UART_MspInit+0x170>)
 80017d4:	f000 fdbc 	bl	8002350 <HAL_DMA_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80017de:	f7ff fd9b 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a1f      	ldr	r2, [pc, #124]	; (8001864 <HAL_UART_MspInit+0x170>)
 80017e6:	671a      	str	r2, [r3, #112]	; 0x70
 80017e8:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_UART_MspInit+0x170>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_UART_MspInit+0x178>)
 80017f0:	4a1f      	ldr	r2, [pc, #124]	; (8001870 <HAL_UART_MspInit+0x17c>)
 80017f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_UART_MspInit+0x178>)
 80017f6:	2202      	movs	r2, #2
 80017f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <HAL_UART_MspInit+0x178>)
 80017fc:	2210      	movs	r2, #16
 80017fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_UART_MspInit+0x178>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_UART_MspInit+0x178>)
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_UART_MspInit+0x178>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_UART_MspInit+0x178>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <HAL_UART_MspInit+0x178>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_UART_MspInit+0x178>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001824:	4811      	ldr	r0, [pc, #68]	; (800186c <HAL_UART_MspInit+0x178>)
 8001826:	f000 fd93 	bl	8002350 <HAL_DMA_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8001830:	f7ff fd72 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a0d      	ldr	r2, [pc, #52]	; (800186c <HAL_UART_MspInit+0x178>)
 8001838:	66da      	str	r2, [r3, #108]	; 0x6c
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <HAL_UART_MspInit+0x178>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2105      	movs	r1, #5
 8001844:	2025      	movs	r0, #37	; 0x25
 8001846:	f000 fd59 	bl	80022fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800184a:	2025      	movs	r0, #37	; 0x25
 800184c:	f000 fd72 	bl	8002334 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001850:	bf00      	nop
 8001852:	37b0      	adds	r7, #176	; 0xb0
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40013800 	.word	0x40013800
 800185c:	40021000 	.word	0x40021000
 8001860:	48000400 	.word	0x48000400
 8001864:	20000a8c 	.word	0x20000a8c
 8001868:	40020058 	.word	0x40020058
 800186c:	20000ad4 	.word	0x20000ad4
 8001870:	40020044 	.word	0x40020044

08001874 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001878:	f7ff fefa 	bl	8001670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800187c:	480c      	ldr	r0, [pc, #48]	; (80018b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800187e:	490d      	ldr	r1, [pc, #52]	; (80018b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <LoopForever+0xe>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001894:	4c0a      	ldr	r4, [pc, #40]	; (80018c0 <LoopForever+0x16>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018a2:	f007 fe07 	bl	80094b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018a6:	f7ff fccf 	bl	8001248 <main>

080018aa <LoopForever>:

LoopForever:
    b LoopForever
 80018aa:	e7fe      	b.n	80018aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80018b8:	0800e2a0 	.word	0x0800e2a0
  ldr r2, =_sbss
 80018bc:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80018c0:	20008370 	.word	0x20008370

080018c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC1_2_IRQHandler>

080018c6 <hts_init>:
#include "rtos_incs.h"
#include "stm32l475e_iot01_tsensor.h"
#include "stdio.h"
#include "hts_task.h"

void hts_init(){
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <hts_loop>:

void hts_loop(){
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <hts_task>:

void hts_task(void* pvParameters){
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
	hts_init();
 80018ea:	f7ff ffec 	bl	80018c6 <hts_init>
	vTaskDelay(5);
 80018ee:	2005      	movs	r0, #5
 80018f0:	f005 ffa6 	bl	8007840 <vTaskDelay>
	while(1){
		hts_loop();
 80018f4:	f7ff ffee 	bl	80018d4 <hts_loop>
		vTaskDelay(5);
 80018f8:	2005      	movs	r0, #5
 80018fa:	f005 ffa1 	bl	8007840 <vTaskDelay>
		hts_loop();
 80018fe:	e7f9      	b.n	80018f4 <hts_task+0x12>

08001900 <lis_task>:

void lis_loop(){

}

void lis_task(void* pvParameters){
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	vTaskDelay(5);
 8001908:	2005      	movs	r0, #5
 800190a:	f005 ff99 	bl	8007840 <vTaskDelay>
	uint8_t toggle = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
	while(1){
		vTaskDelay(5);
 8001912:	2005      	movs	r0, #5
 8001914:	f005 ff94 	bl	8007840 <vTaskDelay>
		toggle = !toggle;
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	2b00      	cmp	r3, #0
 800191c:	bf0c      	ite	eq
 800191e:	2301      	moveq	r3, #1
 8001920:	2300      	movne	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(5);
 8001926:	e7f4      	b.n	8001912 <lis_task+0x12>

08001928 <lps_init>:

#include "rtos_incs.h"
#include "stm32l475e_iot01_psensor.h"
#include "stdio.h"
#include "lps_task.h"
void lps_init(){
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <lps_loop>:

void lps_loop(){
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <lps_task>:

void lps_task(void* argument){
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	lps_init();
 800194c:	f7ff ffec 	bl	8001928 <lps_init>
	vTaskDelay(5);
 8001950:	2005      	movs	r0, #5
 8001952:	f005 ff75 	bl	8007840 <vTaskDelay>
	while(1){
		lps_loop();
 8001956:	f7ff ffee 	bl	8001936 <lps_loop>
		vTaskDelay(5);
 800195a:	2005      	movs	r0, #5
 800195c:	f005 ff70 	bl	8007840 <vTaskDelay>
		lps_loop();
 8001960:	e7f9      	b.n	8001956 <lps_task+0x12>
 8001962:	0000      	movs	r0, r0
 8001964:	0000      	movs	r0, r0
	...

08001968 <lsm_task>:

void lsm_loop(){

}

void lsm_task(void* argument){
 8001968:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800196c:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8001970:	af04      	add	r7, sp, #16
 8001972:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001976:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800197a:	6018      	str	r0, [r3, #0]
	BSP_ACCELERO_Init();
 800197c:	f000 fa50 	bl	8001e20 <BSP_ACCELERO_Init>

	char tx_buffer[256];
	int tx_len;
	int16_t accel_data_i16[3] = { 0 };
 8001980:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001984:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	809a      	strh	r2, [r3, #4]
	float accel_data[3] = {0.5, 0.5, 0.5};			// array to store the x, y and z readings.
 800198e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001992:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001996:	4a66      	ldr	r2, [pc, #408]	; (8001b30 <lsm_task+0x1c8>)
 8001998:	ca07      	ldmia	r2, {r0, r1, r2}
 800199a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(1){
		TickType_t last_wake_time = xTaskGetTickCount();
 800199e:	f006 f89d 	bl	8007adc <xTaskGetTickCount>
 80019a2:	4602      	mov	r2, r0
 80019a4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80019a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80019ac:	601a      	str	r2, [r3, #0]
		BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
 80019ae:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fa72 	bl	8001e9c <BSP_ACCELERO_AccGetXYZ>
		// the function above returns 16 bit integers which are acceleration in mg (9.8/1000 m/s^2).
//		// Converting to float to print the actual acceleration.
		accel_data[0] = (float)accel_data_i16[0] * (9.8/1000.0f);
 80019b8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80019bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019cc:	ee17 0a90 	vmov	r0, s15
 80019d0:	f7fe fdba 	bl	8000548 <__aeabi_f2d>
 80019d4:	a354      	add	r3, pc, #336	; (adr r3, 8001b28 <lsm_task+0x1c0>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	f7fe fe0d 	bl	80005f8 <__aeabi_dmul>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f8ff 	bl	8000be8 <__aeabi_d2f>
 80019ea:	4602      	mov	r2, r0
 80019ec:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80019f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019f4:	601a      	str	r2, [r3, #0]
		accel_data[1] = (float)accel_data_i16[1] * (9.8/1000.0f);
 80019f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80019fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0a:	ee17 0a90 	vmov	r0, s15
 8001a0e:	f7fe fd9b 	bl	8000548 <__aeabi_f2d>
 8001a12:	a345      	add	r3, pc, #276	; (adr r3, 8001b28 <lsm_task+0x1c0>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	f7fe fdee 	bl	80005f8 <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	f7ff f8e0 	bl	8000be8 <__aeabi_d2f>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001a2e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a32:	605a      	str	r2, [r3, #4]
		accel_data[2] = (float)accel_data_i16[2] * (9.8/1000.0f);
 8001a34:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001a38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a48:	ee17 0a90 	vmov	r0, s15
 8001a4c:	f7fe fd7c 	bl	8000548 <__aeabi_f2d>
 8001a50:	a335      	add	r3, pc, #212	; (adr r3, 8001b28 <lsm_task+0x1c0>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fdcf 	bl	80005f8 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	f7ff f8c1 	bl	8000be8 <__aeabi_d2f>
 8001a66:	4602      	mov	r2, r0
 8001a68:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001a6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a70:	609a      	str	r2, [r3, #8]
		tx_len = sprintf((char*)tx_buffer,"AccelX : %f; Accel Y: %f; Accel Z: %f\n", accel_data[0], accel_data[1], accel_data[2]);
 8001a72:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001a76:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd63 	bl	8000548 <__aeabi_f2d>
 8001a82:	4680      	mov	r8, r0
 8001a84:	4689      	mov	r9, r1
 8001a86:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001a8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fd59 	bl	8000548 <__aeabi_f2d>
 8001a96:	4604      	mov	r4, r0
 8001a98:	460d      	mov	r5, r1
 8001a9a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001a9e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd4f 	bl	8000548 <__aeabi_f2d>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001ab2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ab6:	e9cd 4500 	strd	r4, r5, [sp]
 8001aba:	4642      	mov	r2, r8
 8001abc:	464b      	mov	r3, r9
 8001abe:	491d      	ldr	r1, [pc, #116]	; (8001b34 <lsm_task+0x1cc>)
 8001ac0:	f008 fcc4 	bl	800a44c <siprintf>
 8001ac4:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
		queue_UART_msg_t accelero_send;
		memcpy(accelero_send.uart_chars, tx_buffer, tx_len);
 8001ac8:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001acc:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f007 fd13 	bl	8009502 <memcpy>
		accelero_send.char_len = tx_len;
 8001adc:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001ae6:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001aea:	805a      	strh	r2, [r3, #2]
		accelero_send.type = TX;
 8001aec:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001af0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
		queue_UART_msg_t *accelero_pter = &accelero_send;
 8001af8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001afc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b00:	f107 020c 	add.w	r2, r7, #12
 8001b04:	601a      	str	r2, [r3, #0]
		xQueueSendToBack(UART1_queue,&accelero_pter,0);
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <lsm_task+0x1d0>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2200      	movs	r2, #0
 8001b12:	f005 f87d 	bl	8006c10 <xQueueGenericSend>
		vTaskDelayUntil(&last_wake_time, 100);
 8001b16:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001b1a:	2164      	movs	r1, #100	; 0x64
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f005 fe11 	bl	8007744 <vTaskDelayUntil>
	while(1){
 8001b22:	e73c      	b.n	800199e <lsm_task+0x36>
 8001b24:	f3af 8000 	nop.w
 8001b28:	bc01a36f 	.word	0xbc01a36f
 8001b2c:	3f841205 	.word	0x3f841205
 8001b30:	0800dd7c 	.word	0x0800dd7c
 8001b34:	0800dd54 	.word	0x0800dd54
 8001b38:	20000248 	.word	0x20000248

08001b3c <uart1_task>:
#include "uart1_task.h"




void uart1_task(void* pvParameters){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	//init code
	queue_UART_msg_t *uart_q;
	while(1){
		//running code
		xQueueReceive(UART1_queue, (void *)&uart_q, 10000);
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <uart1_task+0x3c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f107 010c 	add.w	r1, r7, #12
 8001b4c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b50:	4618      	mov	r0, r3
 8001b52:	f005 f9f7 	bl	8006f44 <xQueueReceive>
		if (uart_q->type == TX){
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d107      	bne.n	8001b6e <uart1_task+0x32>
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)uart_q->uart_chars, uart_q->char_len);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1d19      	adds	r1, r3, #4
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	885b      	ldrh	r3, [r3, #2]
 8001b66:	461a      	mov	r2, r3
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <uart1_task+0x40>)
 8001b6a:	f003 fc75 	bl	8005458 <HAL_UART_Transmit_DMA>
		}
		vTaskDelay(1);
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f005 fe66 	bl	8007840 <vTaskDelay>
		xQueueReceive(UART1_queue, (void *)&uart_q, 10000);
 8001b74:	e7e6      	b.n	8001b44 <uart1_task+0x8>
 8001b76:	bf00      	nop
 8001b78:	20000248 	.word	0x20000248
 8001b7c:	20000a08 	.word	0x20000a08

08001b80 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001b88:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <I2Cx_MspInit+0xa8>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	4a26      	ldr	r2, [pc, #152]	; (8001c28 <I2Cx_MspInit+0xa8>)
 8001b8e:	f043 0302 	orr.w	r3, r3, #2
 8001b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <I2Cx_MspInit+0xa8>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001ba0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ba4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001ba6:	2312      	movs	r3, #18
 8001ba8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	481b      	ldr	r0, [pc, #108]	; (8001c2c <I2Cx_MspInit+0xac>)
 8001bbe:	f000 fe3d 	bl	800283c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4818      	ldr	r0, [pc, #96]	; (8001c2c <I2Cx_MspInit+0xac>)
 8001bca:	f000 fe37 	bl	800283c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <I2Cx_MspInit+0xa8>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	4a15      	ldr	r2, [pc, #84]	; (8001c28 <I2Cx_MspInit+0xa8>)
 8001bd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <I2Cx_MspInit+0xa8>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <I2Cx_MspInit+0xa8>)
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <I2Cx_MspInit+0xa8>)
 8001bec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bf0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <I2Cx_MspInit+0xa8>)
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf6:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <I2Cx_MspInit+0xa8>)
 8001bf8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001bfc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	210f      	movs	r1, #15
 8001c02:	2021      	movs	r0, #33	; 0x21
 8001c04:	f000 fb7a 	bl	80022fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001c08:	2021      	movs	r0, #33	; 0x21
 8001c0a:	f000 fb93 	bl	8002334 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	210f      	movs	r1, #15
 8001c12:	2022      	movs	r0, #34	; 0x22
 8001c14:	f000 fb72 	bl	80022fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001c18:	2022      	movs	r0, #34	; 0x22
 8001c1a:	f000 fb8b 	bl	8002334 <HAL_NVIC_EnableIRQ>
}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	48000400 	.word	0x48000400

08001c30 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <I2Cx_Init+0x54>)
 8001c3c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <I2Cx_Init+0x58>)
 8001c42:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff89 	bl	8001b80 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 ff8e 	bl	8002b90 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001c74:	2100      	movs	r1, #0
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f001 fd30 	bl	80036dc <HAL_I2CEx_ConfigAnalogFilter>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40005800 	.word	0x40005800
 8001c88:	00702681 	.word	0x00702681

08001c8c <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af04      	add	r7, sp, #16
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	4608      	mov	r0, r1
 8001c96:	4611      	mov	r1, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	72fb      	strb	r3, [r7, #11]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	813b      	strh	r3, [r7, #8]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001caa:	7afb      	ldrb	r3, [r7, #11]
 8001cac:	b299      	uxth	r1, r3
 8001cae:	88f8      	ldrh	r0, [r7, #6]
 8001cb0:	893a      	ldrh	r2, [r7, #8]
 8001cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f001 f94a 	bl	8002f5c <HAL_I2C_Mem_Read>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d004      	beq.n	8001cdc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001cd2:	7afb      	ldrb	r3, [r7, #11]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f832 	bl	8001d40 <I2Cx_Error>
  }
  return status;
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b08a      	sub	sp, #40	; 0x28
 8001cea:	af04      	add	r7, sp, #16
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	4608      	mov	r0, r1
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	72fb      	strb	r3, [r7, #11]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	813b      	strh	r3, [r7, #8]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d04:	7afb      	ldrb	r3, [r7, #11]
 8001d06:	b299      	uxth	r1, r3
 8001d08:	88f8      	ldrh	r0, [r7, #6]
 8001d0a:	893a      	ldrh	r2, [r7, #8]
 8001d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d10:	9302      	str	r3, [sp, #8]
 8001d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f001 f809 	bl	8002d34 <HAL_I2C_Mem_Write>
 8001d22:	4603      	mov	r3, r0
 8001d24:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001d2c:	7afb      	ldrb	r3, [r7, #11]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f805 	bl	8001d40 <I2Cx_Error>
  }
  return status;
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 ffae 	bl	8002cae <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ff6c 	bl	8001c30 <I2Cx_Init>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <SENSOR_IO_Init+0x10>)
 8001d66:	f7ff ff63 	bl	8001c30 <I2Cx_Init>
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000b1c 	.word	0x20000b1c

08001d74 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	71bb      	strb	r3, [r7, #6]
 8001d82:	4613      	mov	r3, r2
 8001d84:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	79f9      	ldrb	r1, [r7, #7]
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	1d7b      	adds	r3, r7, #5
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2301      	movs	r3, #1
 8001d96:	4803      	ldr	r0, [pc, #12]	; (8001da4 <SENSOR_IO_Write+0x30>)
 8001d98:	f7ff ffa5 	bl	8001ce6 <I2Cx_WriteMultiple>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000b1c 	.word	0x20000b1c

08001da8 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	4603      	mov	r3, r0
 8001db0:	460a      	mov	r2, r1
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001dbc:	79bb      	ldrb	r3, [r7, #6]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	79f9      	ldrb	r1, [r7, #7]
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	f107 030f 	add.w	r3, r7, #15
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2301      	movs	r3, #1
 8001dce:	4804      	ldr	r0, [pc, #16]	; (8001de0 <SENSOR_IO_Read+0x38>)
 8001dd0:	f7ff ff5c 	bl	8001c8c <I2Cx_ReadMultiple>

  return read_value;
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000b1c 	.word	0x20000b1c

08001de4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	603a      	str	r2, [r7, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
 8001df2:	460b      	mov	r3, r1
 8001df4:	71bb      	strb	r3, [r7, #6]
 8001df6:	4613      	mov	r3, r2
 8001df8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001dfa:	79bb      	ldrb	r3, [r7, #6]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	79f9      	ldrb	r1, [r7, #7]
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	4804      	ldr	r0, [pc, #16]	; (8001e1c <SENSOR_IO_ReadMultiple+0x38>)
 8001e0c:	f7ff ff3e 	bl	8001c8c <I2Cx_ReadMultiple>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b29b      	uxth	r3, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000b1c 	.word	0x20000b1c

08001e20 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <BSP_ACCELERO_Init+0x74>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4798      	blx	r3
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b6a      	cmp	r3, #106	; 0x6a
 8001e38:	d002      	beq.n	8001e40 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	e024      	b.n	8001e8a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <BSP_ACCELERO_Init+0x78>)
 8001e42:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <BSP_ACCELERO_Init+0x74>)
 8001e44:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001e46:	2330      	movs	r3, #48	; 0x30
 8001e48:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001e52:	2340      	movs	r3, #64	; 0x40
 8001e54:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001e5e:	797a      	ldrb	r2, [r7, #5]
 8001e60:	7abb      	ldrb	r3, [r7, #10]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001e68:	7a3b      	ldrb	r3, [r7, #8]
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	b21a      	sxth	r2, r3
 8001e74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <BSP_ACCELERO_Init+0x78>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	89ba      	ldrh	r2, [r7, #12]
 8001e86:	4610      	mov	r0, r2
 8001e88:	4798      	blx	r3
  }  

  return ret;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000004 	.word	0x20000004
 8001e98:	20000b70 	.word	0x20000b70

08001e9c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d004      	beq.n	8001ec0 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
    }
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000b70 	.word	0x20000b70

08001ecc <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001eda:	2110      	movs	r1, #16
 8001edc:	20d4      	movs	r0, #212	; 0xd4
 8001ede:	f7ff ff63 	bl	8001da8 <SENSOR_IO_Read>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001eea:	7bbb      	ldrb	r3, [r7, #14]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001ef2:	7bba      	ldrb	r2, [r7, #14]
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001efa:	7bbb      	ldrb	r3, [r7, #14]
 8001efc:	461a      	mov	r2, r3
 8001efe:	2110      	movs	r1, #16
 8001f00:	20d4      	movs	r0, #212	; 0xd4
 8001f02:	f7ff ff37 	bl	8001d74 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001f06:	2112      	movs	r1, #18
 8001f08:	20d4      	movs	r0, #212	; 0xd4
 8001f0a:	f7ff ff4d 	bl	8001da8 <SENSOR_IO_Read>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001f1a:	7bbb      	ldrb	r3, [r7, #14]
 8001f1c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001f20:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001f22:	7bba      	ldrb	r2, [r7, #14]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001f2a:	7bbb      	ldrb	r3, [r7, #14]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2112      	movs	r1, #18
 8001f30:	20d4      	movs	r0, #212	; 0xd4
 8001f32:	f7ff ff1f 	bl	8001d74 <SENSOR_IO_Write>


  /* Read INT1_CTRL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8001f36:	210d      	movs	r1, #13
 8001f38:	20d4      	movs	r0, #212	; 0xd4
 8001f3a:	f7ff ff35 	bl	8001da8 <SENSOR_IO_Read>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	73bb      	strb	r3, [r7, #14]
  tmp |= (1 | 1<< 1); //set ACC drdy and gyro drdy on int pin1
 8001f42:	7bbb      	ldrb	r3, [r7, #14]
 8001f44:	f043 0303 	orr.w	r3, r3, #3
 8001f48:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8001f4a:	7bbb      	ldrb	r3, [r7, #14]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	210d      	movs	r1, #13
 8001f50:	20d4      	movs	r0, #212	; 0xd4
 8001f52:	f7ff ff0f 	bl	8001d74 <SENSOR_IO_Write>
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001f64:	2300      	movs	r3, #0
 8001f66:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001f68:	2110      	movs	r1, #16
 8001f6a:	20d4      	movs	r0, #212	; 0xd4
 8001f6c:	f7ff ff1c 	bl	8001da8 <SENSOR_IO_Read>
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2110      	movs	r1, #16
 8001f82:	20d4      	movs	r0, #212	; 0xd4
 8001f84:	f7ff fef6 	bl	8001d74 <SENSOR_IO_Write>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001f94:	f7ff fee4 	bl	8001d60 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001f98:	210f      	movs	r1, #15
 8001f9a:	20d4      	movs	r0, #212	; 0xd4
 8001f9c:	f7ff ff04 	bl	8001da8 <SENSOR_IO_Read>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001fb4:	2115      	movs	r1, #21
 8001fb6:	20d4      	movs	r0, #212	; 0xd4
 8001fb8:	f7ff fef6 	bl	8001da8 <SENSOR_IO_Read>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	f023 0310 	bic.w	r3, r3, #16
 8001fc6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	f043 0310 	orr.w	r3, r3, #16
 8001fd4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2115      	movs	r1, #21
 8001fdc:	20d4      	movs	r0, #212	; 0xd4
 8001fde:	f7ff fec9 	bl	8001d74 <SENSOR_IO_Write>
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002002:	2110      	movs	r1, #16
 8002004:	20d4      	movs	r0, #212	; 0xd4
 8002006:	f7ff fecf 	bl	8001da8 <SENSOR_IO_Read>
 800200a:	4603      	mov	r3, r0
 800200c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800200e:	f107 0208 	add.w	r2, r7, #8
 8002012:	2306      	movs	r3, #6
 8002014:	2128      	movs	r1, #40	; 0x28
 8002016:	20d4      	movs	r0, #212	; 0xd4
 8002018:	f7ff fee4 	bl	8001de4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800201c:	2300      	movs	r3, #0
 800201e:	77fb      	strb	r3, [r7, #31]
 8002020:	e01c      	b.n	800205c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002022:	7ffb      	ldrb	r3, [r7, #31]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	3301      	adds	r3, #1
 8002028:	3320      	adds	r3, #32
 800202a:	443b      	add	r3, r7
 800202c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002030:	b29b      	uxth	r3, r3
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	b29a      	uxth	r2, r3
 8002036:	7ffb      	ldrb	r3, [r7, #31]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	3320      	adds	r3, #32
 800203c:	443b      	add	r3, r7
 800203e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002042:	b29b      	uxth	r3, r3
 8002044:	4413      	add	r3, r2
 8002046:	b29a      	uxth	r2, r3
 8002048:	7ffb      	ldrb	r3, [r7, #31]
 800204a:	b212      	sxth	r2, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	3320      	adds	r3, #32
 8002050:	443b      	add	r3, r7
 8002052:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002056:	7ffb      	ldrb	r3, [r7, #31]
 8002058:	3301      	adds	r3, #1
 800205a:	77fb      	strb	r3, [r7, #31]
 800205c:	7ffb      	ldrb	r3, [r7, #31]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d9df      	bls.n	8002022 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002062:	7dfb      	ldrb	r3, [r7, #23]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b0c      	cmp	r3, #12
 800206a:	d829      	bhi.n	80020c0 <LSM6DSL_AccReadXYZ+0xd4>
 800206c:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <LSM6DSL_AccReadXYZ+0x88>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	080020a9 	.word	0x080020a9
 8002078:	080020c1 	.word	0x080020c1
 800207c:	080020c1 	.word	0x080020c1
 8002080:	080020c1 	.word	0x080020c1
 8002084:	080020bb 	.word	0x080020bb
 8002088:	080020c1 	.word	0x080020c1
 800208c:	080020c1 	.word	0x080020c1
 8002090:	080020c1 	.word	0x080020c1
 8002094:	080020af 	.word	0x080020af
 8002098:	080020c1 	.word	0x080020c1
 800209c:	080020c1 	.word	0x080020c1
 80020a0:	080020c1 	.word	0x080020c1
 80020a4:	080020b5 	.word	0x080020b5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <LSM6DSL_AccReadXYZ+0x120>)
 80020aa:	61bb      	str	r3, [r7, #24]
    break;
 80020ac:	e008      	b.n	80020c0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <LSM6DSL_AccReadXYZ+0x124>)
 80020b0:	61bb      	str	r3, [r7, #24]
    break;
 80020b2:	e005      	b.n	80020c0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80020b4:	4b17      	ldr	r3, [pc, #92]	; (8002114 <LSM6DSL_AccReadXYZ+0x128>)
 80020b6:	61bb      	str	r3, [r7, #24]
    break;
 80020b8:	e002      	b.n	80020c0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80020ba:	4b17      	ldr	r3, [pc, #92]	; (8002118 <LSM6DSL_AccReadXYZ+0x12c>)
 80020bc:	61bb      	str	r3, [r7, #24]
    break;    
 80020be:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	77fb      	strb	r3, [r7, #31]
 80020c4:	e01a      	b.n	80020fc <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80020c6:	7ffb      	ldrb	r3, [r7, #31]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	3320      	adds	r3, #32
 80020cc:	443b      	add	r3, r7
 80020ce:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020da:	edd7 7a06 	vldr	s15, [r7, #24]
 80020de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e2:	7ffb      	ldrb	r3, [r7, #31]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ee:	ee17 2a90 	vmov	r2, s15
 80020f2:	b212      	sxth	r2, r2
 80020f4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80020f6:	7ffb      	ldrb	r3, [r7, #31]
 80020f8:	3301      	adds	r3, #1
 80020fa:	77fb      	strb	r3, [r7, #31]
 80020fc:	7ffb      	ldrb	r3, [r7, #31]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d9e1      	bls.n	80020c6 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	3d79db23 	.word	0x3d79db23
 8002110:	3df9db23 	.word	0x3df9db23
 8002114:	3e79db23 	.word	0x3e79db23
 8002118:	3ef9db23 	.word	0x3ef9db23

0800211c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002126:	2003      	movs	r0, #3
 8002128:	f000 f8dd 	bl	80022e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800212c:	200f      	movs	r0, #15
 800212e:	f7ff f921 	bl	8001374 <HAL_InitTick>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	71fb      	strb	r3, [r7, #7]
 800213c:	e001      	b.n	8002142 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800213e:	f7ff f8f1 	bl	8001324 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002142:	79fb      	ldrb	r3, [r7, #7]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_IncTick+0x20>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_IncTick+0x24>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4413      	add	r3, r2
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_IncTick+0x24>)
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	2000003c 	.word	0x2000003c
 8002170:	20000b74 	.word	0x20000b74

08002174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return uwTick;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_GetTick+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000b74 	.word	0x20000b74

0800218c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021be:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	60d3      	str	r3, [r2, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <__NVIC_GetPriorityGrouping+0x18>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	f003 0307 	and.w	r3, r3, #7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	db0b      	blt.n	800221a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4907      	ldr	r1, [pc, #28]	; (8002228 <__NVIC_EnableIRQ+0x38>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2001      	movs	r0, #1
 8002212:	fa00 f202 	lsl.w	r2, r0, r2
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000e100 	.word	0xe000e100

0800222c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	2b00      	cmp	r3, #0
 800223e:	db0a      	blt.n	8002256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	490c      	ldr	r1, [pc, #48]	; (8002278 <__NVIC_SetPriority+0x4c>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	440b      	add	r3, r1
 8002250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002254:	e00a      	b.n	800226c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4908      	ldr	r1, [pc, #32]	; (800227c <__NVIC_SetPriority+0x50>)
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	3b04      	subs	r3, #4
 8002264:	0112      	lsls	r2, r2, #4
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	440b      	add	r3, r1
 800226a:	761a      	strb	r2, [r3, #24]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000e100 	.word	0xe000e100
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f1c3 0307 	rsb	r3, r3, #7
 800229a:	2b04      	cmp	r3, #4
 800229c:	bf28      	it	cs
 800229e:	2304      	movcs	r3, #4
 80022a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d902      	bls.n	80022b0 <NVIC_EncodePriority+0x30>
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3b03      	subs	r3, #3
 80022ae:	e000      	b.n	80022b2 <NVIC_EncodePriority+0x32>
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43da      	mvns	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	401a      	ands	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	4313      	orrs	r3, r2
         );
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3724      	adds	r7, #36	; 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ff4c 	bl	800218c <__NVIC_SetPriorityGrouping>
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800230e:	f7ff ff61 	bl	80021d4 <__NVIC_GetPriorityGrouping>
 8002312:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	6978      	ldr	r0, [r7, #20]
 800231a:	f7ff ffb1 	bl	8002280 <NVIC_EncodePriority>
 800231e:	4602      	mov	r2, r0
 8002320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002324:	4611      	mov	r1, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff80 	bl	800222c <__NVIC_SetPriority>
}
 800232c:	bf00      	nop
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ff54 	bl	80021f0 <__NVIC_EnableIRQ>
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e098      	b.n	8002494 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	4b4d      	ldr	r3, [pc, #308]	; (80024a0 <HAL_DMA_Init+0x150>)
 800236a:	429a      	cmp	r2, r3
 800236c:	d80f      	bhi.n	800238e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	4b4b      	ldr	r3, [pc, #300]	; (80024a4 <HAL_DMA_Init+0x154>)
 8002376:	4413      	add	r3, r2
 8002378:	4a4b      	ldr	r2, [pc, #300]	; (80024a8 <HAL_DMA_Init+0x158>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	009a      	lsls	r2, r3, #2
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a48      	ldr	r2, [pc, #288]	; (80024ac <HAL_DMA_Init+0x15c>)
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
 800238c:	e00e      	b.n	80023ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	4b46      	ldr	r3, [pc, #280]	; (80024b0 <HAL_DMA_Init+0x160>)
 8002396:	4413      	add	r3, r2
 8002398:	4a43      	ldr	r2, [pc, #268]	; (80024a8 <HAL_DMA_Init+0x158>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	009a      	lsls	r2, r3, #2
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a42      	ldr	r2, [pc, #264]	; (80024b4 <HAL_DMA_Init+0x164>)
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80023c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002406:	d039      	beq.n	800247c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	4a27      	ldr	r2, [pc, #156]	; (80024ac <HAL_DMA_Init+0x15c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d11a      	bne.n	8002448 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002412:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <HAL_DMA_Init+0x168>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f003 031c 	and.w	r3, r3, #28
 800241e:	210f      	movs	r1, #15
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	4924      	ldr	r1, [pc, #144]	; (80024b8 <HAL_DMA_Init+0x168>)
 8002428:	4013      	ands	r3, r2
 800242a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800242c:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_DMA_Init+0x168>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	f003 031c 	and.w	r3, r3, #28
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	491d      	ldr	r1, [pc, #116]	; (80024b8 <HAL_DMA_Init+0x168>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
 8002446:	e019      	b.n	800247c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002448:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_DMA_Init+0x16c>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002450:	f003 031c 	and.w	r3, r3, #28
 8002454:	210f      	movs	r1, #15
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	4917      	ldr	r1, [pc, #92]	; (80024bc <HAL_DMA_Init+0x16c>)
 800245e:	4013      	ands	r3, r2
 8002460:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <HAL_DMA_Init+0x16c>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6859      	ldr	r1, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f003 031c 	and.w	r3, r3, #28
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	4911      	ldr	r1, [pc, #68]	; (80024bc <HAL_DMA_Init+0x16c>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	40020407 	.word	0x40020407
 80024a4:	bffdfff8 	.word	0xbffdfff8
 80024a8:	cccccccd 	.word	0xcccccccd
 80024ac:	40020000 	.word	0x40020000
 80024b0:	bffdfbf8 	.word	0xbffdfbf8
 80024b4:	40020400 	.word	0x40020400
 80024b8:	400200a8 	.word	0x400200a8
 80024bc:	400204a8 	.word	0x400204a8

080024c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_DMA_Start_IT+0x20>
 80024dc:	2302      	movs	r3, #2
 80024de:	e04b      	b.n	8002578 <HAL_DMA_Start_IT+0xb8>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d13a      	bne.n	800256a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0201 	bic.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f95f 	bl	80027dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 020e 	orr.w	r2, r2, #14
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	e00f      	b.n	8002558 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0204 	bic.w	r2, r2, #4
 8002546:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 020a 	orr.w	r2, r2, #10
 8002556:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e005      	b.n	8002576 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002572:	2302      	movs	r3, #2
 8002574:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002576:	7dfb      	ldrb	r3, [r7, #23]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d008      	beq.n	80025aa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2204      	movs	r2, #4
 800259c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e022      	b.n	80025f0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 020e 	bic.w	r2, r2, #14
 80025b8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	f003 021c 	and.w	r2, r3, #28
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2101      	movs	r1, #1
 80025d8:	fa01 f202 	lsl.w	r2, r1, r2
 80025dc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d005      	beq.n	8002620 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2204      	movs	r2, #4
 8002618:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	e029      	b.n	8002674 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 020e 	bic.w	r2, r2, #14
 800262e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002644:	f003 021c 	and.w	r2, r3, #28
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	2101      	movs	r1, #1
 800264e:	fa01 f202 	lsl.w	r2, r1, r2
 8002652:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	4798      	blx	r3
    }
  }
  return status;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f003 031c 	and.w	r3, r3, #28
 800269e:	2204      	movs	r2, #4
 80026a0:	409a      	lsls	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d026      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x7a>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d021      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0204 	bic.w	r2, r2, #4
 80026d0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f003 021c 	and.w	r2, r3, #28
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	2104      	movs	r1, #4
 80026e0:	fa01 f202 	lsl.w	r2, r1, r2
 80026e4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d071      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80026f6:	e06c      	b.n	80027d2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	f003 031c 	and.w	r3, r3, #28
 8002700:	2202      	movs	r2, #2
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d02e      	beq.n	800276a <HAL_DMA_IRQHandler+0xec>
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d029      	beq.n	800276a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10b      	bne.n	800273c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 020a 	bic.w	r2, r2, #10
 8002732:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f003 021c 	and.w	r2, r3, #28
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	2102      	movs	r1, #2
 800274a:	fa01 f202 	lsl.w	r2, r1, r2
 800274e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d038      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002768:	e033      	b.n	80027d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f003 031c 	and.w	r3, r3, #28
 8002772:	2208      	movs	r2, #8
 8002774:	409a      	lsls	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d02a      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x156>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d025      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 020e 	bic.w	r2, r2, #14
 8002796:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279c:	f003 021c 	and.w	r2, r3, #28
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f202 	lsl.w	r2, r1, r2
 80027aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d004      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027d2:	bf00      	nop
 80027d4:	bf00      	nop
}
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f003 021c 	and.w	r2, r3, #28
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2101      	movs	r1, #1
 80027f8:	fa01 f202 	lsl.w	r2, r1, r2
 80027fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b10      	cmp	r3, #16
 800280c:	d108      	bne.n	8002820 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800281e:	e007      	b.n	8002830 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	60da      	str	r2, [r3, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800284a:	e17f      	b.n	8002b4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2101      	movs	r1, #1
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8171 	beq.w	8002b46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d005      	beq.n	800287c <HAL_GPIO_Init+0x40>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d130      	bne.n	80028de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028b2:	2201      	movs	r2, #1
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	091b      	lsrs	r3, r3, #4
 80028c8:	f003 0201 	and.w	r2, r3, #1
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d118      	bne.n	800291c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028f0:	2201      	movs	r2, #1
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	08db      	lsrs	r3, r3, #3
 8002906:	f003 0201 	and.w	r2, r3, #1
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b03      	cmp	r3, #3
 8002926:	d017      	beq.n	8002958 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	2203      	movs	r2, #3
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d123      	bne.n	80029ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	08da      	lsrs	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3208      	adds	r2, #8
 800296c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	220f      	movs	r2, #15
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	08da      	lsrs	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3208      	adds	r2, #8
 80029a6:	6939      	ldr	r1, [r7, #16]
 80029a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0203 	and.w	r2, r3, #3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80ac 	beq.w	8002b46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ee:	4b5f      	ldr	r3, [pc, #380]	; (8002b6c <HAL_GPIO_Init+0x330>)
 80029f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f2:	4a5e      	ldr	r2, [pc, #376]	; (8002b6c <HAL_GPIO_Init+0x330>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6613      	str	r3, [r2, #96]	; 0x60
 80029fa:	4b5c      	ldr	r3, [pc, #368]	; (8002b6c <HAL_GPIO_Init+0x330>)
 80029fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a06:	4a5a      	ldr	r2, [pc, #360]	; (8002b70 <HAL_GPIO_Init+0x334>)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a30:	d025      	beq.n	8002a7e <HAL_GPIO_Init+0x242>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4f      	ldr	r2, [pc, #316]	; (8002b74 <HAL_GPIO_Init+0x338>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01f      	beq.n	8002a7a <HAL_GPIO_Init+0x23e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4e      	ldr	r2, [pc, #312]	; (8002b78 <HAL_GPIO_Init+0x33c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d019      	beq.n	8002a76 <HAL_GPIO_Init+0x23a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4d      	ldr	r2, [pc, #308]	; (8002b7c <HAL_GPIO_Init+0x340>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <HAL_GPIO_Init+0x236>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a4c      	ldr	r2, [pc, #304]	; (8002b80 <HAL_GPIO_Init+0x344>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00d      	beq.n	8002a6e <HAL_GPIO_Init+0x232>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a4b      	ldr	r2, [pc, #300]	; (8002b84 <HAL_GPIO_Init+0x348>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d007      	beq.n	8002a6a <HAL_GPIO_Init+0x22e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4a      	ldr	r2, [pc, #296]	; (8002b88 <HAL_GPIO_Init+0x34c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d101      	bne.n	8002a66 <HAL_GPIO_Init+0x22a>
 8002a62:	2306      	movs	r3, #6
 8002a64:	e00c      	b.n	8002a80 <HAL_GPIO_Init+0x244>
 8002a66:	2307      	movs	r3, #7
 8002a68:	e00a      	b.n	8002a80 <HAL_GPIO_Init+0x244>
 8002a6a:	2305      	movs	r3, #5
 8002a6c:	e008      	b.n	8002a80 <HAL_GPIO_Init+0x244>
 8002a6e:	2304      	movs	r3, #4
 8002a70:	e006      	b.n	8002a80 <HAL_GPIO_Init+0x244>
 8002a72:	2303      	movs	r3, #3
 8002a74:	e004      	b.n	8002a80 <HAL_GPIO_Init+0x244>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e002      	b.n	8002a80 <HAL_GPIO_Init+0x244>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_GPIO_Init+0x244>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	f002 0203 	and.w	r2, r2, #3
 8002a86:	0092      	lsls	r2, r2, #2
 8002a88:	4093      	lsls	r3, r2
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a90:	4937      	ldr	r1, [pc, #220]	; (8002b70 <HAL_GPIO_Init+0x334>)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	3302      	adds	r3, #2
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_GPIO_Init+0x350>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ac2:	4a32      	ldr	r2, [pc, #200]	; (8002b8c <HAL_GPIO_Init+0x350>)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ac8:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <HAL_GPIO_Init+0x350>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aec:	4a27      	ldr	r2, [pc, #156]	; (8002b8c <HAL_GPIO_Init+0x350>)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002af2:	4b26      	ldr	r3, [pc, #152]	; (8002b8c <HAL_GPIO_Init+0x350>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b16:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <HAL_GPIO_Init+0x350>)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_GPIO_Init+0x350>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b40:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <HAL_GPIO_Init+0x350>)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	fa22 f303 	lsr.w	r3, r2, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f47f ae78 	bne.w	800284c <HAL_GPIO_Init+0x10>
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	371c      	adds	r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40010000 	.word	0x40010000
 8002b74:	48000400 	.word	0x48000400
 8002b78:	48000800 	.word	0x48000800
 8002b7c:	48000c00 	.word	0x48000c00
 8002b80:	48001000 	.word	0x48001000
 8002b84:	48001400 	.word	0x48001400
 8002b88:	48001800 	.word	0x48001800
 8002b8c:	40010400 	.word	0x40010400

08002b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e081      	b.n	8002ca6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f8a8 	bl	8002d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2224      	movs	r2, #36	; 0x24
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002be0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bf0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d107      	bne.n	8002c0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	e006      	b.n	8002c18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d104      	bne.n	8002c2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69d9      	ldr	r1, [r3, #28]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1a      	ldr	r2, [r3, #32]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e021      	b.n	8002d04 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2224      	movs	r2, #36	; 0x24
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f821 	bl	8002d20 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	4608      	mov	r0, r1
 8002d3e:	4611      	mov	r1, r2
 8002d40:	461a      	mov	r2, r3
 8002d42:	4603      	mov	r3, r0
 8002d44:	817b      	strh	r3, [r7, #10]
 8002d46:	460b      	mov	r3, r1
 8002d48:	813b      	strh	r3, [r7, #8]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	f040 80f9 	bne.w	8002f4e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_I2C_Mem_Write+0x34>
 8002d62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0ed      	b.n	8002f50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_I2C_Mem_Write+0x4e>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e0e6      	b.n	8002f50 <HAL_I2C_Mem_Write+0x21c>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d8a:	f7ff f9f3 	bl	8002174 <HAL_GetTick>
 8002d8e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2319      	movs	r3, #25
 8002d96:	2201      	movs	r2, #1
 8002d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fac3 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0d1      	b.n	8002f50 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2221      	movs	r2, #33	; 0x21
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2240      	movs	r2, #64	; 0x40
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a3a      	ldr	r2, [r7, #32]
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dd4:	88f8      	ldrh	r0, [r7, #6]
 8002dd6:	893a      	ldrh	r2, [r7, #8]
 8002dd8:	8979      	ldrh	r1, [r7, #10]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	9301      	str	r3, [sp, #4]
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	4603      	mov	r3, r0
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f9d3 	bl	8003190 <I2C_RequestMemoryWrite>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0a9      	b.n	8002f50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2bff      	cmp	r3, #255	; 0xff
 8002e04:	d90e      	bls.n	8002e24 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	22ff      	movs	r2, #255	; 0xff
 8002e0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	8979      	ldrh	r1, [r7, #10]
 8002e14:	2300      	movs	r3, #0
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fc2b 	bl	8003678 <I2C_TransferConfig>
 8002e22:	e00f      	b.n	8002e44 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	8979      	ldrh	r1, [r7, #10]
 8002e36:	2300      	movs	r3, #0
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fc1a 	bl	8003678 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 faad 	bl	80033a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e07b      	b.n	8002f50 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d034      	beq.n	8002efc <HAL_I2C_Mem_Write+0x1c8>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d130      	bne.n	8002efc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2180      	movs	r1, #128	; 0x80
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fa3f 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e04d      	b.n	8002f50 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2bff      	cmp	r3, #255	; 0xff
 8002ebc:	d90e      	bls.n	8002edc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	22ff      	movs	r2, #255	; 0xff
 8002ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	8979      	ldrh	r1, [r7, #10]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fbcf 	bl	8003678 <I2C_TransferConfig>
 8002eda:	e00f      	b.n	8002efc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	8979      	ldrh	r1, [r7, #10]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fbbe 	bl	8003678 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d19e      	bne.n	8002e44 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fa8c 	bl	8003428 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e01a      	b.n	8002f50 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_I2C_Mem_Write+0x224>)
 8002f2e:	400b      	ands	r3, r1
 8002f30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e000      	b.n	8002f50 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
  }
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	fe00e800 	.word	0xfe00e800

08002f5c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	4608      	mov	r0, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	817b      	strh	r3, [r7, #10]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	813b      	strh	r3, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	f040 80fd 	bne.w	800317e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_I2C_Mem_Read+0x34>
 8002f8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0f1      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_I2C_Mem_Read+0x4e>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e0ea      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fb2:	f7ff f8df 	bl	8002174 <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	2319      	movs	r3, #25
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f9af 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0d5      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2222      	movs	r2, #34	; 0x22
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2240      	movs	r2, #64	; 0x40
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a3a      	ldr	r2, [r7, #32]
 8002fee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ffc:	88f8      	ldrh	r0, [r7, #6]
 8002ffe:	893a      	ldrh	r2, [r7, #8]
 8003000:	8979      	ldrh	r1, [r7, #10]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	4603      	mov	r3, r0
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f913 	bl	8003238 <I2C_RequestMemoryRead>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0ad      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2bff      	cmp	r3, #255	; 0xff
 800302c:	d90e      	bls.n	800304c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	22ff      	movs	r2, #255	; 0xff
 8003032:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	b2da      	uxtb	r2, r3
 800303a:	8979      	ldrh	r1, [r7, #10]
 800303c:	4b52      	ldr	r3, [pc, #328]	; (8003188 <HAL_I2C_Mem_Read+0x22c>)
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fb17 	bl	8003678 <I2C_TransferConfig>
 800304a:	e00f      	b.n	800306c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305a:	b2da      	uxtb	r2, r3
 800305c:	8979      	ldrh	r1, [r7, #10]
 800305e:	4b4a      	ldr	r3, [pc, #296]	; (8003188 <HAL_I2C_Mem_Read+0x22c>)
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fb06 	bl	8003678 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003072:	2200      	movs	r2, #0
 8003074:	2104      	movs	r1, #4
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f956 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e07c      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d034      	beq.n	800312c <HAL_I2C_Mem_Read+0x1d0>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d130      	bne.n	800312c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	2200      	movs	r2, #0
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f927 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e04d      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2bff      	cmp	r3, #255	; 0xff
 80030ec:	d90e      	bls.n	800310c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	22ff      	movs	r2, #255	; 0xff
 80030f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	8979      	ldrh	r1, [r7, #10]
 80030fc:	2300      	movs	r3, #0
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fab7 	bl	8003678 <I2C_TransferConfig>
 800310a:	e00f      	b.n	800312c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	b2da      	uxtb	r2, r3
 800311c:	8979      	ldrh	r1, [r7, #10]
 800311e:	2300      	movs	r3, #0
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 faa6 	bl	8003678 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d19a      	bne.n	800306c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f974 	bl	8003428 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e01a      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2220      	movs	r2, #32
 8003150:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_I2C_Mem_Read+0x230>)
 800315e:	400b      	ands	r3, r1
 8003160:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e000      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800317e:	2302      	movs	r3, #2
  }
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	80002400 	.word	0x80002400
 800318c:	fe00e800 	.word	0xfe00e800

08003190 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	4608      	mov	r0, r1
 800319a:	4611      	mov	r1, r2
 800319c:	461a      	mov	r2, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	817b      	strh	r3, [r7, #10]
 80031a2:	460b      	mov	r3, r1
 80031a4:	813b      	strh	r3, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	8979      	ldrh	r1, [r7, #10]
 80031b0:	4b20      	ldr	r3, [pc, #128]	; (8003234 <I2C_RequestMemoryWrite+0xa4>)
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fa5d 	bl	8003678 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	69b9      	ldr	r1, [r7, #24]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f8f0 	bl	80033a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e02c      	b.n	800322c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d105      	bne.n	80031e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031d8:	893b      	ldrh	r3, [r7, #8]
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	629a      	str	r2, [r3, #40]	; 0x28
 80031e2:	e015      	b.n	8003210 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031e4:	893b      	ldrh	r3, [r7, #8]
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	69b9      	ldr	r1, [r7, #24]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f8d6 	bl	80033a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e012      	b.n	800322c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003206:	893b      	ldrh	r3, [r7, #8]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2200      	movs	r2, #0
 8003218:	2180      	movs	r1, #128	; 0x80
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f884 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	80002000 	.word	0x80002000

08003238 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	4608      	mov	r0, r1
 8003242:	4611      	mov	r1, r2
 8003244:	461a      	mov	r2, r3
 8003246:	4603      	mov	r3, r0
 8003248:	817b      	strh	r3, [r7, #10]
 800324a:	460b      	mov	r3, r1
 800324c:	813b      	strh	r3, [r7, #8]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	8979      	ldrh	r1, [r7, #10]
 8003258:	4b20      	ldr	r3, [pc, #128]	; (80032dc <I2C_RequestMemoryRead+0xa4>)
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	2300      	movs	r3, #0
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 fa0a 	bl	8003678 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	69b9      	ldr	r1, [r7, #24]
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f89d 	bl	80033a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e02c      	b.n	80032d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d105      	bne.n	800328a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800327e:	893b      	ldrh	r3, [r7, #8]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
 8003288:	e015      	b.n	80032b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800328a:	893b      	ldrh	r3, [r7, #8]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	b29b      	uxth	r3, r3
 8003290:	b2da      	uxtb	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	69b9      	ldr	r1, [r7, #24]
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f883 	bl	80033a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e012      	b.n	80032d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032ac:	893b      	ldrh	r3, [r7, #8]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	2200      	movs	r2, #0
 80032be:	2140      	movs	r1, #64	; 0x40
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f831 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	80002000 	.word	0x80002000

080032e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d103      	bne.n	80032fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2200      	movs	r2, #0
 80032fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d007      	beq.n	800331c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	619a      	str	r2, [r3, #24]
  }
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	4613      	mov	r3, r2
 8003336:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003338:	e022      	b.n	8003380 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003340:	d01e      	beq.n	8003380 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003342:	f7fe ff17 	bl	8002174 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d302      	bcc.n	8003358 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d113      	bne.n	8003380 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335c:	f043 0220 	orr.w	r2, r3, #32
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e00f      	b.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4013      	ands	r3, r2
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	429a      	cmp	r2, r3
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	429a      	cmp	r2, r3
 800339c:	d0cd      	beq.n	800333a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033b4:	e02c      	b.n	8003410 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f870 	bl	80034a0 <I2C_IsErrorOccurred>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e02a      	b.n	8003420 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d01e      	beq.n	8003410 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d2:	f7fe fecf 	bl	8002174 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d302      	bcc.n	80033e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d113      	bne.n	8003410 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ec:	f043 0220 	orr.w	r2, r3, #32
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e007      	b.n	8003420 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b02      	cmp	r3, #2
 800341c:	d1cb      	bne.n	80033b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003434:	e028      	b.n	8003488 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f830 	bl	80034a0 <I2C_IsErrorOccurred>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e026      	b.n	8003498 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344a:	f7fe fe93 	bl	8002174 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	429a      	cmp	r2, r3
 8003458:	d302      	bcc.n	8003460 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d113      	bne.n	8003488 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	f043 0220 	orr.w	r2, r3, #32
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e007      	b.n	8003498 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b20      	cmp	r3, #32
 8003494:	d1cf      	bne.n	8003436 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d075      	beq.n	80035b8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2210      	movs	r2, #16
 80034d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034d4:	e056      	b.n	8003584 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d052      	beq.n	8003584 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034de:	f7fe fe49 	bl	8002174 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d302      	bcc.n	80034f4 <I2C_IsErrorOccurred+0x54>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d147      	bne.n	8003584 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003506:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003516:	d12e      	bne.n	8003576 <I2C_IsErrorOccurred+0xd6>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800351e:	d02a      	beq.n	8003576 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	2b20      	cmp	r3, #32
 8003524:	d027      	beq.n	8003576 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003534:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003536:	f7fe fe1d 	bl	8002174 <HAL_GetTick>
 800353a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800353c:	e01b      	b.n	8003576 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800353e:	f7fe fe19 	bl	8002174 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b19      	cmp	r3, #25
 800354a:	d914      	bls.n	8003576 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b20      	cmp	r3, #32
 8003582:	d1dc      	bne.n	800353e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b20      	cmp	r3, #32
 8003590:	d003      	beq.n	800359a <I2C_IsErrorOccurred+0xfa>
 8003592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003596:	2b00      	cmp	r3, #0
 8003598:	d09d      	beq.n	80034d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800359a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2220      	movs	r2, #32
 80035a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00b      	beq.n	8003604 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f043 0308 	orr.w	r3, r3, #8
 80035f2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f043 0302 	orr.w	r3, r3, #2
 8003614:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800361e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01c      	beq.n	8003668 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f7ff fe56 	bl	80032e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <I2C_IsErrorOccurred+0x1d4>)
 8003640:	400b      	ands	r3, r1
 8003642:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	431a      	orrs	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800366c:	4618      	mov	r0, r3
 800366e:	3728      	adds	r7, #40	; 0x28
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	fe00e800 	.word	0xfe00e800

08003678 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	817b      	strh	r3, [r7, #10]
 8003686:	4613      	mov	r3, r2
 8003688:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003690:	7a7b      	ldrb	r3, [r7, #9]
 8003692:	041b      	lsls	r3, r3, #16
 8003694:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003698:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	0d5b      	lsrs	r3, r3, #21
 80036b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <I2C_TransferConfig+0x60>)
 80036b8:	430b      	orrs	r3, r1
 80036ba:	43db      	mvns	r3, r3
 80036bc:	ea02 0103 	and.w	r1, r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	03ff63ff 	.word	0x03ff63ff

080036dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d138      	bne.n	8003764 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e032      	b.n	8003766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2224      	movs	r2, #36	; 0x24
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800372e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <HAL_PWREx_GetVoltageRange+0x18>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40007000 	.word	0x40007000

08003790 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379e:	d130      	bne.n	8003802 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037a0:	4b23      	ldr	r3, [pc, #140]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ac:	d038      	beq.n	8003820 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037b6:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037be:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2232      	movs	r2, #50	; 0x32
 80037c4:	fb02 f303 	mul.w	r3, r2, r3
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0c9b      	lsrs	r3, r3, #18
 80037d0:	3301      	adds	r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037d4:	e002      	b.n	80037dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3b01      	subs	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037dc:	4b14      	ldr	r3, [pc, #80]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e8:	d102      	bne.n	80037f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f2      	bne.n	80037d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fc:	d110      	bne.n	8003820 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e00f      	b.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380e:	d007      	beq.n	8003820 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003818:	4a05      	ldr	r2, [pc, #20]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800381e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40007000 	.word	0x40007000
 8003834:	20000000 	.word	0x20000000
 8003838:	431bde83 	.word	0x431bde83

0800383c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e3ca      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800384e:	4b97      	ldr	r3, [pc, #604]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003858:	4b94      	ldr	r3, [pc, #592]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80e4 	beq.w	8003a38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <HAL_RCC_OscConfig+0x4a>
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b0c      	cmp	r3, #12
 800387a:	f040 808b 	bne.w	8003994 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b01      	cmp	r3, #1
 8003882:	f040 8087 	bne.w	8003994 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003886:	4b89      	ldr	r3, [pc, #548]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_RCC_OscConfig+0x62>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e3a2      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1a      	ldr	r2, [r3, #32]
 80038a2:	4b82      	ldr	r3, [pc, #520]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <HAL_RCC_OscConfig+0x7c>
 80038ae:	4b7f      	ldr	r3, [pc, #508]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b6:	e005      	b.n	80038c4 <HAL_RCC_OscConfig+0x88>
 80038b8:	4b7c      	ldr	r3, [pc, #496]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d223      	bcs.n	8003910 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fd87 	bl	80043e0 <RCC_SetFlashLatencyFromMSIRange>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e383      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038dc:	4b73      	ldr	r3, [pc, #460]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a72      	ldr	r2, [pc, #456]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038e2:	f043 0308 	orr.w	r3, r3, #8
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b70      	ldr	r3, [pc, #448]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	496d      	ldr	r1, [pc, #436]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038fa:	4b6c      	ldr	r3, [pc, #432]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	4968      	ldr	r1, [pc, #416]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]
 800390e:	e025      	b.n	800395c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003910:	4b66      	ldr	r3, [pc, #408]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a65      	ldr	r2, [pc, #404]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003916:	f043 0308 	orr.w	r3, r3, #8
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b63      	ldr	r3, [pc, #396]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4960      	ldr	r1, [pc, #384]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800392e:	4b5f      	ldr	r3, [pc, #380]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	495b      	ldr	r1, [pc, #364]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fd47 	bl	80043e0 <RCC_SetFlashLatencyFromMSIRange>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e343      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800395c:	f000 fc4a 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b52      	ldr	r3, [pc, #328]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	4950      	ldr	r1, [pc, #320]	; (8003ab0 <HAL_RCC_OscConfig+0x274>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
 8003978:	4a4e      	ldr	r2, [pc, #312]	; (8003ab4 <HAL_RCC_OscConfig+0x278>)
 800397a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800397c:	4b4e      	ldr	r3, [pc, #312]	; (8003ab8 <HAL_RCC_OscConfig+0x27c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fd fcf7 	bl	8001374 <HAL_InitTick>
 8003986:	4603      	mov	r3, r0
 8003988:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d052      	beq.n	8003a36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	e327      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d032      	beq.n	8003a02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800399c:	4b43      	ldr	r3, [pc, #268]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a42      	ldr	r2, [pc, #264]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039a8:	f7fe fbe4 	bl	8002174 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039b0:	f7fe fbe0 	bl	8002174 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e310      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039c2:	4b3a      	ldr	r3, [pc, #232]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ce:	4b37      	ldr	r3, [pc, #220]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a36      	ldr	r2, [pc, #216]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039d4:	f043 0308 	orr.w	r3, r3, #8
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b34      	ldr	r3, [pc, #208]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4931      	ldr	r1, [pc, #196]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ec:	4b2f      	ldr	r3, [pc, #188]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	492c      	ldr	r1, [pc, #176]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
 8003a00:	e01a      	b.n	8003a38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a02:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a29      	ldr	r2, [pc, #164]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a0e:	f7fe fbb1 	bl	8002174 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a16:	f7fe fbad 	bl	8002174 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e2dd      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a28:	4b20      	ldr	r3, [pc, #128]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f0      	bne.n	8003a16 <HAL_RCC_OscConfig+0x1da>
 8003a34:	e000      	b.n	8003a38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d074      	beq.n	8003b2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d005      	beq.n	8003a56 <HAL_RCC_OscConfig+0x21a>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	d10e      	bne.n	8003a6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d10b      	bne.n	8003a6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a56:	4b15      	ldr	r3, [pc, #84]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d064      	beq.n	8003b2c <HAL_RCC_OscConfig+0x2f0>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d160      	bne.n	8003b2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e2ba      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a76:	d106      	bne.n	8003a86 <HAL_RCC_OscConfig+0x24a>
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0b      	ldr	r2, [pc, #44]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	e026      	b.n	8003ad4 <HAL_RCC_OscConfig+0x298>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a8e:	d115      	bne.n	8003abc <HAL_RCC_OscConfig+0x280>
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a05      	ldr	r2, [pc, #20]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a02      	ldr	r2, [pc, #8]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	e014      	b.n	8003ad4 <HAL_RCC_OscConfig+0x298>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	0800dda0 	.word	0x0800dda0
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	20000038 	.word	0x20000038
 8003abc:	4ba0      	ldr	r3, [pc, #640]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a9f      	ldr	r2, [pc, #636]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b9d      	ldr	r3, [pc, #628]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a9c      	ldr	r2, [pc, #624]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d013      	beq.n	8003b04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fe fb4a 	bl	8002174 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fe fb46 	bl	8002174 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e276      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003af6:	4b92      	ldr	r3, [pc, #584]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x2a8>
 8003b02:	e014      	b.n	8003b2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fe fb36 	bl	8002174 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fe fb32 	bl	8002174 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e262      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b1e:	4b88      	ldr	r3, [pc, #544]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x2d0>
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d060      	beq.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_OscConfig+0x310>
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b0c      	cmp	r3, #12
 8003b44:	d119      	bne.n	8003b7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d116      	bne.n	8003b7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b4c:	4b7c      	ldr	r3, [pc, #496]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_RCC_OscConfig+0x328>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e23f      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b64:	4b76      	ldr	r3, [pc, #472]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	061b      	lsls	r3, r3, #24
 8003b72:	4973      	ldr	r1, [pc, #460]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b78:	e040      	b.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d023      	beq.n	8003bca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b82:	4b6f      	ldr	r3, [pc, #444]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a6e      	ldr	r2, [pc, #440]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8e:	f7fe faf1 	bl	8002174 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b96:	f7fe faed 	bl	8002174 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e21d      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ba8:	4b65      	ldr	r3, [pc, #404]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb4:	4b62      	ldr	r3, [pc, #392]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	061b      	lsls	r3, r3, #24
 8003bc2:	495f      	ldr	r1, [pc, #380]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
 8003bc8:	e018      	b.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bca:	4b5d      	ldr	r3, [pc, #372]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a5c      	ldr	r2, [pc, #368]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd6:	f7fe facd 	bl	8002174 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bde:	f7fe fac9 	bl	8002174 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e1f9      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f0      	bne.n	8003bde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d03c      	beq.n	8003c82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01c      	beq.n	8003c4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c10:	4b4b      	ldr	r3, [pc, #300]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c16:	4a4a      	ldr	r2, [pc, #296]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fe faa8 	bl	8002174 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c28:	f7fe faa4 	bl	8002174 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e1d4      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c3a:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0ef      	beq.n	8003c28 <HAL_RCC_OscConfig+0x3ec>
 8003c48:	e01b      	b.n	8003c82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c50:	4a3b      	ldr	r2, [pc, #236]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5a:	f7fe fa8b 	bl	8002174 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c62:	f7fe fa87 	bl	8002174 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e1b7      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c74:	4b32      	ldr	r3, [pc, #200]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1ef      	bne.n	8003c62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80a6 	beq.w	8003ddc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c90:	2300      	movs	r3, #0
 8003c92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c94:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10d      	bne.n	8003cbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	4a26      	ldr	r2, [pc, #152]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003caa:	6593      	str	r3, [r2, #88]	; 0x58
 8003cac:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cbc:	4b21      	ldr	r3, [pc, #132]	; (8003d44 <HAL_RCC_OscConfig+0x508>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d118      	bne.n	8003cfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <HAL_RCC_OscConfig+0x508>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <HAL_RCC_OscConfig+0x508>)
 8003cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd4:	f7fe fa4e 	bl	8002174 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cdc:	f7fe fa4a 	bl	8002174 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e17a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_RCC_OscConfig+0x508>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d108      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4d8>
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d08:	4a0d      	ldr	r2, [pc, #52]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d12:	e029      	b.n	8003d68 <HAL_RCC_OscConfig+0x52c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b05      	cmp	r3, #5
 8003d1a:	d115      	bne.n	8003d48 <HAL_RCC_OscConfig+0x50c>
 8003d1c:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	4a03      	ldr	r2, [pc, #12]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d3c:	e014      	b.n	8003d68 <HAL_RCC_OscConfig+0x52c>
 8003d3e:	bf00      	nop
 8003d40:	40021000 	.word	0x40021000
 8003d44:	40007000 	.word	0x40007000
 8003d48:	4b9c      	ldr	r3, [pc, #624]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	4a9b      	ldr	r2, [pc, #620]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d58:	4b98      	ldr	r3, [pc, #608]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5e:	4a97      	ldr	r2, [pc, #604]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d60:	f023 0304 	bic.w	r3, r3, #4
 8003d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d016      	beq.n	8003d9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fe fa00 	bl	8002174 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fe f9fc 	bl	8002174 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e12a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d8e:	4b8b      	ldr	r3, [pc, #556]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ed      	beq.n	8003d78 <HAL_RCC_OscConfig+0x53c>
 8003d9c:	e015      	b.n	8003dca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9e:	f7fe f9e9 	bl	8002174 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7fe f9e5 	bl	8002174 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e113      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dbc:	4b7f      	ldr	r3, [pc, #508]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1ed      	bne.n	8003da6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dca:	7ffb      	ldrb	r3, [r7, #31]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd0:	4b7a      	ldr	r3, [pc, #488]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	4a79      	ldr	r2, [pc, #484]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80fe 	beq.w	8003fe2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	f040 80d0 	bne.w	8003f90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003df0:	4b72      	ldr	r3, [pc, #456]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f003 0203 	and.w	r2, r3, #3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d130      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d127      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d11f      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e30:	2a07      	cmp	r2, #7
 8003e32:	bf14      	ite	ne
 8003e34:	2201      	movne	r2, #1
 8003e36:	2200      	moveq	r2, #0
 8003e38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d113      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d109      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d06e      	beq.n	8003f44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	d069      	beq.n	8003f40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e6c:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e78:	4b50      	ldr	r3, [pc, #320]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0ad      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e88:	4b4c      	ldr	r3, [pc, #304]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a4b      	ldr	r2, [pc, #300]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e94:	f7fe f96e 	bl	8002174 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fe f96a 	bl	8002174 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e09a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eae:	4b43      	ldr	r3, [pc, #268]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eba:	4b40      	ldr	r3, [pc, #256]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	4b40      	ldr	r3, [pc, #256]	; (8003fc0 <HAL_RCC_OscConfig+0x784>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003eca:	3a01      	subs	r2, #1
 8003ecc:	0112      	lsls	r2, r2, #4
 8003ece:	4311      	orrs	r1, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ed4:	0212      	lsls	r2, r2, #8
 8003ed6:	4311      	orrs	r1, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003edc:	0852      	lsrs	r2, r2, #1
 8003ede:	3a01      	subs	r2, #1
 8003ee0:	0552      	lsls	r2, r2, #21
 8003ee2:	4311      	orrs	r1, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ee8:	0852      	lsrs	r2, r2, #1
 8003eea:	3a01      	subs	r2, #1
 8003eec:	0652      	lsls	r2, r2, #25
 8003eee:	4311      	orrs	r1, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ef4:	0912      	lsrs	r2, r2, #4
 8003ef6:	0452      	lsls	r2, r2, #17
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	4930      	ldr	r1, [pc, #192]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f00:	4b2e      	ldr	r3, [pc, #184]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a2d      	ldr	r2, [pc, #180]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f18:	f7fe f92c 	bl	8002174 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fe f928 	bl	8002174 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e058      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f32:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f3e:	e050      	b.n	8003fe2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e04f      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d148      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f50:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4a16      	ldr	r2, [pc, #88]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f68:	f7fe f904 	bl	8002174 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fe f900 	bl	8002174 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e030      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x734>
 8003f8e:	e028      	b.n	8003fe2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b0c      	cmp	r3, #12
 8003f94:	d023      	beq.n	8003fde <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7fe f8e7 	bl	8002174 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa8:	e00c      	b.n	8003fc4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fe f8e3 	bl	8002174 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d905      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e013      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_RCC_OscConfig+0x7b0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ec      	bne.n	8003faa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_RCC_OscConfig+0x7b0>)
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	4905      	ldr	r1, [pc, #20]	; (8003fec <HAL_RCC_OscConfig+0x7b0>)
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_RCC_OscConfig+0x7b4>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60cb      	str	r3, [r1, #12]
 8003fdc:	e001      	b.n	8003fe2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	feeefffc 	.word	0xfeeefffc

08003ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0e7      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004008:	4b75      	ldr	r3, [pc, #468]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d910      	bls.n	8004038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004016:	4b72      	ldr	r3, [pc, #456]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 0207 	bic.w	r2, r3, #7
 800401e:	4970      	ldr	r1, [pc, #448]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004026:	4b6e      	ldr	r3, [pc, #440]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0cf      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d010      	beq.n	8004066 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	4b66      	ldr	r3, [pc, #408]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004050:	429a      	cmp	r2, r3
 8004052:	d908      	bls.n	8004066 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004054:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4960      	ldr	r1, [pc, #384]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d04c      	beq.n	800410c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b03      	cmp	r3, #3
 8004078:	d107      	bne.n	800408a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800407a:	4b5a      	ldr	r3, [pc, #360]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d121      	bne.n	80040ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0a6      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004092:	4b54      	ldr	r3, [pc, #336]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d115      	bne.n	80040ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e09a      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040aa:	4b4e      	ldr	r3, [pc, #312]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e08e      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ba:	4b4a      	ldr	r3, [pc, #296]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e086      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040ca:	4b46      	ldr	r3, [pc, #280]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4943      	ldr	r1, [pc, #268]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040dc:	f7fe f84a 	bl	8002174 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e4:	f7fe f846 	bl	8002174 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e06e      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	4b3a      	ldr	r3, [pc, #232]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 020c 	and.w	r2, r3, #12
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	429a      	cmp	r2, r3
 800410a:	d1eb      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d010      	beq.n	800413a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004124:	429a      	cmp	r2, r3
 8004126:	d208      	bcs.n	800413a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004128:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	492b      	ldr	r1, [pc, #172]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800413a:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d210      	bcs.n	800416a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004148:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 0207 	bic.w	r2, r3, #7
 8004150:	4923      	ldr	r1, [pc, #140]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004158:	4b21      	ldr	r3, [pc, #132]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d001      	beq.n	800416a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e036      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004176:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	4918      	ldr	r1, [pc, #96]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004184:	4313      	orrs	r3, r2
 8004186:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d009      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4910      	ldr	r1, [pc, #64]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041a8:	f000 f824 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	490b      	ldr	r1, [pc, #44]	; (80041e8 <HAL_RCC_ClockConfig+0x1f4>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	4a09      	ldr	r2, [pc, #36]	; (80041ec <HAL_RCC_ClockConfig+0x1f8>)
 80041c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041c8:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <HAL_RCC_ClockConfig+0x1fc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fd f8d1 	bl	8001374 <HAL_InitTick>
 80041d2:	4603      	mov	r3, r0
 80041d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80041d6:	7afb      	ldrb	r3, [r7, #11]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40022000 	.word	0x40022000
 80041e4:	40021000 	.word	0x40021000
 80041e8:	0800dda0 	.word	0x0800dda0
 80041ec:	20000000 	.word	0x20000000
 80041f0:	20000038 	.word	0x20000038

080041f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	; 0x24
 80041f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004202:	4b3e      	ldr	r3, [pc, #248]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800420c:	4b3b      	ldr	r3, [pc, #236]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x34>
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d121      	bne.n	8004266 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d11e      	bne.n	8004266 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004228:	4b34      	ldr	r3, [pc, #208]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004234:	4b31      	ldr	r3, [pc, #196]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	e005      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004244:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004250:	4a2b      	ldr	r2, [pc, #172]	; (8004300 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004258:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10d      	bne.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004264:	e00a      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d102      	bne.n	8004272 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800426c:	4b25      	ldr	r3, [pc, #148]	; (8004304 <HAL_RCC_GetSysClockFreq+0x110>)
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	e004      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d101      	bne.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004278:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_RCC_GetSysClockFreq+0x114>)
 800427a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d134      	bne.n	80042ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004282:	4b1e      	ldr	r3, [pc, #120]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d003      	beq.n	800429a <HAL_RCC_GetSysClockFreq+0xa6>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d003      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0xac>
 8004298:	e005      	b.n	80042a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800429a:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <HAL_RCC_GetSysClockFreq+0x110>)
 800429c:	617b      	str	r3, [r7, #20]
      break;
 800429e:	e005      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <HAL_RCC_GetSysClockFreq+0x114>)
 80042a2:	617b      	str	r3, [r7, #20]
      break;
 80042a4:	e002      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	617b      	str	r3, [r7, #20]
      break;
 80042aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042ac:	4b13      	ldr	r3, [pc, #76]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	3301      	adds	r3, #1
 80042b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042ba:	4b10      	ldr	r3, [pc, #64]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	fb03 f202 	mul.w	r2, r3, r2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	0e5b      	lsrs	r3, r3, #25
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	3301      	adds	r3, #1
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042ec:	69bb      	ldr	r3, [r7, #24]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3724      	adds	r7, #36	; 0x24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000
 8004300:	0800ddb8 	.word	0x0800ddb8
 8004304:	00f42400 	.word	0x00f42400
 8004308:	007a1200 	.word	0x007a1200

0800430c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <HAL_RCC_GetHCLKFreq+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000000 	.word	0x20000000

08004324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004328:	f7ff fff0 	bl	800430c <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4904      	ldr	r1, [pc, #16]	; (800434c <HAL_RCC_GetPCLK1Freq+0x28>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	0800ddb0 	.word	0x0800ddb0

08004350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004354:	f7ff ffda 	bl	800430c <HAL_RCC_GetHCLKFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	0adb      	lsrs	r3, r3, #11
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4904      	ldr	r1, [pc, #16]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40021000 	.word	0x40021000
 8004378:	0800ddb0 	.word	0x0800ddb0

0800437c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	220f      	movs	r2, #15
 800438a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800438c:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0203 	and.w	r2, r3, #3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	08db      	lsrs	r3, r3, #3
 80043b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80043be:	4b07      	ldr	r3, [pc, #28]	; (80043dc <HAL_RCC_GetClockConfig+0x60>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0207 	and.w	r2, r3, #7
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40022000 	.word	0x40022000

080043e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043ec:	4b2a      	ldr	r3, [pc, #168]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043f8:	f7ff f9bc 	bl	8003774 <HAL_PWREx_GetVoltageRange>
 80043fc:	6178      	str	r0, [r7, #20]
 80043fe:	e014      	b.n	800442a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004400:	4b25      	ldr	r3, [pc, #148]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004404:	4a24      	ldr	r2, [pc, #144]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440a:	6593      	str	r3, [r2, #88]	; 0x58
 800440c:	4b22      	ldr	r3, [pc, #136]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004418:	f7ff f9ac 	bl	8003774 <HAL_PWREx_GetVoltageRange>
 800441c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800441e:	4b1e      	ldr	r3, [pc, #120]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004422:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004428:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004430:	d10b      	bne.n	800444a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b80      	cmp	r3, #128	; 0x80
 8004436:	d919      	bls.n	800446c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2ba0      	cmp	r3, #160	; 0xa0
 800443c:	d902      	bls.n	8004444 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800443e:	2302      	movs	r3, #2
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	e013      	b.n	800446c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004444:	2301      	movs	r3, #1
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	e010      	b.n	800446c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b80      	cmp	r3, #128	; 0x80
 800444e:	d902      	bls.n	8004456 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004450:	2303      	movs	r3, #3
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	e00a      	b.n	800446c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b80      	cmp	r3, #128	; 0x80
 800445a:	d102      	bne.n	8004462 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800445c:	2302      	movs	r3, #2
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	e004      	b.n	800446c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b70      	cmp	r3, #112	; 0x70
 8004466:	d101      	bne.n	800446c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004468:	2301      	movs	r3, #1
 800446a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f023 0207 	bic.w	r2, r3, #7
 8004474:	4909      	ldr	r1, [pc, #36]	; (800449c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800447c:	4b07      	ldr	r3, [pc, #28]	; (800449c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	429a      	cmp	r2, r3
 8004488:	d001      	beq.n	800448e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	40022000 	.word	0x40022000

080044a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044a8:	2300      	movs	r3, #0
 80044aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044ac:	2300      	movs	r3, #0
 80044ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d041      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044c4:	d02a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044ca:	d824      	bhi.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044d0:	d008      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044d6:	d81e      	bhi.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e0:	d010      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044e2:	e018      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044e4:	4b86      	ldr	r3, [pc, #536]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4a85      	ldr	r2, [pc, #532]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044f0:	e015      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3304      	adds	r3, #4
 80044f6:	2100      	movs	r1, #0
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fabb 	bl	8004a74 <RCCEx_PLLSAI1_Config>
 80044fe:	4603      	mov	r3, r0
 8004500:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004502:	e00c      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3320      	adds	r3, #32
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fba6 	bl	8004c5c <RCCEx_PLLSAI2_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004514:	e003      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	74fb      	strb	r3, [r7, #19]
      break;
 800451a:	e000      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800451c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800451e:	7cfb      	ldrb	r3, [r7, #19]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10b      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004524:	4b76      	ldr	r3, [pc, #472]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004532:	4973      	ldr	r1, [pc, #460]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800453a:	e001      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453c:	7cfb      	ldrb	r3, [r7, #19]
 800453e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d041      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004550:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004554:	d02a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004556:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800455a:	d824      	bhi.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800455c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004560:	d008      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004566:	d81e      	bhi.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800456c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004570:	d010      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004572:	e018      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004574:	4b62      	ldr	r3, [pc, #392]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a61      	ldr	r2, [pc, #388]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004580:	e015      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3304      	adds	r3, #4
 8004586:	2100      	movs	r1, #0
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fa73 	bl	8004a74 <RCCEx_PLLSAI1_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004592:	e00c      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3320      	adds	r3, #32
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fb5e 	bl	8004c5c <RCCEx_PLLSAI2_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045a4:	e003      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	74fb      	strb	r3, [r7, #19]
      break;
 80045aa:	e000      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ae:	7cfb      	ldrb	r3, [r7, #19]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10b      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045b4:	4b52      	ldr	r3, [pc, #328]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c2:	494f      	ldr	r1, [pc, #316]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045ca:	e001      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045cc:	7cfb      	ldrb	r3, [r7, #19]
 80045ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80a0 	beq.w	800471e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045de:	2300      	movs	r3, #0
 80045e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045e2:	4b47      	ldr	r3, [pc, #284]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045f2:	2300      	movs	r3, #0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00d      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f8:	4b41      	ldr	r3, [pc, #260]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fc:	4a40      	ldr	r2, [pc, #256]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004602:	6593      	str	r3, [r2, #88]	; 0x58
 8004604:	4b3e      	ldr	r3, [pc, #248]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004610:	2301      	movs	r3, #1
 8004612:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004614:	4b3b      	ldr	r3, [pc, #236]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a3a      	ldr	r2, [pc, #232]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800461a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004620:	f7fd fda8 	bl	8002174 <HAL_GetTick>
 8004624:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004626:	e009      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004628:	f7fd fda4 	bl	8002174 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d902      	bls.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	74fb      	strb	r3, [r7, #19]
        break;
 800463a:	e005      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800463c:	4b31      	ldr	r3, [pc, #196]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0ef      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004648:	7cfb      	ldrb	r3, [r7, #19]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d15c      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800464e:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004658:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01f      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	429a      	cmp	r2, r3
 800466a:	d019      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800466c:	4b24      	ldr	r3, [pc, #144]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004676:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004678:	4b21      	ldr	r3, [pc, #132]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	4a20      	ldr	r2, [pc, #128]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004688:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	4a1c      	ldr	r2, [pc, #112]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004698:	4a19      	ldr	r2, [pc, #100]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d016      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046aa:	f7fd fd63 	bl	8002174 <HAL_GetTick>
 80046ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b0:	e00b      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b2:	f7fd fd5f 	bl	8002174 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d902      	bls.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	74fb      	strb	r3, [r7, #19]
            break;
 80046c8:	e006      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ca:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ec      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80046d8:	7cfb      	ldrb	r3, [r7, #19]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046de:	4b08      	ldr	r3, [pc, #32]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ee:	4904      	ldr	r1, [pc, #16]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046f6:	e009      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	74bb      	strb	r3, [r7, #18]
 80046fc:	e006      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
 8004704:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800470c:	7c7b      	ldrb	r3, [r7, #17]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d105      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004712:	4b9e      	ldr	r3, [pc, #632]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	4a9d      	ldr	r2, [pc, #628]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800471c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800472a:	4b98      	ldr	r3, [pc, #608]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f023 0203 	bic.w	r2, r3, #3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	4994      	ldr	r1, [pc, #592]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800474c:	4b8f      	ldr	r3, [pc, #572]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	f023 020c 	bic.w	r2, r3, #12
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475a:	498c      	ldr	r1, [pc, #560]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800476e:	4b87      	ldr	r3, [pc, #540]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	4983      	ldr	r1, [pc, #524]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004790:	4b7e      	ldr	r3, [pc, #504]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	497b      	ldr	r1, [pc, #492]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047b2:	4b76      	ldr	r3, [pc, #472]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c0:	4972      	ldr	r1, [pc, #456]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0320 	and.w	r3, r3, #32
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047d4:	4b6d      	ldr	r3, [pc, #436]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e2:	496a      	ldr	r1, [pc, #424]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047f6:	4b65      	ldr	r3, [pc, #404]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004804:	4961      	ldr	r1, [pc, #388]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004818:	4b5c      	ldr	r3, [pc, #368]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004826:	4959      	ldr	r1, [pc, #356]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800483a:	4b54      	ldr	r3, [pc, #336]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004848:	4950      	ldr	r1, [pc, #320]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800485c:	4b4b      	ldr	r3, [pc, #300]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486a:	4948      	ldr	r1, [pc, #288]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800487e:	4b43      	ldr	r3, [pc, #268]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488c:	493f      	ldr	r1, [pc, #252]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d028      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048a0:	4b3a      	ldr	r3, [pc, #232]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ae:	4937      	ldr	r1, [pc, #220]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048be:	d106      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c0:	4b32      	ldr	r3, [pc, #200]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4a31      	ldr	r2, [pc, #196]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ca:	60d3      	str	r3, [r2, #12]
 80048cc:	e011      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048d6:	d10c      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	2101      	movs	r1, #1
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f8c8 	bl	8004a74 <RCCEx_PLLSAI1_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048e8:	7cfb      	ldrb	r3, [r7, #19]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80048ee:	7cfb      	ldrb	r3, [r7, #19]
 80048f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d028      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048fe:	4b23      	ldr	r3, [pc, #140]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004904:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490c:	491f      	ldr	r1, [pc, #124]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800491c:	d106      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800491e:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	4a1a      	ldr	r2, [pc, #104]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004928:	60d3      	str	r3, [r2, #12]
 800492a:	e011      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004934:	d10c      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3304      	adds	r3, #4
 800493a:	2101      	movs	r1, #1
 800493c:	4618      	mov	r0, r3
 800493e:	f000 f899 	bl	8004a74 <RCCEx_PLLSAI1_Config>
 8004942:	4603      	mov	r3, r0
 8004944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004946:	7cfb      	ldrb	r3, [r7, #19]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800494c:	7cfb      	ldrb	r3, [r7, #19]
 800494e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d02b      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496a:	4908      	ldr	r1, [pc, #32]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004976:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800497a:	d109      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800497c:	4b03      	ldr	r3, [pc, #12]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a02      	ldr	r2, [pc, #8]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004986:	60d3      	str	r3, [r2, #12]
 8004988:	e014      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004998:	d10c      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3304      	adds	r3, #4
 800499e:	2101      	movs	r1, #1
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 f867 	bl	8004a74 <RCCEx_PLLSAI1_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049aa:	7cfb      	ldrb	r3, [r7, #19]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80049b0:	7cfb      	ldrb	r3, [r7, #19]
 80049b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d02f      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049c0:	4b2b      	ldr	r3, [pc, #172]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ce:	4928      	ldr	r1, [pc, #160]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049de:	d10d      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	2102      	movs	r1, #2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f844 	bl	8004a74 <RCCEx_PLLSAI1_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049f0:	7cfb      	ldrb	r3, [r7, #19]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d014      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	74bb      	strb	r3, [r7, #18]
 80049fa:	e011      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3320      	adds	r3, #32
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f925 	bl	8004c5c <RCCEx_PLLSAI2_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a16:	7cfb      	ldrb	r3, [r7, #19]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a1c:	7cfb      	ldrb	r3, [r7, #19]
 8004a1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a2c:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a3a:	490d      	ldr	r1, [pc, #52]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a4e:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a5e:	4904      	ldr	r1, [pc, #16]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a66:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40021000 	.word	0x40021000

08004a74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a82:	4b75      	ldr	r3, [pc, #468]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d018      	beq.n	8004ac0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a8e:	4b72      	ldr	r3, [pc, #456]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0203 	and.w	r2, r3, #3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d10d      	bne.n	8004aba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
       ||
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d009      	beq.n	8004aba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004aa6:	4b6c      	ldr	r3, [pc, #432]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	091b      	lsrs	r3, r3, #4
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d047      	beq.n	8004b4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
 8004abe:	e044      	b.n	8004b4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d018      	beq.n	8004afa <RCCEx_PLLSAI1_Config+0x86>
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d825      	bhi.n	8004b18 <RCCEx_PLLSAI1_Config+0xa4>
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d002      	beq.n	8004ad6 <RCCEx_PLLSAI1_Config+0x62>
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d009      	beq.n	8004ae8 <RCCEx_PLLSAI1_Config+0x74>
 8004ad4:	e020      	b.n	8004b18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ad6:	4b60      	ldr	r3, [pc, #384]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d11d      	bne.n	8004b1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ae6:	e01a      	b.n	8004b1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ae8:	4b5b      	ldr	r3, [pc, #364]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d116      	bne.n	8004b22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af8:	e013      	b.n	8004b22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004afa:	4b57      	ldr	r3, [pc, #348]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10f      	bne.n	8004b26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b06:	4b54      	ldr	r3, [pc, #336]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b16:	e006      	b.n	8004b26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b1c:	e004      	b.n	8004b28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b1e:	bf00      	nop
 8004b20:	e002      	b.n	8004b28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b22:	bf00      	nop
 8004b24:	e000      	b.n	8004b28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b26:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10d      	bne.n	8004b4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b2e:	4b4a      	ldr	r3, [pc, #296]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6819      	ldr	r1, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	430b      	orrs	r3, r1
 8004b44:	4944      	ldr	r1, [pc, #272]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d17d      	bne.n	8004c4c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b50:	4b41      	ldr	r3, [pc, #260]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a40      	ldr	r2, [pc, #256]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5c:	f7fd fb0a 	bl	8002174 <HAL_GetTick>
 8004b60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b62:	e009      	b.n	8004b78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b64:	f7fd fb06 	bl	8002174 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d902      	bls.n	8004b78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	73fb      	strb	r3, [r7, #15]
        break;
 8004b76:	e005      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b78:	4b37      	ldr	r3, [pc, #220]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1ef      	bne.n	8004b64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d160      	bne.n	8004c4c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d111      	bne.n	8004bb4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b90:	4b31      	ldr	r3, [pc, #196]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6892      	ldr	r2, [r2, #8]
 8004ba0:	0211      	lsls	r1, r2, #8
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68d2      	ldr	r2, [r2, #12]
 8004ba6:	0912      	lsrs	r2, r2, #4
 8004ba8:	0452      	lsls	r2, r2, #17
 8004baa:	430a      	orrs	r2, r1
 8004bac:	492a      	ldr	r1, [pc, #168]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	610b      	str	r3, [r1, #16]
 8004bb2:	e027      	b.n	8004c04 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d112      	bne.n	8004be0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bba:	4b27      	ldr	r3, [pc, #156]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004bc2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6892      	ldr	r2, [r2, #8]
 8004bca:	0211      	lsls	r1, r2, #8
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6912      	ldr	r2, [r2, #16]
 8004bd0:	0852      	lsrs	r2, r2, #1
 8004bd2:	3a01      	subs	r2, #1
 8004bd4:	0552      	lsls	r2, r2, #21
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	491f      	ldr	r1, [pc, #124]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	610b      	str	r3, [r1, #16]
 8004bde:	e011      	b.n	8004c04 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004be0:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004be8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6892      	ldr	r2, [r2, #8]
 8004bf0:	0211      	lsls	r1, r2, #8
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6952      	ldr	r2, [r2, #20]
 8004bf6:	0852      	lsrs	r2, r2, #1
 8004bf8:	3a01      	subs	r2, #1
 8004bfa:	0652      	lsls	r2, r2, #25
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	4916      	ldr	r1, [pc, #88]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c04:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c10:	f7fd fab0 	bl	8002174 <HAL_GetTick>
 8004c14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c16:	e009      	b.n	8004c2c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c18:	f7fd faac 	bl	8002174 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d902      	bls.n	8004c2c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	73fb      	strb	r3, [r7, #15]
          break;
 8004c2a:	e005      	b.n	8004c38 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0ef      	beq.n	8004c18 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c3e:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	4904      	ldr	r1, [pc, #16]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000

08004c5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c6a:	4b6a      	ldr	r3, [pc, #424]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d018      	beq.n	8004ca8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c76:	4b67      	ldr	r3, [pc, #412]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f003 0203 	and.w	r2, r3, #3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d10d      	bne.n	8004ca2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
       ||
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c8e:	4b61      	ldr	r3, [pc, #388]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	091b      	lsrs	r3, r3, #4
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d047      	beq.n	8004d32 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
 8004ca6:	e044      	b.n	8004d32 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d018      	beq.n	8004ce2 <RCCEx_PLLSAI2_Config+0x86>
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d825      	bhi.n	8004d00 <RCCEx_PLLSAI2_Config+0xa4>
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d002      	beq.n	8004cbe <RCCEx_PLLSAI2_Config+0x62>
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d009      	beq.n	8004cd0 <RCCEx_PLLSAI2_Config+0x74>
 8004cbc:	e020      	b.n	8004d00 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cbe:	4b55      	ldr	r3, [pc, #340]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d11d      	bne.n	8004d06 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cce:	e01a      	b.n	8004d06 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cd0:	4b50      	ldr	r3, [pc, #320]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d116      	bne.n	8004d0a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce0:	e013      	b.n	8004d0a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ce2:	4b4c      	ldr	r3, [pc, #304]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10f      	bne.n	8004d0e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cee:	4b49      	ldr	r3, [pc, #292]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cfe:	e006      	b.n	8004d0e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
      break;
 8004d04:	e004      	b.n	8004d10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d06:	bf00      	nop
 8004d08:	e002      	b.n	8004d10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d0a:	bf00      	nop
 8004d0c:	e000      	b.n	8004d10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10d      	bne.n	8004d32 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d16:	4b3f      	ldr	r3, [pc, #252]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6819      	ldr	r1, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	4939      	ldr	r1, [pc, #228]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d167      	bne.n	8004e08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d38:	4b36      	ldr	r3, [pc, #216]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a35      	ldr	r2, [pc, #212]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d44:	f7fd fa16 	bl	8002174 <HAL_GetTick>
 8004d48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d4a:	e009      	b.n	8004d60 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d4c:	f7fd fa12 	bl	8002174 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d902      	bls.n	8004d60 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d5e:	e005      	b.n	8004d6c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d60:	4b2c      	ldr	r3, [pc, #176]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1ef      	bne.n	8004d4c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d14a      	bne.n	8004e08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d111      	bne.n	8004d9c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d78:	4b26      	ldr	r3, [pc, #152]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6892      	ldr	r2, [r2, #8]
 8004d88:	0211      	lsls	r1, r2, #8
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68d2      	ldr	r2, [r2, #12]
 8004d8e:	0912      	lsrs	r2, r2, #4
 8004d90:	0452      	lsls	r2, r2, #17
 8004d92:	430a      	orrs	r2, r1
 8004d94:	491f      	ldr	r1, [pc, #124]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	614b      	str	r3, [r1, #20]
 8004d9a:	e011      	b.n	8004dc0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004da4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6892      	ldr	r2, [r2, #8]
 8004dac:	0211      	lsls	r1, r2, #8
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6912      	ldr	r2, [r2, #16]
 8004db2:	0852      	lsrs	r2, r2, #1
 8004db4:	3a01      	subs	r2, #1
 8004db6:	0652      	lsls	r2, r2, #25
 8004db8:	430a      	orrs	r2, r1
 8004dba:	4916      	ldr	r1, [pc, #88]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004dc0:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a13      	ldr	r2, [pc, #76]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dcc:	f7fd f9d2 	bl	8002174 <HAL_GetTick>
 8004dd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dd2:	e009      	b.n	8004de8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dd4:	f7fd f9ce 	bl	8002174 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d902      	bls.n	8004de8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	73fb      	strb	r3, [r7, #15]
          break;
 8004de6:	e005      	b.n	8004df4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0ef      	beq.n	8004dd4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfc:	695a      	ldr	r2, [r3, #20]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	4904      	ldr	r1, [pc, #16]	; (8004e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40021000 	.word	0x40021000

08004e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e049      	b.n	8004ebe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f841 	bl	8004ec6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f000 f9f8 	bl	800524c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d001      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e04f      	b.n	8004f94 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0201 	orr.w	r2, r2, #1
 8004f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a23      	ldr	r2, [pc, #140]	; (8004fa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01d      	beq.n	8004f52 <HAL_TIM_Base_Start_IT+0x76>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1e:	d018      	beq.n	8004f52 <HAL_TIM_Base_Start_IT+0x76>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d013      	beq.n	8004f52 <HAL_TIM_Base_Start_IT+0x76>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1e      	ldr	r2, [pc, #120]	; (8004fa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00e      	beq.n	8004f52 <HAL_TIM_Base_Start_IT+0x76>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1c      	ldr	r2, [pc, #112]	; (8004fac <HAL_TIM_Base_Start_IT+0xd0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d009      	beq.n	8004f52 <HAL_TIM_Base_Start_IT+0x76>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1b      	ldr	r2, [pc, #108]	; (8004fb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d004      	beq.n	8004f52 <HAL_TIM_Base_Start_IT+0x76>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d115      	bne.n	8004f7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	4b17      	ldr	r3, [pc, #92]	; (8004fb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b06      	cmp	r3, #6
 8004f62:	d015      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0xb4>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6a:	d011      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7c:	e008      	b.n	8004f90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e000      	b.n	8004f92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800
 8004fac:	40000c00 	.word	0x40000c00
 8004fb0:	40013400 	.word	0x40013400
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	00010007 	.word	0x00010007

08004fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d122      	bne.n	8005018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d11b      	bne.n	8005018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0202 	mvn.w	r2, #2
 8004fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f905 	bl	800520e <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f8f7 	bl	80051fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f908 	bl	8005222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b04      	cmp	r3, #4
 8005024:	d122      	bne.n	800506c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b04      	cmp	r3, #4
 8005032:	d11b      	bne.n	800506c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0204 	mvn.w	r2, #4
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f8db 	bl	800520e <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8cd 	bl	80051fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f8de 	bl	8005222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b08      	cmp	r3, #8
 8005078:	d122      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b08      	cmp	r3, #8
 8005086:	d11b      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0208 	mvn.w	r2, #8
 8005090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2204      	movs	r2, #4
 8005096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f8b1 	bl	800520e <HAL_TIM_IC_CaptureCallback>
 80050ac:	e005      	b.n	80050ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f8a3 	bl	80051fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f8b4 	bl	8005222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b10      	cmp	r3, #16
 80050cc:	d122      	bne.n	8005114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d11b      	bne.n	8005114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0210 	mvn.w	r2, #16
 80050e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2208      	movs	r2, #8
 80050ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f887 	bl	800520e <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f879 	bl	80051fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f88a 	bl	8005222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b01      	cmp	r3, #1
 8005120:	d10e      	bne.n	8005140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b01      	cmp	r3, #1
 800512e:	d107      	bne.n	8005140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0201 	mvn.w	r2, #1
 8005138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fc f8da 	bl	80012f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	d10e      	bne.n	800516c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005158:	2b80      	cmp	r3, #128	; 0x80
 800515a:	d107      	bne.n	800516c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f914 	bl	8005394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800517a:	d10e      	bne.n	800519a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b80      	cmp	r3, #128	; 0x80
 8005188:	d107      	bne.n	800519a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f907 	bl	80053a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a4:	2b40      	cmp	r3, #64	; 0x40
 80051a6:	d10e      	bne.n	80051c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b2:	2b40      	cmp	r3, #64	; 0x40
 80051b4:	d107      	bne.n	80051c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f838 	bl	8005236 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d10e      	bne.n	80051f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b20      	cmp	r3, #32
 80051e0:	d107      	bne.n	80051f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f06f 0220 	mvn.w	r2, #32
 80051ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f8c7 	bl	8005380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
	...

0800524c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a40      	ldr	r2, [pc, #256]	; (8005360 <TIM_Base_SetConfig+0x114>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d013      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526a:	d00f      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a3d      	ldr	r2, [pc, #244]	; (8005364 <TIM_Base_SetConfig+0x118>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00b      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a3c      	ldr	r2, [pc, #240]	; (8005368 <TIM_Base_SetConfig+0x11c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a3b      	ldr	r2, [pc, #236]	; (800536c <TIM_Base_SetConfig+0x120>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a3a      	ldr	r2, [pc, #232]	; (8005370 <TIM_Base_SetConfig+0x124>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d108      	bne.n	800529e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a2f      	ldr	r2, [pc, #188]	; (8005360 <TIM_Base_SetConfig+0x114>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d01f      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ac:	d01b      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a2c      	ldr	r2, [pc, #176]	; (8005364 <TIM_Base_SetConfig+0x118>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d017      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a2b      	ldr	r2, [pc, #172]	; (8005368 <TIM_Base_SetConfig+0x11c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a2a      	ldr	r2, [pc, #168]	; (800536c <TIM_Base_SetConfig+0x120>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00f      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a29      	ldr	r2, [pc, #164]	; (8005370 <TIM_Base_SetConfig+0x124>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00b      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a28      	ldr	r2, [pc, #160]	; (8005374 <TIM_Base_SetConfig+0x128>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d007      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a27      	ldr	r2, [pc, #156]	; (8005378 <TIM_Base_SetConfig+0x12c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a26      	ldr	r2, [pc, #152]	; (800537c <TIM_Base_SetConfig+0x130>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d108      	bne.n	80052f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a10      	ldr	r2, [pc, #64]	; (8005360 <TIM_Base_SetConfig+0x114>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00f      	beq.n	8005344 <TIM_Base_SetConfig+0xf8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a12      	ldr	r2, [pc, #72]	; (8005370 <TIM_Base_SetConfig+0x124>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00b      	beq.n	8005344 <TIM_Base_SetConfig+0xf8>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a11      	ldr	r2, [pc, #68]	; (8005374 <TIM_Base_SetConfig+0x128>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d007      	beq.n	8005344 <TIM_Base_SetConfig+0xf8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a10      	ldr	r2, [pc, #64]	; (8005378 <TIM_Base_SetConfig+0x12c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_Base_SetConfig+0xf8>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a0f      	ldr	r2, [pc, #60]	; (800537c <TIM_Base_SetConfig+0x130>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d103      	bne.n	800534c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	615a      	str	r2, [r3, #20]
}
 8005352:	bf00      	nop
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40012c00 	.word	0x40012c00
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40013400 	.word	0x40013400
 8005374:	40014000 	.word	0x40014000
 8005378:	40014400 	.word	0x40014400
 800537c:	40014800 	.word	0x40014800

08005380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e040      	b.n	8005450 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fc f988 	bl	80016f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2224      	movs	r2, #36	; 0x24
 80053e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0201 	bic.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fbc8 	bl	8005b90 <UART_SetConfig>
 8005400:	4603      	mov	r3, r0
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e022      	b.n	8005450 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fe74 	bl	8006100 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005426:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005436:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fefb 	bl	8006244 <UART_CheckIdleState>
 800544e:	4603      	mov	r3, r0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	; 0x28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800546a:	2b20      	cmp	r3, #32
 800546c:	d178      	bne.n	8005560 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <HAL_UART_Transmit_DMA+0x22>
 8005474:	88fb      	ldrh	r3, [r7, #6]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e071      	b.n	8005562 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_UART_Transmit_DMA+0x34>
 8005488:	2302      	movs	r3, #2
 800548a:	e06a      	b.n	8005562 <HAL_UART_Transmit_DMA+0x10a>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	88fa      	ldrh	r2, [r7, #6]
 800549e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	88fa      	ldrh	r2, [r7, #6]
 80054a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2221      	movs	r2, #33	; 0x21
 80054b6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d02b      	beq.n	8005518 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054c4:	4a29      	ldr	r2, [pc, #164]	; (800556c <HAL_UART_Transmit_DMA+0x114>)
 80054c6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054cc:	4a28      	ldr	r2, [pc, #160]	; (8005570 <HAL_UART_Transmit_DMA+0x118>)
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d4:	4a27      	ldr	r2, [pc, #156]	; (8005574 <HAL_UART_Transmit_DMA+0x11c>)
 80054d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054dc:	2200      	movs	r2, #0
 80054de:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e8:	4619      	mov	r1, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3328      	adds	r3, #40	; 0x28
 80054f0:	461a      	mov	r2, r3
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	f7fc ffe4 	bl	80024c0 <HAL_DMA_Start_IT>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00c      	beq.n	8005518 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2210      	movs	r2, #16
 8005502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e024      	b.n	8005562 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2240      	movs	r2, #64	; 0x40
 800551e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3308      	adds	r3, #8
 800552e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	613b      	str	r3, [r7, #16]
   return(result);
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3308      	adds	r3, #8
 8005546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005548:	623a      	str	r2, [r7, #32]
 800554a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	69f9      	ldr	r1, [r7, #28]
 800554e:	6a3a      	ldr	r2, [r7, #32]
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	61bb      	str	r3, [r7, #24]
   return(result);
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e5      	bne.n	8005528 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	e000      	b.n	8005562 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005560:	2302      	movs	r3, #2
  }
}
 8005562:	4618      	mov	r0, r3
 8005564:	3728      	adds	r7, #40	; 0x28
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	08006571 	.word	0x08006571
 8005570:	0800660b 	.word	0x0800660b
 8005574:	08006627 	.word	0x08006627

08005578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b0ba      	sub	sp, #232	; 0xe8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800559e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80055a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80055a6:	4013      	ands	r3, r2
 80055a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80055ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d115      	bne.n	80055e0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00f      	beq.n	80055e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 82a6 	beq.w	8005b22 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	4798      	blx	r3
      }
      return;
 80055de:	e2a0      	b.n	8005b22 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80055e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8117 	beq.w	8005818 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80055ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055fa:	4b85      	ldr	r3, [pc, #532]	; (8005810 <HAL_UART_IRQHandler+0x298>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 810a 	beq.w	8005818 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d011      	beq.n	8005634 <HAL_UART_IRQHandler+0xbc>
 8005610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00b      	beq.n	8005634 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2201      	movs	r2, #1
 8005622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800562a:	f043 0201 	orr.w	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d011      	beq.n	8005664 <HAL_UART_IRQHandler+0xec>
 8005640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00b      	beq.n	8005664 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2202      	movs	r2, #2
 8005652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800565a:	f043 0204 	orr.w	r2, r3, #4
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d011      	beq.n	8005694 <HAL_UART_IRQHandler+0x11c>
 8005670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00b      	beq.n	8005694 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2204      	movs	r2, #4
 8005682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800568a:	f043 0202 	orr.w	r2, r3, #2
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b00      	cmp	r3, #0
 800569e:	d017      	beq.n	80056d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d105      	bne.n	80056b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2208      	movs	r2, #8
 80056be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056c6:	f043 0208 	orr.w	r2, r3, #8
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d012      	beq.n	8005702 <HAL_UART_IRQHandler+0x18a>
 80056dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00c      	beq.n	8005702 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056f8:	f043 0220 	orr.w	r2, r3, #32
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 820c 	beq.w	8005b26 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00d      	beq.n	8005736 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800571a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800573c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574a:	2b40      	cmp	r3, #64	; 0x40
 800574c:	d005      	beq.n	800575a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800574e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005752:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005756:	2b00      	cmp	r3, #0
 8005758:	d04f      	beq.n	80057fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fea5 	bl	80064aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d141      	bne.n	80057f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3308      	adds	r3, #8
 8005774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800578c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3308      	adds	r3, #8
 8005796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800579a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800579e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1d9      	bne.n	800576e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d013      	beq.n	80057ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	4a13      	ldr	r2, [pc, #76]	; (8005814 <HAL_UART_IRQHandler+0x29c>)
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fc ff14 	bl	80025fc <HAL_DMA_Abort_IT>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d017      	beq.n	800580a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80057e4:	4610      	mov	r0, r2
 80057e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e8:	e00f      	b.n	800580a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f9ba 	bl	8005b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	e00b      	b.n	800580a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9b6 	bl	8005b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f8:	e007      	b.n	800580a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f9b2 	bl	8005b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005808:	e18d      	b.n	8005b26 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800580a:	bf00      	nop
    return;
 800580c:	e18b      	b.n	8005b26 <HAL_UART_IRQHandler+0x5ae>
 800580e:	bf00      	nop
 8005810:	04000120 	.word	0x04000120
 8005814:	080066a3 	.word	0x080066a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581c:	2b01      	cmp	r3, #1
 800581e:	f040 8146 	bne.w	8005aae <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005826:	f003 0310 	and.w	r3, r3, #16
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 813f 	beq.w	8005aae <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005834:	f003 0310 	and.w	r3, r3, #16
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 8138 	beq.w	8005aae <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2210      	movs	r2, #16
 8005844:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	f040 80b4 	bne.w	80059be <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005862:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 815f 	beq.w	8005b2a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005876:	429a      	cmp	r2, r3
 8005878:	f080 8157 	bcs.w	8005b2a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005882:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	f040 8085 	bne.w	80059a2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1da      	bne.n	8005898 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3308      	adds	r3, #8
 80058e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058f4:	f023 0301 	bic.w	r3, r3, #1
 80058f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3308      	adds	r3, #8
 8005902:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005906:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800590a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800590e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e1      	bne.n	80058e2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3308      	adds	r3, #8
 8005924:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800592e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3308      	adds	r3, #8
 800593e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005942:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005944:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005948:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e3      	bne.n	800591e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005972:	f023 0310 	bic.w	r3, r3, #16
 8005976:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005984:	65bb      	str	r3, [r7, #88]	; 0x58
 8005986:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800598a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e4      	bne.n	8005962 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599c:	4618      	mov	r0, r3
 800599e:	f7fc fdef 	bl	8002580 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f8de 	bl	8005b78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059bc:	e0b5      	b.n	8005b2a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 80a7 	beq.w	8005b2e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80059e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 80a2 	beq.w	8005b2e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e4      	bne.n	80059ea <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3308      	adds	r3, #8
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	f023 0301 	bic.w	r3, r3, #1
 8005a36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a44:	633a      	str	r2, [r7, #48]	; 0x30
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e3      	bne.n	8005a20 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0310 	bic.w	r3, r3, #16
 8005a7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	69b9      	ldr	r1, [r7, #24]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	617b      	str	r3, [r7, #20]
   return(result);
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e4      	bne.n	8005a6a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f866 	bl	8005b78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aac:	e03f      	b.n	8005b2e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_UART_IRQHandler+0x560>
 8005aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ace:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fe26 	bl	8006722 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ad6:	e02d      	b.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00e      	beq.n	8005b02 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d008      	beq.n	8005b02 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01c      	beq.n	8005b32 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
    }
    return;
 8005b00:	e017      	b.n	8005b32 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d012      	beq.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
 8005b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00c      	beq.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fdd7 	bl	80066ce <UART_EndTransmit_IT>
    return;
 8005b20:	e008      	b.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005b22:	bf00      	nop
 8005b24:	e006      	b.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005b26:	bf00      	nop
 8005b28:	e004      	b.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005b2a:	bf00      	nop
 8005b2c:	e002      	b.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005b2e:	bf00      	nop
 8005b30:	e000      	b.n	8005b34 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005b32:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005b34:	37e8      	adds	r7, #232	; 0xe8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop

08005b3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b94:	b08a      	sub	sp, #40	; 0x28
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	4ba4      	ldr	r3, [pc, #656]	; (8005e50 <UART_SetConfig+0x2c0>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a99      	ldr	r2, [pc, #612]	; (8005e54 <UART_SetConfig+0x2c4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a90      	ldr	r2, [pc, #576]	; (8005e58 <UART_SetConfig+0x2c8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d126      	bne.n	8005c68 <UART_SetConfig+0xd8>
 8005c1a:	4b90      	ldr	r3, [pc, #576]	; (8005e5c <UART_SetConfig+0x2cc>)
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d81b      	bhi.n	8005c60 <UART_SetConfig+0xd0>
 8005c28:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <UART_SetConfig+0xa0>)
 8005c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c51 	.word	0x08005c51
 8005c38:	08005c49 	.word	0x08005c49
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	2301      	movs	r3, #1
 8005c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c46:	e116      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c4e:	e112      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005c50:	2304      	movs	r3, #4
 8005c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c56:	e10e      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005c58:	2308      	movs	r3, #8
 8005c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c5e:	e10a      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005c60:	2310      	movs	r3, #16
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c66:	e106      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a7c      	ldr	r2, [pc, #496]	; (8005e60 <UART_SetConfig+0x2d0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d138      	bne.n	8005ce4 <UART_SetConfig+0x154>
 8005c72:	4b7a      	ldr	r3, [pc, #488]	; (8005e5c <UART_SetConfig+0x2cc>)
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c78:	f003 030c 	and.w	r3, r3, #12
 8005c7c:	2b0c      	cmp	r3, #12
 8005c7e:	d82d      	bhi.n	8005cdc <UART_SetConfig+0x14c>
 8005c80:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <UART_SetConfig+0xf8>)
 8005c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c86:	bf00      	nop
 8005c88:	08005cbd 	.word	0x08005cbd
 8005c8c:	08005cdd 	.word	0x08005cdd
 8005c90:	08005cdd 	.word	0x08005cdd
 8005c94:	08005cdd 	.word	0x08005cdd
 8005c98:	08005ccd 	.word	0x08005ccd
 8005c9c:	08005cdd 	.word	0x08005cdd
 8005ca0:	08005cdd 	.word	0x08005cdd
 8005ca4:	08005cdd 	.word	0x08005cdd
 8005ca8:	08005cc5 	.word	0x08005cc5
 8005cac:	08005cdd 	.word	0x08005cdd
 8005cb0:	08005cdd 	.word	0x08005cdd
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005cd5 	.word	0x08005cd5
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc2:	e0d8      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cca:	e0d4      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005ccc:	2304      	movs	r3, #4
 8005cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cd2:	e0d0      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005cd4:	2308      	movs	r3, #8
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cda:	e0cc      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005cdc:	2310      	movs	r3, #16
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce2:	e0c8      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a5e      	ldr	r2, [pc, #376]	; (8005e64 <UART_SetConfig+0x2d4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d125      	bne.n	8005d3a <UART_SetConfig+0x1aa>
 8005cee:	4b5b      	ldr	r3, [pc, #364]	; (8005e5c <UART_SetConfig+0x2cc>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cf8:	2b30      	cmp	r3, #48	; 0x30
 8005cfa:	d016      	beq.n	8005d2a <UART_SetConfig+0x19a>
 8005cfc:	2b30      	cmp	r3, #48	; 0x30
 8005cfe:	d818      	bhi.n	8005d32 <UART_SetConfig+0x1a2>
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	d00a      	beq.n	8005d1a <UART_SetConfig+0x18a>
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	d814      	bhi.n	8005d32 <UART_SetConfig+0x1a2>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <UART_SetConfig+0x182>
 8005d0c:	2b10      	cmp	r3, #16
 8005d0e:	d008      	beq.n	8005d22 <UART_SetConfig+0x192>
 8005d10:	e00f      	b.n	8005d32 <UART_SetConfig+0x1a2>
 8005d12:	2300      	movs	r3, #0
 8005d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d18:	e0ad      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d20:	e0a9      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005d22:	2304      	movs	r3, #4
 8005d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d28:	e0a5      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005d2a:	2308      	movs	r3, #8
 8005d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d30:	e0a1      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005d32:	2310      	movs	r3, #16
 8005d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d38:	e09d      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a4a      	ldr	r2, [pc, #296]	; (8005e68 <UART_SetConfig+0x2d8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d125      	bne.n	8005d90 <UART_SetConfig+0x200>
 8005d44:	4b45      	ldr	r3, [pc, #276]	; (8005e5c <UART_SetConfig+0x2cc>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d50:	d016      	beq.n	8005d80 <UART_SetConfig+0x1f0>
 8005d52:	2bc0      	cmp	r3, #192	; 0xc0
 8005d54:	d818      	bhi.n	8005d88 <UART_SetConfig+0x1f8>
 8005d56:	2b80      	cmp	r3, #128	; 0x80
 8005d58:	d00a      	beq.n	8005d70 <UART_SetConfig+0x1e0>
 8005d5a:	2b80      	cmp	r3, #128	; 0x80
 8005d5c:	d814      	bhi.n	8005d88 <UART_SetConfig+0x1f8>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <UART_SetConfig+0x1d8>
 8005d62:	2b40      	cmp	r3, #64	; 0x40
 8005d64:	d008      	beq.n	8005d78 <UART_SetConfig+0x1e8>
 8005d66:	e00f      	b.n	8005d88 <UART_SetConfig+0x1f8>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6e:	e082      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005d70:	2302      	movs	r3, #2
 8005d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d76:	e07e      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7e:	e07a      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005d80:	2308      	movs	r3, #8
 8005d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d86:	e076      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005d88:	2310      	movs	r3, #16
 8005d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d8e:	e072      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a35      	ldr	r2, [pc, #212]	; (8005e6c <UART_SetConfig+0x2dc>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d12a      	bne.n	8005df0 <UART_SetConfig+0x260>
 8005d9a:	4b30      	ldr	r3, [pc, #192]	; (8005e5c <UART_SetConfig+0x2cc>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005da8:	d01a      	beq.n	8005de0 <UART_SetConfig+0x250>
 8005daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dae:	d81b      	bhi.n	8005de8 <UART_SetConfig+0x258>
 8005db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db4:	d00c      	beq.n	8005dd0 <UART_SetConfig+0x240>
 8005db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dba:	d815      	bhi.n	8005de8 <UART_SetConfig+0x258>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <UART_SetConfig+0x238>
 8005dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc4:	d008      	beq.n	8005dd8 <UART_SetConfig+0x248>
 8005dc6:	e00f      	b.n	8005de8 <UART_SetConfig+0x258>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dce:	e052      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd6:	e04e      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dde:	e04a      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005de0:	2308      	movs	r3, #8
 8005de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de6:	e046      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005de8:	2310      	movs	r3, #16
 8005dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dee:	e042      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a17      	ldr	r2, [pc, #92]	; (8005e54 <UART_SetConfig+0x2c4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d13a      	bne.n	8005e70 <UART_SetConfig+0x2e0>
 8005dfa:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <UART_SetConfig+0x2cc>)
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e08:	d01a      	beq.n	8005e40 <UART_SetConfig+0x2b0>
 8005e0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e0e:	d81b      	bhi.n	8005e48 <UART_SetConfig+0x2b8>
 8005e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e14:	d00c      	beq.n	8005e30 <UART_SetConfig+0x2a0>
 8005e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e1a:	d815      	bhi.n	8005e48 <UART_SetConfig+0x2b8>
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <UART_SetConfig+0x298>
 8005e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e24:	d008      	beq.n	8005e38 <UART_SetConfig+0x2a8>
 8005e26:	e00f      	b.n	8005e48 <UART_SetConfig+0x2b8>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e2e:	e022      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005e30:	2302      	movs	r3, #2
 8005e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e36:	e01e      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005e38:	2304      	movs	r3, #4
 8005e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3e:	e01a      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005e40:	2308      	movs	r3, #8
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e46:	e016      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005e48:	2310      	movs	r3, #16
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4e:	e012      	b.n	8005e76 <UART_SetConfig+0x2e6>
 8005e50:	efff69f3 	.word	0xefff69f3
 8005e54:	40008000 	.word	0x40008000
 8005e58:	40013800 	.word	0x40013800
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	40004400 	.word	0x40004400
 8005e64:	40004800 	.word	0x40004800
 8005e68:	40004c00 	.word	0x40004c00
 8005e6c:	40005000 	.word	0x40005000
 8005e70:	2310      	movs	r3, #16
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a9f      	ldr	r2, [pc, #636]	; (80060f8 <UART_SetConfig+0x568>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d17a      	bne.n	8005f76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d824      	bhi.n	8005ed2 <UART_SetConfig+0x342>
 8005e88:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <UART_SetConfig+0x300>)
 8005e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8e:	bf00      	nop
 8005e90:	08005eb5 	.word	0x08005eb5
 8005e94:	08005ed3 	.word	0x08005ed3
 8005e98:	08005ebd 	.word	0x08005ebd
 8005e9c:	08005ed3 	.word	0x08005ed3
 8005ea0:	08005ec3 	.word	0x08005ec3
 8005ea4:	08005ed3 	.word	0x08005ed3
 8005ea8:	08005ed3 	.word	0x08005ed3
 8005eac:	08005ed3 	.word	0x08005ed3
 8005eb0:	08005ecb 	.word	0x08005ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eb4:	f7fe fa36 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005eb8:	61f8      	str	r0, [r7, #28]
        break;
 8005eba:	e010      	b.n	8005ede <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ebc:	4b8f      	ldr	r3, [pc, #572]	; (80060fc <UART_SetConfig+0x56c>)
 8005ebe:	61fb      	str	r3, [r7, #28]
        break;
 8005ec0:	e00d      	b.n	8005ede <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ec2:	f7fe f997 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8005ec6:	61f8      	str	r0, [r7, #28]
        break;
 8005ec8:	e009      	b.n	8005ede <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ece:	61fb      	str	r3, [r7, #28]
        break;
 8005ed0:	e005      	b.n	8005ede <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005edc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 80fb 	beq.w	80060dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	4613      	mov	r3, r2
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	4413      	add	r3, r2
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d305      	bcc.n	8005f02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d903      	bls.n	8005f0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f08:	e0e8      	b.n	80060dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	461c      	mov	r4, r3
 8005f10:	4615      	mov	r5, r2
 8005f12:	f04f 0200 	mov.w	r2, #0
 8005f16:	f04f 0300 	mov.w	r3, #0
 8005f1a:	022b      	lsls	r3, r5, #8
 8005f1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f20:	0222      	lsls	r2, r4, #8
 8005f22:	68f9      	ldr	r1, [r7, #12]
 8005f24:	6849      	ldr	r1, [r1, #4]
 8005f26:	0849      	lsrs	r1, r1, #1
 8005f28:	2000      	movs	r0, #0
 8005f2a:	4688      	mov	r8, r1
 8005f2c:	4681      	mov	r9, r0
 8005f2e:	eb12 0a08 	adds.w	sl, r2, r8
 8005f32:	eb43 0b09 	adc.w	fp, r3, r9
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	603b      	str	r3, [r7, #0]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f44:	4650      	mov	r0, sl
 8005f46:	4659      	mov	r1, fp
 8005f48:	f7fa fe9e 	bl	8000c88 <__aeabi_uldivmod>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4613      	mov	r3, r2
 8005f52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f5a:	d308      	bcc.n	8005f6e <UART_SetConfig+0x3de>
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f62:	d204      	bcs.n	8005f6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	60da      	str	r2, [r3, #12]
 8005f6c:	e0b6      	b.n	80060dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f74:	e0b2      	b.n	80060dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f7e:	d15e      	bne.n	800603e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005f80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d828      	bhi.n	8005fda <UART_SetConfig+0x44a>
 8005f88:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <UART_SetConfig+0x400>)
 8005f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8e:	bf00      	nop
 8005f90:	08005fb5 	.word	0x08005fb5
 8005f94:	08005fbd 	.word	0x08005fbd
 8005f98:	08005fc5 	.word	0x08005fc5
 8005f9c:	08005fdb 	.word	0x08005fdb
 8005fa0:	08005fcb 	.word	0x08005fcb
 8005fa4:	08005fdb 	.word	0x08005fdb
 8005fa8:	08005fdb 	.word	0x08005fdb
 8005fac:	08005fdb 	.word	0x08005fdb
 8005fb0:	08005fd3 	.word	0x08005fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fb4:	f7fe f9b6 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005fb8:	61f8      	str	r0, [r7, #28]
        break;
 8005fba:	e014      	b.n	8005fe6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fbc:	f7fe f9c8 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 8005fc0:	61f8      	str	r0, [r7, #28]
        break;
 8005fc2:	e010      	b.n	8005fe6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fc4:	4b4d      	ldr	r3, [pc, #308]	; (80060fc <UART_SetConfig+0x56c>)
 8005fc6:	61fb      	str	r3, [r7, #28]
        break;
 8005fc8:	e00d      	b.n	8005fe6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fca:	f7fe f913 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8005fce:	61f8      	str	r0, [r7, #28]
        break;
 8005fd0:	e009      	b.n	8005fe6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fd6:	61fb      	str	r3, [r7, #28]
        break;
 8005fd8:	e005      	b.n	8005fe6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005fe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d077      	beq.n	80060dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	005a      	lsls	r2, r3, #1
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	085b      	lsrs	r3, r3, #1
 8005ff6:	441a      	add	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006000:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b0f      	cmp	r3, #15
 8006006:	d916      	bls.n	8006036 <UART_SetConfig+0x4a6>
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600e:	d212      	bcs.n	8006036 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	b29b      	uxth	r3, r3
 8006014:	f023 030f 	bic.w	r3, r3, #15
 8006018:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	085b      	lsrs	r3, r3, #1
 800601e:	b29b      	uxth	r3, r3
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	b29a      	uxth	r2, r3
 8006026:	8afb      	ldrh	r3, [r7, #22]
 8006028:	4313      	orrs	r3, r2
 800602a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	8afa      	ldrh	r2, [r7, #22]
 8006032:	60da      	str	r2, [r3, #12]
 8006034:	e052      	b.n	80060dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800603c:	e04e      	b.n	80060dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800603e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006042:	2b08      	cmp	r3, #8
 8006044:	d827      	bhi.n	8006096 <UART_SetConfig+0x506>
 8006046:	a201      	add	r2, pc, #4	; (adr r2, 800604c <UART_SetConfig+0x4bc>)
 8006048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604c:	08006071 	.word	0x08006071
 8006050:	08006079 	.word	0x08006079
 8006054:	08006081 	.word	0x08006081
 8006058:	08006097 	.word	0x08006097
 800605c:	08006087 	.word	0x08006087
 8006060:	08006097 	.word	0x08006097
 8006064:	08006097 	.word	0x08006097
 8006068:	08006097 	.word	0x08006097
 800606c:	0800608f 	.word	0x0800608f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006070:	f7fe f958 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8006074:	61f8      	str	r0, [r7, #28]
        break;
 8006076:	e014      	b.n	80060a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006078:	f7fe f96a 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 800607c:	61f8      	str	r0, [r7, #28]
        break;
 800607e:	e010      	b.n	80060a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006080:	4b1e      	ldr	r3, [pc, #120]	; (80060fc <UART_SetConfig+0x56c>)
 8006082:	61fb      	str	r3, [r7, #28]
        break;
 8006084:	e00d      	b.n	80060a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006086:	f7fe f8b5 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 800608a:	61f8      	str	r0, [r7, #28]
        break;
 800608c:	e009      	b.n	80060a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800608e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006092:	61fb      	str	r3, [r7, #28]
        break;
 8006094:	e005      	b.n	80060a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060a0:	bf00      	nop
    }

    if (pclk != 0U)
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d019      	beq.n	80060dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	085a      	lsrs	r2, r3, #1
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	441a      	add	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2b0f      	cmp	r3, #15
 80060c0:	d909      	bls.n	80060d6 <UART_SetConfig+0x546>
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c8:	d205      	bcs.n	80060d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60da      	str	r2, [r3, #12]
 80060d4:	e002      	b.n	80060dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80060e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3728      	adds	r7, #40	; 0x28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060f6:	bf00      	nop
 80060f8:	40008000 	.word	0x40008000
 80060fc:	00f42400 	.word	0x00f42400

08006100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d01a      	beq.n	8006216 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061fe:	d10a      	bne.n	8006216 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	605a      	str	r2, [r3, #4]
  }
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af02      	add	r7, sp, #8
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006254:	f7fb ff8e 	bl	8002174 <HAL_GetTick>
 8006258:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0308 	and.w	r3, r3, #8
 8006264:	2b08      	cmp	r3, #8
 8006266:	d10e      	bne.n	8006286 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006268:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f82d 	bl	80062d6 <UART_WaitOnFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e023      	b.n	80062ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b04      	cmp	r3, #4
 8006292:	d10e      	bne.n	80062b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006294:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f817 	bl	80062d6 <UART_WaitOnFlagUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e00d      	b.n	80062ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2220      	movs	r2, #32
 80062b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b09c      	sub	sp, #112	; 0x70
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	603b      	str	r3, [r7, #0]
 80062e2:	4613      	mov	r3, r2
 80062e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e6:	e0a5      	b.n	8006434 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ee:	f000 80a1 	beq.w	8006434 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f2:	f7fb ff3f 	bl	8002174 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062fe:	429a      	cmp	r2, r3
 8006300:	d302      	bcc.n	8006308 <UART_WaitOnFlagUntilTimeout+0x32>
 8006302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006304:	2b00      	cmp	r3, #0
 8006306:	d13e      	bne.n	8006386 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006318:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800631c:	667b      	str	r3, [r7, #100]	; 0x64
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006326:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006328:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800632c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e6      	bne.n	8006308 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3308      	adds	r3, #8
 8006340:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	f023 0301 	bic.w	r3, r3, #1
 8006350:	663b      	str	r3, [r7, #96]	; 0x60
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3308      	adds	r3, #8
 8006358:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800635a:	64ba      	str	r2, [r7, #72]	; 0x48
 800635c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e5      	bne.n	800633a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e067      	b.n	8006456 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b00      	cmp	r3, #0
 8006392:	d04f      	beq.n	8006434 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800639e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063a2:	d147      	bne.n	8006434 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	e853 3f00 	ldrex	r3, [r3]
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
 80063ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e6      	bne.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3308      	adds	r3, #8
 80063e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	613b      	str	r3, [r7, #16]
   return(result);
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f023 0301 	bic.w	r3, r3, #1
 80063f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3308      	adds	r3, #8
 80063fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006400:	623a      	str	r2, [r7, #32]
 8006402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006404:	69f9      	ldr	r1, [r7, #28]
 8006406:	6a3a      	ldr	r2, [r7, #32]
 8006408:	e841 2300 	strex	r3, r2, [r1]
 800640c:	61bb      	str	r3, [r7, #24]
   return(result);
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e5      	bne.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2220      	movs	r2, #32
 8006418:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2220      	movs	r2, #32
 8006424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e010      	b.n	8006456 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	69da      	ldr	r2, [r3, #28]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4013      	ands	r3, r2
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	429a      	cmp	r2, r3
 8006442:	bf0c      	ite	eq
 8006444:	2301      	moveq	r3, #1
 8006446:	2300      	movne	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	461a      	mov	r2, r3
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	429a      	cmp	r2, r3
 8006450:	f43f af4a 	beq.w	80062e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3770      	adds	r7, #112	; 0x70
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800645e:	b480      	push	{r7}
 8006460:	b089      	sub	sp, #36	; 0x24
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	60bb      	str	r3, [r7, #8]
   return(result);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	461a      	mov	r2, r3
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6979      	ldr	r1, [r7, #20]
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	613b      	str	r3, [r7, #16]
   return(result);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e6      	bne.n	8006466 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2220      	movs	r2, #32
 800649c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800649e:	bf00      	nop
 80064a0:	3724      	adds	r7, #36	; 0x24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b095      	sub	sp, #84	; 0x54
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	461a      	mov	r2, r3
 80064ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064d0:	643b      	str	r3, [r7, #64]	; 0x40
 80064d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e6      	bne.n	80064b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3308      	adds	r3, #8
 80064ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f023 0301 	bic.w	r3, r3, #1
 80064fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3308      	adds	r3, #8
 8006502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006504:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800650a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800650c:	e841 2300 	strex	r3, r2, [r1]
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e5      	bne.n	80064e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800651c:	2b01      	cmp	r3, #1
 800651e:	d118      	bne.n	8006552 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	60bb      	str	r3, [r7, #8]
   return(result);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f023 0310 	bic.w	r3, r3, #16
 8006534:	647b      	str	r3, [r7, #68]	; 0x44
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	6979      	ldr	r1, [r7, #20]
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	613b      	str	r3, [r7, #16]
   return(result);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e6      	bne.n	8006520 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2220      	movs	r2, #32
 8006556:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006564:	bf00      	nop
 8006566:	3754      	adds	r7, #84	; 0x54
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b090      	sub	sp, #64	; 0x40
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0320 	and.w	r3, r3, #32
 8006588:	2b00      	cmp	r3, #0
 800658a:	d137      	bne.n	80065fc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800658c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658e:	2200      	movs	r2, #0
 8006590:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3308      	adds	r3, #8
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	e853 3f00 	ldrex	r3, [r3]
 80065a2:	623b      	str	r3, [r7, #32]
   return(result);
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80065ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3308      	adds	r3, #8
 80065b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065b4:	633a      	str	r2, [r7, #48]	; 0x30
 80065b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065bc:	e841 2300 	strex	r3, r2, [r1]
 80065c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e5      	bne.n	8006594 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
 80065de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e6:	61fb      	str	r3, [r7, #28]
 80065e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ea:	69b9      	ldr	r1, [r7, #24]
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	e841 2300 	strex	r3, r2, [r1]
 80065f2:	617b      	str	r3, [r7, #20]
   return(result);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e6      	bne.n	80065c8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065fa:	e002      	b.n	8006602 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80065fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80065fe:	f7ff fa9d 	bl	8005b3c <HAL_UART_TxCpltCallback>
}
 8006602:	bf00      	nop
 8006604:	3740      	adds	r7, #64	; 0x40
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b084      	sub	sp, #16
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f7ff fa99 	bl	8005b50 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800661e:	bf00      	nop
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006638:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800663e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664a:	2b80      	cmp	r3, #128	; 0x80
 800664c:	d109      	bne.n	8006662 <UART_DMAError+0x3c>
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b21      	cmp	r3, #33	; 0x21
 8006652:	d106      	bne.n	8006662 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2200      	movs	r2, #0
 8006658:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800665c:	6978      	ldr	r0, [r7, #20]
 800665e:	f7ff fefe 	bl	800645e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	d109      	bne.n	8006684 <UART_DMAError+0x5e>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b22      	cmp	r3, #34	; 0x22
 8006674:	d106      	bne.n	8006684 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2200      	movs	r2, #0
 800667a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800667e:	6978      	ldr	r0, [r7, #20]
 8006680:	f7ff ff13 	bl	80064aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800668a:	f043 0210 	orr.w	r2, r3, #16
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006694:	6978      	ldr	r0, [r7, #20]
 8006696:	f7ff fa65 	bl	8005b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800669a:	bf00      	nop
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7ff fa4f 	bl	8005b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c6:	bf00      	nop
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b088      	sub	sp, #32
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ea:	61fb      	str	r3, [r7, #28]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	61bb      	str	r3, [r7, #24]
 80066f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6979      	ldr	r1, [r7, #20]
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	613b      	str	r3, [r7, #16]
   return(result);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e6      	bne.n	80066d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff fa11 	bl	8005b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800671a:	bf00      	nop
 800671c:	3720      	adds	r7, #32
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006736:	b480      	push	{r7}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	4603      	mov	r3, r0
 800673e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006740:	2300      	movs	r3, #0
 8006742:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006748:	2b84      	cmp	r3, #132	; 0x84
 800674a:	d005      	beq.n	8006758 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800674c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4413      	add	r3, r2
 8006754:	3303      	adds	r3, #3
 8006756:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006758:	68fb      	ldr	r3, [r7, #12]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800676a:	f001 f89d 	bl	80078a8 <vTaskStartScheduler>
  
  return osOK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	bd80      	pop	{r7, pc}

08006774 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006776:	b089      	sub	sp, #36	; 0x24
 8006778:	af04      	add	r7, sp, #16
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d020      	beq.n	80067c8 <osThreadCreate+0x54>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d01c      	beq.n	80067c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685c      	ldr	r4, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681d      	ldr	r5, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691e      	ldr	r6, [r3, #16]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff ffc8 	bl	8006736 <makeFreeRtosPriority>
 80067a6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067b0:	9202      	str	r2, [sp, #8]
 80067b2:	9301      	str	r3, [sp, #4]
 80067b4:	9100      	str	r1, [sp, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	4632      	mov	r2, r6
 80067ba:	4629      	mov	r1, r5
 80067bc:	4620      	mov	r0, r4
 80067be:	f000 fe0f 	bl	80073e0 <xTaskCreateStatic>
 80067c2:	4603      	mov	r3, r0
 80067c4:	60fb      	str	r3, [r7, #12]
 80067c6:	e01c      	b.n	8006802 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685c      	ldr	r4, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067d4:	b29e      	uxth	r6, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff ffaa 	bl	8006736 <makeFreeRtosPriority>
 80067e2:	4602      	mov	r2, r0
 80067e4:	f107 030c 	add.w	r3, r7, #12
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	9200      	str	r2, [sp, #0]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	4632      	mov	r2, r6
 80067f0:	4629      	mov	r1, r5
 80067f2:	4620      	mov	r0, r4
 80067f4:	f000 fe51 	bl	800749a <xTaskCreate>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d001      	beq.n	8006802 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	e000      	b.n	8006804 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006802:	68fb      	ldr	r3, [r7, #12]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800680c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <osDelay+0x16>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	e000      	b.n	8006824 <osDelay+0x18>
 8006822:	2301      	movs	r3, #1
 8006824:	4618      	mov	r0, r3
 8006826:	f001 f80b 	bl	8007840 <vTaskDelay>
  
  return osOK;
 800682a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f103 0208 	add.w	r2, r3, #8
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f04f 32ff 	mov.w	r2, #4294967295
 800684c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f103 0208 	add.w	r2, r3, #8
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f103 0208 	add.w	r2, r3, #8
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800688e:	b480      	push	{r7}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	601a      	str	r2, [r3, #0]
}
 80068ca:	bf00      	nop
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068d6:	b480      	push	{r7}
 80068d8:	b085      	sub	sp, #20
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ec:	d103      	bne.n	80068f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	e00c      	b.n	8006910 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3308      	adds	r3, #8
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	e002      	b.n	8006904 <vListInsert+0x2e>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	429a      	cmp	r2, r3
 800690e:	d2f6      	bcs.n	80068fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	601a      	str	r2, [r3, #0]
}
 800693c:	bf00      	nop
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6892      	ldr	r2, [r2, #8]
 800695e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6852      	ldr	r2, [r2, #4]
 8006968:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	d103      	bne.n	800697c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	1e5a      	subs	r2, r3, #1
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10a      	bne.n	80069c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069c6:	f002 f96d 	bl	8008ca4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d2:	68f9      	ldr	r1, [r7, #12]
 80069d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	441a      	add	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f6:	3b01      	subs	r3, #1
 80069f8:	68f9      	ldr	r1, [r7, #12]
 80069fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069fc:	fb01 f303 	mul.w	r3, r1, r3
 8006a00:	441a      	add	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	22ff      	movs	r2, #255	; 0xff
 8006a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	22ff      	movs	r2, #255	; 0xff
 8006a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d114      	bne.n	8006a46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01a      	beq.n	8006a5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3310      	adds	r3, #16
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f001 f9f7 	bl	8007e1c <xTaskRemoveFromEventList>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d012      	beq.n	8006a5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a34:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <xQueueGenericReset+0xcc>)
 8006a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	e009      	b.n	8006a5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3310      	adds	r3, #16
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7ff fef2 	bl	8006834 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3324      	adds	r3, #36	; 0x24
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7ff feed 	bl	8006834 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a5a:	f002 f953 	bl	8008d04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a5e:	2301      	movs	r3, #1
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08e      	sub	sp, #56	; 0x38
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <xQueueGenericCreateStatic+0x52>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <xQueueGenericCreateStatic+0x56>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e000      	b.n	8006ac4 <xQueueGenericCreateStatic+0x58>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10a      	bne.n	8006ade <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	623b      	str	r3, [r7, #32]
}
 8006ada:	bf00      	nop
 8006adc:	e7fe      	b.n	8006adc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <xQueueGenericCreateStatic+0x7e>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <xQueueGenericCreateStatic+0x82>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e000      	b.n	8006af0 <xQueueGenericCreateStatic+0x84>
 8006aee:	2300      	movs	r3, #0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	61fb      	str	r3, [r7, #28]
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b0a:	2348      	movs	r3, #72	; 0x48
 8006b0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b48      	cmp	r3, #72	; 0x48
 8006b12:	d00a      	beq.n	8006b2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	61bb      	str	r3, [r7, #24]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00d      	beq.n	8006b52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	4613      	mov	r3, r2
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 f83f 	bl	8006bd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3730      	adds	r7, #48	; 0x30
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08a      	sub	sp, #40	; 0x28
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	4613      	mov	r3, r2
 8006b68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10a      	bne.n	8006b86 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	613b      	str	r3, [r7, #16]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
 8006b8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	3348      	adds	r3, #72	; 0x48
 8006b94:	4618      	mov	r0, r3
 8006b96:	f002 f9a7 	bl	8008ee8 <pvPortMalloc>
 8006b9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d011      	beq.n	8006bc6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	3348      	adds	r3, #72	; 0x48
 8006baa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bb4:	79fa      	ldrb	r2, [r7, #7]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	68b9      	ldr	r1, [r7, #8]
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f805 	bl	8006bd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bc6:	69bb      	ldr	r3, [r7, #24]
	}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3720      	adds	r7, #32
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d103      	bne.n	8006bec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	e002      	b.n	8006bf2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bfe:	2101      	movs	r1, #1
 8006c00:	69b8      	ldr	r0, [r7, #24]
 8006c02:	f7ff fecb 	bl	800699c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08e      	sub	sp, #56	; 0x38
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <xQueueGenericSend+0x32>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d103      	bne.n	8006c50 <xQueueGenericSend+0x40>
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <xQueueGenericSend+0x44>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <xQueueGenericSend+0x46>
 8006c54:	2300      	movs	r3, #0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <xQueueGenericSend+0x60>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c6c:	bf00      	nop
 8006c6e:	e7fe      	b.n	8006c6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d103      	bne.n	8006c7e <xQueueGenericSend+0x6e>
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <xQueueGenericSend+0x72>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <xQueueGenericSend+0x74>
 8006c82:	2300      	movs	r3, #0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <xQueueGenericSend+0x8e>
	__asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	623b      	str	r3, [r7, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	e7fe      	b.n	8006c9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c9e:	f001 fa7d 	bl	800819c <xTaskGetSchedulerState>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <xQueueGenericSend+0x9e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <xQueueGenericSend+0xa2>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <xQueueGenericSend+0xa4>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10a      	bne.n	8006cce <xQueueGenericSend+0xbe>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	61fb      	str	r3, [r7, #28]
}
 8006cca:	bf00      	nop
 8006ccc:	e7fe      	b.n	8006ccc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cce:	f001 ffe9 	bl	8008ca4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d302      	bcc.n	8006ce4 <xQueueGenericSend+0xd4>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d129      	bne.n	8006d38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cea:	f000 fa0b 	bl	8007104 <prvCopyDataToQueue>
 8006cee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d010      	beq.n	8006d1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	3324      	adds	r3, #36	; 0x24
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 f88d 	bl	8007e1c <xTaskRemoveFromEventList>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d013      	beq.n	8006d30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d08:	4b3f      	ldr	r3, [pc, #252]	; (8006e08 <xQueueGenericSend+0x1f8>)
 8006d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	e00a      	b.n	8006d30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d007      	beq.n	8006d30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d20:	4b39      	ldr	r3, [pc, #228]	; (8006e08 <xQueueGenericSend+0x1f8>)
 8006d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d30:	f001 ffe8 	bl	8008d04 <vPortExitCritical>
				return pdPASS;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e063      	b.n	8006e00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d103      	bne.n	8006d46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d3e:	f001 ffe1 	bl	8008d04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	e05c      	b.n	8006e00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d106      	bne.n	8006d5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d4c:	f107 0314 	add.w	r3, r7, #20
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 f8c5 	bl	8007ee0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d56:	2301      	movs	r3, #1
 8006d58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d5a:	f001 ffd3 	bl	8008d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d5e:	f000 fe13 	bl	8007988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d62:	f001 ff9f 	bl	8008ca4 <vPortEnterCritical>
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d6c:	b25b      	sxtb	r3, r3
 8006d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d72:	d103      	bne.n	8006d7c <xQueueGenericSend+0x16c>
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d82:	b25b      	sxtb	r3, r3
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d88:	d103      	bne.n	8006d92 <xQueueGenericSend+0x182>
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d92:	f001 ffb7 	bl	8008d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d96:	1d3a      	adds	r2, r7, #4
 8006d98:	f107 0314 	add.w	r3, r7, #20
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f001 f8b4 	bl	8007f0c <xTaskCheckForTimeOut>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d124      	bne.n	8006df4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006daa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dac:	f000 faa2 	bl	80072f4 <prvIsQueueFull>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d018      	beq.n	8006de8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	3310      	adds	r3, #16
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 ffdc 	bl	8007d7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dc6:	f000 fa2d 	bl	8007224 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006dca:	f000 fdeb 	bl	80079a4 <xTaskResumeAll>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f47f af7c 	bne.w	8006cce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006dd6:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <xQueueGenericSend+0x1f8>)
 8006dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	e772      	b.n	8006cce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dea:	f000 fa1b 	bl	8007224 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dee:	f000 fdd9 	bl	80079a4 <xTaskResumeAll>
 8006df2:	e76c      	b.n	8006cce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006df6:	f000 fa15 	bl	8007224 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dfa:	f000 fdd3 	bl	80079a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3738      	adds	r7, #56	; 0x38
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	e000ed04 	.word	0xe000ed04

08006e0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b090      	sub	sp, #64	; 0x40
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e36:	bf00      	nop
 8006e38:	e7fe      	b.n	8006e38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d103      	bne.n	8006e48 <xQueueGenericSendFromISR+0x3c>
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <xQueueGenericSendFromISR+0x40>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <xQueueGenericSendFromISR+0x42>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e64:	bf00      	nop
 8006e66:	e7fe      	b.n	8006e66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d103      	bne.n	8006e76 <xQueueGenericSendFromISR+0x6a>
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <xQueueGenericSendFromISR+0x6e>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <xQueueGenericSendFromISR+0x70>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	623b      	str	r3, [r7, #32]
}
 8006e92:	bf00      	nop
 8006e94:	e7fe      	b.n	8006e94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e96:	f001 ffe7 	bl	8008e68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e9a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	61fa      	str	r2, [r7, #28]
 8006eb0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006eb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006eb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d302      	bcc.n	8006ec8 <xQueueGenericSendFromISR+0xbc>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d12f      	bne.n	8006f28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ede:	f000 f911 	bl	8007104 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ee2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d112      	bne.n	8006f12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d016      	beq.n	8006f22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	3324      	adds	r3, #36	; 0x24
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 ff8f 	bl	8007e1c <xTaskRemoveFromEventList>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00e      	beq.n	8006f22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e007      	b.n	8006f22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f16:	3301      	adds	r3, #1
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	b25a      	sxtb	r2, r3
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f22:	2301      	movs	r3, #1
 8006f24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006f26:	e001      	b.n	8006f2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3740      	adds	r7, #64	; 0x40
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08c      	sub	sp, #48	; 0x30
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f50:	2300      	movs	r3, #0
 8006f52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <xQueueReceive+0x30>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	623b      	str	r3, [r7, #32]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d103      	bne.n	8006f82 <xQueueReceive+0x3e>
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <xQueueReceive+0x42>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e000      	b.n	8006f88 <xQueueReceive+0x44>
 8006f86:	2300      	movs	r3, #0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <xQueueReceive+0x5e>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	61fb      	str	r3, [r7, #28]
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fa2:	f001 f8fb 	bl	800819c <xTaskGetSchedulerState>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d102      	bne.n	8006fb2 <xQueueReceive+0x6e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <xQueueReceive+0x72>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e000      	b.n	8006fb8 <xQueueReceive+0x74>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10a      	bne.n	8006fd2 <xQueueReceive+0x8e>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	61bb      	str	r3, [r7, #24]
}
 8006fce:	bf00      	nop
 8006fd0:	e7fe      	b.n	8006fd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fd2:	f001 fe67 	bl	8008ca4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d01f      	beq.n	8007022 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe6:	f000 f8f7 	bl	80071d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	1e5a      	subs	r2, r3, #1
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00f      	beq.n	800701a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	3310      	adds	r3, #16
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 ff0c 	bl	8007e1c <xTaskRemoveFromEventList>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d007      	beq.n	800701a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800700a:	4b3d      	ldr	r3, [pc, #244]	; (8007100 <xQueueReceive+0x1bc>)
 800700c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800701a:	f001 fe73 	bl	8008d04 <vPortExitCritical>
				return pdPASS;
 800701e:	2301      	movs	r3, #1
 8007020:	e069      	b.n	80070f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d103      	bne.n	8007030 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007028:	f001 fe6c 	bl	8008d04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800702c:	2300      	movs	r3, #0
 800702e:	e062      	b.n	80070f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d106      	bne.n	8007044 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007036:	f107 0310 	add.w	r3, r7, #16
 800703a:	4618      	mov	r0, r3
 800703c:	f000 ff50 	bl	8007ee0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007040:	2301      	movs	r3, #1
 8007042:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007044:	f001 fe5e 	bl	8008d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007048:	f000 fc9e 	bl	8007988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800704c:	f001 fe2a 	bl	8008ca4 <vPortEnterCritical>
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007056:	b25b      	sxtb	r3, r3
 8007058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705c:	d103      	bne.n	8007066 <xQueueReceive+0x122>
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800706c:	b25b      	sxtb	r3, r3
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007072:	d103      	bne.n	800707c <xQueueReceive+0x138>
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800707c:	f001 fe42 	bl	8008d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007080:	1d3a      	adds	r2, r7, #4
 8007082:	f107 0310 	add.w	r3, r7, #16
 8007086:	4611      	mov	r1, r2
 8007088:	4618      	mov	r0, r3
 800708a:	f000 ff3f 	bl	8007f0c <xTaskCheckForTimeOut>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d123      	bne.n	80070dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007096:	f000 f917 	bl	80072c8 <prvIsQueueEmpty>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d017      	beq.n	80070d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	3324      	adds	r3, #36	; 0x24
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	4611      	mov	r1, r2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 fe67 	bl	8007d7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070b0:	f000 f8b8 	bl	8007224 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070b4:	f000 fc76 	bl	80079a4 <xTaskResumeAll>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d189      	bne.n	8006fd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80070be:	4b10      	ldr	r3, [pc, #64]	; (8007100 <xQueueReceive+0x1bc>)
 80070c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	e780      	b.n	8006fd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070d2:	f000 f8a7 	bl	8007224 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070d6:	f000 fc65 	bl	80079a4 <xTaskResumeAll>
 80070da:	e77a      	b.n	8006fd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070de:	f000 f8a1 	bl	8007224 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070e2:	f000 fc5f 	bl	80079a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070e8:	f000 f8ee 	bl	80072c8 <prvIsQueueEmpty>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f43f af6f 	beq.w	8006fd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3730      	adds	r7, #48	; 0x30
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	e000ed04 	.word	0xe000ed04

08007104 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007110:	2300      	movs	r3, #0
 8007112:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10d      	bne.n	800713e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d14d      	bne.n	80071c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	4618      	mov	r0, r3
 8007130:	f001 f852 	bl	80081d8 <xTaskPriorityDisinherit>
 8007134:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	609a      	str	r2, [r3, #8]
 800713c:	e043      	b.n	80071c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d119      	bne.n	8007178 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6858      	ldr	r0, [r3, #4]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	461a      	mov	r2, r3
 800714e:	68b9      	ldr	r1, [r7, #8]
 8007150:	f002 f9d7 	bl	8009502 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	441a      	add	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	429a      	cmp	r2, r3
 800716c:	d32b      	bcc.n	80071c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	605a      	str	r2, [r3, #4]
 8007176:	e026      	b.n	80071c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68d8      	ldr	r0, [r3, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007180:	461a      	mov	r2, r3
 8007182:	68b9      	ldr	r1, [r7, #8]
 8007184:	f002 f9bd 	bl	8009502 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	425b      	negs	r3, r3
 8007192:	441a      	add	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d207      	bcs.n	80071b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ac:	425b      	negs	r3, r3
 80071ae:	441a      	add	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d105      	bne.n	80071c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071ce:	697b      	ldr	r3, [r7, #20]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d018      	beq.n	800721c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	441a      	add	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	429a      	cmp	r2, r3
 8007202:	d303      	bcc.n	800720c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68d9      	ldr	r1, [r3, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	461a      	mov	r2, r3
 8007216:	6838      	ldr	r0, [r7, #0]
 8007218:	f002 f973 	bl	8009502 <memcpy>
	}
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800722c:	f001 fd3a 	bl	8008ca4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007236:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007238:	e011      	b.n	800725e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	2b00      	cmp	r3, #0
 8007240:	d012      	beq.n	8007268 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3324      	adds	r3, #36	; 0x24
 8007246:	4618      	mov	r0, r3
 8007248:	f000 fde8 	bl	8007e1c <xTaskRemoveFromEventList>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007252:	f000 febd 	bl	8007fd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	3b01      	subs	r3, #1
 800725a:	b2db      	uxtb	r3, r3
 800725c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800725e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007262:	2b00      	cmp	r3, #0
 8007264:	dce9      	bgt.n	800723a <prvUnlockQueue+0x16>
 8007266:	e000      	b.n	800726a <prvUnlockQueue+0x46>
					break;
 8007268:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	22ff      	movs	r2, #255	; 0xff
 800726e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007272:	f001 fd47 	bl	8008d04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007276:	f001 fd15 	bl	8008ca4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007280:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007282:	e011      	b.n	80072a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d012      	beq.n	80072b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3310      	adds	r3, #16
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fdc3 	bl	8007e1c <xTaskRemoveFromEventList>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800729c:	f000 fe98 	bl	8007fd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dce9      	bgt.n	8007284 <prvUnlockQueue+0x60>
 80072b0:	e000      	b.n	80072b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	22ff      	movs	r2, #255	; 0xff
 80072b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072bc:	f001 fd22 	bl	8008d04 <vPortExitCritical>
}
 80072c0:	bf00      	nop
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072d0:	f001 fce8 	bl	8008ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d102      	bne.n	80072e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072dc:	2301      	movs	r3, #1
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	e001      	b.n	80072e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072e6:	f001 fd0d 	bl	8008d04 <vPortExitCritical>

	return xReturn;
 80072ea:	68fb      	ldr	r3, [r7, #12]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072fc:	f001 fcd2 	bl	8008ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007308:	429a      	cmp	r2, r3
 800730a:	d102      	bne.n	8007312 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800730c:	2301      	movs	r3, #1
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	e001      	b.n	8007316 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007316:	f001 fcf5 	bl	8008d04 <vPortExitCritical>

	return xReturn;
 800731a:	68fb      	ldr	r3, [r7, #12]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800732e:	2300      	movs	r3, #0
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	e014      	b.n	800735e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007334:	4a0f      	ldr	r2, [pc, #60]	; (8007374 <vQueueAddToRegistry+0x50>)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10b      	bne.n	8007358 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007340:	490c      	ldr	r1, [pc, #48]	; (8007374 <vQueueAddToRegistry+0x50>)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800734a:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <vQueueAddToRegistry+0x50>)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	4413      	add	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007356:	e006      	b.n	8007366 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	3301      	adds	r3, #1
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b07      	cmp	r3, #7
 8007362:	d9e7      	bls.n	8007334 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007364:	bf00      	nop
 8007366:	bf00      	nop
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	20000b78 	.word	0x20000b78

08007378 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007388:	f001 fc8c 	bl	8008ca4 <vPortEnterCritical>
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007392:	b25b      	sxtb	r3, r3
 8007394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007398:	d103      	bne.n	80073a2 <vQueueWaitForMessageRestricted+0x2a>
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073a8:	b25b      	sxtb	r3, r3
 80073aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ae:	d103      	bne.n	80073b8 <vQueueWaitForMessageRestricted+0x40>
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073b8:	f001 fca4 	bl	8008d04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d106      	bne.n	80073d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	3324      	adds	r3, #36	; 0x24
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	68b9      	ldr	r1, [r7, #8]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fcf9 	bl	8007dc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80073d2:	6978      	ldr	r0, [r7, #20]
 80073d4:	f7ff ff26 	bl	8007224 <prvUnlockQueue>
	}
 80073d8:	bf00      	nop
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08e      	sub	sp, #56	; 0x38
 80073e4:	af04      	add	r7, sp, #16
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10a      	bne.n	800740a <xTaskCreateStatic+0x2a>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	623b      	str	r3, [r7, #32]
}
 8007406:	bf00      	nop
 8007408:	e7fe      	b.n	8007408 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800740a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <xTaskCreateStatic+0x46>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	61fb      	str	r3, [r7, #28]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007426:	23b4      	movs	r3, #180	; 0xb4
 8007428:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	2bb4      	cmp	r3, #180	; 0xb4
 800742e:	d00a      	beq.n	8007446 <xTaskCreateStatic+0x66>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	61bb      	str	r3, [r7, #24]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007446:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	2b00      	cmp	r3, #0
 800744c:	d01e      	beq.n	800748c <xTaskCreateStatic+0xac>
 800744e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01b      	beq.n	800748c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800745c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	2202      	movs	r2, #2
 8007462:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007466:	2300      	movs	r3, #0
 8007468:	9303      	str	r3, [sp, #12]
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	9302      	str	r3, [sp, #8]
 800746e:	f107 0314 	add.w	r3, r7, #20
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	68b9      	ldr	r1, [r7, #8]
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 f850 	bl	8007524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007486:	f000 f8f3 	bl	8007670 <prvAddNewTaskToReadyList>
 800748a:	e001      	b.n	8007490 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007490:	697b      	ldr	r3, [r7, #20]
	}
 8007492:	4618      	mov	r0, r3
 8007494:	3728      	adds	r7, #40	; 0x28
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800749a:	b580      	push	{r7, lr}
 800749c:	b08c      	sub	sp, #48	; 0x30
 800749e:	af04      	add	r7, sp, #16
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	603b      	str	r3, [r7, #0]
 80074a6:	4613      	mov	r3, r2
 80074a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f001 fd1a 	bl	8008ee8 <pvPortMalloc>
 80074b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00e      	beq.n	80074da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074bc:	20b4      	movs	r0, #180	; 0xb4
 80074be:	f001 fd13 	bl	8008ee8 <pvPortMalloc>
 80074c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	631a      	str	r2, [r3, #48]	; 0x30
 80074d0:	e005      	b.n	80074de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074d2:	6978      	ldr	r0, [r7, #20]
 80074d4:	f001 fdd4 	bl	8009080 <vPortFree>
 80074d8:	e001      	b.n	80074de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d017      	beq.n	8007514 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074ec:	88fa      	ldrh	r2, [r7, #6]
 80074ee:	2300      	movs	r3, #0
 80074f0:	9303      	str	r3, [sp, #12]
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	9302      	str	r3, [sp, #8]
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	9301      	str	r3, [sp, #4]
 80074fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	68b9      	ldr	r1, [r7, #8]
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 f80e 	bl	8007524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007508:	69f8      	ldr	r0, [r7, #28]
 800750a:	f000 f8b1 	bl	8007670 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800750e:	2301      	movs	r3, #1
 8007510:	61bb      	str	r3, [r7, #24]
 8007512:	e002      	b.n	800751a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007514:	f04f 33ff 	mov.w	r3, #4294967295
 8007518:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800751a:	69bb      	ldr	r3, [r7, #24]
	}
 800751c:	4618      	mov	r0, r3
 800751e:	3720      	adds	r7, #32
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	461a      	mov	r2, r3
 800753c:	21a5      	movs	r1, #165	; 0xa5
 800753e:	f001 ffee 	bl	800951e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800754c:	3b01      	subs	r3, #1
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	f023 0307 	bic.w	r3, r3, #7
 800755a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00a      	beq.n	800757c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	617b      	str	r3, [r7, #20]
}
 8007578:	bf00      	nop
 800757a:	e7fe      	b.n	800757a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d01f      	beq.n	80075c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007582:	2300      	movs	r3, #0
 8007584:	61fb      	str	r3, [r7, #28]
 8007586:	e012      	b.n	80075ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	4413      	add	r3, r2
 800758e:	7819      	ldrb	r1, [r3, #0]
 8007590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	3334      	adds	r3, #52	; 0x34
 8007598:	460a      	mov	r2, r1
 800759a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4413      	add	r3, r2
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d006      	beq.n	80075b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	3301      	adds	r3, #1
 80075ac:	61fb      	str	r3, [r7, #28]
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	2b0f      	cmp	r3, #15
 80075b2:	d9e9      	bls.n	8007588 <prvInitialiseNewTask+0x64>
 80075b4:	e000      	b.n	80075b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80075b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075c0:	e003      	b.n	80075ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	2b06      	cmp	r3, #6
 80075ce:	d901      	bls.n	80075d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075d0:	2306      	movs	r3, #6
 80075d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	2200      	movs	r2, #0
 80075e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	3304      	adds	r3, #4
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7ff f942 	bl	8006874 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	3318      	adds	r3, #24
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff f93d 	bl	8006874 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	f1c3 0207 	rsb	r2, r3, #7
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800760e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	2200      	movs	r2, #0
 8007614:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	2200      	movs	r2, #0
 800761c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	334c      	adds	r3, #76	; 0x4c
 8007624:	2260      	movs	r2, #96	; 0x60
 8007626:	2100      	movs	r1, #0
 8007628:	4618      	mov	r0, r3
 800762a:	f001 ff78 	bl	800951e <memset>
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	4a0c      	ldr	r2, [pc, #48]	; (8007664 <prvInitialiseNewTask+0x140>)
 8007632:	651a      	str	r2, [r3, #80]	; 0x50
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	4a0c      	ldr	r2, [pc, #48]	; (8007668 <prvInitialiseNewTask+0x144>)
 8007638:	655a      	str	r2, [r3, #84]	; 0x54
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	4a0b      	ldr	r2, [pc, #44]	; (800766c <prvInitialiseNewTask+0x148>)
 800763e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	68f9      	ldr	r1, [r7, #12]
 8007644:	69b8      	ldr	r0, [r7, #24]
 8007646:	f001 fa01 	bl	8008a4c <pxPortInitialiseStack>
 800764a:	4602      	mov	r2, r0
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800765a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800765c:	bf00      	nop
 800765e:	3720      	adds	r7, #32
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	0800de08 	.word	0x0800de08
 8007668:	0800de28 	.word	0x0800de28
 800766c:	0800dde8 	.word	0x0800dde8

08007670 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007678:	f001 fb14 	bl	8008ca4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800767c:	4b2a      	ldr	r3, [pc, #168]	; (8007728 <prvAddNewTaskToReadyList+0xb8>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3301      	adds	r3, #1
 8007682:	4a29      	ldr	r2, [pc, #164]	; (8007728 <prvAddNewTaskToReadyList+0xb8>)
 8007684:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007686:	4b29      	ldr	r3, [pc, #164]	; (800772c <prvAddNewTaskToReadyList+0xbc>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800768e:	4a27      	ldr	r2, [pc, #156]	; (800772c <prvAddNewTaskToReadyList+0xbc>)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007694:	4b24      	ldr	r3, [pc, #144]	; (8007728 <prvAddNewTaskToReadyList+0xb8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d110      	bne.n	80076be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800769c:	f000 fcbc 	bl	8008018 <prvInitialiseTaskLists>
 80076a0:	e00d      	b.n	80076be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076a2:	4b23      	ldr	r3, [pc, #140]	; (8007730 <prvAddNewTaskToReadyList+0xc0>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d109      	bne.n	80076be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076aa:	4b20      	ldr	r3, [pc, #128]	; (800772c <prvAddNewTaskToReadyList+0xbc>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d802      	bhi.n	80076be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076b8:	4a1c      	ldr	r2, [pc, #112]	; (800772c <prvAddNewTaskToReadyList+0xbc>)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076be:	4b1d      	ldr	r3, [pc, #116]	; (8007734 <prvAddNewTaskToReadyList+0xc4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3301      	adds	r3, #1
 80076c4:	4a1b      	ldr	r2, [pc, #108]	; (8007734 <prvAddNewTaskToReadyList+0xc4>)
 80076c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076cc:	2201      	movs	r2, #1
 80076ce:	409a      	lsls	r2, r3
 80076d0:	4b19      	ldr	r3, [pc, #100]	; (8007738 <prvAddNewTaskToReadyList+0xc8>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	4a18      	ldr	r2, [pc, #96]	; (8007738 <prvAddNewTaskToReadyList+0xc8>)
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076de:	4613      	mov	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4a15      	ldr	r2, [pc, #84]	; (800773c <prvAddNewTaskToReadyList+0xcc>)
 80076e8:	441a      	add	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3304      	adds	r3, #4
 80076ee:	4619      	mov	r1, r3
 80076f0:	4610      	mov	r0, r2
 80076f2:	f7ff f8cc 	bl	800688e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076f6:	f001 fb05 	bl	8008d04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076fa:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <prvAddNewTaskToReadyList+0xc0>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00e      	beq.n	8007720 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007702:	4b0a      	ldr	r3, [pc, #40]	; (800772c <prvAddNewTaskToReadyList+0xbc>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770c:	429a      	cmp	r2, r3
 800770e:	d207      	bcs.n	8007720 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007710:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <prvAddNewTaskToReadyList+0xd0>)
 8007712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20000cb8 	.word	0x20000cb8
 800772c:	20000bb8 	.word	0x20000bb8
 8007730:	20000cc4 	.word	0x20000cc4
 8007734:	20000cd4 	.word	0x20000cd4
 8007738:	20000cc0 	.word	0x20000cc0
 800773c:	20000bbc 	.word	0x20000bbc
 8007740:	e000ed04 	.word	0xe000ed04

08007744 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08a      	sub	sp, #40	; 0x28
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800774e:	2300      	movs	r3, #0
 8007750:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10a      	bne.n	800776e <vTaskDelayUntil+0x2a>
	__asm volatile
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	617b      	str	r3, [r7, #20]
}
 800776a:	bf00      	nop
 800776c:	e7fe      	b.n	800776c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10a      	bne.n	800778a <vTaskDelayUntil+0x46>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	613b      	str	r3, [r7, #16]
}
 8007786:	bf00      	nop
 8007788:	e7fe      	b.n	8007788 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800778a:	4b2a      	ldr	r3, [pc, #168]	; (8007834 <vTaskDelayUntil+0xf0>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <vTaskDelayUntil+0x64>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	60fb      	str	r3, [r7, #12]
}
 80077a4:	bf00      	nop
 80077a6:	e7fe      	b.n	80077a6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80077a8:	f000 f8ee 	bl	8007988 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80077ac:	4b22      	ldr	r3, [pc, #136]	; (8007838 <vTaskDelayUntil+0xf4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	4413      	add	r3, r2
 80077ba:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6a3a      	ldr	r2, [r7, #32]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d20b      	bcs.n	80077de <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d211      	bcs.n	80077f4 <vTaskDelayUntil+0xb0>
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d90d      	bls.n	80077f4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80077d8:	2301      	movs	r3, #1
 80077da:	627b      	str	r3, [r7, #36]	; 0x24
 80077dc:	e00a      	b.n	80077f4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69fa      	ldr	r2, [r7, #28]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d303      	bcc.n	80077f0 <vTaskDelayUntil+0xac>
 80077e8:	69fa      	ldr	r2, [r7, #28]
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d901      	bls.n	80077f4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80077f0:	2301      	movs	r3, #1
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	69fa      	ldr	r2, [r7, #28]
 80077f8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d006      	beq.n	800780e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2100      	movs	r1, #0
 8007808:	4618      	mov	r0, r3
 800780a:	f000 fd6b 	bl	80082e4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800780e:	f000 f8c9 	bl	80079a4 <xTaskResumeAll>
 8007812:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d107      	bne.n	800782a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800781a:	4b08      	ldr	r3, [pc, #32]	; (800783c <vTaskDelayUntil+0xf8>)
 800781c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800782a:	bf00      	nop
 800782c:	3728      	adds	r7, #40	; 0x28
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	20000ce0 	.word	0x20000ce0
 8007838:	20000cbc 	.word	0x20000cbc
 800783c:	e000ed04 	.word	0xe000ed04

08007840 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007848:	2300      	movs	r3, #0
 800784a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d017      	beq.n	8007882 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007852:	4b13      	ldr	r3, [pc, #76]	; (80078a0 <vTaskDelay+0x60>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <vTaskDelay+0x30>
	__asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	60bb      	str	r3, [r7, #8]
}
 800786c:	bf00      	nop
 800786e:	e7fe      	b.n	800786e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007870:	f000 f88a 	bl	8007988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fd34 	bl	80082e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800787c:	f000 f892 	bl	80079a4 <xTaskResumeAll>
 8007880:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d107      	bne.n	8007898 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007888:	4b06      	ldr	r3, [pc, #24]	; (80078a4 <vTaskDelay+0x64>)
 800788a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007898:	bf00      	nop
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	20000ce0 	.word	0x20000ce0
 80078a4:	e000ed04 	.word	0xe000ed04

080078a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	; 0x28
 80078ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078b6:	463a      	mov	r2, r7
 80078b8:	1d39      	adds	r1, r7, #4
 80078ba:	f107 0308 	add.w	r3, r7, #8
 80078be:	4618      	mov	r0, r3
 80078c0:	f7f9 fbcc 	bl	800105c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	9202      	str	r2, [sp, #8]
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	2300      	movs	r3, #0
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	2300      	movs	r3, #0
 80078d4:	460a      	mov	r2, r1
 80078d6:	4924      	ldr	r1, [pc, #144]	; (8007968 <vTaskStartScheduler+0xc0>)
 80078d8:	4824      	ldr	r0, [pc, #144]	; (800796c <vTaskStartScheduler+0xc4>)
 80078da:	f7ff fd81 	bl	80073e0 <xTaskCreateStatic>
 80078de:	4603      	mov	r3, r0
 80078e0:	4a23      	ldr	r2, [pc, #140]	; (8007970 <vTaskStartScheduler+0xc8>)
 80078e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078e4:	4b22      	ldr	r3, [pc, #136]	; (8007970 <vTaskStartScheduler+0xc8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078ec:	2301      	movs	r3, #1
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	e001      	b.n	80078f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d102      	bne.n	8007902 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078fc:	f000 fd58 	bl	80083b0 <xTimerCreateTimerTask>
 8007900:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d11b      	bne.n	8007940 <vTaskStartScheduler+0x98>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	613b      	str	r3, [r7, #16]
}
 800791a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800791c:	4b15      	ldr	r3, [pc, #84]	; (8007974 <vTaskStartScheduler+0xcc>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	334c      	adds	r3, #76	; 0x4c
 8007922:	4a15      	ldr	r2, [pc, #84]	; (8007978 <vTaskStartScheduler+0xd0>)
 8007924:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007926:	4b15      	ldr	r3, [pc, #84]	; (800797c <vTaskStartScheduler+0xd4>)
 8007928:	f04f 32ff 	mov.w	r2, #4294967295
 800792c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800792e:	4b14      	ldr	r3, [pc, #80]	; (8007980 <vTaskStartScheduler+0xd8>)
 8007930:	2201      	movs	r2, #1
 8007932:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007934:	4b13      	ldr	r3, [pc, #76]	; (8007984 <vTaskStartScheduler+0xdc>)
 8007936:	2200      	movs	r2, #0
 8007938:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800793a:	f001 f911 	bl	8008b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800793e:	e00e      	b.n	800795e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007946:	d10a      	bne.n	800795e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	60fb      	str	r3, [r7, #12]
}
 800795a:	bf00      	nop
 800795c:	e7fe      	b.n	800795c <vTaskStartScheduler+0xb4>
}
 800795e:	bf00      	nop
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	0800dd88 	.word	0x0800dd88
 800796c:	08007fe9 	.word	0x08007fe9
 8007970:	20000cdc 	.word	0x20000cdc
 8007974:	20000bb8 	.word	0x20000bb8
 8007978:	20000044 	.word	0x20000044
 800797c:	20000cd8 	.word	0x20000cd8
 8007980:	20000cc4 	.word	0x20000cc4
 8007984:	20000cbc 	.word	0x20000cbc

08007988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800798c:	4b04      	ldr	r3, [pc, #16]	; (80079a0 <vTaskSuspendAll+0x18>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3301      	adds	r3, #1
 8007992:	4a03      	ldr	r2, [pc, #12]	; (80079a0 <vTaskSuspendAll+0x18>)
 8007994:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007996:	bf00      	nop
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	20000ce0 	.word	0x20000ce0

080079a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079b2:	4b41      	ldr	r3, [pc, #260]	; (8007ab8 <xTaskResumeAll+0x114>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	603b      	str	r3, [r7, #0]
}
 80079cc:	bf00      	nop
 80079ce:	e7fe      	b.n	80079ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079d0:	f001 f968 	bl	8008ca4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079d4:	4b38      	ldr	r3, [pc, #224]	; (8007ab8 <xTaskResumeAll+0x114>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3b01      	subs	r3, #1
 80079da:	4a37      	ldr	r2, [pc, #220]	; (8007ab8 <xTaskResumeAll+0x114>)
 80079dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079de:	4b36      	ldr	r3, [pc, #216]	; (8007ab8 <xTaskResumeAll+0x114>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d161      	bne.n	8007aaa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079e6:	4b35      	ldr	r3, [pc, #212]	; (8007abc <xTaskResumeAll+0x118>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d05d      	beq.n	8007aaa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079ee:	e02e      	b.n	8007a4e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079f0:	4b33      	ldr	r3, [pc, #204]	; (8007ac0 <xTaskResumeAll+0x11c>)
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3318      	adds	r3, #24
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fe ffa3 	bl	8006948 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe ff9e 	bl	8006948 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	2201      	movs	r2, #1
 8007a12:	409a      	lsls	r2, r3
 8007a14:	4b2b      	ldr	r3, [pc, #172]	; (8007ac4 <xTaskResumeAll+0x120>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	4a2a      	ldr	r2, [pc, #168]	; (8007ac4 <xTaskResumeAll+0x120>)
 8007a1c:	6013      	str	r3, [r2, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a22:	4613      	mov	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4a27      	ldr	r2, [pc, #156]	; (8007ac8 <xTaskResumeAll+0x124>)
 8007a2c:	441a      	add	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3304      	adds	r3, #4
 8007a32:	4619      	mov	r1, r3
 8007a34:	4610      	mov	r0, r2
 8007a36:	f7fe ff2a 	bl	800688e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3e:	4b23      	ldr	r3, [pc, #140]	; (8007acc <xTaskResumeAll+0x128>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d302      	bcc.n	8007a4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007a48:	4b21      	ldr	r3, [pc, #132]	; (8007ad0 <xTaskResumeAll+0x12c>)
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a4e:	4b1c      	ldr	r3, [pc, #112]	; (8007ac0 <xTaskResumeAll+0x11c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1cc      	bne.n	80079f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a5c:	f000 fb7e 	bl	800815c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a60:	4b1c      	ldr	r3, [pc, #112]	; (8007ad4 <xTaskResumeAll+0x130>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d010      	beq.n	8007a8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a6c:	f000 f846 	bl	8007afc <xTaskIncrementTick>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d002      	beq.n	8007a7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007a76:	4b16      	ldr	r3, [pc, #88]	; (8007ad0 <xTaskResumeAll+0x12c>)
 8007a78:	2201      	movs	r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f1      	bne.n	8007a6c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007a88:	4b12      	ldr	r3, [pc, #72]	; (8007ad4 <xTaskResumeAll+0x130>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a8e:	4b10      	ldr	r3, [pc, #64]	; (8007ad0 <xTaskResumeAll+0x12c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d009      	beq.n	8007aaa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a96:	2301      	movs	r3, #1
 8007a98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a9a:	4b0f      	ldr	r3, [pc, #60]	; (8007ad8 <xTaskResumeAll+0x134>)
 8007a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007aaa:	f001 f92b 	bl	8008d04 <vPortExitCritical>

	return xAlreadyYielded;
 8007aae:	68bb      	ldr	r3, [r7, #8]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20000ce0 	.word	0x20000ce0
 8007abc:	20000cb8 	.word	0x20000cb8
 8007ac0:	20000c78 	.word	0x20000c78
 8007ac4:	20000cc0 	.word	0x20000cc0
 8007ac8:	20000bbc 	.word	0x20000bbc
 8007acc:	20000bb8 	.word	0x20000bb8
 8007ad0:	20000ccc 	.word	0x20000ccc
 8007ad4:	20000cc8 	.word	0x20000cc8
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007ae2:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <xTaskGetTickCount+0x1c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ae8:	687b      	ldr	r3, [r7, #4]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	20000cbc 	.word	0x20000cbc

08007afc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b02:	2300      	movs	r3, #0
 8007b04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b06:	4b4e      	ldr	r3, [pc, #312]	; (8007c40 <xTaskIncrementTick+0x144>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f040 808e 	bne.w	8007c2c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b10:	4b4c      	ldr	r3, [pc, #304]	; (8007c44 <xTaskIncrementTick+0x148>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3301      	adds	r3, #1
 8007b16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b18:	4a4a      	ldr	r2, [pc, #296]	; (8007c44 <xTaskIncrementTick+0x148>)
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d120      	bne.n	8007b66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b24:	4b48      	ldr	r3, [pc, #288]	; (8007c48 <xTaskIncrementTick+0x14c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00a      	beq.n	8007b44 <xTaskIncrementTick+0x48>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	603b      	str	r3, [r7, #0]
}
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <xTaskIncrementTick+0x46>
 8007b44:	4b40      	ldr	r3, [pc, #256]	; (8007c48 <xTaskIncrementTick+0x14c>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	4b40      	ldr	r3, [pc, #256]	; (8007c4c <xTaskIncrementTick+0x150>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a3e      	ldr	r2, [pc, #248]	; (8007c48 <xTaskIncrementTick+0x14c>)
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	4a3e      	ldr	r2, [pc, #248]	; (8007c4c <xTaskIncrementTick+0x150>)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	4b3d      	ldr	r3, [pc, #244]	; (8007c50 <xTaskIncrementTick+0x154>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	4a3c      	ldr	r2, [pc, #240]	; (8007c50 <xTaskIncrementTick+0x154>)
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	f000 fafb 	bl	800815c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b66:	4b3b      	ldr	r3, [pc, #236]	; (8007c54 <xTaskIncrementTick+0x158>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d348      	bcc.n	8007c02 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b70:	4b35      	ldr	r3, [pc, #212]	; (8007c48 <xTaskIncrementTick+0x14c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d104      	bne.n	8007b84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b7a:	4b36      	ldr	r3, [pc, #216]	; (8007c54 <xTaskIncrementTick+0x158>)
 8007b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b80:	601a      	str	r2, [r3, #0]
					break;
 8007b82:	e03e      	b.n	8007c02 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b84:	4b30      	ldr	r3, [pc, #192]	; (8007c48 <xTaskIncrementTick+0x14c>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d203      	bcs.n	8007ba4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b9c:	4a2d      	ldr	r2, [pc, #180]	; (8007c54 <xTaskIncrementTick+0x158>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ba2:	e02e      	b.n	8007c02 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe fecd 	bl	8006948 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d004      	beq.n	8007bc0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	3318      	adds	r3, #24
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fec4 	bl	8006948 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	409a      	lsls	r2, r3
 8007bc8:	4b23      	ldr	r3, [pc, #140]	; (8007c58 <xTaskIncrementTick+0x15c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	4a22      	ldr	r2, [pc, #136]	; (8007c58 <xTaskIncrementTick+0x15c>)
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4a1f      	ldr	r2, [pc, #124]	; (8007c5c <xTaskIncrementTick+0x160>)
 8007be0:	441a      	add	r2, r3
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	3304      	adds	r3, #4
 8007be6:	4619      	mov	r1, r3
 8007be8:	4610      	mov	r0, r2
 8007bea:	f7fe fe50 	bl	800688e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf2:	4b1b      	ldr	r3, [pc, #108]	; (8007c60 <xTaskIncrementTick+0x164>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d3b9      	bcc.n	8007b70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c00:	e7b6      	b.n	8007b70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c02:	4b17      	ldr	r3, [pc, #92]	; (8007c60 <xTaskIncrementTick+0x164>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c08:	4914      	ldr	r1, [pc, #80]	; (8007c5c <xTaskIncrementTick+0x160>)
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	440b      	add	r3, r1
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d901      	bls.n	8007c1e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c1e:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <xTaskIncrementTick+0x168>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d007      	beq.n	8007c36 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007c26:	2301      	movs	r3, #1
 8007c28:	617b      	str	r3, [r7, #20]
 8007c2a:	e004      	b.n	8007c36 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c2c:	4b0e      	ldr	r3, [pc, #56]	; (8007c68 <xTaskIncrementTick+0x16c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3301      	adds	r3, #1
 8007c32:	4a0d      	ldr	r2, [pc, #52]	; (8007c68 <xTaskIncrementTick+0x16c>)
 8007c34:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c36:	697b      	ldr	r3, [r7, #20]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20000ce0 	.word	0x20000ce0
 8007c44:	20000cbc 	.word	0x20000cbc
 8007c48:	20000c70 	.word	0x20000c70
 8007c4c:	20000c74 	.word	0x20000c74
 8007c50:	20000cd0 	.word	0x20000cd0
 8007c54:	20000cd8 	.word	0x20000cd8
 8007c58:	20000cc0 	.word	0x20000cc0
 8007c5c:	20000bbc 	.word	0x20000bbc
 8007c60:	20000bb8 	.word	0x20000bb8
 8007c64:	20000ccc 	.word	0x20000ccc
 8007c68:	20000cc8 	.word	0x20000cc8

08007c6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c72:	4b3c      	ldr	r3, [pc, #240]	; (8007d64 <vTaskSwitchContext+0xf8>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c7a:	4b3b      	ldr	r3, [pc, #236]	; (8007d68 <vTaskSwitchContext+0xfc>)
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c80:	e06b      	b.n	8007d5a <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 8007c82:	4b39      	ldr	r3, [pc, #228]	; (8007d68 <vTaskSwitchContext+0xfc>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007c88:	4b38      	ldr	r3, [pc, #224]	; (8007d6c <vTaskSwitchContext+0x100>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8e:	61fb      	str	r3, [r7, #28]
 8007c90:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8007c94:	61bb      	str	r3, [r7, #24]
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d111      	bne.n	8007cc4 <vTaskSwitchContext+0x58>
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d10b      	bne.n	8007cc4 <vTaskSwitchContext+0x58>
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	3308      	adds	r3, #8
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d105      	bne.n	8007cc4 <vTaskSwitchContext+0x58>
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	330c      	adds	r3, #12
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d008      	beq.n	8007cd6 <vTaskSwitchContext+0x6a>
 8007cc4:	4b29      	ldr	r3, [pc, #164]	; (8007d6c <vTaskSwitchContext+0x100>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	4b28      	ldr	r3, [pc, #160]	; (8007d6c <vTaskSwitchContext+0x100>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3334      	adds	r3, #52	; 0x34
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	f7f9 f9b7 	bl	8001044 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cd6:	4b26      	ldr	r3, [pc, #152]	; (8007d70 <vTaskSwitchContext+0x104>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	fab3 f383 	clz	r3, r3
 8007ce2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007ce4:	7afb      	ldrb	r3, [r7, #11]
 8007ce6:	f1c3 031f 	rsb	r3, r3, #31
 8007cea:	617b      	str	r3, [r7, #20]
 8007cec:	4921      	ldr	r1, [pc, #132]	; (8007d74 <vTaskSwitchContext+0x108>)
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <vTaskSwitchContext+0xaa>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	607b      	str	r3, [r7, #4]
}
 8007d12:	bf00      	nop
 8007d14:	e7fe      	b.n	8007d14 <vTaskSwitchContext+0xa8>
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4a14      	ldr	r2, [pc, #80]	; (8007d74 <vTaskSwitchContext+0x108>)
 8007d22:	4413      	add	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	605a      	str	r2, [r3, #4]
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	3308      	adds	r3, #8
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d104      	bne.n	8007d46 <vTaskSwitchContext+0xda>
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	605a      	str	r2, [r3, #4]
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	4a07      	ldr	r2, [pc, #28]	; (8007d6c <vTaskSwitchContext+0x100>)
 8007d4e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d50:	4b06      	ldr	r3, [pc, #24]	; (8007d6c <vTaskSwitchContext+0x100>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	334c      	adds	r3, #76	; 0x4c
 8007d56:	4a08      	ldr	r2, [pc, #32]	; (8007d78 <vTaskSwitchContext+0x10c>)
 8007d58:	6013      	str	r3, [r2, #0]
}
 8007d5a:	bf00      	nop
 8007d5c:	3720      	adds	r7, #32
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20000ce0 	.word	0x20000ce0
 8007d68:	20000ccc 	.word	0x20000ccc
 8007d6c:	20000bb8 	.word	0x20000bb8
 8007d70:	20000cc0 	.word	0x20000cc0
 8007d74:	20000bbc 	.word	0x20000bbc
 8007d78:	20000044 	.word	0x20000044

08007d7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	60fb      	str	r3, [r7, #12]
}
 8007d9e:	bf00      	nop
 8007da0:	e7fe      	b.n	8007da0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007da2:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <vTaskPlaceOnEventList+0x44>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3318      	adds	r3, #24
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7fe fd93 	bl	80068d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007db0:	2101      	movs	r1, #1
 8007db2:	6838      	ldr	r0, [r7, #0]
 8007db4:	f000 fa96 	bl	80082e4 <prvAddCurrentTaskToDelayedList>
}
 8007db8:	bf00      	nop
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	20000bb8 	.word	0x20000bb8

08007dc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10a      	bne.n	8007dec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	617b      	str	r3, [r7, #20]
}
 8007de8:	bf00      	nop
 8007dea:	e7fe      	b.n	8007dea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dec:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <vTaskPlaceOnEventListRestricted+0x54>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3318      	adds	r3, #24
 8007df2:	4619      	mov	r1, r3
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7fe fd4a 	bl	800688e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007e00:	f04f 33ff 	mov.w	r3, #4294967295
 8007e04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e06:	6879      	ldr	r1, [r7, #4]
 8007e08:	68b8      	ldr	r0, [r7, #8]
 8007e0a:	f000 fa6b 	bl	80082e4 <prvAddCurrentTaskToDelayedList>
	}
 8007e0e:	bf00      	nop
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20000bb8 	.word	0x20000bb8

08007e1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10a      	bne.n	8007e48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	60fb      	str	r3, [r7, #12]
}
 8007e44:	bf00      	nop
 8007e46:	e7fe      	b.n	8007e46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	3318      	adds	r3, #24
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fe fd7b 	bl	8006948 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e52:	4b1d      	ldr	r3, [pc, #116]	; (8007ec8 <xTaskRemoveFromEventList+0xac>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d11c      	bne.n	8007e94 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe fd72 	bl	8006948 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	2201      	movs	r2, #1
 8007e6a:	409a      	lsls	r2, r3
 8007e6c:	4b17      	ldr	r3, [pc, #92]	; (8007ecc <xTaskRemoveFromEventList+0xb0>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	4a16      	ldr	r2, [pc, #88]	; (8007ecc <xTaskRemoveFromEventList+0xb0>)
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4a13      	ldr	r2, [pc, #76]	; (8007ed0 <xTaskRemoveFromEventList+0xb4>)
 8007e84:	441a      	add	r2, r3
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	f7fe fcfe 	bl	800688e <vListInsertEnd>
 8007e92:	e005      	b.n	8007ea0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	3318      	adds	r3, #24
 8007e98:	4619      	mov	r1, r3
 8007e9a:	480e      	ldr	r0, [pc, #56]	; (8007ed4 <xTaskRemoveFromEventList+0xb8>)
 8007e9c:	f7fe fcf7 	bl	800688e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea4:	4b0c      	ldr	r3, [pc, #48]	; (8007ed8 <xTaskRemoveFromEventList+0xbc>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d905      	bls.n	8007eba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007eb2:	4b0a      	ldr	r3, [pc, #40]	; (8007edc <xTaskRemoveFromEventList+0xc0>)
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	e001      	b.n	8007ebe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ebe:	697b      	ldr	r3, [r7, #20]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	20000ce0 	.word	0x20000ce0
 8007ecc:	20000cc0 	.word	0x20000cc0
 8007ed0:	20000bbc 	.word	0x20000bbc
 8007ed4:	20000c78 	.word	0x20000c78
 8007ed8:	20000bb8 	.word	0x20000bb8
 8007edc:	20000ccc 	.word	0x20000ccc

08007ee0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ee8:	4b06      	ldr	r3, [pc, #24]	; (8007f04 <vTaskInternalSetTimeOutState+0x24>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ef0:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <vTaskInternalSetTimeOutState+0x28>)
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	605a      	str	r2, [r3, #4]
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	20000cd0 	.word	0x20000cd0
 8007f08:	20000cbc 	.word	0x20000cbc

08007f0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	613b      	str	r3, [r7, #16]
}
 8007f2e:	bf00      	nop
 8007f30:	e7fe      	b.n	8007f30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10a      	bne.n	8007f4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	60fb      	str	r3, [r7, #12]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f4e:	f000 fea9 	bl	8008ca4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f52:	4b1d      	ldr	r3, [pc, #116]	; (8007fc8 <xTaskCheckForTimeOut+0xbc>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6a:	d102      	bne.n	8007f72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	61fb      	str	r3, [r7, #28]
 8007f70:	e023      	b.n	8007fba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	4b15      	ldr	r3, [pc, #84]	; (8007fcc <xTaskCheckForTimeOut+0xc0>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d007      	beq.n	8007f8e <xTaskCheckForTimeOut+0x82>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d302      	bcc.n	8007f8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	61fb      	str	r3, [r7, #28]
 8007f8c:	e015      	b.n	8007fba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d20b      	bcs.n	8007fb0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff ff9b 	bl	8007ee0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	61fb      	str	r3, [r7, #28]
 8007fae:	e004      	b.n	8007fba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fba:	f000 fea3 	bl	8008d04 <vPortExitCritical>

	return xReturn;
 8007fbe:	69fb      	ldr	r3, [r7, #28]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3720      	adds	r7, #32
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	20000cbc 	.word	0x20000cbc
 8007fcc:	20000cd0 	.word	0x20000cd0

08007fd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fd4:	4b03      	ldr	r3, [pc, #12]	; (8007fe4 <vTaskMissedYield+0x14>)
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]
}
 8007fda:	bf00      	nop
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	20000ccc 	.word	0x20000ccc

08007fe8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ff0:	f000 f852 	bl	8008098 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ff4:	4b06      	ldr	r3, [pc, #24]	; (8008010 <prvIdleTask+0x28>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d9f9      	bls.n	8007ff0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <prvIdleTask+0x2c>)
 8007ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800800c:	e7f0      	b.n	8007ff0 <prvIdleTask+0x8>
 800800e:	bf00      	nop
 8008010:	20000bbc 	.word	0x20000bbc
 8008014:	e000ed04 	.word	0xe000ed04

08008018 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800801e:	2300      	movs	r3, #0
 8008020:	607b      	str	r3, [r7, #4]
 8008022:	e00c      	b.n	800803e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4a12      	ldr	r2, [pc, #72]	; (8008078 <prvInitialiseTaskLists+0x60>)
 8008030:	4413      	add	r3, r2
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe fbfe 	bl	8006834 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3301      	adds	r3, #1
 800803c:	607b      	str	r3, [r7, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b06      	cmp	r3, #6
 8008042:	d9ef      	bls.n	8008024 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008044:	480d      	ldr	r0, [pc, #52]	; (800807c <prvInitialiseTaskLists+0x64>)
 8008046:	f7fe fbf5 	bl	8006834 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800804a:	480d      	ldr	r0, [pc, #52]	; (8008080 <prvInitialiseTaskLists+0x68>)
 800804c:	f7fe fbf2 	bl	8006834 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008050:	480c      	ldr	r0, [pc, #48]	; (8008084 <prvInitialiseTaskLists+0x6c>)
 8008052:	f7fe fbef 	bl	8006834 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008056:	480c      	ldr	r0, [pc, #48]	; (8008088 <prvInitialiseTaskLists+0x70>)
 8008058:	f7fe fbec 	bl	8006834 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800805c:	480b      	ldr	r0, [pc, #44]	; (800808c <prvInitialiseTaskLists+0x74>)
 800805e:	f7fe fbe9 	bl	8006834 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008062:	4b0b      	ldr	r3, [pc, #44]	; (8008090 <prvInitialiseTaskLists+0x78>)
 8008064:	4a05      	ldr	r2, [pc, #20]	; (800807c <prvInitialiseTaskLists+0x64>)
 8008066:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008068:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <prvInitialiseTaskLists+0x7c>)
 800806a:	4a05      	ldr	r2, [pc, #20]	; (8008080 <prvInitialiseTaskLists+0x68>)
 800806c:	601a      	str	r2, [r3, #0]
}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000bbc 	.word	0x20000bbc
 800807c:	20000c48 	.word	0x20000c48
 8008080:	20000c5c 	.word	0x20000c5c
 8008084:	20000c78 	.word	0x20000c78
 8008088:	20000c8c 	.word	0x20000c8c
 800808c:	20000ca4 	.word	0x20000ca4
 8008090:	20000c70 	.word	0x20000c70
 8008094:	20000c74 	.word	0x20000c74

08008098 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800809e:	e019      	b.n	80080d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080a0:	f000 fe00 	bl	8008ca4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a4:	4b10      	ldr	r3, [pc, #64]	; (80080e8 <prvCheckTasksWaitingTermination+0x50>)
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fe fc49 	bl	8006948 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080b6:	4b0d      	ldr	r3, [pc, #52]	; (80080ec <prvCheckTasksWaitingTermination+0x54>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	4a0b      	ldr	r2, [pc, #44]	; (80080ec <prvCheckTasksWaitingTermination+0x54>)
 80080be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080c0:	4b0b      	ldr	r3, [pc, #44]	; (80080f0 <prvCheckTasksWaitingTermination+0x58>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3b01      	subs	r3, #1
 80080c6:	4a0a      	ldr	r2, [pc, #40]	; (80080f0 <prvCheckTasksWaitingTermination+0x58>)
 80080c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080ca:	f000 fe1b 	bl	8008d04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f810 	bl	80080f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080d4:	4b06      	ldr	r3, [pc, #24]	; (80080f0 <prvCheckTasksWaitingTermination+0x58>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1e1      	bne.n	80080a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080dc:	bf00      	nop
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20000c8c 	.word	0x20000c8c
 80080ec:	20000cb8 	.word	0x20000cb8
 80080f0:	20000ca0 	.word	0x20000ca0

080080f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	334c      	adds	r3, #76	; 0x4c
 8008100:	4618      	mov	r0, r3
 8008102:	f002 f931 	bl	800a368 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d108      	bne.n	8008122 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008114:	4618      	mov	r0, r3
 8008116:	f000 ffb3 	bl	8009080 <vPortFree>
				vPortFree( pxTCB );
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 ffb0 	bl	8009080 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008120:	e018      	b.n	8008154 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008128:	2b01      	cmp	r3, #1
 800812a:	d103      	bne.n	8008134 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 ffa7 	bl	8009080 <vPortFree>
	}
 8008132:	e00f      	b.n	8008154 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800813a:	2b02      	cmp	r3, #2
 800813c:	d00a      	beq.n	8008154 <prvDeleteTCB+0x60>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	60fb      	str	r3, [r7, #12]
}
 8008150:	bf00      	nop
 8008152:	e7fe      	b.n	8008152 <prvDeleteTCB+0x5e>
	}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008162:	4b0c      	ldr	r3, [pc, #48]	; (8008194 <prvResetNextTaskUnblockTime+0x38>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d104      	bne.n	8008176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800816c:	4b0a      	ldr	r3, [pc, #40]	; (8008198 <prvResetNextTaskUnblockTime+0x3c>)
 800816e:	f04f 32ff 	mov.w	r2, #4294967295
 8008172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008174:	e008      	b.n	8008188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008176:	4b07      	ldr	r3, [pc, #28]	; (8008194 <prvResetNextTaskUnblockTime+0x38>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	4a04      	ldr	r2, [pc, #16]	; (8008198 <prvResetNextTaskUnblockTime+0x3c>)
 8008186:	6013      	str	r3, [r2, #0]
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	20000c70 	.word	0x20000c70
 8008198:	20000cd8 	.word	0x20000cd8

0800819c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081a2:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <xTaskGetSchedulerState+0x34>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d102      	bne.n	80081b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081aa:	2301      	movs	r3, #1
 80081ac:	607b      	str	r3, [r7, #4]
 80081ae:	e008      	b.n	80081c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081b0:	4b08      	ldr	r3, [pc, #32]	; (80081d4 <xTaskGetSchedulerState+0x38>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d102      	bne.n	80081be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081b8:	2302      	movs	r3, #2
 80081ba:	607b      	str	r3, [r7, #4]
 80081bc:	e001      	b.n	80081c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081be:	2300      	movs	r3, #0
 80081c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081c2:	687b      	ldr	r3, [r7, #4]
	}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	20000cc4 	.word	0x20000cc4
 80081d4:	20000ce0 	.word	0x20000ce0

080081d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081e4:	2300      	movs	r3, #0
 80081e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d06e      	beq.n	80082cc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081ee:	4b3a      	ldr	r3, [pc, #232]	; (80082d8 <xTaskPriorityDisinherit+0x100>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d00a      	beq.n	800820e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	60fb      	str	r3, [r7, #12]
}
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10a      	bne.n	800822c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	60bb      	str	r3, [r7, #8]
}
 8008228:	bf00      	nop
 800822a:	e7fe      	b.n	800822a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008230:	1e5a      	subs	r2, r3, #1
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823e:	429a      	cmp	r2, r3
 8008240:	d044      	beq.n	80082cc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008246:	2b00      	cmp	r3, #0
 8008248:	d140      	bne.n	80082cc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	3304      	adds	r3, #4
 800824e:	4618      	mov	r0, r3
 8008250:	f7fe fb7a 	bl	8006948 <uxListRemove>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d115      	bne.n	8008286 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825e:	491f      	ldr	r1, [pc, #124]	; (80082dc <xTaskPriorityDisinherit+0x104>)
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <xTaskPriorityDisinherit+0xae>
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	2201      	movs	r2, #1
 8008276:	fa02 f303 	lsl.w	r3, r2, r3
 800827a:	43da      	mvns	r2, r3
 800827c:	4b18      	ldr	r3, [pc, #96]	; (80082e0 <xTaskPriorityDisinherit+0x108>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4013      	ands	r3, r2
 8008282:	4a17      	ldr	r2, [pc, #92]	; (80082e0 <xTaskPriorityDisinherit+0x108>)
 8008284:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008292:	f1c3 0207 	rsb	r2, r3, #7
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829e:	2201      	movs	r2, #1
 80082a0:	409a      	lsls	r2, r3
 80082a2:	4b0f      	ldr	r3, [pc, #60]	; (80082e0 <xTaskPriorityDisinherit+0x108>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	4a0d      	ldr	r2, [pc, #52]	; (80082e0 <xTaskPriorityDisinherit+0x108>)
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4a08      	ldr	r2, [pc, #32]	; (80082dc <xTaskPriorityDisinherit+0x104>)
 80082ba:	441a      	add	r2, r3
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	3304      	adds	r3, #4
 80082c0:	4619      	mov	r1, r3
 80082c2:	4610      	mov	r0, r2
 80082c4:	f7fe fae3 	bl	800688e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082c8:	2301      	movs	r3, #1
 80082ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082cc:	697b      	ldr	r3, [r7, #20]
	}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20000bb8 	.word	0x20000bb8
 80082dc:	20000bbc 	.word	0x20000bbc
 80082e0:	20000cc0 	.word	0x20000cc0

080082e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082ee:	4b29      	ldr	r3, [pc, #164]	; (8008394 <prvAddCurrentTaskToDelayedList+0xb0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082f4:	4b28      	ldr	r3, [pc, #160]	; (8008398 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fe fb24 	bl	8006948 <uxListRemove>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10b      	bne.n	800831e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008306:	4b24      	ldr	r3, [pc, #144]	; (8008398 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	2201      	movs	r2, #1
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	43da      	mvns	r2, r3
 8008314:	4b21      	ldr	r3, [pc, #132]	; (800839c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4013      	ands	r3, r2
 800831a:	4a20      	ldr	r2, [pc, #128]	; (800839c <prvAddCurrentTaskToDelayedList+0xb8>)
 800831c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008324:	d10a      	bne.n	800833c <prvAddCurrentTaskToDelayedList+0x58>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d007      	beq.n	800833c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800832c:	4b1a      	ldr	r3, [pc, #104]	; (8008398 <prvAddCurrentTaskToDelayedList+0xb4>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3304      	adds	r3, #4
 8008332:	4619      	mov	r1, r3
 8008334:	481a      	ldr	r0, [pc, #104]	; (80083a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008336:	f7fe faaa 	bl	800688e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800833a:	e026      	b.n	800838a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4413      	add	r3, r2
 8008342:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008344:	4b14      	ldr	r3, [pc, #80]	; (8008398 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	429a      	cmp	r2, r3
 8008352:	d209      	bcs.n	8008368 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008354:	4b13      	ldr	r3, [pc, #76]	; (80083a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <prvAddCurrentTaskToDelayedList+0xb4>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3304      	adds	r3, #4
 800835e:	4619      	mov	r1, r3
 8008360:	4610      	mov	r0, r2
 8008362:	f7fe fab8 	bl	80068d6 <vListInsert>
}
 8008366:	e010      	b.n	800838a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008368:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	4b0a      	ldr	r3, [pc, #40]	; (8008398 <prvAddCurrentTaskToDelayedList+0xb4>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3304      	adds	r3, #4
 8008372:	4619      	mov	r1, r3
 8008374:	4610      	mov	r0, r2
 8008376:	f7fe faae 	bl	80068d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800837a:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	429a      	cmp	r2, r3
 8008382:	d202      	bcs.n	800838a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008384:	4a09      	ldr	r2, [pc, #36]	; (80083ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	6013      	str	r3, [r2, #0]
}
 800838a:	bf00      	nop
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20000cbc 	.word	0x20000cbc
 8008398:	20000bb8 	.word	0x20000bb8
 800839c:	20000cc0 	.word	0x20000cc0
 80083a0:	20000ca4 	.word	0x20000ca4
 80083a4:	20000c74 	.word	0x20000c74
 80083a8:	20000c70 	.word	0x20000c70
 80083ac:	20000cd8 	.word	0x20000cd8

080083b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08a      	sub	sp, #40	; 0x28
 80083b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80083ba:	f000 fb07 	bl	80089cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80083be:	4b1c      	ldr	r3, [pc, #112]	; (8008430 <xTimerCreateTimerTask+0x80>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d021      	beq.n	800840a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80083ce:	1d3a      	adds	r2, r7, #4
 80083d0:	f107 0108 	add.w	r1, r7, #8
 80083d4:	f107 030c 	add.w	r3, r7, #12
 80083d8:	4618      	mov	r0, r3
 80083da:	f7f8 fe59 	bl	8001090 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	9202      	str	r2, [sp, #8]
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	2302      	movs	r3, #2
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	2300      	movs	r3, #0
 80083ee:	460a      	mov	r2, r1
 80083f0:	4910      	ldr	r1, [pc, #64]	; (8008434 <xTimerCreateTimerTask+0x84>)
 80083f2:	4811      	ldr	r0, [pc, #68]	; (8008438 <xTimerCreateTimerTask+0x88>)
 80083f4:	f7fe fff4 	bl	80073e0 <xTaskCreateStatic>
 80083f8:	4603      	mov	r3, r0
 80083fa:	4a10      	ldr	r2, [pc, #64]	; (800843c <xTimerCreateTimerTask+0x8c>)
 80083fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083fe:	4b0f      	ldr	r3, [pc, #60]	; (800843c <xTimerCreateTimerTask+0x8c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008406:	2301      	movs	r3, #1
 8008408:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10a      	bne.n	8008426 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	613b      	str	r3, [r7, #16]
}
 8008422:	bf00      	nop
 8008424:	e7fe      	b.n	8008424 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008426:	697b      	ldr	r3, [r7, #20]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3718      	adds	r7, #24
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	20000d14 	.word	0x20000d14
 8008434:	0800dd90 	.word	0x0800dd90
 8008438:	08008575 	.word	0x08008575
 800843c:	20000d18 	.word	0x20000d18

08008440 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b08a      	sub	sp, #40	; 0x28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800844e:	2300      	movs	r3, #0
 8008450:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10a      	bne.n	800846e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	623b      	str	r3, [r7, #32]
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800846e:	4b1a      	ldr	r3, [pc, #104]	; (80084d8 <xTimerGenericCommand+0x98>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d02a      	beq.n	80084cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b05      	cmp	r3, #5
 8008486:	dc18      	bgt.n	80084ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008488:	f7ff fe88 	bl	800819c <xTaskGetSchedulerState>
 800848c:	4603      	mov	r3, r0
 800848e:	2b02      	cmp	r3, #2
 8008490:	d109      	bne.n	80084a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008492:	4b11      	ldr	r3, [pc, #68]	; (80084d8 <xTimerGenericCommand+0x98>)
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	f107 0110 	add.w	r1, r7, #16
 800849a:	2300      	movs	r3, #0
 800849c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800849e:	f7fe fbb7 	bl	8006c10 <xQueueGenericSend>
 80084a2:	6278      	str	r0, [r7, #36]	; 0x24
 80084a4:	e012      	b.n	80084cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80084a6:	4b0c      	ldr	r3, [pc, #48]	; (80084d8 <xTimerGenericCommand+0x98>)
 80084a8:	6818      	ldr	r0, [r3, #0]
 80084aa:	f107 0110 	add.w	r1, r7, #16
 80084ae:	2300      	movs	r3, #0
 80084b0:	2200      	movs	r2, #0
 80084b2:	f7fe fbad 	bl	8006c10 <xQueueGenericSend>
 80084b6:	6278      	str	r0, [r7, #36]	; 0x24
 80084b8:	e008      	b.n	80084cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80084ba:	4b07      	ldr	r3, [pc, #28]	; (80084d8 <xTimerGenericCommand+0x98>)
 80084bc:	6818      	ldr	r0, [r3, #0]
 80084be:	f107 0110 	add.w	r1, r7, #16
 80084c2:	2300      	movs	r3, #0
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	f7fe fca1 	bl	8006e0c <xQueueGenericSendFromISR>
 80084ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3728      	adds	r7, #40	; 0x28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20000d14 	.word	0x20000d14

080084dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af02      	add	r7, sp, #8
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e6:	4b22      	ldr	r3, [pc, #136]	; (8008570 <prvProcessExpiredTimer+0x94>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	3304      	adds	r3, #4
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe fa27 	bl	8006948 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b00      	cmp	r3, #0
 8008506:	d022      	beq.n	800854e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	699a      	ldr	r2, [r3, #24]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	18d1      	adds	r1, r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	6978      	ldr	r0, [r7, #20]
 8008516:	f000 f8d1 	bl	80086bc <prvInsertTimerInActiveList>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01f      	beq.n	8008560 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008520:	2300      	movs	r3, #0
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	2300      	movs	r3, #0
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	2100      	movs	r1, #0
 800852a:	6978      	ldr	r0, [r7, #20]
 800852c:	f7ff ff88 	bl	8008440 <xTimerGenericCommand>
 8008530:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d113      	bne.n	8008560 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	60fb      	str	r3, [r7, #12]
}
 800854a:	bf00      	nop
 800854c:	e7fe      	b.n	800854c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008554:	f023 0301 	bic.w	r3, r3, #1
 8008558:	b2da      	uxtb	r2, r3
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	6978      	ldr	r0, [r7, #20]
 8008566:	4798      	blx	r3
}
 8008568:	bf00      	nop
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20000d0c 	.word	0x20000d0c

08008574 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800857c:	f107 0308 	add.w	r3, r7, #8
 8008580:	4618      	mov	r0, r3
 8008582:	f000 f857 	bl	8008634 <prvGetNextExpireTime>
 8008586:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4619      	mov	r1, r3
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 f803 	bl	8008598 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008592:	f000 f8d5 	bl	8008740 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008596:	e7f1      	b.n	800857c <prvTimerTask+0x8>

08008598 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80085a2:	f7ff f9f1 	bl	8007988 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085a6:	f107 0308 	add.w	r3, r7, #8
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f866 	bl	800867c <prvSampleTimeNow>
 80085b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d130      	bne.n	800861a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10a      	bne.n	80085d4 <prvProcessTimerOrBlockTask+0x3c>
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d806      	bhi.n	80085d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80085c6:	f7ff f9ed 	bl	80079a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80085ca:	68f9      	ldr	r1, [r7, #12]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7ff ff85 	bl	80084dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80085d2:	e024      	b.n	800861e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d008      	beq.n	80085ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80085da:	4b13      	ldr	r3, [pc, #76]	; (8008628 <prvProcessTimerOrBlockTask+0x90>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <prvProcessTimerOrBlockTask+0x50>
 80085e4:	2301      	movs	r3, #1
 80085e6:	e000      	b.n	80085ea <prvProcessTimerOrBlockTask+0x52>
 80085e8:	2300      	movs	r3, #0
 80085ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80085ec:	4b0f      	ldr	r3, [pc, #60]	; (800862c <prvProcessTimerOrBlockTask+0x94>)
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	4619      	mov	r1, r3
 80085fa:	f7fe febd 	bl	8007378 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80085fe:	f7ff f9d1 	bl	80079a4 <xTaskResumeAll>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10a      	bne.n	800861e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008608:	4b09      	ldr	r3, [pc, #36]	; (8008630 <prvProcessTimerOrBlockTask+0x98>)
 800860a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	f3bf 8f6f 	isb	sy
}
 8008618:	e001      	b.n	800861e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800861a:	f7ff f9c3 	bl	80079a4 <xTaskResumeAll>
}
 800861e:	bf00      	nop
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20000d10 	.word	0x20000d10
 800862c:	20000d14 	.word	0x20000d14
 8008630:	e000ed04 	.word	0xe000ed04

08008634 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800863c:	4b0e      	ldr	r3, [pc, #56]	; (8008678 <prvGetNextExpireTime+0x44>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <prvGetNextExpireTime+0x16>
 8008646:	2201      	movs	r2, #1
 8008648:	e000      	b.n	800864c <prvGetNextExpireTime+0x18>
 800864a:	2200      	movs	r2, #0
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d105      	bne.n	8008664 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008658:	4b07      	ldr	r3, [pc, #28]	; (8008678 <prvGetNextExpireTime+0x44>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60fb      	str	r3, [r7, #12]
 8008662:	e001      	b.n	8008668 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008668:	68fb      	ldr	r3, [r7, #12]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	20000d0c 	.word	0x20000d0c

0800867c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008684:	f7ff fa2a 	bl	8007adc <xTaskGetTickCount>
 8008688:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800868a:	4b0b      	ldr	r3, [pc, #44]	; (80086b8 <prvSampleTimeNow+0x3c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	429a      	cmp	r2, r3
 8008692:	d205      	bcs.n	80086a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008694:	f000 f936 	bl	8008904 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	e002      	b.n	80086a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80086a6:	4a04      	ldr	r2, [pc, #16]	; (80086b8 <prvSampleTimeNow+0x3c>)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80086ac:	68fb      	ldr	r3, [r7, #12]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20000d1c 	.word	0x20000d1c

080086bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80086ca:	2300      	movs	r3, #0
 80086cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d812      	bhi.n	8008708 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	1ad2      	subs	r2, r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d302      	bcc.n	80086f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80086f0:	2301      	movs	r3, #1
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	e01b      	b.n	800872e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80086f6:	4b10      	ldr	r3, [pc, #64]	; (8008738 <prvInsertTimerInActiveList+0x7c>)
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3304      	adds	r3, #4
 80086fe:	4619      	mov	r1, r3
 8008700:	4610      	mov	r0, r2
 8008702:	f7fe f8e8 	bl	80068d6 <vListInsert>
 8008706:	e012      	b.n	800872e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	429a      	cmp	r2, r3
 800870e:	d206      	bcs.n	800871e <prvInsertTimerInActiveList+0x62>
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	429a      	cmp	r2, r3
 8008716:	d302      	bcc.n	800871e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008718:	2301      	movs	r3, #1
 800871a:	617b      	str	r3, [r7, #20]
 800871c:	e007      	b.n	800872e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800871e:	4b07      	ldr	r3, [pc, #28]	; (800873c <prvInsertTimerInActiveList+0x80>)
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	3304      	adds	r3, #4
 8008726:	4619      	mov	r1, r3
 8008728:	4610      	mov	r0, r2
 800872a:	f7fe f8d4 	bl	80068d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800872e:	697b      	ldr	r3, [r7, #20]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	20000d10 	.word	0x20000d10
 800873c:	20000d0c 	.word	0x20000d0c

08008740 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08e      	sub	sp, #56	; 0x38
 8008744:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008746:	e0ca      	b.n	80088de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	da18      	bge.n	8008780 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800874e:	1d3b      	adds	r3, r7, #4
 8008750:	3304      	adds	r3, #4
 8008752:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10a      	bne.n	8008770 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	61fb      	str	r3, [r7, #28]
}
 800876c:	bf00      	nop
 800876e:	e7fe      	b.n	800876e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008776:	6850      	ldr	r0, [r2, #4]
 8008778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800877a:	6892      	ldr	r2, [r2, #8]
 800877c:	4611      	mov	r1, r2
 800877e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	f2c0 80aa 	blt.w	80088dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d004      	beq.n	800879e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	3304      	adds	r3, #4
 8008798:	4618      	mov	r0, r3
 800879a:	f7fe f8d5 	bl	8006948 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800879e:	463b      	mov	r3, r7
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7ff ff6b 	bl	800867c <prvSampleTimeNow>
 80087a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b09      	cmp	r3, #9
 80087ac:	f200 8097 	bhi.w	80088de <prvProcessReceivedCommands+0x19e>
 80087b0:	a201      	add	r2, pc, #4	; (adr r2, 80087b8 <prvProcessReceivedCommands+0x78>)
 80087b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b6:	bf00      	nop
 80087b8:	080087e1 	.word	0x080087e1
 80087bc:	080087e1 	.word	0x080087e1
 80087c0:	080087e1 	.word	0x080087e1
 80087c4:	08008855 	.word	0x08008855
 80087c8:	08008869 	.word	0x08008869
 80087cc:	080088b3 	.word	0x080088b3
 80087d0:	080087e1 	.word	0x080087e1
 80087d4:	080087e1 	.word	0x080087e1
 80087d8:	08008855 	.word	0x08008855
 80087dc:	08008869 	.word	0x08008869
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087e6:	f043 0301 	orr.w	r3, r3, #1
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	18d1      	adds	r1, r2, r3
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008800:	f7ff ff5c 	bl	80086bc <prvInsertTimerInActiveList>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d069      	beq.n	80088de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008810:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b00      	cmp	r3, #0
 800881e:	d05e      	beq.n	80088de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	441a      	add	r2, r3
 8008828:	2300      	movs	r3, #0
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	2300      	movs	r3, #0
 800882e:	2100      	movs	r1, #0
 8008830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008832:	f7ff fe05 	bl	8008440 <xTimerGenericCommand>
 8008836:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d14f      	bne.n	80088de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	61bb      	str	r3, [r7, #24]
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800885a:	f023 0301 	bic.w	r3, r3, #1
 800885e:	b2da      	uxtb	r2, r3
 8008860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8008866:	e03a      	b.n	80088de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800886e:	f043 0301 	orr.w	r3, r3, #1
 8008872:	b2da      	uxtb	r2, r3
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10a      	bne.n	800889e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	617b      	str	r3, [r7, #20]
}
 800889a:	bf00      	nop
 800889c:	e7fe      	b.n	800889c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	18d1      	adds	r1, r2, r3
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ac:	f7ff ff06 	bl	80086bc <prvInsertTimerInActiveList>
					break;
 80088b0:	e015      	b.n	80088de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80088b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80088b8:	f003 0302 	and.w	r3, r3, #2
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d103      	bne.n	80088c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80088c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088c2:	f000 fbdd 	bl	8009080 <vPortFree>
 80088c6:	e00a      	b.n	80088de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80088ce:	f023 0301 	bic.w	r3, r3, #1
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80088da:	e000      	b.n	80088de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80088dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088de:	4b08      	ldr	r3, [pc, #32]	; (8008900 <prvProcessReceivedCommands+0x1c0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	1d39      	adds	r1, r7, #4
 80088e4:	2200      	movs	r2, #0
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe fb2c 	bl	8006f44 <xQueueReceive>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f47f af2a 	bne.w	8008748 <prvProcessReceivedCommands+0x8>
	}
}
 80088f4:	bf00      	nop
 80088f6:	bf00      	nop
 80088f8:	3730      	adds	r7, #48	; 0x30
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20000d14 	.word	0x20000d14

08008904 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b088      	sub	sp, #32
 8008908:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800890a:	e048      	b.n	800899e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800890c:	4b2d      	ldr	r3, [pc, #180]	; (80089c4 <prvSwitchTimerLists+0xc0>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008916:	4b2b      	ldr	r3, [pc, #172]	; (80089c4 <prvSwitchTimerLists+0xc0>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3304      	adds	r3, #4
 8008924:	4618      	mov	r0, r3
 8008926:	f7fe f80f 	bl	8006948 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008938:	f003 0304 	and.w	r3, r3, #4
 800893c:	2b00      	cmp	r3, #0
 800893e:	d02e      	beq.n	800899e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	4413      	add	r3, r2
 8008948:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	429a      	cmp	r2, r3
 8008950:	d90e      	bls.n	8008970 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800895e:	4b19      	ldr	r3, [pc, #100]	; (80089c4 <prvSwitchTimerLists+0xc0>)
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3304      	adds	r3, #4
 8008966:	4619      	mov	r1, r3
 8008968:	4610      	mov	r0, r2
 800896a:	f7fd ffb4 	bl	80068d6 <vListInsert>
 800896e:	e016      	b.n	800899e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008970:	2300      	movs	r3, #0
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	2300      	movs	r3, #0
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	2100      	movs	r1, #0
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f7ff fd60 	bl	8008440 <xTimerGenericCommand>
 8008980:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10a      	bne.n	800899e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	603b      	str	r3, [r7, #0]
}
 800899a:	bf00      	nop
 800899c:	e7fe      	b.n	800899c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800899e:	4b09      	ldr	r3, [pc, #36]	; (80089c4 <prvSwitchTimerLists+0xc0>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1b1      	bne.n	800890c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80089a8:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <prvSwitchTimerLists+0xc0>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80089ae:	4b06      	ldr	r3, [pc, #24]	; (80089c8 <prvSwitchTimerLists+0xc4>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a04      	ldr	r2, [pc, #16]	; (80089c4 <prvSwitchTimerLists+0xc0>)
 80089b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80089b6:	4a04      	ldr	r2, [pc, #16]	; (80089c8 <prvSwitchTimerLists+0xc4>)
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	6013      	str	r3, [r2, #0]
}
 80089bc:	bf00      	nop
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	20000d0c 	.word	0x20000d0c
 80089c8:	20000d10 	.word	0x20000d10

080089cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80089d2:	f000 f967 	bl	8008ca4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80089d6:	4b15      	ldr	r3, [pc, #84]	; (8008a2c <prvCheckForValidListAndQueue+0x60>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d120      	bne.n	8008a20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80089de:	4814      	ldr	r0, [pc, #80]	; (8008a30 <prvCheckForValidListAndQueue+0x64>)
 80089e0:	f7fd ff28 	bl	8006834 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80089e4:	4813      	ldr	r0, [pc, #76]	; (8008a34 <prvCheckForValidListAndQueue+0x68>)
 80089e6:	f7fd ff25 	bl	8006834 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80089ea:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <prvCheckForValidListAndQueue+0x6c>)
 80089ec:	4a10      	ldr	r2, [pc, #64]	; (8008a30 <prvCheckForValidListAndQueue+0x64>)
 80089ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80089f0:	4b12      	ldr	r3, [pc, #72]	; (8008a3c <prvCheckForValidListAndQueue+0x70>)
 80089f2:	4a10      	ldr	r2, [pc, #64]	; (8008a34 <prvCheckForValidListAndQueue+0x68>)
 80089f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089f6:	2300      	movs	r3, #0
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	4b11      	ldr	r3, [pc, #68]	; (8008a40 <prvCheckForValidListAndQueue+0x74>)
 80089fc:	4a11      	ldr	r2, [pc, #68]	; (8008a44 <prvCheckForValidListAndQueue+0x78>)
 80089fe:	2110      	movs	r1, #16
 8008a00:	200a      	movs	r0, #10
 8008a02:	f7fe f833 	bl	8006a6c <xQueueGenericCreateStatic>
 8008a06:	4603      	mov	r3, r0
 8008a08:	4a08      	ldr	r2, [pc, #32]	; (8008a2c <prvCheckForValidListAndQueue+0x60>)
 8008a0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a0c:	4b07      	ldr	r3, [pc, #28]	; (8008a2c <prvCheckForValidListAndQueue+0x60>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d005      	beq.n	8008a20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a14:	4b05      	ldr	r3, [pc, #20]	; (8008a2c <prvCheckForValidListAndQueue+0x60>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	490b      	ldr	r1, [pc, #44]	; (8008a48 <prvCheckForValidListAndQueue+0x7c>)
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe fc82 	bl	8007324 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a20:	f000 f970 	bl	8008d04 <vPortExitCritical>
}
 8008a24:	bf00      	nop
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20000d14 	.word	0x20000d14
 8008a30:	20000ce4 	.word	0x20000ce4
 8008a34:	20000cf8 	.word	0x20000cf8
 8008a38:	20000d0c 	.word	0x20000d0c
 8008a3c:	20000d10 	.word	0x20000d10
 8008a40:	20000dc0 	.word	0x20000dc0
 8008a44:	20000d20 	.word	0x20000d20
 8008a48:	0800dd98 	.word	0x0800dd98

08008a4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3b04      	subs	r3, #4
 8008a5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3b04      	subs	r3, #4
 8008a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f023 0201 	bic.w	r2, r3, #1
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3b04      	subs	r3, #4
 8008a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a7c:	4a0c      	ldr	r2, [pc, #48]	; (8008ab0 <pxPortInitialiseStack+0x64>)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	3b14      	subs	r3, #20
 8008a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3b04      	subs	r3, #4
 8008a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f06f 0202 	mvn.w	r2, #2
 8008a9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3b20      	subs	r3, #32
 8008aa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	08008ab5 	.word	0x08008ab5

08008ab4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008abe:	4b12      	ldr	r3, [pc, #72]	; (8008b08 <prvTaskExitError+0x54>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac6:	d00a      	beq.n	8008ade <prvTaskExitError+0x2a>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	60fb      	str	r3, [r7, #12]
}
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <prvTaskExitError+0x28>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	60bb      	str	r3, [r7, #8]
}
 8008af0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008af2:	bf00      	nop
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0fc      	beq.n	8008af4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008afa:	bf00      	nop
 8008afc:	bf00      	nop
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	20000040 	.word	0x20000040
 8008b0c:	00000000 	.word	0x00000000

08008b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b10:	4b07      	ldr	r3, [pc, #28]	; (8008b30 <pxCurrentTCBConst2>)
 8008b12:	6819      	ldr	r1, [r3, #0]
 8008b14:	6808      	ldr	r0, [r1, #0]
 8008b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1a:	f380 8809 	msr	PSP, r0
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f04f 0000 	mov.w	r0, #0
 8008b26:	f380 8811 	msr	BASEPRI, r0
 8008b2a:	4770      	bx	lr
 8008b2c:	f3af 8000 	nop.w

08008b30 <pxCurrentTCBConst2>:
 8008b30:	20000bb8 	.word	0x20000bb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b34:	bf00      	nop
 8008b36:	bf00      	nop

08008b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b38:	4808      	ldr	r0, [pc, #32]	; (8008b5c <prvPortStartFirstTask+0x24>)
 8008b3a:	6800      	ldr	r0, [r0, #0]
 8008b3c:	6800      	ldr	r0, [r0, #0]
 8008b3e:	f380 8808 	msr	MSP, r0
 8008b42:	f04f 0000 	mov.w	r0, #0
 8008b46:	f380 8814 	msr	CONTROL, r0
 8008b4a:	b662      	cpsie	i
 8008b4c:	b661      	cpsie	f
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	df00      	svc	0
 8008b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b5a:	bf00      	nop
 8008b5c:	e000ed08 	.word	0xe000ed08

08008b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b66:	4b46      	ldr	r3, [pc, #280]	; (8008c80 <xPortStartScheduler+0x120>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a46      	ldr	r2, [pc, #280]	; (8008c84 <xPortStartScheduler+0x124>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d10a      	bne.n	8008b86 <xPortStartScheduler+0x26>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	613b      	str	r3, [r7, #16]
}
 8008b82:	bf00      	nop
 8008b84:	e7fe      	b.n	8008b84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b86:	4b3e      	ldr	r3, [pc, #248]	; (8008c80 <xPortStartScheduler+0x120>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a3f      	ldr	r2, [pc, #252]	; (8008c88 <xPortStartScheduler+0x128>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d10a      	bne.n	8008ba6 <xPortStartScheduler+0x46>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	60fb      	str	r3, [r7, #12]
}
 8008ba2:	bf00      	nop
 8008ba4:	e7fe      	b.n	8008ba4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ba6:	4b39      	ldr	r3, [pc, #228]	; (8008c8c <xPortStartScheduler+0x12c>)
 8008ba8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	22ff      	movs	r2, #255	; 0xff
 8008bb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008bc0:	78fb      	ldrb	r3, [r7, #3]
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	4b31      	ldr	r3, [pc, #196]	; (8008c90 <xPortStartScheduler+0x130>)
 8008bcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008bce:	4b31      	ldr	r3, [pc, #196]	; (8008c94 <xPortStartScheduler+0x134>)
 8008bd0:	2207      	movs	r2, #7
 8008bd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bd4:	e009      	b.n	8008bea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008bd6:	4b2f      	ldr	r3, [pc, #188]	; (8008c94 <xPortStartScheduler+0x134>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	4a2d      	ldr	r2, [pc, #180]	; (8008c94 <xPortStartScheduler+0x134>)
 8008bde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008be0:	78fb      	ldrb	r3, [r7, #3]
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bea:	78fb      	ldrb	r3, [r7, #3]
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf2:	2b80      	cmp	r3, #128	; 0x80
 8008bf4:	d0ef      	beq.n	8008bd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bf6:	4b27      	ldr	r3, [pc, #156]	; (8008c94 <xPortStartScheduler+0x134>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f1c3 0307 	rsb	r3, r3, #7
 8008bfe:	2b04      	cmp	r3, #4
 8008c00:	d00a      	beq.n	8008c18 <xPortStartScheduler+0xb8>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	60bb      	str	r3, [r7, #8]
}
 8008c14:	bf00      	nop
 8008c16:	e7fe      	b.n	8008c16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c18:	4b1e      	ldr	r3, [pc, #120]	; (8008c94 <xPortStartScheduler+0x134>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	021b      	lsls	r3, r3, #8
 8008c1e:	4a1d      	ldr	r2, [pc, #116]	; (8008c94 <xPortStartScheduler+0x134>)
 8008c20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c22:	4b1c      	ldr	r3, [pc, #112]	; (8008c94 <xPortStartScheduler+0x134>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c2a:	4a1a      	ldr	r2, [pc, #104]	; (8008c94 <xPortStartScheduler+0x134>)
 8008c2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c36:	4b18      	ldr	r3, [pc, #96]	; (8008c98 <xPortStartScheduler+0x138>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a17      	ldr	r2, [pc, #92]	; (8008c98 <xPortStartScheduler+0x138>)
 8008c3c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8008c40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c42:	4b15      	ldr	r3, [pc, #84]	; (8008c98 <xPortStartScheduler+0x138>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a14      	ldr	r2, [pc, #80]	; (8008c98 <xPortStartScheduler+0x138>)
 8008c48:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8008c4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c4e:	f000 f8dd 	bl	8008e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c52:	4b12      	ldr	r3, [pc, #72]	; (8008c9c <xPortStartScheduler+0x13c>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c58:	f000 f8fc 	bl	8008e54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c5c:	4b10      	ldr	r3, [pc, #64]	; (8008ca0 <xPortStartScheduler+0x140>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a0f      	ldr	r2, [pc, #60]	; (8008ca0 <xPortStartScheduler+0x140>)
 8008c62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c68:	f7ff ff66 	bl	8008b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c6c:	f7fe fffe 	bl	8007c6c <vTaskSwitchContext>
	prvTaskExitError();
 8008c70:	f7ff ff20 	bl	8008ab4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	e000ed00 	.word	0xe000ed00
 8008c84:	410fc271 	.word	0x410fc271
 8008c88:	410fc270 	.word	0x410fc270
 8008c8c:	e000e400 	.word	0xe000e400
 8008c90:	20000e08 	.word	0x20000e08
 8008c94:	20000e0c 	.word	0x20000e0c
 8008c98:	e000ed20 	.word	0xe000ed20
 8008c9c:	20000040 	.word	0x20000040
 8008ca0:	e000ef34 	.word	0xe000ef34

08008ca4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	607b      	str	r3, [r7, #4]
}
 8008cbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008cbe:	4b0f      	ldr	r3, [pc, #60]	; (8008cfc <vPortEnterCritical+0x58>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	4a0d      	ldr	r2, [pc, #52]	; (8008cfc <vPortEnterCritical+0x58>)
 8008cc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008cc8:	4b0c      	ldr	r3, [pc, #48]	; (8008cfc <vPortEnterCritical+0x58>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d10f      	bne.n	8008cf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008cd0:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <vPortEnterCritical+0x5c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00a      	beq.n	8008cf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	603b      	str	r3, [r7, #0]
}
 8008cec:	bf00      	nop
 8008cee:	e7fe      	b.n	8008cee <vPortEnterCritical+0x4a>
	}
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	20000040 	.word	0x20000040
 8008d00:	e000ed04 	.word	0xe000ed04

08008d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d0a:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <vPortExitCritical+0x50>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10a      	bne.n	8008d28 <vPortExitCritical+0x24>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	607b      	str	r3, [r7, #4]
}
 8008d24:	bf00      	nop
 8008d26:	e7fe      	b.n	8008d26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d28:	4b0a      	ldr	r3, [pc, #40]	; (8008d54 <vPortExitCritical+0x50>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	4a09      	ldr	r2, [pc, #36]	; (8008d54 <vPortExitCritical+0x50>)
 8008d30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d32:	4b08      	ldr	r3, [pc, #32]	; (8008d54 <vPortExitCritical+0x50>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d105      	bne.n	8008d46 <vPortExitCritical+0x42>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	f383 8811 	msr	BASEPRI, r3
}
 8008d44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	20000040 	.word	0x20000040
	...

08008d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d60:	f3ef 8009 	mrs	r0, PSP
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	4b15      	ldr	r3, [pc, #84]	; (8008dc0 <pxCurrentTCBConst>)
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	f01e 0f10 	tst.w	lr, #16
 8008d70:	bf08      	it	eq
 8008d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7a:	6010      	str	r0, [r2, #0]
 8008d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d84:	f380 8811 	msr	BASEPRI, r0
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f7fe ff6c 	bl	8007c6c <vTaskSwitchContext>
 8008d94:	f04f 0000 	mov.w	r0, #0
 8008d98:	f380 8811 	msr	BASEPRI, r0
 8008d9c:	bc09      	pop	{r0, r3}
 8008d9e:	6819      	ldr	r1, [r3, #0]
 8008da0:	6808      	ldr	r0, [r1, #0]
 8008da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da6:	f01e 0f10 	tst.w	lr, #16
 8008daa:	bf08      	it	eq
 8008dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008db0:	f380 8809 	msr	PSP, r0
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	f3af 8000 	nop.w

08008dc0 <pxCurrentTCBConst>:
 8008dc0:	20000bb8 	.word	0x20000bb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop

08008dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	607b      	str	r3, [r7, #4]
}
 8008de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008de2:	f7fe fe8b 	bl	8007afc <xTaskIncrementTick>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dec:	4b06      	ldr	r3, [pc, #24]	; (8008e08 <SysTick_Handler+0x40>)
 8008dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	2300      	movs	r3, #0
 8008df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	f383 8811 	msr	BASEPRI, r3
}
 8008dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	e000ed04 	.word	0xe000ed04

08008e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e10:	4b0b      	ldr	r3, [pc, #44]	; (8008e40 <vPortSetupTimerInterrupt+0x34>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e16:	4b0b      	ldr	r3, [pc, #44]	; (8008e44 <vPortSetupTimerInterrupt+0x38>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <vPortSetupTimerInterrupt+0x3c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a0a      	ldr	r2, [pc, #40]	; (8008e4c <vPortSetupTimerInterrupt+0x40>)
 8008e22:	fba2 2303 	umull	r2, r3, r2, r3
 8008e26:	099b      	lsrs	r3, r3, #6
 8008e28:	4a09      	ldr	r2, [pc, #36]	; (8008e50 <vPortSetupTimerInterrupt+0x44>)
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e2e:	4b04      	ldr	r3, [pc, #16]	; (8008e40 <vPortSetupTimerInterrupt+0x34>)
 8008e30:	2207      	movs	r2, #7
 8008e32:	601a      	str	r2, [r3, #0]
}
 8008e34:	bf00      	nop
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	e000e010 	.word	0xe000e010
 8008e44:	e000e018 	.word	0xe000e018
 8008e48:	20000000 	.word	0x20000000
 8008e4c:	10624dd3 	.word	0x10624dd3
 8008e50:	e000e014 	.word	0xe000e014

08008e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e64 <vPortEnableVFP+0x10>
 8008e58:	6801      	ldr	r1, [r0, #0]
 8008e5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e5e:	6001      	str	r1, [r0, #0]
 8008e60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e62:	bf00      	nop
 8008e64:	e000ed88 	.word	0xe000ed88

08008e68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e6e:	f3ef 8305 	mrs	r3, IPSR
 8008e72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2b0f      	cmp	r3, #15
 8008e78:	d914      	bls.n	8008ea4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e7a:	4a17      	ldr	r2, [pc, #92]	; (8008ed8 <vPortValidateInterruptPriority+0x70>)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e84:	4b15      	ldr	r3, [pc, #84]	; (8008edc <vPortValidateInterruptPriority+0x74>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	7afa      	ldrb	r2, [r7, #11]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d20a      	bcs.n	8008ea4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	607b      	str	r3, [r7, #4]
}
 8008ea0:	bf00      	nop
 8008ea2:	e7fe      	b.n	8008ea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ea4:	4b0e      	ldr	r3, [pc, #56]	; (8008ee0 <vPortValidateInterruptPriority+0x78>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008eac:	4b0d      	ldr	r3, [pc, #52]	; (8008ee4 <vPortValidateInterruptPriority+0x7c>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d90a      	bls.n	8008eca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	603b      	str	r3, [r7, #0]
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <vPortValidateInterruptPriority+0x60>
	}
 8008eca:	bf00      	nop
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	e000e3f0 	.word	0xe000e3f0
 8008edc:	20000e08 	.word	0x20000e08
 8008ee0:	e000ed0c 	.word	0xe000ed0c
 8008ee4:	20000e0c 	.word	0x20000e0c

08008ee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08a      	sub	sp, #40	; 0x28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ef4:	f7fe fd48 	bl	8007988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ef8:	4b5b      	ldr	r3, [pc, #364]	; (8009068 <pvPortMalloc+0x180>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f00:	f000 f920 	bl	8009144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f04:	4b59      	ldr	r3, [pc, #356]	; (800906c <pvPortMalloc+0x184>)
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f040 8093 	bne.w	8009038 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d01d      	beq.n	8008f54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008f18:	2208      	movs	r2, #8
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f003 0307 	and.w	r3, r3, #7
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d014      	beq.n	8008f54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f023 0307 	bic.w	r3, r3, #7
 8008f30:	3308      	adds	r3, #8
 8008f32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f003 0307 	and.w	r3, r3, #7
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00a      	beq.n	8008f54 <pvPortMalloc+0x6c>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	617b      	str	r3, [r7, #20]
}
 8008f50:	bf00      	nop
 8008f52:	e7fe      	b.n	8008f52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d06e      	beq.n	8009038 <pvPortMalloc+0x150>
 8008f5a:	4b45      	ldr	r3, [pc, #276]	; (8009070 <pvPortMalloc+0x188>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d869      	bhi.n	8009038 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f64:	4b43      	ldr	r3, [pc, #268]	; (8009074 <pvPortMalloc+0x18c>)
 8008f66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f68:	4b42      	ldr	r3, [pc, #264]	; (8009074 <pvPortMalloc+0x18c>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f6e:	e004      	b.n	8008f7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d903      	bls.n	8008f8c <pvPortMalloc+0xa4>
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1f1      	bne.n	8008f70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f8c:	4b36      	ldr	r3, [pc, #216]	; (8009068 <pvPortMalloc+0x180>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d050      	beq.n	8009038 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2208      	movs	r2, #8
 8008f9c:	4413      	add	r3, r2
 8008f9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	6a3b      	ldr	r3, [r7, #32]
 8008fa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	1ad2      	subs	r2, r2, r3
 8008fb0:	2308      	movs	r3, #8
 8008fb2:	005b      	lsls	r3, r3, #1
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d91f      	bls.n	8008ff8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	f003 0307 	and.w	r3, r3, #7
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00a      	beq.n	8008fe0 <pvPortMalloc+0xf8>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	613b      	str	r3, [r7, #16]
}
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	1ad2      	subs	r2, r2, r3
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ff2:	69b8      	ldr	r0, [r7, #24]
 8008ff4:	f000 f908 	bl	8009208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ff8:	4b1d      	ldr	r3, [pc, #116]	; (8009070 <pvPortMalloc+0x188>)
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	4a1b      	ldr	r2, [pc, #108]	; (8009070 <pvPortMalloc+0x188>)
 8009004:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009006:	4b1a      	ldr	r3, [pc, #104]	; (8009070 <pvPortMalloc+0x188>)
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	4b1b      	ldr	r3, [pc, #108]	; (8009078 <pvPortMalloc+0x190>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	429a      	cmp	r2, r3
 8009010:	d203      	bcs.n	800901a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009012:	4b17      	ldr	r3, [pc, #92]	; (8009070 <pvPortMalloc+0x188>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a18      	ldr	r2, [pc, #96]	; (8009078 <pvPortMalloc+0x190>)
 8009018:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	4b13      	ldr	r3, [pc, #76]	; (800906c <pvPortMalloc+0x184>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	431a      	orrs	r2, r3
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	2200      	movs	r2, #0
 800902c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800902e:	4b13      	ldr	r3, [pc, #76]	; (800907c <pvPortMalloc+0x194>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3301      	adds	r3, #1
 8009034:	4a11      	ldr	r2, [pc, #68]	; (800907c <pvPortMalloc+0x194>)
 8009036:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009038:	f7fe fcb4 	bl	80079a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	f003 0307 	and.w	r3, r3, #7
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00a      	beq.n	800905c <pvPortMalloc+0x174>
	__asm volatile
 8009046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904a:	f383 8811 	msr	BASEPRI, r3
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f3bf 8f4f 	dsb	sy
 8009056:	60fb      	str	r3, [r7, #12]
}
 8009058:	bf00      	nop
 800905a:	e7fe      	b.n	800905a <pvPortMalloc+0x172>
	return pvReturn;
 800905c:	69fb      	ldr	r3, [r7, #28]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3728      	adds	r7, #40	; 0x28
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20008348 	.word	0x20008348
 800906c:	2000835c 	.word	0x2000835c
 8009070:	2000834c 	.word	0x2000834c
 8009074:	20008340 	.word	0x20008340
 8009078:	20008350 	.word	0x20008350
 800907c:	20008354 	.word	0x20008354

08009080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d04d      	beq.n	800912e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009092:	2308      	movs	r3, #8
 8009094:	425b      	negs	r3, r3
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	4413      	add	r3, r2
 800909a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	4b24      	ldr	r3, [pc, #144]	; (8009138 <vPortFree+0xb8>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4013      	ands	r3, r2
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10a      	bne.n	80090c4 <vPortFree+0x44>
	__asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	60fb      	str	r3, [r7, #12]
}
 80090c0:	bf00      	nop
 80090c2:	e7fe      	b.n	80090c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00a      	beq.n	80090e2 <vPortFree+0x62>
	__asm volatile
 80090cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	60bb      	str	r3, [r7, #8]
}
 80090de:	bf00      	nop
 80090e0:	e7fe      	b.n	80090e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	4b14      	ldr	r3, [pc, #80]	; (8009138 <vPortFree+0xb8>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4013      	ands	r3, r2
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d01e      	beq.n	800912e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d11a      	bne.n	800912e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	4b0e      	ldr	r3, [pc, #56]	; (8009138 <vPortFree+0xb8>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	43db      	mvns	r3, r3
 8009102:	401a      	ands	r2, r3
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009108:	f7fe fc3e 	bl	8007988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	4b0a      	ldr	r3, [pc, #40]	; (800913c <vPortFree+0xbc>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4413      	add	r3, r2
 8009116:	4a09      	ldr	r2, [pc, #36]	; (800913c <vPortFree+0xbc>)
 8009118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800911a:	6938      	ldr	r0, [r7, #16]
 800911c:	f000 f874 	bl	8009208 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009120:	4b07      	ldr	r3, [pc, #28]	; (8009140 <vPortFree+0xc0>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3301      	adds	r3, #1
 8009126:	4a06      	ldr	r2, [pc, #24]	; (8009140 <vPortFree+0xc0>)
 8009128:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800912a:	f7fe fc3b 	bl	80079a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800912e:	bf00      	nop
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	2000835c 	.word	0x2000835c
 800913c:	2000834c 	.word	0x2000834c
 8009140:	20008358 	.word	0x20008358

08009144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800914a:	f247 5330 	movw	r3, #30000	; 0x7530
 800914e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009150:	4b27      	ldr	r3, [pc, #156]	; (80091f0 <prvHeapInit+0xac>)
 8009152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f003 0307 	and.w	r3, r3, #7
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00c      	beq.n	8009178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3307      	adds	r3, #7
 8009162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f023 0307 	bic.w	r3, r3, #7
 800916a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	4a1f      	ldr	r2, [pc, #124]	; (80091f0 <prvHeapInit+0xac>)
 8009174:	4413      	add	r3, r2
 8009176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800917c:	4a1d      	ldr	r2, [pc, #116]	; (80091f4 <prvHeapInit+0xb0>)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009182:	4b1c      	ldr	r3, [pc, #112]	; (80091f4 <prvHeapInit+0xb0>)
 8009184:	2200      	movs	r2, #0
 8009186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	4413      	add	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009190:	2208      	movs	r2, #8
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	1a9b      	subs	r3, r3, r2
 8009196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f023 0307 	bic.w	r3, r3, #7
 800919e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4a15      	ldr	r2, [pc, #84]	; (80091f8 <prvHeapInit+0xb4>)
 80091a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091a6:	4b14      	ldr	r3, [pc, #80]	; (80091f8 <prvHeapInit+0xb4>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2200      	movs	r2, #0
 80091ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091ae:	4b12      	ldr	r3, [pc, #72]	; (80091f8 <prvHeapInit+0xb4>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	1ad2      	subs	r2, r2, r3
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80091c4:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <prvHeapInit+0xb4>)
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	4a0a      	ldr	r2, [pc, #40]	; (80091fc <prvHeapInit+0xb8>)
 80091d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	4a09      	ldr	r2, [pc, #36]	; (8009200 <prvHeapInit+0xbc>)
 80091da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80091dc:	4b09      	ldr	r3, [pc, #36]	; (8009204 <prvHeapInit+0xc0>)
 80091de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80091e2:	601a      	str	r2, [r3, #0]
}
 80091e4:	bf00      	nop
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	20000e10 	.word	0x20000e10
 80091f4:	20008340 	.word	0x20008340
 80091f8:	20008348 	.word	0x20008348
 80091fc:	20008350 	.word	0x20008350
 8009200:	2000834c 	.word	0x2000834c
 8009204:	2000835c 	.word	0x2000835c

08009208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009210:	4b28      	ldr	r3, [pc, #160]	; (80092b4 <prvInsertBlockIntoFreeList+0xac>)
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	e002      	b.n	800921c <prvInsertBlockIntoFreeList+0x14>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	429a      	cmp	r2, r3
 8009224:	d8f7      	bhi.n	8009216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	4413      	add	r3, r2
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	429a      	cmp	r2, r3
 8009236:	d108      	bne.n	800924a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	441a      	add	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	441a      	add	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	429a      	cmp	r2, r3
 800925c:	d118      	bne.n	8009290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	4b15      	ldr	r3, [pc, #84]	; (80092b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	d00d      	beq.n	8009286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	441a      	add	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	e008      	b.n	8009298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009286:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	e003      	b.n	8009298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	429a      	cmp	r2, r3
 800929e:	d002      	beq.n	80092a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092a6:	bf00      	nop
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	20008340 	.word	0x20008340
 80092b8:	20008348 	.word	0x20008348

080092bc <__errno>:
 80092bc:	4b01      	ldr	r3, [pc, #4]	; (80092c4 <__errno+0x8>)
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20000044 	.word	0x20000044

080092c8 <std>:
 80092c8:	2300      	movs	r3, #0
 80092ca:	b510      	push	{r4, lr}
 80092cc:	4604      	mov	r4, r0
 80092ce:	e9c0 3300 	strd	r3, r3, [r0]
 80092d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092d6:	6083      	str	r3, [r0, #8]
 80092d8:	8181      	strh	r1, [r0, #12]
 80092da:	6643      	str	r3, [r0, #100]	; 0x64
 80092dc:	81c2      	strh	r2, [r0, #14]
 80092de:	6183      	str	r3, [r0, #24]
 80092e0:	4619      	mov	r1, r3
 80092e2:	2208      	movs	r2, #8
 80092e4:	305c      	adds	r0, #92	; 0x5c
 80092e6:	f000 f91a 	bl	800951e <memset>
 80092ea:	4b05      	ldr	r3, [pc, #20]	; (8009300 <std+0x38>)
 80092ec:	6263      	str	r3, [r4, #36]	; 0x24
 80092ee:	4b05      	ldr	r3, [pc, #20]	; (8009304 <std+0x3c>)
 80092f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80092f2:	4b05      	ldr	r3, [pc, #20]	; (8009308 <std+0x40>)
 80092f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092f6:	4b05      	ldr	r3, [pc, #20]	; (800930c <std+0x44>)
 80092f8:	6224      	str	r4, [r4, #32]
 80092fa:	6323      	str	r3, [r4, #48]	; 0x30
 80092fc:	bd10      	pop	{r4, pc}
 80092fe:	bf00      	nop
 8009300:	0800a48d 	.word	0x0800a48d
 8009304:	0800a4af 	.word	0x0800a4af
 8009308:	0800a4e7 	.word	0x0800a4e7
 800930c:	0800a50b 	.word	0x0800a50b

08009310 <_cleanup_r>:
 8009310:	4901      	ldr	r1, [pc, #4]	; (8009318 <_cleanup_r+0x8>)
 8009312:	f000 b8af 	b.w	8009474 <_fwalk_reent>
 8009316:	bf00      	nop
 8009318:	0800c271 	.word	0x0800c271

0800931c <__sfmoreglue>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	2268      	movs	r2, #104	; 0x68
 8009320:	1e4d      	subs	r5, r1, #1
 8009322:	4355      	muls	r5, r2
 8009324:	460e      	mov	r6, r1
 8009326:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800932a:	f000 f921 	bl	8009570 <_malloc_r>
 800932e:	4604      	mov	r4, r0
 8009330:	b140      	cbz	r0, 8009344 <__sfmoreglue+0x28>
 8009332:	2100      	movs	r1, #0
 8009334:	e9c0 1600 	strd	r1, r6, [r0]
 8009338:	300c      	adds	r0, #12
 800933a:	60a0      	str	r0, [r4, #8]
 800933c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009340:	f000 f8ed 	bl	800951e <memset>
 8009344:	4620      	mov	r0, r4
 8009346:	bd70      	pop	{r4, r5, r6, pc}

08009348 <__sfp_lock_acquire>:
 8009348:	4801      	ldr	r0, [pc, #4]	; (8009350 <__sfp_lock_acquire+0x8>)
 800934a:	f000 b8d8 	b.w	80094fe <__retarget_lock_acquire_recursive>
 800934e:	bf00      	nop
 8009350:	20008361 	.word	0x20008361

08009354 <__sfp_lock_release>:
 8009354:	4801      	ldr	r0, [pc, #4]	; (800935c <__sfp_lock_release+0x8>)
 8009356:	f000 b8d3 	b.w	8009500 <__retarget_lock_release_recursive>
 800935a:	bf00      	nop
 800935c:	20008361 	.word	0x20008361

08009360 <__sinit_lock_acquire>:
 8009360:	4801      	ldr	r0, [pc, #4]	; (8009368 <__sinit_lock_acquire+0x8>)
 8009362:	f000 b8cc 	b.w	80094fe <__retarget_lock_acquire_recursive>
 8009366:	bf00      	nop
 8009368:	20008362 	.word	0x20008362

0800936c <__sinit_lock_release>:
 800936c:	4801      	ldr	r0, [pc, #4]	; (8009374 <__sinit_lock_release+0x8>)
 800936e:	f000 b8c7 	b.w	8009500 <__retarget_lock_release_recursive>
 8009372:	bf00      	nop
 8009374:	20008362 	.word	0x20008362

08009378 <__sinit>:
 8009378:	b510      	push	{r4, lr}
 800937a:	4604      	mov	r4, r0
 800937c:	f7ff fff0 	bl	8009360 <__sinit_lock_acquire>
 8009380:	69a3      	ldr	r3, [r4, #24]
 8009382:	b11b      	cbz	r3, 800938c <__sinit+0x14>
 8009384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009388:	f7ff bff0 	b.w	800936c <__sinit_lock_release>
 800938c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009390:	6523      	str	r3, [r4, #80]	; 0x50
 8009392:	4b13      	ldr	r3, [pc, #76]	; (80093e0 <__sinit+0x68>)
 8009394:	4a13      	ldr	r2, [pc, #76]	; (80093e4 <__sinit+0x6c>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	62a2      	str	r2, [r4, #40]	; 0x28
 800939a:	42a3      	cmp	r3, r4
 800939c:	bf04      	itt	eq
 800939e:	2301      	moveq	r3, #1
 80093a0:	61a3      	streq	r3, [r4, #24]
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 f820 	bl	80093e8 <__sfp>
 80093a8:	6060      	str	r0, [r4, #4]
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 f81c 	bl	80093e8 <__sfp>
 80093b0:	60a0      	str	r0, [r4, #8]
 80093b2:	4620      	mov	r0, r4
 80093b4:	f000 f818 	bl	80093e8 <__sfp>
 80093b8:	2200      	movs	r2, #0
 80093ba:	60e0      	str	r0, [r4, #12]
 80093bc:	2104      	movs	r1, #4
 80093be:	6860      	ldr	r0, [r4, #4]
 80093c0:	f7ff ff82 	bl	80092c8 <std>
 80093c4:	68a0      	ldr	r0, [r4, #8]
 80093c6:	2201      	movs	r2, #1
 80093c8:	2109      	movs	r1, #9
 80093ca:	f7ff ff7d 	bl	80092c8 <std>
 80093ce:	68e0      	ldr	r0, [r4, #12]
 80093d0:	2202      	movs	r2, #2
 80093d2:	2112      	movs	r1, #18
 80093d4:	f7ff ff78 	bl	80092c8 <std>
 80093d8:	2301      	movs	r3, #1
 80093da:	61a3      	str	r3, [r4, #24]
 80093dc:	e7d2      	b.n	8009384 <__sinit+0xc>
 80093de:	bf00      	nop
 80093e0:	0800de48 	.word	0x0800de48
 80093e4:	08009311 	.word	0x08009311

080093e8 <__sfp>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	4607      	mov	r7, r0
 80093ec:	f7ff ffac 	bl	8009348 <__sfp_lock_acquire>
 80093f0:	4b1e      	ldr	r3, [pc, #120]	; (800946c <__sfp+0x84>)
 80093f2:	681e      	ldr	r6, [r3, #0]
 80093f4:	69b3      	ldr	r3, [r6, #24]
 80093f6:	b913      	cbnz	r3, 80093fe <__sfp+0x16>
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff ffbd 	bl	8009378 <__sinit>
 80093fe:	3648      	adds	r6, #72	; 0x48
 8009400:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009404:	3b01      	subs	r3, #1
 8009406:	d503      	bpl.n	8009410 <__sfp+0x28>
 8009408:	6833      	ldr	r3, [r6, #0]
 800940a:	b30b      	cbz	r3, 8009450 <__sfp+0x68>
 800940c:	6836      	ldr	r6, [r6, #0]
 800940e:	e7f7      	b.n	8009400 <__sfp+0x18>
 8009410:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009414:	b9d5      	cbnz	r5, 800944c <__sfp+0x64>
 8009416:	4b16      	ldr	r3, [pc, #88]	; (8009470 <__sfp+0x88>)
 8009418:	60e3      	str	r3, [r4, #12]
 800941a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800941e:	6665      	str	r5, [r4, #100]	; 0x64
 8009420:	f000 f86c 	bl	80094fc <__retarget_lock_init_recursive>
 8009424:	f7ff ff96 	bl	8009354 <__sfp_lock_release>
 8009428:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800942c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009430:	6025      	str	r5, [r4, #0]
 8009432:	61a5      	str	r5, [r4, #24]
 8009434:	2208      	movs	r2, #8
 8009436:	4629      	mov	r1, r5
 8009438:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800943c:	f000 f86f 	bl	800951e <memset>
 8009440:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009444:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009448:	4620      	mov	r0, r4
 800944a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800944c:	3468      	adds	r4, #104	; 0x68
 800944e:	e7d9      	b.n	8009404 <__sfp+0x1c>
 8009450:	2104      	movs	r1, #4
 8009452:	4638      	mov	r0, r7
 8009454:	f7ff ff62 	bl	800931c <__sfmoreglue>
 8009458:	4604      	mov	r4, r0
 800945a:	6030      	str	r0, [r6, #0]
 800945c:	2800      	cmp	r0, #0
 800945e:	d1d5      	bne.n	800940c <__sfp+0x24>
 8009460:	f7ff ff78 	bl	8009354 <__sfp_lock_release>
 8009464:	230c      	movs	r3, #12
 8009466:	603b      	str	r3, [r7, #0]
 8009468:	e7ee      	b.n	8009448 <__sfp+0x60>
 800946a:	bf00      	nop
 800946c:	0800de48 	.word	0x0800de48
 8009470:	ffff0001 	.word	0xffff0001

08009474 <_fwalk_reent>:
 8009474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009478:	4606      	mov	r6, r0
 800947a:	4688      	mov	r8, r1
 800947c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009480:	2700      	movs	r7, #0
 8009482:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009486:	f1b9 0901 	subs.w	r9, r9, #1
 800948a:	d505      	bpl.n	8009498 <_fwalk_reent+0x24>
 800948c:	6824      	ldr	r4, [r4, #0]
 800948e:	2c00      	cmp	r4, #0
 8009490:	d1f7      	bne.n	8009482 <_fwalk_reent+0xe>
 8009492:	4638      	mov	r0, r7
 8009494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009498:	89ab      	ldrh	r3, [r5, #12]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d907      	bls.n	80094ae <_fwalk_reent+0x3a>
 800949e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094a2:	3301      	adds	r3, #1
 80094a4:	d003      	beq.n	80094ae <_fwalk_reent+0x3a>
 80094a6:	4629      	mov	r1, r5
 80094a8:	4630      	mov	r0, r6
 80094aa:	47c0      	blx	r8
 80094ac:	4307      	orrs	r7, r0
 80094ae:	3568      	adds	r5, #104	; 0x68
 80094b0:	e7e9      	b.n	8009486 <_fwalk_reent+0x12>
	...

080094b4 <__libc_init_array>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	4d0d      	ldr	r5, [pc, #52]	; (80094ec <__libc_init_array+0x38>)
 80094b8:	4c0d      	ldr	r4, [pc, #52]	; (80094f0 <__libc_init_array+0x3c>)
 80094ba:	1b64      	subs	r4, r4, r5
 80094bc:	10a4      	asrs	r4, r4, #2
 80094be:	2600      	movs	r6, #0
 80094c0:	42a6      	cmp	r6, r4
 80094c2:	d109      	bne.n	80094d8 <__libc_init_array+0x24>
 80094c4:	4d0b      	ldr	r5, [pc, #44]	; (80094f4 <__libc_init_array+0x40>)
 80094c6:	4c0c      	ldr	r4, [pc, #48]	; (80094f8 <__libc_init_array+0x44>)
 80094c8:	f004 fc06 	bl	800dcd8 <_init>
 80094cc:	1b64      	subs	r4, r4, r5
 80094ce:	10a4      	asrs	r4, r4, #2
 80094d0:	2600      	movs	r6, #0
 80094d2:	42a6      	cmp	r6, r4
 80094d4:	d105      	bne.n	80094e2 <__libc_init_array+0x2e>
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094dc:	4798      	blx	r3
 80094de:	3601      	adds	r6, #1
 80094e0:	e7ee      	b.n	80094c0 <__libc_init_array+0xc>
 80094e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e6:	4798      	blx	r3
 80094e8:	3601      	adds	r6, #1
 80094ea:	e7f2      	b.n	80094d2 <__libc_init_array+0x1e>
 80094ec:	0800e298 	.word	0x0800e298
 80094f0:	0800e298 	.word	0x0800e298
 80094f4:	0800e298 	.word	0x0800e298
 80094f8:	0800e29c 	.word	0x0800e29c

080094fc <__retarget_lock_init_recursive>:
 80094fc:	4770      	bx	lr

080094fe <__retarget_lock_acquire_recursive>:
 80094fe:	4770      	bx	lr

08009500 <__retarget_lock_release_recursive>:
 8009500:	4770      	bx	lr

08009502 <memcpy>:
 8009502:	440a      	add	r2, r1
 8009504:	4291      	cmp	r1, r2
 8009506:	f100 33ff 	add.w	r3, r0, #4294967295
 800950a:	d100      	bne.n	800950e <memcpy+0xc>
 800950c:	4770      	bx	lr
 800950e:	b510      	push	{r4, lr}
 8009510:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009514:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009518:	4291      	cmp	r1, r2
 800951a:	d1f9      	bne.n	8009510 <memcpy+0xe>
 800951c:	bd10      	pop	{r4, pc}

0800951e <memset>:
 800951e:	4402      	add	r2, r0
 8009520:	4603      	mov	r3, r0
 8009522:	4293      	cmp	r3, r2
 8009524:	d100      	bne.n	8009528 <memset+0xa>
 8009526:	4770      	bx	lr
 8009528:	f803 1b01 	strb.w	r1, [r3], #1
 800952c:	e7f9      	b.n	8009522 <memset+0x4>
	...

08009530 <sbrk_aligned>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	4e0e      	ldr	r6, [pc, #56]	; (800956c <sbrk_aligned+0x3c>)
 8009534:	460c      	mov	r4, r1
 8009536:	6831      	ldr	r1, [r6, #0]
 8009538:	4605      	mov	r5, r0
 800953a:	b911      	cbnz	r1, 8009542 <sbrk_aligned+0x12>
 800953c:	f000 ff70 	bl	800a420 <_sbrk_r>
 8009540:	6030      	str	r0, [r6, #0]
 8009542:	4621      	mov	r1, r4
 8009544:	4628      	mov	r0, r5
 8009546:	f000 ff6b 	bl	800a420 <_sbrk_r>
 800954a:	1c43      	adds	r3, r0, #1
 800954c:	d00a      	beq.n	8009564 <sbrk_aligned+0x34>
 800954e:	1cc4      	adds	r4, r0, #3
 8009550:	f024 0403 	bic.w	r4, r4, #3
 8009554:	42a0      	cmp	r0, r4
 8009556:	d007      	beq.n	8009568 <sbrk_aligned+0x38>
 8009558:	1a21      	subs	r1, r4, r0
 800955a:	4628      	mov	r0, r5
 800955c:	f000 ff60 	bl	800a420 <_sbrk_r>
 8009560:	3001      	adds	r0, #1
 8009562:	d101      	bne.n	8009568 <sbrk_aligned+0x38>
 8009564:	f04f 34ff 	mov.w	r4, #4294967295
 8009568:	4620      	mov	r0, r4
 800956a:	bd70      	pop	{r4, r5, r6, pc}
 800956c:	20008368 	.word	0x20008368

08009570 <_malloc_r>:
 8009570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009574:	1ccd      	adds	r5, r1, #3
 8009576:	f025 0503 	bic.w	r5, r5, #3
 800957a:	3508      	adds	r5, #8
 800957c:	2d0c      	cmp	r5, #12
 800957e:	bf38      	it	cc
 8009580:	250c      	movcc	r5, #12
 8009582:	2d00      	cmp	r5, #0
 8009584:	4607      	mov	r7, r0
 8009586:	db01      	blt.n	800958c <_malloc_r+0x1c>
 8009588:	42a9      	cmp	r1, r5
 800958a:	d905      	bls.n	8009598 <_malloc_r+0x28>
 800958c:	230c      	movs	r3, #12
 800958e:	603b      	str	r3, [r7, #0]
 8009590:	2600      	movs	r6, #0
 8009592:	4630      	mov	r0, r6
 8009594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009598:	4e2e      	ldr	r6, [pc, #184]	; (8009654 <_malloc_r+0xe4>)
 800959a:	f003 fabd 	bl	800cb18 <__malloc_lock>
 800959e:	6833      	ldr	r3, [r6, #0]
 80095a0:	461c      	mov	r4, r3
 80095a2:	bb34      	cbnz	r4, 80095f2 <_malloc_r+0x82>
 80095a4:	4629      	mov	r1, r5
 80095a6:	4638      	mov	r0, r7
 80095a8:	f7ff ffc2 	bl	8009530 <sbrk_aligned>
 80095ac:	1c43      	adds	r3, r0, #1
 80095ae:	4604      	mov	r4, r0
 80095b0:	d14d      	bne.n	800964e <_malloc_r+0xde>
 80095b2:	6834      	ldr	r4, [r6, #0]
 80095b4:	4626      	mov	r6, r4
 80095b6:	2e00      	cmp	r6, #0
 80095b8:	d140      	bne.n	800963c <_malloc_r+0xcc>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	4631      	mov	r1, r6
 80095be:	4638      	mov	r0, r7
 80095c0:	eb04 0803 	add.w	r8, r4, r3
 80095c4:	f000 ff2c 	bl	800a420 <_sbrk_r>
 80095c8:	4580      	cmp	r8, r0
 80095ca:	d13a      	bne.n	8009642 <_malloc_r+0xd2>
 80095cc:	6821      	ldr	r1, [r4, #0]
 80095ce:	3503      	adds	r5, #3
 80095d0:	1a6d      	subs	r5, r5, r1
 80095d2:	f025 0503 	bic.w	r5, r5, #3
 80095d6:	3508      	adds	r5, #8
 80095d8:	2d0c      	cmp	r5, #12
 80095da:	bf38      	it	cc
 80095dc:	250c      	movcc	r5, #12
 80095de:	4629      	mov	r1, r5
 80095e0:	4638      	mov	r0, r7
 80095e2:	f7ff ffa5 	bl	8009530 <sbrk_aligned>
 80095e6:	3001      	adds	r0, #1
 80095e8:	d02b      	beq.n	8009642 <_malloc_r+0xd2>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	442b      	add	r3, r5
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	e00e      	b.n	8009610 <_malloc_r+0xa0>
 80095f2:	6822      	ldr	r2, [r4, #0]
 80095f4:	1b52      	subs	r2, r2, r5
 80095f6:	d41e      	bmi.n	8009636 <_malloc_r+0xc6>
 80095f8:	2a0b      	cmp	r2, #11
 80095fa:	d916      	bls.n	800962a <_malloc_r+0xba>
 80095fc:	1961      	adds	r1, r4, r5
 80095fe:	42a3      	cmp	r3, r4
 8009600:	6025      	str	r5, [r4, #0]
 8009602:	bf18      	it	ne
 8009604:	6059      	strne	r1, [r3, #4]
 8009606:	6863      	ldr	r3, [r4, #4]
 8009608:	bf08      	it	eq
 800960a:	6031      	streq	r1, [r6, #0]
 800960c:	5162      	str	r2, [r4, r5]
 800960e:	604b      	str	r3, [r1, #4]
 8009610:	4638      	mov	r0, r7
 8009612:	f104 060b 	add.w	r6, r4, #11
 8009616:	f003 fa85 	bl	800cb24 <__malloc_unlock>
 800961a:	f026 0607 	bic.w	r6, r6, #7
 800961e:	1d23      	adds	r3, r4, #4
 8009620:	1af2      	subs	r2, r6, r3
 8009622:	d0b6      	beq.n	8009592 <_malloc_r+0x22>
 8009624:	1b9b      	subs	r3, r3, r6
 8009626:	50a3      	str	r3, [r4, r2]
 8009628:	e7b3      	b.n	8009592 <_malloc_r+0x22>
 800962a:	6862      	ldr	r2, [r4, #4]
 800962c:	42a3      	cmp	r3, r4
 800962e:	bf0c      	ite	eq
 8009630:	6032      	streq	r2, [r6, #0]
 8009632:	605a      	strne	r2, [r3, #4]
 8009634:	e7ec      	b.n	8009610 <_malloc_r+0xa0>
 8009636:	4623      	mov	r3, r4
 8009638:	6864      	ldr	r4, [r4, #4]
 800963a:	e7b2      	b.n	80095a2 <_malloc_r+0x32>
 800963c:	4634      	mov	r4, r6
 800963e:	6876      	ldr	r6, [r6, #4]
 8009640:	e7b9      	b.n	80095b6 <_malloc_r+0x46>
 8009642:	230c      	movs	r3, #12
 8009644:	603b      	str	r3, [r7, #0]
 8009646:	4638      	mov	r0, r7
 8009648:	f003 fa6c 	bl	800cb24 <__malloc_unlock>
 800964c:	e7a1      	b.n	8009592 <_malloc_r+0x22>
 800964e:	6025      	str	r5, [r4, #0]
 8009650:	e7de      	b.n	8009610 <_malloc_r+0xa0>
 8009652:	bf00      	nop
 8009654:	20008364 	.word	0x20008364

08009658 <__cvt>:
 8009658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800965c:	ec55 4b10 	vmov	r4, r5, d0
 8009660:	2d00      	cmp	r5, #0
 8009662:	460e      	mov	r6, r1
 8009664:	4619      	mov	r1, r3
 8009666:	462b      	mov	r3, r5
 8009668:	bfbb      	ittet	lt
 800966a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800966e:	461d      	movlt	r5, r3
 8009670:	2300      	movge	r3, #0
 8009672:	232d      	movlt	r3, #45	; 0x2d
 8009674:	700b      	strb	r3, [r1, #0]
 8009676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009678:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800967c:	4691      	mov	r9, r2
 800967e:	f023 0820 	bic.w	r8, r3, #32
 8009682:	bfbc      	itt	lt
 8009684:	4622      	movlt	r2, r4
 8009686:	4614      	movlt	r4, r2
 8009688:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800968c:	d005      	beq.n	800969a <__cvt+0x42>
 800968e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009692:	d100      	bne.n	8009696 <__cvt+0x3e>
 8009694:	3601      	adds	r6, #1
 8009696:	2102      	movs	r1, #2
 8009698:	e000      	b.n	800969c <__cvt+0x44>
 800969a:	2103      	movs	r1, #3
 800969c:	ab03      	add	r3, sp, #12
 800969e:	9301      	str	r3, [sp, #4]
 80096a0:	ab02      	add	r3, sp, #8
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	ec45 4b10 	vmov	d0, r4, r5
 80096a8:	4653      	mov	r3, sl
 80096aa:	4632      	mov	r2, r6
 80096ac:	f001 ff6c 	bl	800b588 <_dtoa_r>
 80096b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096b4:	4607      	mov	r7, r0
 80096b6:	d102      	bne.n	80096be <__cvt+0x66>
 80096b8:	f019 0f01 	tst.w	r9, #1
 80096bc:	d022      	beq.n	8009704 <__cvt+0xac>
 80096be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096c2:	eb07 0906 	add.w	r9, r7, r6
 80096c6:	d110      	bne.n	80096ea <__cvt+0x92>
 80096c8:	783b      	ldrb	r3, [r7, #0]
 80096ca:	2b30      	cmp	r3, #48	; 0x30
 80096cc:	d10a      	bne.n	80096e4 <__cvt+0x8c>
 80096ce:	2200      	movs	r2, #0
 80096d0:	2300      	movs	r3, #0
 80096d2:	4620      	mov	r0, r4
 80096d4:	4629      	mov	r1, r5
 80096d6:	f7f7 f9f7 	bl	8000ac8 <__aeabi_dcmpeq>
 80096da:	b918      	cbnz	r0, 80096e4 <__cvt+0x8c>
 80096dc:	f1c6 0601 	rsb	r6, r6, #1
 80096e0:	f8ca 6000 	str.w	r6, [sl]
 80096e4:	f8da 3000 	ldr.w	r3, [sl]
 80096e8:	4499      	add	r9, r3
 80096ea:	2200      	movs	r2, #0
 80096ec:	2300      	movs	r3, #0
 80096ee:	4620      	mov	r0, r4
 80096f0:	4629      	mov	r1, r5
 80096f2:	f7f7 f9e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80096f6:	b108      	cbz	r0, 80096fc <__cvt+0xa4>
 80096f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80096fc:	2230      	movs	r2, #48	; 0x30
 80096fe:	9b03      	ldr	r3, [sp, #12]
 8009700:	454b      	cmp	r3, r9
 8009702:	d307      	bcc.n	8009714 <__cvt+0xbc>
 8009704:	9b03      	ldr	r3, [sp, #12]
 8009706:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009708:	1bdb      	subs	r3, r3, r7
 800970a:	4638      	mov	r0, r7
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	b004      	add	sp, #16
 8009710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009714:	1c59      	adds	r1, r3, #1
 8009716:	9103      	str	r1, [sp, #12]
 8009718:	701a      	strb	r2, [r3, #0]
 800971a:	e7f0      	b.n	80096fe <__cvt+0xa6>

0800971c <__exponent>:
 800971c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800971e:	4603      	mov	r3, r0
 8009720:	2900      	cmp	r1, #0
 8009722:	bfb8      	it	lt
 8009724:	4249      	neglt	r1, r1
 8009726:	f803 2b02 	strb.w	r2, [r3], #2
 800972a:	bfb4      	ite	lt
 800972c:	222d      	movlt	r2, #45	; 0x2d
 800972e:	222b      	movge	r2, #43	; 0x2b
 8009730:	2909      	cmp	r1, #9
 8009732:	7042      	strb	r2, [r0, #1]
 8009734:	dd2a      	ble.n	800978c <__exponent+0x70>
 8009736:	f10d 0407 	add.w	r4, sp, #7
 800973a:	46a4      	mov	ip, r4
 800973c:	270a      	movs	r7, #10
 800973e:	46a6      	mov	lr, r4
 8009740:	460a      	mov	r2, r1
 8009742:	fb91 f6f7 	sdiv	r6, r1, r7
 8009746:	fb07 1516 	mls	r5, r7, r6, r1
 800974a:	3530      	adds	r5, #48	; 0x30
 800974c:	2a63      	cmp	r2, #99	; 0x63
 800974e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009752:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009756:	4631      	mov	r1, r6
 8009758:	dcf1      	bgt.n	800973e <__exponent+0x22>
 800975a:	3130      	adds	r1, #48	; 0x30
 800975c:	f1ae 0502 	sub.w	r5, lr, #2
 8009760:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009764:	1c44      	adds	r4, r0, #1
 8009766:	4629      	mov	r1, r5
 8009768:	4561      	cmp	r1, ip
 800976a:	d30a      	bcc.n	8009782 <__exponent+0x66>
 800976c:	f10d 0209 	add.w	r2, sp, #9
 8009770:	eba2 020e 	sub.w	r2, r2, lr
 8009774:	4565      	cmp	r5, ip
 8009776:	bf88      	it	hi
 8009778:	2200      	movhi	r2, #0
 800977a:	4413      	add	r3, r2
 800977c:	1a18      	subs	r0, r3, r0
 800977e:	b003      	add	sp, #12
 8009780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009786:	f804 2f01 	strb.w	r2, [r4, #1]!
 800978a:	e7ed      	b.n	8009768 <__exponent+0x4c>
 800978c:	2330      	movs	r3, #48	; 0x30
 800978e:	3130      	adds	r1, #48	; 0x30
 8009790:	7083      	strb	r3, [r0, #2]
 8009792:	70c1      	strb	r1, [r0, #3]
 8009794:	1d03      	adds	r3, r0, #4
 8009796:	e7f1      	b.n	800977c <__exponent+0x60>

08009798 <_printf_float>:
 8009798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979c:	ed2d 8b02 	vpush	{d8}
 80097a0:	b08d      	sub	sp, #52	; 0x34
 80097a2:	460c      	mov	r4, r1
 80097a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097a8:	4616      	mov	r6, r2
 80097aa:	461f      	mov	r7, r3
 80097ac:	4605      	mov	r5, r0
 80097ae:	f003 f91d 	bl	800c9ec <_localeconv_r>
 80097b2:	f8d0 a000 	ldr.w	sl, [r0]
 80097b6:	4650      	mov	r0, sl
 80097b8:	f7f6 fd0a 	bl	80001d0 <strlen>
 80097bc:	2300      	movs	r3, #0
 80097be:	930a      	str	r3, [sp, #40]	; 0x28
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	9305      	str	r3, [sp, #20]
 80097c4:	f8d8 3000 	ldr.w	r3, [r8]
 80097c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80097cc:	3307      	adds	r3, #7
 80097ce:	f023 0307 	bic.w	r3, r3, #7
 80097d2:	f103 0208 	add.w	r2, r3, #8
 80097d6:	f8c8 2000 	str.w	r2, [r8]
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80097e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097ea:	9307      	str	r3, [sp, #28]
 80097ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80097f0:	ee08 0a10 	vmov	s16, r0
 80097f4:	4b9f      	ldr	r3, [pc, #636]	; (8009a74 <_printf_float+0x2dc>)
 80097f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097fa:	f04f 32ff 	mov.w	r2, #4294967295
 80097fe:	f7f7 f995 	bl	8000b2c <__aeabi_dcmpun>
 8009802:	bb88      	cbnz	r0, 8009868 <_printf_float+0xd0>
 8009804:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009808:	4b9a      	ldr	r3, [pc, #616]	; (8009a74 <_printf_float+0x2dc>)
 800980a:	f04f 32ff 	mov.w	r2, #4294967295
 800980e:	f7f7 f96f 	bl	8000af0 <__aeabi_dcmple>
 8009812:	bb48      	cbnz	r0, 8009868 <_printf_float+0xd0>
 8009814:	2200      	movs	r2, #0
 8009816:	2300      	movs	r3, #0
 8009818:	4640      	mov	r0, r8
 800981a:	4649      	mov	r1, r9
 800981c:	f7f7 f95e 	bl	8000adc <__aeabi_dcmplt>
 8009820:	b110      	cbz	r0, 8009828 <_printf_float+0x90>
 8009822:	232d      	movs	r3, #45	; 0x2d
 8009824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009828:	4b93      	ldr	r3, [pc, #588]	; (8009a78 <_printf_float+0x2e0>)
 800982a:	4894      	ldr	r0, [pc, #592]	; (8009a7c <_printf_float+0x2e4>)
 800982c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009830:	bf94      	ite	ls
 8009832:	4698      	movls	r8, r3
 8009834:	4680      	movhi	r8, r0
 8009836:	2303      	movs	r3, #3
 8009838:	6123      	str	r3, [r4, #16]
 800983a:	9b05      	ldr	r3, [sp, #20]
 800983c:	f023 0204 	bic.w	r2, r3, #4
 8009840:	6022      	str	r2, [r4, #0]
 8009842:	f04f 0900 	mov.w	r9, #0
 8009846:	9700      	str	r7, [sp, #0]
 8009848:	4633      	mov	r3, r6
 800984a:	aa0b      	add	r2, sp, #44	; 0x2c
 800984c:	4621      	mov	r1, r4
 800984e:	4628      	mov	r0, r5
 8009850:	f000 f9d8 	bl	8009c04 <_printf_common>
 8009854:	3001      	adds	r0, #1
 8009856:	f040 8090 	bne.w	800997a <_printf_float+0x1e2>
 800985a:	f04f 30ff 	mov.w	r0, #4294967295
 800985e:	b00d      	add	sp, #52	; 0x34
 8009860:	ecbd 8b02 	vpop	{d8}
 8009864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009868:	4642      	mov	r2, r8
 800986a:	464b      	mov	r3, r9
 800986c:	4640      	mov	r0, r8
 800986e:	4649      	mov	r1, r9
 8009870:	f7f7 f95c 	bl	8000b2c <__aeabi_dcmpun>
 8009874:	b140      	cbz	r0, 8009888 <_printf_float+0xf0>
 8009876:	464b      	mov	r3, r9
 8009878:	2b00      	cmp	r3, #0
 800987a:	bfbc      	itt	lt
 800987c:	232d      	movlt	r3, #45	; 0x2d
 800987e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009882:	487f      	ldr	r0, [pc, #508]	; (8009a80 <_printf_float+0x2e8>)
 8009884:	4b7f      	ldr	r3, [pc, #508]	; (8009a84 <_printf_float+0x2ec>)
 8009886:	e7d1      	b.n	800982c <_printf_float+0x94>
 8009888:	6863      	ldr	r3, [r4, #4]
 800988a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800988e:	9206      	str	r2, [sp, #24]
 8009890:	1c5a      	adds	r2, r3, #1
 8009892:	d13f      	bne.n	8009914 <_printf_float+0x17c>
 8009894:	2306      	movs	r3, #6
 8009896:	6063      	str	r3, [r4, #4]
 8009898:	9b05      	ldr	r3, [sp, #20]
 800989a:	6861      	ldr	r1, [r4, #4]
 800989c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80098a0:	2300      	movs	r3, #0
 80098a2:	9303      	str	r3, [sp, #12]
 80098a4:	ab0a      	add	r3, sp, #40	; 0x28
 80098a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098aa:	ab09      	add	r3, sp, #36	; 0x24
 80098ac:	ec49 8b10 	vmov	d0, r8, r9
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	6022      	str	r2, [r4, #0]
 80098b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098b8:	4628      	mov	r0, r5
 80098ba:	f7ff fecd 	bl	8009658 <__cvt>
 80098be:	9b06      	ldr	r3, [sp, #24]
 80098c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098c2:	2b47      	cmp	r3, #71	; 0x47
 80098c4:	4680      	mov	r8, r0
 80098c6:	d108      	bne.n	80098da <_printf_float+0x142>
 80098c8:	1cc8      	adds	r0, r1, #3
 80098ca:	db02      	blt.n	80098d2 <_printf_float+0x13a>
 80098cc:	6863      	ldr	r3, [r4, #4]
 80098ce:	4299      	cmp	r1, r3
 80098d0:	dd41      	ble.n	8009956 <_printf_float+0x1be>
 80098d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80098d6:	fa5f fb8b 	uxtb.w	fp, fp
 80098da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098de:	d820      	bhi.n	8009922 <_printf_float+0x18a>
 80098e0:	3901      	subs	r1, #1
 80098e2:	465a      	mov	r2, fp
 80098e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098e8:	9109      	str	r1, [sp, #36]	; 0x24
 80098ea:	f7ff ff17 	bl	800971c <__exponent>
 80098ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098f0:	1813      	adds	r3, r2, r0
 80098f2:	2a01      	cmp	r2, #1
 80098f4:	4681      	mov	r9, r0
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	dc02      	bgt.n	8009900 <_printf_float+0x168>
 80098fa:	6822      	ldr	r2, [r4, #0]
 80098fc:	07d2      	lsls	r2, r2, #31
 80098fe:	d501      	bpl.n	8009904 <_printf_float+0x16c>
 8009900:	3301      	adds	r3, #1
 8009902:	6123      	str	r3, [r4, #16]
 8009904:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009908:	2b00      	cmp	r3, #0
 800990a:	d09c      	beq.n	8009846 <_printf_float+0xae>
 800990c:	232d      	movs	r3, #45	; 0x2d
 800990e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009912:	e798      	b.n	8009846 <_printf_float+0xae>
 8009914:	9a06      	ldr	r2, [sp, #24]
 8009916:	2a47      	cmp	r2, #71	; 0x47
 8009918:	d1be      	bne.n	8009898 <_printf_float+0x100>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1bc      	bne.n	8009898 <_printf_float+0x100>
 800991e:	2301      	movs	r3, #1
 8009920:	e7b9      	b.n	8009896 <_printf_float+0xfe>
 8009922:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009926:	d118      	bne.n	800995a <_printf_float+0x1c2>
 8009928:	2900      	cmp	r1, #0
 800992a:	6863      	ldr	r3, [r4, #4]
 800992c:	dd0b      	ble.n	8009946 <_printf_float+0x1ae>
 800992e:	6121      	str	r1, [r4, #16]
 8009930:	b913      	cbnz	r3, 8009938 <_printf_float+0x1a0>
 8009932:	6822      	ldr	r2, [r4, #0]
 8009934:	07d0      	lsls	r0, r2, #31
 8009936:	d502      	bpl.n	800993e <_printf_float+0x1a6>
 8009938:	3301      	adds	r3, #1
 800993a:	440b      	add	r3, r1
 800993c:	6123      	str	r3, [r4, #16]
 800993e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009940:	f04f 0900 	mov.w	r9, #0
 8009944:	e7de      	b.n	8009904 <_printf_float+0x16c>
 8009946:	b913      	cbnz	r3, 800994e <_printf_float+0x1b6>
 8009948:	6822      	ldr	r2, [r4, #0]
 800994a:	07d2      	lsls	r2, r2, #31
 800994c:	d501      	bpl.n	8009952 <_printf_float+0x1ba>
 800994e:	3302      	adds	r3, #2
 8009950:	e7f4      	b.n	800993c <_printf_float+0x1a4>
 8009952:	2301      	movs	r3, #1
 8009954:	e7f2      	b.n	800993c <_printf_float+0x1a4>
 8009956:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800995a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800995c:	4299      	cmp	r1, r3
 800995e:	db05      	blt.n	800996c <_printf_float+0x1d4>
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	6121      	str	r1, [r4, #16]
 8009964:	07d8      	lsls	r0, r3, #31
 8009966:	d5ea      	bpl.n	800993e <_printf_float+0x1a6>
 8009968:	1c4b      	adds	r3, r1, #1
 800996a:	e7e7      	b.n	800993c <_printf_float+0x1a4>
 800996c:	2900      	cmp	r1, #0
 800996e:	bfd4      	ite	le
 8009970:	f1c1 0202 	rsble	r2, r1, #2
 8009974:	2201      	movgt	r2, #1
 8009976:	4413      	add	r3, r2
 8009978:	e7e0      	b.n	800993c <_printf_float+0x1a4>
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	055a      	lsls	r2, r3, #21
 800997e:	d407      	bmi.n	8009990 <_printf_float+0x1f8>
 8009980:	6923      	ldr	r3, [r4, #16]
 8009982:	4642      	mov	r2, r8
 8009984:	4631      	mov	r1, r6
 8009986:	4628      	mov	r0, r5
 8009988:	47b8      	blx	r7
 800998a:	3001      	adds	r0, #1
 800998c:	d12c      	bne.n	80099e8 <_printf_float+0x250>
 800998e:	e764      	b.n	800985a <_printf_float+0xc2>
 8009990:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009994:	f240 80e0 	bls.w	8009b58 <_printf_float+0x3c0>
 8009998:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800999c:	2200      	movs	r2, #0
 800999e:	2300      	movs	r3, #0
 80099a0:	f7f7 f892 	bl	8000ac8 <__aeabi_dcmpeq>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d034      	beq.n	8009a12 <_printf_float+0x27a>
 80099a8:	4a37      	ldr	r2, [pc, #220]	; (8009a88 <_printf_float+0x2f0>)
 80099aa:	2301      	movs	r3, #1
 80099ac:	4631      	mov	r1, r6
 80099ae:	4628      	mov	r0, r5
 80099b0:	47b8      	blx	r7
 80099b2:	3001      	adds	r0, #1
 80099b4:	f43f af51 	beq.w	800985a <_printf_float+0xc2>
 80099b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099bc:	429a      	cmp	r2, r3
 80099be:	db02      	blt.n	80099c6 <_printf_float+0x22e>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	07d8      	lsls	r0, r3, #31
 80099c4:	d510      	bpl.n	80099e8 <_printf_float+0x250>
 80099c6:	ee18 3a10 	vmov	r3, s16
 80099ca:	4652      	mov	r2, sl
 80099cc:	4631      	mov	r1, r6
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b8      	blx	r7
 80099d2:	3001      	adds	r0, #1
 80099d4:	f43f af41 	beq.w	800985a <_printf_float+0xc2>
 80099d8:	f04f 0800 	mov.w	r8, #0
 80099dc:	f104 091a 	add.w	r9, r4, #26
 80099e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099e2:	3b01      	subs	r3, #1
 80099e4:	4543      	cmp	r3, r8
 80099e6:	dc09      	bgt.n	80099fc <_printf_float+0x264>
 80099e8:	6823      	ldr	r3, [r4, #0]
 80099ea:	079b      	lsls	r3, r3, #30
 80099ec:	f100 8105 	bmi.w	8009bfa <_printf_float+0x462>
 80099f0:	68e0      	ldr	r0, [r4, #12]
 80099f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099f4:	4298      	cmp	r0, r3
 80099f6:	bfb8      	it	lt
 80099f8:	4618      	movlt	r0, r3
 80099fa:	e730      	b.n	800985e <_printf_float+0xc6>
 80099fc:	2301      	movs	r3, #1
 80099fe:	464a      	mov	r2, r9
 8009a00:	4631      	mov	r1, r6
 8009a02:	4628      	mov	r0, r5
 8009a04:	47b8      	blx	r7
 8009a06:	3001      	adds	r0, #1
 8009a08:	f43f af27 	beq.w	800985a <_printf_float+0xc2>
 8009a0c:	f108 0801 	add.w	r8, r8, #1
 8009a10:	e7e6      	b.n	80099e0 <_printf_float+0x248>
 8009a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	dc39      	bgt.n	8009a8c <_printf_float+0x2f4>
 8009a18:	4a1b      	ldr	r2, [pc, #108]	; (8009a88 <_printf_float+0x2f0>)
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	4631      	mov	r1, r6
 8009a1e:	4628      	mov	r0, r5
 8009a20:	47b8      	blx	r7
 8009a22:	3001      	adds	r0, #1
 8009a24:	f43f af19 	beq.w	800985a <_printf_float+0xc2>
 8009a28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	d102      	bne.n	8009a36 <_printf_float+0x29e>
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	07d9      	lsls	r1, r3, #31
 8009a34:	d5d8      	bpl.n	80099e8 <_printf_float+0x250>
 8009a36:	ee18 3a10 	vmov	r3, s16
 8009a3a:	4652      	mov	r2, sl
 8009a3c:	4631      	mov	r1, r6
 8009a3e:	4628      	mov	r0, r5
 8009a40:	47b8      	blx	r7
 8009a42:	3001      	adds	r0, #1
 8009a44:	f43f af09 	beq.w	800985a <_printf_float+0xc2>
 8009a48:	f04f 0900 	mov.w	r9, #0
 8009a4c:	f104 0a1a 	add.w	sl, r4, #26
 8009a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a52:	425b      	negs	r3, r3
 8009a54:	454b      	cmp	r3, r9
 8009a56:	dc01      	bgt.n	8009a5c <_printf_float+0x2c4>
 8009a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a5a:	e792      	b.n	8009982 <_printf_float+0x1ea>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	4652      	mov	r2, sl
 8009a60:	4631      	mov	r1, r6
 8009a62:	4628      	mov	r0, r5
 8009a64:	47b8      	blx	r7
 8009a66:	3001      	adds	r0, #1
 8009a68:	f43f aef7 	beq.w	800985a <_printf_float+0xc2>
 8009a6c:	f109 0901 	add.w	r9, r9, #1
 8009a70:	e7ee      	b.n	8009a50 <_printf_float+0x2b8>
 8009a72:	bf00      	nop
 8009a74:	7fefffff 	.word	0x7fefffff
 8009a78:	0800de4c 	.word	0x0800de4c
 8009a7c:	0800de50 	.word	0x0800de50
 8009a80:	0800de58 	.word	0x0800de58
 8009a84:	0800de54 	.word	0x0800de54
 8009a88:	0800de5c 	.word	0x0800de5c
 8009a8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a90:	429a      	cmp	r2, r3
 8009a92:	bfa8      	it	ge
 8009a94:	461a      	movge	r2, r3
 8009a96:	2a00      	cmp	r2, #0
 8009a98:	4691      	mov	r9, r2
 8009a9a:	dc37      	bgt.n	8009b0c <_printf_float+0x374>
 8009a9c:	f04f 0b00 	mov.w	fp, #0
 8009aa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aa4:	f104 021a 	add.w	r2, r4, #26
 8009aa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009aaa:	9305      	str	r3, [sp, #20]
 8009aac:	eba3 0309 	sub.w	r3, r3, r9
 8009ab0:	455b      	cmp	r3, fp
 8009ab2:	dc33      	bgt.n	8009b1c <_printf_float+0x384>
 8009ab4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	db3b      	blt.n	8009b34 <_printf_float+0x39c>
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	07da      	lsls	r2, r3, #31
 8009ac0:	d438      	bmi.n	8009b34 <_printf_float+0x39c>
 8009ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac4:	9a05      	ldr	r2, [sp, #20]
 8009ac6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ac8:	1a9a      	subs	r2, r3, r2
 8009aca:	eba3 0901 	sub.w	r9, r3, r1
 8009ace:	4591      	cmp	r9, r2
 8009ad0:	bfa8      	it	ge
 8009ad2:	4691      	movge	r9, r2
 8009ad4:	f1b9 0f00 	cmp.w	r9, #0
 8009ad8:	dc35      	bgt.n	8009b46 <_printf_float+0x3ae>
 8009ada:	f04f 0800 	mov.w	r8, #0
 8009ade:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ae2:	f104 0a1a 	add.w	sl, r4, #26
 8009ae6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009aea:	1a9b      	subs	r3, r3, r2
 8009aec:	eba3 0309 	sub.w	r3, r3, r9
 8009af0:	4543      	cmp	r3, r8
 8009af2:	f77f af79 	ble.w	80099e8 <_printf_float+0x250>
 8009af6:	2301      	movs	r3, #1
 8009af8:	4652      	mov	r2, sl
 8009afa:	4631      	mov	r1, r6
 8009afc:	4628      	mov	r0, r5
 8009afe:	47b8      	blx	r7
 8009b00:	3001      	adds	r0, #1
 8009b02:	f43f aeaa 	beq.w	800985a <_printf_float+0xc2>
 8009b06:	f108 0801 	add.w	r8, r8, #1
 8009b0a:	e7ec      	b.n	8009ae6 <_printf_float+0x34e>
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	4631      	mov	r1, r6
 8009b10:	4642      	mov	r2, r8
 8009b12:	4628      	mov	r0, r5
 8009b14:	47b8      	blx	r7
 8009b16:	3001      	adds	r0, #1
 8009b18:	d1c0      	bne.n	8009a9c <_printf_float+0x304>
 8009b1a:	e69e      	b.n	800985a <_printf_float+0xc2>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	4631      	mov	r1, r6
 8009b20:	4628      	mov	r0, r5
 8009b22:	9205      	str	r2, [sp, #20]
 8009b24:	47b8      	blx	r7
 8009b26:	3001      	adds	r0, #1
 8009b28:	f43f ae97 	beq.w	800985a <_printf_float+0xc2>
 8009b2c:	9a05      	ldr	r2, [sp, #20]
 8009b2e:	f10b 0b01 	add.w	fp, fp, #1
 8009b32:	e7b9      	b.n	8009aa8 <_printf_float+0x310>
 8009b34:	ee18 3a10 	vmov	r3, s16
 8009b38:	4652      	mov	r2, sl
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	47b8      	blx	r7
 8009b40:	3001      	adds	r0, #1
 8009b42:	d1be      	bne.n	8009ac2 <_printf_float+0x32a>
 8009b44:	e689      	b.n	800985a <_printf_float+0xc2>
 8009b46:	9a05      	ldr	r2, [sp, #20]
 8009b48:	464b      	mov	r3, r9
 8009b4a:	4442      	add	r2, r8
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4628      	mov	r0, r5
 8009b50:	47b8      	blx	r7
 8009b52:	3001      	adds	r0, #1
 8009b54:	d1c1      	bne.n	8009ada <_printf_float+0x342>
 8009b56:	e680      	b.n	800985a <_printf_float+0xc2>
 8009b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b5a:	2a01      	cmp	r2, #1
 8009b5c:	dc01      	bgt.n	8009b62 <_printf_float+0x3ca>
 8009b5e:	07db      	lsls	r3, r3, #31
 8009b60:	d538      	bpl.n	8009bd4 <_printf_float+0x43c>
 8009b62:	2301      	movs	r3, #1
 8009b64:	4642      	mov	r2, r8
 8009b66:	4631      	mov	r1, r6
 8009b68:	4628      	mov	r0, r5
 8009b6a:	47b8      	blx	r7
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	f43f ae74 	beq.w	800985a <_printf_float+0xc2>
 8009b72:	ee18 3a10 	vmov	r3, s16
 8009b76:	4652      	mov	r2, sl
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	47b8      	blx	r7
 8009b7e:	3001      	adds	r0, #1
 8009b80:	f43f ae6b 	beq.w	800985a <_printf_float+0xc2>
 8009b84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	f7f6 ff9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b90:	b9d8      	cbnz	r0, 8009bca <_printf_float+0x432>
 8009b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b94:	f108 0201 	add.w	r2, r8, #1
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	47b8      	blx	r7
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d10e      	bne.n	8009bc2 <_printf_float+0x42a>
 8009ba4:	e659      	b.n	800985a <_printf_float+0xc2>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4652      	mov	r2, sl
 8009baa:	4631      	mov	r1, r6
 8009bac:	4628      	mov	r0, r5
 8009bae:	47b8      	blx	r7
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	f43f ae52 	beq.w	800985a <_printf_float+0xc2>
 8009bb6:	f108 0801 	add.w	r8, r8, #1
 8009bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	4543      	cmp	r3, r8
 8009bc0:	dcf1      	bgt.n	8009ba6 <_printf_float+0x40e>
 8009bc2:	464b      	mov	r3, r9
 8009bc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bc8:	e6dc      	b.n	8009984 <_printf_float+0x1ec>
 8009bca:	f04f 0800 	mov.w	r8, #0
 8009bce:	f104 0a1a 	add.w	sl, r4, #26
 8009bd2:	e7f2      	b.n	8009bba <_printf_float+0x422>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	4642      	mov	r2, r8
 8009bd8:	e7df      	b.n	8009b9a <_printf_float+0x402>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	464a      	mov	r2, r9
 8009bde:	4631      	mov	r1, r6
 8009be0:	4628      	mov	r0, r5
 8009be2:	47b8      	blx	r7
 8009be4:	3001      	adds	r0, #1
 8009be6:	f43f ae38 	beq.w	800985a <_printf_float+0xc2>
 8009bea:	f108 0801 	add.w	r8, r8, #1
 8009bee:	68e3      	ldr	r3, [r4, #12]
 8009bf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bf2:	1a5b      	subs	r3, r3, r1
 8009bf4:	4543      	cmp	r3, r8
 8009bf6:	dcf0      	bgt.n	8009bda <_printf_float+0x442>
 8009bf8:	e6fa      	b.n	80099f0 <_printf_float+0x258>
 8009bfa:	f04f 0800 	mov.w	r8, #0
 8009bfe:	f104 0919 	add.w	r9, r4, #25
 8009c02:	e7f4      	b.n	8009bee <_printf_float+0x456>

08009c04 <_printf_common>:
 8009c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c08:	4616      	mov	r6, r2
 8009c0a:	4699      	mov	r9, r3
 8009c0c:	688a      	ldr	r2, [r1, #8]
 8009c0e:	690b      	ldr	r3, [r1, #16]
 8009c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c14:	4293      	cmp	r3, r2
 8009c16:	bfb8      	it	lt
 8009c18:	4613      	movlt	r3, r2
 8009c1a:	6033      	str	r3, [r6, #0]
 8009c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c20:	4607      	mov	r7, r0
 8009c22:	460c      	mov	r4, r1
 8009c24:	b10a      	cbz	r2, 8009c2a <_printf_common+0x26>
 8009c26:	3301      	adds	r3, #1
 8009c28:	6033      	str	r3, [r6, #0]
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	0699      	lsls	r1, r3, #26
 8009c2e:	bf42      	ittt	mi
 8009c30:	6833      	ldrmi	r3, [r6, #0]
 8009c32:	3302      	addmi	r3, #2
 8009c34:	6033      	strmi	r3, [r6, #0]
 8009c36:	6825      	ldr	r5, [r4, #0]
 8009c38:	f015 0506 	ands.w	r5, r5, #6
 8009c3c:	d106      	bne.n	8009c4c <_printf_common+0x48>
 8009c3e:	f104 0a19 	add.w	sl, r4, #25
 8009c42:	68e3      	ldr	r3, [r4, #12]
 8009c44:	6832      	ldr	r2, [r6, #0]
 8009c46:	1a9b      	subs	r3, r3, r2
 8009c48:	42ab      	cmp	r3, r5
 8009c4a:	dc26      	bgt.n	8009c9a <_printf_common+0x96>
 8009c4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c50:	1e13      	subs	r3, r2, #0
 8009c52:	6822      	ldr	r2, [r4, #0]
 8009c54:	bf18      	it	ne
 8009c56:	2301      	movne	r3, #1
 8009c58:	0692      	lsls	r2, r2, #26
 8009c5a:	d42b      	bmi.n	8009cb4 <_printf_common+0xb0>
 8009c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c60:	4649      	mov	r1, r9
 8009c62:	4638      	mov	r0, r7
 8009c64:	47c0      	blx	r8
 8009c66:	3001      	adds	r0, #1
 8009c68:	d01e      	beq.n	8009ca8 <_printf_common+0xa4>
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	68e5      	ldr	r5, [r4, #12]
 8009c6e:	6832      	ldr	r2, [r6, #0]
 8009c70:	f003 0306 	and.w	r3, r3, #6
 8009c74:	2b04      	cmp	r3, #4
 8009c76:	bf08      	it	eq
 8009c78:	1aad      	subeq	r5, r5, r2
 8009c7a:	68a3      	ldr	r3, [r4, #8]
 8009c7c:	6922      	ldr	r2, [r4, #16]
 8009c7e:	bf0c      	ite	eq
 8009c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c84:	2500      	movne	r5, #0
 8009c86:	4293      	cmp	r3, r2
 8009c88:	bfc4      	itt	gt
 8009c8a:	1a9b      	subgt	r3, r3, r2
 8009c8c:	18ed      	addgt	r5, r5, r3
 8009c8e:	2600      	movs	r6, #0
 8009c90:	341a      	adds	r4, #26
 8009c92:	42b5      	cmp	r5, r6
 8009c94:	d11a      	bne.n	8009ccc <_printf_common+0xc8>
 8009c96:	2000      	movs	r0, #0
 8009c98:	e008      	b.n	8009cac <_printf_common+0xa8>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	4652      	mov	r2, sl
 8009c9e:	4649      	mov	r1, r9
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	47c0      	blx	r8
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	d103      	bne.n	8009cb0 <_printf_common+0xac>
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb0:	3501      	adds	r5, #1
 8009cb2:	e7c6      	b.n	8009c42 <_printf_common+0x3e>
 8009cb4:	18e1      	adds	r1, r4, r3
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	2030      	movs	r0, #48	; 0x30
 8009cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cbe:	4422      	add	r2, r4
 8009cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cc8:	3302      	adds	r3, #2
 8009cca:	e7c7      	b.n	8009c5c <_printf_common+0x58>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	4622      	mov	r2, r4
 8009cd0:	4649      	mov	r1, r9
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	47c0      	blx	r8
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	d0e6      	beq.n	8009ca8 <_printf_common+0xa4>
 8009cda:	3601      	adds	r6, #1
 8009cdc:	e7d9      	b.n	8009c92 <_printf_common+0x8e>
	...

08009ce0 <_printf_i>:
 8009ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce4:	7e0f      	ldrb	r7, [r1, #24]
 8009ce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ce8:	2f78      	cmp	r7, #120	; 0x78
 8009cea:	4691      	mov	r9, r2
 8009cec:	4680      	mov	r8, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	469a      	mov	sl, r3
 8009cf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cf6:	d807      	bhi.n	8009d08 <_printf_i+0x28>
 8009cf8:	2f62      	cmp	r7, #98	; 0x62
 8009cfa:	d80a      	bhi.n	8009d12 <_printf_i+0x32>
 8009cfc:	2f00      	cmp	r7, #0
 8009cfe:	f000 80d8 	beq.w	8009eb2 <_printf_i+0x1d2>
 8009d02:	2f58      	cmp	r7, #88	; 0x58
 8009d04:	f000 80a3 	beq.w	8009e4e <_printf_i+0x16e>
 8009d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d10:	e03a      	b.n	8009d88 <_printf_i+0xa8>
 8009d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d16:	2b15      	cmp	r3, #21
 8009d18:	d8f6      	bhi.n	8009d08 <_printf_i+0x28>
 8009d1a:	a101      	add	r1, pc, #4	; (adr r1, 8009d20 <_printf_i+0x40>)
 8009d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d20:	08009d79 	.word	0x08009d79
 8009d24:	08009d8d 	.word	0x08009d8d
 8009d28:	08009d09 	.word	0x08009d09
 8009d2c:	08009d09 	.word	0x08009d09
 8009d30:	08009d09 	.word	0x08009d09
 8009d34:	08009d09 	.word	0x08009d09
 8009d38:	08009d8d 	.word	0x08009d8d
 8009d3c:	08009d09 	.word	0x08009d09
 8009d40:	08009d09 	.word	0x08009d09
 8009d44:	08009d09 	.word	0x08009d09
 8009d48:	08009d09 	.word	0x08009d09
 8009d4c:	08009e99 	.word	0x08009e99
 8009d50:	08009dbd 	.word	0x08009dbd
 8009d54:	08009e7b 	.word	0x08009e7b
 8009d58:	08009d09 	.word	0x08009d09
 8009d5c:	08009d09 	.word	0x08009d09
 8009d60:	08009ebb 	.word	0x08009ebb
 8009d64:	08009d09 	.word	0x08009d09
 8009d68:	08009dbd 	.word	0x08009dbd
 8009d6c:	08009d09 	.word	0x08009d09
 8009d70:	08009d09 	.word	0x08009d09
 8009d74:	08009e83 	.word	0x08009e83
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	1d1a      	adds	r2, r3, #4
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	602a      	str	r2, [r5, #0]
 8009d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e0a3      	b.n	8009ed4 <_printf_i+0x1f4>
 8009d8c:	6820      	ldr	r0, [r4, #0]
 8009d8e:	6829      	ldr	r1, [r5, #0]
 8009d90:	0606      	lsls	r6, r0, #24
 8009d92:	f101 0304 	add.w	r3, r1, #4
 8009d96:	d50a      	bpl.n	8009dae <_printf_i+0xce>
 8009d98:	680e      	ldr	r6, [r1, #0]
 8009d9a:	602b      	str	r3, [r5, #0]
 8009d9c:	2e00      	cmp	r6, #0
 8009d9e:	da03      	bge.n	8009da8 <_printf_i+0xc8>
 8009da0:	232d      	movs	r3, #45	; 0x2d
 8009da2:	4276      	negs	r6, r6
 8009da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009da8:	485e      	ldr	r0, [pc, #376]	; (8009f24 <_printf_i+0x244>)
 8009daa:	230a      	movs	r3, #10
 8009dac:	e019      	b.n	8009de2 <_printf_i+0x102>
 8009dae:	680e      	ldr	r6, [r1, #0]
 8009db0:	602b      	str	r3, [r5, #0]
 8009db2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009db6:	bf18      	it	ne
 8009db8:	b236      	sxthne	r6, r6
 8009dba:	e7ef      	b.n	8009d9c <_printf_i+0xbc>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	6820      	ldr	r0, [r4, #0]
 8009dc0:	1d19      	adds	r1, r3, #4
 8009dc2:	6029      	str	r1, [r5, #0]
 8009dc4:	0601      	lsls	r1, r0, #24
 8009dc6:	d501      	bpl.n	8009dcc <_printf_i+0xec>
 8009dc8:	681e      	ldr	r6, [r3, #0]
 8009dca:	e002      	b.n	8009dd2 <_printf_i+0xf2>
 8009dcc:	0646      	lsls	r6, r0, #25
 8009dce:	d5fb      	bpl.n	8009dc8 <_printf_i+0xe8>
 8009dd0:	881e      	ldrh	r6, [r3, #0]
 8009dd2:	4854      	ldr	r0, [pc, #336]	; (8009f24 <_printf_i+0x244>)
 8009dd4:	2f6f      	cmp	r7, #111	; 0x6f
 8009dd6:	bf0c      	ite	eq
 8009dd8:	2308      	moveq	r3, #8
 8009dda:	230a      	movne	r3, #10
 8009ddc:	2100      	movs	r1, #0
 8009dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009de2:	6865      	ldr	r5, [r4, #4]
 8009de4:	60a5      	str	r5, [r4, #8]
 8009de6:	2d00      	cmp	r5, #0
 8009de8:	bfa2      	ittt	ge
 8009dea:	6821      	ldrge	r1, [r4, #0]
 8009dec:	f021 0104 	bicge.w	r1, r1, #4
 8009df0:	6021      	strge	r1, [r4, #0]
 8009df2:	b90e      	cbnz	r6, 8009df8 <_printf_i+0x118>
 8009df4:	2d00      	cmp	r5, #0
 8009df6:	d04d      	beq.n	8009e94 <_printf_i+0x1b4>
 8009df8:	4615      	mov	r5, r2
 8009dfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8009dfe:	fb03 6711 	mls	r7, r3, r1, r6
 8009e02:	5dc7      	ldrb	r7, [r0, r7]
 8009e04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e08:	4637      	mov	r7, r6
 8009e0a:	42bb      	cmp	r3, r7
 8009e0c:	460e      	mov	r6, r1
 8009e0e:	d9f4      	bls.n	8009dfa <_printf_i+0x11a>
 8009e10:	2b08      	cmp	r3, #8
 8009e12:	d10b      	bne.n	8009e2c <_printf_i+0x14c>
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	07de      	lsls	r6, r3, #31
 8009e18:	d508      	bpl.n	8009e2c <_printf_i+0x14c>
 8009e1a:	6923      	ldr	r3, [r4, #16]
 8009e1c:	6861      	ldr	r1, [r4, #4]
 8009e1e:	4299      	cmp	r1, r3
 8009e20:	bfde      	ittt	le
 8009e22:	2330      	movle	r3, #48	; 0x30
 8009e24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e2c:	1b52      	subs	r2, r2, r5
 8009e2e:	6122      	str	r2, [r4, #16]
 8009e30:	f8cd a000 	str.w	sl, [sp]
 8009e34:	464b      	mov	r3, r9
 8009e36:	aa03      	add	r2, sp, #12
 8009e38:	4621      	mov	r1, r4
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	f7ff fee2 	bl	8009c04 <_printf_common>
 8009e40:	3001      	adds	r0, #1
 8009e42:	d14c      	bne.n	8009ede <_printf_i+0x1fe>
 8009e44:	f04f 30ff 	mov.w	r0, #4294967295
 8009e48:	b004      	add	sp, #16
 8009e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4e:	4835      	ldr	r0, [pc, #212]	; (8009f24 <_printf_i+0x244>)
 8009e50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e54:	6829      	ldr	r1, [r5, #0]
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e5c:	6029      	str	r1, [r5, #0]
 8009e5e:	061d      	lsls	r5, r3, #24
 8009e60:	d514      	bpl.n	8009e8c <_printf_i+0x1ac>
 8009e62:	07df      	lsls	r7, r3, #31
 8009e64:	bf44      	itt	mi
 8009e66:	f043 0320 	orrmi.w	r3, r3, #32
 8009e6a:	6023      	strmi	r3, [r4, #0]
 8009e6c:	b91e      	cbnz	r6, 8009e76 <_printf_i+0x196>
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	f023 0320 	bic.w	r3, r3, #32
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	2310      	movs	r3, #16
 8009e78:	e7b0      	b.n	8009ddc <_printf_i+0xfc>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	f043 0320 	orr.w	r3, r3, #32
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	2378      	movs	r3, #120	; 0x78
 8009e84:	4828      	ldr	r0, [pc, #160]	; (8009f28 <_printf_i+0x248>)
 8009e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e8a:	e7e3      	b.n	8009e54 <_printf_i+0x174>
 8009e8c:	0659      	lsls	r1, r3, #25
 8009e8e:	bf48      	it	mi
 8009e90:	b2b6      	uxthmi	r6, r6
 8009e92:	e7e6      	b.n	8009e62 <_printf_i+0x182>
 8009e94:	4615      	mov	r5, r2
 8009e96:	e7bb      	b.n	8009e10 <_printf_i+0x130>
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	6826      	ldr	r6, [r4, #0]
 8009e9c:	6961      	ldr	r1, [r4, #20]
 8009e9e:	1d18      	adds	r0, r3, #4
 8009ea0:	6028      	str	r0, [r5, #0]
 8009ea2:	0635      	lsls	r5, r6, #24
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	d501      	bpl.n	8009eac <_printf_i+0x1cc>
 8009ea8:	6019      	str	r1, [r3, #0]
 8009eaa:	e002      	b.n	8009eb2 <_printf_i+0x1d2>
 8009eac:	0670      	lsls	r0, r6, #25
 8009eae:	d5fb      	bpl.n	8009ea8 <_printf_i+0x1c8>
 8009eb0:	8019      	strh	r1, [r3, #0]
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	6123      	str	r3, [r4, #16]
 8009eb6:	4615      	mov	r5, r2
 8009eb8:	e7ba      	b.n	8009e30 <_printf_i+0x150>
 8009eba:	682b      	ldr	r3, [r5, #0]
 8009ebc:	1d1a      	adds	r2, r3, #4
 8009ebe:	602a      	str	r2, [r5, #0]
 8009ec0:	681d      	ldr	r5, [r3, #0]
 8009ec2:	6862      	ldr	r2, [r4, #4]
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	f7f6 f98a 	bl	80001e0 <memchr>
 8009ecc:	b108      	cbz	r0, 8009ed2 <_printf_i+0x1f2>
 8009ece:	1b40      	subs	r0, r0, r5
 8009ed0:	6060      	str	r0, [r4, #4]
 8009ed2:	6863      	ldr	r3, [r4, #4]
 8009ed4:	6123      	str	r3, [r4, #16]
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009edc:	e7a8      	b.n	8009e30 <_printf_i+0x150>
 8009ede:	6923      	ldr	r3, [r4, #16]
 8009ee0:	462a      	mov	r2, r5
 8009ee2:	4649      	mov	r1, r9
 8009ee4:	4640      	mov	r0, r8
 8009ee6:	47d0      	blx	sl
 8009ee8:	3001      	adds	r0, #1
 8009eea:	d0ab      	beq.n	8009e44 <_printf_i+0x164>
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	079b      	lsls	r3, r3, #30
 8009ef0:	d413      	bmi.n	8009f1a <_printf_i+0x23a>
 8009ef2:	68e0      	ldr	r0, [r4, #12]
 8009ef4:	9b03      	ldr	r3, [sp, #12]
 8009ef6:	4298      	cmp	r0, r3
 8009ef8:	bfb8      	it	lt
 8009efa:	4618      	movlt	r0, r3
 8009efc:	e7a4      	b.n	8009e48 <_printf_i+0x168>
 8009efe:	2301      	movs	r3, #1
 8009f00:	4632      	mov	r2, r6
 8009f02:	4649      	mov	r1, r9
 8009f04:	4640      	mov	r0, r8
 8009f06:	47d0      	blx	sl
 8009f08:	3001      	adds	r0, #1
 8009f0a:	d09b      	beq.n	8009e44 <_printf_i+0x164>
 8009f0c:	3501      	adds	r5, #1
 8009f0e:	68e3      	ldr	r3, [r4, #12]
 8009f10:	9903      	ldr	r1, [sp, #12]
 8009f12:	1a5b      	subs	r3, r3, r1
 8009f14:	42ab      	cmp	r3, r5
 8009f16:	dcf2      	bgt.n	8009efe <_printf_i+0x21e>
 8009f18:	e7eb      	b.n	8009ef2 <_printf_i+0x212>
 8009f1a:	2500      	movs	r5, #0
 8009f1c:	f104 0619 	add.w	r6, r4, #25
 8009f20:	e7f5      	b.n	8009f0e <_printf_i+0x22e>
 8009f22:	bf00      	nop
 8009f24:	0800de5e 	.word	0x0800de5e
 8009f28:	0800de6f 	.word	0x0800de6f

08009f2c <_scanf_float>:
 8009f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f30:	b087      	sub	sp, #28
 8009f32:	4617      	mov	r7, r2
 8009f34:	9303      	str	r3, [sp, #12]
 8009f36:	688b      	ldr	r3, [r1, #8]
 8009f38:	1e5a      	subs	r2, r3, #1
 8009f3a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009f3e:	bf83      	ittte	hi
 8009f40:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009f44:	195b      	addhi	r3, r3, r5
 8009f46:	9302      	strhi	r3, [sp, #8]
 8009f48:	2300      	movls	r3, #0
 8009f4a:	bf86      	itte	hi
 8009f4c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009f50:	608b      	strhi	r3, [r1, #8]
 8009f52:	9302      	strls	r3, [sp, #8]
 8009f54:	680b      	ldr	r3, [r1, #0]
 8009f56:	468b      	mov	fp, r1
 8009f58:	2500      	movs	r5, #0
 8009f5a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009f5e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009f62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009f66:	4680      	mov	r8, r0
 8009f68:	460c      	mov	r4, r1
 8009f6a:	465e      	mov	r6, fp
 8009f6c:	46aa      	mov	sl, r5
 8009f6e:	46a9      	mov	r9, r5
 8009f70:	9501      	str	r5, [sp, #4]
 8009f72:	68a2      	ldr	r2, [r4, #8]
 8009f74:	b152      	cbz	r2, 8009f8c <_scanf_float+0x60>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	2b4e      	cmp	r3, #78	; 0x4e
 8009f7c:	d864      	bhi.n	800a048 <_scanf_float+0x11c>
 8009f7e:	2b40      	cmp	r3, #64	; 0x40
 8009f80:	d83c      	bhi.n	8009ffc <_scanf_float+0xd0>
 8009f82:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009f86:	b2c8      	uxtb	r0, r1
 8009f88:	280e      	cmp	r0, #14
 8009f8a:	d93a      	bls.n	800a002 <_scanf_float+0xd6>
 8009f8c:	f1b9 0f00 	cmp.w	r9, #0
 8009f90:	d003      	beq.n	8009f9a <_scanf_float+0x6e>
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f9e:	f1ba 0f01 	cmp.w	sl, #1
 8009fa2:	f200 8113 	bhi.w	800a1cc <_scanf_float+0x2a0>
 8009fa6:	455e      	cmp	r6, fp
 8009fa8:	f200 8105 	bhi.w	800a1b6 <_scanf_float+0x28a>
 8009fac:	2501      	movs	r5, #1
 8009fae:	4628      	mov	r0, r5
 8009fb0:	b007      	add	sp, #28
 8009fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009fba:	2a0d      	cmp	r2, #13
 8009fbc:	d8e6      	bhi.n	8009f8c <_scanf_float+0x60>
 8009fbe:	a101      	add	r1, pc, #4	; (adr r1, 8009fc4 <_scanf_float+0x98>)
 8009fc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009fc4:	0800a103 	.word	0x0800a103
 8009fc8:	08009f8d 	.word	0x08009f8d
 8009fcc:	08009f8d 	.word	0x08009f8d
 8009fd0:	08009f8d 	.word	0x08009f8d
 8009fd4:	0800a163 	.word	0x0800a163
 8009fd8:	0800a13b 	.word	0x0800a13b
 8009fdc:	08009f8d 	.word	0x08009f8d
 8009fe0:	08009f8d 	.word	0x08009f8d
 8009fe4:	0800a111 	.word	0x0800a111
 8009fe8:	08009f8d 	.word	0x08009f8d
 8009fec:	08009f8d 	.word	0x08009f8d
 8009ff0:	08009f8d 	.word	0x08009f8d
 8009ff4:	08009f8d 	.word	0x08009f8d
 8009ff8:	0800a0c9 	.word	0x0800a0c9
 8009ffc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a000:	e7db      	b.n	8009fba <_scanf_float+0x8e>
 800a002:	290e      	cmp	r1, #14
 800a004:	d8c2      	bhi.n	8009f8c <_scanf_float+0x60>
 800a006:	a001      	add	r0, pc, #4	; (adr r0, 800a00c <_scanf_float+0xe0>)
 800a008:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a00c:	0800a0bb 	.word	0x0800a0bb
 800a010:	08009f8d 	.word	0x08009f8d
 800a014:	0800a0bb 	.word	0x0800a0bb
 800a018:	0800a14f 	.word	0x0800a14f
 800a01c:	08009f8d 	.word	0x08009f8d
 800a020:	0800a069 	.word	0x0800a069
 800a024:	0800a0a5 	.word	0x0800a0a5
 800a028:	0800a0a5 	.word	0x0800a0a5
 800a02c:	0800a0a5 	.word	0x0800a0a5
 800a030:	0800a0a5 	.word	0x0800a0a5
 800a034:	0800a0a5 	.word	0x0800a0a5
 800a038:	0800a0a5 	.word	0x0800a0a5
 800a03c:	0800a0a5 	.word	0x0800a0a5
 800a040:	0800a0a5 	.word	0x0800a0a5
 800a044:	0800a0a5 	.word	0x0800a0a5
 800a048:	2b6e      	cmp	r3, #110	; 0x6e
 800a04a:	d809      	bhi.n	800a060 <_scanf_float+0x134>
 800a04c:	2b60      	cmp	r3, #96	; 0x60
 800a04e:	d8b2      	bhi.n	8009fb6 <_scanf_float+0x8a>
 800a050:	2b54      	cmp	r3, #84	; 0x54
 800a052:	d077      	beq.n	800a144 <_scanf_float+0x218>
 800a054:	2b59      	cmp	r3, #89	; 0x59
 800a056:	d199      	bne.n	8009f8c <_scanf_float+0x60>
 800a058:	2d07      	cmp	r5, #7
 800a05a:	d197      	bne.n	8009f8c <_scanf_float+0x60>
 800a05c:	2508      	movs	r5, #8
 800a05e:	e029      	b.n	800a0b4 <_scanf_float+0x188>
 800a060:	2b74      	cmp	r3, #116	; 0x74
 800a062:	d06f      	beq.n	800a144 <_scanf_float+0x218>
 800a064:	2b79      	cmp	r3, #121	; 0x79
 800a066:	e7f6      	b.n	800a056 <_scanf_float+0x12a>
 800a068:	6821      	ldr	r1, [r4, #0]
 800a06a:	05c8      	lsls	r0, r1, #23
 800a06c:	d51a      	bpl.n	800a0a4 <_scanf_float+0x178>
 800a06e:	9b02      	ldr	r3, [sp, #8]
 800a070:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a074:	6021      	str	r1, [r4, #0]
 800a076:	f109 0901 	add.w	r9, r9, #1
 800a07a:	b11b      	cbz	r3, 800a084 <_scanf_float+0x158>
 800a07c:	3b01      	subs	r3, #1
 800a07e:	3201      	adds	r2, #1
 800a080:	9302      	str	r3, [sp, #8]
 800a082:	60a2      	str	r2, [r4, #8]
 800a084:	68a3      	ldr	r3, [r4, #8]
 800a086:	3b01      	subs	r3, #1
 800a088:	60a3      	str	r3, [r4, #8]
 800a08a:	6923      	ldr	r3, [r4, #16]
 800a08c:	3301      	adds	r3, #1
 800a08e:	6123      	str	r3, [r4, #16]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3b01      	subs	r3, #1
 800a094:	2b00      	cmp	r3, #0
 800a096:	607b      	str	r3, [r7, #4]
 800a098:	f340 8084 	ble.w	800a1a4 <_scanf_float+0x278>
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	603b      	str	r3, [r7, #0]
 800a0a2:	e766      	b.n	8009f72 <_scanf_float+0x46>
 800a0a4:	eb1a 0f05 	cmn.w	sl, r5
 800a0a8:	f47f af70 	bne.w	8009f8c <_scanf_float+0x60>
 800a0ac:	6822      	ldr	r2, [r4, #0]
 800a0ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a0b2:	6022      	str	r2, [r4, #0]
 800a0b4:	f806 3b01 	strb.w	r3, [r6], #1
 800a0b8:	e7e4      	b.n	800a084 <_scanf_float+0x158>
 800a0ba:	6822      	ldr	r2, [r4, #0]
 800a0bc:	0610      	lsls	r0, r2, #24
 800a0be:	f57f af65 	bpl.w	8009f8c <_scanf_float+0x60>
 800a0c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0c6:	e7f4      	b.n	800a0b2 <_scanf_float+0x186>
 800a0c8:	f1ba 0f00 	cmp.w	sl, #0
 800a0cc:	d10e      	bne.n	800a0ec <_scanf_float+0x1c0>
 800a0ce:	f1b9 0f00 	cmp.w	r9, #0
 800a0d2:	d10e      	bne.n	800a0f2 <_scanf_float+0x1c6>
 800a0d4:	6822      	ldr	r2, [r4, #0]
 800a0d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a0da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a0de:	d108      	bne.n	800a0f2 <_scanf_float+0x1c6>
 800a0e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a0e4:	6022      	str	r2, [r4, #0]
 800a0e6:	f04f 0a01 	mov.w	sl, #1
 800a0ea:	e7e3      	b.n	800a0b4 <_scanf_float+0x188>
 800a0ec:	f1ba 0f02 	cmp.w	sl, #2
 800a0f0:	d055      	beq.n	800a19e <_scanf_float+0x272>
 800a0f2:	2d01      	cmp	r5, #1
 800a0f4:	d002      	beq.n	800a0fc <_scanf_float+0x1d0>
 800a0f6:	2d04      	cmp	r5, #4
 800a0f8:	f47f af48 	bne.w	8009f8c <_scanf_float+0x60>
 800a0fc:	3501      	adds	r5, #1
 800a0fe:	b2ed      	uxtb	r5, r5
 800a100:	e7d8      	b.n	800a0b4 <_scanf_float+0x188>
 800a102:	f1ba 0f01 	cmp.w	sl, #1
 800a106:	f47f af41 	bne.w	8009f8c <_scanf_float+0x60>
 800a10a:	f04f 0a02 	mov.w	sl, #2
 800a10e:	e7d1      	b.n	800a0b4 <_scanf_float+0x188>
 800a110:	b97d      	cbnz	r5, 800a132 <_scanf_float+0x206>
 800a112:	f1b9 0f00 	cmp.w	r9, #0
 800a116:	f47f af3c 	bne.w	8009f92 <_scanf_float+0x66>
 800a11a:	6822      	ldr	r2, [r4, #0]
 800a11c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a120:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a124:	f47f af39 	bne.w	8009f9a <_scanf_float+0x6e>
 800a128:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a12c:	6022      	str	r2, [r4, #0]
 800a12e:	2501      	movs	r5, #1
 800a130:	e7c0      	b.n	800a0b4 <_scanf_float+0x188>
 800a132:	2d03      	cmp	r5, #3
 800a134:	d0e2      	beq.n	800a0fc <_scanf_float+0x1d0>
 800a136:	2d05      	cmp	r5, #5
 800a138:	e7de      	b.n	800a0f8 <_scanf_float+0x1cc>
 800a13a:	2d02      	cmp	r5, #2
 800a13c:	f47f af26 	bne.w	8009f8c <_scanf_float+0x60>
 800a140:	2503      	movs	r5, #3
 800a142:	e7b7      	b.n	800a0b4 <_scanf_float+0x188>
 800a144:	2d06      	cmp	r5, #6
 800a146:	f47f af21 	bne.w	8009f8c <_scanf_float+0x60>
 800a14a:	2507      	movs	r5, #7
 800a14c:	e7b2      	b.n	800a0b4 <_scanf_float+0x188>
 800a14e:	6822      	ldr	r2, [r4, #0]
 800a150:	0591      	lsls	r1, r2, #22
 800a152:	f57f af1b 	bpl.w	8009f8c <_scanf_float+0x60>
 800a156:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a15a:	6022      	str	r2, [r4, #0]
 800a15c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a160:	e7a8      	b.n	800a0b4 <_scanf_float+0x188>
 800a162:	6822      	ldr	r2, [r4, #0]
 800a164:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a168:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a16c:	d006      	beq.n	800a17c <_scanf_float+0x250>
 800a16e:	0550      	lsls	r0, r2, #21
 800a170:	f57f af0c 	bpl.w	8009f8c <_scanf_float+0x60>
 800a174:	f1b9 0f00 	cmp.w	r9, #0
 800a178:	f43f af0f 	beq.w	8009f9a <_scanf_float+0x6e>
 800a17c:	0591      	lsls	r1, r2, #22
 800a17e:	bf58      	it	pl
 800a180:	9901      	ldrpl	r1, [sp, #4]
 800a182:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a186:	bf58      	it	pl
 800a188:	eba9 0101 	subpl.w	r1, r9, r1
 800a18c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a190:	bf58      	it	pl
 800a192:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a196:	6022      	str	r2, [r4, #0]
 800a198:	f04f 0900 	mov.w	r9, #0
 800a19c:	e78a      	b.n	800a0b4 <_scanf_float+0x188>
 800a19e:	f04f 0a03 	mov.w	sl, #3
 800a1a2:	e787      	b.n	800a0b4 <_scanf_float+0x188>
 800a1a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a1a8:	4639      	mov	r1, r7
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	4798      	blx	r3
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	f43f aedf 	beq.w	8009f72 <_scanf_float+0x46>
 800a1b4:	e6ea      	b.n	8009f8c <_scanf_float+0x60>
 800a1b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1be:	463a      	mov	r2, r7
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	4798      	blx	r3
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	6123      	str	r3, [r4, #16]
 800a1ca:	e6ec      	b.n	8009fa6 <_scanf_float+0x7a>
 800a1cc:	1e6b      	subs	r3, r5, #1
 800a1ce:	2b06      	cmp	r3, #6
 800a1d0:	d825      	bhi.n	800a21e <_scanf_float+0x2f2>
 800a1d2:	2d02      	cmp	r5, #2
 800a1d4:	d836      	bhi.n	800a244 <_scanf_float+0x318>
 800a1d6:	455e      	cmp	r6, fp
 800a1d8:	f67f aee8 	bls.w	8009fac <_scanf_float+0x80>
 800a1dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1e4:	463a      	mov	r2, r7
 800a1e6:	4640      	mov	r0, r8
 800a1e8:	4798      	blx	r3
 800a1ea:	6923      	ldr	r3, [r4, #16]
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	6123      	str	r3, [r4, #16]
 800a1f0:	e7f1      	b.n	800a1d6 <_scanf_float+0x2aa>
 800a1f2:	9802      	ldr	r0, [sp, #8]
 800a1f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a1fc:	9002      	str	r0, [sp, #8]
 800a1fe:	463a      	mov	r2, r7
 800a200:	4640      	mov	r0, r8
 800a202:	4798      	blx	r3
 800a204:	6923      	ldr	r3, [r4, #16]
 800a206:	3b01      	subs	r3, #1
 800a208:	6123      	str	r3, [r4, #16]
 800a20a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a20e:	fa5f fa8a 	uxtb.w	sl, sl
 800a212:	f1ba 0f02 	cmp.w	sl, #2
 800a216:	d1ec      	bne.n	800a1f2 <_scanf_float+0x2c6>
 800a218:	3d03      	subs	r5, #3
 800a21a:	b2ed      	uxtb	r5, r5
 800a21c:	1b76      	subs	r6, r6, r5
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	05da      	lsls	r2, r3, #23
 800a222:	d52f      	bpl.n	800a284 <_scanf_float+0x358>
 800a224:	055b      	lsls	r3, r3, #21
 800a226:	d510      	bpl.n	800a24a <_scanf_float+0x31e>
 800a228:	455e      	cmp	r6, fp
 800a22a:	f67f aebf 	bls.w	8009fac <_scanf_float+0x80>
 800a22e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a232:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a236:	463a      	mov	r2, r7
 800a238:	4640      	mov	r0, r8
 800a23a:	4798      	blx	r3
 800a23c:	6923      	ldr	r3, [r4, #16]
 800a23e:	3b01      	subs	r3, #1
 800a240:	6123      	str	r3, [r4, #16]
 800a242:	e7f1      	b.n	800a228 <_scanf_float+0x2fc>
 800a244:	46aa      	mov	sl, r5
 800a246:	9602      	str	r6, [sp, #8]
 800a248:	e7df      	b.n	800a20a <_scanf_float+0x2de>
 800a24a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a24e:	6923      	ldr	r3, [r4, #16]
 800a250:	2965      	cmp	r1, #101	; 0x65
 800a252:	f103 33ff 	add.w	r3, r3, #4294967295
 800a256:	f106 35ff 	add.w	r5, r6, #4294967295
 800a25a:	6123      	str	r3, [r4, #16]
 800a25c:	d00c      	beq.n	800a278 <_scanf_float+0x34c>
 800a25e:	2945      	cmp	r1, #69	; 0x45
 800a260:	d00a      	beq.n	800a278 <_scanf_float+0x34c>
 800a262:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a266:	463a      	mov	r2, r7
 800a268:	4640      	mov	r0, r8
 800a26a:	4798      	blx	r3
 800a26c:	6923      	ldr	r3, [r4, #16]
 800a26e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a272:	3b01      	subs	r3, #1
 800a274:	1eb5      	subs	r5, r6, #2
 800a276:	6123      	str	r3, [r4, #16]
 800a278:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a27c:	463a      	mov	r2, r7
 800a27e:	4640      	mov	r0, r8
 800a280:	4798      	blx	r3
 800a282:	462e      	mov	r6, r5
 800a284:	6825      	ldr	r5, [r4, #0]
 800a286:	f015 0510 	ands.w	r5, r5, #16
 800a28a:	d159      	bne.n	800a340 <_scanf_float+0x414>
 800a28c:	7035      	strb	r5, [r6, #0]
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a298:	d11b      	bne.n	800a2d2 <_scanf_float+0x3a6>
 800a29a:	9b01      	ldr	r3, [sp, #4]
 800a29c:	454b      	cmp	r3, r9
 800a29e:	eba3 0209 	sub.w	r2, r3, r9
 800a2a2:	d123      	bne.n	800a2ec <_scanf_float+0x3c0>
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	4659      	mov	r1, fp
 800a2a8:	4640      	mov	r0, r8
 800a2aa:	f000 ff57 	bl	800b15c <_strtod_r>
 800a2ae:	6822      	ldr	r2, [r4, #0]
 800a2b0:	9b03      	ldr	r3, [sp, #12]
 800a2b2:	f012 0f02 	tst.w	r2, #2
 800a2b6:	ec57 6b10 	vmov	r6, r7, d0
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	d021      	beq.n	800a302 <_scanf_float+0x3d6>
 800a2be:	9903      	ldr	r1, [sp, #12]
 800a2c0:	1d1a      	adds	r2, r3, #4
 800a2c2:	600a      	str	r2, [r1, #0]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	e9c3 6700 	strd	r6, r7, [r3]
 800a2ca:	68e3      	ldr	r3, [r4, #12]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	60e3      	str	r3, [r4, #12]
 800a2d0:	e66d      	b.n	8009fae <_scanf_float+0x82>
 800a2d2:	9b04      	ldr	r3, [sp, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d0e5      	beq.n	800a2a4 <_scanf_float+0x378>
 800a2d8:	9905      	ldr	r1, [sp, #20]
 800a2da:	230a      	movs	r3, #10
 800a2dc:	462a      	mov	r2, r5
 800a2de:	3101      	adds	r1, #1
 800a2e0:	4640      	mov	r0, r8
 800a2e2:	f000 ffc3 	bl	800b26c <_strtol_r>
 800a2e6:	9b04      	ldr	r3, [sp, #16]
 800a2e8:	9e05      	ldr	r6, [sp, #20]
 800a2ea:	1ac2      	subs	r2, r0, r3
 800a2ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a2f0:	429e      	cmp	r6, r3
 800a2f2:	bf28      	it	cs
 800a2f4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a2f8:	4912      	ldr	r1, [pc, #72]	; (800a344 <_scanf_float+0x418>)
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	f000 f8a6 	bl	800a44c <siprintf>
 800a300:	e7d0      	b.n	800a2a4 <_scanf_float+0x378>
 800a302:	9903      	ldr	r1, [sp, #12]
 800a304:	f012 0f04 	tst.w	r2, #4
 800a308:	f103 0204 	add.w	r2, r3, #4
 800a30c:	600a      	str	r2, [r1, #0]
 800a30e:	d1d9      	bne.n	800a2c4 <_scanf_float+0x398>
 800a310:	f8d3 8000 	ldr.w	r8, [r3]
 800a314:	ee10 2a10 	vmov	r2, s0
 800a318:	ee10 0a10 	vmov	r0, s0
 800a31c:	463b      	mov	r3, r7
 800a31e:	4639      	mov	r1, r7
 800a320:	f7f6 fc04 	bl	8000b2c <__aeabi_dcmpun>
 800a324:	b128      	cbz	r0, 800a332 <_scanf_float+0x406>
 800a326:	4808      	ldr	r0, [pc, #32]	; (800a348 <_scanf_float+0x41c>)
 800a328:	f000 f88a 	bl	800a440 <nanf>
 800a32c:	ed88 0a00 	vstr	s0, [r8]
 800a330:	e7cb      	b.n	800a2ca <_scanf_float+0x39e>
 800a332:	4630      	mov	r0, r6
 800a334:	4639      	mov	r1, r7
 800a336:	f7f6 fc57 	bl	8000be8 <__aeabi_d2f>
 800a33a:	f8c8 0000 	str.w	r0, [r8]
 800a33e:	e7c4      	b.n	800a2ca <_scanf_float+0x39e>
 800a340:	2500      	movs	r5, #0
 800a342:	e634      	b.n	8009fae <_scanf_float+0x82>
 800a344:	0800de80 	.word	0x0800de80
 800a348:	0800df13 	.word	0x0800df13

0800a34c <cleanup_glue>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	460c      	mov	r4, r1
 800a350:	6809      	ldr	r1, [r1, #0]
 800a352:	4605      	mov	r5, r0
 800a354:	b109      	cbz	r1, 800a35a <cleanup_glue+0xe>
 800a356:	f7ff fff9 	bl	800a34c <cleanup_glue>
 800a35a:	4621      	mov	r1, r4
 800a35c:	4628      	mov	r0, r5
 800a35e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a362:	f003 b8bd 	b.w	800d4e0 <_free_r>
	...

0800a368 <_reclaim_reent>:
 800a368:	4b2c      	ldr	r3, [pc, #176]	; (800a41c <_reclaim_reent+0xb4>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4283      	cmp	r3, r0
 800a36e:	b570      	push	{r4, r5, r6, lr}
 800a370:	4604      	mov	r4, r0
 800a372:	d051      	beq.n	800a418 <_reclaim_reent+0xb0>
 800a374:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a376:	b143      	cbz	r3, 800a38a <_reclaim_reent+0x22>
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d14a      	bne.n	800a414 <_reclaim_reent+0xac>
 800a37e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a380:	6819      	ldr	r1, [r3, #0]
 800a382:	b111      	cbz	r1, 800a38a <_reclaim_reent+0x22>
 800a384:	4620      	mov	r0, r4
 800a386:	f003 f8ab 	bl	800d4e0 <_free_r>
 800a38a:	6961      	ldr	r1, [r4, #20]
 800a38c:	b111      	cbz	r1, 800a394 <_reclaim_reent+0x2c>
 800a38e:	4620      	mov	r0, r4
 800a390:	f003 f8a6 	bl	800d4e0 <_free_r>
 800a394:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a396:	b111      	cbz	r1, 800a39e <_reclaim_reent+0x36>
 800a398:	4620      	mov	r0, r4
 800a39a:	f003 f8a1 	bl	800d4e0 <_free_r>
 800a39e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a3a0:	b111      	cbz	r1, 800a3a8 <_reclaim_reent+0x40>
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f003 f89c 	bl	800d4e0 <_free_r>
 800a3a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a3aa:	b111      	cbz	r1, 800a3b2 <_reclaim_reent+0x4a>
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f003 f897 	bl	800d4e0 <_free_r>
 800a3b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a3b4:	b111      	cbz	r1, 800a3bc <_reclaim_reent+0x54>
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	f003 f892 	bl	800d4e0 <_free_r>
 800a3bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a3be:	b111      	cbz	r1, 800a3c6 <_reclaim_reent+0x5e>
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f003 f88d 	bl	800d4e0 <_free_r>
 800a3c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a3c8:	b111      	cbz	r1, 800a3d0 <_reclaim_reent+0x68>
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f003 f888 	bl	800d4e0 <_free_r>
 800a3d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3d2:	b111      	cbz	r1, 800a3da <_reclaim_reent+0x72>
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f003 f883 	bl	800d4e0 <_free_r>
 800a3da:	69a3      	ldr	r3, [r4, #24]
 800a3dc:	b1e3      	cbz	r3, 800a418 <_reclaim_reent+0xb0>
 800a3de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	4798      	blx	r3
 800a3e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a3e6:	b1b9      	cbz	r1, 800a418 <_reclaim_reent+0xb0>
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3ee:	f7ff bfad 	b.w	800a34c <cleanup_glue>
 800a3f2:	5949      	ldr	r1, [r1, r5]
 800a3f4:	b941      	cbnz	r1, 800a408 <_reclaim_reent+0xa0>
 800a3f6:	3504      	adds	r5, #4
 800a3f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3fa:	2d80      	cmp	r5, #128	; 0x80
 800a3fc:	68d9      	ldr	r1, [r3, #12]
 800a3fe:	d1f8      	bne.n	800a3f2 <_reclaim_reent+0x8a>
 800a400:	4620      	mov	r0, r4
 800a402:	f003 f86d 	bl	800d4e0 <_free_r>
 800a406:	e7ba      	b.n	800a37e <_reclaim_reent+0x16>
 800a408:	680e      	ldr	r6, [r1, #0]
 800a40a:	4620      	mov	r0, r4
 800a40c:	f003 f868 	bl	800d4e0 <_free_r>
 800a410:	4631      	mov	r1, r6
 800a412:	e7ef      	b.n	800a3f4 <_reclaim_reent+0x8c>
 800a414:	2500      	movs	r5, #0
 800a416:	e7ef      	b.n	800a3f8 <_reclaim_reent+0x90>
 800a418:	bd70      	pop	{r4, r5, r6, pc}
 800a41a:	bf00      	nop
 800a41c:	20000044 	.word	0x20000044

0800a420 <_sbrk_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d06      	ldr	r5, [pc, #24]	; (800a43c <_sbrk_r+0x1c>)
 800a424:	2300      	movs	r3, #0
 800a426:	4604      	mov	r4, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	602b      	str	r3, [r5, #0]
 800a42c:	f7f7 f8ea 	bl	8001604 <_sbrk>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_sbrk_r+0x1a>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	b103      	cbz	r3, 800a43a <_sbrk_r+0x1a>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	2000836c 	.word	0x2000836c

0800a440 <nanf>:
 800a440:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a448 <nanf+0x8>
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	7fc00000 	.word	0x7fc00000

0800a44c <siprintf>:
 800a44c:	b40e      	push	{r1, r2, r3}
 800a44e:	b500      	push	{lr}
 800a450:	b09c      	sub	sp, #112	; 0x70
 800a452:	ab1d      	add	r3, sp, #116	; 0x74
 800a454:	9002      	str	r0, [sp, #8]
 800a456:	9006      	str	r0, [sp, #24]
 800a458:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a45c:	4809      	ldr	r0, [pc, #36]	; (800a484 <siprintf+0x38>)
 800a45e:	9107      	str	r1, [sp, #28]
 800a460:	9104      	str	r1, [sp, #16]
 800a462:	4909      	ldr	r1, [pc, #36]	; (800a488 <siprintf+0x3c>)
 800a464:	f853 2b04 	ldr.w	r2, [r3], #4
 800a468:	9105      	str	r1, [sp, #20]
 800a46a:	6800      	ldr	r0, [r0, #0]
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	a902      	add	r1, sp, #8
 800a470:	f003 f8de 	bl	800d630 <_svfiprintf_r>
 800a474:	9b02      	ldr	r3, [sp, #8]
 800a476:	2200      	movs	r2, #0
 800a478:	701a      	strb	r2, [r3, #0]
 800a47a:	b01c      	add	sp, #112	; 0x70
 800a47c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a480:	b003      	add	sp, #12
 800a482:	4770      	bx	lr
 800a484:	20000044 	.word	0x20000044
 800a488:	ffff0208 	.word	0xffff0208

0800a48c <__sread>:
 800a48c:	b510      	push	{r4, lr}
 800a48e:	460c      	mov	r4, r1
 800a490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a494:	f003 fb26 	bl	800dae4 <_read_r>
 800a498:	2800      	cmp	r0, #0
 800a49a:	bfab      	itete	ge
 800a49c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a49e:	89a3      	ldrhlt	r3, [r4, #12]
 800a4a0:	181b      	addge	r3, r3, r0
 800a4a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4a6:	bfac      	ite	ge
 800a4a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4aa:	81a3      	strhlt	r3, [r4, #12]
 800a4ac:	bd10      	pop	{r4, pc}

0800a4ae <__swrite>:
 800a4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b2:	461f      	mov	r7, r3
 800a4b4:	898b      	ldrh	r3, [r1, #12]
 800a4b6:	05db      	lsls	r3, r3, #23
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	4616      	mov	r6, r2
 800a4be:	d505      	bpl.n	800a4cc <__swrite+0x1e>
 800a4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f002 fa94 	bl	800c9f4 <_lseek_r>
 800a4cc:	89a3      	ldrh	r3, [r4, #12]
 800a4ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4d6:	81a3      	strh	r3, [r4, #12]
 800a4d8:	4632      	mov	r2, r6
 800a4da:	463b      	mov	r3, r7
 800a4dc:	4628      	mov	r0, r5
 800a4de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e2:	f000 bf17 	b.w	800b314 <_write_r>

0800a4e6 <__sseek>:
 800a4e6:	b510      	push	{r4, lr}
 800a4e8:	460c      	mov	r4, r1
 800a4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ee:	f002 fa81 	bl	800c9f4 <_lseek_r>
 800a4f2:	1c43      	adds	r3, r0, #1
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	bf15      	itete	ne
 800a4f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a502:	81a3      	strheq	r3, [r4, #12]
 800a504:	bf18      	it	ne
 800a506:	81a3      	strhne	r3, [r4, #12]
 800a508:	bd10      	pop	{r4, pc}

0800a50a <__sclose>:
 800a50a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a50e:	f000 bf9f 	b.w	800b450 <_close_r>

0800a512 <sulp>:
 800a512:	b570      	push	{r4, r5, r6, lr}
 800a514:	4604      	mov	r4, r0
 800a516:	460d      	mov	r5, r1
 800a518:	ec45 4b10 	vmov	d0, r4, r5
 800a51c:	4616      	mov	r6, r2
 800a51e:	f002 fe79 	bl	800d214 <__ulp>
 800a522:	ec51 0b10 	vmov	r0, r1, d0
 800a526:	b17e      	cbz	r6, 800a548 <sulp+0x36>
 800a528:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a52c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a530:	2b00      	cmp	r3, #0
 800a532:	dd09      	ble.n	800a548 <sulp+0x36>
 800a534:	051b      	lsls	r3, r3, #20
 800a536:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a53a:	2400      	movs	r4, #0
 800a53c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a540:	4622      	mov	r2, r4
 800a542:	462b      	mov	r3, r5
 800a544:	f7f6 f858 	bl	80005f8 <__aeabi_dmul>
 800a548:	bd70      	pop	{r4, r5, r6, pc}
 800a54a:	0000      	movs	r0, r0
 800a54c:	0000      	movs	r0, r0
	...

0800a550 <_strtod_l>:
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	ed2d 8b02 	vpush	{d8}
 800a558:	b09d      	sub	sp, #116	; 0x74
 800a55a:	461f      	mov	r7, r3
 800a55c:	2300      	movs	r3, #0
 800a55e:	9318      	str	r3, [sp, #96]	; 0x60
 800a560:	4ba2      	ldr	r3, [pc, #648]	; (800a7ec <_strtod_l+0x29c>)
 800a562:	9213      	str	r2, [sp, #76]	; 0x4c
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	9305      	str	r3, [sp, #20]
 800a568:	4604      	mov	r4, r0
 800a56a:	4618      	mov	r0, r3
 800a56c:	4688      	mov	r8, r1
 800a56e:	f7f5 fe2f 	bl	80001d0 <strlen>
 800a572:	f04f 0a00 	mov.w	sl, #0
 800a576:	4605      	mov	r5, r0
 800a578:	f04f 0b00 	mov.w	fp, #0
 800a57c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a582:	781a      	ldrb	r2, [r3, #0]
 800a584:	2a2b      	cmp	r2, #43	; 0x2b
 800a586:	d04e      	beq.n	800a626 <_strtod_l+0xd6>
 800a588:	d83b      	bhi.n	800a602 <_strtod_l+0xb2>
 800a58a:	2a0d      	cmp	r2, #13
 800a58c:	d834      	bhi.n	800a5f8 <_strtod_l+0xa8>
 800a58e:	2a08      	cmp	r2, #8
 800a590:	d834      	bhi.n	800a5fc <_strtod_l+0xac>
 800a592:	2a00      	cmp	r2, #0
 800a594:	d03e      	beq.n	800a614 <_strtod_l+0xc4>
 800a596:	2300      	movs	r3, #0
 800a598:	930a      	str	r3, [sp, #40]	; 0x28
 800a59a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a59c:	7833      	ldrb	r3, [r6, #0]
 800a59e:	2b30      	cmp	r3, #48	; 0x30
 800a5a0:	f040 80b0 	bne.w	800a704 <_strtod_l+0x1b4>
 800a5a4:	7873      	ldrb	r3, [r6, #1]
 800a5a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a5aa:	2b58      	cmp	r3, #88	; 0x58
 800a5ac:	d168      	bne.n	800a680 <_strtod_l+0x130>
 800a5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b0:	9301      	str	r3, [sp, #4]
 800a5b2:	ab18      	add	r3, sp, #96	; 0x60
 800a5b4:	9702      	str	r7, [sp, #8]
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	4a8d      	ldr	r2, [pc, #564]	; (800a7f0 <_strtod_l+0x2a0>)
 800a5ba:	ab19      	add	r3, sp, #100	; 0x64
 800a5bc:	a917      	add	r1, sp, #92	; 0x5c
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f001 ff0c 	bl	800c3dc <__gethex>
 800a5c4:	f010 0707 	ands.w	r7, r0, #7
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	d005      	beq.n	800a5d8 <_strtod_l+0x88>
 800a5cc:	2f06      	cmp	r7, #6
 800a5ce:	d12c      	bne.n	800a62a <_strtod_l+0xda>
 800a5d0:	3601      	adds	r6, #1
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	9617      	str	r6, [sp, #92]	; 0x5c
 800a5d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f040 8590 	bne.w	800b100 <_strtod_l+0xbb0>
 800a5e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5e2:	b1eb      	cbz	r3, 800a620 <_strtod_l+0xd0>
 800a5e4:	4652      	mov	r2, sl
 800a5e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a5ea:	ec43 2b10 	vmov	d0, r2, r3
 800a5ee:	b01d      	add	sp, #116	; 0x74
 800a5f0:	ecbd 8b02 	vpop	{d8}
 800a5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f8:	2a20      	cmp	r2, #32
 800a5fa:	d1cc      	bne.n	800a596 <_strtod_l+0x46>
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800a600:	e7be      	b.n	800a580 <_strtod_l+0x30>
 800a602:	2a2d      	cmp	r2, #45	; 0x2d
 800a604:	d1c7      	bne.n	800a596 <_strtod_l+0x46>
 800a606:	2201      	movs	r2, #1
 800a608:	920a      	str	r2, [sp, #40]	; 0x28
 800a60a:	1c5a      	adds	r2, r3, #1
 800a60c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a60e:	785b      	ldrb	r3, [r3, #1]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1c2      	bne.n	800a59a <_strtod_l+0x4a>
 800a614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a616:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f040 856e 	bne.w	800b0fc <_strtod_l+0xbac>
 800a620:	4652      	mov	r2, sl
 800a622:	465b      	mov	r3, fp
 800a624:	e7e1      	b.n	800a5ea <_strtod_l+0x9a>
 800a626:	2200      	movs	r2, #0
 800a628:	e7ee      	b.n	800a608 <_strtod_l+0xb8>
 800a62a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a62c:	b13a      	cbz	r2, 800a63e <_strtod_l+0xee>
 800a62e:	2135      	movs	r1, #53	; 0x35
 800a630:	a81a      	add	r0, sp, #104	; 0x68
 800a632:	f002 fefa 	bl	800d42a <__copybits>
 800a636:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a638:	4620      	mov	r0, r4
 800a63a:	f002 fab9 	bl	800cbb0 <_Bfree>
 800a63e:	3f01      	subs	r7, #1
 800a640:	2f04      	cmp	r7, #4
 800a642:	d806      	bhi.n	800a652 <_strtod_l+0x102>
 800a644:	e8df f007 	tbb	[pc, r7]
 800a648:	1714030a 	.word	0x1714030a
 800a64c:	0a          	.byte	0x0a
 800a64d:	00          	.byte	0x00
 800a64e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a652:	0728      	lsls	r0, r5, #28
 800a654:	d5c0      	bpl.n	800a5d8 <_strtod_l+0x88>
 800a656:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a65a:	e7bd      	b.n	800a5d8 <_strtod_l+0x88>
 800a65c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a660:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a662:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a666:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a66a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a66e:	e7f0      	b.n	800a652 <_strtod_l+0x102>
 800a670:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a7f4 <_strtod_l+0x2a4>
 800a674:	e7ed      	b.n	800a652 <_strtod_l+0x102>
 800a676:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a67a:	f04f 3aff 	mov.w	sl, #4294967295
 800a67e:	e7e8      	b.n	800a652 <_strtod_l+0x102>
 800a680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a682:	1c5a      	adds	r2, r3, #1
 800a684:	9217      	str	r2, [sp, #92]	; 0x5c
 800a686:	785b      	ldrb	r3, [r3, #1]
 800a688:	2b30      	cmp	r3, #48	; 0x30
 800a68a:	d0f9      	beq.n	800a680 <_strtod_l+0x130>
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d0a3      	beq.n	800a5d8 <_strtod_l+0x88>
 800a690:	2301      	movs	r3, #1
 800a692:	f04f 0900 	mov.w	r9, #0
 800a696:	9304      	str	r3, [sp, #16]
 800a698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a69a:	9308      	str	r3, [sp, #32]
 800a69c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a6a0:	464f      	mov	r7, r9
 800a6a2:	220a      	movs	r2, #10
 800a6a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a6a6:	7806      	ldrb	r6, [r0, #0]
 800a6a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a6ac:	b2d9      	uxtb	r1, r3
 800a6ae:	2909      	cmp	r1, #9
 800a6b0:	d92a      	bls.n	800a708 <_strtod_l+0x1b8>
 800a6b2:	9905      	ldr	r1, [sp, #20]
 800a6b4:	462a      	mov	r2, r5
 800a6b6:	f003 fa2f 	bl	800db18 <strncmp>
 800a6ba:	b398      	cbz	r0, 800a724 <_strtod_l+0x1d4>
 800a6bc:	2000      	movs	r0, #0
 800a6be:	4632      	mov	r2, r6
 800a6c0:	463d      	mov	r5, r7
 800a6c2:	9005      	str	r0, [sp, #20]
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2a65      	cmp	r2, #101	; 0x65
 800a6c8:	d001      	beq.n	800a6ce <_strtod_l+0x17e>
 800a6ca:	2a45      	cmp	r2, #69	; 0x45
 800a6cc:	d118      	bne.n	800a700 <_strtod_l+0x1b0>
 800a6ce:	b91d      	cbnz	r5, 800a6d8 <_strtod_l+0x188>
 800a6d0:	9a04      	ldr	r2, [sp, #16]
 800a6d2:	4302      	orrs	r2, r0
 800a6d4:	d09e      	beq.n	800a614 <_strtod_l+0xc4>
 800a6d6:	2500      	movs	r5, #0
 800a6d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a6dc:	f108 0201 	add.w	r2, r8, #1
 800a6e0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a6e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a6e6:	2a2b      	cmp	r2, #43	; 0x2b
 800a6e8:	d075      	beq.n	800a7d6 <_strtod_l+0x286>
 800a6ea:	2a2d      	cmp	r2, #45	; 0x2d
 800a6ec:	d07b      	beq.n	800a7e6 <_strtod_l+0x296>
 800a6ee:	f04f 0c00 	mov.w	ip, #0
 800a6f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a6f6:	2909      	cmp	r1, #9
 800a6f8:	f240 8082 	bls.w	800a800 <_strtod_l+0x2b0>
 800a6fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a700:	2600      	movs	r6, #0
 800a702:	e09d      	b.n	800a840 <_strtod_l+0x2f0>
 800a704:	2300      	movs	r3, #0
 800a706:	e7c4      	b.n	800a692 <_strtod_l+0x142>
 800a708:	2f08      	cmp	r7, #8
 800a70a:	bfd8      	it	le
 800a70c:	9907      	ldrle	r1, [sp, #28]
 800a70e:	f100 0001 	add.w	r0, r0, #1
 800a712:	bfda      	itte	le
 800a714:	fb02 3301 	mlale	r3, r2, r1, r3
 800a718:	9307      	strle	r3, [sp, #28]
 800a71a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a71e:	3701      	adds	r7, #1
 800a720:	9017      	str	r0, [sp, #92]	; 0x5c
 800a722:	e7bf      	b.n	800a6a4 <_strtod_l+0x154>
 800a724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a726:	195a      	adds	r2, r3, r5
 800a728:	9217      	str	r2, [sp, #92]	; 0x5c
 800a72a:	5d5a      	ldrb	r2, [r3, r5]
 800a72c:	2f00      	cmp	r7, #0
 800a72e:	d037      	beq.n	800a7a0 <_strtod_l+0x250>
 800a730:	9005      	str	r0, [sp, #20]
 800a732:	463d      	mov	r5, r7
 800a734:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a738:	2b09      	cmp	r3, #9
 800a73a:	d912      	bls.n	800a762 <_strtod_l+0x212>
 800a73c:	2301      	movs	r3, #1
 800a73e:	e7c2      	b.n	800a6c6 <_strtod_l+0x176>
 800a740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a742:	1c5a      	adds	r2, r3, #1
 800a744:	9217      	str	r2, [sp, #92]	; 0x5c
 800a746:	785a      	ldrb	r2, [r3, #1]
 800a748:	3001      	adds	r0, #1
 800a74a:	2a30      	cmp	r2, #48	; 0x30
 800a74c:	d0f8      	beq.n	800a740 <_strtod_l+0x1f0>
 800a74e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a752:	2b08      	cmp	r3, #8
 800a754:	f200 84d9 	bhi.w	800b10a <_strtod_l+0xbba>
 800a758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a75a:	9005      	str	r0, [sp, #20]
 800a75c:	2000      	movs	r0, #0
 800a75e:	9308      	str	r3, [sp, #32]
 800a760:	4605      	mov	r5, r0
 800a762:	3a30      	subs	r2, #48	; 0x30
 800a764:	f100 0301 	add.w	r3, r0, #1
 800a768:	d014      	beq.n	800a794 <_strtod_l+0x244>
 800a76a:	9905      	ldr	r1, [sp, #20]
 800a76c:	4419      	add	r1, r3
 800a76e:	9105      	str	r1, [sp, #20]
 800a770:	462b      	mov	r3, r5
 800a772:	eb00 0e05 	add.w	lr, r0, r5
 800a776:	210a      	movs	r1, #10
 800a778:	4573      	cmp	r3, lr
 800a77a:	d113      	bne.n	800a7a4 <_strtod_l+0x254>
 800a77c:	182b      	adds	r3, r5, r0
 800a77e:	2b08      	cmp	r3, #8
 800a780:	f105 0501 	add.w	r5, r5, #1
 800a784:	4405      	add	r5, r0
 800a786:	dc1c      	bgt.n	800a7c2 <_strtod_l+0x272>
 800a788:	9907      	ldr	r1, [sp, #28]
 800a78a:	230a      	movs	r3, #10
 800a78c:	fb03 2301 	mla	r3, r3, r1, r2
 800a790:	9307      	str	r3, [sp, #28]
 800a792:	2300      	movs	r3, #0
 800a794:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a796:	1c51      	adds	r1, r2, #1
 800a798:	9117      	str	r1, [sp, #92]	; 0x5c
 800a79a:	7852      	ldrb	r2, [r2, #1]
 800a79c:	4618      	mov	r0, r3
 800a79e:	e7c9      	b.n	800a734 <_strtod_l+0x1e4>
 800a7a0:	4638      	mov	r0, r7
 800a7a2:	e7d2      	b.n	800a74a <_strtod_l+0x1fa>
 800a7a4:	2b08      	cmp	r3, #8
 800a7a6:	dc04      	bgt.n	800a7b2 <_strtod_l+0x262>
 800a7a8:	9e07      	ldr	r6, [sp, #28]
 800a7aa:	434e      	muls	r6, r1
 800a7ac:	9607      	str	r6, [sp, #28]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	e7e2      	b.n	800a778 <_strtod_l+0x228>
 800a7b2:	f103 0c01 	add.w	ip, r3, #1
 800a7b6:	f1bc 0f10 	cmp.w	ip, #16
 800a7ba:	bfd8      	it	le
 800a7bc:	fb01 f909 	mulle.w	r9, r1, r9
 800a7c0:	e7f5      	b.n	800a7ae <_strtod_l+0x25e>
 800a7c2:	2d10      	cmp	r5, #16
 800a7c4:	bfdc      	itt	le
 800a7c6:	230a      	movle	r3, #10
 800a7c8:	fb03 2909 	mlale	r9, r3, r9, r2
 800a7cc:	e7e1      	b.n	800a792 <_strtod_l+0x242>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	9305      	str	r3, [sp, #20]
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e77c      	b.n	800a6d0 <_strtod_l+0x180>
 800a7d6:	f04f 0c00 	mov.w	ip, #0
 800a7da:	f108 0202 	add.w	r2, r8, #2
 800a7de:	9217      	str	r2, [sp, #92]	; 0x5c
 800a7e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a7e4:	e785      	b.n	800a6f2 <_strtod_l+0x1a2>
 800a7e6:	f04f 0c01 	mov.w	ip, #1
 800a7ea:	e7f6      	b.n	800a7da <_strtod_l+0x28a>
 800a7ec:	0800e10c 	.word	0x0800e10c
 800a7f0:	0800de88 	.word	0x0800de88
 800a7f4:	7ff00000 	.word	0x7ff00000
 800a7f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a7fa:	1c51      	adds	r1, r2, #1
 800a7fc:	9117      	str	r1, [sp, #92]	; 0x5c
 800a7fe:	7852      	ldrb	r2, [r2, #1]
 800a800:	2a30      	cmp	r2, #48	; 0x30
 800a802:	d0f9      	beq.n	800a7f8 <_strtod_l+0x2a8>
 800a804:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a808:	2908      	cmp	r1, #8
 800a80a:	f63f af79 	bhi.w	800a700 <_strtod_l+0x1b0>
 800a80e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a812:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a814:	9206      	str	r2, [sp, #24]
 800a816:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a818:	1c51      	adds	r1, r2, #1
 800a81a:	9117      	str	r1, [sp, #92]	; 0x5c
 800a81c:	7852      	ldrb	r2, [r2, #1]
 800a81e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a822:	2e09      	cmp	r6, #9
 800a824:	d937      	bls.n	800a896 <_strtod_l+0x346>
 800a826:	9e06      	ldr	r6, [sp, #24]
 800a828:	1b89      	subs	r1, r1, r6
 800a82a:	2908      	cmp	r1, #8
 800a82c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a830:	dc02      	bgt.n	800a838 <_strtod_l+0x2e8>
 800a832:	4576      	cmp	r6, lr
 800a834:	bfa8      	it	ge
 800a836:	4676      	movge	r6, lr
 800a838:	f1bc 0f00 	cmp.w	ip, #0
 800a83c:	d000      	beq.n	800a840 <_strtod_l+0x2f0>
 800a83e:	4276      	negs	r6, r6
 800a840:	2d00      	cmp	r5, #0
 800a842:	d14d      	bne.n	800a8e0 <_strtod_l+0x390>
 800a844:	9904      	ldr	r1, [sp, #16]
 800a846:	4301      	orrs	r1, r0
 800a848:	f47f aec6 	bne.w	800a5d8 <_strtod_l+0x88>
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f47f aee1 	bne.w	800a614 <_strtod_l+0xc4>
 800a852:	2a69      	cmp	r2, #105	; 0x69
 800a854:	d027      	beq.n	800a8a6 <_strtod_l+0x356>
 800a856:	dc24      	bgt.n	800a8a2 <_strtod_l+0x352>
 800a858:	2a49      	cmp	r2, #73	; 0x49
 800a85a:	d024      	beq.n	800a8a6 <_strtod_l+0x356>
 800a85c:	2a4e      	cmp	r2, #78	; 0x4e
 800a85e:	f47f aed9 	bne.w	800a614 <_strtod_l+0xc4>
 800a862:	499f      	ldr	r1, [pc, #636]	; (800aae0 <_strtod_l+0x590>)
 800a864:	a817      	add	r0, sp, #92	; 0x5c
 800a866:	f002 f811 	bl	800c88c <__match>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	f43f aed2 	beq.w	800a614 <_strtod_l+0xc4>
 800a870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2b28      	cmp	r3, #40	; 0x28
 800a876:	d12d      	bne.n	800a8d4 <_strtod_l+0x384>
 800a878:	499a      	ldr	r1, [pc, #616]	; (800aae4 <_strtod_l+0x594>)
 800a87a:	aa1a      	add	r2, sp, #104	; 0x68
 800a87c:	a817      	add	r0, sp, #92	; 0x5c
 800a87e:	f002 f819 	bl	800c8b4 <__hexnan>
 800a882:	2805      	cmp	r0, #5
 800a884:	d126      	bne.n	800a8d4 <_strtod_l+0x384>
 800a886:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a888:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a88c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a890:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a894:	e6a0      	b.n	800a5d8 <_strtod_l+0x88>
 800a896:	210a      	movs	r1, #10
 800a898:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a89c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a8a0:	e7b9      	b.n	800a816 <_strtod_l+0x2c6>
 800a8a2:	2a6e      	cmp	r2, #110	; 0x6e
 800a8a4:	e7db      	b.n	800a85e <_strtod_l+0x30e>
 800a8a6:	4990      	ldr	r1, [pc, #576]	; (800aae8 <_strtod_l+0x598>)
 800a8a8:	a817      	add	r0, sp, #92	; 0x5c
 800a8aa:	f001 ffef 	bl	800c88c <__match>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f43f aeb0 	beq.w	800a614 <_strtod_l+0xc4>
 800a8b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8b6:	498d      	ldr	r1, [pc, #564]	; (800aaec <_strtod_l+0x59c>)
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	a817      	add	r0, sp, #92	; 0x5c
 800a8bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8be:	f001 ffe5 	bl	800c88c <__match>
 800a8c2:	b910      	cbnz	r0, 800a8ca <_strtod_l+0x37a>
 800a8c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 800aafc <_strtod_l+0x5ac>
 800a8ce:	f04f 0a00 	mov.w	sl, #0
 800a8d2:	e681      	b.n	800a5d8 <_strtod_l+0x88>
 800a8d4:	4886      	ldr	r0, [pc, #536]	; (800aaf0 <_strtod_l+0x5a0>)
 800a8d6:	f003 f917 	bl	800db08 <nan>
 800a8da:	ec5b ab10 	vmov	sl, fp, d0
 800a8de:	e67b      	b.n	800a5d8 <_strtod_l+0x88>
 800a8e0:	9b05      	ldr	r3, [sp, #20]
 800a8e2:	9807      	ldr	r0, [sp, #28]
 800a8e4:	1af3      	subs	r3, r6, r3
 800a8e6:	2f00      	cmp	r7, #0
 800a8e8:	bf08      	it	eq
 800a8ea:	462f      	moveq	r7, r5
 800a8ec:	2d10      	cmp	r5, #16
 800a8ee:	9306      	str	r3, [sp, #24]
 800a8f0:	46a8      	mov	r8, r5
 800a8f2:	bfa8      	it	ge
 800a8f4:	f04f 0810 	movge.w	r8, #16
 800a8f8:	f7f5 fe04 	bl	8000504 <__aeabi_ui2d>
 800a8fc:	2d09      	cmp	r5, #9
 800a8fe:	4682      	mov	sl, r0
 800a900:	468b      	mov	fp, r1
 800a902:	dd13      	ble.n	800a92c <_strtod_l+0x3dc>
 800a904:	4b7b      	ldr	r3, [pc, #492]	; (800aaf4 <_strtod_l+0x5a4>)
 800a906:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a90a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a90e:	f7f5 fe73 	bl	80005f8 <__aeabi_dmul>
 800a912:	4682      	mov	sl, r0
 800a914:	4648      	mov	r0, r9
 800a916:	468b      	mov	fp, r1
 800a918:	f7f5 fdf4 	bl	8000504 <__aeabi_ui2d>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4650      	mov	r0, sl
 800a922:	4659      	mov	r1, fp
 800a924:	f7f5 fcb2 	bl	800028c <__adddf3>
 800a928:	4682      	mov	sl, r0
 800a92a:	468b      	mov	fp, r1
 800a92c:	2d0f      	cmp	r5, #15
 800a92e:	dc38      	bgt.n	800a9a2 <_strtod_l+0x452>
 800a930:	9b06      	ldr	r3, [sp, #24]
 800a932:	2b00      	cmp	r3, #0
 800a934:	f43f ae50 	beq.w	800a5d8 <_strtod_l+0x88>
 800a938:	dd24      	ble.n	800a984 <_strtod_l+0x434>
 800a93a:	2b16      	cmp	r3, #22
 800a93c:	dc0b      	bgt.n	800a956 <_strtod_l+0x406>
 800a93e:	496d      	ldr	r1, [pc, #436]	; (800aaf4 <_strtod_l+0x5a4>)
 800a940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a944:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a948:	4652      	mov	r2, sl
 800a94a:	465b      	mov	r3, fp
 800a94c:	f7f5 fe54 	bl	80005f8 <__aeabi_dmul>
 800a950:	4682      	mov	sl, r0
 800a952:	468b      	mov	fp, r1
 800a954:	e640      	b.n	800a5d8 <_strtod_l+0x88>
 800a956:	9a06      	ldr	r2, [sp, #24]
 800a958:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a95c:	4293      	cmp	r3, r2
 800a95e:	db20      	blt.n	800a9a2 <_strtod_l+0x452>
 800a960:	4c64      	ldr	r4, [pc, #400]	; (800aaf4 <_strtod_l+0x5a4>)
 800a962:	f1c5 050f 	rsb	r5, r5, #15
 800a966:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a96a:	4652      	mov	r2, sl
 800a96c:	465b      	mov	r3, fp
 800a96e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a972:	f7f5 fe41 	bl	80005f8 <__aeabi_dmul>
 800a976:	9b06      	ldr	r3, [sp, #24]
 800a978:	1b5d      	subs	r5, r3, r5
 800a97a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a97e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a982:	e7e3      	b.n	800a94c <_strtod_l+0x3fc>
 800a984:	9b06      	ldr	r3, [sp, #24]
 800a986:	3316      	adds	r3, #22
 800a988:	db0b      	blt.n	800a9a2 <_strtod_l+0x452>
 800a98a:	9b05      	ldr	r3, [sp, #20]
 800a98c:	1b9e      	subs	r6, r3, r6
 800a98e:	4b59      	ldr	r3, [pc, #356]	; (800aaf4 <_strtod_l+0x5a4>)
 800a990:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a994:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a998:	4650      	mov	r0, sl
 800a99a:	4659      	mov	r1, fp
 800a99c:	f7f5 ff56 	bl	800084c <__aeabi_ddiv>
 800a9a0:	e7d6      	b.n	800a950 <_strtod_l+0x400>
 800a9a2:	9b06      	ldr	r3, [sp, #24]
 800a9a4:	eba5 0808 	sub.w	r8, r5, r8
 800a9a8:	4498      	add	r8, r3
 800a9aa:	f1b8 0f00 	cmp.w	r8, #0
 800a9ae:	dd74      	ble.n	800aa9a <_strtod_l+0x54a>
 800a9b0:	f018 030f 	ands.w	r3, r8, #15
 800a9b4:	d00a      	beq.n	800a9cc <_strtod_l+0x47c>
 800a9b6:	494f      	ldr	r1, [pc, #316]	; (800aaf4 <_strtod_l+0x5a4>)
 800a9b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a9bc:	4652      	mov	r2, sl
 800a9be:	465b      	mov	r3, fp
 800a9c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9c4:	f7f5 fe18 	bl	80005f8 <__aeabi_dmul>
 800a9c8:	4682      	mov	sl, r0
 800a9ca:	468b      	mov	fp, r1
 800a9cc:	f038 080f 	bics.w	r8, r8, #15
 800a9d0:	d04f      	beq.n	800aa72 <_strtod_l+0x522>
 800a9d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a9d6:	dd22      	ble.n	800aa1e <_strtod_l+0x4ce>
 800a9d8:	2500      	movs	r5, #0
 800a9da:	462e      	mov	r6, r5
 800a9dc:	9507      	str	r5, [sp, #28]
 800a9de:	9505      	str	r5, [sp, #20]
 800a9e0:	2322      	movs	r3, #34	; 0x22
 800a9e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800aafc <_strtod_l+0x5ac>
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	f04f 0a00 	mov.w	sl, #0
 800a9ec:	9b07      	ldr	r3, [sp, #28]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f43f adf2 	beq.w	800a5d8 <_strtod_l+0x88>
 800a9f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f002 f8da 	bl	800cbb0 <_Bfree>
 800a9fc:	9905      	ldr	r1, [sp, #20]
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f002 f8d6 	bl	800cbb0 <_Bfree>
 800aa04:	4631      	mov	r1, r6
 800aa06:	4620      	mov	r0, r4
 800aa08:	f002 f8d2 	bl	800cbb0 <_Bfree>
 800aa0c:	9907      	ldr	r1, [sp, #28]
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f002 f8ce 	bl	800cbb0 <_Bfree>
 800aa14:	4629      	mov	r1, r5
 800aa16:	4620      	mov	r0, r4
 800aa18:	f002 f8ca 	bl	800cbb0 <_Bfree>
 800aa1c:	e5dc      	b.n	800a5d8 <_strtod_l+0x88>
 800aa1e:	4b36      	ldr	r3, [pc, #216]	; (800aaf8 <_strtod_l+0x5a8>)
 800aa20:	9304      	str	r3, [sp, #16]
 800aa22:	2300      	movs	r3, #0
 800aa24:	ea4f 1828 	mov.w	r8, r8, asr #4
 800aa28:	4650      	mov	r0, sl
 800aa2a:	4659      	mov	r1, fp
 800aa2c:	4699      	mov	r9, r3
 800aa2e:	f1b8 0f01 	cmp.w	r8, #1
 800aa32:	dc21      	bgt.n	800aa78 <_strtod_l+0x528>
 800aa34:	b10b      	cbz	r3, 800aa3a <_strtod_l+0x4ea>
 800aa36:	4682      	mov	sl, r0
 800aa38:	468b      	mov	fp, r1
 800aa3a:	4b2f      	ldr	r3, [pc, #188]	; (800aaf8 <_strtod_l+0x5a8>)
 800aa3c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800aa40:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800aa44:	4652      	mov	r2, sl
 800aa46:	465b      	mov	r3, fp
 800aa48:	e9d9 0100 	ldrd	r0, r1, [r9]
 800aa4c:	f7f5 fdd4 	bl	80005f8 <__aeabi_dmul>
 800aa50:	4b2a      	ldr	r3, [pc, #168]	; (800aafc <_strtod_l+0x5ac>)
 800aa52:	460a      	mov	r2, r1
 800aa54:	400b      	ands	r3, r1
 800aa56:	492a      	ldr	r1, [pc, #168]	; (800ab00 <_strtod_l+0x5b0>)
 800aa58:	428b      	cmp	r3, r1
 800aa5a:	4682      	mov	sl, r0
 800aa5c:	d8bc      	bhi.n	800a9d8 <_strtod_l+0x488>
 800aa5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aa62:	428b      	cmp	r3, r1
 800aa64:	bf86      	itte	hi
 800aa66:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ab04 <_strtod_l+0x5b4>
 800aa6a:	f04f 3aff 	movhi.w	sl, #4294967295
 800aa6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800aa72:	2300      	movs	r3, #0
 800aa74:	9304      	str	r3, [sp, #16]
 800aa76:	e084      	b.n	800ab82 <_strtod_l+0x632>
 800aa78:	f018 0f01 	tst.w	r8, #1
 800aa7c:	d005      	beq.n	800aa8a <_strtod_l+0x53a>
 800aa7e:	9b04      	ldr	r3, [sp, #16]
 800aa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa84:	f7f5 fdb8 	bl	80005f8 <__aeabi_dmul>
 800aa88:	2301      	movs	r3, #1
 800aa8a:	9a04      	ldr	r2, [sp, #16]
 800aa8c:	3208      	adds	r2, #8
 800aa8e:	f109 0901 	add.w	r9, r9, #1
 800aa92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa96:	9204      	str	r2, [sp, #16]
 800aa98:	e7c9      	b.n	800aa2e <_strtod_l+0x4de>
 800aa9a:	d0ea      	beq.n	800aa72 <_strtod_l+0x522>
 800aa9c:	f1c8 0800 	rsb	r8, r8, #0
 800aaa0:	f018 020f 	ands.w	r2, r8, #15
 800aaa4:	d00a      	beq.n	800aabc <_strtod_l+0x56c>
 800aaa6:	4b13      	ldr	r3, [pc, #76]	; (800aaf4 <_strtod_l+0x5a4>)
 800aaa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaac:	4650      	mov	r0, sl
 800aaae:	4659      	mov	r1, fp
 800aab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab4:	f7f5 feca 	bl	800084c <__aeabi_ddiv>
 800aab8:	4682      	mov	sl, r0
 800aaba:	468b      	mov	fp, r1
 800aabc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aac0:	d0d7      	beq.n	800aa72 <_strtod_l+0x522>
 800aac2:	f1b8 0f1f 	cmp.w	r8, #31
 800aac6:	dd1f      	ble.n	800ab08 <_strtod_l+0x5b8>
 800aac8:	2500      	movs	r5, #0
 800aaca:	462e      	mov	r6, r5
 800aacc:	9507      	str	r5, [sp, #28]
 800aace:	9505      	str	r5, [sp, #20]
 800aad0:	2322      	movs	r3, #34	; 0x22
 800aad2:	f04f 0a00 	mov.w	sl, #0
 800aad6:	f04f 0b00 	mov.w	fp, #0
 800aada:	6023      	str	r3, [r4, #0]
 800aadc:	e786      	b.n	800a9ec <_strtod_l+0x49c>
 800aade:	bf00      	nop
 800aae0:	0800de59 	.word	0x0800de59
 800aae4:	0800de9c 	.word	0x0800de9c
 800aae8:	0800de51 	.word	0x0800de51
 800aaec:	0800e018 	.word	0x0800e018
 800aaf0:	0800df13 	.word	0x0800df13
 800aaf4:	0800e1a8 	.word	0x0800e1a8
 800aaf8:	0800e180 	.word	0x0800e180
 800aafc:	7ff00000 	.word	0x7ff00000
 800ab00:	7ca00000 	.word	0x7ca00000
 800ab04:	7fefffff 	.word	0x7fefffff
 800ab08:	f018 0310 	ands.w	r3, r8, #16
 800ab0c:	bf18      	it	ne
 800ab0e:	236a      	movne	r3, #106	; 0x6a
 800ab10:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800aec0 <_strtod_l+0x970>
 800ab14:	9304      	str	r3, [sp, #16]
 800ab16:	4650      	mov	r0, sl
 800ab18:	4659      	mov	r1, fp
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	f018 0f01 	tst.w	r8, #1
 800ab20:	d004      	beq.n	800ab2c <_strtod_l+0x5dc>
 800ab22:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab26:	f7f5 fd67 	bl	80005f8 <__aeabi_dmul>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ab30:	f109 0908 	add.w	r9, r9, #8
 800ab34:	d1f2      	bne.n	800ab1c <_strtod_l+0x5cc>
 800ab36:	b10b      	cbz	r3, 800ab3c <_strtod_l+0x5ec>
 800ab38:	4682      	mov	sl, r0
 800ab3a:	468b      	mov	fp, r1
 800ab3c:	9b04      	ldr	r3, [sp, #16]
 800ab3e:	b1c3      	cbz	r3, 800ab72 <_strtod_l+0x622>
 800ab40:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ab44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	4659      	mov	r1, fp
 800ab4c:	dd11      	ble.n	800ab72 <_strtod_l+0x622>
 800ab4e:	2b1f      	cmp	r3, #31
 800ab50:	f340 8124 	ble.w	800ad9c <_strtod_l+0x84c>
 800ab54:	2b34      	cmp	r3, #52	; 0x34
 800ab56:	bfde      	ittt	le
 800ab58:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ab5c:	f04f 33ff 	movle.w	r3, #4294967295
 800ab60:	fa03 f202 	lslle.w	r2, r3, r2
 800ab64:	f04f 0a00 	mov.w	sl, #0
 800ab68:	bfcc      	ite	gt
 800ab6a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ab6e:	ea02 0b01 	andle.w	fp, r2, r1
 800ab72:	2200      	movs	r2, #0
 800ab74:	2300      	movs	r3, #0
 800ab76:	4650      	mov	r0, sl
 800ab78:	4659      	mov	r1, fp
 800ab7a:	f7f5 ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d1a2      	bne.n	800aac8 <_strtod_l+0x578>
 800ab82:	9b07      	ldr	r3, [sp, #28]
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	9908      	ldr	r1, [sp, #32]
 800ab88:	462b      	mov	r3, r5
 800ab8a:	463a      	mov	r2, r7
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f002 f877 	bl	800cc80 <__s2b>
 800ab92:	9007      	str	r0, [sp, #28]
 800ab94:	2800      	cmp	r0, #0
 800ab96:	f43f af1f 	beq.w	800a9d8 <_strtod_l+0x488>
 800ab9a:	9b05      	ldr	r3, [sp, #20]
 800ab9c:	1b9e      	subs	r6, r3, r6
 800ab9e:	9b06      	ldr	r3, [sp, #24]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	bfb4      	ite	lt
 800aba4:	4633      	movlt	r3, r6
 800aba6:	2300      	movge	r3, #0
 800aba8:	930c      	str	r3, [sp, #48]	; 0x30
 800abaa:	9b06      	ldr	r3, [sp, #24]
 800abac:	2500      	movs	r5, #0
 800abae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800abb2:	9312      	str	r3, [sp, #72]	; 0x48
 800abb4:	462e      	mov	r6, r5
 800abb6:	9b07      	ldr	r3, [sp, #28]
 800abb8:	4620      	mov	r0, r4
 800abba:	6859      	ldr	r1, [r3, #4]
 800abbc:	f001 ffb8 	bl	800cb30 <_Balloc>
 800abc0:	9005      	str	r0, [sp, #20]
 800abc2:	2800      	cmp	r0, #0
 800abc4:	f43f af0c 	beq.w	800a9e0 <_strtod_l+0x490>
 800abc8:	9b07      	ldr	r3, [sp, #28]
 800abca:	691a      	ldr	r2, [r3, #16]
 800abcc:	3202      	adds	r2, #2
 800abce:	f103 010c 	add.w	r1, r3, #12
 800abd2:	0092      	lsls	r2, r2, #2
 800abd4:	300c      	adds	r0, #12
 800abd6:	f7fe fc94 	bl	8009502 <memcpy>
 800abda:	ec4b ab10 	vmov	d0, sl, fp
 800abde:	aa1a      	add	r2, sp, #104	; 0x68
 800abe0:	a919      	add	r1, sp, #100	; 0x64
 800abe2:	4620      	mov	r0, r4
 800abe4:	f002 fb92 	bl	800d30c <__d2b>
 800abe8:	ec4b ab18 	vmov	d8, sl, fp
 800abec:	9018      	str	r0, [sp, #96]	; 0x60
 800abee:	2800      	cmp	r0, #0
 800abf0:	f43f aef6 	beq.w	800a9e0 <_strtod_l+0x490>
 800abf4:	2101      	movs	r1, #1
 800abf6:	4620      	mov	r0, r4
 800abf8:	f002 f8dc 	bl	800cdb4 <__i2b>
 800abfc:	4606      	mov	r6, r0
 800abfe:	2800      	cmp	r0, #0
 800ac00:	f43f aeee 	beq.w	800a9e0 <_strtod_l+0x490>
 800ac04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac06:	9904      	ldr	r1, [sp, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	bfab      	itete	ge
 800ac0c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ac0e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ac10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ac12:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ac16:	bfac      	ite	ge
 800ac18:	eb03 0902 	addge.w	r9, r3, r2
 800ac1c:	1ad7      	sublt	r7, r2, r3
 800ac1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ac20:	eba3 0801 	sub.w	r8, r3, r1
 800ac24:	4490      	add	r8, r2
 800ac26:	4ba1      	ldr	r3, [pc, #644]	; (800aeac <_strtod_l+0x95c>)
 800ac28:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac2c:	4598      	cmp	r8, r3
 800ac2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ac32:	f280 80c7 	bge.w	800adc4 <_strtod_l+0x874>
 800ac36:	eba3 0308 	sub.w	r3, r3, r8
 800ac3a:	2b1f      	cmp	r3, #31
 800ac3c:	eba2 0203 	sub.w	r2, r2, r3
 800ac40:	f04f 0101 	mov.w	r1, #1
 800ac44:	f300 80b1 	bgt.w	800adaa <_strtod_l+0x85a>
 800ac48:	fa01 f303 	lsl.w	r3, r1, r3
 800ac4c:	930d      	str	r3, [sp, #52]	; 0x34
 800ac4e:	2300      	movs	r3, #0
 800ac50:	9308      	str	r3, [sp, #32]
 800ac52:	eb09 0802 	add.w	r8, r9, r2
 800ac56:	9b04      	ldr	r3, [sp, #16]
 800ac58:	45c1      	cmp	r9, r8
 800ac5a:	4417      	add	r7, r2
 800ac5c:	441f      	add	r7, r3
 800ac5e:	464b      	mov	r3, r9
 800ac60:	bfa8      	it	ge
 800ac62:	4643      	movge	r3, r8
 800ac64:	42bb      	cmp	r3, r7
 800ac66:	bfa8      	it	ge
 800ac68:	463b      	movge	r3, r7
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	bfc2      	ittt	gt
 800ac6e:	eba8 0803 	subgt.w	r8, r8, r3
 800ac72:	1aff      	subgt	r7, r7, r3
 800ac74:	eba9 0903 	subgt.w	r9, r9, r3
 800ac78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	dd17      	ble.n	800acae <_strtod_l+0x75e>
 800ac7e:	4631      	mov	r1, r6
 800ac80:	461a      	mov	r2, r3
 800ac82:	4620      	mov	r0, r4
 800ac84:	f002 f956 	bl	800cf34 <__pow5mult>
 800ac88:	4606      	mov	r6, r0
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	f43f aea8 	beq.w	800a9e0 <_strtod_l+0x490>
 800ac90:	4601      	mov	r1, r0
 800ac92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac94:	4620      	mov	r0, r4
 800ac96:	f002 f8a3 	bl	800cde0 <__multiply>
 800ac9a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	f43f ae9f 	beq.w	800a9e0 <_strtod_l+0x490>
 800aca2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aca4:	4620      	mov	r0, r4
 800aca6:	f001 ff83 	bl	800cbb0 <_Bfree>
 800acaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acac:	9318      	str	r3, [sp, #96]	; 0x60
 800acae:	f1b8 0f00 	cmp.w	r8, #0
 800acb2:	f300 808c 	bgt.w	800adce <_strtod_l+0x87e>
 800acb6:	9b06      	ldr	r3, [sp, #24]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	dd08      	ble.n	800acce <_strtod_l+0x77e>
 800acbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800acbe:	9905      	ldr	r1, [sp, #20]
 800acc0:	4620      	mov	r0, r4
 800acc2:	f002 f937 	bl	800cf34 <__pow5mult>
 800acc6:	9005      	str	r0, [sp, #20]
 800acc8:	2800      	cmp	r0, #0
 800acca:	f43f ae89 	beq.w	800a9e0 <_strtod_l+0x490>
 800acce:	2f00      	cmp	r7, #0
 800acd0:	dd08      	ble.n	800ace4 <_strtod_l+0x794>
 800acd2:	9905      	ldr	r1, [sp, #20]
 800acd4:	463a      	mov	r2, r7
 800acd6:	4620      	mov	r0, r4
 800acd8:	f002 f986 	bl	800cfe8 <__lshift>
 800acdc:	9005      	str	r0, [sp, #20]
 800acde:	2800      	cmp	r0, #0
 800ace0:	f43f ae7e 	beq.w	800a9e0 <_strtod_l+0x490>
 800ace4:	f1b9 0f00 	cmp.w	r9, #0
 800ace8:	dd08      	ble.n	800acfc <_strtod_l+0x7ac>
 800acea:	4631      	mov	r1, r6
 800acec:	464a      	mov	r2, r9
 800acee:	4620      	mov	r0, r4
 800acf0:	f002 f97a 	bl	800cfe8 <__lshift>
 800acf4:	4606      	mov	r6, r0
 800acf6:	2800      	cmp	r0, #0
 800acf8:	f43f ae72 	beq.w	800a9e0 <_strtod_l+0x490>
 800acfc:	9a05      	ldr	r2, [sp, #20]
 800acfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad00:	4620      	mov	r0, r4
 800ad02:	f002 f9fd 	bl	800d100 <__mdiff>
 800ad06:	4605      	mov	r5, r0
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	f43f ae69 	beq.w	800a9e0 <_strtod_l+0x490>
 800ad0e:	68c3      	ldr	r3, [r0, #12]
 800ad10:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad12:	2300      	movs	r3, #0
 800ad14:	60c3      	str	r3, [r0, #12]
 800ad16:	4631      	mov	r1, r6
 800ad18:	f002 f9d6 	bl	800d0c8 <__mcmp>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	da60      	bge.n	800ade2 <_strtod_l+0x892>
 800ad20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad22:	ea53 030a 	orrs.w	r3, r3, sl
 800ad26:	f040 8082 	bne.w	800ae2e <_strtod_l+0x8de>
 800ad2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d17d      	bne.n	800ae2e <_strtod_l+0x8de>
 800ad32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad36:	0d1b      	lsrs	r3, r3, #20
 800ad38:	051b      	lsls	r3, r3, #20
 800ad3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ad3e:	d976      	bls.n	800ae2e <_strtod_l+0x8de>
 800ad40:	696b      	ldr	r3, [r5, #20]
 800ad42:	b913      	cbnz	r3, 800ad4a <_strtod_l+0x7fa>
 800ad44:	692b      	ldr	r3, [r5, #16]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	dd71      	ble.n	800ae2e <_strtod_l+0x8de>
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f002 f94a 	bl	800cfe8 <__lshift>
 800ad54:	4631      	mov	r1, r6
 800ad56:	4605      	mov	r5, r0
 800ad58:	f002 f9b6 	bl	800d0c8 <__mcmp>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	dd66      	ble.n	800ae2e <_strtod_l+0x8de>
 800ad60:	9904      	ldr	r1, [sp, #16]
 800ad62:	4a53      	ldr	r2, [pc, #332]	; (800aeb0 <_strtod_l+0x960>)
 800ad64:	465b      	mov	r3, fp
 800ad66:	2900      	cmp	r1, #0
 800ad68:	f000 8081 	beq.w	800ae6e <_strtod_l+0x91e>
 800ad6c:	ea02 010b 	and.w	r1, r2, fp
 800ad70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ad74:	dc7b      	bgt.n	800ae6e <_strtod_l+0x91e>
 800ad76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad7a:	f77f aea9 	ble.w	800aad0 <_strtod_l+0x580>
 800ad7e:	4b4d      	ldr	r3, [pc, #308]	; (800aeb4 <_strtod_l+0x964>)
 800ad80:	4650      	mov	r0, sl
 800ad82:	4659      	mov	r1, fp
 800ad84:	2200      	movs	r2, #0
 800ad86:	f7f5 fc37 	bl	80005f8 <__aeabi_dmul>
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4303      	orrs	r3, r0
 800ad8e:	bf08      	it	eq
 800ad90:	2322      	moveq	r3, #34	; 0x22
 800ad92:	4682      	mov	sl, r0
 800ad94:	468b      	mov	fp, r1
 800ad96:	bf08      	it	eq
 800ad98:	6023      	streq	r3, [r4, #0]
 800ad9a:	e62b      	b.n	800a9f4 <_strtod_l+0x4a4>
 800ad9c:	f04f 32ff 	mov.w	r2, #4294967295
 800ada0:	fa02 f303 	lsl.w	r3, r2, r3
 800ada4:	ea03 0a0a 	and.w	sl, r3, sl
 800ada8:	e6e3      	b.n	800ab72 <_strtod_l+0x622>
 800adaa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800adae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800adb2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800adb6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800adba:	fa01 f308 	lsl.w	r3, r1, r8
 800adbe:	9308      	str	r3, [sp, #32]
 800adc0:	910d      	str	r1, [sp, #52]	; 0x34
 800adc2:	e746      	b.n	800ac52 <_strtod_l+0x702>
 800adc4:	2300      	movs	r3, #0
 800adc6:	9308      	str	r3, [sp, #32]
 800adc8:	2301      	movs	r3, #1
 800adca:	930d      	str	r3, [sp, #52]	; 0x34
 800adcc:	e741      	b.n	800ac52 <_strtod_l+0x702>
 800adce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800add0:	4642      	mov	r2, r8
 800add2:	4620      	mov	r0, r4
 800add4:	f002 f908 	bl	800cfe8 <__lshift>
 800add8:	9018      	str	r0, [sp, #96]	; 0x60
 800adda:	2800      	cmp	r0, #0
 800addc:	f47f af6b 	bne.w	800acb6 <_strtod_l+0x766>
 800ade0:	e5fe      	b.n	800a9e0 <_strtod_l+0x490>
 800ade2:	465f      	mov	r7, fp
 800ade4:	d16e      	bne.n	800aec4 <_strtod_l+0x974>
 800ade6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ade8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800adec:	b342      	cbz	r2, 800ae40 <_strtod_l+0x8f0>
 800adee:	4a32      	ldr	r2, [pc, #200]	; (800aeb8 <_strtod_l+0x968>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d128      	bne.n	800ae46 <_strtod_l+0x8f6>
 800adf4:	9b04      	ldr	r3, [sp, #16]
 800adf6:	4651      	mov	r1, sl
 800adf8:	b1eb      	cbz	r3, 800ae36 <_strtod_l+0x8e6>
 800adfa:	4b2d      	ldr	r3, [pc, #180]	; (800aeb0 <_strtod_l+0x960>)
 800adfc:	403b      	ands	r3, r7
 800adfe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae02:	f04f 32ff 	mov.w	r2, #4294967295
 800ae06:	d819      	bhi.n	800ae3c <_strtod_l+0x8ec>
 800ae08:	0d1b      	lsrs	r3, r3, #20
 800ae0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae12:	4299      	cmp	r1, r3
 800ae14:	d117      	bne.n	800ae46 <_strtod_l+0x8f6>
 800ae16:	4b29      	ldr	r3, [pc, #164]	; (800aebc <_strtod_l+0x96c>)
 800ae18:	429f      	cmp	r7, r3
 800ae1a:	d102      	bne.n	800ae22 <_strtod_l+0x8d2>
 800ae1c:	3101      	adds	r1, #1
 800ae1e:	f43f addf 	beq.w	800a9e0 <_strtod_l+0x490>
 800ae22:	4b23      	ldr	r3, [pc, #140]	; (800aeb0 <_strtod_l+0x960>)
 800ae24:	403b      	ands	r3, r7
 800ae26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ae2a:	f04f 0a00 	mov.w	sl, #0
 800ae2e:	9b04      	ldr	r3, [sp, #16]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1a4      	bne.n	800ad7e <_strtod_l+0x82e>
 800ae34:	e5de      	b.n	800a9f4 <_strtod_l+0x4a4>
 800ae36:	f04f 33ff 	mov.w	r3, #4294967295
 800ae3a:	e7ea      	b.n	800ae12 <_strtod_l+0x8c2>
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	e7e8      	b.n	800ae12 <_strtod_l+0x8c2>
 800ae40:	ea53 030a 	orrs.w	r3, r3, sl
 800ae44:	d08c      	beq.n	800ad60 <_strtod_l+0x810>
 800ae46:	9b08      	ldr	r3, [sp, #32]
 800ae48:	b1db      	cbz	r3, 800ae82 <_strtod_l+0x932>
 800ae4a:	423b      	tst	r3, r7
 800ae4c:	d0ef      	beq.n	800ae2e <_strtod_l+0x8de>
 800ae4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae50:	9a04      	ldr	r2, [sp, #16]
 800ae52:	4650      	mov	r0, sl
 800ae54:	4659      	mov	r1, fp
 800ae56:	b1c3      	cbz	r3, 800ae8a <_strtod_l+0x93a>
 800ae58:	f7ff fb5b 	bl	800a512 <sulp>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	460b      	mov	r3, r1
 800ae60:	ec51 0b18 	vmov	r0, r1, d8
 800ae64:	f7f5 fa12 	bl	800028c <__adddf3>
 800ae68:	4682      	mov	sl, r0
 800ae6a:	468b      	mov	fp, r1
 800ae6c:	e7df      	b.n	800ae2e <_strtod_l+0x8de>
 800ae6e:	4013      	ands	r3, r2
 800ae70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ae78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ae7c:	f04f 3aff 	mov.w	sl, #4294967295
 800ae80:	e7d5      	b.n	800ae2e <_strtod_l+0x8de>
 800ae82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae84:	ea13 0f0a 	tst.w	r3, sl
 800ae88:	e7e0      	b.n	800ae4c <_strtod_l+0x8fc>
 800ae8a:	f7ff fb42 	bl	800a512 <sulp>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	ec51 0b18 	vmov	r0, r1, d8
 800ae96:	f7f5 f9f7 	bl	8000288 <__aeabi_dsub>
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4682      	mov	sl, r0
 800aea0:	468b      	mov	fp, r1
 800aea2:	f7f5 fe11 	bl	8000ac8 <__aeabi_dcmpeq>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d0c1      	beq.n	800ae2e <_strtod_l+0x8de>
 800aeaa:	e611      	b.n	800aad0 <_strtod_l+0x580>
 800aeac:	fffffc02 	.word	0xfffffc02
 800aeb0:	7ff00000 	.word	0x7ff00000
 800aeb4:	39500000 	.word	0x39500000
 800aeb8:	000fffff 	.word	0x000fffff
 800aebc:	7fefffff 	.word	0x7fefffff
 800aec0:	0800deb0 	.word	0x0800deb0
 800aec4:	4631      	mov	r1, r6
 800aec6:	4628      	mov	r0, r5
 800aec8:	f002 fa7c 	bl	800d3c4 <__ratio>
 800aecc:	ec59 8b10 	vmov	r8, r9, d0
 800aed0:	ee10 0a10 	vmov	r0, s0
 800aed4:	2200      	movs	r2, #0
 800aed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aeda:	4649      	mov	r1, r9
 800aedc:	f7f5 fe08 	bl	8000af0 <__aeabi_dcmple>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d07a      	beq.n	800afda <_strtod_l+0xa8a>
 800aee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d04a      	beq.n	800af80 <_strtod_l+0xa30>
 800aeea:	4b95      	ldr	r3, [pc, #596]	; (800b140 <_strtod_l+0xbf0>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aef2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b140 <_strtod_l+0xbf0>
 800aef6:	f04f 0800 	mov.w	r8, #0
 800aefa:	4b92      	ldr	r3, [pc, #584]	; (800b144 <_strtod_l+0xbf4>)
 800aefc:	403b      	ands	r3, r7
 800aefe:	930d      	str	r3, [sp, #52]	; 0x34
 800af00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af02:	4b91      	ldr	r3, [pc, #580]	; (800b148 <_strtod_l+0xbf8>)
 800af04:	429a      	cmp	r2, r3
 800af06:	f040 80b0 	bne.w	800b06a <_strtod_l+0xb1a>
 800af0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800af12:	ec4b ab10 	vmov	d0, sl, fp
 800af16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af1a:	f002 f97b 	bl	800d214 <__ulp>
 800af1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af22:	ec53 2b10 	vmov	r2, r3, d0
 800af26:	f7f5 fb67 	bl	80005f8 <__aeabi_dmul>
 800af2a:	4652      	mov	r2, sl
 800af2c:	465b      	mov	r3, fp
 800af2e:	f7f5 f9ad 	bl	800028c <__adddf3>
 800af32:	460b      	mov	r3, r1
 800af34:	4983      	ldr	r1, [pc, #524]	; (800b144 <_strtod_l+0xbf4>)
 800af36:	4a85      	ldr	r2, [pc, #532]	; (800b14c <_strtod_l+0xbfc>)
 800af38:	4019      	ands	r1, r3
 800af3a:	4291      	cmp	r1, r2
 800af3c:	4682      	mov	sl, r0
 800af3e:	d960      	bls.n	800b002 <_strtod_l+0xab2>
 800af40:	ee18 3a90 	vmov	r3, s17
 800af44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800af48:	4293      	cmp	r3, r2
 800af4a:	d104      	bne.n	800af56 <_strtod_l+0xa06>
 800af4c:	ee18 3a10 	vmov	r3, s16
 800af50:	3301      	adds	r3, #1
 800af52:	f43f ad45 	beq.w	800a9e0 <_strtod_l+0x490>
 800af56:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b158 <_strtod_l+0xc08>
 800af5a:	f04f 3aff 	mov.w	sl, #4294967295
 800af5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af60:	4620      	mov	r0, r4
 800af62:	f001 fe25 	bl	800cbb0 <_Bfree>
 800af66:	9905      	ldr	r1, [sp, #20]
 800af68:	4620      	mov	r0, r4
 800af6a:	f001 fe21 	bl	800cbb0 <_Bfree>
 800af6e:	4631      	mov	r1, r6
 800af70:	4620      	mov	r0, r4
 800af72:	f001 fe1d 	bl	800cbb0 <_Bfree>
 800af76:	4629      	mov	r1, r5
 800af78:	4620      	mov	r0, r4
 800af7a:	f001 fe19 	bl	800cbb0 <_Bfree>
 800af7e:	e61a      	b.n	800abb6 <_strtod_l+0x666>
 800af80:	f1ba 0f00 	cmp.w	sl, #0
 800af84:	d11b      	bne.n	800afbe <_strtod_l+0xa6e>
 800af86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af8a:	b9f3      	cbnz	r3, 800afca <_strtod_l+0xa7a>
 800af8c:	4b6c      	ldr	r3, [pc, #432]	; (800b140 <_strtod_l+0xbf0>)
 800af8e:	2200      	movs	r2, #0
 800af90:	4640      	mov	r0, r8
 800af92:	4649      	mov	r1, r9
 800af94:	f7f5 fda2 	bl	8000adc <__aeabi_dcmplt>
 800af98:	b9d0      	cbnz	r0, 800afd0 <_strtod_l+0xa80>
 800af9a:	4640      	mov	r0, r8
 800af9c:	4649      	mov	r1, r9
 800af9e:	4b6c      	ldr	r3, [pc, #432]	; (800b150 <_strtod_l+0xc00>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	f7f5 fb29 	bl	80005f8 <__aeabi_dmul>
 800afa6:	4680      	mov	r8, r0
 800afa8:	4689      	mov	r9, r1
 800afaa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800afae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800afb2:	9315      	str	r3, [sp, #84]	; 0x54
 800afb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800afb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800afbc:	e79d      	b.n	800aefa <_strtod_l+0x9aa>
 800afbe:	f1ba 0f01 	cmp.w	sl, #1
 800afc2:	d102      	bne.n	800afca <_strtod_l+0xa7a>
 800afc4:	2f00      	cmp	r7, #0
 800afc6:	f43f ad83 	beq.w	800aad0 <_strtod_l+0x580>
 800afca:	4b62      	ldr	r3, [pc, #392]	; (800b154 <_strtod_l+0xc04>)
 800afcc:	2200      	movs	r2, #0
 800afce:	e78e      	b.n	800aeee <_strtod_l+0x99e>
 800afd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b150 <_strtod_l+0xc00>
 800afd4:	f04f 0800 	mov.w	r8, #0
 800afd8:	e7e7      	b.n	800afaa <_strtod_l+0xa5a>
 800afda:	4b5d      	ldr	r3, [pc, #372]	; (800b150 <_strtod_l+0xc00>)
 800afdc:	4640      	mov	r0, r8
 800afde:	4649      	mov	r1, r9
 800afe0:	2200      	movs	r2, #0
 800afe2:	f7f5 fb09 	bl	80005f8 <__aeabi_dmul>
 800afe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afe8:	4680      	mov	r8, r0
 800afea:	4689      	mov	r9, r1
 800afec:	b933      	cbnz	r3, 800affc <_strtod_l+0xaac>
 800afee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aff2:	900e      	str	r0, [sp, #56]	; 0x38
 800aff4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aff6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800affa:	e7dd      	b.n	800afb8 <_strtod_l+0xa68>
 800affc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b000:	e7f9      	b.n	800aff6 <_strtod_l+0xaa6>
 800b002:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b006:	9b04      	ldr	r3, [sp, #16]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1a8      	bne.n	800af5e <_strtod_l+0xa0e>
 800b00c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b012:	0d1b      	lsrs	r3, r3, #20
 800b014:	051b      	lsls	r3, r3, #20
 800b016:	429a      	cmp	r2, r3
 800b018:	d1a1      	bne.n	800af5e <_strtod_l+0xa0e>
 800b01a:	4640      	mov	r0, r8
 800b01c:	4649      	mov	r1, r9
 800b01e:	f7f5 fe4b 	bl	8000cb8 <__aeabi_d2lz>
 800b022:	f7f5 fabb 	bl	800059c <__aeabi_l2d>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	4640      	mov	r0, r8
 800b02c:	4649      	mov	r1, r9
 800b02e:	f7f5 f92b 	bl	8000288 <__aeabi_dsub>
 800b032:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b038:	ea43 030a 	orr.w	r3, r3, sl
 800b03c:	4313      	orrs	r3, r2
 800b03e:	4680      	mov	r8, r0
 800b040:	4689      	mov	r9, r1
 800b042:	d055      	beq.n	800b0f0 <_strtod_l+0xba0>
 800b044:	a336      	add	r3, pc, #216	; (adr r3, 800b120 <_strtod_l+0xbd0>)
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	f7f5 fd47 	bl	8000adc <__aeabi_dcmplt>
 800b04e:	2800      	cmp	r0, #0
 800b050:	f47f acd0 	bne.w	800a9f4 <_strtod_l+0x4a4>
 800b054:	a334      	add	r3, pc, #208	; (adr r3, 800b128 <_strtod_l+0xbd8>)
 800b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05a:	4640      	mov	r0, r8
 800b05c:	4649      	mov	r1, r9
 800b05e:	f7f5 fd5b 	bl	8000b18 <__aeabi_dcmpgt>
 800b062:	2800      	cmp	r0, #0
 800b064:	f43f af7b 	beq.w	800af5e <_strtod_l+0xa0e>
 800b068:	e4c4      	b.n	800a9f4 <_strtod_l+0x4a4>
 800b06a:	9b04      	ldr	r3, [sp, #16]
 800b06c:	b333      	cbz	r3, 800b0bc <_strtod_l+0xb6c>
 800b06e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b070:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b074:	d822      	bhi.n	800b0bc <_strtod_l+0xb6c>
 800b076:	a32e      	add	r3, pc, #184	; (adr r3, 800b130 <_strtod_l+0xbe0>)
 800b078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07c:	4640      	mov	r0, r8
 800b07e:	4649      	mov	r1, r9
 800b080:	f7f5 fd36 	bl	8000af0 <__aeabi_dcmple>
 800b084:	b1a0      	cbz	r0, 800b0b0 <_strtod_l+0xb60>
 800b086:	4649      	mov	r1, r9
 800b088:	4640      	mov	r0, r8
 800b08a:	f7f5 fd8d 	bl	8000ba8 <__aeabi_d2uiz>
 800b08e:	2801      	cmp	r0, #1
 800b090:	bf38      	it	cc
 800b092:	2001      	movcc	r0, #1
 800b094:	f7f5 fa36 	bl	8000504 <__aeabi_ui2d>
 800b098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b09a:	4680      	mov	r8, r0
 800b09c:	4689      	mov	r9, r1
 800b09e:	bb23      	cbnz	r3, 800b0ea <_strtod_l+0xb9a>
 800b0a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0a4:	9010      	str	r0, [sp, #64]	; 0x40
 800b0a6:	9311      	str	r3, [sp, #68]	; 0x44
 800b0a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b0b8:	1a9b      	subs	r3, r3, r2
 800b0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b0bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0c0:	eeb0 0a48 	vmov.f32	s0, s16
 800b0c4:	eef0 0a68 	vmov.f32	s1, s17
 800b0c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b0cc:	f002 f8a2 	bl	800d214 <__ulp>
 800b0d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0d4:	ec53 2b10 	vmov	r2, r3, d0
 800b0d8:	f7f5 fa8e 	bl	80005f8 <__aeabi_dmul>
 800b0dc:	ec53 2b18 	vmov	r2, r3, d8
 800b0e0:	f7f5 f8d4 	bl	800028c <__adddf3>
 800b0e4:	4682      	mov	sl, r0
 800b0e6:	468b      	mov	fp, r1
 800b0e8:	e78d      	b.n	800b006 <_strtod_l+0xab6>
 800b0ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b0ee:	e7db      	b.n	800b0a8 <_strtod_l+0xb58>
 800b0f0:	a311      	add	r3, pc, #68	; (adr r3, 800b138 <_strtod_l+0xbe8>)
 800b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f6:	f7f5 fcf1 	bl	8000adc <__aeabi_dcmplt>
 800b0fa:	e7b2      	b.n	800b062 <_strtod_l+0xb12>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	930a      	str	r3, [sp, #40]	; 0x28
 800b100:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b102:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	f7ff ba6b 	b.w	800a5e0 <_strtod_l+0x90>
 800b10a:	2a65      	cmp	r2, #101	; 0x65
 800b10c:	f43f ab5f 	beq.w	800a7ce <_strtod_l+0x27e>
 800b110:	2a45      	cmp	r2, #69	; 0x45
 800b112:	f43f ab5c 	beq.w	800a7ce <_strtod_l+0x27e>
 800b116:	2301      	movs	r3, #1
 800b118:	f7ff bb94 	b.w	800a844 <_strtod_l+0x2f4>
 800b11c:	f3af 8000 	nop.w
 800b120:	94a03595 	.word	0x94a03595
 800b124:	3fdfffff 	.word	0x3fdfffff
 800b128:	35afe535 	.word	0x35afe535
 800b12c:	3fe00000 	.word	0x3fe00000
 800b130:	ffc00000 	.word	0xffc00000
 800b134:	41dfffff 	.word	0x41dfffff
 800b138:	94a03595 	.word	0x94a03595
 800b13c:	3fcfffff 	.word	0x3fcfffff
 800b140:	3ff00000 	.word	0x3ff00000
 800b144:	7ff00000 	.word	0x7ff00000
 800b148:	7fe00000 	.word	0x7fe00000
 800b14c:	7c9fffff 	.word	0x7c9fffff
 800b150:	3fe00000 	.word	0x3fe00000
 800b154:	bff00000 	.word	0xbff00000
 800b158:	7fefffff 	.word	0x7fefffff

0800b15c <_strtod_r>:
 800b15c:	4b01      	ldr	r3, [pc, #4]	; (800b164 <_strtod_r+0x8>)
 800b15e:	f7ff b9f7 	b.w	800a550 <_strtod_l>
 800b162:	bf00      	nop
 800b164:	200000ac 	.word	0x200000ac

0800b168 <_strtol_l.constprop.0>:
 800b168:	2b01      	cmp	r3, #1
 800b16a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b16e:	d001      	beq.n	800b174 <_strtol_l.constprop.0+0xc>
 800b170:	2b24      	cmp	r3, #36	; 0x24
 800b172:	d906      	bls.n	800b182 <_strtol_l.constprop.0+0x1a>
 800b174:	f7fe f8a2 	bl	80092bc <__errno>
 800b178:	2316      	movs	r3, #22
 800b17a:	6003      	str	r3, [r0, #0]
 800b17c:	2000      	movs	r0, #0
 800b17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b182:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b268 <_strtol_l.constprop.0+0x100>
 800b186:	460d      	mov	r5, r1
 800b188:	462e      	mov	r6, r5
 800b18a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b18e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b192:	f017 0708 	ands.w	r7, r7, #8
 800b196:	d1f7      	bne.n	800b188 <_strtol_l.constprop.0+0x20>
 800b198:	2c2d      	cmp	r4, #45	; 0x2d
 800b19a:	d132      	bne.n	800b202 <_strtol_l.constprop.0+0x9a>
 800b19c:	782c      	ldrb	r4, [r5, #0]
 800b19e:	2701      	movs	r7, #1
 800b1a0:	1cb5      	adds	r5, r6, #2
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d05b      	beq.n	800b25e <_strtol_l.constprop.0+0xf6>
 800b1a6:	2b10      	cmp	r3, #16
 800b1a8:	d109      	bne.n	800b1be <_strtol_l.constprop.0+0x56>
 800b1aa:	2c30      	cmp	r4, #48	; 0x30
 800b1ac:	d107      	bne.n	800b1be <_strtol_l.constprop.0+0x56>
 800b1ae:	782c      	ldrb	r4, [r5, #0]
 800b1b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b1b4:	2c58      	cmp	r4, #88	; 0x58
 800b1b6:	d14d      	bne.n	800b254 <_strtol_l.constprop.0+0xec>
 800b1b8:	786c      	ldrb	r4, [r5, #1]
 800b1ba:	2310      	movs	r3, #16
 800b1bc:	3502      	adds	r5, #2
 800b1be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b1c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b1c6:	f04f 0c00 	mov.w	ip, #0
 800b1ca:	fbb8 f9f3 	udiv	r9, r8, r3
 800b1ce:	4666      	mov	r6, ip
 800b1d0:	fb03 8a19 	mls	sl, r3, r9, r8
 800b1d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b1d8:	f1be 0f09 	cmp.w	lr, #9
 800b1dc:	d816      	bhi.n	800b20c <_strtol_l.constprop.0+0xa4>
 800b1de:	4674      	mov	r4, lr
 800b1e0:	42a3      	cmp	r3, r4
 800b1e2:	dd24      	ble.n	800b22e <_strtol_l.constprop.0+0xc6>
 800b1e4:	f1bc 0f00 	cmp.w	ip, #0
 800b1e8:	db1e      	blt.n	800b228 <_strtol_l.constprop.0+0xc0>
 800b1ea:	45b1      	cmp	r9, r6
 800b1ec:	d31c      	bcc.n	800b228 <_strtol_l.constprop.0+0xc0>
 800b1ee:	d101      	bne.n	800b1f4 <_strtol_l.constprop.0+0x8c>
 800b1f0:	45a2      	cmp	sl, r4
 800b1f2:	db19      	blt.n	800b228 <_strtol_l.constprop.0+0xc0>
 800b1f4:	fb06 4603 	mla	r6, r6, r3, r4
 800b1f8:	f04f 0c01 	mov.w	ip, #1
 800b1fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b200:	e7e8      	b.n	800b1d4 <_strtol_l.constprop.0+0x6c>
 800b202:	2c2b      	cmp	r4, #43	; 0x2b
 800b204:	bf04      	itt	eq
 800b206:	782c      	ldrbeq	r4, [r5, #0]
 800b208:	1cb5      	addeq	r5, r6, #2
 800b20a:	e7ca      	b.n	800b1a2 <_strtol_l.constprop.0+0x3a>
 800b20c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b210:	f1be 0f19 	cmp.w	lr, #25
 800b214:	d801      	bhi.n	800b21a <_strtol_l.constprop.0+0xb2>
 800b216:	3c37      	subs	r4, #55	; 0x37
 800b218:	e7e2      	b.n	800b1e0 <_strtol_l.constprop.0+0x78>
 800b21a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b21e:	f1be 0f19 	cmp.w	lr, #25
 800b222:	d804      	bhi.n	800b22e <_strtol_l.constprop.0+0xc6>
 800b224:	3c57      	subs	r4, #87	; 0x57
 800b226:	e7db      	b.n	800b1e0 <_strtol_l.constprop.0+0x78>
 800b228:	f04f 3cff 	mov.w	ip, #4294967295
 800b22c:	e7e6      	b.n	800b1fc <_strtol_l.constprop.0+0x94>
 800b22e:	f1bc 0f00 	cmp.w	ip, #0
 800b232:	da05      	bge.n	800b240 <_strtol_l.constprop.0+0xd8>
 800b234:	2322      	movs	r3, #34	; 0x22
 800b236:	6003      	str	r3, [r0, #0]
 800b238:	4646      	mov	r6, r8
 800b23a:	b942      	cbnz	r2, 800b24e <_strtol_l.constprop.0+0xe6>
 800b23c:	4630      	mov	r0, r6
 800b23e:	e79e      	b.n	800b17e <_strtol_l.constprop.0+0x16>
 800b240:	b107      	cbz	r7, 800b244 <_strtol_l.constprop.0+0xdc>
 800b242:	4276      	negs	r6, r6
 800b244:	2a00      	cmp	r2, #0
 800b246:	d0f9      	beq.n	800b23c <_strtol_l.constprop.0+0xd4>
 800b248:	f1bc 0f00 	cmp.w	ip, #0
 800b24c:	d000      	beq.n	800b250 <_strtol_l.constprop.0+0xe8>
 800b24e:	1e69      	subs	r1, r5, #1
 800b250:	6011      	str	r1, [r2, #0]
 800b252:	e7f3      	b.n	800b23c <_strtol_l.constprop.0+0xd4>
 800b254:	2430      	movs	r4, #48	; 0x30
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1b1      	bne.n	800b1be <_strtol_l.constprop.0+0x56>
 800b25a:	2308      	movs	r3, #8
 800b25c:	e7af      	b.n	800b1be <_strtol_l.constprop.0+0x56>
 800b25e:	2c30      	cmp	r4, #48	; 0x30
 800b260:	d0a5      	beq.n	800b1ae <_strtol_l.constprop.0+0x46>
 800b262:	230a      	movs	r3, #10
 800b264:	e7ab      	b.n	800b1be <_strtol_l.constprop.0+0x56>
 800b266:	bf00      	nop
 800b268:	0800df15 	.word	0x0800df15

0800b26c <_strtol_r>:
 800b26c:	f7ff bf7c 	b.w	800b168 <_strtol_l.constprop.0>

0800b270 <__swbuf_r>:
 800b270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b272:	460e      	mov	r6, r1
 800b274:	4614      	mov	r4, r2
 800b276:	4605      	mov	r5, r0
 800b278:	b118      	cbz	r0, 800b282 <__swbuf_r+0x12>
 800b27a:	6983      	ldr	r3, [r0, #24]
 800b27c:	b90b      	cbnz	r3, 800b282 <__swbuf_r+0x12>
 800b27e:	f7fe f87b 	bl	8009378 <__sinit>
 800b282:	4b21      	ldr	r3, [pc, #132]	; (800b308 <__swbuf_r+0x98>)
 800b284:	429c      	cmp	r4, r3
 800b286:	d12b      	bne.n	800b2e0 <__swbuf_r+0x70>
 800b288:	686c      	ldr	r4, [r5, #4]
 800b28a:	69a3      	ldr	r3, [r4, #24]
 800b28c:	60a3      	str	r3, [r4, #8]
 800b28e:	89a3      	ldrh	r3, [r4, #12]
 800b290:	071a      	lsls	r2, r3, #28
 800b292:	d52f      	bpl.n	800b2f4 <__swbuf_r+0x84>
 800b294:	6923      	ldr	r3, [r4, #16]
 800b296:	b36b      	cbz	r3, 800b2f4 <__swbuf_r+0x84>
 800b298:	6923      	ldr	r3, [r4, #16]
 800b29a:	6820      	ldr	r0, [r4, #0]
 800b29c:	1ac0      	subs	r0, r0, r3
 800b29e:	6963      	ldr	r3, [r4, #20]
 800b2a0:	b2f6      	uxtb	r6, r6
 800b2a2:	4283      	cmp	r3, r0
 800b2a4:	4637      	mov	r7, r6
 800b2a6:	dc04      	bgt.n	800b2b2 <__swbuf_r+0x42>
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	f000 ffe0 	bl	800c270 <_fflush_r>
 800b2b0:	bb30      	cbnz	r0, 800b300 <__swbuf_r+0x90>
 800b2b2:	68a3      	ldr	r3, [r4, #8]
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	60a3      	str	r3, [r4, #8]
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	1c5a      	adds	r2, r3, #1
 800b2bc:	6022      	str	r2, [r4, #0]
 800b2be:	701e      	strb	r6, [r3, #0]
 800b2c0:	6963      	ldr	r3, [r4, #20]
 800b2c2:	3001      	adds	r0, #1
 800b2c4:	4283      	cmp	r3, r0
 800b2c6:	d004      	beq.n	800b2d2 <__swbuf_r+0x62>
 800b2c8:	89a3      	ldrh	r3, [r4, #12]
 800b2ca:	07db      	lsls	r3, r3, #31
 800b2cc:	d506      	bpl.n	800b2dc <__swbuf_r+0x6c>
 800b2ce:	2e0a      	cmp	r6, #10
 800b2d0:	d104      	bne.n	800b2dc <__swbuf_r+0x6c>
 800b2d2:	4621      	mov	r1, r4
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	f000 ffcb 	bl	800c270 <_fflush_r>
 800b2da:	b988      	cbnz	r0, 800b300 <__swbuf_r+0x90>
 800b2dc:	4638      	mov	r0, r7
 800b2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e0:	4b0a      	ldr	r3, [pc, #40]	; (800b30c <__swbuf_r+0x9c>)
 800b2e2:	429c      	cmp	r4, r3
 800b2e4:	d101      	bne.n	800b2ea <__swbuf_r+0x7a>
 800b2e6:	68ac      	ldr	r4, [r5, #8]
 800b2e8:	e7cf      	b.n	800b28a <__swbuf_r+0x1a>
 800b2ea:	4b09      	ldr	r3, [pc, #36]	; (800b310 <__swbuf_r+0xa0>)
 800b2ec:	429c      	cmp	r4, r3
 800b2ee:	bf08      	it	eq
 800b2f0:	68ec      	ldreq	r4, [r5, #12]
 800b2f2:	e7ca      	b.n	800b28a <__swbuf_r+0x1a>
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	f000 f81e 	bl	800b338 <__swsetup_r>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d0cb      	beq.n	800b298 <__swbuf_r+0x28>
 800b300:	f04f 37ff 	mov.w	r7, #4294967295
 800b304:	e7ea      	b.n	800b2dc <__swbuf_r+0x6c>
 800b306:	bf00      	nop
 800b308:	0800de08 	.word	0x0800de08
 800b30c:	0800de28 	.word	0x0800de28
 800b310:	0800dde8 	.word	0x0800dde8

0800b314 <_write_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4d07      	ldr	r5, [pc, #28]	; (800b334 <_write_r+0x20>)
 800b318:	4604      	mov	r4, r0
 800b31a:	4608      	mov	r0, r1
 800b31c:	4611      	mov	r1, r2
 800b31e:	2200      	movs	r2, #0
 800b320:	602a      	str	r2, [r5, #0]
 800b322:	461a      	mov	r2, r3
 800b324:	f7f6 f91d 	bl	8001562 <_write>
 800b328:	1c43      	adds	r3, r0, #1
 800b32a:	d102      	bne.n	800b332 <_write_r+0x1e>
 800b32c:	682b      	ldr	r3, [r5, #0]
 800b32e:	b103      	cbz	r3, 800b332 <_write_r+0x1e>
 800b330:	6023      	str	r3, [r4, #0]
 800b332:	bd38      	pop	{r3, r4, r5, pc}
 800b334:	2000836c 	.word	0x2000836c

0800b338 <__swsetup_r>:
 800b338:	4b32      	ldr	r3, [pc, #200]	; (800b404 <__swsetup_r+0xcc>)
 800b33a:	b570      	push	{r4, r5, r6, lr}
 800b33c:	681d      	ldr	r5, [r3, #0]
 800b33e:	4606      	mov	r6, r0
 800b340:	460c      	mov	r4, r1
 800b342:	b125      	cbz	r5, 800b34e <__swsetup_r+0x16>
 800b344:	69ab      	ldr	r3, [r5, #24]
 800b346:	b913      	cbnz	r3, 800b34e <__swsetup_r+0x16>
 800b348:	4628      	mov	r0, r5
 800b34a:	f7fe f815 	bl	8009378 <__sinit>
 800b34e:	4b2e      	ldr	r3, [pc, #184]	; (800b408 <__swsetup_r+0xd0>)
 800b350:	429c      	cmp	r4, r3
 800b352:	d10f      	bne.n	800b374 <__swsetup_r+0x3c>
 800b354:	686c      	ldr	r4, [r5, #4]
 800b356:	89a3      	ldrh	r3, [r4, #12]
 800b358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b35c:	0719      	lsls	r1, r3, #28
 800b35e:	d42c      	bmi.n	800b3ba <__swsetup_r+0x82>
 800b360:	06dd      	lsls	r5, r3, #27
 800b362:	d411      	bmi.n	800b388 <__swsetup_r+0x50>
 800b364:	2309      	movs	r3, #9
 800b366:	6033      	str	r3, [r6, #0]
 800b368:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b36c:	81a3      	strh	r3, [r4, #12]
 800b36e:	f04f 30ff 	mov.w	r0, #4294967295
 800b372:	e03e      	b.n	800b3f2 <__swsetup_r+0xba>
 800b374:	4b25      	ldr	r3, [pc, #148]	; (800b40c <__swsetup_r+0xd4>)
 800b376:	429c      	cmp	r4, r3
 800b378:	d101      	bne.n	800b37e <__swsetup_r+0x46>
 800b37a:	68ac      	ldr	r4, [r5, #8]
 800b37c:	e7eb      	b.n	800b356 <__swsetup_r+0x1e>
 800b37e:	4b24      	ldr	r3, [pc, #144]	; (800b410 <__swsetup_r+0xd8>)
 800b380:	429c      	cmp	r4, r3
 800b382:	bf08      	it	eq
 800b384:	68ec      	ldreq	r4, [r5, #12]
 800b386:	e7e6      	b.n	800b356 <__swsetup_r+0x1e>
 800b388:	0758      	lsls	r0, r3, #29
 800b38a:	d512      	bpl.n	800b3b2 <__swsetup_r+0x7a>
 800b38c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b38e:	b141      	cbz	r1, 800b3a2 <__swsetup_r+0x6a>
 800b390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b394:	4299      	cmp	r1, r3
 800b396:	d002      	beq.n	800b39e <__swsetup_r+0x66>
 800b398:	4630      	mov	r0, r6
 800b39a:	f002 f8a1 	bl	800d4e0 <_free_r>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	6363      	str	r3, [r4, #52]	; 0x34
 800b3a2:	89a3      	ldrh	r3, [r4, #12]
 800b3a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3a8:	81a3      	strh	r3, [r4, #12]
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	6063      	str	r3, [r4, #4]
 800b3ae:	6923      	ldr	r3, [r4, #16]
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	f043 0308 	orr.w	r3, r3, #8
 800b3b8:	81a3      	strh	r3, [r4, #12]
 800b3ba:	6923      	ldr	r3, [r4, #16]
 800b3bc:	b94b      	cbnz	r3, 800b3d2 <__swsetup_r+0x9a>
 800b3be:	89a3      	ldrh	r3, [r4, #12]
 800b3c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3c8:	d003      	beq.n	800b3d2 <__swsetup_r+0x9a>
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	f001 fb49 	bl	800ca64 <__smakebuf_r>
 800b3d2:	89a0      	ldrh	r0, [r4, #12]
 800b3d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3d8:	f010 0301 	ands.w	r3, r0, #1
 800b3dc:	d00a      	beq.n	800b3f4 <__swsetup_r+0xbc>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60a3      	str	r3, [r4, #8]
 800b3e2:	6963      	ldr	r3, [r4, #20]
 800b3e4:	425b      	negs	r3, r3
 800b3e6:	61a3      	str	r3, [r4, #24]
 800b3e8:	6923      	ldr	r3, [r4, #16]
 800b3ea:	b943      	cbnz	r3, 800b3fe <__swsetup_r+0xc6>
 800b3ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3f0:	d1ba      	bne.n	800b368 <__swsetup_r+0x30>
 800b3f2:	bd70      	pop	{r4, r5, r6, pc}
 800b3f4:	0781      	lsls	r1, r0, #30
 800b3f6:	bf58      	it	pl
 800b3f8:	6963      	ldrpl	r3, [r4, #20]
 800b3fa:	60a3      	str	r3, [r4, #8]
 800b3fc:	e7f4      	b.n	800b3e8 <__swsetup_r+0xb0>
 800b3fe:	2000      	movs	r0, #0
 800b400:	e7f7      	b.n	800b3f2 <__swsetup_r+0xba>
 800b402:	bf00      	nop
 800b404:	20000044 	.word	0x20000044
 800b408:	0800de08 	.word	0x0800de08
 800b40c:	0800de28 	.word	0x0800de28
 800b410:	0800dde8 	.word	0x0800dde8

0800b414 <__assert_func>:
 800b414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b416:	4614      	mov	r4, r2
 800b418:	461a      	mov	r2, r3
 800b41a:	4b09      	ldr	r3, [pc, #36]	; (800b440 <__assert_func+0x2c>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4605      	mov	r5, r0
 800b420:	68d8      	ldr	r0, [r3, #12]
 800b422:	b14c      	cbz	r4, 800b438 <__assert_func+0x24>
 800b424:	4b07      	ldr	r3, [pc, #28]	; (800b444 <__assert_func+0x30>)
 800b426:	9100      	str	r1, [sp, #0]
 800b428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b42c:	4906      	ldr	r1, [pc, #24]	; (800b448 <__assert_func+0x34>)
 800b42e:	462b      	mov	r3, r5
 800b430:	f000 ff5a 	bl	800c2e8 <fiprintf>
 800b434:	f002 fb91 	bl	800db5a <abort>
 800b438:	4b04      	ldr	r3, [pc, #16]	; (800b44c <__assert_func+0x38>)
 800b43a:	461c      	mov	r4, r3
 800b43c:	e7f3      	b.n	800b426 <__assert_func+0x12>
 800b43e:	bf00      	nop
 800b440:	20000044 	.word	0x20000044
 800b444:	0800ded8 	.word	0x0800ded8
 800b448:	0800dee5 	.word	0x0800dee5
 800b44c:	0800df13 	.word	0x0800df13

0800b450 <_close_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	4d06      	ldr	r5, [pc, #24]	; (800b46c <_close_r+0x1c>)
 800b454:	2300      	movs	r3, #0
 800b456:	4604      	mov	r4, r0
 800b458:	4608      	mov	r0, r1
 800b45a:	602b      	str	r3, [r5, #0]
 800b45c:	f7f6 f89d 	bl	800159a <_close>
 800b460:	1c43      	adds	r3, r0, #1
 800b462:	d102      	bne.n	800b46a <_close_r+0x1a>
 800b464:	682b      	ldr	r3, [r5, #0]
 800b466:	b103      	cbz	r3, 800b46a <_close_r+0x1a>
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	2000836c 	.word	0x2000836c

0800b470 <quorem>:
 800b470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b474:	6903      	ldr	r3, [r0, #16]
 800b476:	690c      	ldr	r4, [r1, #16]
 800b478:	42a3      	cmp	r3, r4
 800b47a:	4607      	mov	r7, r0
 800b47c:	f2c0 8081 	blt.w	800b582 <quorem+0x112>
 800b480:	3c01      	subs	r4, #1
 800b482:	f101 0814 	add.w	r8, r1, #20
 800b486:	f100 0514 	add.w	r5, r0, #20
 800b48a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b48e:	9301      	str	r3, [sp, #4]
 800b490:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b494:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b498:	3301      	adds	r3, #1
 800b49a:	429a      	cmp	r2, r3
 800b49c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b4a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4a8:	d331      	bcc.n	800b50e <quorem+0x9e>
 800b4aa:	f04f 0e00 	mov.w	lr, #0
 800b4ae:	4640      	mov	r0, r8
 800b4b0:	46ac      	mov	ip, r5
 800b4b2:	46f2      	mov	sl, lr
 800b4b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b4b8:	b293      	uxth	r3, r2
 800b4ba:	fb06 e303 	mla	r3, r6, r3, lr
 800b4be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	ebaa 0303 	sub.w	r3, sl, r3
 800b4c8:	f8dc a000 	ldr.w	sl, [ip]
 800b4cc:	0c12      	lsrs	r2, r2, #16
 800b4ce:	fa13 f38a 	uxtah	r3, r3, sl
 800b4d2:	fb06 e202 	mla	r2, r6, r2, lr
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	9b00      	ldr	r3, [sp, #0]
 800b4da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4de:	b292      	uxth	r2, r2
 800b4e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b4e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800b4ec:	4581      	cmp	r9, r0
 800b4ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4f2:	f84c 3b04 	str.w	r3, [ip], #4
 800b4f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4fa:	d2db      	bcs.n	800b4b4 <quorem+0x44>
 800b4fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b500:	b92b      	cbnz	r3, 800b50e <quorem+0x9e>
 800b502:	9b01      	ldr	r3, [sp, #4]
 800b504:	3b04      	subs	r3, #4
 800b506:	429d      	cmp	r5, r3
 800b508:	461a      	mov	r2, r3
 800b50a:	d32e      	bcc.n	800b56a <quorem+0xfa>
 800b50c:	613c      	str	r4, [r7, #16]
 800b50e:	4638      	mov	r0, r7
 800b510:	f001 fdda 	bl	800d0c8 <__mcmp>
 800b514:	2800      	cmp	r0, #0
 800b516:	db24      	blt.n	800b562 <quorem+0xf2>
 800b518:	3601      	adds	r6, #1
 800b51a:	4628      	mov	r0, r5
 800b51c:	f04f 0c00 	mov.w	ip, #0
 800b520:	f858 2b04 	ldr.w	r2, [r8], #4
 800b524:	f8d0 e000 	ldr.w	lr, [r0]
 800b528:	b293      	uxth	r3, r2
 800b52a:	ebac 0303 	sub.w	r3, ip, r3
 800b52e:	0c12      	lsrs	r2, r2, #16
 800b530:	fa13 f38e 	uxtah	r3, r3, lr
 800b534:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b542:	45c1      	cmp	r9, r8
 800b544:	f840 3b04 	str.w	r3, [r0], #4
 800b548:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b54c:	d2e8      	bcs.n	800b520 <quorem+0xb0>
 800b54e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b556:	b922      	cbnz	r2, 800b562 <quorem+0xf2>
 800b558:	3b04      	subs	r3, #4
 800b55a:	429d      	cmp	r5, r3
 800b55c:	461a      	mov	r2, r3
 800b55e:	d30a      	bcc.n	800b576 <quorem+0x106>
 800b560:	613c      	str	r4, [r7, #16]
 800b562:	4630      	mov	r0, r6
 800b564:	b003      	add	sp, #12
 800b566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56a:	6812      	ldr	r2, [r2, #0]
 800b56c:	3b04      	subs	r3, #4
 800b56e:	2a00      	cmp	r2, #0
 800b570:	d1cc      	bne.n	800b50c <quorem+0x9c>
 800b572:	3c01      	subs	r4, #1
 800b574:	e7c7      	b.n	800b506 <quorem+0x96>
 800b576:	6812      	ldr	r2, [r2, #0]
 800b578:	3b04      	subs	r3, #4
 800b57a:	2a00      	cmp	r2, #0
 800b57c:	d1f0      	bne.n	800b560 <quorem+0xf0>
 800b57e:	3c01      	subs	r4, #1
 800b580:	e7eb      	b.n	800b55a <quorem+0xea>
 800b582:	2000      	movs	r0, #0
 800b584:	e7ee      	b.n	800b564 <quorem+0xf4>
	...

0800b588 <_dtoa_r>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	ed2d 8b04 	vpush	{d8-d9}
 800b590:	ec57 6b10 	vmov	r6, r7, d0
 800b594:	b093      	sub	sp, #76	; 0x4c
 800b596:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b598:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b59c:	9106      	str	r1, [sp, #24]
 800b59e:	ee10 aa10 	vmov	sl, s0
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b5a6:	930c      	str	r3, [sp, #48]	; 0x30
 800b5a8:	46bb      	mov	fp, r7
 800b5aa:	b975      	cbnz	r5, 800b5ca <_dtoa_r+0x42>
 800b5ac:	2010      	movs	r0, #16
 800b5ae:	f001 fa99 	bl	800cae4 <malloc>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	6260      	str	r0, [r4, #36]	; 0x24
 800b5b6:	b920      	cbnz	r0, 800b5c2 <_dtoa_r+0x3a>
 800b5b8:	4ba7      	ldr	r3, [pc, #668]	; (800b858 <_dtoa_r+0x2d0>)
 800b5ba:	21ea      	movs	r1, #234	; 0xea
 800b5bc:	48a7      	ldr	r0, [pc, #668]	; (800b85c <_dtoa_r+0x2d4>)
 800b5be:	f7ff ff29 	bl	800b414 <__assert_func>
 800b5c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b5c6:	6005      	str	r5, [r0, #0]
 800b5c8:	60c5      	str	r5, [r0, #12]
 800b5ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5cc:	6819      	ldr	r1, [r3, #0]
 800b5ce:	b151      	cbz	r1, 800b5e6 <_dtoa_r+0x5e>
 800b5d0:	685a      	ldr	r2, [r3, #4]
 800b5d2:	604a      	str	r2, [r1, #4]
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	4093      	lsls	r3, r2
 800b5d8:	608b      	str	r3, [r1, #8]
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f001 fae8 	bl	800cbb0 <_Bfree>
 800b5e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	1e3b      	subs	r3, r7, #0
 800b5e8:	bfaa      	itet	ge
 800b5ea:	2300      	movge	r3, #0
 800b5ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b5f0:	f8c8 3000 	strge.w	r3, [r8]
 800b5f4:	4b9a      	ldr	r3, [pc, #616]	; (800b860 <_dtoa_r+0x2d8>)
 800b5f6:	bfbc      	itt	lt
 800b5f8:	2201      	movlt	r2, #1
 800b5fa:	f8c8 2000 	strlt.w	r2, [r8]
 800b5fe:	ea33 030b 	bics.w	r3, r3, fp
 800b602:	d11b      	bne.n	800b63c <_dtoa_r+0xb4>
 800b604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b606:	f242 730f 	movw	r3, #9999	; 0x270f
 800b60a:	6013      	str	r3, [r2, #0]
 800b60c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b610:	4333      	orrs	r3, r6
 800b612:	f000 8592 	beq.w	800c13a <_dtoa_r+0xbb2>
 800b616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b618:	b963      	cbnz	r3, 800b634 <_dtoa_r+0xac>
 800b61a:	4b92      	ldr	r3, [pc, #584]	; (800b864 <_dtoa_r+0x2dc>)
 800b61c:	e022      	b.n	800b664 <_dtoa_r+0xdc>
 800b61e:	4b92      	ldr	r3, [pc, #584]	; (800b868 <_dtoa_r+0x2e0>)
 800b620:	9301      	str	r3, [sp, #4]
 800b622:	3308      	adds	r3, #8
 800b624:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	9801      	ldr	r0, [sp, #4]
 800b62a:	b013      	add	sp, #76	; 0x4c
 800b62c:	ecbd 8b04 	vpop	{d8-d9}
 800b630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b634:	4b8b      	ldr	r3, [pc, #556]	; (800b864 <_dtoa_r+0x2dc>)
 800b636:	9301      	str	r3, [sp, #4]
 800b638:	3303      	adds	r3, #3
 800b63a:	e7f3      	b.n	800b624 <_dtoa_r+0x9c>
 800b63c:	2200      	movs	r2, #0
 800b63e:	2300      	movs	r3, #0
 800b640:	4650      	mov	r0, sl
 800b642:	4659      	mov	r1, fp
 800b644:	f7f5 fa40 	bl	8000ac8 <__aeabi_dcmpeq>
 800b648:	ec4b ab19 	vmov	d9, sl, fp
 800b64c:	4680      	mov	r8, r0
 800b64e:	b158      	cbz	r0, 800b668 <_dtoa_r+0xe0>
 800b650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b652:	2301      	movs	r3, #1
 800b654:	6013      	str	r3, [r2, #0]
 800b656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f000 856b 	beq.w	800c134 <_dtoa_r+0xbac>
 800b65e:	4883      	ldr	r0, [pc, #524]	; (800b86c <_dtoa_r+0x2e4>)
 800b660:	6018      	str	r0, [r3, #0]
 800b662:	1e43      	subs	r3, r0, #1
 800b664:	9301      	str	r3, [sp, #4]
 800b666:	e7df      	b.n	800b628 <_dtoa_r+0xa0>
 800b668:	ec4b ab10 	vmov	d0, sl, fp
 800b66c:	aa10      	add	r2, sp, #64	; 0x40
 800b66e:	a911      	add	r1, sp, #68	; 0x44
 800b670:	4620      	mov	r0, r4
 800b672:	f001 fe4b 	bl	800d30c <__d2b>
 800b676:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b67a:	ee08 0a10 	vmov	s16, r0
 800b67e:	2d00      	cmp	r5, #0
 800b680:	f000 8084 	beq.w	800b78c <_dtoa_r+0x204>
 800b684:	ee19 3a90 	vmov	r3, s19
 800b688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b68c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b690:	4656      	mov	r6, sl
 800b692:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b69a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b69e:	4b74      	ldr	r3, [pc, #464]	; (800b870 <_dtoa_r+0x2e8>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	4639      	mov	r1, r7
 800b6a6:	f7f4 fdef 	bl	8000288 <__aeabi_dsub>
 800b6aa:	a365      	add	r3, pc, #404	; (adr r3, 800b840 <_dtoa_r+0x2b8>)
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	f7f4 ffa2 	bl	80005f8 <__aeabi_dmul>
 800b6b4:	a364      	add	r3, pc, #400	; (adr r3, 800b848 <_dtoa_r+0x2c0>)
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	f7f4 fde7 	bl	800028c <__adddf3>
 800b6be:	4606      	mov	r6, r0
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	460f      	mov	r7, r1
 800b6c4:	f7f4 ff2e 	bl	8000524 <__aeabi_i2d>
 800b6c8:	a361      	add	r3, pc, #388	; (adr r3, 800b850 <_dtoa_r+0x2c8>)
 800b6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ce:	f7f4 ff93 	bl	80005f8 <__aeabi_dmul>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	4639      	mov	r1, r7
 800b6da:	f7f4 fdd7 	bl	800028c <__adddf3>
 800b6de:	4606      	mov	r6, r0
 800b6e0:	460f      	mov	r7, r1
 800b6e2:	f7f5 fa39 	bl	8000b58 <__aeabi_d2iz>
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	9000      	str	r0, [sp, #0]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	4639      	mov	r1, r7
 800b6f0:	f7f5 f9f4 	bl	8000adc <__aeabi_dcmplt>
 800b6f4:	b150      	cbz	r0, 800b70c <_dtoa_r+0x184>
 800b6f6:	9800      	ldr	r0, [sp, #0]
 800b6f8:	f7f4 ff14 	bl	8000524 <__aeabi_i2d>
 800b6fc:	4632      	mov	r2, r6
 800b6fe:	463b      	mov	r3, r7
 800b700:	f7f5 f9e2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b704:	b910      	cbnz	r0, 800b70c <_dtoa_r+0x184>
 800b706:	9b00      	ldr	r3, [sp, #0]
 800b708:	3b01      	subs	r3, #1
 800b70a:	9300      	str	r3, [sp, #0]
 800b70c:	9b00      	ldr	r3, [sp, #0]
 800b70e:	2b16      	cmp	r3, #22
 800b710:	d85a      	bhi.n	800b7c8 <_dtoa_r+0x240>
 800b712:	9a00      	ldr	r2, [sp, #0]
 800b714:	4b57      	ldr	r3, [pc, #348]	; (800b874 <_dtoa_r+0x2ec>)
 800b716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71e:	ec51 0b19 	vmov	r0, r1, d9
 800b722:	f7f5 f9db 	bl	8000adc <__aeabi_dcmplt>
 800b726:	2800      	cmp	r0, #0
 800b728:	d050      	beq.n	800b7cc <_dtoa_r+0x244>
 800b72a:	9b00      	ldr	r3, [sp, #0]
 800b72c:	3b01      	subs	r3, #1
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	2300      	movs	r3, #0
 800b732:	930b      	str	r3, [sp, #44]	; 0x2c
 800b734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b736:	1b5d      	subs	r5, r3, r5
 800b738:	1e6b      	subs	r3, r5, #1
 800b73a:	9305      	str	r3, [sp, #20]
 800b73c:	bf45      	ittet	mi
 800b73e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b742:	9304      	strmi	r3, [sp, #16]
 800b744:	2300      	movpl	r3, #0
 800b746:	2300      	movmi	r3, #0
 800b748:	bf4c      	ite	mi
 800b74a:	9305      	strmi	r3, [sp, #20]
 800b74c:	9304      	strpl	r3, [sp, #16]
 800b74e:	9b00      	ldr	r3, [sp, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	db3d      	blt.n	800b7d0 <_dtoa_r+0x248>
 800b754:	9b05      	ldr	r3, [sp, #20]
 800b756:	9a00      	ldr	r2, [sp, #0]
 800b758:	920a      	str	r2, [sp, #40]	; 0x28
 800b75a:	4413      	add	r3, r2
 800b75c:	9305      	str	r3, [sp, #20]
 800b75e:	2300      	movs	r3, #0
 800b760:	9307      	str	r3, [sp, #28]
 800b762:	9b06      	ldr	r3, [sp, #24]
 800b764:	2b09      	cmp	r3, #9
 800b766:	f200 8089 	bhi.w	800b87c <_dtoa_r+0x2f4>
 800b76a:	2b05      	cmp	r3, #5
 800b76c:	bfc4      	itt	gt
 800b76e:	3b04      	subgt	r3, #4
 800b770:	9306      	strgt	r3, [sp, #24]
 800b772:	9b06      	ldr	r3, [sp, #24]
 800b774:	f1a3 0302 	sub.w	r3, r3, #2
 800b778:	bfcc      	ite	gt
 800b77a:	2500      	movgt	r5, #0
 800b77c:	2501      	movle	r5, #1
 800b77e:	2b03      	cmp	r3, #3
 800b780:	f200 8087 	bhi.w	800b892 <_dtoa_r+0x30a>
 800b784:	e8df f003 	tbb	[pc, r3]
 800b788:	59383a2d 	.word	0x59383a2d
 800b78c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b790:	441d      	add	r5, r3
 800b792:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b796:	2b20      	cmp	r3, #32
 800b798:	bfc1      	itttt	gt
 800b79a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b79e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b7a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b7a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b7aa:	bfda      	itte	le
 800b7ac:	f1c3 0320 	rsble	r3, r3, #32
 800b7b0:	fa06 f003 	lslle.w	r0, r6, r3
 800b7b4:	4318      	orrgt	r0, r3
 800b7b6:	f7f4 fea5 	bl	8000504 <__aeabi_ui2d>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	4606      	mov	r6, r0
 800b7be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b7c2:	3d01      	subs	r5, #1
 800b7c4:	930e      	str	r3, [sp, #56]	; 0x38
 800b7c6:	e76a      	b.n	800b69e <_dtoa_r+0x116>
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e7b2      	b.n	800b732 <_dtoa_r+0x1aa>
 800b7cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800b7ce:	e7b1      	b.n	800b734 <_dtoa_r+0x1ac>
 800b7d0:	9b04      	ldr	r3, [sp, #16]
 800b7d2:	9a00      	ldr	r2, [sp, #0]
 800b7d4:	1a9b      	subs	r3, r3, r2
 800b7d6:	9304      	str	r3, [sp, #16]
 800b7d8:	4253      	negs	r3, r2
 800b7da:	9307      	str	r3, [sp, #28]
 800b7dc:	2300      	movs	r3, #0
 800b7de:	930a      	str	r3, [sp, #40]	; 0x28
 800b7e0:	e7bf      	b.n	800b762 <_dtoa_r+0x1da>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	9308      	str	r3, [sp, #32]
 800b7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	dc55      	bgt.n	800b898 <_dtoa_r+0x310>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	9209      	str	r2, [sp, #36]	; 0x24
 800b7f6:	e00c      	b.n	800b812 <_dtoa_r+0x28a>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e7f3      	b.n	800b7e4 <_dtoa_r+0x25c>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b800:	9308      	str	r3, [sp, #32]
 800b802:	9b00      	ldr	r3, [sp, #0]
 800b804:	4413      	add	r3, r2
 800b806:	9302      	str	r3, [sp, #8]
 800b808:	3301      	adds	r3, #1
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	9303      	str	r3, [sp, #12]
 800b80e:	bfb8      	it	lt
 800b810:	2301      	movlt	r3, #1
 800b812:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b814:	2200      	movs	r2, #0
 800b816:	6042      	str	r2, [r0, #4]
 800b818:	2204      	movs	r2, #4
 800b81a:	f102 0614 	add.w	r6, r2, #20
 800b81e:	429e      	cmp	r6, r3
 800b820:	6841      	ldr	r1, [r0, #4]
 800b822:	d93d      	bls.n	800b8a0 <_dtoa_r+0x318>
 800b824:	4620      	mov	r0, r4
 800b826:	f001 f983 	bl	800cb30 <_Balloc>
 800b82a:	9001      	str	r0, [sp, #4]
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d13b      	bne.n	800b8a8 <_dtoa_r+0x320>
 800b830:	4b11      	ldr	r3, [pc, #68]	; (800b878 <_dtoa_r+0x2f0>)
 800b832:	4602      	mov	r2, r0
 800b834:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b838:	e6c0      	b.n	800b5bc <_dtoa_r+0x34>
 800b83a:	2301      	movs	r3, #1
 800b83c:	e7df      	b.n	800b7fe <_dtoa_r+0x276>
 800b83e:	bf00      	nop
 800b840:	636f4361 	.word	0x636f4361
 800b844:	3fd287a7 	.word	0x3fd287a7
 800b848:	8b60c8b3 	.word	0x8b60c8b3
 800b84c:	3fc68a28 	.word	0x3fc68a28
 800b850:	509f79fb 	.word	0x509f79fb
 800b854:	3fd34413 	.word	0x3fd34413
 800b858:	0800e022 	.word	0x0800e022
 800b85c:	0800e039 	.word	0x0800e039
 800b860:	7ff00000 	.word	0x7ff00000
 800b864:	0800e01e 	.word	0x0800e01e
 800b868:	0800e015 	.word	0x0800e015
 800b86c:	0800de5d 	.word	0x0800de5d
 800b870:	3ff80000 	.word	0x3ff80000
 800b874:	0800e1a8 	.word	0x0800e1a8
 800b878:	0800e094 	.word	0x0800e094
 800b87c:	2501      	movs	r5, #1
 800b87e:	2300      	movs	r3, #0
 800b880:	9306      	str	r3, [sp, #24]
 800b882:	9508      	str	r5, [sp, #32]
 800b884:	f04f 33ff 	mov.w	r3, #4294967295
 800b888:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b88c:	2200      	movs	r2, #0
 800b88e:	2312      	movs	r3, #18
 800b890:	e7b0      	b.n	800b7f4 <_dtoa_r+0x26c>
 800b892:	2301      	movs	r3, #1
 800b894:	9308      	str	r3, [sp, #32]
 800b896:	e7f5      	b.n	800b884 <_dtoa_r+0x2fc>
 800b898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b89a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b89e:	e7b8      	b.n	800b812 <_dtoa_r+0x28a>
 800b8a0:	3101      	adds	r1, #1
 800b8a2:	6041      	str	r1, [r0, #4]
 800b8a4:	0052      	lsls	r2, r2, #1
 800b8a6:	e7b8      	b.n	800b81a <_dtoa_r+0x292>
 800b8a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8aa:	9a01      	ldr	r2, [sp, #4]
 800b8ac:	601a      	str	r2, [r3, #0]
 800b8ae:	9b03      	ldr	r3, [sp, #12]
 800b8b0:	2b0e      	cmp	r3, #14
 800b8b2:	f200 809d 	bhi.w	800b9f0 <_dtoa_r+0x468>
 800b8b6:	2d00      	cmp	r5, #0
 800b8b8:	f000 809a 	beq.w	800b9f0 <_dtoa_r+0x468>
 800b8bc:	9b00      	ldr	r3, [sp, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	dd32      	ble.n	800b928 <_dtoa_r+0x3a0>
 800b8c2:	4ab7      	ldr	r2, [pc, #732]	; (800bba0 <_dtoa_r+0x618>)
 800b8c4:	f003 030f 	and.w	r3, r3, #15
 800b8c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8d0:	9b00      	ldr	r3, [sp, #0]
 800b8d2:	05d8      	lsls	r0, r3, #23
 800b8d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b8d8:	d516      	bpl.n	800b908 <_dtoa_r+0x380>
 800b8da:	4bb2      	ldr	r3, [pc, #712]	; (800bba4 <_dtoa_r+0x61c>)
 800b8dc:	ec51 0b19 	vmov	r0, r1, d9
 800b8e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8e4:	f7f4 ffb2 	bl	800084c <__aeabi_ddiv>
 800b8e8:	f007 070f 	and.w	r7, r7, #15
 800b8ec:	4682      	mov	sl, r0
 800b8ee:	468b      	mov	fp, r1
 800b8f0:	2503      	movs	r5, #3
 800b8f2:	4eac      	ldr	r6, [pc, #688]	; (800bba4 <_dtoa_r+0x61c>)
 800b8f4:	b957      	cbnz	r7, 800b90c <_dtoa_r+0x384>
 800b8f6:	4642      	mov	r2, r8
 800b8f8:	464b      	mov	r3, r9
 800b8fa:	4650      	mov	r0, sl
 800b8fc:	4659      	mov	r1, fp
 800b8fe:	f7f4 ffa5 	bl	800084c <__aeabi_ddiv>
 800b902:	4682      	mov	sl, r0
 800b904:	468b      	mov	fp, r1
 800b906:	e028      	b.n	800b95a <_dtoa_r+0x3d2>
 800b908:	2502      	movs	r5, #2
 800b90a:	e7f2      	b.n	800b8f2 <_dtoa_r+0x36a>
 800b90c:	07f9      	lsls	r1, r7, #31
 800b90e:	d508      	bpl.n	800b922 <_dtoa_r+0x39a>
 800b910:	4640      	mov	r0, r8
 800b912:	4649      	mov	r1, r9
 800b914:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b918:	f7f4 fe6e 	bl	80005f8 <__aeabi_dmul>
 800b91c:	3501      	adds	r5, #1
 800b91e:	4680      	mov	r8, r0
 800b920:	4689      	mov	r9, r1
 800b922:	107f      	asrs	r7, r7, #1
 800b924:	3608      	adds	r6, #8
 800b926:	e7e5      	b.n	800b8f4 <_dtoa_r+0x36c>
 800b928:	f000 809b 	beq.w	800ba62 <_dtoa_r+0x4da>
 800b92c:	9b00      	ldr	r3, [sp, #0]
 800b92e:	4f9d      	ldr	r7, [pc, #628]	; (800bba4 <_dtoa_r+0x61c>)
 800b930:	425e      	negs	r6, r3
 800b932:	4b9b      	ldr	r3, [pc, #620]	; (800bba0 <_dtoa_r+0x618>)
 800b934:	f006 020f 	and.w	r2, r6, #15
 800b938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b940:	ec51 0b19 	vmov	r0, r1, d9
 800b944:	f7f4 fe58 	bl	80005f8 <__aeabi_dmul>
 800b948:	1136      	asrs	r6, r6, #4
 800b94a:	4682      	mov	sl, r0
 800b94c:	468b      	mov	fp, r1
 800b94e:	2300      	movs	r3, #0
 800b950:	2502      	movs	r5, #2
 800b952:	2e00      	cmp	r6, #0
 800b954:	d17a      	bne.n	800ba4c <_dtoa_r+0x4c4>
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1d3      	bne.n	800b902 <_dtoa_r+0x37a>
 800b95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f000 8082 	beq.w	800ba66 <_dtoa_r+0x4de>
 800b962:	4b91      	ldr	r3, [pc, #580]	; (800bba8 <_dtoa_r+0x620>)
 800b964:	2200      	movs	r2, #0
 800b966:	4650      	mov	r0, sl
 800b968:	4659      	mov	r1, fp
 800b96a:	f7f5 f8b7 	bl	8000adc <__aeabi_dcmplt>
 800b96e:	2800      	cmp	r0, #0
 800b970:	d079      	beq.n	800ba66 <_dtoa_r+0x4de>
 800b972:	9b03      	ldr	r3, [sp, #12]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d076      	beq.n	800ba66 <_dtoa_r+0x4de>
 800b978:	9b02      	ldr	r3, [sp, #8]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	dd36      	ble.n	800b9ec <_dtoa_r+0x464>
 800b97e:	9b00      	ldr	r3, [sp, #0]
 800b980:	4650      	mov	r0, sl
 800b982:	4659      	mov	r1, fp
 800b984:	1e5f      	subs	r7, r3, #1
 800b986:	2200      	movs	r2, #0
 800b988:	4b88      	ldr	r3, [pc, #544]	; (800bbac <_dtoa_r+0x624>)
 800b98a:	f7f4 fe35 	bl	80005f8 <__aeabi_dmul>
 800b98e:	9e02      	ldr	r6, [sp, #8]
 800b990:	4682      	mov	sl, r0
 800b992:	468b      	mov	fp, r1
 800b994:	3501      	adds	r5, #1
 800b996:	4628      	mov	r0, r5
 800b998:	f7f4 fdc4 	bl	8000524 <__aeabi_i2d>
 800b99c:	4652      	mov	r2, sl
 800b99e:	465b      	mov	r3, fp
 800b9a0:	f7f4 fe2a 	bl	80005f8 <__aeabi_dmul>
 800b9a4:	4b82      	ldr	r3, [pc, #520]	; (800bbb0 <_dtoa_r+0x628>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f7f4 fc70 	bl	800028c <__adddf3>
 800b9ac:	46d0      	mov	r8, sl
 800b9ae:	46d9      	mov	r9, fp
 800b9b0:	4682      	mov	sl, r0
 800b9b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b9b6:	2e00      	cmp	r6, #0
 800b9b8:	d158      	bne.n	800ba6c <_dtoa_r+0x4e4>
 800b9ba:	4b7e      	ldr	r3, [pc, #504]	; (800bbb4 <_dtoa_r+0x62c>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	4640      	mov	r0, r8
 800b9c0:	4649      	mov	r1, r9
 800b9c2:	f7f4 fc61 	bl	8000288 <__aeabi_dsub>
 800b9c6:	4652      	mov	r2, sl
 800b9c8:	465b      	mov	r3, fp
 800b9ca:	4680      	mov	r8, r0
 800b9cc:	4689      	mov	r9, r1
 800b9ce:	f7f5 f8a3 	bl	8000b18 <__aeabi_dcmpgt>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	f040 8295 	bne.w	800bf02 <_dtoa_r+0x97a>
 800b9d8:	4652      	mov	r2, sl
 800b9da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b9de:	4640      	mov	r0, r8
 800b9e0:	4649      	mov	r1, r9
 800b9e2:	f7f5 f87b 	bl	8000adc <__aeabi_dcmplt>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	f040 8289 	bne.w	800befe <_dtoa_r+0x976>
 800b9ec:	ec5b ab19 	vmov	sl, fp, d9
 800b9f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f2c0 8148 	blt.w	800bc88 <_dtoa_r+0x700>
 800b9f8:	9a00      	ldr	r2, [sp, #0]
 800b9fa:	2a0e      	cmp	r2, #14
 800b9fc:	f300 8144 	bgt.w	800bc88 <_dtoa_r+0x700>
 800ba00:	4b67      	ldr	r3, [pc, #412]	; (800bba0 <_dtoa_r+0x618>)
 800ba02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f280 80d5 	bge.w	800bbbc <_dtoa_r+0x634>
 800ba12:	9b03      	ldr	r3, [sp, #12]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f300 80d1 	bgt.w	800bbbc <_dtoa_r+0x634>
 800ba1a:	f040 826f 	bne.w	800befc <_dtoa_r+0x974>
 800ba1e:	4b65      	ldr	r3, [pc, #404]	; (800bbb4 <_dtoa_r+0x62c>)
 800ba20:	2200      	movs	r2, #0
 800ba22:	4640      	mov	r0, r8
 800ba24:	4649      	mov	r1, r9
 800ba26:	f7f4 fde7 	bl	80005f8 <__aeabi_dmul>
 800ba2a:	4652      	mov	r2, sl
 800ba2c:	465b      	mov	r3, fp
 800ba2e:	f7f5 f869 	bl	8000b04 <__aeabi_dcmpge>
 800ba32:	9e03      	ldr	r6, [sp, #12]
 800ba34:	4637      	mov	r7, r6
 800ba36:	2800      	cmp	r0, #0
 800ba38:	f040 8245 	bne.w	800bec6 <_dtoa_r+0x93e>
 800ba3c:	9d01      	ldr	r5, [sp, #4]
 800ba3e:	2331      	movs	r3, #49	; 0x31
 800ba40:	f805 3b01 	strb.w	r3, [r5], #1
 800ba44:	9b00      	ldr	r3, [sp, #0]
 800ba46:	3301      	adds	r3, #1
 800ba48:	9300      	str	r3, [sp, #0]
 800ba4a:	e240      	b.n	800bece <_dtoa_r+0x946>
 800ba4c:	07f2      	lsls	r2, r6, #31
 800ba4e:	d505      	bpl.n	800ba5c <_dtoa_r+0x4d4>
 800ba50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba54:	f7f4 fdd0 	bl	80005f8 <__aeabi_dmul>
 800ba58:	3501      	adds	r5, #1
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	1076      	asrs	r6, r6, #1
 800ba5e:	3708      	adds	r7, #8
 800ba60:	e777      	b.n	800b952 <_dtoa_r+0x3ca>
 800ba62:	2502      	movs	r5, #2
 800ba64:	e779      	b.n	800b95a <_dtoa_r+0x3d2>
 800ba66:	9f00      	ldr	r7, [sp, #0]
 800ba68:	9e03      	ldr	r6, [sp, #12]
 800ba6a:	e794      	b.n	800b996 <_dtoa_r+0x40e>
 800ba6c:	9901      	ldr	r1, [sp, #4]
 800ba6e:	4b4c      	ldr	r3, [pc, #304]	; (800bba0 <_dtoa_r+0x618>)
 800ba70:	4431      	add	r1, r6
 800ba72:	910d      	str	r1, [sp, #52]	; 0x34
 800ba74:	9908      	ldr	r1, [sp, #32]
 800ba76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba7e:	2900      	cmp	r1, #0
 800ba80:	d043      	beq.n	800bb0a <_dtoa_r+0x582>
 800ba82:	494d      	ldr	r1, [pc, #308]	; (800bbb8 <_dtoa_r+0x630>)
 800ba84:	2000      	movs	r0, #0
 800ba86:	f7f4 fee1 	bl	800084c <__aeabi_ddiv>
 800ba8a:	4652      	mov	r2, sl
 800ba8c:	465b      	mov	r3, fp
 800ba8e:	f7f4 fbfb 	bl	8000288 <__aeabi_dsub>
 800ba92:	9d01      	ldr	r5, [sp, #4]
 800ba94:	4682      	mov	sl, r0
 800ba96:	468b      	mov	fp, r1
 800ba98:	4649      	mov	r1, r9
 800ba9a:	4640      	mov	r0, r8
 800ba9c:	f7f5 f85c 	bl	8000b58 <__aeabi_d2iz>
 800baa0:	4606      	mov	r6, r0
 800baa2:	f7f4 fd3f 	bl	8000524 <__aeabi_i2d>
 800baa6:	4602      	mov	r2, r0
 800baa8:	460b      	mov	r3, r1
 800baaa:	4640      	mov	r0, r8
 800baac:	4649      	mov	r1, r9
 800baae:	f7f4 fbeb 	bl	8000288 <__aeabi_dsub>
 800bab2:	3630      	adds	r6, #48	; 0x30
 800bab4:	f805 6b01 	strb.w	r6, [r5], #1
 800bab8:	4652      	mov	r2, sl
 800baba:	465b      	mov	r3, fp
 800babc:	4680      	mov	r8, r0
 800babe:	4689      	mov	r9, r1
 800bac0:	f7f5 f80c 	bl	8000adc <__aeabi_dcmplt>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d163      	bne.n	800bb90 <_dtoa_r+0x608>
 800bac8:	4642      	mov	r2, r8
 800baca:	464b      	mov	r3, r9
 800bacc:	4936      	ldr	r1, [pc, #216]	; (800bba8 <_dtoa_r+0x620>)
 800bace:	2000      	movs	r0, #0
 800bad0:	f7f4 fbda 	bl	8000288 <__aeabi_dsub>
 800bad4:	4652      	mov	r2, sl
 800bad6:	465b      	mov	r3, fp
 800bad8:	f7f5 f800 	bl	8000adc <__aeabi_dcmplt>
 800badc:	2800      	cmp	r0, #0
 800bade:	f040 80b5 	bne.w	800bc4c <_dtoa_r+0x6c4>
 800bae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bae4:	429d      	cmp	r5, r3
 800bae6:	d081      	beq.n	800b9ec <_dtoa_r+0x464>
 800bae8:	4b30      	ldr	r3, [pc, #192]	; (800bbac <_dtoa_r+0x624>)
 800baea:	2200      	movs	r2, #0
 800baec:	4650      	mov	r0, sl
 800baee:	4659      	mov	r1, fp
 800baf0:	f7f4 fd82 	bl	80005f8 <__aeabi_dmul>
 800baf4:	4b2d      	ldr	r3, [pc, #180]	; (800bbac <_dtoa_r+0x624>)
 800baf6:	4682      	mov	sl, r0
 800baf8:	468b      	mov	fp, r1
 800bafa:	4640      	mov	r0, r8
 800bafc:	4649      	mov	r1, r9
 800bafe:	2200      	movs	r2, #0
 800bb00:	f7f4 fd7a 	bl	80005f8 <__aeabi_dmul>
 800bb04:	4680      	mov	r8, r0
 800bb06:	4689      	mov	r9, r1
 800bb08:	e7c6      	b.n	800ba98 <_dtoa_r+0x510>
 800bb0a:	4650      	mov	r0, sl
 800bb0c:	4659      	mov	r1, fp
 800bb0e:	f7f4 fd73 	bl	80005f8 <__aeabi_dmul>
 800bb12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb14:	9d01      	ldr	r5, [sp, #4]
 800bb16:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb18:	4682      	mov	sl, r0
 800bb1a:	468b      	mov	fp, r1
 800bb1c:	4649      	mov	r1, r9
 800bb1e:	4640      	mov	r0, r8
 800bb20:	f7f5 f81a 	bl	8000b58 <__aeabi_d2iz>
 800bb24:	4606      	mov	r6, r0
 800bb26:	f7f4 fcfd 	bl	8000524 <__aeabi_i2d>
 800bb2a:	3630      	adds	r6, #48	; 0x30
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	460b      	mov	r3, r1
 800bb30:	4640      	mov	r0, r8
 800bb32:	4649      	mov	r1, r9
 800bb34:	f7f4 fba8 	bl	8000288 <__aeabi_dsub>
 800bb38:	f805 6b01 	strb.w	r6, [r5], #1
 800bb3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb3e:	429d      	cmp	r5, r3
 800bb40:	4680      	mov	r8, r0
 800bb42:	4689      	mov	r9, r1
 800bb44:	f04f 0200 	mov.w	r2, #0
 800bb48:	d124      	bne.n	800bb94 <_dtoa_r+0x60c>
 800bb4a:	4b1b      	ldr	r3, [pc, #108]	; (800bbb8 <_dtoa_r+0x630>)
 800bb4c:	4650      	mov	r0, sl
 800bb4e:	4659      	mov	r1, fp
 800bb50:	f7f4 fb9c 	bl	800028c <__adddf3>
 800bb54:	4602      	mov	r2, r0
 800bb56:	460b      	mov	r3, r1
 800bb58:	4640      	mov	r0, r8
 800bb5a:	4649      	mov	r1, r9
 800bb5c:	f7f4 ffdc 	bl	8000b18 <__aeabi_dcmpgt>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d173      	bne.n	800bc4c <_dtoa_r+0x6c4>
 800bb64:	4652      	mov	r2, sl
 800bb66:	465b      	mov	r3, fp
 800bb68:	4913      	ldr	r1, [pc, #76]	; (800bbb8 <_dtoa_r+0x630>)
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	f7f4 fb8c 	bl	8000288 <__aeabi_dsub>
 800bb70:	4602      	mov	r2, r0
 800bb72:	460b      	mov	r3, r1
 800bb74:	4640      	mov	r0, r8
 800bb76:	4649      	mov	r1, r9
 800bb78:	f7f4 ffb0 	bl	8000adc <__aeabi_dcmplt>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	f43f af35 	beq.w	800b9ec <_dtoa_r+0x464>
 800bb82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bb84:	1e6b      	subs	r3, r5, #1
 800bb86:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb8c:	2b30      	cmp	r3, #48	; 0x30
 800bb8e:	d0f8      	beq.n	800bb82 <_dtoa_r+0x5fa>
 800bb90:	9700      	str	r7, [sp, #0]
 800bb92:	e049      	b.n	800bc28 <_dtoa_r+0x6a0>
 800bb94:	4b05      	ldr	r3, [pc, #20]	; (800bbac <_dtoa_r+0x624>)
 800bb96:	f7f4 fd2f 	bl	80005f8 <__aeabi_dmul>
 800bb9a:	4680      	mov	r8, r0
 800bb9c:	4689      	mov	r9, r1
 800bb9e:	e7bd      	b.n	800bb1c <_dtoa_r+0x594>
 800bba0:	0800e1a8 	.word	0x0800e1a8
 800bba4:	0800e180 	.word	0x0800e180
 800bba8:	3ff00000 	.word	0x3ff00000
 800bbac:	40240000 	.word	0x40240000
 800bbb0:	401c0000 	.word	0x401c0000
 800bbb4:	40140000 	.word	0x40140000
 800bbb8:	3fe00000 	.word	0x3fe00000
 800bbbc:	9d01      	ldr	r5, [sp, #4]
 800bbbe:	4656      	mov	r6, sl
 800bbc0:	465f      	mov	r7, fp
 800bbc2:	4642      	mov	r2, r8
 800bbc4:	464b      	mov	r3, r9
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	4639      	mov	r1, r7
 800bbca:	f7f4 fe3f 	bl	800084c <__aeabi_ddiv>
 800bbce:	f7f4 ffc3 	bl	8000b58 <__aeabi_d2iz>
 800bbd2:	4682      	mov	sl, r0
 800bbd4:	f7f4 fca6 	bl	8000524 <__aeabi_i2d>
 800bbd8:	4642      	mov	r2, r8
 800bbda:	464b      	mov	r3, r9
 800bbdc:	f7f4 fd0c 	bl	80005f8 <__aeabi_dmul>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	4639      	mov	r1, r7
 800bbe8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bbec:	f7f4 fb4c 	bl	8000288 <__aeabi_dsub>
 800bbf0:	f805 6b01 	strb.w	r6, [r5], #1
 800bbf4:	9e01      	ldr	r6, [sp, #4]
 800bbf6:	9f03      	ldr	r7, [sp, #12]
 800bbf8:	1bae      	subs	r6, r5, r6
 800bbfa:	42b7      	cmp	r7, r6
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	d135      	bne.n	800bc6e <_dtoa_r+0x6e6>
 800bc02:	f7f4 fb43 	bl	800028c <__adddf3>
 800bc06:	4642      	mov	r2, r8
 800bc08:	464b      	mov	r3, r9
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	460f      	mov	r7, r1
 800bc0e:	f7f4 ff83 	bl	8000b18 <__aeabi_dcmpgt>
 800bc12:	b9d0      	cbnz	r0, 800bc4a <_dtoa_r+0x6c2>
 800bc14:	4642      	mov	r2, r8
 800bc16:	464b      	mov	r3, r9
 800bc18:	4630      	mov	r0, r6
 800bc1a:	4639      	mov	r1, r7
 800bc1c:	f7f4 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc20:	b110      	cbz	r0, 800bc28 <_dtoa_r+0x6a0>
 800bc22:	f01a 0f01 	tst.w	sl, #1
 800bc26:	d110      	bne.n	800bc4a <_dtoa_r+0x6c2>
 800bc28:	4620      	mov	r0, r4
 800bc2a:	ee18 1a10 	vmov	r1, s16
 800bc2e:	f000 ffbf 	bl	800cbb0 <_Bfree>
 800bc32:	2300      	movs	r3, #0
 800bc34:	9800      	ldr	r0, [sp, #0]
 800bc36:	702b      	strb	r3, [r5, #0]
 800bc38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	6018      	str	r0, [r3, #0]
 800bc3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f43f acf1 	beq.w	800b628 <_dtoa_r+0xa0>
 800bc46:	601d      	str	r5, [r3, #0]
 800bc48:	e4ee      	b.n	800b628 <_dtoa_r+0xa0>
 800bc4a:	9f00      	ldr	r7, [sp, #0]
 800bc4c:	462b      	mov	r3, r5
 800bc4e:	461d      	mov	r5, r3
 800bc50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc54:	2a39      	cmp	r2, #57	; 0x39
 800bc56:	d106      	bne.n	800bc66 <_dtoa_r+0x6de>
 800bc58:	9a01      	ldr	r2, [sp, #4]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d1f7      	bne.n	800bc4e <_dtoa_r+0x6c6>
 800bc5e:	9901      	ldr	r1, [sp, #4]
 800bc60:	2230      	movs	r2, #48	; 0x30
 800bc62:	3701      	adds	r7, #1
 800bc64:	700a      	strb	r2, [r1, #0]
 800bc66:	781a      	ldrb	r2, [r3, #0]
 800bc68:	3201      	adds	r2, #1
 800bc6a:	701a      	strb	r2, [r3, #0]
 800bc6c:	e790      	b.n	800bb90 <_dtoa_r+0x608>
 800bc6e:	4ba6      	ldr	r3, [pc, #664]	; (800bf08 <_dtoa_r+0x980>)
 800bc70:	2200      	movs	r2, #0
 800bc72:	f7f4 fcc1 	bl	80005f8 <__aeabi_dmul>
 800bc76:	2200      	movs	r2, #0
 800bc78:	2300      	movs	r3, #0
 800bc7a:	4606      	mov	r6, r0
 800bc7c:	460f      	mov	r7, r1
 800bc7e:	f7f4 ff23 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc82:	2800      	cmp	r0, #0
 800bc84:	d09d      	beq.n	800bbc2 <_dtoa_r+0x63a>
 800bc86:	e7cf      	b.n	800bc28 <_dtoa_r+0x6a0>
 800bc88:	9a08      	ldr	r2, [sp, #32]
 800bc8a:	2a00      	cmp	r2, #0
 800bc8c:	f000 80d7 	beq.w	800be3e <_dtoa_r+0x8b6>
 800bc90:	9a06      	ldr	r2, [sp, #24]
 800bc92:	2a01      	cmp	r2, #1
 800bc94:	f300 80ba 	bgt.w	800be0c <_dtoa_r+0x884>
 800bc98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc9a:	2a00      	cmp	r2, #0
 800bc9c:	f000 80b2 	beq.w	800be04 <_dtoa_r+0x87c>
 800bca0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bca4:	9e07      	ldr	r6, [sp, #28]
 800bca6:	9d04      	ldr	r5, [sp, #16]
 800bca8:	9a04      	ldr	r2, [sp, #16]
 800bcaa:	441a      	add	r2, r3
 800bcac:	9204      	str	r2, [sp, #16]
 800bcae:	9a05      	ldr	r2, [sp, #20]
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	441a      	add	r2, r3
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	9205      	str	r2, [sp, #20]
 800bcb8:	f001 f87c 	bl	800cdb4 <__i2b>
 800bcbc:	4607      	mov	r7, r0
 800bcbe:	2d00      	cmp	r5, #0
 800bcc0:	dd0c      	ble.n	800bcdc <_dtoa_r+0x754>
 800bcc2:	9b05      	ldr	r3, [sp, #20]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	dd09      	ble.n	800bcdc <_dtoa_r+0x754>
 800bcc8:	42ab      	cmp	r3, r5
 800bcca:	9a04      	ldr	r2, [sp, #16]
 800bccc:	bfa8      	it	ge
 800bcce:	462b      	movge	r3, r5
 800bcd0:	1ad2      	subs	r2, r2, r3
 800bcd2:	9204      	str	r2, [sp, #16]
 800bcd4:	9a05      	ldr	r2, [sp, #20]
 800bcd6:	1aed      	subs	r5, r5, r3
 800bcd8:	1ad3      	subs	r3, r2, r3
 800bcda:	9305      	str	r3, [sp, #20]
 800bcdc:	9b07      	ldr	r3, [sp, #28]
 800bcde:	b31b      	cbz	r3, 800bd28 <_dtoa_r+0x7a0>
 800bce0:	9b08      	ldr	r3, [sp, #32]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	f000 80af 	beq.w	800be46 <_dtoa_r+0x8be>
 800bce8:	2e00      	cmp	r6, #0
 800bcea:	dd13      	ble.n	800bd14 <_dtoa_r+0x78c>
 800bcec:	4639      	mov	r1, r7
 800bcee:	4632      	mov	r2, r6
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f001 f91f 	bl	800cf34 <__pow5mult>
 800bcf6:	ee18 2a10 	vmov	r2, s16
 800bcfa:	4601      	mov	r1, r0
 800bcfc:	4607      	mov	r7, r0
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f001 f86e 	bl	800cde0 <__multiply>
 800bd04:	ee18 1a10 	vmov	r1, s16
 800bd08:	4680      	mov	r8, r0
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f000 ff50 	bl	800cbb0 <_Bfree>
 800bd10:	ee08 8a10 	vmov	s16, r8
 800bd14:	9b07      	ldr	r3, [sp, #28]
 800bd16:	1b9a      	subs	r2, r3, r6
 800bd18:	d006      	beq.n	800bd28 <_dtoa_r+0x7a0>
 800bd1a:	ee18 1a10 	vmov	r1, s16
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f001 f908 	bl	800cf34 <__pow5mult>
 800bd24:	ee08 0a10 	vmov	s16, r0
 800bd28:	2101      	movs	r1, #1
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f001 f842 	bl	800cdb4 <__i2b>
 800bd30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	4606      	mov	r6, r0
 800bd36:	f340 8088 	ble.w	800be4a <_dtoa_r+0x8c2>
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	4601      	mov	r1, r0
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f001 f8f8 	bl	800cf34 <__pow5mult>
 800bd44:	9b06      	ldr	r3, [sp, #24]
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	4606      	mov	r6, r0
 800bd4a:	f340 8081 	ble.w	800be50 <_dtoa_r+0x8c8>
 800bd4e:	f04f 0800 	mov.w	r8, #0
 800bd52:	6933      	ldr	r3, [r6, #16]
 800bd54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd58:	6918      	ldr	r0, [r3, #16]
 800bd5a:	f000 ffdb 	bl	800cd14 <__hi0bits>
 800bd5e:	f1c0 0020 	rsb	r0, r0, #32
 800bd62:	9b05      	ldr	r3, [sp, #20]
 800bd64:	4418      	add	r0, r3
 800bd66:	f010 001f 	ands.w	r0, r0, #31
 800bd6a:	f000 8092 	beq.w	800be92 <_dtoa_r+0x90a>
 800bd6e:	f1c0 0320 	rsb	r3, r0, #32
 800bd72:	2b04      	cmp	r3, #4
 800bd74:	f340 808a 	ble.w	800be8c <_dtoa_r+0x904>
 800bd78:	f1c0 001c 	rsb	r0, r0, #28
 800bd7c:	9b04      	ldr	r3, [sp, #16]
 800bd7e:	4403      	add	r3, r0
 800bd80:	9304      	str	r3, [sp, #16]
 800bd82:	9b05      	ldr	r3, [sp, #20]
 800bd84:	4403      	add	r3, r0
 800bd86:	4405      	add	r5, r0
 800bd88:	9305      	str	r3, [sp, #20]
 800bd8a:	9b04      	ldr	r3, [sp, #16]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	dd07      	ble.n	800bda0 <_dtoa_r+0x818>
 800bd90:	ee18 1a10 	vmov	r1, s16
 800bd94:	461a      	mov	r2, r3
 800bd96:	4620      	mov	r0, r4
 800bd98:	f001 f926 	bl	800cfe8 <__lshift>
 800bd9c:	ee08 0a10 	vmov	s16, r0
 800bda0:	9b05      	ldr	r3, [sp, #20]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	dd05      	ble.n	800bdb2 <_dtoa_r+0x82a>
 800bda6:	4631      	mov	r1, r6
 800bda8:	461a      	mov	r2, r3
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f001 f91c 	bl	800cfe8 <__lshift>
 800bdb0:	4606      	mov	r6, r0
 800bdb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d06e      	beq.n	800be96 <_dtoa_r+0x90e>
 800bdb8:	ee18 0a10 	vmov	r0, s16
 800bdbc:	4631      	mov	r1, r6
 800bdbe:	f001 f983 	bl	800d0c8 <__mcmp>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	da67      	bge.n	800be96 <_dtoa_r+0x90e>
 800bdc6:	9b00      	ldr	r3, [sp, #0]
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	ee18 1a10 	vmov	r1, s16
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	220a      	movs	r2, #10
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f000 ff0d 	bl	800cbf4 <__multadd>
 800bdda:	9b08      	ldr	r3, [sp, #32]
 800bddc:	ee08 0a10 	vmov	s16, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f000 81b1 	beq.w	800c148 <_dtoa_r+0xbc0>
 800bde6:	2300      	movs	r3, #0
 800bde8:	4639      	mov	r1, r7
 800bdea:	220a      	movs	r2, #10
 800bdec:	4620      	mov	r0, r4
 800bdee:	f000 ff01 	bl	800cbf4 <__multadd>
 800bdf2:	9b02      	ldr	r3, [sp, #8]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	4607      	mov	r7, r0
 800bdf8:	f300 808e 	bgt.w	800bf18 <_dtoa_r+0x990>
 800bdfc:	9b06      	ldr	r3, [sp, #24]
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	dc51      	bgt.n	800bea6 <_dtoa_r+0x91e>
 800be02:	e089      	b.n	800bf18 <_dtoa_r+0x990>
 800be04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be0a:	e74b      	b.n	800bca4 <_dtoa_r+0x71c>
 800be0c:	9b03      	ldr	r3, [sp, #12]
 800be0e:	1e5e      	subs	r6, r3, #1
 800be10:	9b07      	ldr	r3, [sp, #28]
 800be12:	42b3      	cmp	r3, r6
 800be14:	bfbf      	itttt	lt
 800be16:	9b07      	ldrlt	r3, [sp, #28]
 800be18:	9607      	strlt	r6, [sp, #28]
 800be1a:	1af2      	sublt	r2, r6, r3
 800be1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800be1e:	bfb6      	itet	lt
 800be20:	189b      	addlt	r3, r3, r2
 800be22:	1b9e      	subge	r6, r3, r6
 800be24:	930a      	strlt	r3, [sp, #40]	; 0x28
 800be26:	9b03      	ldr	r3, [sp, #12]
 800be28:	bfb8      	it	lt
 800be2a:	2600      	movlt	r6, #0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	bfb7      	itett	lt
 800be30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800be34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800be38:	1a9d      	sublt	r5, r3, r2
 800be3a:	2300      	movlt	r3, #0
 800be3c:	e734      	b.n	800bca8 <_dtoa_r+0x720>
 800be3e:	9e07      	ldr	r6, [sp, #28]
 800be40:	9d04      	ldr	r5, [sp, #16]
 800be42:	9f08      	ldr	r7, [sp, #32]
 800be44:	e73b      	b.n	800bcbe <_dtoa_r+0x736>
 800be46:	9a07      	ldr	r2, [sp, #28]
 800be48:	e767      	b.n	800bd1a <_dtoa_r+0x792>
 800be4a:	9b06      	ldr	r3, [sp, #24]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	dc18      	bgt.n	800be82 <_dtoa_r+0x8fa>
 800be50:	f1ba 0f00 	cmp.w	sl, #0
 800be54:	d115      	bne.n	800be82 <_dtoa_r+0x8fa>
 800be56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be5a:	b993      	cbnz	r3, 800be82 <_dtoa_r+0x8fa>
 800be5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be60:	0d1b      	lsrs	r3, r3, #20
 800be62:	051b      	lsls	r3, r3, #20
 800be64:	b183      	cbz	r3, 800be88 <_dtoa_r+0x900>
 800be66:	9b04      	ldr	r3, [sp, #16]
 800be68:	3301      	adds	r3, #1
 800be6a:	9304      	str	r3, [sp, #16]
 800be6c:	9b05      	ldr	r3, [sp, #20]
 800be6e:	3301      	adds	r3, #1
 800be70:	9305      	str	r3, [sp, #20]
 800be72:	f04f 0801 	mov.w	r8, #1
 800be76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f47f af6a 	bne.w	800bd52 <_dtoa_r+0x7ca>
 800be7e:	2001      	movs	r0, #1
 800be80:	e76f      	b.n	800bd62 <_dtoa_r+0x7da>
 800be82:	f04f 0800 	mov.w	r8, #0
 800be86:	e7f6      	b.n	800be76 <_dtoa_r+0x8ee>
 800be88:	4698      	mov	r8, r3
 800be8a:	e7f4      	b.n	800be76 <_dtoa_r+0x8ee>
 800be8c:	f43f af7d 	beq.w	800bd8a <_dtoa_r+0x802>
 800be90:	4618      	mov	r0, r3
 800be92:	301c      	adds	r0, #28
 800be94:	e772      	b.n	800bd7c <_dtoa_r+0x7f4>
 800be96:	9b03      	ldr	r3, [sp, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	dc37      	bgt.n	800bf0c <_dtoa_r+0x984>
 800be9c:	9b06      	ldr	r3, [sp, #24]
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	dd34      	ble.n	800bf0c <_dtoa_r+0x984>
 800bea2:	9b03      	ldr	r3, [sp, #12]
 800bea4:	9302      	str	r3, [sp, #8]
 800bea6:	9b02      	ldr	r3, [sp, #8]
 800bea8:	b96b      	cbnz	r3, 800bec6 <_dtoa_r+0x93e>
 800beaa:	4631      	mov	r1, r6
 800beac:	2205      	movs	r2, #5
 800beae:	4620      	mov	r0, r4
 800beb0:	f000 fea0 	bl	800cbf4 <__multadd>
 800beb4:	4601      	mov	r1, r0
 800beb6:	4606      	mov	r6, r0
 800beb8:	ee18 0a10 	vmov	r0, s16
 800bebc:	f001 f904 	bl	800d0c8 <__mcmp>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	f73f adbb 	bgt.w	800ba3c <_dtoa_r+0x4b4>
 800bec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bec8:	9d01      	ldr	r5, [sp, #4]
 800beca:	43db      	mvns	r3, r3
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	f04f 0800 	mov.w	r8, #0
 800bed2:	4631      	mov	r1, r6
 800bed4:	4620      	mov	r0, r4
 800bed6:	f000 fe6b 	bl	800cbb0 <_Bfree>
 800beda:	2f00      	cmp	r7, #0
 800bedc:	f43f aea4 	beq.w	800bc28 <_dtoa_r+0x6a0>
 800bee0:	f1b8 0f00 	cmp.w	r8, #0
 800bee4:	d005      	beq.n	800bef2 <_dtoa_r+0x96a>
 800bee6:	45b8      	cmp	r8, r7
 800bee8:	d003      	beq.n	800bef2 <_dtoa_r+0x96a>
 800beea:	4641      	mov	r1, r8
 800beec:	4620      	mov	r0, r4
 800beee:	f000 fe5f 	bl	800cbb0 <_Bfree>
 800bef2:	4639      	mov	r1, r7
 800bef4:	4620      	mov	r0, r4
 800bef6:	f000 fe5b 	bl	800cbb0 <_Bfree>
 800befa:	e695      	b.n	800bc28 <_dtoa_r+0x6a0>
 800befc:	2600      	movs	r6, #0
 800befe:	4637      	mov	r7, r6
 800bf00:	e7e1      	b.n	800bec6 <_dtoa_r+0x93e>
 800bf02:	9700      	str	r7, [sp, #0]
 800bf04:	4637      	mov	r7, r6
 800bf06:	e599      	b.n	800ba3c <_dtoa_r+0x4b4>
 800bf08:	40240000 	.word	0x40240000
 800bf0c:	9b08      	ldr	r3, [sp, #32]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f000 80ca 	beq.w	800c0a8 <_dtoa_r+0xb20>
 800bf14:	9b03      	ldr	r3, [sp, #12]
 800bf16:	9302      	str	r3, [sp, #8]
 800bf18:	2d00      	cmp	r5, #0
 800bf1a:	dd05      	ble.n	800bf28 <_dtoa_r+0x9a0>
 800bf1c:	4639      	mov	r1, r7
 800bf1e:	462a      	mov	r2, r5
 800bf20:	4620      	mov	r0, r4
 800bf22:	f001 f861 	bl	800cfe8 <__lshift>
 800bf26:	4607      	mov	r7, r0
 800bf28:	f1b8 0f00 	cmp.w	r8, #0
 800bf2c:	d05b      	beq.n	800bfe6 <_dtoa_r+0xa5e>
 800bf2e:	6879      	ldr	r1, [r7, #4]
 800bf30:	4620      	mov	r0, r4
 800bf32:	f000 fdfd 	bl	800cb30 <_Balloc>
 800bf36:	4605      	mov	r5, r0
 800bf38:	b928      	cbnz	r0, 800bf46 <_dtoa_r+0x9be>
 800bf3a:	4b87      	ldr	r3, [pc, #540]	; (800c158 <_dtoa_r+0xbd0>)
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf42:	f7ff bb3b 	b.w	800b5bc <_dtoa_r+0x34>
 800bf46:	693a      	ldr	r2, [r7, #16]
 800bf48:	3202      	adds	r2, #2
 800bf4a:	0092      	lsls	r2, r2, #2
 800bf4c:	f107 010c 	add.w	r1, r7, #12
 800bf50:	300c      	adds	r0, #12
 800bf52:	f7fd fad6 	bl	8009502 <memcpy>
 800bf56:	2201      	movs	r2, #1
 800bf58:	4629      	mov	r1, r5
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f001 f844 	bl	800cfe8 <__lshift>
 800bf60:	9b01      	ldr	r3, [sp, #4]
 800bf62:	f103 0901 	add.w	r9, r3, #1
 800bf66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	9305      	str	r3, [sp, #20]
 800bf6e:	f00a 0301 	and.w	r3, sl, #1
 800bf72:	46b8      	mov	r8, r7
 800bf74:	9304      	str	r3, [sp, #16]
 800bf76:	4607      	mov	r7, r0
 800bf78:	4631      	mov	r1, r6
 800bf7a:	ee18 0a10 	vmov	r0, s16
 800bf7e:	f7ff fa77 	bl	800b470 <quorem>
 800bf82:	4641      	mov	r1, r8
 800bf84:	9002      	str	r0, [sp, #8]
 800bf86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bf8a:	ee18 0a10 	vmov	r0, s16
 800bf8e:	f001 f89b 	bl	800d0c8 <__mcmp>
 800bf92:	463a      	mov	r2, r7
 800bf94:	9003      	str	r0, [sp, #12]
 800bf96:	4631      	mov	r1, r6
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f001 f8b1 	bl	800d100 <__mdiff>
 800bf9e:	68c2      	ldr	r2, [r0, #12]
 800bfa0:	f109 3bff 	add.w	fp, r9, #4294967295
 800bfa4:	4605      	mov	r5, r0
 800bfa6:	bb02      	cbnz	r2, 800bfea <_dtoa_r+0xa62>
 800bfa8:	4601      	mov	r1, r0
 800bfaa:	ee18 0a10 	vmov	r0, s16
 800bfae:	f001 f88b 	bl	800d0c8 <__mcmp>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	9207      	str	r2, [sp, #28]
 800bfba:	f000 fdf9 	bl	800cbb0 <_Bfree>
 800bfbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bfc2:	ea43 0102 	orr.w	r1, r3, r2
 800bfc6:	9b04      	ldr	r3, [sp, #16]
 800bfc8:	430b      	orrs	r3, r1
 800bfca:	464d      	mov	r5, r9
 800bfcc:	d10f      	bne.n	800bfee <_dtoa_r+0xa66>
 800bfce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bfd2:	d02a      	beq.n	800c02a <_dtoa_r+0xaa2>
 800bfd4:	9b03      	ldr	r3, [sp, #12]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	dd02      	ble.n	800bfe0 <_dtoa_r+0xa58>
 800bfda:	9b02      	ldr	r3, [sp, #8]
 800bfdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bfe0:	f88b a000 	strb.w	sl, [fp]
 800bfe4:	e775      	b.n	800bed2 <_dtoa_r+0x94a>
 800bfe6:	4638      	mov	r0, r7
 800bfe8:	e7ba      	b.n	800bf60 <_dtoa_r+0x9d8>
 800bfea:	2201      	movs	r2, #1
 800bfec:	e7e2      	b.n	800bfb4 <_dtoa_r+0xa2c>
 800bfee:	9b03      	ldr	r3, [sp, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	db04      	blt.n	800bffe <_dtoa_r+0xa76>
 800bff4:	9906      	ldr	r1, [sp, #24]
 800bff6:	430b      	orrs	r3, r1
 800bff8:	9904      	ldr	r1, [sp, #16]
 800bffa:	430b      	orrs	r3, r1
 800bffc:	d122      	bne.n	800c044 <_dtoa_r+0xabc>
 800bffe:	2a00      	cmp	r2, #0
 800c000:	ddee      	ble.n	800bfe0 <_dtoa_r+0xa58>
 800c002:	ee18 1a10 	vmov	r1, s16
 800c006:	2201      	movs	r2, #1
 800c008:	4620      	mov	r0, r4
 800c00a:	f000 ffed 	bl	800cfe8 <__lshift>
 800c00e:	4631      	mov	r1, r6
 800c010:	ee08 0a10 	vmov	s16, r0
 800c014:	f001 f858 	bl	800d0c8 <__mcmp>
 800c018:	2800      	cmp	r0, #0
 800c01a:	dc03      	bgt.n	800c024 <_dtoa_r+0xa9c>
 800c01c:	d1e0      	bne.n	800bfe0 <_dtoa_r+0xa58>
 800c01e:	f01a 0f01 	tst.w	sl, #1
 800c022:	d0dd      	beq.n	800bfe0 <_dtoa_r+0xa58>
 800c024:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c028:	d1d7      	bne.n	800bfda <_dtoa_r+0xa52>
 800c02a:	2339      	movs	r3, #57	; 0x39
 800c02c:	f88b 3000 	strb.w	r3, [fp]
 800c030:	462b      	mov	r3, r5
 800c032:	461d      	mov	r5, r3
 800c034:	3b01      	subs	r3, #1
 800c036:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c03a:	2a39      	cmp	r2, #57	; 0x39
 800c03c:	d071      	beq.n	800c122 <_dtoa_r+0xb9a>
 800c03e:	3201      	adds	r2, #1
 800c040:	701a      	strb	r2, [r3, #0]
 800c042:	e746      	b.n	800bed2 <_dtoa_r+0x94a>
 800c044:	2a00      	cmp	r2, #0
 800c046:	dd07      	ble.n	800c058 <_dtoa_r+0xad0>
 800c048:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c04c:	d0ed      	beq.n	800c02a <_dtoa_r+0xaa2>
 800c04e:	f10a 0301 	add.w	r3, sl, #1
 800c052:	f88b 3000 	strb.w	r3, [fp]
 800c056:	e73c      	b.n	800bed2 <_dtoa_r+0x94a>
 800c058:	9b05      	ldr	r3, [sp, #20]
 800c05a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c05e:	4599      	cmp	r9, r3
 800c060:	d047      	beq.n	800c0f2 <_dtoa_r+0xb6a>
 800c062:	ee18 1a10 	vmov	r1, s16
 800c066:	2300      	movs	r3, #0
 800c068:	220a      	movs	r2, #10
 800c06a:	4620      	mov	r0, r4
 800c06c:	f000 fdc2 	bl	800cbf4 <__multadd>
 800c070:	45b8      	cmp	r8, r7
 800c072:	ee08 0a10 	vmov	s16, r0
 800c076:	f04f 0300 	mov.w	r3, #0
 800c07a:	f04f 020a 	mov.w	r2, #10
 800c07e:	4641      	mov	r1, r8
 800c080:	4620      	mov	r0, r4
 800c082:	d106      	bne.n	800c092 <_dtoa_r+0xb0a>
 800c084:	f000 fdb6 	bl	800cbf4 <__multadd>
 800c088:	4680      	mov	r8, r0
 800c08a:	4607      	mov	r7, r0
 800c08c:	f109 0901 	add.w	r9, r9, #1
 800c090:	e772      	b.n	800bf78 <_dtoa_r+0x9f0>
 800c092:	f000 fdaf 	bl	800cbf4 <__multadd>
 800c096:	4639      	mov	r1, r7
 800c098:	4680      	mov	r8, r0
 800c09a:	2300      	movs	r3, #0
 800c09c:	220a      	movs	r2, #10
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f000 fda8 	bl	800cbf4 <__multadd>
 800c0a4:	4607      	mov	r7, r0
 800c0a6:	e7f1      	b.n	800c08c <_dtoa_r+0xb04>
 800c0a8:	9b03      	ldr	r3, [sp, #12]
 800c0aa:	9302      	str	r3, [sp, #8]
 800c0ac:	9d01      	ldr	r5, [sp, #4]
 800c0ae:	ee18 0a10 	vmov	r0, s16
 800c0b2:	4631      	mov	r1, r6
 800c0b4:	f7ff f9dc 	bl	800b470 <quorem>
 800c0b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c0bc:	9b01      	ldr	r3, [sp, #4]
 800c0be:	f805 ab01 	strb.w	sl, [r5], #1
 800c0c2:	1aea      	subs	r2, r5, r3
 800c0c4:	9b02      	ldr	r3, [sp, #8]
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	dd09      	ble.n	800c0de <_dtoa_r+0xb56>
 800c0ca:	ee18 1a10 	vmov	r1, s16
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	220a      	movs	r2, #10
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f000 fd8e 	bl	800cbf4 <__multadd>
 800c0d8:	ee08 0a10 	vmov	s16, r0
 800c0dc:	e7e7      	b.n	800c0ae <_dtoa_r+0xb26>
 800c0de:	9b02      	ldr	r3, [sp, #8]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	bfc8      	it	gt
 800c0e4:	461d      	movgt	r5, r3
 800c0e6:	9b01      	ldr	r3, [sp, #4]
 800c0e8:	bfd8      	it	le
 800c0ea:	2501      	movle	r5, #1
 800c0ec:	441d      	add	r5, r3
 800c0ee:	f04f 0800 	mov.w	r8, #0
 800c0f2:	ee18 1a10 	vmov	r1, s16
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f000 ff75 	bl	800cfe8 <__lshift>
 800c0fe:	4631      	mov	r1, r6
 800c100:	ee08 0a10 	vmov	s16, r0
 800c104:	f000 ffe0 	bl	800d0c8 <__mcmp>
 800c108:	2800      	cmp	r0, #0
 800c10a:	dc91      	bgt.n	800c030 <_dtoa_r+0xaa8>
 800c10c:	d102      	bne.n	800c114 <_dtoa_r+0xb8c>
 800c10e:	f01a 0f01 	tst.w	sl, #1
 800c112:	d18d      	bne.n	800c030 <_dtoa_r+0xaa8>
 800c114:	462b      	mov	r3, r5
 800c116:	461d      	mov	r5, r3
 800c118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c11c:	2a30      	cmp	r2, #48	; 0x30
 800c11e:	d0fa      	beq.n	800c116 <_dtoa_r+0xb8e>
 800c120:	e6d7      	b.n	800bed2 <_dtoa_r+0x94a>
 800c122:	9a01      	ldr	r2, [sp, #4]
 800c124:	429a      	cmp	r2, r3
 800c126:	d184      	bne.n	800c032 <_dtoa_r+0xaaa>
 800c128:	9b00      	ldr	r3, [sp, #0]
 800c12a:	3301      	adds	r3, #1
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	2331      	movs	r3, #49	; 0x31
 800c130:	7013      	strb	r3, [r2, #0]
 800c132:	e6ce      	b.n	800bed2 <_dtoa_r+0x94a>
 800c134:	4b09      	ldr	r3, [pc, #36]	; (800c15c <_dtoa_r+0xbd4>)
 800c136:	f7ff ba95 	b.w	800b664 <_dtoa_r+0xdc>
 800c13a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f47f aa6e 	bne.w	800b61e <_dtoa_r+0x96>
 800c142:	4b07      	ldr	r3, [pc, #28]	; (800c160 <_dtoa_r+0xbd8>)
 800c144:	f7ff ba8e 	b.w	800b664 <_dtoa_r+0xdc>
 800c148:	9b02      	ldr	r3, [sp, #8]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	dcae      	bgt.n	800c0ac <_dtoa_r+0xb24>
 800c14e:	9b06      	ldr	r3, [sp, #24]
 800c150:	2b02      	cmp	r3, #2
 800c152:	f73f aea8 	bgt.w	800bea6 <_dtoa_r+0x91e>
 800c156:	e7a9      	b.n	800c0ac <_dtoa_r+0xb24>
 800c158:	0800e094 	.word	0x0800e094
 800c15c:	0800de5c 	.word	0x0800de5c
 800c160:	0800e015 	.word	0x0800e015

0800c164 <__sflush_r>:
 800c164:	898a      	ldrh	r2, [r1, #12]
 800c166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c16a:	4605      	mov	r5, r0
 800c16c:	0710      	lsls	r0, r2, #28
 800c16e:	460c      	mov	r4, r1
 800c170:	d458      	bmi.n	800c224 <__sflush_r+0xc0>
 800c172:	684b      	ldr	r3, [r1, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	dc05      	bgt.n	800c184 <__sflush_r+0x20>
 800c178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	dc02      	bgt.n	800c184 <__sflush_r+0x20>
 800c17e:	2000      	movs	r0, #0
 800c180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c186:	2e00      	cmp	r6, #0
 800c188:	d0f9      	beq.n	800c17e <__sflush_r+0x1a>
 800c18a:	2300      	movs	r3, #0
 800c18c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c190:	682f      	ldr	r7, [r5, #0]
 800c192:	602b      	str	r3, [r5, #0]
 800c194:	d032      	beq.n	800c1fc <__sflush_r+0x98>
 800c196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	075a      	lsls	r2, r3, #29
 800c19c:	d505      	bpl.n	800c1aa <__sflush_r+0x46>
 800c19e:	6863      	ldr	r3, [r4, #4]
 800c1a0:	1ac0      	subs	r0, r0, r3
 800c1a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1a4:	b10b      	cbz	r3, 800c1aa <__sflush_r+0x46>
 800c1a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1a8:	1ac0      	subs	r0, r0, r3
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1b0:	6a21      	ldr	r1, [r4, #32]
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	47b0      	blx	r6
 800c1b6:	1c43      	adds	r3, r0, #1
 800c1b8:	89a3      	ldrh	r3, [r4, #12]
 800c1ba:	d106      	bne.n	800c1ca <__sflush_r+0x66>
 800c1bc:	6829      	ldr	r1, [r5, #0]
 800c1be:	291d      	cmp	r1, #29
 800c1c0:	d82c      	bhi.n	800c21c <__sflush_r+0xb8>
 800c1c2:	4a2a      	ldr	r2, [pc, #168]	; (800c26c <__sflush_r+0x108>)
 800c1c4:	40ca      	lsrs	r2, r1
 800c1c6:	07d6      	lsls	r6, r2, #31
 800c1c8:	d528      	bpl.n	800c21c <__sflush_r+0xb8>
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	6062      	str	r2, [r4, #4]
 800c1ce:	04d9      	lsls	r1, r3, #19
 800c1d0:	6922      	ldr	r2, [r4, #16]
 800c1d2:	6022      	str	r2, [r4, #0]
 800c1d4:	d504      	bpl.n	800c1e0 <__sflush_r+0x7c>
 800c1d6:	1c42      	adds	r2, r0, #1
 800c1d8:	d101      	bne.n	800c1de <__sflush_r+0x7a>
 800c1da:	682b      	ldr	r3, [r5, #0]
 800c1dc:	b903      	cbnz	r3, 800c1e0 <__sflush_r+0x7c>
 800c1de:	6560      	str	r0, [r4, #84]	; 0x54
 800c1e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1e2:	602f      	str	r7, [r5, #0]
 800c1e4:	2900      	cmp	r1, #0
 800c1e6:	d0ca      	beq.n	800c17e <__sflush_r+0x1a>
 800c1e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1ec:	4299      	cmp	r1, r3
 800c1ee:	d002      	beq.n	800c1f6 <__sflush_r+0x92>
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	f001 f975 	bl	800d4e0 <_free_r>
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	6360      	str	r0, [r4, #52]	; 0x34
 800c1fa:	e7c1      	b.n	800c180 <__sflush_r+0x1c>
 800c1fc:	6a21      	ldr	r1, [r4, #32]
 800c1fe:	2301      	movs	r3, #1
 800c200:	4628      	mov	r0, r5
 800c202:	47b0      	blx	r6
 800c204:	1c41      	adds	r1, r0, #1
 800c206:	d1c7      	bne.n	800c198 <__sflush_r+0x34>
 800c208:	682b      	ldr	r3, [r5, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d0c4      	beq.n	800c198 <__sflush_r+0x34>
 800c20e:	2b1d      	cmp	r3, #29
 800c210:	d001      	beq.n	800c216 <__sflush_r+0xb2>
 800c212:	2b16      	cmp	r3, #22
 800c214:	d101      	bne.n	800c21a <__sflush_r+0xb6>
 800c216:	602f      	str	r7, [r5, #0]
 800c218:	e7b1      	b.n	800c17e <__sflush_r+0x1a>
 800c21a:	89a3      	ldrh	r3, [r4, #12]
 800c21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c220:	81a3      	strh	r3, [r4, #12]
 800c222:	e7ad      	b.n	800c180 <__sflush_r+0x1c>
 800c224:	690f      	ldr	r7, [r1, #16]
 800c226:	2f00      	cmp	r7, #0
 800c228:	d0a9      	beq.n	800c17e <__sflush_r+0x1a>
 800c22a:	0793      	lsls	r3, r2, #30
 800c22c:	680e      	ldr	r6, [r1, #0]
 800c22e:	bf08      	it	eq
 800c230:	694b      	ldreq	r3, [r1, #20]
 800c232:	600f      	str	r7, [r1, #0]
 800c234:	bf18      	it	ne
 800c236:	2300      	movne	r3, #0
 800c238:	eba6 0807 	sub.w	r8, r6, r7
 800c23c:	608b      	str	r3, [r1, #8]
 800c23e:	f1b8 0f00 	cmp.w	r8, #0
 800c242:	dd9c      	ble.n	800c17e <__sflush_r+0x1a>
 800c244:	6a21      	ldr	r1, [r4, #32]
 800c246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c248:	4643      	mov	r3, r8
 800c24a:	463a      	mov	r2, r7
 800c24c:	4628      	mov	r0, r5
 800c24e:	47b0      	blx	r6
 800c250:	2800      	cmp	r0, #0
 800c252:	dc06      	bgt.n	800c262 <__sflush_r+0xfe>
 800c254:	89a3      	ldrh	r3, [r4, #12]
 800c256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c25a:	81a3      	strh	r3, [r4, #12]
 800c25c:	f04f 30ff 	mov.w	r0, #4294967295
 800c260:	e78e      	b.n	800c180 <__sflush_r+0x1c>
 800c262:	4407      	add	r7, r0
 800c264:	eba8 0800 	sub.w	r8, r8, r0
 800c268:	e7e9      	b.n	800c23e <__sflush_r+0xda>
 800c26a:	bf00      	nop
 800c26c:	20400001 	.word	0x20400001

0800c270 <_fflush_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	690b      	ldr	r3, [r1, #16]
 800c274:	4605      	mov	r5, r0
 800c276:	460c      	mov	r4, r1
 800c278:	b913      	cbnz	r3, 800c280 <_fflush_r+0x10>
 800c27a:	2500      	movs	r5, #0
 800c27c:	4628      	mov	r0, r5
 800c27e:	bd38      	pop	{r3, r4, r5, pc}
 800c280:	b118      	cbz	r0, 800c28a <_fflush_r+0x1a>
 800c282:	6983      	ldr	r3, [r0, #24]
 800c284:	b90b      	cbnz	r3, 800c28a <_fflush_r+0x1a>
 800c286:	f7fd f877 	bl	8009378 <__sinit>
 800c28a:	4b14      	ldr	r3, [pc, #80]	; (800c2dc <_fflush_r+0x6c>)
 800c28c:	429c      	cmp	r4, r3
 800c28e:	d11b      	bne.n	800c2c8 <_fflush_r+0x58>
 800c290:	686c      	ldr	r4, [r5, #4]
 800c292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d0ef      	beq.n	800c27a <_fflush_r+0xa>
 800c29a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c29c:	07d0      	lsls	r0, r2, #31
 800c29e:	d404      	bmi.n	800c2aa <_fflush_r+0x3a>
 800c2a0:	0599      	lsls	r1, r3, #22
 800c2a2:	d402      	bmi.n	800c2aa <_fflush_r+0x3a>
 800c2a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2a6:	f7fd f92a 	bl	80094fe <__retarget_lock_acquire_recursive>
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	4621      	mov	r1, r4
 800c2ae:	f7ff ff59 	bl	800c164 <__sflush_r>
 800c2b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2b4:	07da      	lsls	r2, r3, #31
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	d4e0      	bmi.n	800c27c <_fflush_r+0xc>
 800c2ba:	89a3      	ldrh	r3, [r4, #12]
 800c2bc:	059b      	lsls	r3, r3, #22
 800c2be:	d4dd      	bmi.n	800c27c <_fflush_r+0xc>
 800c2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2c2:	f7fd f91d 	bl	8009500 <__retarget_lock_release_recursive>
 800c2c6:	e7d9      	b.n	800c27c <_fflush_r+0xc>
 800c2c8:	4b05      	ldr	r3, [pc, #20]	; (800c2e0 <_fflush_r+0x70>)
 800c2ca:	429c      	cmp	r4, r3
 800c2cc:	d101      	bne.n	800c2d2 <_fflush_r+0x62>
 800c2ce:	68ac      	ldr	r4, [r5, #8]
 800c2d0:	e7df      	b.n	800c292 <_fflush_r+0x22>
 800c2d2:	4b04      	ldr	r3, [pc, #16]	; (800c2e4 <_fflush_r+0x74>)
 800c2d4:	429c      	cmp	r4, r3
 800c2d6:	bf08      	it	eq
 800c2d8:	68ec      	ldreq	r4, [r5, #12]
 800c2da:	e7da      	b.n	800c292 <_fflush_r+0x22>
 800c2dc:	0800de08 	.word	0x0800de08
 800c2e0:	0800de28 	.word	0x0800de28
 800c2e4:	0800dde8 	.word	0x0800dde8

0800c2e8 <fiprintf>:
 800c2e8:	b40e      	push	{r1, r2, r3}
 800c2ea:	b503      	push	{r0, r1, lr}
 800c2ec:	4601      	mov	r1, r0
 800c2ee:	ab03      	add	r3, sp, #12
 800c2f0:	4805      	ldr	r0, [pc, #20]	; (800c308 <fiprintf+0x20>)
 800c2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2f6:	6800      	ldr	r0, [r0, #0]
 800c2f8:	9301      	str	r3, [sp, #4]
 800c2fa:	f001 fac3 	bl	800d884 <_vfiprintf_r>
 800c2fe:	b002      	add	sp, #8
 800c300:	f85d eb04 	ldr.w	lr, [sp], #4
 800c304:	b003      	add	sp, #12
 800c306:	4770      	bx	lr
 800c308:	20000044 	.word	0x20000044

0800c30c <rshift>:
 800c30c:	6903      	ldr	r3, [r0, #16]
 800c30e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c312:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c316:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c31a:	f100 0414 	add.w	r4, r0, #20
 800c31e:	dd45      	ble.n	800c3ac <rshift+0xa0>
 800c320:	f011 011f 	ands.w	r1, r1, #31
 800c324:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c328:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c32c:	d10c      	bne.n	800c348 <rshift+0x3c>
 800c32e:	f100 0710 	add.w	r7, r0, #16
 800c332:	4629      	mov	r1, r5
 800c334:	42b1      	cmp	r1, r6
 800c336:	d334      	bcc.n	800c3a2 <rshift+0x96>
 800c338:	1a9b      	subs	r3, r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	1eea      	subs	r2, r5, #3
 800c33e:	4296      	cmp	r6, r2
 800c340:	bf38      	it	cc
 800c342:	2300      	movcc	r3, #0
 800c344:	4423      	add	r3, r4
 800c346:	e015      	b.n	800c374 <rshift+0x68>
 800c348:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c34c:	f1c1 0820 	rsb	r8, r1, #32
 800c350:	40cf      	lsrs	r7, r1
 800c352:	f105 0e04 	add.w	lr, r5, #4
 800c356:	46a1      	mov	r9, r4
 800c358:	4576      	cmp	r6, lr
 800c35a:	46f4      	mov	ip, lr
 800c35c:	d815      	bhi.n	800c38a <rshift+0x7e>
 800c35e:	1a9a      	subs	r2, r3, r2
 800c360:	0092      	lsls	r2, r2, #2
 800c362:	3a04      	subs	r2, #4
 800c364:	3501      	adds	r5, #1
 800c366:	42ae      	cmp	r6, r5
 800c368:	bf38      	it	cc
 800c36a:	2200      	movcc	r2, #0
 800c36c:	18a3      	adds	r3, r4, r2
 800c36e:	50a7      	str	r7, [r4, r2]
 800c370:	b107      	cbz	r7, 800c374 <rshift+0x68>
 800c372:	3304      	adds	r3, #4
 800c374:	1b1a      	subs	r2, r3, r4
 800c376:	42a3      	cmp	r3, r4
 800c378:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c37c:	bf08      	it	eq
 800c37e:	2300      	moveq	r3, #0
 800c380:	6102      	str	r2, [r0, #16]
 800c382:	bf08      	it	eq
 800c384:	6143      	streq	r3, [r0, #20]
 800c386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c38a:	f8dc c000 	ldr.w	ip, [ip]
 800c38e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c392:	ea4c 0707 	orr.w	r7, ip, r7
 800c396:	f849 7b04 	str.w	r7, [r9], #4
 800c39a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c39e:	40cf      	lsrs	r7, r1
 800c3a0:	e7da      	b.n	800c358 <rshift+0x4c>
 800c3a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c3a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c3aa:	e7c3      	b.n	800c334 <rshift+0x28>
 800c3ac:	4623      	mov	r3, r4
 800c3ae:	e7e1      	b.n	800c374 <rshift+0x68>

0800c3b0 <__hexdig_fun>:
 800c3b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c3b4:	2b09      	cmp	r3, #9
 800c3b6:	d802      	bhi.n	800c3be <__hexdig_fun+0xe>
 800c3b8:	3820      	subs	r0, #32
 800c3ba:	b2c0      	uxtb	r0, r0
 800c3bc:	4770      	bx	lr
 800c3be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c3c2:	2b05      	cmp	r3, #5
 800c3c4:	d801      	bhi.n	800c3ca <__hexdig_fun+0x1a>
 800c3c6:	3847      	subs	r0, #71	; 0x47
 800c3c8:	e7f7      	b.n	800c3ba <__hexdig_fun+0xa>
 800c3ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c3ce:	2b05      	cmp	r3, #5
 800c3d0:	d801      	bhi.n	800c3d6 <__hexdig_fun+0x26>
 800c3d2:	3827      	subs	r0, #39	; 0x27
 800c3d4:	e7f1      	b.n	800c3ba <__hexdig_fun+0xa>
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	4770      	bx	lr
	...

0800c3dc <__gethex>:
 800c3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e0:	ed2d 8b02 	vpush	{d8}
 800c3e4:	b089      	sub	sp, #36	; 0x24
 800c3e6:	ee08 0a10 	vmov	s16, r0
 800c3ea:	9304      	str	r3, [sp, #16]
 800c3ec:	4bb4      	ldr	r3, [pc, #720]	; (800c6c0 <__gethex+0x2e4>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	9301      	str	r3, [sp, #4]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	468b      	mov	fp, r1
 800c3f6:	4690      	mov	r8, r2
 800c3f8:	f7f3 feea 	bl	80001d0 <strlen>
 800c3fc:	9b01      	ldr	r3, [sp, #4]
 800c3fe:	f8db 2000 	ldr.w	r2, [fp]
 800c402:	4403      	add	r3, r0
 800c404:	4682      	mov	sl, r0
 800c406:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c40a:	9305      	str	r3, [sp, #20]
 800c40c:	1c93      	adds	r3, r2, #2
 800c40e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c412:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c416:	32fe      	adds	r2, #254	; 0xfe
 800c418:	18d1      	adds	r1, r2, r3
 800c41a:	461f      	mov	r7, r3
 800c41c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c420:	9100      	str	r1, [sp, #0]
 800c422:	2830      	cmp	r0, #48	; 0x30
 800c424:	d0f8      	beq.n	800c418 <__gethex+0x3c>
 800c426:	f7ff ffc3 	bl	800c3b0 <__hexdig_fun>
 800c42a:	4604      	mov	r4, r0
 800c42c:	2800      	cmp	r0, #0
 800c42e:	d13a      	bne.n	800c4a6 <__gethex+0xca>
 800c430:	9901      	ldr	r1, [sp, #4]
 800c432:	4652      	mov	r2, sl
 800c434:	4638      	mov	r0, r7
 800c436:	f001 fb6f 	bl	800db18 <strncmp>
 800c43a:	4605      	mov	r5, r0
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d168      	bne.n	800c512 <__gethex+0x136>
 800c440:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c444:	eb07 060a 	add.w	r6, r7, sl
 800c448:	f7ff ffb2 	bl	800c3b0 <__hexdig_fun>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d062      	beq.n	800c516 <__gethex+0x13a>
 800c450:	4633      	mov	r3, r6
 800c452:	7818      	ldrb	r0, [r3, #0]
 800c454:	2830      	cmp	r0, #48	; 0x30
 800c456:	461f      	mov	r7, r3
 800c458:	f103 0301 	add.w	r3, r3, #1
 800c45c:	d0f9      	beq.n	800c452 <__gethex+0x76>
 800c45e:	f7ff ffa7 	bl	800c3b0 <__hexdig_fun>
 800c462:	2301      	movs	r3, #1
 800c464:	fab0 f480 	clz	r4, r0
 800c468:	0964      	lsrs	r4, r4, #5
 800c46a:	4635      	mov	r5, r6
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	463a      	mov	r2, r7
 800c470:	4616      	mov	r6, r2
 800c472:	3201      	adds	r2, #1
 800c474:	7830      	ldrb	r0, [r6, #0]
 800c476:	f7ff ff9b 	bl	800c3b0 <__hexdig_fun>
 800c47a:	2800      	cmp	r0, #0
 800c47c:	d1f8      	bne.n	800c470 <__gethex+0x94>
 800c47e:	9901      	ldr	r1, [sp, #4]
 800c480:	4652      	mov	r2, sl
 800c482:	4630      	mov	r0, r6
 800c484:	f001 fb48 	bl	800db18 <strncmp>
 800c488:	b980      	cbnz	r0, 800c4ac <__gethex+0xd0>
 800c48a:	b94d      	cbnz	r5, 800c4a0 <__gethex+0xc4>
 800c48c:	eb06 050a 	add.w	r5, r6, sl
 800c490:	462a      	mov	r2, r5
 800c492:	4616      	mov	r6, r2
 800c494:	3201      	adds	r2, #1
 800c496:	7830      	ldrb	r0, [r6, #0]
 800c498:	f7ff ff8a 	bl	800c3b0 <__hexdig_fun>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	d1f8      	bne.n	800c492 <__gethex+0xb6>
 800c4a0:	1bad      	subs	r5, r5, r6
 800c4a2:	00ad      	lsls	r5, r5, #2
 800c4a4:	e004      	b.n	800c4b0 <__gethex+0xd4>
 800c4a6:	2400      	movs	r4, #0
 800c4a8:	4625      	mov	r5, r4
 800c4aa:	e7e0      	b.n	800c46e <__gethex+0x92>
 800c4ac:	2d00      	cmp	r5, #0
 800c4ae:	d1f7      	bne.n	800c4a0 <__gethex+0xc4>
 800c4b0:	7833      	ldrb	r3, [r6, #0]
 800c4b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c4b6:	2b50      	cmp	r3, #80	; 0x50
 800c4b8:	d13b      	bne.n	800c532 <__gethex+0x156>
 800c4ba:	7873      	ldrb	r3, [r6, #1]
 800c4bc:	2b2b      	cmp	r3, #43	; 0x2b
 800c4be:	d02c      	beq.n	800c51a <__gethex+0x13e>
 800c4c0:	2b2d      	cmp	r3, #45	; 0x2d
 800c4c2:	d02e      	beq.n	800c522 <__gethex+0x146>
 800c4c4:	1c71      	adds	r1, r6, #1
 800c4c6:	f04f 0900 	mov.w	r9, #0
 800c4ca:	7808      	ldrb	r0, [r1, #0]
 800c4cc:	f7ff ff70 	bl	800c3b0 <__hexdig_fun>
 800c4d0:	1e43      	subs	r3, r0, #1
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	2b18      	cmp	r3, #24
 800c4d6:	d82c      	bhi.n	800c532 <__gethex+0x156>
 800c4d8:	f1a0 0210 	sub.w	r2, r0, #16
 800c4dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c4e0:	f7ff ff66 	bl	800c3b0 <__hexdig_fun>
 800c4e4:	1e43      	subs	r3, r0, #1
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	2b18      	cmp	r3, #24
 800c4ea:	d91d      	bls.n	800c528 <__gethex+0x14c>
 800c4ec:	f1b9 0f00 	cmp.w	r9, #0
 800c4f0:	d000      	beq.n	800c4f4 <__gethex+0x118>
 800c4f2:	4252      	negs	r2, r2
 800c4f4:	4415      	add	r5, r2
 800c4f6:	f8cb 1000 	str.w	r1, [fp]
 800c4fa:	b1e4      	cbz	r4, 800c536 <__gethex+0x15a>
 800c4fc:	9b00      	ldr	r3, [sp, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	bf14      	ite	ne
 800c502:	2700      	movne	r7, #0
 800c504:	2706      	moveq	r7, #6
 800c506:	4638      	mov	r0, r7
 800c508:	b009      	add	sp, #36	; 0x24
 800c50a:	ecbd 8b02 	vpop	{d8}
 800c50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c512:	463e      	mov	r6, r7
 800c514:	4625      	mov	r5, r4
 800c516:	2401      	movs	r4, #1
 800c518:	e7ca      	b.n	800c4b0 <__gethex+0xd4>
 800c51a:	f04f 0900 	mov.w	r9, #0
 800c51e:	1cb1      	adds	r1, r6, #2
 800c520:	e7d3      	b.n	800c4ca <__gethex+0xee>
 800c522:	f04f 0901 	mov.w	r9, #1
 800c526:	e7fa      	b.n	800c51e <__gethex+0x142>
 800c528:	230a      	movs	r3, #10
 800c52a:	fb03 0202 	mla	r2, r3, r2, r0
 800c52e:	3a10      	subs	r2, #16
 800c530:	e7d4      	b.n	800c4dc <__gethex+0x100>
 800c532:	4631      	mov	r1, r6
 800c534:	e7df      	b.n	800c4f6 <__gethex+0x11a>
 800c536:	1bf3      	subs	r3, r6, r7
 800c538:	3b01      	subs	r3, #1
 800c53a:	4621      	mov	r1, r4
 800c53c:	2b07      	cmp	r3, #7
 800c53e:	dc0b      	bgt.n	800c558 <__gethex+0x17c>
 800c540:	ee18 0a10 	vmov	r0, s16
 800c544:	f000 faf4 	bl	800cb30 <_Balloc>
 800c548:	4604      	mov	r4, r0
 800c54a:	b940      	cbnz	r0, 800c55e <__gethex+0x182>
 800c54c:	4b5d      	ldr	r3, [pc, #372]	; (800c6c4 <__gethex+0x2e8>)
 800c54e:	4602      	mov	r2, r0
 800c550:	21de      	movs	r1, #222	; 0xde
 800c552:	485d      	ldr	r0, [pc, #372]	; (800c6c8 <__gethex+0x2ec>)
 800c554:	f7fe ff5e 	bl	800b414 <__assert_func>
 800c558:	3101      	adds	r1, #1
 800c55a:	105b      	asrs	r3, r3, #1
 800c55c:	e7ee      	b.n	800c53c <__gethex+0x160>
 800c55e:	f100 0914 	add.w	r9, r0, #20
 800c562:	f04f 0b00 	mov.w	fp, #0
 800c566:	f1ca 0301 	rsb	r3, sl, #1
 800c56a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c56e:	f8cd b000 	str.w	fp, [sp]
 800c572:	9306      	str	r3, [sp, #24]
 800c574:	42b7      	cmp	r7, r6
 800c576:	d340      	bcc.n	800c5fa <__gethex+0x21e>
 800c578:	9802      	ldr	r0, [sp, #8]
 800c57a:	9b00      	ldr	r3, [sp, #0]
 800c57c:	f840 3b04 	str.w	r3, [r0], #4
 800c580:	eba0 0009 	sub.w	r0, r0, r9
 800c584:	1080      	asrs	r0, r0, #2
 800c586:	0146      	lsls	r6, r0, #5
 800c588:	6120      	str	r0, [r4, #16]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f000 fbc2 	bl	800cd14 <__hi0bits>
 800c590:	1a30      	subs	r0, r6, r0
 800c592:	f8d8 6000 	ldr.w	r6, [r8]
 800c596:	42b0      	cmp	r0, r6
 800c598:	dd63      	ble.n	800c662 <__gethex+0x286>
 800c59a:	1b87      	subs	r7, r0, r6
 800c59c:	4639      	mov	r1, r7
 800c59e:	4620      	mov	r0, r4
 800c5a0:	f000 ff66 	bl	800d470 <__any_on>
 800c5a4:	4682      	mov	sl, r0
 800c5a6:	b1a8      	cbz	r0, 800c5d4 <__gethex+0x1f8>
 800c5a8:	1e7b      	subs	r3, r7, #1
 800c5aa:	1159      	asrs	r1, r3, #5
 800c5ac:	f003 021f 	and.w	r2, r3, #31
 800c5b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c5b4:	f04f 0a01 	mov.w	sl, #1
 800c5b8:	fa0a f202 	lsl.w	r2, sl, r2
 800c5bc:	420a      	tst	r2, r1
 800c5be:	d009      	beq.n	800c5d4 <__gethex+0x1f8>
 800c5c0:	4553      	cmp	r3, sl
 800c5c2:	dd05      	ble.n	800c5d0 <__gethex+0x1f4>
 800c5c4:	1eb9      	subs	r1, r7, #2
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f000 ff52 	bl	800d470 <__any_on>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d145      	bne.n	800c65c <__gethex+0x280>
 800c5d0:	f04f 0a02 	mov.w	sl, #2
 800c5d4:	4639      	mov	r1, r7
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f7ff fe98 	bl	800c30c <rshift>
 800c5dc:	443d      	add	r5, r7
 800c5de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5e2:	42ab      	cmp	r3, r5
 800c5e4:	da4c      	bge.n	800c680 <__gethex+0x2a4>
 800c5e6:	ee18 0a10 	vmov	r0, s16
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	f000 fae0 	bl	800cbb0 <_Bfree>
 800c5f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	6013      	str	r3, [r2, #0]
 800c5f6:	27a3      	movs	r7, #163	; 0xa3
 800c5f8:	e785      	b.n	800c506 <__gethex+0x12a>
 800c5fa:	1e73      	subs	r3, r6, #1
 800c5fc:	9a05      	ldr	r2, [sp, #20]
 800c5fe:	9303      	str	r3, [sp, #12]
 800c600:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c604:	4293      	cmp	r3, r2
 800c606:	d019      	beq.n	800c63c <__gethex+0x260>
 800c608:	f1bb 0f20 	cmp.w	fp, #32
 800c60c:	d107      	bne.n	800c61e <__gethex+0x242>
 800c60e:	9b02      	ldr	r3, [sp, #8]
 800c610:	9a00      	ldr	r2, [sp, #0]
 800c612:	f843 2b04 	str.w	r2, [r3], #4
 800c616:	9302      	str	r3, [sp, #8]
 800c618:	2300      	movs	r3, #0
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	469b      	mov	fp, r3
 800c61e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c622:	f7ff fec5 	bl	800c3b0 <__hexdig_fun>
 800c626:	9b00      	ldr	r3, [sp, #0]
 800c628:	f000 000f 	and.w	r0, r0, #15
 800c62c:	fa00 f00b 	lsl.w	r0, r0, fp
 800c630:	4303      	orrs	r3, r0
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	f10b 0b04 	add.w	fp, fp, #4
 800c638:	9b03      	ldr	r3, [sp, #12]
 800c63a:	e00d      	b.n	800c658 <__gethex+0x27c>
 800c63c:	9b03      	ldr	r3, [sp, #12]
 800c63e:	9a06      	ldr	r2, [sp, #24]
 800c640:	4413      	add	r3, r2
 800c642:	42bb      	cmp	r3, r7
 800c644:	d3e0      	bcc.n	800c608 <__gethex+0x22c>
 800c646:	4618      	mov	r0, r3
 800c648:	9901      	ldr	r1, [sp, #4]
 800c64a:	9307      	str	r3, [sp, #28]
 800c64c:	4652      	mov	r2, sl
 800c64e:	f001 fa63 	bl	800db18 <strncmp>
 800c652:	9b07      	ldr	r3, [sp, #28]
 800c654:	2800      	cmp	r0, #0
 800c656:	d1d7      	bne.n	800c608 <__gethex+0x22c>
 800c658:	461e      	mov	r6, r3
 800c65a:	e78b      	b.n	800c574 <__gethex+0x198>
 800c65c:	f04f 0a03 	mov.w	sl, #3
 800c660:	e7b8      	b.n	800c5d4 <__gethex+0x1f8>
 800c662:	da0a      	bge.n	800c67a <__gethex+0x29e>
 800c664:	1a37      	subs	r7, r6, r0
 800c666:	4621      	mov	r1, r4
 800c668:	ee18 0a10 	vmov	r0, s16
 800c66c:	463a      	mov	r2, r7
 800c66e:	f000 fcbb 	bl	800cfe8 <__lshift>
 800c672:	1bed      	subs	r5, r5, r7
 800c674:	4604      	mov	r4, r0
 800c676:	f100 0914 	add.w	r9, r0, #20
 800c67a:	f04f 0a00 	mov.w	sl, #0
 800c67e:	e7ae      	b.n	800c5de <__gethex+0x202>
 800c680:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c684:	42a8      	cmp	r0, r5
 800c686:	dd72      	ble.n	800c76e <__gethex+0x392>
 800c688:	1b45      	subs	r5, r0, r5
 800c68a:	42ae      	cmp	r6, r5
 800c68c:	dc36      	bgt.n	800c6fc <__gethex+0x320>
 800c68e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c692:	2b02      	cmp	r3, #2
 800c694:	d02a      	beq.n	800c6ec <__gethex+0x310>
 800c696:	2b03      	cmp	r3, #3
 800c698:	d02c      	beq.n	800c6f4 <__gethex+0x318>
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d11c      	bne.n	800c6d8 <__gethex+0x2fc>
 800c69e:	42ae      	cmp	r6, r5
 800c6a0:	d11a      	bne.n	800c6d8 <__gethex+0x2fc>
 800c6a2:	2e01      	cmp	r6, #1
 800c6a4:	d112      	bne.n	800c6cc <__gethex+0x2f0>
 800c6a6:	9a04      	ldr	r2, [sp, #16]
 800c6a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c6ac:	6013      	str	r3, [r2, #0]
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	6123      	str	r3, [r4, #16]
 800c6b2:	f8c9 3000 	str.w	r3, [r9]
 800c6b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6b8:	2762      	movs	r7, #98	; 0x62
 800c6ba:	601c      	str	r4, [r3, #0]
 800c6bc:	e723      	b.n	800c506 <__gethex+0x12a>
 800c6be:	bf00      	nop
 800c6c0:	0800e10c 	.word	0x0800e10c
 800c6c4:	0800e094 	.word	0x0800e094
 800c6c8:	0800e0a5 	.word	0x0800e0a5
 800c6cc:	1e71      	subs	r1, r6, #1
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	f000 fece 	bl	800d470 <__any_on>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d1e6      	bne.n	800c6a6 <__gethex+0x2ca>
 800c6d8:	ee18 0a10 	vmov	r0, s16
 800c6dc:	4621      	mov	r1, r4
 800c6de:	f000 fa67 	bl	800cbb0 <_Bfree>
 800c6e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	6013      	str	r3, [r2, #0]
 800c6e8:	2750      	movs	r7, #80	; 0x50
 800c6ea:	e70c      	b.n	800c506 <__gethex+0x12a>
 800c6ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1f2      	bne.n	800c6d8 <__gethex+0x2fc>
 800c6f2:	e7d8      	b.n	800c6a6 <__gethex+0x2ca>
 800c6f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1d5      	bne.n	800c6a6 <__gethex+0x2ca>
 800c6fa:	e7ed      	b.n	800c6d8 <__gethex+0x2fc>
 800c6fc:	1e6f      	subs	r7, r5, #1
 800c6fe:	f1ba 0f00 	cmp.w	sl, #0
 800c702:	d131      	bne.n	800c768 <__gethex+0x38c>
 800c704:	b127      	cbz	r7, 800c710 <__gethex+0x334>
 800c706:	4639      	mov	r1, r7
 800c708:	4620      	mov	r0, r4
 800c70a:	f000 feb1 	bl	800d470 <__any_on>
 800c70e:	4682      	mov	sl, r0
 800c710:	117b      	asrs	r3, r7, #5
 800c712:	2101      	movs	r1, #1
 800c714:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c718:	f007 071f 	and.w	r7, r7, #31
 800c71c:	fa01 f707 	lsl.w	r7, r1, r7
 800c720:	421f      	tst	r7, r3
 800c722:	4629      	mov	r1, r5
 800c724:	4620      	mov	r0, r4
 800c726:	bf18      	it	ne
 800c728:	f04a 0a02 	orrne.w	sl, sl, #2
 800c72c:	1b76      	subs	r6, r6, r5
 800c72e:	f7ff fded 	bl	800c30c <rshift>
 800c732:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c736:	2702      	movs	r7, #2
 800c738:	f1ba 0f00 	cmp.w	sl, #0
 800c73c:	d048      	beq.n	800c7d0 <__gethex+0x3f4>
 800c73e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c742:	2b02      	cmp	r3, #2
 800c744:	d015      	beq.n	800c772 <__gethex+0x396>
 800c746:	2b03      	cmp	r3, #3
 800c748:	d017      	beq.n	800c77a <__gethex+0x39e>
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d109      	bne.n	800c762 <__gethex+0x386>
 800c74e:	f01a 0f02 	tst.w	sl, #2
 800c752:	d006      	beq.n	800c762 <__gethex+0x386>
 800c754:	f8d9 0000 	ldr.w	r0, [r9]
 800c758:	ea4a 0a00 	orr.w	sl, sl, r0
 800c75c:	f01a 0f01 	tst.w	sl, #1
 800c760:	d10e      	bne.n	800c780 <__gethex+0x3a4>
 800c762:	f047 0710 	orr.w	r7, r7, #16
 800c766:	e033      	b.n	800c7d0 <__gethex+0x3f4>
 800c768:	f04f 0a01 	mov.w	sl, #1
 800c76c:	e7d0      	b.n	800c710 <__gethex+0x334>
 800c76e:	2701      	movs	r7, #1
 800c770:	e7e2      	b.n	800c738 <__gethex+0x35c>
 800c772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c774:	f1c3 0301 	rsb	r3, r3, #1
 800c778:	9315      	str	r3, [sp, #84]	; 0x54
 800c77a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d0f0      	beq.n	800c762 <__gethex+0x386>
 800c780:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c784:	f104 0314 	add.w	r3, r4, #20
 800c788:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c78c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c790:	f04f 0c00 	mov.w	ip, #0
 800c794:	4618      	mov	r0, r3
 800c796:	f853 2b04 	ldr.w	r2, [r3], #4
 800c79a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c79e:	d01c      	beq.n	800c7da <__gethex+0x3fe>
 800c7a0:	3201      	adds	r2, #1
 800c7a2:	6002      	str	r2, [r0, #0]
 800c7a4:	2f02      	cmp	r7, #2
 800c7a6:	f104 0314 	add.w	r3, r4, #20
 800c7aa:	d13f      	bne.n	800c82c <__gethex+0x450>
 800c7ac:	f8d8 2000 	ldr.w	r2, [r8]
 800c7b0:	3a01      	subs	r2, #1
 800c7b2:	42b2      	cmp	r2, r6
 800c7b4:	d10a      	bne.n	800c7cc <__gethex+0x3f0>
 800c7b6:	1171      	asrs	r1, r6, #5
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c7be:	f006 061f 	and.w	r6, r6, #31
 800c7c2:	fa02 f606 	lsl.w	r6, r2, r6
 800c7c6:	421e      	tst	r6, r3
 800c7c8:	bf18      	it	ne
 800c7ca:	4617      	movne	r7, r2
 800c7cc:	f047 0720 	orr.w	r7, r7, #32
 800c7d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7d2:	601c      	str	r4, [r3, #0]
 800c7d4:	9b04      	ldr	r3, [sp, #16]
 800c7d6:	601d      	str	r5, [r3, #0]
 800c7d8:	e695      	b.n	800c506 <__gethex+0x12a>
 800c7da:	4299      	cmp	r1, r3
 800c7dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c7e0:	d8d8      	bhi.n	800c794 <__gethex+0x3b8>
 800c7e2:	68a3      	ldr	r3, [r4, #8]
 800c7e4:	459b      	cmp	fp, r3
 800c7e6:	db19      	blt.n	800c81c <__gethex+0x440>
 800c7e8:	6861      	ldr	r1, [r4, #4]
 800c7ea:	ee18 0a10 	vmov	r0, s16
 800c7ee:	3101      	adds	r1, #1
 800c7f0:	f000 f99e 	bl	800cb30 <_Balloc>
 800c7f4:	4681      	mov	r9, r0
 800c7f6:	b918      	cbnz	r0, 800c800 <__gethex+0x424>
 800c7f8:	4b1a      	ldr	r3, [pc, #104]	; (800c864 <__gethex+0x488>)
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	2184      	movs	r1, #132	; 0x84
 800c7fe:	e6a8      	b.n	800c552 <__gethex+0x176>
 800c800:	6922      	ldr	r2, [r4, #16]
 800c802:	3202      	adds	r2, #2
 800c804:	f104 010c 	add.w	r1, r4, #12
 800c808:	0092      	lsls	r2, r2, #2
 800c80a:	300c      	adds	r0, #12
 800c80c:	f7fc fe79 	bl	8009502 <memcpy>
 800c810:	4621      	mov	r1, r4
 800c812:	ee18 0a10 	vmov	r0, s16
 800c816:	f000 f9cb 	bl	800cbb0 <_Bfree>
 800c81a:	464c      	mov	r4, r9
 800c81c:	6923      	ldr	r3, [r4, #16]
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c824:	6122      	str	r2, [r4, #16]
 800c826:	2201      	movs	r2, #1
 800c828:	615a      	str	r2, [r3, #20]
 800c82a:	e7bb      	b.n	800c7a4 <__gethex+0x3c8>
 800c82c:	6922      	ldr	r2, [r4, #16]
 800c82e:	455a      	cmp	r2, fp
 800c830:	dd0b      	ble.n	800c84a <__gethex+0x46e>
 800c832:	2101      	movs	r1, #1
 800c834:	4620      	mov	r0, r4
 800c836:	f7ff fd69 	bl	800c30c <rshift>
 800c83a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c83e:	3501      	adds	r5, #1
 800c840:	42ab      	cmp	r3, r5
 800c842:	f6ff aed0 	blt.w	800c5e6 <__gethex+0x20a>
 800c846:	2701      	movs	r7, #1
 800c848:	e7c0      	b.n	800c7cc <__gethex+0x3f0>
 800c84a:	f016 061f 	ands.w	r6, r6, #31
 800c84e:	d0fa      	beq.n	800c846 <__gethex+0x46a>
 800c850:	4453      	add	r3, sl
 800c852:	f1c6 0620 	rsb	r6, r6, #32
 800c856:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c85a:	f000 fa5b 	bl	800cd14 <__hi0bits>
 800c85e:	42b0      	cmp	r0, r6
 800c860:	dbe7      	blt.n	800c832 <__gethex+0x456>
 800c862:	e7f0      	b.n	800c846 <__gethex+0x46a>
 800c864:	0800e094 	.word	0x0800e094

0800c868 <L_shift>:
 800c868:	f1c2 0208 	rsb	r2, r2, #8
 800c86c:	0092      	lsls	r2, r2, #2
 800c86e:	b570      	push	{r4, r5, r6, lr}
 800c870:	f1c2 0620 	rsb	r6, r2, #32
 800c874:	6843      	ldr	r3, [r0, #4]
 800c876:	6804      	ldr	r4, [r0, #0]
 800c878:	fa03 f506 	lsl.w	r5, r3, r6
 800c87c:	432c      	orrs	r4, r5
 800c87e:	40d3      	lsrs	r3, r2
 800c880:	6004      	str	r4, [r0, #0]
 800c882:	f840 3f04 	str.w	r3, [r0, #4]!
 800c886:	4288      	cmp	r0, r1
 800c888:	d3f4      	bcc.n	800c874 <L_shift+0xc>
 800c88a:	bd70      	pop	{r4, r5, r6, pc}

0800c88c <__match>:
 800c88c:	b530      	push	{r4, r5, lr}
 800c88e:	6803      	ldr	r3, [r0, #0]
 800c890:	3301      	adds	r3, #1
 800c892:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c896:	b914      	cbnz	r4, 800c89e <__match+0x12>
 800c898:	6003      	str	r3, [r0, #0]
 800c89a:	2001      	movs	r0, #1
 800c89c:	bd30      	pop	{r4, r5, pc}
 800c89e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c8a6:	2d19      	cmp	r5, #25
 800c8a8:	bf98      	it	ls
 800c8aa:	3220      	addls	r2, #32
 800c8ac:	42a2      	cmp	r2, r4
 800c8ae:	d0f0      	beq.n	800c892 <__match+0x6>
 800c8b0:	2000      	movs	r0, #0
 800c8b2:	e7f3      	b.n	800c89c <__match+0x10>

0800c8b4 <__hexnan>:
 800c8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b8:	680b      	ldr	r3, [r1, #0]
 800c8ba:	115e      	asrs	r6, r3, #5
 800c8bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c8c0:	f013 031f 	ands.w	r3, r3, #31
 800c8c4:	b087      	sub	sp, #28
 800c8c6:	bf18      	it	ne
 800c8c8:	3604      	addne	r6, #4
 800c8ca:	2500      	movs	r5, #0
 800c8cc:	1f37      	subs	r7, r6, #4
 800c8ce:	4690      	mov	r8, r2
 800c8d0:	6802      	ldr	r2, [r0, #0]
 800c8d2:	9301      	str	r3, [sp, #4]
 800c8d4:	4682      	mov	sl, r0
 800c8d6:	f846 5c04 	str.w	r5, [r6, #-4]
 800c8da:	46b9      	mov	r9, r7
 800c8dc:	463c      	mov	r4, r7
 800c8de:	9502      	str	r5, [sp, #8]
 800c8e0:	46ab      	mov	fp, r5
 800c8e2:	7851      	ldrb	r1, [r2, #1]
 800c8e4:	1c53      	adds	r3, r2, #1
 800c8e6:	9303      	str	r3, [sp, #12]
 800c8e8:	b341      	cbz	r1, 800c93c <__hexnan+0x88>
 800c8ea:	4608      	mov	r0, r1
 800c8ec:	9205      	str	r2, [sp, #20]
 800c8ee:	9104      	str	r1, [sp, #16]
 800c8f0:	f7ff fd5e 	bl	800c3b0 <__hexdig_fun>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	d14f      	bne.n	800c998 <__hexnan+0xe4>
 800c8f8:	9904      	ldr	r1, [sp, #16]
 800c8fa:	9a05      	ldr	r2, [sp, #20]
 800c8fc:	2920      	cmp	r1, #32
 800c8fe:	d818      	bhi.n	800c932 <__hexnan+0x7e>
 800c900:	9b02      	ldr	r3, [sp, #8]
 800c902:	459b      	cmp	fp, r3
 800c904:	dd13      	ble.n	800c92e <__hexnan+0x7a>
 800c906:	454c      	cmp	r4, r9
 800c908:	d206      	bcs.n	800c918 <__hexnan+0x64>
 800c90a:	2d07      	cmp	r5, #7
 800c90c:	dc04      	bgt.n	800c918 <__hexnan+0x64>
 800c90e:	462a      	mov	r2, r5
 800c910:	4649      	mov	r1, r9
 800c912:	4620      	mov	r0, r4
 800c914:	f7ff ffa8 	bl	800c868 <L_shift>
 800c918:	4544      	cmp	r4, r8
 800c91a:	d950      	bls.n	800c9be <__hexnan+0x10a>
 800c91c:	2300      	movs	r3, #0
 800c91e:	f1a4 0904 	sub.w	r9, r4, #4
 800c922:	f844 3c04 	str.w	r3, [r4, #-4]
 800c926:	f8cd b008 	str.w	fp, [sp, #8]
 800c92a:	464c      	mov	r4, r9
 800c92c:	461d      	mov	r5, r3
 800c92e:	9a03      	ldr	r2, [sp, #12]
 800c930:	e7d7      	b.n	800c8e2 <__hexnan+0x2e>
 800c932:	2929      	cmp	r1, #41	; 0x29
 800c934:	d156      	bne.n	800c9e4 <__hexnan+0x130>
 800c936:	3202      	adds	r2, #2
 800c938:	f8ca 2000 	str.w	r2, [sl]
 800c93c:	f1bb 0f00 	cmp.w	fp, #0
 800c940:	d050      	beq.n	800c9e4 <__hexnan+0x130>
 800c942:	454c      	cmp	r4, r9
 800c944:	d206      	bcs.n	800c954 <__hexnan+0xa0>
 800c946:	2d07      	cmp	r5, #7
 800c948:	dc04      	bgt.n	800c954 <__hexnan+0xa0>
 800c94a:	462a      	mov	r2, r5
 800c94c:	4649      	mov	r1, r9
 800c94e:	4620      	mov	r0, r4
 800c950:	f7ff ff8a 	bl	800c868 <L_shift>
 800c954:	4544      	cmp	r4, r8
 800c956:	d934      	bls.n	800c9c2 <__hexnan+0x10e>
 800c958:	f1a8 0204 	sub.w	r2, r8, #4
 800c95c:	4623      	mov	r3, r4
 800c95e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c962:	f842 1f04 	str.w	r1, [r2, #4]!
 800c966:	429f      	cmp	r7, r3
 800c968:	d2f9      	bcs.n	800c95e <__hexnan+0xaa>
 800c96a:	1b3b      	subs	r3, r7, r4
 800c96c:	f023 0303 	bic.w	r3, r3, #3
 800c970:	3304      	adds	r3, #4
 800c972:	3401      	adds	r4, #1
 800c974:	3e03      	subs	r6, #3
 800c976:	42b4      	cmp	r4, r6
 800c978:	bf88      	it	hi
 800c97a:	2304      	movhi	r3, #4
 800c97c:	4443      	add	r3, r8
 800c97e:	2200      	movs	r2, #0
 800c980:	f843 2b04 	str.w	r2, [r3], #4
 800c984:	429f      	cmp	r7, r3
 800c986:	d2fb      	bcs.n	800c980 <__hexnan+0xcc>
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	b91b      	cbnz	r3, 800c994 <__hexnan+0xe0>
 800c98c:	4547      	cmp	r7, r8
 800c98e:	d127      	bne.n	800c9e0 <__hexnan+0x12c>
 800c990:	2301      	movs	r3, #1
 800c992:	603b      	str	r3, [r7, #0]
 800c994:	2005      	movs	r0, #5
 800c996:	e026      	b.n	800c9e6 <__hexnan+0x132>
 800c998:	3501      	adds	r5, #1
 800c99a:	2d08      	cmp	r5, #8
 800c99c:	f10b 0b01 	add.w	fp, fp, #1
 800c9a0:	dd06      	ble.n	800c9b0 <__hexnan+0xfc>
 800c9a2:	4544      	cmp	r4, r8
 800c9a4:	d9c3      	bls.n	800c92e <__hexnan+0x7a>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9ac:	2501      	movs	r5, #1
 800c9ae:	3c04      	subs	r4, #4
 800c9b0:	6822      	ldr	r2, [r4, #0]
 800c9b2:	f000 000f 	and.w	r0, r0, #15
 800c9b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c9ba:	6022      	str	r2, [r4, #0]
 800c9bc:	e7b7      	b.n	800c92e <__hexnan+0x7a>
 800c9be:	2508      	movs	r5, #8
 800c9c0:	e7b5      	b.n	800c92e <__hexnan+0x7a>
 800c9c2:	9b01      	ldr	r3, [sp, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d0df      	beq.n	800c988 <__hexnan+0xd4>
 800c9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9cc:	f1c3 0320 	rsb	r3, r3, #32
 800c9d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c9d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c9d8:	401a      	ands	r2, r3
 800c9da:	f846 2c04 	str.w	r2, [r6, #-4]
 800c9de:	e7d3      	b.n	800c988 <__hexnan+0xd4>
 800c9e0:	3f04      	subs	r7, #4
 800c9e2:	e7d1      	b.n	800c988 <__hexnan+0xd4>
 800c9e4:	2004      	movs	r0, #4
 800c9e6:	b007      	add	sp, #28
 800c9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9ec <_localeconv_r>:
 800c9ec:	4800      	ldr	r0, [pc, #0]	; (800c9f0 <_localeconv_r+0x4>)
 800c9ee:	4770      	bx	lr
 800c9f0:	2000019c 	.word	0x2000019c

0800c9f4 <_lseek_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	4d07      	ldr	r5, [pc, #28]	; (800ca14 <_lseek_r+0x20>)
 800c9f8:	4604      	mov	r4, r0
 800c9fa:	4608      	mov	r0, r1
 800c9fc:	4611      	mov	r1, r2
 800c9fe:	2200      	movs	r2, #0
 800ca00:	602a      	str	r2, [r5, #0]
 800ca02:	461a      	mov	r2, r3
 800ca04:	f7f4 fdf0 	bl	80015e8 <_lseek>
 800ca08:	1c43      	adds	r3, r0, #1
 800ca0a:	d102      	bne.n	800ca12 <_lseek_r+0x1e>
 800ca0c:	682b      	ldr	r3, [r5, #0]
 800ca0e:	b103      	cbz	r3, 800ca12 <_lseek_r+0x1e>
 800ca10:	6023      	str	r3, [r4, #0]
 800ca12:	bd38      	pop	{r3, r4, r5, pc}
 800ca14:	2000836c 	.word	0x2000836c

0800ca18 <__swhatbuf_r>:
 800ca18:	b570      	push	{r4, r5, r6, lr}
 800ca1a:	460e      	mov	r6, r1
 800ca1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca20:	2900      	cmp	r1, #0
 800ca22:	b096      	sub	sp, #88	; 0x58
 800ca24:	4614      	mov	r4, r2
 800ca26:	461d      	mov	r5, r3
 800ca28:	da08      	bge.n	800ca3c <__swhatbuf_r+0x24>
 800ca2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	602a      	str	r2, [r5, #0]
 800ca32:	061a      	lsls	r2, r3, #24
 800ca34:	d410      	bmi.n	800ca58 <__swhatbuf_r+0x40>
 800ca36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca3a:	e00e      	b.n	800ca5a <__swhatbuf_r+0x42>
 800ca3c:	466a      	mov	r2, sp
 800ca3e:	f001 f893 	bl	800db68 <_fstat_r>
 800ca42:	2800      	cmp	r0, #0
 800ca44:	dbf1      	blt.n	800ca2a <__swhatbuf_r+0x12>
 800ca46:	9a01      	ldr	r2, [sp, #4]
 800ca48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca50:	425a      	negs	r2, r3
 800ca52:	415a      	adcs	r2, r3
 800ca54:	602a      	str	r2, [r5, #0]
 800ca56:	e7ee      	b.n	800ca36 <__swhatbuf_r+0x1e>
 800ca58:	2340      	movs	r3, #64	; 0x40
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	6023      	str	r3, [r4, #0]
 800ca5e:	b016      	add	sp, #88	; 0x58
 800ca60:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ca64 <__smakebuf_r>:
 800ca64:	898b      	ldrh	r3, [r1, #12]
 800ca66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca68:	079d      	lsls	r5, r3, #30
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	d507      	bpl.n	800ca80 <__smakebuf_r+0x1c>
 800ca70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca74:	6023      	str	r3, [r4, #0]
 800ca76:	6123      	str	r3, [r4, #16]
 800ca78:	2301      	movs	r3, #1
 800ca7a:	6163      	str	r3, [r4, #20]
 800ca7c:	b002      	add	sp, #8
 800ca7e:	bd70      	pop	{r4, r5, r6, pc}
 800ca80:	ab01      	add	r3, sp, #4
 800ca82:	466a      	mov	r2, sp
 800ca84:	f7ff ffc8 	bl	800ca18 <__swhatbuf_r>
 800ca88:	9900      	ldr	r1, [sp, #0]
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f7fc fd6f 	bl	8009570 <_malloc_r>
 800ca92:	b948      	cbnz	r0, 800caa8 <__smakebuf_r+0x44>
 800ca94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca98:	059a      	lsls	r2, r3, #22
 800ca9a:	d4ef      	bmi.n	800ca7c <__smakebuf_r+0x18>
 800ca9c:	f023 0303 	bic.w	r3, r3, #3
 800caa0:	f043 0302 	orr.w	r3, r3, #2
 800caa4:	81a3      	strh	r3, [r4, #12]
 800caa6:	e7e3      	b.n	800ca70 <__smakebuf_r+0xc>
 800caa8:	4b0d      	ldr	r3, [pc, #52]	; (800cae0 <__smakebuf_r+0x7c>)
 800caaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800caac:	89a3      	ldrh	r3, [r4, #12]
 800caae:	6020      	str	r0, [r4, #0]
 800cab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cab4:	81a3      	strh	r3, [r4, #12]
 800cab6:	9b00      	ldr	r3, [sp, #0]
 800cab8:	6163      	str	r3, [r4, #20]
 800caba:	9b01      	ldr	r3, [sp, #4]
 800cabc:	6120      	str	r0, [r4, #16]
 800cabe:	b15b      	cbz	r3, 800cad8 <__smakebuf_r+0x74>
 800cac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cac4:	4630      	mov	r0, r6
 800cac6:	f001 f861 	bl	800db8c <_isatty_r>
 800caca:	b128      	cbz	r0, 800cad8 <__smakebuf_r+0x74>
 800cacc:	89a3      	ldrh	r3, [r4, #12]
 800cace:	f023 0303 	bic.w	r3, r3, #3
 800cad2:	f043 0301 	orr.w	r3, r3, #1
 800cad6:	81a3      	strh	r3, [r4, #12]
 800cad8:	89a0      	ldrh	r0, [r4, #12]
 800cada:	4305      	orrs	r5, r0
 800cadc:	81a5      	strh	r5, [r4, #12]
 800cade:	e7cd      	b.n	800ca7c <__smakebuf_r+0x18>
 800cae0:	08009311 	.word	0x08009311

0800cae4 <malloc>:
 800cae4:	4b02      	ldr	r3, [pc, #8]	; (800caf0 <malloc+0xc>)
 800cae6:	4601      	mov	r1, r0
 800cae8:	6818      	ldr	r0, [r3, #0]
 800caea:	f7fc bd41 	b.w	8009570 <_malloc_r>
 800caee:	bf00      	nop
 800caf0:	20000044 	.word	0x20000044

0800caf4 <__ascii_mbtowc>:
 800caf4:	b082      	sub	sp, #8
 800caf6:	b901      	cbnz	r1, 800cafa <__ascii_mbtowc+0x6>
 800caf8:	a901      	add	r1, sp, #4
 800cafa:	b142      	cbz	r2, 800cb0e <__ascii_mbtowc+0x1a>
 800cafc:	b14b      	cbz	r3, 800cb12 <__ascii_mbtowc+0x1e>
 800cafe:	7813      	ldrb	r3, [r2, #0]
 800cb00:	600b      	str	r3, [r1, #0]
 800cb02:	7812      	ldrb	r2, [r2, #0]
 800cb04:	1e10      	subs	r0, r2, #0
 800cb06:	bf18      	it	ne
 800cb08:	2001      	movne	r0, #1
 800cb0a:	b002      	add	sp, #8
 800cb0c:	4770      	bx	lr
 800cb0e:	4610      	mov	r0, r2
 800cb10:	e7fb      	b.n	800cb0a <__ascii_mbtowc+0x16>
 800cb12:	f06f 0001 	mvn.w	r0, #1
 800cb16:	e7f8      	b.n	800cb0a <__ascii_mbtowc+0x16>

0800cb18 <__malloc_lock>:
 800cb18:	4801      	ldr	r0, [pc, #4]	; (800cb20 <__malloc_lock+0x8>)
 800cb1a:	f7fc bcf0 	b.w	80094fe <__retarget_lock_acquire_recursive>
 800cb1e:	bf00      	nop
 800cb20:	20008360 	.word	0x20008360

0800cb24 <__malloc_unlock>:
 800cb24:	4801      	ldr	r0, [pc, #4]	; (800cb2c <__malloc_unlock+0x8>)
 800cb26:	f7fc bceb 	b.w	8009500 <__retarget_lock_release_recursive>
 800cb2a:	bf00      	nop
 800cb2c:	20008360 	.word	0x20008360

0800cb30 <_Balloc>:
 800cb30:	b570      	push	{r4, r5, r6, lr}
 800cb32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb34:	4604      	mov	r4, r0
 800cb36:	460d      	mov	r5, r1
 800cb38:	b976      	cbnz	r6, 800cb58 <_Balloc+0x28>
 800cb3a:	2010      	movs	r0, #16
 800cb3c:	f7ff ffd2 	bl	800cae4 <malloc>
 800cb40:	4602      	mov	r2, r0
 800cb42:	6260      	str	r0, [r4, #36]	; 0x24
 800cb44:	b920      	cbnz	r0, 800cb50 <_Balloc+0x20>
 800cb46:	4b18      	ldr	r3, [pc, #96]	; (800cba8 <_Balloc+0x78>)
 800cb48:	4818      	ldr	r0, [pc, #96]	; (800cbac <_Balloc+0x7c>)
 800cb4a:	2166      	movs	r1, #102	; 0x66
 800cb4c:	f7fe fc62 	bl	800b414 <__assert_func>
 800cb50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb54:	6006      	str	r6, [r0, #0]
 800cb56:	60c6      	str	r6, [r0, #12]
 800cb58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb5a:	68f3      	ldr	r3, [r6, #12]
 800cb5c:	b183      	cbz	r3, 800cb80 <_Balloc+0x50>
 800cb5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb66:	b9b8      	cbnz	r0, 800cb98 <_Balloc+0x68>
 800cb68:	2101      	movs	r1, #1
 800cb6a:	fa01 f605 	lsl.w	r6, r1, r5
 800cb6e:	1d72      	adds	r2, r6, #5
 800cb70:	0092      	lsls	r2, r2, #2
 800cb72:	4620      	mov	r0, r4
 800cb74:	f000 fc9d 	bl	800d4b2 <_calloc_r>
 800cb78:	b160      	cbz	r0, 800cb94 <_Balloc+0x64>
 800cb7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb7e:	e00e      	b.n	800cb9e <_Balloc+0x6e>
 800cb80:	2221      	movs	r2, #33	; 0x21
 800cb82:	2104      	movs	r1, #4
 800cb84:	4620      	mov	r0, r4
 800cb86:	f000 fc94 	bl	800d4b2 <_calloc_r>
 800cb8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb8c:	60f0      	str	r0, [r6, #12]
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d1e4      	bne.n	800cb5e <_Balloc+0x2e>
 800cb94:	2000      	movs	r0, #0
 800cb96:	bd70      	pop	{r4, r5, r6, pc}
 800cb98:	6802      	ldr	r2, [r0, #0]
 800cb9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb9e:	2300      	movs	r3, #0
 800cba0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cba4:	e7f7      	b.n	800cb96 <_Balloc+0x66>
 800cba6:	bf00      	nop
 800cba8:	0800e022 	.word	0x0800e022
 800cbac:	0800e120 	.word	0x0800e120

0800cbb0 <_Bfree>:
 800cbb0:	b570      	push	{r4, r5, r6, lr}
 800cbb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cbb4:	4605      	mov	r5, r0
 800cbb6:	460c      	mov	r4, r1
 800cbb8:	b976      	cbnz	r6, 800cbd8 <_Bfree+0x28>
 800cbba:	2010      	movs	r0, #16
 800cbbc:	f7ff ff92 	bl	800cae4 <malloc>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	6268      	str	r0, [r5, #36]	; 0x24
 800cbc4:	b920      	cbnz	r0, 800cbd0 <_Bfree+0x20>
 800cbc6:	4b09      	ldr	r3, [pc, #36]	; (800cbec <_Bfree+0x3c>)
 800cbc8:	4809      	ldr	r0, [pc, #36]	; (800cbf0 <_Bfree+0x40>)
 800cbca:	218a      	movs	r1, #138	; 0x8a
 800cbcc:	f7fe fc22 	bl	800b414 <__assert_func>
 800cbd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbd4:	6006      	str	r6, [r0, #0]
 800cbd6:	60c6      	str	r6, [r0, #12]
 800cbd8:	b13c      	cbz	r4, 800cbea <_Bfree+0x3a>
 800cbda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cbdc:	6862      	ldr	r2, [r4, #4]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbe4:	6021      	str	r1, [r4, #0]
 800cbe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbea:	bd70      	pop	{r4, r5, r6, pc}
 800cbec:	0800e022 	.word	0x0800e022
 800cbf0:	0800e120 	.word	0x0800e120

0800cbf4 <__multadd>:
 800cbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf8:	690d      	ldr	r5, [r1, #16]
 800cbfa:	4607      	mov	r7, r0
 800cbfc:	460c      	mov	r4, r1
 800cbfe:	461e      	mov	r6, r3
 800cc00:	f101 0c14 	add.w	ip, r1, #20
 800cc04:	2000      	movs	r0, #0
 800cc06:	f8dc 3000 	ldr.w	r3, [ip]
 800cc0a:	b299      	uxth	r1, r3
 800cc0c:	fb02 6101 	mla	r1, r2, r1, r6
 800cc10:	0c1e      	lsrs	r6, r3, #16
 800cc12:	0c0b      	lsrs	r3, r1, #16
 800cc14:	fb02 3306 	mla	r3, r2, r6, r3
 800cc18:	b289      	uxth	r1, r1
 800cc1a:	3001      	adds	r0, #1
 800cc1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc20:	4285      	cmp	r5, r0
 800cc22:	f84c 1b04 	str.w	r1, [ip], #4
 800cc26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc2a:	dcec      	bgt.n	800cc06 <__multadd+0x12>
 800cc2c:	b30e      	cbz	r6, 800cc72 <__multadd+0x7e>
 800cc2e:	68a3      	ldr	r3, [r4, #8]
 800cc30:	42ab      	cmp	r3, r5
 800cc32:	dc19      	bgt.n	800cc68 <__multadd+0x74>
 800cc34:	6861      	ldr	r1, [r4, #4]
 800cc36:	4638      	mov	r0, r7
 800cc38:	3101      	adds	r1, #1
 800cc3a:	f7ff ff79 	bl	800cb30 <_Balloc>
 800cc3e:	4680      	mov	r8, r0
 800cc40:	b928      	cbnz	r0, 800cc4e <__multadd+0x5a>
 800cc42:	4602      	mov	r2, r0
 800cc44:	4b0c      	ldr	r3, [pc, #48]	; (800cc78 <__multadd+0x84>)
 800cc46:	480d      	ldr	r0, [pc, #52]	; (800cc7c <__multadd+0x88>)
 800cc48:	21b5      	movs	r1, #181	; 0xb5
 800cc4a:	f7fe fbe3 	bl	800b414 <__assert_func>
 800cc4e:	6922      	ldr	r2, [r4, #16]
 800cc50:	3202      	adds	r2, #2
 800cc52:	f104 010c 	add.w	r1, r4, #12
 800cc56:	0092      	lsls	r2, r2, #2
 800cc58:	300c      	adds	r0, #12
 800cc5a:	f7fc fc52 	bl	8009502 <memcpy>
 800cc5e:	4621      	mov	r1, r4
 800cc60:	4638      	mov	r0, r7
 800cc62:	f7ff ffa5 	bl	800cbb0 <_Bfree>
 800cc66:	4644      	mov	r4, r8
 800cc68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc6c:	3501      	adds	r5, #1
 800cc6e:	615e      	str	r6, [r3, #20]
 800cc70:	6125      	str	r5, [r4, #16]
 800cc72:	4620      	mov	r0, r4
 800cc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc78:	0800e094 	.word	0x0800e094
 800cc7c:	0800e120 	.word	0x0800e120

0800cc80 <__s2b>:
 800cc80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc84:	460c      	mov	r4, r1
 800cc86:	4615      	mov	r5, r2
 800cc88:	461f      	mov	r7, r3
 800cc8a:	2209      	movs	r2, #9
 800cc8c:	3308      	adds	r3, #8
 800cc8e:	4606      	mov	r6, r0
 800cc90:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc94:	2100      	movs	r1, #0
 800cc96:	2201      	movs	r2, #1
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	db09      	blt.n	800ccb0 <__s2b+0x30>
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	f7ff ff47 	bl	800cb30 <_Balloc>
 800cca2:	b940      	cbnz	r0, 800ccb6 <__s2b+0x36>
 800cca4:	4602      	mov	r2, r0
 800cca6:	4b19      	ldr	r3, [pc, #100]	; (800cd0c <__s2b+0x8c>)
 800cca8:	4819      	ldr	r0, [pc, #100]	; (800cd10 <__s2b+0x90>)
 800ccaa:	21ce      	movs	r1, #206	; 0xce
 800ccac:	f7fe fbb2 	bl	800b414 <__assert_func>
 800ccb0:	0052      	lsls	r2, r2, #1
 800ccb2:	3101      	adds	r1, #1
 800ccb4:	e7f0      	b.n	800cc98 <__s2b+0x18>
 800ccb6:	9b08      	ldr	r3, [sp, #32]
 800ccb8:	6143      	str	r3, [r0, #20]
 800ccba:	2d09      	cmp	r5, #9
 800ccbc:	f04f 0301 	mov.w	r3, #1
 800ccc0:	6103      	str	r3, [r0, #16]
 800ccc2:	dd16      	ble.n	800ccf2 <__s2b+0x72>
 800ccc4:	f104 0909 	add.w	r9, r4, #9
 800ccc8:	46c8      	mov	r8, r9
 800ccca:	442c      	add	r4, r5
 800cccc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ccd0:	4601      	mov	r1, r0
 800ccd2:	3b30      	subs	r3, #48	; 0x30
 800ccd4:	220a      	movs	r2, #10
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	f7ff ff8c 	bl	800cbf4 <__multadd>
 800ccdc:	45a0      	cmp	r8, r4
 800ccde:	d1f5      	bne.n	800cccc <__s2b+0x4c>
 800cce0:	f1a5 0408 	sub.w	r4, r5, #8
 800cce4:	444c      	add	r4, r9
 800cce6:	1b2d      	subs	r5, r5, r4
 800cce8:	1963      	adds	r3, r4, r5
 800ccea:	42bb      	cmp	r3, r7
 800ccec:	db04      	blt.n	800ccf8 <__s2b+0x78>
 800ccee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccf2:	340a      	adds	r4, #10
 800ccf4:	2509      	movs	r5, #9
 800ccf6:	e7f6      	b.n	800cce6 <__s2b+0x66>
 800ccf8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ccfc:	4601      	mov	r1, r0
 800ccfe:	3b30      	subs	r3, #48	; 0x30
 800cd00:	220a      	movs	r2, #10
 800cd02:	4630      	mov	r0, r6
 800cd04:	f7ff ff76 	bl	800cbf4 <__multadd>
 800cd08:	e7ee      	b.n	800cce8 <__s2b+0x68>
 800cd0a:	bf00      	nop
 800cd0c:	0800e094 	.word	0x0800e094
 800cd10:	0800e120 	.word	0x0800e120

0800cd14 <__hi0bits>:
 800cd14:	0c03      	lsrs	r3, r0, #16
 800cd16:	041b      	lsls	r3, r3, #16
 800cd18:	b9d3      	cbnz	r3, 800cd50 <__hi0bits+0x3c>
 800cd1a:	0400      	lsls	r0, r0, #16
 800cd1c:	2310      	movs	r3, #16
 800cd1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cd22:	bf04      	itt	eq
 800cd24:	0200      	lsleq	r0, r0, #8
 800cd26:	3308      	addeq	r3, #8
 800cd28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cd2c:	bf04      	itt	eq
 800cd2e:	0100      	lsleq	r0, r0, #4
 800cd30:	3304      	addeq	r3, #4
 800cd32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cd36:	bf04      	itt	eq
 800cd38:	0080      	lsleq	r0, r0, #2
 800cd3a:	3302      	addeq	r3, #2
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	db05      	blt.n	800cd4c <__hi0bits+0x38>
 800cd40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cd44:	f103 0301 	add.w	r3, r3, #1
 800cd48:	bf08      	it	eq
 800cd4a:	2320      	moveq	r3, #32
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	4770      	bx	lr
 800cd50:	2300      	movs	r3, #0
 800cd52:	e7e4      	b.n	800cd1e <__hi0bits+0xa>

0800cd54 <__lo0bits>:
 800cd54:	6803      	ldr	r3, [r0, #0]
 800cd56:	f013 0207 	ands.w	r2, r3, #7
 800cd5a:	4601      	mov	r1, r0
 800cd5c:	d00b      	beq.n	800cd76 <__lo0bits+0x22>
 800cd5e:	07da      	lsls	r2, r3, #31
 800cd60:	d423      	bmi.n	800cdaa <__lo0bits+0x56>
 800cd62:	0798      	lsls	r0, r3, #30
 800cd64:	bf49      	itett	mi
 800cd66:	085b      	lsrmi	r3, r3, #1
 800cd68:	089b      	lsrpl	r3, r3, #2
 800cd6a:	2001      	movmi	r0, #1
 800cd6c:	600b      	strmi	r3, [r1, #0]
 800cd6e:	bf5c      	itt	pl
 800cd70:	600b      	strpl	r3, [r1, #0]
 800cd72:	2002      	movpl	r0, #2
 800cd74:	4770      	bx	lr
 800cd76:	b298      	uxth	r0, r3
 800cd78:	b9a8      	cbnz	r0, 800cda6 <__lo0bits+0x52>
 800cd7a:	0c1b      	lsrs	r3, r3, #16
 800cd7c:	2010      	movs	r0, #16
 800cd7e:	b2da      	uxtb	r2, r3
 800cd80:	b90a      	cbnz	r2, 800cd86 <__lo0bits+0x32>
 800cd82:	3008      	adds	r0, #8
 800cd84:	0a1b      	lsrs	r3, r3, #8
 800cd86:	071a      	lsls	r2, r3, #28
 800cd88:	bf04      	itt	eq
 800cd8a:	091b      	lsreq	r3, r3, #4
 800cd8c:	3004      	addeq	r0, #4
 800cd8e:	079a      	lsls	r2, r3, #30
 800cd90:	bf04      	itt	eq
 800cd92:	089b      	lsreq	r3, r3, #2
 800cd94:	3002      	addeq	r0, #2
 800cd96:	07da      	lsls	r2, r3, #31
 800cd98:	d403      	bmi.n	800cda2 <__lo0bits+0x4e>
 800cd9a:	085b      	lsrs	r3, r3, #1
 800cd9c:	f100 0001 	add.w	r0, r0, #1
 800cda0:	d005      	beq.n	800cdae <__lo0bits+0x5a>
 800cda2:	600b      	str	r3, [r1, #0]
 800cda4:	4770      	bx	lr
 800cda6:	4610      	mov	r0, r2
 800cda8:	e7e9      	b.n	800cd7e <__lo0bits+0x2a>
 800cdaa:	2000      	movs	r0, #0
 800cdac:	4770      	bx	lr
 800cdae:	2020      	movs	r0, #32
 800cdb0:	4770      	bx	lr
	...

0800cdb4 <__i2b>:
 800cdb4:	b510      	push	{r4, lr}
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	2101      	movs	r1, #1
 800cdba:	f7ff feb9 	bl	800cb30 <_Balloc>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	b928      	cbnz	r0, 800cdce <__i2b+0x1a>
 800cdc2:	4b05      	ldr	r3, [pc, #20]	; (800cdd8 <__i2b+0x24>)
 800cdc4:	4805      	ldr	r0, [pc, #20]	; (800cddc <__i2b+0x28>)
 800cdc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cdca:	f7fe fb23 	bl	800b414 <__assert_func>
 800cdce:	2301      	movs	r3, #1
 800cdd0:	6144      	str	r4, [r0, #20]
 800cdd2:	6103      	str	r3, [r0, #16]
 800cdd4:	bd10      	pop	{r4, pc}
 800cdd6:	bf00      	nop
 800cdd8:	0800e094 	.word	0x0800e094
 800cddc:	0800e120 	.word	0x0800e120

0800cde0 <__multiply>:
 800cde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde4:	4691      	mov	r9, r2
 800cde6:	690a      	ldr	r2, [r1, #16]
 800cde8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	bfb8      	it	lt
 800cdf0:	460b      	movlt	r3, r1
 800cdf2:	460c      	mov	r4, r1
 800cdf4:	bfbc      	itt	lt
 800cdf6:	464c      	movlt	r4, r9
 800cdf8:	4699      	movlt	r9, r3
 800cdfa:	6927      	ldr	r7, [r4, #16]
 800cdfc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce00:	68a3      	ldr	r3, [r4, #8]
 800ce02:	6861      	ldr	r1, [r4, #4]
 800ce04:	eb07 060a 	add.w	r6, r7, sl
 800ce08:	42b3      	cmp	r3, r6
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	bfb8      	it	lt
 800ce0e:	3101      	addlt	r1, #1
 800ce10:	f7ff fe8e 	bl	800cb30 <_Balloc>
 800ce14:	b930      	cbnz	r0, 800ce24 <__multiply+0x44>
 800ce16:	4602      	mov	r2, r0
 800ce18:	4b44      	ldr	r3, [pc, #272]	; (800cf2c <__multiply+0x14c>)
 800ce1a:	4845      	ldr	r0, [pc, #276]	; (800cf30 <__multiply+0x150>)
 800ce1c:	f240 115d 	movw	r1, #349	; 0x15d
 800ce20:	f7fe faf8 	bl	800b414 <__assert_func>
 800ce24:	f100 0514 	add.w	r5, r0, #20
 800ce28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce2c:	462b      	mov	r3, r5
 800ce2e:	2200      	movs	r2, #0
 800ce30:	4543      	cmp	r3, r8
 800ce32:	d321      	bcc.n	800ce78 <__multiply+0x98>
 800ce34:	f104 0314 	add.w	r3, r4, #20
 800ce38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ce3c:	f109 0314 	add.w	r3, r9, #20
 800ce40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ce44:	9202      	str	r2, [sp, #8]
 800ce46:	1b3a      	subs	r2, r7, r4
 800ce48:	3a15      	subs	r2, #21
 800ce4a:	f022 0203 	bic.w	r2, r2, #3
 800ce4e:	3204      	adds	r2, #4
 800ce50:	f104 0115 	add.w	r1, r4, #21
 800ce54:	428f      	cmp	r7, r1
 800ce56:	bf38      	it	cc
 800ce58:	2204      	movcc	r2, #4
 800ce5a:	9201      	str	r2, [sp, #4]
 800ce5c:	9a02      	ldr	r2, [sp, #8]
 800ce5e:	9303      	str	r3, [sp, #12]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d80c      	bhi.n	800ce7e <__multiply+0x9e>
 800ce64:	2e00      	cmp	r6, #0
 800ce66:	dd03      	ble.n	800ce70 <__multiply+0x90>
 800ce68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d05a      	beq.n	800cf26 <__multiply+0x146>
 800ce70:	6106      	str	r6, [r0, #16]
 800ce72:	b005      	add	sp, #20
 800ce74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce78:	f843 2b04 	str.w	r2, [r3], #4
 800ce7c:	e7d8      	b.n	800ce30 <__multiply+0x50>
 800ce7e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ce82:	f1ba 0f00 	cmp.w	sl, #0
 800ce86:	d024      	beq.n	800ced2 <__multiply+0xf2>
 800ce88:	f104 0e14 	add.w	lr, r4, #20
 800ce8c:	46a9      	mov	r9, r5
 800ce8e:	f04f 0c00 	mov.w	ip, #0
 800ce92:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ce96:	f8d9 1000 	ldr.w	r1, [r9]
 800ce9a:	fa1f fb82 	uxth.w	fp, r2
 800ce9e:	b289      	uxth	r1, r1
 800cea0:	fb0a 110b 	mla	r1, sl, fp, r1
 800cea4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cea8:	f8d9 2000 	ldr.w	r2, [r9]
 800ceac:	4461      	add	r1, ip
 800ceae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ceb2:	fb0a c20b 	mla	r2, sl, fp, ip
 800ceb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ceba:	b289      	uxth	r1, r1
 800cebc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cec0:	4577      	cmp	r7, lr
 800cec2:	f849 1b04 	str.w	r1, [r9], #4
 800cec6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ceca:	d8e2      	bhi.n	800ce92 <__multiply+0xb2>
 800cecc:	9a01      	ldr	r2, [sp, #4]
 800cece:	f845 c002 	str.w	ip, [r5, r2]
 800ced2:	9a03      	ldr	r2, [sp, #12]
 800ced4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ced8:	3304      	adds	r3, #4
 800ceda:	f1b9 0f00 	cmp.w	r9, #0
 800cede:	d020      	beq.n	800cf22 <__multiply+0x142>
 800cee0:	6829      	ldr	r1, [r5, #0]
 800cee2:	f104 0c14 	add.w	ip, r4, #20
 800cee6:	46ae      	mov	lr, r5
 800cee8:	f04f 0a00 	mov.w	sl, #0
 800ceec:	f8bc b000 	ldrh.w	fp, [ip]
 800cef0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cef4:	fb09 220b 	mla	r2, r9, fp, r2
 800cef8:	4492      	add	sl, r2
 800cefa:	b289      	uxth	r1, r1
 800cefc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cf00:	f84e 1b04 	str.w	r1, [lr], #4
 800cf04:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf08:	f8be 1000 	ldrh.w	r1, [lr]
 800cf0c:	0c12      	lsrs	r2, r2, #16
 800cf0e:	fb09 1102 	mla	r1, r9, r2, r1
 800cf12:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cf16:	4567      	cmp	r7, ip
 800cf18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cf1c:	d8e6      	bhi.n	800ceec <__multiply+0x10c>
 800cf1e:	9a01      	ldr	r2, [sp, #4]
 800cf20:	50a9      	str	r1, [r5, r2]
 800cf22:	3504      	adds	r5, #4
 800cf24:	e79a      	b.n	800ce5c <__multiply+0x7c>
 800cf26:	3e01      	subs	r6, #1
 800cf28:	e79c      	b.n	800ce64 <__multiply+0x84>
 800cf2a:	bf00      	nop
 800cf2c:	0800e094 	.word	0x0800e094
 800cf30:	0800e120 	.word	0x0800e120

0800cf34 <__pow5mult>:
 800cf34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf38:	4615      	mov	r5, r2
 800cf3a:	f012 0203 	ands.w	r2, r2, #3
 800cf3e:	4606      	mov	r6, r0
 800cf40:	460f      	mov	r7, r1
 800cf42:	d007      	beq.n	800cf54 <__pow5mult+0x20>
 800cf44:	4c25      	ldr	r4, [pc, #148]	; (800cfdc <__pow5mult+0xa8>)
 800cf46:	3a01      	subs	r2, #1
 800cf48:	2300      	movs	r3, #0
 800cf4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf4e:	f7ff fe51 	bl	800cbf4 <__multadd>
 800cf52:	4607      	mov	r7, r0
 800cf54:	10ad      	asrs	r5, r5, #2
 800cf56:	d03d      	beq.n	800cfd4 <__pow5mult+0xa0>
 800cf58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cf5a:	b97c      	cbnz	r4, 800cf7c <__pow5mult+0x48>
 800cf5c:	2010      	movs	r0, #16
 800cf5e:	f7ff fdc1 	bl	800cae4 <malloc>
 800cf62:	4602      	mov	r2, r0
 800cf64:	6270      	str	r0, [r6, #36]	; 0x24
 800cf66:	b928      	cbnz	r0, 800cf74 <__pow5mult+0x40>
 800cf68:	4b1d      	ldr	r3, [pc, #116]	; (800cfe0 <__pow5mult+0xac>)
 800cf6a:	481e      	ldr	r0, [pc, #120]	; (800cfe4 <__pow5mult+0xb0>)
 800cf6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cf70:	f7fe fa50 	bl	800b414 <__assert_func>
 800cf74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf78:	6004      	str	r4, [r0, #0]
 800cf7a:	60c4      	str	r4, [r0, #12]
 800cf7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cf80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf84:	b94c      	cbnz	r4, 800cf9a <__pow5mult+0x66>
 800cf86:	f240 2171 	movw	r1, #625	; 0x271
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f7ff ff12 	bl	800cdb4 <__i2b>
 800cf90:	2300      	movs	r3, #0
 800cf92:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf96:	4604      	mov	r4, r0
 800cf98:	6003      	str	r3, [r0, #0]
 800cf9a:	f04f 0900 	mov.w	r9, #0
 800cf9e:	07eb      	lsls	r3, r5, #31
 800cfa0:	d50a      	bpl.n	800cfb8 <__pow5mult+0x84>
 800cfa2:	4639      	mov	r1, r7
 800cfa4:	4622      	mov	r2, r4
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	f7ff ff1a 	bl	800cde0 <__multiply>
 800cfac:	4639      	mov	r1, r7
 800cfae:	4680      	mov	r8, r0
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	f7ff fdfd 	bl	800cbb0 <_Bfree>
 800cfb6:	4647      	mov	r7, r8
 800cfb8:	106d      	asrs	r5, r5, #1
 800cfba:	d00b      	beq.n	800cfd4 <__pow5mult+0xa0>
 800cfbc:	6820      	ldr	r0, [r4, #0]
 800cfbe:	b938      	cbnz	r0, 800cfd0 <__pow5mult+0x9c>
 800cfc0:	4622      	mov	r2, r4
 800cfc2:	4621      	mov	r1, r4
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	f7ff ff0b 	bl	800cde0 <__multiply>
 800cfca:	6020      	str	r0, [r4, #0]
 800cfcc:	f8c0 9000 	str.w	r9, [r0]
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	e7e4      	b.n	800cf9e <__pow5mult+0x6a>
 800cfd4:	4638      	mov	r0, r7
 800cfd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfda:	bf00      	nop
 800cfdc:	0800e270 	.word	0x0800e270
 800cfe0:	0800e022 	.word	0x0800e022
 800cfe4:	0800e120 	.word	0x0800e120

0800cfe8 <__lshift>:
 800cfe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfec:	460c      	mov	r4, r1
 800cfee:	6849      	ldr	r1, [r1, #4]
 800cff0:	6923      	ldr	r3, [r4, #16]
 800cff2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cff6:	68a3      	ldr	r3, [r4, #8]
 800cff8:	4607      	mov	r7, r0
 800cffa:	4691      	mov	r9, r2
 800cffc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d000:	f108 0601 	add.w	r6, r8, #1
 800d004:	42b3      	cmp	r3, r6
 800d006:	db0b      	blt.n	800d020 <__lshift+0x38>
 800d008:	4638      	mov	r0, r7
 800d00a:	f7ff fd91 	bl	800cb30 <_Balloc>
 800d00e:	4605      	mov	r5, r0
 800d010:	b948      	cbnz	r0, 800d026 <__lshift+0x3e>
 800d012:	4602      	mov	r2, r0
 800d014:	4b2a      	ldr	r3, [pc, #168]	; (800d0c0 <__lshift+0xd8>)
 800d016:	482b      	ldr	r0, [pc, #172]	; (800d0c4 <__lshift+0xdc>)
 800d018:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d01c:	f7fe f9fa 	bl	800b414 <__assert_func>
 800d020:	3101      	adds	r1, #1
 800d022:	005b      	lsls	r3, r3, #1
 800d024:	e7ee      	b.n	800d004 <__lshift+0x1c>
 800d026:	2300      	movs	r3, #0
 800d028:	f100 0114 	add.w	r1, r0, #20
 800d02c:	f100 0210 	add.w	r2, r0, #16
 800d030:	4618      	mov	r0, r3
 800d032:	4553      	cmp	r3, sl
 800d034:	db37      	blt.n	800d0a6 <__lshift+0xbe>
 800d036:	6920      	ldr	r0, [r4, #16]
 800d038:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d03c:	f104 0314 	add.w	r3, r4, #20
 800d040:	f019 091f 	ands.w	r9, r9, #31
 800d044:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d048:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d04c:	d02f      	beq.n	800d0ae <__lshift+0xc6>
 800d04e:	f1c9 0e20 	rsb	lr, r9, #32
 800d052:	468a      	mov	sl, r1
 800d054:	f04f 0c00 	mov.w	ip, #0
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	fa02 f209 	lsl.w	r2, r2, r9
 800d05e:	ea42 020c 	orr.w	r2, r2, ip
 800d062:	f84a 2b04 	str.w	r2, [sl], #4
 800d066:	f853 2b04 	ldr.w	r2, [r3], #4
 800d06a:	4298      	cmp	r0, r3
 800d06c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d070:	d8f2      	bhi.n	800d058 <__lshift+0x70>
 800d072:	1b03      	subs	r3, r0, r4
 800d074:	3b15      	subs	r3, #21
 800d076:	f023 0303 	bic.w	r3, r3, #3
 800d07a:	3304      	adds	r3, #4
 800d07c:	f104 0215 	add.w	r2, r4, #21
 800d080:	4290      	cmp	r0, r2
 800d082:	bf38      	it	cc
 800d084:	2304      	movcc	r3, #4
 800d086:	f841 c003 	str.w	ip, [r1, r3]
 800d08a:	f1bc 0f00 	cmp.w	ip, #0
 800d08e:	d001      	beq.n	800d094 <__lshift+0xac>
 800d090:	f108 0602 	add.w	r6, r8, #2
 800d094:	3e01      	subs	r6, #1
 800d096:	4638      	mov	r0, r7
 800d098:	612e      	str	r6, [r5, #16]
 800d09a:	4621      	mov	r1, r4
 800d09c:	f7ff fd88 	bl	800cbb0 <_Bfree>
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	e7c1      	b.n	800d032 <__lshift+0x4a>
 800d0ae:	3904      	subs	r1, #4
 800d0b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0b8:	4298      	cmp	r0, r3
 800d0ba:	d8f9      	bhi.n	800d0b0 <__lshift+0xc8>
 800d0bc:	e7ea      	b.n	800d094 <__lshift+0xac>
 800d0be:	bf00      	nop
 800d0c0:	0800e094 	.word	0x0800e094
 800d0c4:	0800e120 	.word	0x0800e120

0800d0c8 <__mcmp>:
 800d0c8:	b530      	push	{r4, r5, lr}
 800d0ca:	6902      	ldr	r2, [r0, #16]
 800d0cc:	690c      	ldr	r4, [r1, #16]
 800d0ce:	1b12      	subs	r2, r2, r4
 800d0d0:	d10e      	bne.n	800d0f0 <__mcmp+0x28>
 800d0d2:	f100 0314 	add.w	r3, r0, #20
 800d0d6:	3114      	adds	r1, #20
 800d0d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d0dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d0e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d0e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d0e8:	42a5      	cmp	r5, r4
 800d0ea:	d003      	beq.n	800d0f4 <__mcmp+0x2c>
 800d0ec:	d305      	bcc.n	800d0fa <__mcmp+0x32>
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	4610      	mov	r0, r2
 800d0f2:	bd30      	pop	{r4, r5, pc}
 800d0f4:	4283      	cmp	r3, r0
 800d0f6:	d3f3      	bcc.n	800d0e0 <__mcmp+0x18>
 800d0f8:	e7fa      	b.n	800d0f0 <__mcmp+0x28>
 800d0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d0fe:	e7f7      	b.n	800d0f0 <__mcmp+0x28>

0800d100 <__mdiff>:
 800d100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d104:	460c      	mov	r4, r1
 800d106:	4606      	mov	r6, r0
 800d108:	4611      	mov	r1, r2
 800d10a:	4620      	mov	r0, r4
 800d10c:	4690      	mov	r8, r2
 800d10e:	f7ff ffdb 	bl	800d0c8 <__mcmp>
 800d112:	1e05      	subs	r5, r0, #0
 800d114:	d110      	bne.n	800d138 <__mdiff+0x38>
 800d116:	4629      	mov	r1, r5
 800d118:	4630      	mov	r0, r6
 800d11a:	f7ff fd09 	bl	800cb30 <_Balloc>
 800d11e:	b930      	cbnz	r0, 800d12e <__mdiff+0x2e>
 800d120:	4b3a      	ldr	r3, [pc, #232]	; (800d20c <__mdiff+0x10c>)
 800d122:	4602      	mov	r2, r0
 800d124:	f240 2132 	movw	r1, #562	; 0x232
 800d128:	4839      	ldr	r0, [pc, #228]	; (800d210 <__mdiff+0x110>)
 800d12a:	f7fe f973 	bl	800b414 <__assert_func>
 800d12e:	2301      	movs	r3, #1
 800d130:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d138:	bfa4      	itt	ge
 800d13a:	4643      	movge	r3, r8
 800d13c:	46a0      	movge	r8, r4
 800d13e:	4630      	mov	r0, r6
 800d140:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d144:	bfa6      	itte	ge
 800d146:	461c      	movge	r4, r3
 800d148:	2500      	movge	r5, #0
 800d14a:	2501      	movlt	r5, #1
 800d14c:	f7ff fcf0 	bl	800cb30 <_Balloc>
 800d150:	b920      	cbnz	r0, 800d15c <__mdiff+0x5c>
 800d152:	4b2e      	ldr	r3, [pc, #184]	; (800d20c <__mdiff+0x10c>)
 800d154:	4602      	mov	r2, r0
 800d156:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d15a:	e7e5      	b.n	800d128 <__mdiff+0x28>
 800d15c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d160:	6926      	ldr	r6, [r4, #16]
 800d162:	60c5      	str	r5, [r0, #12]
 800d164:	f104 0914 	add.w	r9, r4, #20
 800d168:	f108 0514 	add.w	r5, r8, #20
 800d16c:	f100 0e14 	add.w	lr, r0, #20
 800d170:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d174:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d178:	f108 0210 	add.w	r2, r8, #16
 800d17c:	46f2      	mov	sl, lr
 800d17e:	2100      	movs	r1, #0
 800d180:	f859 3b04 	ldr.w	r3, [r9], #4
 800d184:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d188:	fa1f f883 	uxth.w	r8, r3
 800d18c:	fa11 f18b 	uxtah	r1, r1, fp
 800d190:	0c1b      	lsrs	r3, r3, #16
 800d192:	eba1 0808 	sub.w	r8, r1, r8
 800d196:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d19a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d19e:	fa1f f888 	uxth.w	r8, r8
 800d1a2:	1419      	asrs	r1, r3, #16
 800d1a4:	454e      	cmp	r6, r9
 800d1a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d1aa:	f84a 3b04 	str.w	r3, [sl], #4
 800d1ae:	d8e7      	bhi.n	800d180 <__mdiff+0x80>
 800d1b0:	1b33      	subs	r3, r6, r4
 800d1b2:	3b15      	subs	r3, #21
 800d1b4:	f023 0303 	bic.w	r3, r3, #3
 800d1b8:	3304      	adds	r3, #4
 800d1ba:	3415      	adds	r4, #21
 800d1bc:	42a6      	cmp	r6, r4
 800d1be:	bf38      	it	cc
 800d1c0:	2304      	movcc	r3, #4
 800d1c2:	441d      	add	r5, r3
 800d1c4:	4473      	add	r3, lr
 800d1c6:	469e      	mov	lr, r3
 800d1c8:	462e      	mov	r6, r5
 800d1ca:	4566      	cmp	r6, ip
 800d1cc:	d30e      	bcc.n	800d1ec <__mdiff+0xec>
 800d1ce:	f10c 0203 	add.w	r2, ip, #3
 800d1d2:	1b52      	subs	r2, r2, r5
 800d1d4:	f022 0203 	bic.w	r2, r2, #3
 800d1d8:	3d03      	subs	r5, #3
 800d1da:	45ac      	cmp	ip, r5
 800d1dc:	bf38      	it	cc
 800d1de:	2200      	movcc	r2, #0
 800d1e0:	441a      	add	r2, r3
 800d1e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d1e6:	b17b      	cbz	r3, 800d208 <__mdiff+0x108>
 800d1e8:	6107      	str	r7, [r0, #16]
 800d1ea:	e7a3      	b.n	800d134 <__mdiff+0x34>
 800d1ec:	f856 8b04 	ldr.w	r8, [r6], #4
 800d1f0:	fa11 f288 	uxtah	r2, r1, r8
 800d1f4:	1414      	asrs	r4, r2, #16
 800d1f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d1fa:	b292      	uxth	r2, r2
 800d1fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d200:	f84e 2b04 	str.w	r2, [lr], #4
 800d204:	1421      	asrs	r1, r4, #16
 800d206:	e7e0      	b.n	800d1ca <__mdiff+0xca>
 800d208:	3f01      	subs	r7, #1
 800d20a:	e7ea      	b.n	800d1e2 <__mdiff+0xe2>
 800d20c:	0800e094 	.word	0x0800e094
 800d210:	0800e120 	.word	0x0800e120

0800d214 <__ulp>:
 800d214:	b082      	sub	sp, #8
 800d216:	ed8d 0b00 	vstr	d0, [sp]
 800d21a:	9b01      	ldr	r3, [sp, #4]
 800d21c:	4912      	ldr	r1, [pc, #72]	; (800d268 <__ulp+0x54>)
 800d21e:	4019      	ands	r1, r3
 800d220:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d224:	2900      	cmp	r1, #0
 800d226:	dd05      	ble.n	800d234 <__ulp+0x20>
 800d228:	2200      	movs	r2, #0
 800d22a:	460b      	mov	r3, r1
 800d22c:	ec43 2b10 	vmov	d0, r2, r3
 800d230:	b002      	add	sp, #8
 800d232:	4770      	bx	lr
 800d234:	4249      	negs	r1, r1
 800d236:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d23a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d23e:	f04f 0200 	mov.w	r2, #0
 800d242:	f04f 0300 	mov.w	r3, #0
 800d246:	da04      	bge.n	800d252 <__ulp+0x3e>
 800d248:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d24c:	fa41 f300 	asr.w	r3, r1, r0
 800d250:	e7ec      	b.n	800d22c <__ulp+0x18>
 800d252:	f1a0 0114 	sub.w	r1, r0, #20
 800d256:	291e      	cmp	r1, #30
 800d258:	bfda      	itte	le
 800d25a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d25e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d262:	2101      	movgt	r1, #1
 800d264:	460a      	mov	r2, r1
 800d266:	e7e1      	b.n	800d22c <__ulp+0x18>
 800d268:	7ff00000 	.word	0x7ff00000

0800d26c <__b2d>:
 800d26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d26e:	6905      	ldr	r5, [r0, #16]
 800d270:	f100 0714 	add.w	r7, r0, #20
 800d274:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d278:	1f2e      	subs	r6, r5, #4
 800d27a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d27e:	4620      	mov	r0, r4
 800d280:	f7ff fd48 	bl	800cd14 <__hi0bits>
 800d284:	f1c0 0320 	rsb	r3, r0, #32
 800d288:	280a      	cmp	r0, #10
 800d28a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d308 <__b2d+0x9c>
 800d28e:	600b      	str	r3, [r1, #0]
 800d290:	dc14      	bgt.n	800d2bc <__b2d+0x50>
 800d292:	f1c0 0e0b 	rsb	lr, r0, #11
 800d296:	fa24 f10e 	lsr.w	r1, r4, lr
 800d29a:	42b7      	cmp	r7, r6
 800d29c:	ea41 030c 	orr.w	r3, r1, ip
 800d2a0:	bf34      	ite	cc
 800d2a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d2a6:	2100      	movcs	r1, #0
 800d2a8:	3015      	adds	r0, #21
 800d2aa:	fa04 f000 	lsl.w	r0, r4, r0
 800d2ae:	fa21 f10e 	lsr.w	r1, r1, lr
 800d2b2:	ea40 0201 	orr.w	r2, r0, r1
 800d2b6:	ec43 2b10 	vmov	d0, r2, r3
 800d2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2bc:	42b7      	cmp	r7, r6
 800d2be:	bf3a      	itte	cc
 800d2c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d2c4:	f1a5 0608 	subcc.w	r6, r5, #8
 800d2c8:	2100      	movcs	r1, #0
 800d2ca:	380b      	subs	r0, #11
 800d2cc:	d017      	beq.n	800d2fe <__b2d+0x92>
 800d2ce:	f1c0 0c20 	rsb	ip, r0, #32
 800d2d2:	fa04 f500 	lsl.w	r5, r4, r0
 800d2d6:	42be      	cmp	r6, r7
 800d2d8:	fa21 f40c 	lsr.w	r4, r1, ip
 800d2dc:	ea45 0504 	orr.w	r5, r5, r4
 800d2e0:	bf8c      	ite	hi
 800d2e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d2e6:	2400      	movls	r4, #0
 800d2e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d2ec:	fa01 f000 	lsl.w	r0, r1, r0
 800d2f0:	fa24 f40c 	lsr.w	r4, r4, ip
 800d2f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d2f8:	ea40 0204 	orr.w	r2, r0, r4
 800d2fc:	e7db      	b.n	800d2b6 <__b2d+0x4a>
 800d2fe:	ea44 030c 	orr.w	r3, r4, ip
 800d302:	460a      	mov	r2, r1
 800d304:	e7d7      	b.n	800d2b6 <__b2d+0x4a>
 800d306:	bf00      	nop
 800d308:	3ff00000 	.word	0x3ff00000

0800d30c <__d2b>:
 800d30c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d310:	4689      	mov	r9, r1
 800d312:	2101      	movs	r1, #1
 800d314:	ec57 6b10 	vmov	r6, r7, d0
 800d318:	4690      	mov	r8, r2
 800d31a:	f7ff fc09 	bl	800cb30 <_Balloc>
 800d31e:	4604      	mov	r4, r0
 800d320:	b930      	cbnz	r0, 800d330 <__d2b+0x24>
 800d322:	4602      	mov	r2, r0
 800d324:	4b25      	ldr	r3, [pc, #148]	; (800d3bc <__d2b+0xb0>)
 800d326:	4826      	ldr	r0, [pc, #152]	; (800d3c0 <__d2b+0xb4>)
 800d328:	f240 310a 	movw	r1, #778	; 0x30a
 800d32c:	f7fe f872 	bl	800b414 <__assert_func>
 800d330:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d334:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d338:	bb35      	cbnz	r5, 800d388 <__d2b+0x7c>
 800d33a:	2e00      	cmp	r6, #0
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	d028      	beq.n	800d392 <__d2b+0x86>
 800d340:	4668      	mov	r0, sp
 800d342:	9600      	str	r6, [sp, #0]
 800d344:	f7ff fd06 	bl	800cd54 <__lo0bits>
 800d348:	9900      	ldr	r1, [sp, #0]
 800d34a:	b300      	cbz	r0, 800d38e <__d2b+0x82>
 800d34c:	9a01      	ldr	r2, [sp, #4]
 800d34e:	f1c0 0320 	rsb	r3, r0, #32
 800d352:	fa02 f303 	lsl.w	r3, r2, r3
 800d356:	430b      	orrs	r3, r1
 800d358:	40c2      	lsrs	r2, r0
 800d35a:	6163      	str	r3, [r4, #20]
 800d35c:	9201      	str	r2, [sp, #4]
 800d35e:	9b01      	ldr	r3, [sp, #4]
 800d360:	61a3      	str	r3, [r4, #24]
 800d362:	2b00      	cmp	r3, #0
 800d364:	bf14      	ite	ne
 800d366:	2202      	movne	r2, #2
 800d368:	2201      	moveq	r2, #1
 800d36a:	6122      	str	r2, [r4, #16]
 800d36c:	b1d5      	cbz	r5, 800d3a4 <__d2b+0x98>
 800d36e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d372:	4405      	add	r5, r0
 800d374:	f8c9 5000 	str.w	r5, [r9]
 800d378:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d37c:	f8c8 0000 	str.w	r0, [r8]
 800d380:	4620      	mov	r0, r4
 800d382:	b003      	add	sp, #12
 800d384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d388:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d38c:	e7d5      	b.n	800d33a <__d2b+0x2e>
 800d38e:	6161      	str	r1, [r4, #20]
 800d390:	e7e5      	b.n	800d35e <__d2b+0x52>
 800d392:	a801      	add	r0, sp, #4
 800d394:	f7ff fcde 	bl	800cd54 <__lo0bits>
 800d398:	9b01      	ldr	r3, [sp, #4]
 800d39a:	6163      	str	r3, [r4, #20]
 800d39c:	2201      	movs	r2, #1
 800d39e:	6122      	str	r2, [r4, #16]
 800d3a0:	3020      	adds	r0, #32
 800d3a2:	e7e3      	b.n	800d36c <__d2b+0x60>
 800d3a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d3ac:	f8c9 0000 	str.w	r0, [r9]
 800d3b0:	6918      	ldr	r0, [r3, #16]
 800d3b2:	f7ff fcaf 	bl	800cd14 <__hi0bits>
 800d3b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d3ba:	e7df      	b.n	800d37c <__d2b+0x70>
 800d3bc:	0800e094 	.word	0x0800e094
 800d3c0:	0800e120 	.word	0x0800e120

0800d3c4 <__ratio>:
 800d3c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c8:	4688      	mov	r8, r1
 800d3ca:	4669      	mov	r1, sp
 800d3cc:	4681      	mov	r9, r0
 800d3ce:	f7ff ff4d 	bl	800d26c <__b2d>
 800d3d2:	a901      	add	r1, sp, #4
 800d3d4:	4640      	mov	r0, r8
 800d3d6:	ec55 4b10 	vmov	r4, r5, d0
 800d3da:	f7ff ff47 	bl	800d26c <__b2d>
 800d3de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d3e6:	eba3 0c02 	sub.w	ip, r3, r2
 800d3ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d3ee:	1a9b      	subs	r3, r3, r2
 800d3f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d3f4:	ec51 0b10 	vmov	r0, r1, d0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	bfd6      	itet	le
 800d3fc:	460a      	movle	r2, r1
 800d3fe:	462a      	movgt	r2, r5
 800d400:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d404:	468b      	mov	fp, r1
 800d406:	462f      	mov	r7, r5
 800d408:	bfd4      	ite	le
 800d40a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d40e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d412:	4620      	mov	r0, r4
 800d414:	ee10 2a10 	vmov	r2, s0
 800d418:	465b      	mov	r3, fp
 800d41a:	4639      	mov	r1, r7
 800d41c:	f7f3 fa16 	bl	800084c <__aeabi_ddiv>
 800d420:	ec41 0b10 	vmov	d0, r0, r1
 800d424:	b003      	add	sp, #12
 800d426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d42a <__copybits>:
 800d42a:	3901      	subs	r1, #1
 800d42c:	b570      	push	{r4, r5, r6, lr}
 800d42e:	1149      	asrs	r1, r1, #5
 800d430:	6914      	ldr	r4, [r2, #16]
 800d432:	3101      	adds	r1, #1
 800d434:	f102 0314 	add.w	r3, r2, #20
 800d438:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d43c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d440:	1f05      	subs	r5, r0, #4
 800d442:	42a3      	cmp	r3, r4
 800d444:	d30c      	bcc.n	800d460 <__copybits+0x36>
 800d446:	1aa3      	subs	r3, r4, r2
 800d448:	3b11      	subs	r3, #17
 800d44a:	f023 0303 	bic.w	r3, r3, #3
 800d44e:	3211      	adds	r2, #17
 800d450:	42a2      	cmp	r2, r4
 800d452:	bf88      	it	hi
 800d454:	2300      	movhi	r3, #0
 800d456:	4418      	add	r0, r3
 800d458:	2300      	movs	r3, #0
 800d45a:	4288      	cmp	r0, r1
 800d45c:	d305      	bcc.n	800d46a <__copybits+0x40>
 800d45e:	bd70      	pop	{r4, r5, r6, pc}
 800d460:	f853 6b04 	ldr.w	r6, [r3], #4
 800d464:	f845 6f04 	str.w	r6, [r5, #4]!
 800d468:	e7eb      	b.n	800d442 <__copybits+0x18>
 800d46a:	f840 3b04 	str.w	r3, [r0], #4
 800d46e:	e7f4      	b.n	800d45a <__copybits+0x30>

0800d470 <__any_on>:
 800d470:	f100 0214 	add.w	r2, r0, #20
 800d474:	6900      	ldr	r0, [r0, #16]
 800d476:	114b      	asrs	r3, r1, #5
 800d478:	4298      	cmp	r0, r3
 800d47a:	b510      	push	{r4, lr}
 800d47c:	db11      	blt.n	800d4a2 <__any_on+0x32>
 800d47e:	dd0a      	ble.n	800d496 <__any_on+0x26>
 800d480:	f011 011f 	ands.w	r1, r1, #31
 800d484:	d007      	beq.n	800d496 <__any_on+0x26>
 800d486:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d48a:	fa24 f001 	lsr.w	r0, r4, r1
 800d48e:	fa00 f101 	lsl.w	r1, r0, r1
 800d492:	428c      	cmp	r4, r1
 800d494:	d10b      	bne.n	800d4ae <__any_on+0x3e>
 800d496:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d803      	bhi.n	800d4a6 <__any_on+0x36>
 800d49e:	2000      	movs	r0, #0
 800d4a0:	bd10      	pop	{r4, pc}
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	e7f7      	b.n	800d496 <__any_on+0x26>
 800d4a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4aa:	2900      	cmp	r1, #0
 800d4ac:	d0f5      	beq.n	800d49a <__any_on+0x2a>
 800d4ae:	2001      	movs	r0, #1
 800d4b0:	e7f6      	b.n	800d4a0 <__any_on+0x30>

0800d4b2 <_calloc_r>:
 800d4b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4b4:	fba1 2402 	umull	r2, r4, r1, r2
 800d4b8:	b94c      	cbnz	r4, 800d4ce <_calloc_r+0x1c>
 800d4ba:	4611      	mov	r1, r2
 800d4bc:	9201      	str	r2, [sp, #4]
 800d4be:	f7fc f857 	bl	8009570 <_malloc_r>
 800d4c2:	9a01      	ldr	r2, [sp, #4]
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	b930      	cbnz	r0, 800d4d6 <_calloc_r+0x24>
 800d4c8:	4628      	mov	r0, r5
 800d4ca:	b003      	add	sp, #12
 800d4cc:	bd30      	pop	{r4, r5, pc}
 800d4ce:	220c      	movs	r2, #12
 800d4d0:	6002      	str	r2, [r0, #0]
 800d4d2:	2500      	movs	r5, #0
 800d4d4:	e7f8      	b.n	800d4c8 <_calloc_r+0x16>
 800d4d6:	4621      	mov	r1, r4
 800d4d8:	f7fc f821 	bl	800951e <memset>
 800d4dc:	e7f4      	b.n	800d4c8 <_calloc_r+0x16>
	...

0800d4e0 <_free_r>:
 800d4e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4e2:	2900      	cmp	r1, #0
 800d4e4:	d044      	beq.n	800d570 <_free_r+0x90>
 800d4e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4ea:	9001      	str	r0, [sp, #4]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	f1a1 0404 	sub.w	r4, r1, #4
 800d4f2:	bfb8      	it	lt
 800d4f4:	18e4      	addlt	r4, r4, r3
 800d4f6:	f7ff fb0f 	bl	800cb18 <__malloc_lock>
 800d4fa:	4a1e      	ldr	r2, [pc, #120]	; (800d574 <_free_r+0x94>)
 800d4fc:	9801      	ldr	r0, [sp, #4]
 800d4fe:	6813      	ldr	r3, [r2, #0]
 800d500:	b933      	cbnz	r3, 800d510 <_free_r+0x30>
 800d502:	6063      	str	r3, [r4, #4]
 800d504:	6014      	str	r4, [r2, #0]
 800d506:	b003      	add	sp, #12
 800d508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d50c:	f7ff bb0a 	b.w	800cb24 <__malloc_unlock>
 800d510:	42a3      	cmp	r3, r4
 800d512:	d908      	bls.n	800d526 <_free_r+0x46>
 800d514:	6825      	ldr	r5, [r4, #0]
 800d516:	1961      	adds	r1, r4, r5
 800d518:	428b      	cmp	r3, r1
 800d51a:	bf01      	itttt	eq
 800d51c:	6819      	ldreq	r1, [r3, #0]
 800d51e:	685b      	ldreq	r3, [r3, #4]
 800d520:	1949      	addeq	r1, r1, r5
 800d522:	6021      	streq	r1, [r4, #0]
 800d524:	e7ed      	b.n	800d502 <_free_r+0x22>
 800d526:	461a      	mov	r2, r3
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	b10b      	cbz	r3, 800d530 <_free_r+0x50>
 800d52c:	42a3      	cmp	r3, r4
 800d52e:	d9fa      	bls.n	800d526 <_free_r+0x46>
 800d530:	6811      	ldr	r1, [r2, #0]
 800d532:	1855      	adds	r5, r2, r1
 800d534:	42a5      	cmp	r5, r4
 800d536:	d10b      	bne.n	800d550 <_free_r+0x70>
 800d538:	6824      	ldr	r4, [r4, #0]
 800d53a:	4421      	add	r1, r4
 800d53c:	1854      	adds	r4, r2, r1
 800d53e:	42a3      	cmp	r3, r4
 800d540:	6011      	str	r1, [r2, #0]
 800d542:	d1e0      	bne.n	800d506 <_free_r+0x26>
 800d544:	681c      	ldr	r4, [r3, #0]
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	6053      	str	r3, [r2, #4]
 800d54a:	4421      	add	r1, r4
 800d54c:	6011      	str	r1, [r2, #0]
 800d54e:	e7da      	b.n	800d506 <_free_r+0x26>
 800d550:	d902      	bls.n	800d558 <_free_r+0x78>
 800d552:	230c      	movs	r3, #12
 800d554:	6003      	str	r3, [r0, #0]
 800d556:	e7d6      	b.n	800d506 <_free_r+0x26>
 800d558:	6825      	ldr	r5, [r4, #0]
 800d55a:	1961      	adds	r1, r4, r5
 800d55c:	428b      	cmp	r3, r1
 800d55e:	bf04      	itt	eq
 800d560:	6819      	ldreq	r1, [r3, #0]
 800d562:	685b      	ldreq	r3, [r3, #4]
 800d564:	6063      	str	r3, [r4, #4]
 800d566:	bf04      	itt	eq
 800d568:	1949      	addeq	r1, r1, r5
 800d56a:	6021      	streq	r1, [r4, #0]
 800d56c:	6054      	str	r4, [r2, #4]
 800d56e:	e7ca      	b.n	800d506 <_free_r+0x26>
 800d570:	b003      	add	sp, #12
 800d572:	bd30      	pop	{r4, r5, pc}
 800d574:	20008364 	.word	0x20008364

0800d578 <__ssputs_r>:
 800d578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d57c:	688e      	ldr	r6, [r1, #8]
 800d57e:	429e      	cmp	r6, r3
 800d580:	4682      	mov	sl, r0
 800d582:	460c      	mov	r4, r1
 800d584:	4690      	mov	r8, r2
 800d586:	461f      	mov	r7, r3
 800d588:	d838      	bhi.n	800d5fc <__ssputs_r+0x84>
 800d58a:	898a      	ldrh	r2, [r1, #12]
 800d58c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d590:	d032      	beq.n	800d5f8 <__ssputs_r+0x80>
 800d592:	6825      	ldr	r5, [r4, #0]
 800d594:	6909      	ldr	r1, [r1, #16]
 800d596:	eba5 0901 	sub.w	r9, r5, r1
 800d59a:	6965      	ldr	r5, [r4, #20]
 800d59c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	444b      	add	r3, r9
 800d5a8:	106d      	asrs	r5, r5, #1
 800d5aa:	429d      	cmp	r5, r3
 800d5ac:	bf38      	it	cc
 800d5ae:	461d      	movcc	r5, r3
 800d5b0:	0553      	lsls	r3, r2, #21
 800d5b2:	d531      	bpl.n	800d618 <__ssputs_r+0xa0>
 800d5b4:	4629      	mov	r1, r5
 800d5b6:	f7fb ffdb 	bl	8009570 <_malloc_r>
 800d5ba:	4606      	mov	r6, r0
 800d5bc:	b950      	cbnz	r0, 800d5d4 <__ssputs_r+0x5c>
 800d5be:	230c      	movs	r3, #12
 800d5c0:	f8ca 3000 	str.w	r3, [sl]
 800d5c4:	89a3      	ldrh	r3, [r4, #12]
 800d5c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5ca:	81a3      	strh	r3, [r4, #12]
 800d5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5d4:	6921      	ldr	r1, [r4, #16]
 800d5d6:	464a      	mov	r2, r9
 800d5d8:	f7fb ff93 	bl	8009502 <memcpy>
 800d5dc:	89a3      	ldrh	r3, [r4, #12]
 800d5de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d5e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5e6:	81a3      	strh	r3, [r4, #12]
 800d5e8:	6126      	str	r6, [r4, #16]
 800d5ea:	6165      	str	r5, [r4, #20]
 800d5ec:	444e      	add	r6, r9
 800d5ee:	eba5 0509 	sub.w	r5, r5, r9
 800d5f2:	6026      	str	r6, [r4, #0]
 800d5f4:	60a5      	str	r5, [r4, #8]
 800d5f6:	463e      	mov	r6, r7
 800d5f8:	42be      	cmp	r6, r7
 800d5fa:	d900      	bls.n	800d5fe <__ssputs_r+0x86>
 800d5fc:	463e      	mov	r6, r7
 800d5fe:	6820      	ldr	r0, [r4, #0]
 800d600:	4632      	mov	r2, r6
 800d602:	4641      	mov	r1, r8
 800d604:	f000 fad2 	bl	800dbac <memmove>
 800d608:	68a3      	ldr	r3, [r4, #8]
 800d60a:	1b9b      	subs	r3, r3, r6
 800d60c:	60a3      	str	r3, [r4, #8]
 800d60e:	6823      	ldr	r3, [r4, #0]
 800d610:	4433      	add	r3, r6
 800d612:	6023      	str	r3, [r4, #0]
 800d614:	2000      	movs	r0, #0
 800d616:	e7db      	b.n	800d5d0 <__ssputs_r+0x58>
 800d618:	462a      	mov	r2, r5
 800d61a:	f000 fae1 	bl	800dbe0 <_realloc_r>
 800d61e:	4606      	mov	r6, r0
 800d620:	2800      	cmp	r0, #0
 800d622:	d1e1      	bne.n	800d5e8 <__ssputs_r+0x70>
 800d624:	6921      	ldr	r1, [r4, #16]
 800d626:	4650      	mov	r0, sl
 800d628:	f7ff ff5a 	bl	800d4e0 <_free_r>
 800d62c:	e7c7      	b.n	800d5be <__ssputs_r+0x46>
	...

0800d630 <_svfiprintf_r>:
 800d630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d634:	4698      	mov	r8, r3
 800d636:	898b      	ldrh	r3, [r1, #12]
 800d638:	061b      	lsls	r3, r3, #24
 800d63a:	b09d      	sub	sp, #116	; 0x74
 800d63c:	4607      	mov	r7, r0
 800d63e:	460d      	mov	r5, r1
 800d640:	4614      	mov	r4, r2
 800d642:	d50e      	bpl.n	800d662 <_svfiprintf_r+0x32>
 800d644:	690b      	ldr	r3, [r1, #16]
 800d646:	b963      	cbnz	r3, 800d662 <_svfiprintf_r+0x32>
 800d648:	2140      	movs	r1, #64	; 0x40
 800d64a:	f7fb ff91 	bl	8009570 <_malloc_r>
 800d64e:	6028      	str	r0, [r5, #0]
 800d650:	6128      	str	r0, [r5, #16]
 800d652:	b920      	cbnz	r0, 800d65e <_svfiprintf_r+0x2e>
 800d654:	230c      	movs	r3, #12
 800d656:	603b      	str	r3, [r7, #0]
 800d658:	f04f 30ff 	mov.w	r0, #4294967295
 800d65c:	e0d1      	b.n	800d802 <_svfiprintf_r+0x1d2>
 800d65e:	2340      	movs	r3, #64	; 0x40
 800d660:	616b      	str	r3, [r5, #20]
 800d662:	2300      	movs	r3, #0
 800d664:	9309      	str	r3, [sp, #36]	; 0x24
 800d666:	2320      	movs	r3, #32
 800d668:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d66c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d670:	2330      	movs	r3, #48	; 0x30
 800d672:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d81c <_svfiprintf_r+0x1ec>
 800d676:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d67a:	f04f 0901 	mov.w	r9, #1
 800d67e:	4623      	mov	r3, r4
 800d680:	469a      	mov	sl, r3
 800d682:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d686:	b10a      	cbz	r2, 800d68c <_svfiprintf_r+0x5c>
 800d688:	2a25      	cmp	r2, #37	; 0x25
 800d68a:	d1f9      	bne.n	800d680 <_svfiprintf_r+0x50>
 800d68c:	ebba 0b04 	subs.w	fp, sl, r4
 800d690:	d00b      	beq.n	800d6aa <_svfiprintf_r+0x7a>
 800d692:	465b      	mov	r3, fp
 800d694:	4622      	mov	r2, r4
 800d696:	4629      	mov	r1, r5
 800d698:	4638      	mov	r0, r7
 800d69a:	f7ff ff6d 	bl	800d578 <__ssputs_r>
 800d69e:	3001      	adds	r0, #1
 800d6a0:	f000 80aa 	beq.w	800d7f8 <_svfiprintf_r+0x1c8>
 800d6a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6a6:	445a      	add	r2, fp
 800d6a8:	9209      	str	r2, [sp, #36]	; 0x24
 800d6aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	f000 80a2 	beq.w	800d7f8 <_svfiprintf_r+0x1c8>
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6be:	f10a 0a01 	add.w	sl, sl, #1
 800d6c2:	9304      	str	r3, [sp, #16]
 800d6c4:	9307      	str	r3, [sp, #28]
 800d6c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6ca:	931a      	str	r3, [sp, #104]	; 0x68
 800d6cc:	4654      	mov	r4, sl
 800d6ce:	2205      	movs	r2, #5
 800d6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6d4:	4851      	ldr	r0, [pc, #324]	; (800d81c <_svfiprintf_r+0x1ec>)
 800d6d6:	f7f2 fd83 	bl	80001e0 <memchr>
 800d6da:	9a04      	ldr	r2, [sp, #16]
 800d6dc:	b9d8      	cbnz	r0, 800d716 <_svfiprintf_r+0xe6>
 800d6de:	06d0      	lsls	r0, r2, #27
 800d6e0:	bf44      	itt	mi
 800d6e2:	2320      	movmi	r3, #32
 800d6e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6e8:	0711      	lsls	r1, r2, #28
 800d6ea:	bf44      	itt	mi
 800d6ec:	232b      	movmi	r3, #43	; 0x2b
 800d6ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6f2:	f89a 3000 	ldrb.w	r3, [sl]
 800d6f6:	2b2a      	cmp	r3, #42	; 0x2a
 800d6f8:	d015      	beq.n	800d726 <_svfiprintf_r+0xf6>
 800d6fa:	9a07      	ldr	r2, [sp, #28]
 800d6fc:	4654      	mov	r4, sl
 800d6fe:	2000      	movs	r0, #0
 800d700:	f04f 0c0a 	mov.w	ip, #10
 800d704:	4621      	mov	r1, r4
 800d706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d70a:	3b30      	subs	r3, #48	; 0x30
 800d70c:	2b09      	cmp	r3, #9
 800d70e:	d94e      	bls.n	800d7ae <_svfiprintf_r+0x17e>
 800d710:	b1b0      	cbz	r0, 800d740 <_svfiprintf_r+0x110>
 800d712:	9207      	str	r2, [sp, #28]
 800d714:	e014      	b.n	800d740 <_svfiprintf_r+0x110>
 800d716:	eba0 0308 	sub.w	r3, r0, r8
 800d71a:	fa09 f303 	lsl.w	r3, r9, r3
 800d71e:	4313      	orrs	r3, r2
 800d720:	9304      	str	r3, [sp, #16]
 800d722:	46a2      	mov	sl, r4
 800d724:	e7d2      	b.n	800d6cc <_svfiprintf_r+0x9c>
 800d726:	9b03      	ldr	r3, [sp, #12]
 800d728:	1d19      	adds	r1, r3, #4
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	9103      	str	r1, [sp, #12]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	bfbb      	ittet	lt
 800d732:	425b      	neglt	r3, r3
 800d734:	f042 0202 	orrlt.w	r2, r2, #2
 800d738:	9307      	strge	r3, [sp, #28]
 800d73a:	9307      	strlt	r3, [sp, #28]
 800d73c:	bfb8      	it	lt
 800d73e:	9204      	strlt	r2, [sp, #16]
 800d740:	7823      	ldrb	r3, [r4, #0]
 800d742:	2b2e      	cmp	r3, #46	; 0x2e
 800d744:	d10c      	bne.n	800d760 <_svfiprintf_r+0x130>
 800d746:	7863      	ldrb	r3, [r4, #1]
 800d748:	2b2a      	cmp	r3, #42	; 0x2a
 800d74a:	d135      	bne.n	800d7b8 <_svfiprintf_r+0x188>
 800d74c:	9b03      	ldr	r3, [sp, #12]
 800d74e:	1d1a      	adds	r2, r3, #4
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	9203      	str	r2, [sp, #12]
 800d754:	2b00      	cmp	r3, #0
 800d756:	bfb8      	it	lt
 800d758:	f04f 33ff 	movlt.w	r3, #4294967295
 800d75c:	3402      	adds	r4, #2
 800d75e:	9305      	str	r3, [sp, #20]
 800d760:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d82c <_svfiprintf_r+0x1fc>
 800d764:	7821      	ldrb	r1, [r4, #0]
 800d766:	2203      	movs	r2, #3
 800d768:	4650      	mov	r0, sl
 800d76a:	f7f2 fd39 	bl	80001e0 <memchr>
 800d76e:	b140      	cbz	r0, 800d782 <_svfiprintf_r+0x152>
 800d770:	2340      	movs	r3, #64	; 0x40
 800d772:	eba0 000a 	sub.w	r0, r0, sl
 800d776:	fa03 f000 	lsl.w	r0, r3, r0
 800d77a:	9b04      	ldr	r3, [sp, #16]
 800d77c:	4303      	orrs	r3, r0
 800d77e:	3401      	adds	r4, #1
 800d780:	9304      	str	r3, [sp, #16]
 800d782:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d786:	4826      	ldr	r0, [pc, #152]	; (800d820 <_svfiprintf_r+0x1f0>)
 800d788:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d78c:	2206      	movs	r2, #6
 800d78e:	f7f2 fd27 	bl	80001e0 <memchr>
 800d792:	2800      	cmp	r0, #0
 800d794:	d038      	beq.n	800d808 <_svfiprintf_r+0x1d8>
 800d796:	4b23      	ldr	r3, [pc, #140]	; (800d824 <_svfiprintf_r+0x1f4>)
 800d798:	bb1b      	cbnz	r3, 800d7e2 <_svfiprintf_r+0x1b2>
 800d79a:	9b03      	ldr	r3, [sp, #12]
 800d79c:	3307      	adds	r3, #7
 800d79e:	f023 0307 	bic.w	r3, r3, #7
 800d7a2:	3308      	adds	r3, #8
 800d7a4:	9303      	str	r3, [sp, #12]
 800d7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7a8:	4433      	add	r3, r6
 800d7aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d7ac:	e767      	b.n	800d67e <_svfiprintf_r+0x4e>
 800d7ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	2001      	movs	r0, #1
 800d7b6:	e7a5      	b.n	800d704 <_svfiprintf_r+0xd4>
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	3401      	adds	r4, #1
 800d7bc:	9305      	str	r3, [sp, #20]
 800d7be:	4619      	mov	r1, r3
 800d7c0:	f04f 0c0a 	mov.w	ip, #10
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7ca:	3a30      	subs	r2, #48	; 0x30
 800d7cc:	2a09      	cmp	r2, #9
 800d7ce:	d903      	bls.n	800d7d8 <_svfiprintf_r+0x1a8>
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d0c5      	beq.n	800d760 <_svfiprintf_r+0x130>
 800d7d4:	9105      	str	r1, [sp, #20]
 800d7d6:	e7c3      	b.n	800d760 <_svfiprintf_r+0x130>
 800d7d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7dc:	4604      	mov	r4, r0
 800d7de:	2301      	movs	r3, #1
 800d7e0:	e7f0      	b.n	800d7c4 <_svfiprintf_r+0x194>
 800d7e2:	ab03      	add	r3, sp, #12
 800d7e4:	9300      	str	r3, [sp, #0]
 800d7e6:	462a      	mov	r2, r5
 800d7e8:	4b0f      	ldr	r3, [pc, #60]	; (800d828 <_svfiprintf_r+0x1f8>)
 800d7ea:	a904      	add	r1, sp, #16
 800d7ec:	4638      	mov	r0, r7
 800d7ee:	f7fb ffd3 	bl	8009798 <_printf_float>
 800d7f2:	1c42      	adds	r2, r0, #1
 800d7f4:	4606      	mov	r6, r0
 800d7f6:	d1d6      	bne.n	800d7a6 <_svfiprintf_r+0x176>
 800d7f8:	89ab      	ldrh	r3, [r5, #12]
 800d7fa:	065b      	lsls	r3, r3, #25
 800d7fc:	f53f af2c 	bmi.w	800d658 <_svfiprintf_r+0x28>
 800d800:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d802:	b01d      	add	sp, #116	; 0x74
 800d804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d808:	ab03      	add	r3, sp, #12
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	462a      	mov	r2, r5
 800d80e:	4b06      	ldr	r3, [pc, #24]	; (800d828 <_svfiprintf_r+0x1f8>)
 800d810:	a904      	add	r1, sp, #16
 800d812:	4638      	mov	r0, r7
 800d814:	f7fc fa64 	bl	8009ce0 <_printf_i>
 800d818:	e7eb      	b.n	800d7f2 <_svfiprintf_r+0x1c2>
 800d81a:	bf00      	nop
 800d81c:	0800e27c 	.word	0x0800e27c
 800d820:	0800e286 	.word	0x0800e286
 800d824:	08009799 	.word	0x08009799
 800d828:	0800d579 	.word	0x0800d579
 800d82c:	0800e282 	.word	0x0800e282

0800d830 <__sfputc_r>:
 800d830:	6893      	ldr	r3, [r2, #8]
 800d832:	3b01      	subs	r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	b410      	push	{r4}
 800d838:	6093      	str	r3, [r2, #8]
 800d83a:	da08      	bge.n	800d84e <__sfputc_r+0x1e>
 800d83c:	6994      	ldr	r4, [r2, #24]
 800d83e:	42a3      	cmp	r3, r4
 800d840:	db01      	blt.n	800d846 <__sfputc_r+0x16>
 800d842:	290a      	cmp	r1, #10
 800d844:	d103      	bne.n	800d84e <__sfputc_r+0x1e>
 800d846:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d84a:	f7fd bd11 	b.w	800b270 <__swbuf_r>
 800d84e:	6813      	ldr	r3, [r2, #0]
 800d850:	1c58      	adds	r0, r3, #1
 800d852:	6010      	str	r0, [r2, #0]
 800d854:	7019      	strb	r1, [r3, #0]
 800d856:	4608      	mov	r0, r1
 800d858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d85c:	4770      	bx	lr

0800d85e <__sfputs_r>:
 800d85e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d860:	4606      	mov	r6, r0
 800d862:	460f      	mov	r7, r1
 800d864:	4614      	mov	r4, r2
 800d866:	18d5      	adds	r5, r2, r3
 800d868:	42ac      	cmp	r4, r5
 800d86a:	d101      	bne.n	800d870 <__sfputs_r+0x12>
 800d86c:	2000      	movs	r0, #0
 800d86e:	e007      	b.n	800d880 <__sfputs_r+0x22>
 800d870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d874:	463a      	mov	r2, r7
 800d876:	4630      	mov	r0, r6
 800d878:	f7ff ffda 	bl	800d830 <__sfputc_r>
 800d87c:	1c43      	adds	r3, r0, #1
 800d87e:	d1f3      	bne.n	800d868 <__sfputs_r+0xa>
 800d880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d884 <_vfiprintf_r>:
 800d884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d888:	460d      	mov	r5, r1
 800d88a:	b09d      	sub	sp, #116	; 0x74
 800d88c:	4614      	mov	r4, r2
 800d88e:	4698      	mov	r8, r3
 800d890:	4606      	mov	r6, r0
 800d892:	b118      	cbz	r0, 800d89c <_vfiprintf_r+0x18>
 800d894:	6983      	ldr	r3, [r0, #24]
 800d896:	b90b      	cbnz	r3, 800d89c <_vfiprintf_r+0x18>
 800d898:	f7fb fd6e 	bl	8009378 <__sinit>
 800d89c:	4b89      	ldr	r3, [pc, #548]	; (800dac4 <_vfiprintf_r+0x240>)
 800d89e:	429d      	cmp	r5, r3
 800d8a0:	d11b      	bne.n	800d8da <_vfiprintf_r+0x56>
 800d8a2:	6875      	ldr	r5, [r6, #4]
 800d8a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8a6:	07d9      	lsls	r1, r3, #31
 800d8a8:	d405      	bmi.n	800d8b6 <_vfiprintf_r+0x32>
 800d8aa:	89ab      	ldrh	r3, [r5, #12]
 800d8ac:	059a      	lsls	r2, r3, #22
 800d8ae:	d402      	bmi.n	800d8b6 <_vfiprintf_r+0x32>
 800d8b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8b2:	f7fb fe24 	bl	80094fe <__retarget_lock_acquire_recursive>
 800d8b6:	89ab      	ldrh	r3, [r5, #12]
 800d8b8:	071b      	lsls	r3, r3, #28
 800d8ba:	d501      	bpl.n	800d8c0 <_vfiprintf_r+0x3c>
 800d8bc:	692b      	ldr	r3, [r5, #16]
 800d8be:	b9eb      	cbnz	r3, 800d8fc <_vfiprintf_r+0x78>
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	f7fd fd38 	bl	800b338 <__swsetup_r>
 800d8c8:	b1c0      	cbz	r0, 800d8fc <_vfiprintf_r+0x78>
 800d8ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8cc:	07dc      	lsls	r4, r3, #31
 800d8ce:	d50e      	bpl.n	800d8ee <_vfiprintf_r+0x6a>
 800d8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d4:	b01d      	add	sp, #116	; 0x74
 800d8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8da:	4b7b      	ldr	r3, [pc, #492]	; (800dac8 <_vfiprintf_r+0x244>)
 800d8dc:	429d      	cmp	r5, r3
 800d8de:	d101      	bne.n	800d8e4 <_vfiprintf_r+0x60>
 800d8e0:	68b5      	ldr	r5, [r6, #8]
 800d8e2:	e7df      	b.n	800d8a4 <_vfiprintf_r+0x20>
 800d8e4:	4b79      	ldr	r3, [pc, #484]	; (800dacc <_vfiprintf_r+0x248>)
 800d8e6:	429d      	cmp	r5, r3
 800d8e8:	bf08      	it	eq
 800d8ea:	68f5      	ldreq	r5, [r6, #12]
 800d8ec:	e7da      	b.n	800d8a4 <_vfiprintf_r+0x20>
 800d8ee:	89ab      	ldrh	r3, [r5, #12]
 800d8f0:	0598      	lsls	r0, r3, #22
 800d8f2:	d4ed      	bmi.n	800d8d0 <_vfiprintf_r+0x4c>
 800d8f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8f6:	f7fb fe03 	bl	8009500 <__retarget_lock_release_recursive>
 800d8fa:	e7e9      	b.n	800d8d0 <_vfiprintf_r+0x4c>
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d900:	2320      	movs	r3, #32
 800d902:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d906:	f8cd 800c 	str.w	r8, [sp, #12]
 800d90a:	2330      	movs	r3, #48	; 0x30
 800d90c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dad0 <_vfiprintf_r+0x24c>
 800d910:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d914:	f04f 0901 	mov.w	r9, #1
 800d918:	4623      	mov	r3, r4
 800d91a:	469a      	mov	sl, r3
 800d91c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d920:	b10a      	cbz	r2, 800d926 <_vfiprintf_r+0xa2>
 800d922:	2a25      	cmp	r2, #37	; 0x25
 800d924:	d1f9      	bne.n	800d91a <_vfiprintf_r+0x96>
 800d926:	ebba 0b04 	subs.w	fp, sl, r4
 800d92a:	d00b      	beq.n	800d944 <_vfiprintf_r+0xc0>
 800d92c:	465b      	mov	r3, fp
 800d92e:	4622      	mov	r2, r4
 800d930:	4629      	mov	r1, r5
 800d932:	4630      	mov	r0, r6
 800d934:	f7ff ff93 	bl	800d85e <__sfputs_r>
 800d938:	3001      	adds	r0, #1
 800d93a:	f000 80aa 	beq.w	800da92 <_vfiprintf_r+0x20e>
 800d93e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d940:	445a      	add	r2, fp
 800d942:	9209      	str	r2, [sp, #36]	; 0x24
 800d944:	f89a 3000 	ldrb.w	r3, [sl]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	f000 80a2 	beq.w	800da92 <_vfiprintf_r+0x20e>
 800d94e:	2300      	movs	r3, #0
 800d950:	f04f 32ff 	mov.w	r2, #4294967295
 800d954:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d958:	f10a 0a01 	add.w	sl, sl, #1
 800d95c:	9304      	str	r3, [sp, #16]
 800d95e:	9307      	str	r3, [sp, #28]
 800d960:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d964:	931a      	str	r3, [sp, #104]	; 0x68
 800d966:	4654      	mov	r4, sl
 800d968:	2205      	movs	r2, #5
 800d96a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d96e:	4858      	ldr	r0, [pc, #352]	; (800dad0 <_vfiprintf_r+0x24c>)
 800d970:	f7f2 fc36 	bl	80001e0 <memchr>
 800d974:	9a04      	ldr	r2, [sp, #16]
 800d976:	b9d8      	cbnz	r0, 800d9b0 <_vfiprintf_r+0x12c>
 800d978:	06d1      	lsls	r1, r2, #27
 800d97a:	bf44      	itt	mi
 800d97c:	2320      	movmi	r3, #32
 800d97e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d982:	0713      	lsls	r3, r2, #28
 800d984:	bf44      	itt	mi
 800d986:	232b      	movmi	r3, #43	; 0x2b
 800d988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d98c:	f89a 3000 	ldrb.w	r3, [sl]
 800d990:	2b2a      	cmp	r3, #42	; 0x2a
 800d992:	d015      	beq.n	800d9c0 <_vfiprintf_r+0x13c>
 800d994:	9a07      	ldr	r2, [sp, #28]
 800d996:	4654      	mov	r4, sl
 800d998:	2000      	movs	r0, #0
 800d99a:	f04f 0c0a 	mov.w	ip, #10
 800d99e:	4621      	mov	r1, r4
 800d9a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9a4:	3b30      	subs	r3, #48	; 0x30
 800d9a6:	2b09      	cmp	r3, #9
 800d9a8:	d94e      	bls.n	800da48 <_vfiprintf_r+0x1c4>
 800d9aa:	b1b0      	cbz	r0, 800d9da <_vfiprintf_r+0x156>
 800d9ac:	9207      	str	r2, [sp, #28]
 800d9ae:	e014      	b.n	800d9da <_vfiprintf_r+0x156>
 800d9b0:	eba0 0308 	sub.w	r3, r0, r8
 800d9b4:	fa09 f303 	lsl.w	r3, r9, r3
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	9304      	str	r3, [sp, #16]
 800d9bc:	46a2      	mov	sl, r4
 800d9be:	e7d2      	b.n	800d966 <_vfiprintf_r+0xe2>
 800d9c0:	9b03      	ldr	r3, [sp, #12]
 800d9c2:	1d19      	adds	r1, r3, #4
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	9103      	str	r1, [sp, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	bfbb      	ittet	lt
 800d9cc:	425b      	neglt	r3, r3
 800d9ce:	f042 0202 	orrlt.w	r2, r2, #2
 800d9d2:	9307      	strge	r3, [sp, #28]
 800d9d4:	9307      	strlt	r3, [sp, #28]
 800d9d6:	bfb8      	it	lt
 800d9d8:	9204      	strlt	r2, [sp, #16]
 800d9da:	7823      	ldrb	r3, [r4, #0]
 800d9dc:	2b2e      	cmp	r3, #46	; 0x2e
 800d9de:	d10c      	bne.n	800d9fa <_vfiprintf_r+0x176>
 800d9e0:	7863      	ldrb	r3, [r4, #1]
 800d9e2:	2b2a      	cmp	r3, #42	; 0x2a
 800d9e4:	d135      	bne.n	800da52 <_vfiprintf_r+0x1ce>
 800d9e6:	9b03      	ldr	r3, [sp, #12]
 800d9e8:	1d1a      	adds	r2, r3, #4
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	9203      	str	r2, [sp, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	bfb8      	it	lt
 800d9f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9f6:	3402      	adds	r4, #2
 800d9f8:	9305      	str	r3, [sp, #20]
 800d9fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dae0 <_vfiprintf_r+0x25c>
 800d9fe:	7821      	ldrb	r1, [r4, #0]
 800da00:	2203      	movs	r2, #3
 800da02:	4650      	mov	r0, sl
 800da04:	f7f2 fbec 	bl	80001e0 <memchr>
 800da08:	b140      	cbz	r0, 800da1c <_vfiprintf_r+0x198>
 800da0a:	2340      	movs	r3, #64	; 0x40
 800da0c:	eba0 000a 	sub.w	r0, r0, sl
 800da10:	fa03 f000 	lsl.w	r0, r3, r0
 800da14:	9b04      	ldr	r3, [sp, #16]
 800da16:	4303      	orrs	r3, r0
 800da18:	3401      	adds	r4, #1
 800da1a:	9304      	str	r3, [sp, #16]
 800da1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da20:	482c      	ldr	r0, [pc, #176]	; (800dad4 <_vfiprintf_r+0x250>)
 800da22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da26:	2206      	movs	r2, #6
 800da28:	f7f2 fbda 	bl	80001e0 <memchr>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d03f      	beq.n	800dab0 <_vfiprintf_r+0x22c>
 800da30:	4b29      	ldr	r3, [pc, #164]	; (800dad8 <_vfiprintf_r+0x254>)
 800da32:	bb1b      	cbnz	r3, 800da7c <_vfiprintf_r+0x1f8>
 800da34:	9b03      	ldr	r3, [sp, #12]
 800da36:	3307      	adds	r3, #7
 800da38:	f023 0307 	bic.w	r3, r3, #7
 800da3c:	3308      	adds	r3, #8
 800da3e:	9303      	str	r3, [sp, #12]
 800da40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da42:	443b      	add	r3, r7
 800da44:	9309      	str	r3, [sp, #36]	; 0x24
 800da46:	e767      	b.n	800d918 <_vfiprintf_r+0x94>
 800da48:	fb0c 3202 	mla	r2, ip, r2, r3
 800da4c:	460c      	mov	r4, r1
 800da4e:	2001      	movs	r0, #1
 800da50:	e7a5      	b.n	800d99e <_vfiprintf_r+0x11a>
 800da52:	2300      	movs	r3, #0
 800da54:	3401      	adds	r4, #1
 800da56:	9305      	str	r3, [sp, #20]
 800da58:	4619      	mov	r1, r3
 800da5a:	f04f 0c0a 	mov.w	ip, #10
 800da5e:	4620      	mov	r0, r4
 800da60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da64:	3a30      	subs	r2, #48	; 0x30
 800da66:	2a09      	cmp	r2, #9
 800da68:	d903      	bls.n	800da72 <_vfiprintf_r+0x1ee>
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d0c5      	beq.n	800d9fa <_vfiprintf_r+0x176>
 800da6e:	9105      	str	r1, [sp, #20]
 800da70:	e7c3      	b.n	800d9fa <_vfiprintf_r+0x176>
 800da72:	fb0c 2101 	mla	r1, ip, r1, r2
 800da76:	4604      	mov	r4, r0
 800da78:	2301      	movs	r3, #1
 800da7a:	e7f0      	b.n	800da5e <_vfiprintf_r+0x1da>
 800da7c:	ab03      	add	r3, sp, #12
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	462a      	mov	r2, r5
 800da82:	4b16      	ldr	r3, [pc, #88]	; (800dadc <_vfiprintf_r+0x258>)
 800da84:	a904      	add	r1, sp, #16
 800da86:	4630      	mov	r0, r6
 800da88:	f7fb fe86 	bl	8009798 <_printf_float>
 800da8c:	4607      	mov	r7, r0
 800da8e:	1c78      	adds	r0, r7, #1
 800da90:	d1d6      	bne.n	800da40 <_vfiprintf_r+0x1bc>
 800da92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da94:	07d9      	lsls	r1, r3, #31
 800da96:	d405      	bmi.n	800daa4 <_vfiprintf_r+0x220>
 800da98:	89ab      	ldrh	r3, [r5, #12]
 800da9a:	059a      	lsls	r2, r3, #22
 800da9c:	d402      	bmi.n	800daa4 <_vfiprintf_r+0x220>
 800da9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800daa0:	f7fb fd2e 	bl	8009500 <__retarget_lock_release_recursive>
 800daa4:	89ab      	ldrh	r3, [r5, #12]
 800daa6:	065b      	lsls	r3, r3, #25
 800daa8:	f53f af12 	bmi.w	800d8d0 <_vfiprintf_r+0x4c>
 800daac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800daae:	e711      	b.n	800d8d4 <_vfiprintf_r+0x50>
 800dab0:	ab03      	add	r3, sp, #12
 800dab2:	9300      	str	r3, [sp, #0]
 800dab4:	462a      	mov	r2, r5
 800dab6:	4b09      	ldr	r3, [pc, #36]	; (800dadc <_vfiprintf_r+0x258>)
 800dab8:	a904      	add	r1, sp, #16
 800daba:	4630      	mov	r0, r6
 800dabc:	f7fc f910 	bl	8009ce0 <_printf_i>
 800dac0:	e7e4      	b.n	800da8c <_vfiprintf_r+0x208>
 800dac2:	bf00      	nop
 800dac4:	0800de08 	.word	0x0800de08
 800dac8:	0800de28 	.word	0x0800de28
 800dacc:	0800dde8 	.word	0x0800dde8
 800dad0:	0800e27c 	.word	0x0800e27c
 800dad4:	0800e286 	.word	0x0800e286
 800dad8:	08009799 	.word	0x08009799
 800dadc:	0800d85f 	.word	0x0800d85f
 800dae0:	0800e282 	.word	0x0800e282

0800dae4 <_read_r>:
 800dae4:	b538      	push	{r3, r4, r5, lr}
 800dae6:	4d07      	ldr	r5, [pc, #28]	; (800db04 <_read_r+0x20>)
 800dae8:	4604      	mov	r4, r0
 800daea:	4608      	mov	r0, r1
 800daec:	4611      	mov	r1, r2
 800daee:	2200      	movs	r2, #0
 800daf0:	602a      	str	r2, [r5, #0]
 800daf2:	461a      	mov	r2, r3
 800daf4:	f7f3 fd18 	bl	8001528 <_read>
 800daf8:	1c43      	adds	r3, r0, #1
 800dafa:	d102      	bne.n	800db02 <_read_r+0x1e>
 800dafc:	682b      	ldr	r3, [r5, #0]
 800dafe:	b103      	cbz	r3, 800db02 <_read_r+0x1e>
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	bd38      	pop	{r3, r4, r5, pc}
 800db04:	2000836c 	.word	0x2000836c

0800db08 <nan>:
 800db08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800db10 <nan+0x8>
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop
 800db10:	00000000 	.word	0x00000000
 800db14:	7ff80000 	.word	0x7ff80000

0800db18 <strncmp>:
 800db18:	b510      	push	{r4, lr}
 800db1a:	b17a      	cbz	r2, 800db3c <strncmp+0x24>
 800db1c:	4603      	mov	r3, r0
 800db1e:	3901      	subs	r1, #1
 800db20:	1884      	adds	r4, r0, r2
 800db22:	f813 0b01 	ldrb.w	r0, [r3], #1
 800db26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800db2a:	4290      	cmp	r0, r2
 800db2c:	d101      	bne.n	800db32 <strncmp+0x1a>
 800db2e:	42a3      	cmp	r3, r4
 800db30:	d101      	bne.n	800db36 <strncmp+0x1e>
 800db32:	1a80      	subs	r0, r0, r2
 800db34:	bd10      	pop	{r4, pc}
 800db36:	2800      	cmp	r0, #0
 800db38:	d1f3      	bne.n	800db22 <strncmp+0xa>
 800db3a:	e7fa      	b.n	800db32 <strncmp+0x1a>
 800db3c:	4610      	mov	r0, r2
 800db3e:	e7f9      	b.n	800db34 <strncmp+0x1c>

0800db40 <__ascii_wctomb>:
 800db40:	b149      	cbz	r1, 800db56 <__ascii_wctomb+0x16>
 800db42:	2aff      	cmp	r2, #255	; 0xff
 800db44:	bf85      	ittet	hi
 800db46:	238a      	movhi	r3, #138	; 0x8a
 800db48:	6003      	strhi	r3, [r0, #0]
 800db4a:	700a      	strbls	r2, [r1, #0]
 800db4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800db50:	bf98      	it	ls
 800db52:	2001      	movls	r0, #1
 800db54:	4770      	bx	lr
 800db56:	4608      	mov	r0, r1
 800db58:	4770      	bx	lr

0800db5a <abort>:
 800db5a:	b508      	push	{r3, lr}
 800db5c:	2006      	movs	r0, #6
 800db5e:	f000 f897 	bl	800dc90 <raise>
 800db62:	2001      	movs	r0, #1
 800db64:	f7f3 fcd6 	bl	8001514 <_exit>

0800db68 <_fstat_r>:
 800db68:	b538      	push	{r3, r4, r5, lr}
 800db6a:	4d07      	ldr	r5, [pc, #28]	; (800db88 <_fstat_r+0x20>)
 800db6c:	2300      	movs	r3, #0
 800db6e:	4604      	mov	r4, r0
 800db70:	4608      	mov	r0, r1
 800db72:	4611      	mov	r1, r2
 800db74:	602b      	str	r3, [r5, #0]
 800db76:	f7f3 fd1c 	bl	80015b2 <_fstat>
 800db7a:	1c43      	adds	r3, r0, #1
 800db7c:	d102      	bne.n	800db84 <_fstat_r+0x1c>
 800db7e:	682b      	ldr	r3, [r5, #0]
 800db80:	b103      	cbz	r3, 800db84 <_fstat_r+0x1c>
 800db82:	6023      	str	r3, [r4, #0]
 800db84:	bd38      	pop	{r3, r4, r5, pc}
 800db86:	bf00      	nop
 800db88:	2000836c 	.word	0x2000836c

0800db8c <_isatty_r>:
 800db8c:	b538      	push	{r3, r4, r5, lr}
 800db8e:	4d06      	ldr	r5, [pc, #24]	; (800dba8 <_isatty_r+0x1c>)
 800db90:	2300      	movs	r3, #0
 800db92:	4604      	mov	r4, r0
 800db94:	4608      	mov	r0, r1
 800db96:	602b      	str	r3, [r5, #0]
 800db98:	f7f3 fd1b 	bl	80015d2 <_isatty>
 800db9c:	1c43      	adds	r3, r0, #1
 800db9e:	d102      	bne.n	800dba6 <_isatty_r+0x1a>
 800dba0:	682b      	ldr	r3, [r5, #0]
 800dba2:	b103      	cbz	r3, 800dba6 <_isatty_r+0x1a>
 800dba4:	6023      	str	r3, [r4, #0]
 800dba6:	bd38      	pop	{r3, r4, r5, pc}
 800dba8:	2000836c 	.word	0x2000836c

0800dbac <memmove>:
 800dbac:	4288      	cmp	r0, r1
 800dbae:	b510      	push	{r4, lr}
 800dbb0:	eb01 0402 	add.w	r4, r1, r2
 800dbb4:	d902      	bls.n	800dbbc <memmove+0x10>
 800dbb6:	4284      	cmp	r4, r0
 800dbb8:	4623      	mov	r3, r4
 800dbba:	d807      	bhi.n	800dbcc <memmove+0x20>
 800dbbc:	1e43      	subs	r3, r0, #1
 800dbbe:	42a1      	cmp	r1, r4
 800dbc0:	d008      	beq.n	800dbd4 <memmove+0x28>
 800dbc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbca:	e7f8      	b.n	800dbbe <memmove+0x12>
 800dbcc:	4402      	add	r2, r0
 800dbce:	4601      	mov	r1, r0
 800dbd0:	428a      	cmp	r2, r1
 800dbd2:	d100      	bne.n	800dbd6 <memmove+0x2a>
 800dbd4:	bd10      	pop	{r4, pc}
 800dbd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbde:	e7f7      	b.n	800dbd0 <memmove+0x24>

0800dbe0 <_realloc_r>:
 800dbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe4:	4680      	mov	r8, r0
 800dbe6:	4614      	mov	r4, r2
 800dbe8:	460e      	mov	r6, r1
 800dbea:	b921      	cbnz	r1, 800dbf6 <_realloc_r+0x16>
 800dbec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf0:	4611      	mov	r1, r2
 800dbf2:	f7fb bcbd 	b.w	8009570 <_malloc_r>
 800dbf6:	b92a      	cbnz	r2, 800dc04 <_realloc_r+0x24>
 800dbf8:	f7ff fc72 	bl	800d4e0 <_free_r>
 800dbfc:	4625      	mov	r5, r4
 800dbfe:	4628      	mov	r0, r5
 800dc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc04:	f000 f860 	bl	800dcc8 <_malloc_usable_size_r>
 800dc08:	4284      	cmp	r4, r0
 800dc0a:	4607      	mov	r7, r0
 800dc0c:	d802      	bhi.n	800dc14 <_realloc_r+0x34>
 800dc0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc12:	d812      	bhi.n	800dc3a <_realloc_r+0x5a>
 800dc14:	4621      	mov	r1, r4
 800dc16:	4640      	mov	r0, r8
 800dc18:	f7fb fcaa 	bl	8009570 <_malloc_r>
 800dc1c:	4605      	mov	r5, r0
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d0ed      	beq.n	800dbfe <_realloc_r+0x1e>
 800dc22:	42bc      	cmp	r4, r7
 800dc24:	4622      	mov	r2, r4
 800dc26:	4631      	mov	r1, r6
 800dc28:	bf28      	it	cs
 800dc2a:	463a      	movcs	r2, r7
 800dc2c:	f7fb fc69 	bl	8009502 <memcpy>
 800dc30:	4631      	mov	r1, r6
 800dc32:	4640      	mov	r0, r8
 800dc34:	f7ff fc54 	bl	800d4e0 <_free_r>
 800dc38:	e7e1      	b.n	800dbfe <_realloc_r+0x1e>
 800dc3a:	4635      	mov	r5, r6
 800dc3c:	e7df      	b.n	800dbfe <_realloc_r+0x1e>

0800dc3e <_raise_r>:
 800dc3e:	291f      	cmp	r1, #31
 800dc40:	b538      	push	{r3, r4, r5, lr}
 800dc42:	4604      	mov	r4, r0
 800dc44:	460d      	mov	r5, r1
 800dc46:	d904      	bls.n	800dc52 <_raise_r+0x14>
 800dc48:	2316      	movs	r3, #22
 800dc4a:	6003      	str	r3, [r0, #0]
 800dc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc50:	bd38      	pop	{r3, r4, r5, pc}
 800dc52:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc54:	b112      	cbz	r2, 800dc5c <_raise_r+0x1e>
 800dc56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc5a:	b94b      	cbnz	r3, 800dc70 <_raise_r+0x32>
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	f000 f831 	bl	800dcc4 <_getpid_r>
 800dc62:	462a      	mov	r2, r5
 800dc64:	4601      	mov	r1, r0
 800dc66:	4620      	mov	r0, r4
 800dc68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc6c:	f000 b818 	b.w	800dca0 <_kill_r>
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d00a      	beq.n	800dc8a <_raise_r+0x4c>
 800dc74:	1c59      	adds	r1, r3, #1
 800dc76:	d103      	bne.n	800dc80 <_raise_r+0x42>
 800dc78:	2316      	movs	r3, #22
 800dc7a:	6003      	str	r3, [r0, #0]
 800dc7c:	2001      	movs	r0, #1
 800dc7e:	e7e7      	b.n	800dc50 <_raise_r+0x12>
 800dc80:	2400      	movs	r4, #0
 800dc82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc86:	4628      	mov	r0, r5
 800dc88:	4798      	blx	r3
 800dc8a:	2000      	movs	r0, #0
 800dc8c:	e7e0      	b.n	800dc50 <_raise_r+0x12>
	...

0800dc90 <raise>:
 800dc90:	4b02      	ldr	r3, [pc, #8]	; (800dc9c <raise+0xc>)
 800dc92:	4601      	mov	r1, r0
 800dc94:	6818      	ldr	r0, [r3, #0]
 800dc96:	f7ff bfd2 	b.w	800dc3e <_raise_r>
 800dc9a:	bf00      	nop
 800dc9c:	20000044 	.word	0x20000044

0800dca0 <_kill_r>:
 800dca0:	b538      	push	{r3, r4, r5, lr}
 800dca2:	4d07      	ldr	r5, [pc, #28]	; (800dcc0 <_kill_r+0x20>)
 800dca4:	2300      	movs	r3, #0
 800dca6:	4604      	mov	r4, r0
 800dca8:	4608      	mov	r0, r1
 800dcaa:	4611      	mov	r1, r2
 800dcac:	602b      	str	r3, [r5, #0]
 800dcae:	f7f3 fc21 	bl	80014f4 <_kill>
 800dcb2:	1c43      	adds	r3, r0, #1
 800dcb4:	d102      	bne.n	800dcbc <_kill_r+0x1c>
 800dcb6:	682b      	ldr	r3, [r5, #0]
 800dcb8:	b103      	cbz	r3, 800dcbc <_kill_r+0x1c>
 800dcba:	6023      	str	r3, [r4, #0]
 800dcbc:	bd38      	pop	{r3, r4, r5, pc}
 800dcbe:	bf00      	nop
 800dcc0:	2000836c 	.word	0x2000836c

0800dcc4 <_getpid_r>:
 800dcc4:	f7f3 bc0e 	b.w	80014e4 <_getpid>

0800dcc8 <_malloc_usable_size_r>:
 800dcc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dccc:	1f18      	subs	r0, r3, #4
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	bfbc      	itt	lt
 800dcd2:	580b      	ldrlt	r3, [r1, r0]
 800dcd4:	18c0      	addlt	r0, r0, r3
 800dcd6:	4770      	bx	lr

0800dcd8 <_init>:
 800dcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcda:	bf00      	nop
 800dcdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcde:	bc08      	pop	{r3}
 800dce0:	469e      	mov	lr, r3
 800dce2:	4770      	bx	lr

0800dce4 <_fini>:
 800dce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce6:	bf00      	nop
 800dce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcea:	bc08      	pop	{r3}
 800dcec:	469e      	mov	lr, r3
 800dcee:	4770      	bx	lr
