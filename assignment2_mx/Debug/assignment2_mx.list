
assignment2_mx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800ed60  0800ed60  0001ed60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f300  0800f300  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f300  0800f300  0001f300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f308  0800f308  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f308  0800f308  0001f308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f30c  0800f30c  0001f30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800f310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000081a8  2000024c  0800f55c  0002024c  2**2
                  ALLOC
 10 ._user_heap_stack 00004204  200083f4  0800f55c  000283f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002422b  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005241  00000000  00000000  000444a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  000496e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b08  00000000  00000000  0004b458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d722  00000000  00000000  0004cf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026165  00000000  00000000  0007a682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104a00  00000000  00000000  000a07e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a51e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d7c  00000000  00000000  001a5238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000024c 	.word	0x2000024c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ed48 	.word	0x0800ed48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000250 	.word	0x20000250
 80001cc:	0800ed48 	.word	0x0800ed48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_DMA_Init+0x48>)
 8001000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <MX_DMA_Init+0x48>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6493      	str	r3, [r2, #72]	; 0x48
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <MX_DMA_Init+0x48>)
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2105      	movs	r1, #5
 800101a:	200e      	movs	r0, #14
 800101c:	f001 fbae 	bl	800277c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001020:	200e      	movs	r0, #14
 8001022:	f001 fbc7 	bl	80027b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2105      	movs	r1, #5
 800102a:	200f      	movs	r0, #15
 800102c:	f001 fba6 	bl	800277c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001030:	200f      	movs	r0, #15
 8001032:	f001 fbbf 	bl	80027b4 <HAL_NVIC_EnableIRQ>

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4a07      	ldr	r2, [pc, #28]	; (8001088 <vApplicationGetIdleTaskMemory+0x2c>)
 800106c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <vApplicationGetIdleTaskMemory+0x30>)
 8001072:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000284 	.word	0x20000284
 800108c:	20000338 	.word	0x20000338

08001090 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4a07      	ldr	r2, [pc, #28]	; (80010bc <vApplicationGetTimerTaskMemory+0x2c>)
 80010a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <vApplicationGetTimerTaskMemory+0x30>)
 80010a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20000538 	.word	0x20000538
 80010c0:	200005ec 	.word	0x200005ec

080010c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af02      	add	r7, sp, #8
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	UART1_queue = xQueueCreate(5,sizeof(queue_UART_msg_t*));
 80010ca:	2200      	movs	r2, #0
 80010cc:	2104      	movs	r1, #4
 80010ce:	2005      	movs	r0, #5
 80010d0:	f006 fd7a 	bl	8007bc8 <xQueueGenericCreate>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a2a      	ldr	r2, [pc, #168]	; (8001180 <MX_FREERTOS_Init+0xbc>)
 80010d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 512);
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <MX_FREERTOS_Init+0xc0>)
 80010dc:	463c      	mov	r4, r7
 80010de:	461d      	mov	r5, r3
 80010e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010ec:	463b      	mov	r3, r7
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f006 fb75 	bl	80077e0 <osThreadCreate>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a23      	ldr	r2, [pc, #140]	; (8001188 <MX_FREERTOS_Init+0xc4>)
 80010fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  BaseType_t status =0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
//	if (UART1_queue != NULL){
		//error somehow? lol
	  status = xTaskCreate(lis_task, "lis_task", 512, (void*)1,
 8001100:	4b22      	ldr	r3, [pc, #136]	; (800118c <MX_FREERTOS_Init+0xc8>)
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	2305      	movs	r3, #5
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110e:	4920      	ldr	r1, [pc, #128]	; (8001190 <MX_FREERTOS_Init+0xcc>)
 8001110:	4820      	ldr	r0, [pc, #128]	; (8001194 <MX_FREERTOS_Init+0xd0>)
 8001112:	f007 f9f8 	bl	8008506 <xTaskCreate>
 8001116:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &lis_task_handle);
	  status = xTaskCreate(uart1_task, "uart_task", 512, (void*)1,
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <MX_FREERTOS_Init+0xd4>)
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	2305      	movs	r3, #5
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001126:	491d      	ldr	r1, [pc, #116]	; (800119c <MX_FREERTOS_Init+0xd8>)
 8001128:	481d      	ldr	r0, [pc, #116]	; (80011a0 <MX_FREERTOS_Init+0xdc>)
 800112a:	f007 f9ec 	bl	8008506 <xTaskCreate>
 800112e:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &uart1_task_handle);
	  status = xTaskCreate(lps_task, "lps_task", 512, (void*)1,
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_FREERTOS_Init+0xe0>)
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	2305      	movs	r3, #5
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800113e:	491a      	ldr	r1, [pc, #104]	; (80011a8 <MX_FREERTOS_Init+0xe4>)
 8001140:	481a      	ldr	r0, [pc, #104]	; (80011ac <MX_FREERTOS_Init+0xe8>)
 8001142:	f007 f9e0 	bl	8008506 <xTaskCreate>
 8001146:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &lps_task_handle);
	  status = xTaskCreate(hts_task, "hts_task", 512, (void*)1,
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <MX_FREERTOS_Init+0xec>)
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	2305      	movs	r3, #5
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001156:	4917      	ldr	r1, [pc, #92]	; (80011b4 <MX_FREERTOS_Init+0xf0>)
 8001158:	4817      	ldr	r0, [pc, #92]	; (80011b8 <MX_FREERTOS_Init+0xf4>)
 800115a:	f007 f9d4 	bl	8008506 <xTaskCreate>
 800115e:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &hts_task_handle);
	  status = xTaskCreate(lsm_task, "lsm_task", 512, (void*)1,
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <MX_FREERTOS_Init+0xf8>)
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	2305      	movs	r3, #5
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2301      	movs	r3, #1
 800116a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116e:	4914      	ldr	r1, [pc, #80]	; (80011c0 <MX_FREERTOS_Init+0xfc>)
 8001170:	4814      	ldr	r0, [pc, #80]	; (80011c4 <MX_FREERTOS_Init+0x100>)
 8001172:	f007 f9c8 	bl	8008506 <xTaskCreate>
 8001176:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 5, &lsm_task_handle);
//	}
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001178:	bf00      	nop
 800117a:	3720      	adds	r7, #32
 800117c:	46bd      	mov	sp, r7
 800117e:	bdb0      	pop	{r4, r5, r7, pc}
 8001180:	2000027c 	.word	0x2000027c
 8001184:	0800eda8 	.word	0x0800eda8
 8001188:	20000280 	.word	0x20000280
 800118c:	2000026c 	.word	0x2000026c
 8001190:	0800ed6c 	.word	0x0800ed6c
 8001194:	08001abd 	.word	0x08001abd
 8001198:	20000268 	.word	0x20000268
 800119c:	0800ed78 	.word	0x0800ed78
 80011a0:	08001ce1 	.word	0x08001ce1
 80011a4:	20000270 	.word	0x20000270
 80011a8:	0800ed84 	.word	0x0800ed84
 80011ac:	08001b01 	.word	0x08001b01
 80011b0:	20000278 	.word	0x20000278
 80011b4:	0800ed90 	.word	0x0800ed90
 80011b8:	08001a9f 	.word	0x08001a9f
 80011bc:	20000274 	.word	0x20000274
 80011c0:	0800ed9c 	.word	0x0800ed9c
 80011c4:	08001b21 	.word	0x08001b21

080011c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f006 fb51 	bl	8007878 <osDelay>
 80011d6:	e7fb      	b.n	80011d0 <StartDefaultTask+0x8>

080011d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_GPIO_Init+0x68>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a13      	ldr	r2, [pc, #76]	; (8001240 <MX_GPIO_Init+0x68>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_GPIO_Init+0x68>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_GPIO_Init+0x68>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <MX_GPIO_Init+0x68>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_GPIO_Init+0x68>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 800121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001228:	2301      	movs	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	4619      	mov	r1, r3
 8001232:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_GPIO_Init+0x6c>)
 8001234:	f001 fd42 	bl	8002cbc <HAL_GPIO_Init>

}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000
 8001244:	48000800 	.word	0x48000800

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124e:	f001 f981 	bl	8002554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001252:	f000 f835 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001256:	f7ff ffbf 	bl	80011d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800125a:	f7ff fecd 	bl	8000ff8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800125e:	f000 faf7 	bl	8001850 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001262:	f000 fa43 	bl	80016ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  htim3.Instance->ARR = 100;
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <main+0x74>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2264      	movs	r2, #100	; 0x64
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  htim3.Instance->CCR3 = 5;
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <main+0x74>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2205      	movs	r2, #5
 8001274:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_PRESCALER(&htim3, 400);
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <main+0x74>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800127e:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001280:	2108      	movs	r1, #8
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <main+0x74>)
 8001284:	f004 f932 	bl	80054ec <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 8001288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128c:	f001 f99a 	bl	80025c4 <HAL_Delay>
  uint16_t presc = 400;
 8001290:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001294:	80fb      	strh	r3, [r7, #6]
  while (presc > 0){
 8001296:	e009      	b.n	80012ac <main+0x64>
	  presc--;
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	3b01      	subs	r3, #1
 800129c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_PRESCALER(&htim3, presc);
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <main+0x74>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	88fa      	ldrh	r2, [r7, #6]
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80012a6:	2064      	movs	r0, #100	; 0x64
 80012a8:	f001 f98c 	bl	80025c4 <HAL_Delay>
  while (presc > 0){
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f2      	bne.n	8001298 <main+0x50>
  }

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80012b2:	f7ff ff07 	bl	80010c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012b6:	f006 fa8c 	bl	80077d2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <main+0x72>
 80012bc:	20000a3c 	.word	0x20000a3c

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b096      	sub	sp, #88	; 0x58
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	2244      	movs	r2, #68	; 0x44
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f009 f95d 	bl	800a58e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012e6:	f002 fc93 	bl	8003c10 <HAL_PWREx_ControlVoltageScaling>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012f0:	f000 f83e 	bl	8001370 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f4:	2302      	movs	r3, #2
 80012f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fe:	2310      	movs	r3, #16
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001302:	2300      	movs	r3, #0
 8001304:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4618      	mov	r0, r3
 800130c:	f002 fcd6 	bl	8003cbc <HAL_RCC_OscConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001316:	f000 f82b 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131a:	230f      	movs	r3, #15
 800131c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800131e:	2301      	movs	r3, #1
 8001320:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f003 f89e 	bl	8004474 <HAL_RCC_ClockConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800133e:	f000 f817 	bl	8001370 <Error_Handler>
  }
}
 8001342:	bf00      	nop
 8001344:	3758      	adds	r7, #88	; 0x58
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800135e:	f001 f911 	bl	8002584 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40001000 	.word	0x40001000

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_MspInit+0x4c>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <HAL_MspInit+0x4c>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6613      	str	r3, [r2, #96]	; 0x60
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_MspInit+0x4c>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_MspInit+0x4c>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <HAL_MspInit+0x4c>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	6593      	str	r3, [r2, #88]	; 0x58
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_MspInit+0x4c>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	210f      	movs	r1, #15
 80013b6:	f06f 0001 	mvn.w	r0, #1
 80013ba:	f001 f9df 	bl	800277c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000

080013cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08e      	sub	sp, #56	; 0x38
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013da:	4b34      	ldr	r3, [pc, #208]	; (80014ac <HAL_InitTick+0xe0>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	4a33      	ldr	r2, [pc, #204]	; (80014ac <HAL_InitTick+0xe0>)
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	6593      	str	r3, [r2, #88]	; 0x58
 80013e6:	4b31      	ldr	r3, [pc, #196]	; (80014ac <HAL_InitTick+0xe0>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013f2:	f107 0210 	add.w	r2, r7, #16
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 f9fd 	bl	80047fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	2b00      	cmp	r3, #0
 800140a:	d103      	bne.n	8001414 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800140c:	f003 f9ca 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 8001410:	6378      	str	r0, [r7, #52]	; 0x34
 8001412:	e004      	b.n	800141e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001414:	f003 f9c6 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 8001418:	4603      	mov	r3, r0
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800141e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001420:	4a23      	ldr	r2, [pc, #140]	; (80014b0 <HAL_InitTick+0xe4>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	0c9b      	lsrs	r3, r3, #18
 8001428:	3b01      	subs	r3, #1
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <HAL_InitTick+0xe8>)
 800142e:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <HAL_InitTick+0xec>)
 8001430:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_InitTick+0xe8>)
 8001434:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001438:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800143a:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <HAL_InitTick+0xe8>)
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <HAL_InitTick+0xe8>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_InitTick+0xe8>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_InitTick+0xe8>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001452:	4818      	ldr	r0, [pc, #96]	; (80014b4 <HAL_InitTick+0xe8>)
 8001454:	f003 ff20 	bl	8005298 <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800145e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001462:	2b00      	cmp	r3, #0
 8001464:	d11b      	bne.n	800149e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001466:	4813      	ldr	r0, [pc, #76]	; (80014b4 <HAL_InitTick+0xe8>)
 8001468:	f003 ff78 	bl	800535c <HAL_TIM_Base_Start_IT>
 800146c:	4603      	mov	r3, r0
 800146e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001472:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001476:	2b00      	cmp	r3, #0
 8001478:	d111      	bne.n	800149e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800147a:	2036      	movs	r0, #54	; 0x36
 800147c:	f001 f99a 	bl	80027b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	d808      	bhi.n	8001498 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001486:	2200      	movs	r2, #0
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	2036      	movs	r0, #54	; 0x36
 800148c:	f001 f976 	bl	800277c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001490:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_InitTick+0xf0>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e002      	b.n	800149e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800149e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3738      	adds	r7, #56	; 0x38
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	431bde83 	.word	0x431bde83
 80014b4:	200009ec 	.word	0x200009ec
 80014b8:	40001000 	.word	0x40001000
 80014bc:	2000006c 	.word	0x2000006c

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <NMI_Handler+0x4>

080014c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler+0x4>

080014d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <UsageFault_Handler+0x4>

080014de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <DMA1_Channel4_IRQHandler+0x10>)
 80014f2:	f001 fb04 	bl	8002afe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000b54 	.word	0x20000b54

08001500 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <DMA1_Channel5_IRQHandler+0x10>)
 8001506:	f001 fafa 	bl	8002afe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000b0c 	.word	0x20000b0c

08001514 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <USART1_IRQHandler+0x10>)
 800151a:	f005 f863 	bl	80065e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000a88 	.word	0x20000a88

08001528 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <TIM6_DAC_IRQHandler+0x10>)
 800152e:	f004 f8e3 	bl	80056f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200009ec 	.word	0x200009ec

0800153c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_kill>:

int _kill(int pid, int sig)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001556:	f008 fee9 	bl	800a32c <__errno>
 800155a:	4603      	mov	r3, r0
 800155c:	2216      	movs	r2, #22
 800155e:	601a      	str	r2, [r3, #0]
  return -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_exit>:

void _exit (int status)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ffe7 	bl	800154c <_kill>
  while (1) {}    /* Make sure we hang here */
 800157e:	e7fe      	b.n	800157e <_exit+0x12>

08001580 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e00a      	b.n	80015a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001592:	f3af 8000 	nop.w
 8001596:	4601      	mov	r1, r0
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	60ba      	str	r2, [r7, #8]
 800159e:	b2ca      	uxtb	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbf0      	blt.n	8001592 <_read+0x12>
  }

  return len;
 80015b0:	687b      	ldr	r3, [r7, #4]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e009      	b.n	80015e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbf1      	blt.n	80015cc <_write+0x12>
  }
  return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_close>:

int _close(int file)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161a:	605a      	str	r2, [r3, #4]
  return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_isatty>:

int _isatty(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f008 fe4e 	bl	800a32c <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20018000 	.word	0x20018000
 80016bc:	00003000 	.word	0x00003000
 80016c0:	20000a38 	.word	0x20000a38
 80016c4:	200083f8 	.word	0x200083f8

080016c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <SystemInit+0x20>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <SystemInit+0x20>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016fe:	463b      	mov	r3, r7
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
 800170c:	615a      	str	r2, [r3, #20]
 800170e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001710:	4b21      	ldr	r3, [pc, #132]	; (8001798 <MX_TIM3_Init+0xac>)
 8001712:	4a22      	ldr	r2, [pc, #136]	; (800179c <MX_TIM3_Init+0xb0>)
 8001714:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <MX_TIM3_Init+0xac>)
 8001718:	2207      	movs	r2, #7
 800171a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <MX_TIM3_Init+0xac>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4545;
 8001722:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_TIM3_Init+0xac>)
 8001724:	f241 12c1 	movw	r2, #4545	; 0x11c1
 8001728:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172a:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <MX_TIM3_Init+0xac>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <MX_TIM3_Init+0xac>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001736:	4818      	ldr	r0, [pc, #96]	; (8001798 <MX_TIM3_Init+0xac>)
 8001738:	f003 fe80 	bl	800543c <HAL_TIM_PWM_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001742:	f7ff fe15 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4810      	ldr	r0, [pc, #64]	; (8001798 <MX_TIM3_Init+0xac>)
 8001756:	f004 fdc1 	bl	80062dc <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001760:	f7ff fe06 	bl	8001370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001764:	2360      	movs	r3, #96	; 0x60
 8001766:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	2208      	movs	r2, #8
 8001778:	4619      	mov	r1, r3
 800177a:	4807      	ldr	r0, [pc, #28]	; (8001798 <MX_TIM3_Init+0xac>)
 800177c:	f004 f8dc 	bl	8005938 <HAL_TIM_PWM_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001786:	f7ff fdf3 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800178a:	4803      	ldr	r0, [pc, #12]	; (8001798 <MX_TIM3_Init+0xac>)
 800178c:	f000 f828 	bl	80017e0 <HAL_TIM_MspPostInit>

}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	; 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000a3c 	.word	0x20000a3c
 800179c:	40000400 	.word	0x40000400

080017a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <HAL_TIM_PWM_MspInit+0x38>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d10b      	bne.n	80017ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_TIM_PWM_MspInit+0x3c>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	4a09      	ldr	r2, [pc, #36]	; (80017dc <HAL_TIM_PWM_MspInit+0x3c>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	6593      	str	r3, [r2, #88]	; 0x58
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <HAL_TIM_PWM_MspInit+0x3c>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40000400 	.word	0x40000400
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_TIM_MspPostInit+0x64>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d11b      	bne.n	800183a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a10      	ldr	r2, [pc, #64]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800181a:	2301      	movs	r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800182a:	2302      	movs	r3, #2
 800182c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <HAL_TIM_MspPostInit+0x6c>)
 8001836:	f001 fa41 	bl	8002cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40000400 	.word	0x40000400
 8001848:	40021000 	.word	0x40021000
 800184c:	48000400 	.word	0x48000400

08001850 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 8001856:	4a15      	ldr	r2, [pc, #84]	; (80018ac <MX_USART1_UART_Init+0x5c>)
 8001858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 800185c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_USART1_UART_Init+0x58>)
 8001894:	f004 fdc8 	bl	8006428 <HAL_UART_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800189e:	f7ff fd67 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000a88 	.word	0x20000a88
 80018ac:	40013800 	.word	0x40013800

080018b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b0ac      	sub	sp, #176	; 0xb0
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2288      	movs	r2, #136	; 0x88
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f008 fe5c 	bl	800a58e <memset>
  if(uartHandle->Instance==USART1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a4e      	ldr	r2, [pc, #312]	; (8001a14 <HAL_UART_MspInit+0x164>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	f040 8095 	bne.w	8001a0c <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018e2:	2301      	movs	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018e6:	2300      	movs	r3, #0
 80018e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 f816 	bl	8004920 <HAL_RCCEx_PeriphCLKConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018fa:	f7ff fd39 	bl	8001370 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018fe:	4b46      	ldr	r3, [pc, #280]	; (8001a18 <HAL_UART_MspInit+0x168>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001902:	4a45      	ldr	r2, [pc, #276]	; (8001a18 <HAL_UART_MspInit+0x168>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6613      	str	r3, [r2, #96]	; 0x60
 800190a:	4b43      	ldr	r3, [pc, #268]	; (8001a18 <HAL_UART_MspInit+0x168>)
 800190c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	4b40      	ldr	r3, [pc, #256]	; (8001a18 <HAL_UART_MspInit+0x168>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	4a3f      	ldr	r2, [pc, #252]	; (8001a18 <HAL_UART_MspInit+0x168>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001922:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <HAL_UART_MspInit+0x168>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800192e:	23c0      	movs	r3, #192	; 0xc0
 8001930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001946:	2307      	movs	r3, #7
 8001948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001950:	4619      	mov	r1, r3
 8001952:	4832      	ldr	r0, [pc, #200]	; (8001a1c <HAL_UART_MspInit+0x16c>)
 8001954:	f001 f9b2 	bl	8002cbc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001958:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <HAL_UART_MspInit+0x170>)
 800195a:	4a32      	ldr	r2, [pc, #200]	; (8001a24 <HAL_UART_MspInit+0x174>)
 800195c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800195e:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <HAL_UART_MspInit+0x170>)
 8001960:	2202      	movs	r2, #2
 8001962:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001964:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <HAL_UART_MspInit+0x170>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_UART_MspInit+0x170>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001970:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_UART_MspInit+0x170>)
 8001972:	2280      	movs	r2, #128	; 0x80
 8001974:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <HAL_UART_MspInit+0x170>)
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <HAL_UART_MspInit+0x170>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_UART_MspInit+0x170>)
 8001984:	2220      	movs	r2, #32
 8001986:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <HAL_UART_MspInit+0x170>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800198e:	4824      	ldr	r0, [pc, #144]	; (8001a20 <HAL_UART_MspInit+0x170>)
 8001990:	f000 ff1e 	bl	80027d0 <HAL_DMA_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800199a:	f7ff fce9 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a1f      	ldr	r2, [pc, #124]	; (8001a20 <HAL_UART_MspInit+0x170>)
 80019a2:	671a      	str	r2, [r3, #112]	; 0x70
 80019a4:	4a1e      	ldr	r2, [pc, #120]	; (8001a20 <HAL_UART_MspInit+0x170>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80019aa:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <HAL_UART_MspInit+0x178>)
 80019ac:	4a1f      	ldr	r2, [pc, #124]	; (8001a2c <HAL_UART_MspInit+0x17c>)
 80019ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_UART_MspInit+0x178>)
 80019b2:	2202      	movs	r2, #2
 80019b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <HAL_UART_MspInit+0x178>)
 80019b8:	2210      	movs	r2, #16
 80019ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_UART_MspInit+0x178>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_UART_MspInit+0x178>)
 80019c4:	2280      	movs	r2, #128	; 0x80
 80019c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_UART_MspInit+0x178>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <HAL_UART_MspInit+0x178>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_UART_MspInit+0x178>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <HAL_UART_MspInit+0x178>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80019e0:	4811      	ldr	r0, [pc, #68]	; (8001a28 <HAL_UART_MspInit+0x178>)
 80019e2:	f000 fef5 	bl	80027d0 <HAL_DMA_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 80019ec:	f7ff fcc0 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <HAL_UART_MspInit+0x178>)
 80019f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80019f6:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <HAL_UART_MspInit+0x178>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2105      	movs	r1, #5
 8001a00:	2025      	movs	r0, #37	; 0x25
 8001a02:	f000 febb 	bl	800277c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a06:	2025      	movs	r0, #37	; 0x25
 8001a08:	f000 fed4 	bl	80027b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	37b0      	adds	r7, #176	; 0xb0
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40013800 	.word	0x40013800
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	48000400 	.word	0x48000400
 8001a20:	20000b0c 	.word	0x20000b0c
 8001a24:	40020058 	.word	0x40020058
 8001a28:	20000b54 	.word	0x20000b54
 8001a2c:	40020044 	.word	0x40020044

08001a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a34:	f7ff fe48 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a3a:	490d      	ldr	r1, [pc, #52]	; (8001a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <LoopForever+0xe>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a40:	e002      	b.n	8001a48 <LoopCopyDataInit>

08001a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a46:	3304      	adds	r3, #4

08001a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a4c:	d3f9      	bcc.n	8001a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a50:	4c0a      	ldr	r4, [pc, #40]	; (8001a7c <LoopForever+0x16>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a54:	e001      	b.n	8001a5a <LoopFillZerobss>

08001a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a58:	3204      	adds	r2, #4

08001a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a5c:	d3fb      	bcc.n	8001a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f008 fd61 	bl	800a524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a62:	f7ff fbf1 	bl	8001248 <main>

08001a66 <LoopForever>:

LoopForever:
    b LoopForever
 8001a66:	e7fe      	b.n	8001a66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8001a74:	0800f310 	.word	0x0800f310
  ldr r2, =_sbss
 8001a78:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8001a7c:	200083f4 	.word	0x200083f4

08001a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC1_2_IRQHandler>

08001a82 <hts_init>:
#include "stm32l475e_iot01_tsensor.h"
#include "stdio.h"
#include "hts_task.h"

hts_data_t temphum_data;
void hts_init(){
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <hts_loop>:

void hts_loop(){
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <hts_task>:

void hts_task(void* pvParameters){
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
	hts_init();
 8001aa6:	f7ff ffec 	bl	8001a82 <hts_init>
	vTaskDelay(5);
 8001aaa:	2005      	movs	r0, #5
 8001aac:	f006 fefe 	bl	80088ac <vTaskDelay>
	while(1){
		hts_loop();
 8001ab0:	f7ff ffee 	bl	8001a90 <hts_loop>
		vTaskDelay(5);
 8001ab4:	2005      	movs	r0, #5
 8001ab6:	f006 fef9 	bl	80088ac <vTaskDelay>
		hts_loop();
 8001aba:	e7f9      	b.n	8001ab0 <hts_task+0x12>

08001abc <lis_task>:

void lis_loop(){

}

void lis_task(void* pvParameters){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	vTaskDelay(5);
 8001ac4:	2005      	movs	r0, #5
 8001ac6:	f006 fef1 	bl	80088ac <vTaskDelay>
	uint8_t toggle = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	73fb      	strb	r3, [r7, #15]
	while(1){
		vTaskDelay(5);
 8001ace:	2005      	movs	r0, #5
 8001ad0:	f006 feec 	bl	80088ac <vTaskDelay>
		toggle = !toggle;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf0c      	ite	eq
 8001ada:	2301      	moveq	r3, #1
 8001adc:	2300      	movne	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(5);
 8001ae2:	e7f4      	b.n	8001ace <lis_task+0x12>

08001ae4 <lps_init>:
#include "lps_task.h"


lps_data_t pressure_data;

void lps_init(){
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <lps_loop>:

void lps_loop(){
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <lps_task>:

void lps_task(void* argument){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	lps_init();
 8001b08:	f7ff ffec 	bl	8001ae4 <lps_init>
	vTaskDelay(5);
 8001b0c:	2005      	movs	r0, #5
 8001b0e:	f006 fecd 	bl	80088ac <vTaskDelay>
	while(1){
		lps_loop();
 8001b12:	f7ff ffee 	bl	8001af2 <lps_loop>
		vTaskDelay(5);
 8001b16:	2005      	movs	r0, #5
 8001b18:	f006 fec8 	bl	80088ac <vTaskDelay>
		lps_loop();
 8001b1c:	e7f9      	b.n	8001b12 <lps_task+0x12>
	...

08001b20 <lsm_task>:

axis_data_t accel_data;
axis_data_t gyro_data;


void lsm_task(void* argument){
 8001b20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b24:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8001b28:	af04      	add	r7, sp, #16
 8001b2a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001b2e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001b32:	6018      	str	r0, [r3, #0]
	BSP_ACCELERO_Init();
 8001b34:	f000 fa3a 	bl	8001fac <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8001b38:	f000 fa8e 	bl	8002058 <BSP_GYRO_Init>

	char tx_buffer[256];
	int tx_len;
	int16_t accel_data_i16[3] = { 0 };
 8001b3c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001b40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	809a      	strh	r2, [r3, #4]
	float accel_data[3] = {0.5, 0.5, 0.5};			// array to store the x, y and z readings.
 8001b4a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001b4e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b52:	4a61      	ldr	r2, [pc, #388]	; (8001cd8 <lsm_task+0x1b8>)
 8001b54:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(1){
		TickType_t last_wake_time = xTaskGetTickCount();
 8001b5a:	f006 fff5 	bl	8008b48 <xTaskGetTickCount>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001b64:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b68:	601a      	str	r2, [r3, #0]
		BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
 8001b6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 fa5a 	bl	8002028 <BSP_ACCELERO_AccGetXYZ>
		// the function above returns 16 bit integers which are acceleration in mg (9.8/1000 m/s^2).
//		// Converting to float to print the actual acceleration.
		accel_data[0] = (float)accel_data_i16[0] * (9.8/1000.0f);
 8001b74:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001b78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b80:	ee07 3a90 	vmov	s15, r3
 8001b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b88:	ee17 0a90 	vmov	r0, s15
 8001b8c:	f7fe fcdc 	bl	8000548 <__aeabi_f2d>
 8001b90:	a34f      	add	r3, pc, #316	; (adr r3, 8001cd0 <lsm_task+0x1b0>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fd2f 	bl	80005f8 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7ff f821 	bl	8000be8 <__aeabi_d2f>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001bac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bb0:	601a      	str	r2, [r3, #0]
		accel_data[1] = (float)accel_data_i16[1] * (9.8/1000.0f);
 8001bb2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001bb6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001bba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc6:	ee17 0a90 	vmov	r0, s15
 8001bca:	f7fe fcbd 	bl	8000548 <__aeabi_f2d>
 8001bce:	a340      	add	r3, pc, #256	; (adr r3, 8001cd0 <lsm_task+0x1b0>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe fd10 	bl	80005f8 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7ff f802 	bl	8000be8 <__aeabi_d2f>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001bea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bee:	605a      	str	r2, [r3, #4]
		accel_data[2] = (float)accel_data_i16[2] * (9.8/1000.0f);
 8001bf0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001bf4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001bf8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bfc:	ee07 3a90 	vmov	s15, r3
 8001c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c04:	ee17 0a90 	vmov	r0, s15
 8001c08:	f7fe fc9e 	bl	8000548 <__aeabi_f2d>
 8001c0c:	a330      	add	r3, pc, #192	; (adr r3, 8001cd0 <lsm_task+0x1b0>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fcf1 	bl	80005f8 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7fe ffe3 	bl	8000be8 <__aeabi_d2f>
 8001c22:	4602      	mov	r2, r0
 8001c24:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001c28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c2c:	609a      	str	r2, [r3, #8]
		tx_len = sprintf((char*)tx_buffer,"AccelX : %f; Accel Y: %f; Accel Z: %f\n", accel_data[0], accel_data[1], accel_data[2]);
 8001c2e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001c32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc85 	bl	8000548 <__aeabi_f2d>
 8001c3e:	4680      	mov	r8, r0
 8001c40:	4689      	mov	r9, r1
 8001c42:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001c46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fc7b 	bl	8000548 <__aeabi_f2d>
 8001c52:	4604      	mov	r4, r0
 8001c54:	460d      	mov	r5, r1
 8001c56:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001c5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fc71 	bl	8000548 <__aeabi_f2d>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001c6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c72:	e9cd 4500 	strd	r4, r5, [sp]
 8001c76:	4642      	mov	r2, r8
 8001c78:	464b      	mov	r3, r9
 8001c7a:	4918      	ldr	r1, [pc, #96]	; (8001cdc <lsm_task+0x1bc>)
 8001c7c:	f009 fc1e 	bl	800b4bc <siprintf>
 8001c80:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
		queue_UART_msg_t accelero_send;
		memcpy(accelero_send.uart_chars, tx_buffer, tx_len);
 8001c84:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001c88:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	3304      	adds	r3, #4
 8001c92:	4618      	mov	r0, r3
 8001c94:	f008 fc6d 	bl	800a572 <memcpy>
		accelero_send.char_len = tx_len;
 8001c98:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001ca2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001ca6:	805a      	strh	r2, [r3, #2]
		accelero_send.type = TX;
 8001ca8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001cac:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
		queue_UART_msg_t *accelero_pter = &accelero_send;
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
//		xQueueSendToBack(UART1_queue,&accelero_pter,0);
		vTaskDelayUntil(&last_wake_time, 100);
 8001cbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001cc0:	2164      	movs	r1, #100	; 0x64
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f006 fd74 	bl	80087b0 <vTaskDelayUntil>
	while(1){
 8001cc8:	e747      	b.n	8001b5a <lsm_task+0x3a>
 8001cca:	bf00      	nop
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	bc01a36f 	.word	0xbc01a36f
 8001cd4:	3f841205 	.word	0x3f841205
 8001cd8:	0800edec 	.word	0x0800edec
 8001cdc:	0800edc4 	.word	0x0800edc4

08001ce0 <uart1_task>:
#include "uart1_task.h"




void uart1_task(void* pvParameters){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	//init code
	queue_UART_msg_t *uart_q;
	while(1){
		//running code
//		xQueueReceive(UART1_queue, (void *)&uart_q, 10000);
		if (uart_q->type == TX){
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d107      	bne.n	8001d00 <uart1_task+0x20>
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)uart_q->uart_chars, uart_q->char_len);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1d19      	adds	r1, r3, #4
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	885b      	ldrh	r3, [r3, #2]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4803      	ldr	r0, [pc, #12]	; (8001d08 <uart1_task+0x28>)
 8001cfc:	f004 fbe2 	bl	80064c4 <HAL_UART_Transmit_DMA>
		}
		vTaskDelay(1);
 8001d00:	2001      	movs	r0, #1
 8001d02:	f006 fdd3 	bl	80088ac <vTaskDelay>
		if (uart_q->type == TX){
 8001d06:	e7ef      	b.n	8001ce8 <uart1_task+0x8>
 8001d08:	20000a88 	.word	0x20000a88

08001d0c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <I2Cx_MspInit+0xa8>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	4a26      	ldr	r2, [pc, #152]	; (8001db4 <I2Cx_MspInit+0xa8>)
 8001d1a:	f043 0302 	orr.w	r3, r3, #2
 8001d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d20:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <I2Cx_MspInit+0xa8>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001d2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d30:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001d32:	2312      	movs	r3, #18
 8001d34:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001d36:	2301      	movs	r3, #1
 8001d38:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	481b      	ldr	r0, [pc, #108]	; (8001db8 <I2Cx_MspInit+0xac>)
 8001d4a:	f000 ffb7 	bl	8002cbc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4818      	ldr	r0, [pc, #96]	; (8001db8 <I2Cx_MspInit+0xac>)
 8001d56:	f000 ffb1 	bl	8002cbc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <I2Cx_MspInit+0xa8>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4a15      	ldr	r2, [pc, #84]	; (8001db4 <I2Cx_MspInit+0xa8>)
 8001d60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <I2Cx_MspInit+0xa8>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <I2Cx_MspInit+0xa8>)
 8001d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d76:	4a0f      	ldr	r2, [pc, #60]	; (8001db4 <I2Cx_MspInit+0xa8>)
 8001d78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d7c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <I2Cx_MspInit+0xa8>)
 8001d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d82:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <I2Cx_MspInit+0xa8>)
 8001d84:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d88:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	210f      	movs	r1, #15
 8001d8e:	2021      	movs	r0, #33	; 0x21
 8001d90:	f000 fcf4 	bl	800277c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001d94:	2021      	movs	r0, #33	; 0x21
 8001d96:	f000 fd0d 	bl	80027b4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	210f      	movs	r1, #15
 8001d9e:	2022      	movs	r0, #34	; 0x22
 8001da0:	f000 fcec 	bl	800277c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001da4:	2022      	movs	r0, #34	; 0x22
 8001da6:	f000 fd05 	bl	80027b4 <HAL_NVIC_EnableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3728      	adds	r7, #40	; 0x28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	48000400 	.word	0x48000400

08001dbc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <I2Cx_Init+0x54>)
 8001dc8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <I2Cx_Init+0x58>)
 8001dce:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff89 	bl	8001d0c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f001 f908 	bl	8003010 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001e00:	2100      	movs	r1, #0
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f001 feaa 	bl	8003b5c <HAL_I2CEx_ConfigAnalogFilter>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40005800 	.word	0x40005800
 8001e14:	00702681 	.word	0x00702681

08001e18 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
 8001e1c:	af04      	add	r7, sp, #16
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	4608      	mov	r0, r1
 8001e22:	4611      	mov	r1, r2
 8001e24:	461a      	mov	r2, r3
 8001e26:	4603      	mov	r3, r0
 8001e28:	72fb      	strb	r3, [r7, #11]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	813b      	strh	r3, [r7, #8]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e36:	7afb      	ldrb	r3, [r7, #11]
 8001e38:	b299      	uxth	r1, r3
 8001e3a:	88f8      	ldrh	r0, [r7, #6]
 8001e3c:	893a      	ldrh	r2, [r7, #8]
 8001e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e42:	9302      	str	r3, [sp, #8]
 8001e44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f001 fac4 	bl	80033dc <HAL_I2C_Mem_Read>
 8001e54:	4603      	mov	r3, r0
 8001e56:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d004      	beq.n	8001e68 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
 8001e60:	4619      	mov	r1, r3
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f832 	bl	8001ecc <I2Cx_Error>
  }
  return status;
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b08a      	sub	sp, #40	; 0x28
 8001e76:	af04      	add	r7, sp, #16
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	4608      	mov	r0, r1
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4603      	mov	r3, r0
 8001e82:	72fb      	strb	r3, [r7, #11]
 8001e84:	460b      	mov	r3, r1
 8001e86:	813b      	strh	r3, [r7, #8]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e90:	7afb      	ldrb	r3, [r7, #11]
 8001e92:	b299      	uxth	r1, r3
 8001e94:	88f8      	ldrh	r0, [r7, #6]
 8001e96:	893a      	ldrh	r2, [r7, #8]
 8001e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9c:	9302      	str	r3, [sp, #8]
 8001e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f001 f983 	bl	80031b4 <HAL_I2C_Mem_Write>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d004      	beq.n	8001ec2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001eb8:	7afb      	ldrb	r3, [r7, #11]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f805 	bl	8001ecc <I2Cx_Error>
  }
  return status;
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f001 f928 	bl	800312e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ff6c 	bl	8001dbc <I2Cx_Init>
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <SENSOR_IO_Init+0x10>)
 8001ef2:	f7ff ff63 	bl	8001dbc <I2Cx_Init>
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000b9c 	.word	0x20000b9c

08001f00 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	71bb      	strb	r3, [r7, #6]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001f12:	79bb      	ldrb	r3, [r7, #6]
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	79f9      	ldrb	r1, [r7, #7]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	1d7b      	adds	r3, r7, #5
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2301      	movs	r3, #1
 8001f22:	4803      	ldr	r0, [pc, #12]	; (8001f30 <SENSOR_IO_Write+0x30>)
 8001f24:	f7ff ffa5 	bl	8001e72 <I2Cx_WriteMultiple>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000b9c 	.word	0x20000b9c

08001f34 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	71fb      	strb	r3, [r7, #7]
 8001f40:	4613      	mov	r3, r2
 8001f42:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001f48:	79bb      	ldrb	r3, [r7, #6]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	79f9      	ldrb	r1, [r7, #7]
 8001f4e:	2301      	movs	r3, #1
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	f107 030f 	add.w	r3, r7, #15
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2301      	movs	r3, #1
 8001f5a:	4804      	ldr	r0, [pc, #16]	; (8001f6c <SENSOR_IO_Read+0x38>)
 8001f5c:	f7ff ff5c 	bl	8001e18 <I2Cx_ReadMultiple>

  return read_value;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000b9c 	.word	0x20000b9c

08001f70 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	603a      	str	r2, [r7, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	71bb      	strb	r3, [r7, #6]
 8001f82:	4613      	mov	r3, r2
 8001f84:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001f86:	79bb      	ldrb	r3, [r7, #6]
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	79f9      	ldrb	r1, [r7, #7]
 8001f8c:	88bb      	ldrh	r3, [r7, #4]
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2301      	movs	r3, #1
 8001f96:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <SENSOR_IO_ReadMultiple+0x38>)
 8001f98:	f7ff ff3e 	bl	8001e18 <I2Cx_ReadMultiple>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	b29b      	uxth	r3, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000b9c 	.word	0x20000b9c

08001fac <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <BSP_ACCELERO_Init+0x74>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4798      	blx	r3
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b6a      	cmp	r3, #106	; 0x6a
 8001fc4:	d002      	beq.n	8001fcc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	e024      	b.n	8002016 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <BSP_ACCELERO_Init+0x78>)
 8001fce:	4a14      	ldr	r2, [pc, #80]	; (8002020 <BSP_ACCELERO_Init+0x74>)
 8001fd0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001fd2:	2330      	movs	r3, #48	; 0x30
 8001fd4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001fde:	2340      	movs	r3, #64	; 0x40
 8001fe0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001fea:	797a      	ldrb	r2, [r7, #5]
 8001fec:	7abb      	ldrb	r3, [r7, #10]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001ff4:	7a3b      	ldrb	r3, [r7, #8]
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	b21b      	sxth	r3, r3
 8002008:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <BSP_ACCELERO_Init+0x78>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	89ba      	ldrh	r2, [r7, #12]
 8002012:	4610      	mov	r0, r2
 8002014:	4798      	blx	r3
  }  

  return ret;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000004 	.word	0x20000004
 8002024:	20000bf0 	.word	0x20000bf0

08002028 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d009      	beq.n	800204c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	2b00      	cmp	r3, #0
 8002040:	d004      	beq.n	800204c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	4798      	blx	r3
    }
  }
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000bf0 	.word	0x20000bf0

08002058 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002062:	2300      	movs	r3, #0
 8002064:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002066:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <BSP_GYRO_Init+0x7c>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	4798      	blx	r3
 800206c:	4603      	mov	r3, r0
 800206e:	2b6a      	cmp	r3, #106	; 0x6a
 8002070:	d002      	beq.n	8002078 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	e028      	b.n	80020ca <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002078:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <BSP_GYRO_Init+0x80>)
 800207a:	4a16      	ldr	r2, [pc, #88]	; (80020d4 <BSP_GYRO_Init+0x7c>)
 800207c:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002082:	2330      	movs	r3, #48	; 0x30
 8002084:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800208e:	2340      	movs	r3, #64	; 0x40
 8002090:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8002096:	230c      	movs	r3, #12
 8002098:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800209a:	7aba      	ldrb	r2, [r7, #10]
 800209c:	797b      	ldrb	r3, [r7, #5]
 800209e:	4313      	orrs	r3, r2
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80020a4:	7a3b      	ldrb	r3, [r7, #8]
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	b21a      	sxth	r2, r3
 80020b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b21b      	sxth	r3, r3
 80020b8:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <BSP_GYRO_Init+0x80>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	89ba      	ldrh	r2, [r7, #12]
 80020c2:	4610      	mov	r0, r2
 80020c4:	4798      	blx	r3
    
    ret = GYRO_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000038 	.word	0x20000038
 80020d8:	20000bf4 	.word	0x20000bf4

080020dc <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80020ea:	2110      	movs	r1, #16
 80020ec:	20d4      	movs	r0, #212	; 0xd4
 80020ee:	f7ff ff21 	bl	8001f34 <SENSOR_IO_Read>
 80020f2:	4603      	mov	r3, r0
 80020f4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80020fa:	7bbb      	ldrb	r3, [r7, #14]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002102:	7bba      	ldrb	r2, [r7, #14]
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	4313      	orrs	r3, r2
 8002108:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800210a:	7bbb      	ldrb	r3, [r7, #14]
 800210c:	461a      	mov	r2, r3
 800210e:	2110      	movs	r1, #16
 8002110:	20d4      	movs	r0, #212	; 0xd4
 8002112:	f7ff fef5 	bl	8001f00 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002116:	2112      	movs	r1, #18
 8002118:	20d4      	movs	r0, #212	; 0xd4
 800211a:	f7ff ff0b 	bl	8001f34 <SENSOR_IO_Read>
 800211e:	4603      	mov	r3, r0
 8002120:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	b29b      	uxth	r3, r3
 8002128:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800212a:	7bbb      	ldrb	r3, [r7, #14]
 800212c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002130:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002132:	7bba      	ldrb	r2, [r7, #14]
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	4313      	orrs	r3, r2
 8002138:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800213a:	7bbb      	ldrb	r3, [r7, #14]
 800213c:	461a      	mov	r2, r3
 800213e:	2112      	movs	r1, #18
 8002140:	20d4      	movs	r0, #212	; 0xd4
 8002142:	f7ff fedd 	bl	8001f00 <SENSOR_IO_Write>


  /* Read INT1_CTRL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8002146:	210d      	movs	r1, #13
 8002148:	20d4      	movs	r0, #212	; 0xd4
 800214a:	f7ff fef3 	bl	8001f34 <SENSOR_IO_Read>
 800214e:	4603      	mov	r3, r0
 8002150:	73bb      	strb	r3, [r7, #14]
  tmp |= (1 | 1<< 1); //set ACC drdy and gyro drdy on int pin1
 8002152:	7bbb      	ldrb	r3, [r7, #14]
 8002154:	f043 0303 	orr.w	r3, r3, #3
 8002158:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 800215a:	7bbb      	ldrb	r3, [r7, #14]
 800215c:	461a      	mov	r2, r3
 800215e:	210d      	movs	r1, #13
 8002160:	20d4      	movs	r0, #212	; 0xd4
 8002162:	f7ff fecd 	bl	8001f00 <SENSOR_IO_Write>
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002174:	2300      	movs	r3, #0
 8002176:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002178:	2110      	movs	r1, #16
 800217a:	20d4      	movs	r0, #212	; 0xd4
 800217c:	f7ff feda 	bl	8001f34 <SENSOR_IO_Read>
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	461a      	mov	r2, r3
 8002190:	2110      	movs	r1, #16
 8002192:	20d4      	movs	r0, #212	; 0xd4
 8002194:	f7ff feb4 	bl	8001f00 <SENSOR_IO_Write>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80021a4:	f7ff fea2 	bl	8001eec <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80021a8:	210f      	movs	r1, #15
 80021aa:	20d4      	movs	r0, #212	; 0xd4
 80021ac:	f7ff fec2 	bl	8001f34 <SENSOR_IO_Read>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80021c4:	2115      	movs	r1, #21
 80021c6:	20d4      	movs	r0, #212	; 0xd4
 80021c8:	f7ff feb4 	bl	8001f34 <SENSOR_IO_Read>
 80021cc:	4603      	mov	r3, r0
 80021ce:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	f023 0310 	bic.w	r3, r3, #16
 80021d6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	f043 0310 	orr.w	r3, r3, #16
 80021e4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	461a      	mov	r2, r3
 80021ea:	2115      	movs	r1, #21
 80021ec:	20d4      	movs	r0, #212	; 0xd4
 80021ee:	f7ff fe87 	bl	8001f00 <SENSOR_IO_Write>
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002204:	2300      	movs	r3, #0
 8002206:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002212:	2110      	movs	r1, #16
 8002214:	20d4      	movs	r0, #212	; 0xd4
 8002216:	f7ff fe8d 	bl	8001f34 <SENSOR_IO_Read>
 800221a:	4603      	mov	r3, r0
 800221c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800221e:	f107 0208 	add.w	r2, r7, #8
 8002222:	2306      	movs	r3, #6
 8002224:	2128      	movs	r1, #40	; 0x28
 8002226:	20d4      	movs	r0, #212	; 0xd4
 8002228:	f7ff fea2 	bl	8001f70 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800222c:	2300      	movs	r3, #0
 800222e:	77fb      	strb	r3, [r7, #31]
 8002230:	e01c      	b.n	800226c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002232:	7ffb      	ldrb	r3, [r7, #31]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	3301      	adds	r3, #1
 8002238:	3320      	adds	r3, #32
 800223a:	443b      	add	r3, r7
 800223c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002240:	b29b      	uxth	r3, r3
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	b29a      	uxth	r2, r3
 8002246:	7ffb      	ldrb	r3, [r7, #31]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	3320      	adds	r3, #32
 800224c:	443b      	add	r3, r7
 800224e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002252:	b29b      	uxth	r3, r3
 8002254:	4413      	add	r3, r2
 8002256:	b29a      	uxth	r2, r3
 8002258:	7ffb      	ldrb	r3, [r7, #31]
 800225a:	b212      	sxth	r2, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	3320      	adds	r3, #32
 8002260:	443b      	add	r3, r7
 8002262:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002266:	7ffb      	ldrb	r3, [r7, #31]
 8002268:	3301      	adds	r3, #1
 800226a:	77fb      	strb	r3, [r7, #31]
 800226c:	7ffb      	ldrb	r3, [r7, #31]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d9df      	bls.n	8002232 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002272:	7dfb      	ldrb	r3, [r7, #23]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b0c      	cmp	r3, #12
 800227a:	d829      	bhi.n	80022d0 <LSM6DSL_AccReadXYZ+0xd4>
 800227c:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <LSM6DSL_AccReadXYZ+0x88>)
 800227e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002282:	bf00      	nop
 8002284:	080022b9 	.word	0x080022b9
 8002288:	080022d1 	.word	0x080022d1
 800228c:	080022d1 	.word	0x080022d1
 8002290:	080022d1 	.word	0x080022d1
 8002294:	080022cb 	.word	0x080022cb
 8002298:	080022d1 	.word	0x080022d1
 800229c:	080022d1 	.word	0x080022d1
 80022a0:	080022d1 	.word	0x080022d1
 80022a4:	080022bf 	.word	0x080022bf
 80022a8:	080022d1 	.word	0x080022d1
 80022ac:	080022d1 	.word	0x080022d1
 80022b0:	080022d1 	.word	0x080022d1
 80022b4:	080022c5 	.word	0x080022c5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <LSM6DSL_AccReadXYZ+0x120>)
 80022ba:	61bb      	str	r3, [r7, #24]
    break;
 80022bc:	e008      	b.n	80022d0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <LSM6DSL_AccReadXYZ+0x124>)
 80022c0:	61bb      	str	r3, [r7, #24]
    break;
 80022c2:	e005      	b.n	80022d0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <LSM6DSL_AccReadXYZ+0x128>)
 80022c6:	61bb      	str	r3, [r7, #24]
    break;
 80022c8:	e002      	b.n	80022d0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <LSM6DSL_AccReadXYZ+0x12c>)
 80022cc:	61bb      	str	r3, [r7, #24]
    break;    
 80022ce:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	77fb      	strb	r3, [r7, #31]
 80022d4:	e01a      	b.n	800230c <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80022d6:	7ffb      	ldrb	r3, [r7, #31]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	3320      	adds	r3, #32
 80022dc:	443b      	add	r3, r7
 80022de:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80022e2:	ee07 3a90 	vmov	s15, r3
 80022e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80022ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f2:	7ffb      	ldrb	r3, [r7, #31]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022fe:	ee17 2a90 	vmov	r2, s15
 8002302:	b212      	sxth	r2, r2
 8002304:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002306:	7ffb      	ldrb	r3, [r7, #31]
 8002308:	3301      	adds	r3, #1
 800230a:	77fb      	strb	r3, [r7, #31]
 800230c:	7ffb      	ldrb	r3, [r7, #31]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d9e1      	bls.n	80022d6 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	3d79db23 	.word	0x3d79db23
 8002320:	3df9db23 	.word	0x3df9db23
 8002324:	3e79db23 	.word	0x3e79db23
 8002328:	3ef9db23 	.word	0x3ef9db23

0800232c <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800233a:	2111      	movs	r1, #17
 800233c:	20d4      	movs	r0, #212	; 0xd4
 800233e:	f7ff fdf9 	bl	8001f34 <SENSOR_IO_Read>
 8002342:	4603      	mov	r3, r0
 8002344:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800234a:	7bbb      	ldrb	r3, [r7, #14]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002352:	7bba      	ldrb	r2, [r7, #14]
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	4313      	orrs	r3, r2
 8002358:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800235a:	7bbb      	ldrb	r3, [r7, #14]
 800235c:	461a      	mov	r2, r3
 800235e:	2111      	movs	r1, #17
 8002360:	20d4      	movs	r0, #212	; 0xd4
 8002362:	f7ff fdcd 	bl	8001f00 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002366:	2112      	movs	r1, #18
 8002368:	20d4      	movs	r0, #212	; 0xd4
 800236a:	f7ff fde3 	bl	8001f34 <SENSOR_IO_Read>
 800236e:	4603      	mov	r3, r0
 8002370:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	b29b      	uxth	r3, r3
 8002378:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800237a:	7bbb      	ldrb	r3, [r7, #14]
 800237c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002380:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002382:	7bba      	ldrb	r2, [r7, #14]
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	4313      	orrs	r3, r2
 8002388:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800238a:	7bbb      	ldrb	r3, [r7, #14]
 800238c:	461a      	mov	r2, r3
 800238e:	2112      	movs	r1, #18
 8002390:	20d4      	movs	r0, #212	; 0xd4
 8002392:	f7ff fdb5 	bl	8001f00 <SENSOR_IO_Write>
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80023a4:	2300      	movs	r3, #0
 80023a6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80023a8:	2111      	movs	r1, #17
 80023aa:	20d4      	movs	r0, #212	; 0xd4
 80023ac:	f7ff fdc2 	bl	8001f34 <SENSOR_IO_Read>
 80023b0:	4603      	mov	r3, r0
 80023b2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	461a      	mov	r2, r3
 80023c0:	2111      	movs	r1, #17
 80023c2:	20d4      	movs	r0, #212	; 0xd4
 80023c4:	f7ff fd9c 	bl	8001f00 <SENSOR_IO_Write>
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80023d4:	f7ff fd8a 	bl	8001eec <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80023d8:	210f      	movs	r1, #15
 80023da:	20d4      	movs	r0, #212	; 0xd4
 80023dc:	f7ff fdaa 	bl	8001f34 <SENSOR_IO_Read>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80023f4:	2116      	movs	r1, #22
 80023f6:	20d4      	movs	r0, #212	; 0xd4
 80023f8:	f7ff fd9c 	bl	8001f34 <SENSOR_IO_Read>
 80023fc:	4603      	mov	r3, r0
 80023fe:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002406:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002414:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	461a      	mov	r2, r3
 800241a:	2116      	movs	r1, #22
 800241c:	20d4      	movs	r0, #212	; 0xd4
 800241e:	f7ff fd6f 	bl	8001f00 <SENSOR_IO_Write>
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8002434:	2300      	movs	r3, #0
 8002436:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002442:	2111      	movs	r1, #17
 8002444:	20d4      	movs	r0, #212	; 0xd4
 8002446:	f7ff fd75 	bl	8001f34 <SENSOR_IO_Read>
 800244a:	4603      	mov	r3, r0
 800244c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800244e:	f107 0208 	add.w	r2, r7, #8
 8002452:	2306      	movs	r3, #6
 8002454:	2122      	movs	r1, #34	; 0x22
 8002456:	20d4      	movs	r0, #212	; 0xd4
 8002458:	f7ff fd8a 	bl	8001f70 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800245c:	2300      	movs	r3, #0
 800245e:	77fb      	strb	r3, [r7, #31]
 8002460:	e01c      	b.n	800249c <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002462:	7ffb      	ldrb	r3, [r7, #31]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	3301      	adds	r3, #1
 8002468:	3320      	adds	r3, #32
 800246a:	443b      	add	r3, r7
 800246c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002470:	b29b      	uxth	r3, r3
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	b29a      	uxth	r2, r3
 8002476:	7ffb      	ldrb	r3, [r7, #31]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	3320      	adds	r3, #32
 800247c:	443b      	add	r3, r7
 800247e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002482:	b29b      	uxth	r3, r3
 8002484:	4413      	add	r3, r2
 8002486:	b29a      	uxth	r2, r3
 8002488:	7ffb      	ldrb	r3, [r7, #31]
 800248a:	b212      	sxth	r2, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	3320      	adds	r3, #32
 8002490:	443b      	add	r3, r7
 8002492:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002496:	7ffb      	ldrb	r3, [r7, #31]
 8002498:	3301      	adds	r3, #1
 800249a:	77fb      	strb	r3, [r7, #31]
 800249c:	7ffb      	ldrb	r3, [r7, #31]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d9df      	bls.n	8002462 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80024a2:	7dfb      	ldrb	r3, [r7, #23]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b0c      	cmp	r3, #12
 80024aa:	d829      	bhi.n	8002500 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 80024ac:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 80024ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b2:	bf00      	nop
 80024b4:	080024e9 	.word	0x080024e9
 80024b8:	08002501 	.word	0x08002501
 80024bc:	08002501 	.word	0x08002501
 80024c0:	08002501 	.word	0x08002501
 80024c4:	080024ef 	.word	0x080024ef
 80024c8:	08002501 	.word	0x08002501
 80024cc:	08002501 	.word	0x08002501
 80024d0:	08002501 	.word	0x08002501
 80024d4:	080024f5 	.word	0x080024f5
 80024d8:	08002501 	.word	0x08002501
 80024dc:	08002501 	.word	0x08002501
 80024e0:	08002501 	.word	0x08002501
 80024e4:	080024fb 	.word	0x080024fb
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80024ea:	61bb      	str	r3, [r7, #24]
    break;
 80024ec:	e008      	b.n	8002500 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80024f0:	61bb      	str	r3, [r7, #24]
    break;
 80024f2:	e005      	b.n	8002500 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80024f6:	61bb      	str	r3, [r7, #24]
    break;
 80024f8:	e002      	b.n	8002500 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80024fc:	61bb      	str	r3, [r7, #24]
    break;    
 80024fe:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002500:	2300      	movs	r3, #0
 8002502:	77fb      	strb	r3, [r7, #31]
 8002504:	e016      	b.n	8002534 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8002506:	7ffb      	ldrb	r3, [r7, #31]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	3320      	adds	r3, #32
 800250c:	443b      	add	r3, r7
 800250e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800251a:	7ffb      	ldrb	r3, [r7, #31]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	edd7 7a06 	vldr	s15, [r7, #24]
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800252e:	7ffb      	ldrb	r3, [r7, #31]
 8002530:	3301      	adds	r3, #1
 8002532:	77fb      	strb	r3, [r7, #31]
 8002534:	7ffb      	ldrb	r3, [r7, #31]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d9e5      	bls.n	8002506 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 800253a:	bf00      	nop
 800253c:	bf00      	nop
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	410c0000 	.word	0x410c0000
 8002548:	418c0000 	.word	0x418c0000
 800254c:	420c0000 	.word	0x420c0000
 8002550:	428c0000 	.word	0x428c0000

08002554 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255e:	2003      	movs	r0, #3
 8002560:	f000 f901 	bl	8002766 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002564:	200f      	movs	r0, #15
 8002566:	f7fe ff31 	bl	80013cc <HAL_InitTick>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	71fb      	strb	r3, [r7, #7]
 8002574:	e001      	b.n	800257a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002576:	f7fe ff01 	bl	800137c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800257a:	79fb      	ldrb	r3, [r7, #7]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_IncTick+0x20>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_IncTick+0x24>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4413      	add	r3, r2
 8002594:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <HAL_IncTick+0x24>)
 8002596:	6013      	str	r3, [r2, #0]
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	20000070 	.word	0x20000070
 80025a8:	20000bf8 	.word	0x20000bf8

080025ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return uwTick;
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <HAL_GetTick+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000bf8 	.word	0x20000bf8

080025c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025cc:	f7ff ffee 	bl	80025ac <HAL_GetTick>
 80025d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d005      	beq.n	80025ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_Delay+0x44>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4413      	add	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ea:	bf00      	nop
 80025ec:	f7ff ffde 	bl	80025ac <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d8f7      	bhi.n	80025ec <HAL_Delay+0x28>
  {
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000070 	.word	0x20000070

0800260c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002628:	4013      	ands	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263e:	4a04      	ldr	r2, [pc, #16]	; (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	60d3      	str	r3, [r2, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <__NVIC_GetPriorityGrouping+0x18>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 0307 	and.w	r3, r3, #7
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	2b00      	cmp	r3, #0
 8002680:	db0b      	blt.n	800269a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	4907      	ldr	r1, [pc, #28]	; (80026a8 <__NVIC_EnableIRQ+0x38>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	2001      	movs	r0, #1
 8002692:	fa00 f202 	lsl.w	r2, r0, r2
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000e100 	.word	0xe000e100

080026ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	db0a      	blt.n	80026d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	490c      	ldr	r1, [pc, #48]	; (80026f8 <__NVIC_SetPriority+0x4c>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	0112      	lsls	r2, r2, #4
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	440b      	add	r3, r1
 80026d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d4:	e00a      	b.n	80026ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4908      	ldr	r1, [pc, #32]	; (80026fc <__NVIC_SetPriority+0x50>)
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	3b04      	subs	r3, #4
 80026e4:	0112      	lsls	r2, r2, #4
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	440b      	add	r3, r1
 80026ea:	761a      	strb	r2, [r3, #24]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000e100 	.word	0xe000e100
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f1c3 0307 	rsb	r3, r3, #7
 800271a:	2b04      	cmp	r3, #4
 800271c:	bf28      	it	cs
 800271e:	2304      	movcs	r3, #4
 8002720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3304      	adds	r3, #4
 8002726:	2b06      	cmp	r3, #6
 8002728:	d902      	bls.n	8002730 <NVIC_EncodePriority+0x30>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3b03      	subs	r3, #3
 800272e:	e000      	b.n	8002732 <NVIC_EncodePriority+0x32>
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	f04f 32ff 	mov.w	r2, #4294967295
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	401a      	ands	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002748:	f04f 31ff 	mov.w	r1, #4294967295
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43d9      	mvns	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	4313      	orrs	r3, r2
         );
}
 800275a:	4618      	mov	r0, r3
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff ff4c 	bl	800260c <__NVIC_SetPriorityGrouping>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800278e:	f7ff ff61 	bl	8002654 <__NVIC_GetPriorityGrouping>
 8002792:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	6978      	ldr	r0, [r7, #20]
 800279a:	f7ff ffb1 	bl	8002700 <NVIC_EncodePriority>
 800279e:	4602      	mov	r2, r0
 80027a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff80 	bl	80026ac <__NVIC_SetPriority>
}
 80027ac:	bf00      	nop
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff54 	bl	8002670 <__NVIC_EnableIRQ>
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e098      	b.n	8002914 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b4d      	ldr	r3, [pc, #308]	; (8002920 <HAL_DMA_Init+0x150>)
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d80f      	bhi.n	800280e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b4b      	ldr	r3, [pc, #300]	; (8002924 <HAL_DMA_Init+0x154>)
 80027f6:	4413      	add	r3, r2
 80027f8:	4a4b      	ldr	r2, [pc, #300]	; (8002928 <HAL_DMA_Init+0x158>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	009a      	lsls	r2, r3, #2
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a48      	ldr	r2, [pc, #288]	; (800292c <HAL_DMA_Init+0x15c>)
 800280a:	641a      	str	r2, [r3, #64]	; 0x40
 800280c:	e00e      	b.n	800282c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	4b46      	ldr	r3, [pc, #280]	; (8002930 <HAL_DMA_Init+0x160>)
 8002816:	4413      	add	r3, r2
 8002818:	4a43      	ldr	r2, [pc, #268]	; (8002928 <HAL_DMA_Init+0x158>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	009a      	lsls	r2, r3, #2
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a42      	ldr	r2, [pc, #264]	; (8002934 <HAL_DMA_Init+0x164>)
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002846:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002886:	d039      	beq.n	80028fc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	4a27      	ldr	r2, [pc, #156]	; (800292c <HAL_DMA_Init+0x15c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d11a      	bne.n	80028c8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_DMA_Init+0x168>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	f003 031c 	and.w	r3, r3, #28
 800289e:	210f      	movs	r1, #15
 80028a0:	fa01 f303 	lsl.w	r3, r1, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	4924      	ldr	r1, [pc, #144]	; (8002938 <HAL_DMA_Init+0x168>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028ac:	4b22      	ldr	r3, [pc, #136]	; (8002938 <HAL_DMA_Init+0x168>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	f003 031c 	and.w	r3, r3, #28
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	491d      	ldr	r1, [pc, #116]	; (8002938 <HAL_DMA_Init+0x168>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
 80028c6:	e019      	b.n	80028fc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028c8:	4b1c      	ldr	r3, [pc, #112]	; (800293c <HAL_DMA_Init+0x16c>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f003 031c 	and.w	r3, r3, #28
 80028d4:	210f      	movs	r1, #15
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	4917      	ldr	r1, [pc, #92]	; (800293c <HAL_DMA_Init+0x16c>)
 80028de:	4013      	ands	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028e2:	4b16      	ldr	r3, [pc, #88]	; (800293c <HAL_DMA_Init+0x16c>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f003 031c 	and.w	r3, r3, #28
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	4911      	ldr	r1, [pc, #68]	; (800293c <HAL_DMA_Init+0x16c>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40020407 	.word	0x40020407
 8002924:	bffdfff8 	.word	0xbffdfff8
 8002928:	cccccccd 	.word	0xcccccccd
 800292c:	40020000 	.word	0x40020000
 8002930:	bffdfbf8 	.word	0xbffdfbf8
 8002934:	40020400 	.word	0x40020400
 8002938:	400200a8 	.word	0x400200a8
 800293c:	400204a8 	.word	0x400204a8

08002940 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_DMA_Start_IT+0x20>
 800295c:	2302      	movs	r3, #2
 800295e:	e04b      	b.n	80029f8 <HAL_DMA_Start_IT+0xb8>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d13a      	bne.n	80029ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0201 	bic.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f95f 	bl	8002c5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d008      	beq.n	80029b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 020e 	orr.w	r2, r2, #14
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	e00f      	b.n	80029d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0204 	bic.w	r2, r2, #4
 80029c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 020a 	orr.w	r2, r2, #10
 80029d6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	e005      	b.n	80029f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80029f2:	2302      	movs	r3, #2
 80029f4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d008      	beq.n	8002a2a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e022      	b.n	8002a70 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 020e 	bic.w	r2, r2, #14
 8002a38:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f003 021c 	and.w	r2, r3, #28
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2101      	movs	r1, #1
 8002a58:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d005      	beq.n	8002aa0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2204      	movs	r2, #4
 8002a98:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
 8002a9e:	e029      	b.n	8002af4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 020e 	bic.w	r2, r2, #14
 8002aae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0201 	bic.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac4:	f003 021c 	and.w	r2, r3, #28
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	2101      	movs	r1, #1
 8002ace:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
    }
  }
  return status;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	f003 031c 	and.w	r3, r3, #28
 8002b1e:	2204      	movs	r2, #4
 8002b20:	409a      	lsls	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d026      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x7a>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d021      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d107      	bne.n	8002b52 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0204 	bic.w	r2, r2, #4
 8002b50:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f003 021c 	and.w	r2, r3, #28
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2104      	movs	r1, #4
 8002b60:	fa01 f202 	lsl.w	r2, r1, r2
 8002b64:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d071      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002b76:	e06c      	b.n	8002c52 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	f003 031c 	and.w	r3, r3, #28
 8002b80:	2202      	movs	r2, #2
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02e      	beq.n	8002bea <HAL_DMA_IRQHandler+0xec>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d029      	beq.n	8002bea <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 020a 	bic.w	r2, r2, #10
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	f003 021c 	and.w	r2, r3, #28
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	2102      	movs	r1, #2
 8002bca:	fa01 f202 	lsl.w	r2, r1, r2
 8002bce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d038      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002be8:	e033      	b.n	8002c52 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	f003 031c 	and.w	r3, r3, #28
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d02a      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x156>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d025      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 020e 	bic.w	r2, r2, #14
 8002c16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f003 021c 	and.w	r2, r3, #28
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	2101      	movs	r1, #1
 8002c26:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d004      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c52:	bf00      	nop
 8002c54:	bf00      	nop
}
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f003 021c 	and.w	r2, r3, #28
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	2101      	movs	r1, #1
 8002c78:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d108      	bne.n	8002ca0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c9e:	e007      	b.n	8002cb0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	60da      	str	r2, [r3, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cca:	e17f      	b.n	8002fcc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8171 	beq.w	8002fc6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d005      	beq.n	8002cfc <HAL_GPIO_Init+0x40>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d130      	bne.n	8002d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d32:	2201      	movs	r2, #1
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	f003 0201 	and.w	r2, r3, #1
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d118      	bne.n	8002d9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d70:	2201      	movs	r2, #1
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	08db      	lsrs	r3, r3, #3
 8002d86:	f003 0201 	and.w	r2, r3, #1
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d017      	beq.n	8002dd8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d123      	bne.n	8002e2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	08da      	lsrs	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3208      	adds	r2, #8
 8002dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	08da      	lsrs	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3208      	adds	r2, #8
 8002e26:	6939      	ldr	r1, [r7, #16]
 8002e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	2203      	movs	r2, #3
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0203 	and.w	r2, r3, #3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80ac 	beq.w	8002fc6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6e:	4b5f      	ldr	r3, [pc, #380]	; (8002fec <HAL_GPIO_Init+0x330>)
 8002e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e72:	4a5e      	ldr	r2, [pc, #376]	; (8002fec <HAL_GPIO_Init+0x330>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6613      	str	r3, [r2, #96]	; 0x60
 8002e7a:	4b5c      	ldr	r3, [pc, #368]	; (8002fec <HAL_GPIO_Init+0x330>)
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e86:	4a5a      	ldr	r2, [pc, #360]	; (8002ff0 <HAL_GPIO_Init+0x334>)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002eb0:	d025      	beq.n	8002efe <HAL_GPIO_Init+0x242>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4f      	ldr	r2, [pc, #316]	; (8002ff4 <HAL_GPIO_Init+0x338>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01f      	beq.n	8002efa <HAL_GPIO_Init+0x23e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4e      	ldr	r2, [pc, #312]	; (8002ff8 <HAL_GPIO_Init+0x33c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d019      	beq.n	8002ef6 <HAL_GPIO_Init+0x23a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a4d      	ldr	r2, [pc, #308]	; (8002ffc <HAL_GPIO_Init+0x340>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <HAL_GPIO_Init+0x236>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4c      	ldr	r2, [pc, #304]	; (8003000 <HAL_GPIO_Init+0x344>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00d      	beq.n	8002eee <HAL_GPIO_Init+0x232>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a4b      	ldr	r2, [pc, #300]	; (8003004 <HAL_GPIO_Init+0x348>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <HAL_GPIO_Init+0x22e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4a      	ldr	r2, [pc, #296]	; (8003008 <HAL_GPIO_Init+0x34c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_GPIO_Init+0x22a>
 8002ee2:	2306      	movs	r3, #6
 8002ee4:	e00c      	b.n	8002f00 <HAL_GPIO_Init+0x244>
 8002ee6:	2307      	movs	r3, #7
 8002ee8:	e00a      	b.n	8002f00 <HAL_GPIO_Init+0x244>
 8002eea:	2305      	movs	r3, #5
 8002eec:	e008      	b.n	8002f00 <HAL_GPIO_Init+0x244>
 8002eee:	2304      	movs	r3, #4
 8002ef0:	e006      	b.n	8002f00 <HAL_GPIO_Init+0x244>
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e004      	b.n	8002f00 <HAL_GPIO_Init+0x244>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e002      	b.n	8002f00 <HAL_GPIO_Init+0x244>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <HAL_GPIO_Init+0x244>
 8002efe:	2300      	movs	r3, #0
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	f002 0203 	and.w	r2, r2, #3
 8002f06:	0092      	lsls	r2, r2, #2
 8002f08:	4093      	lsls	r3, r2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f10:	4937      	ldr	r1, [pc, #220]	; (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	089b      	lsrs	r3, r3, #2
 8002f16:	3302      	adds	r3, #2
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f1e:	4b3b      	ldr	r3, [pc, #236]	; (800300c <HAL_GPIO_Init+0x350>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f42:	4a32      	ldr	r2, [pc, #200]	; (800300c <HAL_GPIO_Init+0x350>)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f48:	4b30      	ldr	r3, [pc, #192]	; (800300c <HAL_GPIO_Init+0x350>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f6c:	4a27      	ldr	r2, [pc, #156]	; (800300c <HAL_GPIO_Init+0x350>)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f72:	4b26      	ldr	r3, [pc, #152]	; (800300c <HAL_GPIO_Init+0x350>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f96:	4a1d      	ldr	r2, [pc, #116]	; (800300c <HAL_GPIO_Init+0x350>)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	; (800300c <HAL_GPIO_Init+0x350>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fc0:	4a12      	ldr	r2, [pc, #72]	; (800300c <HAL_GPIO_Init+0x350>)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f47f ae78 	bne.w	8002ccc <HAL_GPIO_Init+0x10>
  }
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	48000400 	.word	0x48000400
 8002ff8:	48000800 	.word	0x48000800
 8002ffc:	48000c00 	.word	0x48000c00
 8003000:	48001000 	.word	0x48001000
 8003004:	48001400 	.word	0x48001400
 8003008:	48001800 	.word	0x48001800
 800300c:	40010400 	.word	0x40010400

08003010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e081      	b.n	8003126 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f8a8 	bl	800318c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2224      	movs	r2, #36	; 0x24
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003060:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003070:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d107      	bne.n	800308a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	e006      	b.n	8003098 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003096:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d104      	bne.n	80030aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69d9      	ldr	r1, [r3, #28]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1a      	ldr	r2, [r3, #32]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e021      	b.n	8003184 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2224      	movs	r2, #36	; 0x24
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f821 	bl	80031a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	4608      	mov	r0, r1
 80031be:	4611      	mov	r1, r2
 80031c0:	461a      	mov	r2, r3
 80031c2:	4603      	mov	r3, r0
 80031c4:	817b      	strh	r3, [r7, #10]
 80031c6:	460b      	mov	r3, r1
 80031c8:	813b      	strh	r3, [r7, #8]
 80031ca:	4613      	mov	r3, r2
 80031cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	f040 80f9 	bne.w	80033ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_I2C_Mem_Write+0x34>
 80031e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d105      	bne.n	80031f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0ed      	b.n	80033d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_I2C_Mem_Write+0x4e>
 80031fe:	2302      	movs	r3, #2
 8003200:	e0e6      	b.n	80033d0 <HAL_I2C_Mem_Write+0x21c>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800320a:	f7ff f9cf 	bl	80025ac <HAL_GetTick>
 800320e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	2319      	movs	r3, #25
 8003216:	2201      	movs	r2, #1
 8003218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fac3 	bl	80037a8 <I2C_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0d1      	b.n	80033d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2221      	movs	r2, #33	; 0x21
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2240      	movs	r2, #64	; 0x40
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800324c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003254:	88f8      	ldrh	r0, [r7, #6]
 8003256:	893a      	ldrh	r2, [r7, #8]
 8003258:	8979      	ldrh	r1, [r7, #10]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	4603      	mov	r3, r0
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f9d3 	bl	8003610 <I2C_RequestMemoryWrite>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0a9      	b.n	80033d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	2bff      	cmp	r3, #255	; 0xff
 8003284:	d90e      	bls.n	80032a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	22ff      	movs	r2, #255	; 0xff
 800328a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	b2da      	uxtb	r2, r3
 8003292:	8979      	ldrh	r1, [r7, #10]
 8003294:	2300      	movs	r3, #0
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 fc2b 	bl	8003af8 <I2C_TransferConfig>
 80032a2:	e00f      	b.n	80032c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	8979      	ldrh	r1, [r7, #10]
 80032b6:	2300      	movs	r3, #0
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fc1a 	bl	8003af8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 faad 	bl	8003828 <I2C_WaitOnTXISFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e07b      	b.n	80033d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	781a      	ldrb	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d034      	beq.n	800337c <HAL_I2C_Mem_Write+0x1c8>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d130      	bne.n	800337c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	2200      	movs	r2, #0
 8003322:	2180      	movs	r1, #128	; 0x80
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fa3f 	bl	80037a8 <I2C_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e04d      	b.n	80033d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	2bff      	cmp	r3, #255	; 0xff
 800333c:	d90e      	bls.n	800335c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	22ff      	movs	r2, #255	; 0xff
 8003342:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003348:	b2da      	uxtb	r2, r3
 800334a:	8979      	ldrh	r1, [r7, #10]
 800334c:	2300      	movs	r3, #0
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 fbcf 	bl	8003af8 <I2C_TransferConfig>
 800335a:	e00f      	b.n	800337c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336a:	b2da      	uxtb	r2, r3
 800336c:	8979      	ldrh	r1, [r7, #10]
 800336e:	2300      	movs	r3, #0
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 fbbe 	bl	8003af8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d19e      	bne.n	80032c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fa8c 	bl	80038a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e01a      	b.n	80033d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2220      	movs	r2, #32
 80033a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6859      	ldr	r1, [r3, #4]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_I2C_Mem_Write+0x224>)
 80033ae:	400b      	ands	r3, r1
 80033b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e000      	b.n	80033d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
  }
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	fe00e800 	.word	0xfe00e800

080033dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	4608      	mov	r0, r1
 80033e6:	4611      	mov	r1, r2
 80033e8:	461a      	mov	r2, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	817b      	strh	r3, [r7, #10]
 80033ee:	460b      	mov	r3, r1
 80033f0:	813b      	strh	r3, [r7, #8]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b20      	cmp	r3, #32
 8003400:	f040 80fd 	bne.w	80035fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_I2C_Mem_Read+0x34>
 800340a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003416:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0f1      	b.n	8003600 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_I2C_Mem_Read+0x4e>
 8003426:	2302      	movs	r3, #2
 8003428:	e0ea      	b.n	8003600 <HAL_I2C_Mem_Read+0x224>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003432:	f7ff f8bb 	bl	80025ac <HAL_GetTick>
 8003436:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	2319      	movs	r3, #25
 800343e:	2201      	movs	r2, #1
 8003440:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f9af 	bl	80037a8 <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0d5      	b.n	8003600 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2222      	movs	r2, #34	; 0x22
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2240      	movs	r2, #64	; 0x40
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a3a      	ldr	r2, [r7, #32]
 800346e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003474:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800347c:	88f8      	ldrh	r0, [r7, #6]
 800347e:	893a      	ldrh	r2, [r7, #8]
 8003480:	8979      	ldrh	r1, [r7, #10]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	4603      	mov	r3, r0
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f913 	bl	80036b8 <I2C_RequestMemoryRead>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0ad      	b.n	8003600 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2bff      	cmp	r3, #255	; 0xff
 80034ac:	d90e      	bls.n	80034cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	22ff      	movs	r2, #255	; 0xff
 80034b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	8979      	ldrh	r1, [r7, #10]
 80034bc:	4b52      	ldr	r3, [pc, #328]	; (8003608 <HAL_I2C_Mem_Read+0x22c>)
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 fb17 	bl	8003af8 <I2C_TransferConfig>
 80034ca:	e00f      	b.n	80034ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	8979      	ldrh	r1, [r7, #10]
 80034de:	4b4a      	ldr	r3, [pc, #296]	; (8003608 <HAL_I2C_Mem_Read+0x22c>)
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fb06 	bl	8003af8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f2:	2200      	movs	r2, #0
 80034f4:	2104      	movs	r1, #4
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f956 	bl	80037a8 <I2C_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e07c      	b.n	8003600 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d034      	beq.n	80035ac <HAL_I2C_Mem_Read+0x1d0>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	2b00      	cmp	r3, #0
 8003548:	d130      	bne.n	80035ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	2200      	movs	r2, #0
 8003552:	2180      	movs	r1, #128	; 0x80
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f927 	bl	80037a8 <I2C_WaitOnFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e04d      	b.n	8003600 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	2bff      	cmp	r3, #255	; 0xff
 800356c:	d90e      	bls.n	800358c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	22ff      	movs	r2, #255	; 0xff
 8003572:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	b2da      	uxtb	r2, r3
 800357a:	8979      	ldrh	r1, [r7, #10]
 800357c:	2300      	movs	r3, #0
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fab7 	bl	8003af8 <I2C_TransferConfig>
 800358a:	e00f      	b.n	80035ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	b2da      	uxtb	r2, r3
 800359c:	8979      	ldrh	r1, [r7, #10]
 800359e:	2300      	movs	r3, #0
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 faa6 	bl	8003af8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d19a      	bne.n	80034ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f974 	bl	80038a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e01a      	b.n	8003600 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2220      	movs	r2, #32
 80035d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_I2C_Mem_Read+0x230>)
 80035de:	400b      	ands	r3, r1
 80035e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e000      	b.n	8003600 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80035fe:	2302      	movs	r3, #2
  }
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	80002400 	.word	0x80002400
 800360c:	fe00e800 	.word	0xfe00e800

08003610 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	4608      	mov	r0, r1
 800361a:	4611      	mov	r1, r2
 800361c:	461a      	mov	r2, r3
 800361e:	4603      	mov	r3, r0
 8003620:	817b      	strh	r3, [r7, #10]
 8003622:	460b      	mov	r3, r1
 8003624:	813b      	strh	r3, [r7, #8]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	8979      	ldrh	r1, [r7, #10]
 8003630:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <I2C_RequestMemoryWrite+0xa4>)
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fa5d 	bl	8003af8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	69b9      	ldr	r1, [r7, #24]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f8f0 	bl	8003828 <I2C_WaitOnTXISFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e02c      	b.n	80036ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d105      	bne.n	8003664 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003658:	893b      	ldrh	r3, [r7, #8]
 800365a:	b2da      	uxtb	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	629a      	str	r2, [r3, #40]	; 0x28
 8003662:	e015      	b.n	8003690 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003664:	893b      	ldrh	r3, [r7, #8]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	b29b      	uxth	r3, r3
 800366a:	b2da      	uxtb	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	69b9      	ldr	r1, [r7, #24]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f8d6 	bl	8003828 <I2C_WaitOnTXISFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e012      	b.n	80036ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003686:	893b      	ldrh	r3, [r7, #8]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2200      	movs	r2, #0
 8003698:	2180      	movs	r1, #128	; 0x80
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f884 	bl	80037a8 <I2C_WaitOnFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	80002000 	.word	0x80002000

080036b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	4608      	mov	r0, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	461a      	mov	r2, r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	817b      	strh	r3, [r7, #10]
 80036ca:	460b      	mov	r3, r1
 80036cc:	813b      	strh	r3, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	8979      	ldrh	r1, [r7, #10]
 80036d8:	4b20      	ldr	r3, [pc, #128]	; (800375c <I2C_RequestMemoryRead+0xa4>)
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	2300      	movs	r3, #0
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 fa0a 	bl	8003af8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	69b9      	ldr	r1, [r7, #24]
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f89d 	bl	8003828 <I2C_WaitOnTXISFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e02c      	b.n	8003752 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d105      	bne.n	800370a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036fe:	893b      	ldrh	r3, [r7, #8]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	629a      	str	r2, [r3, #40]	; 0x28
 8003708:	e015      	b.n	8003736 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800370a:	893b      	ldrh	r3, [r7, #8]
 800370c:	0a1b      	lsrs	r3, r3, #8
 800370e:	b29b      	uxth	r3, r3
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	69b9      	ldr	r1, [r7, #24]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f883 	bl	8003828 <I2C_WaitOnTXISFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e012      	b.n	8003752 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800372c:	893b      	ldrh	r3, [r7, #8]
 800372e:	b2da      	uxtb	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2200      	movs	r2, #0
 800373e:	2140      	movs	r1, #64	; 0x40
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f831 	bl	80037a8 <I2C_WaitOnFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	80002000 	.word	0x80002000

08003760 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b02      	cmp	r3, #2
 8003774:	d103      	bne.n	800377e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2200      	movs	r2, #0
 800377c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d007      	beq.n	800379c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	619a      	str	r2, [r3, #24]
  }
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b8:	e022      	b.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d01e      	beq.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c2:	f7fe fef3 	bl	80025ac <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d113      	bne.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e00f      	b.n	8003820 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	4013      	ands	r3, r2
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	429a      	cmp	r2, r3
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	429a      	cmp	r2, r3
 800381c:	d0cd      	beq.n	80037ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003834:	e02c      	b.n	8003890 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f870 	bl	8003920 <I2C_IsErrorOccurred>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e02a      	b.n	80038a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d01e      	beq.n	8003890 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003852:	f7fe feab 	bl	80025ac <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	429a      	cmp	r2, r3
 8003860:	d302      	bcc.n	8003868 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d113      	bne.n	8003890 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386c:	f043 0220 	orr.w	r2, r3, #32
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e007      	b.n	80038a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b02      	cmp	r3, #2
 800389c:	d1cb      	bne.n	8003836 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038b4:	e028      	b.n	8003908 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f830 	bl	8003920 <I2C_IsErrorOccurred>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e026      	b.n	8003918 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ca:	f7fe fe6f 	bl	80025ac <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d113      	bne.n	8003908 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e007      	b.n	8003918 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b20      	cmp	r3, #32
 8003914:	d1cf      	bne.n	80038b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	; 0x28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	d075      	beq.n	8003a38 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2210      	movs	r2, #16
 8003952:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003954:	e056      	b.n	8003a04 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d052      	beq.n	8003a04 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800395e:	f7fe fe25 	bl	80025ac <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <I2C_IsErrorOccurred+0x54>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d147      	bne.n	8003a04 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800397e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003986:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003996:	d12e      	bne.n	80039f6 <I2C_IsErrorOccurred+0xd6>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800399e:	d02a      	beq.n	80039f6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80039a0:	7cfb      	ldrb	r3, [r7, #19]
 80039a2:	2b20      	cmp	r3, #32
 80039a4:	d027      	beq.n	80039f6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039b6:	f7fe fdf9 	bl	80025ac <HAL_GetTick>
 80039ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039bc:	e01b      	b.n	80039f6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039be:	f7fe fdf5 	bl	80025ac <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b19      	cmp	r3, #25
 80039ca:	d914      	bls.n	80039f6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d1dc      	bne.n	80039be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d003      	beq.n	8003a1a <I2C_IsErrorOccurred+0xfa>
 8003a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d09d      	beq.n	8003956 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2220      	movs	r2, #32
 8003a28:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f043 0304 	orr.w	r3, r3, #4
 8003a30:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00b      	beq.n	8003a84 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f043 0308 	orr.w	r3, r3, #8
 8003a72:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f043 0302 	orr.w	r3, r3, #2
 8003a94:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01c      	beq.n	8003ae8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f7ff fe56 	bl	8003760 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <I2C_IsErrorOccurred+0x1d4>)
 8003ac0:	400b      	ands	r3, r1
 8003ac2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3728      	adds	r7, #40	; 0x28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	fe00e800 	.word	0xfe00e800

08003af8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	460b      	mov	r3, r1
 8003b04:	817b      	strh	r3, [r7, #10]
 8003b06:	4613      	mov	r3, r2
 8003b08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b0a:	897b      	ldrh	r3, [r7, #10]
 8003b0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b10:	7a7b      	ldrb	r3, [r7, #9]
 8003b12:	041b      	lsls	r3, r3, #16
 8003b14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	0d5b      	lsrs	r3, r3, #21
 8003b32:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b36:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <I2C_TransferConfig+0x60>)
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	ea02 0103 	and.w	r1, r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	03ff63ff 	.word	0x03ff63ff

08003b5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d138      	bne.n	8003be4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e032      	b.n	8003be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2224      	movs	r2, #36	; 0x24
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <HAL_PWREx_GetVoltageRange+0x18>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40007000 	.word	0x40007000

08003c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1e:	d130      	bne.n	8003c82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c20:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c2c:	d038      	beq.n	8003ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c2e:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c36:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2232      	movs	r2, #50	; 0x32
 8003c44:	fb02 f303 	mul.w	r3, r2, r3
 8003c48:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	0c9b      	lsrs	r3, r3, #18
 8003c50:	3301      	adds	r3, #1
 8003c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c54:	e002      	b.n	8003c5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c68:	d102      	bne.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f2      	bne.n	8003c56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c70:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7c:	d110      	bne.n	8003ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e00f      	b.n	8003ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8e:	d007      	beq.n	8003ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c90:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c98:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	20000000 	.word	0x20000000
 8003cb8:	431bde83 	.word	0x431bde83

08003cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e3ca      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cce:	4b97      	ldr	r3, [pc, #604]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd8:	4b94      	ldr	r3, [pc, #592]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80e4 	beq.w	8003eb8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <HAL_RCC_OscConfig+0x4a>
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	2b0c      	cmp	r3, #12
 8003cfa:	f040 808b 	bne.w	8003e14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	f040 8087 	bne.w	8003e14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d06:	4b89      	ldr	r3, [pc, #548]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <HAL_RCC_OscConfig+0x62>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e3a2      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1a      	ldr	r2, [r3, #32]
 8003d22:	4b82      	ldr	r3, [pc, #520]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <HAL_RCC_OscConfig+0x7c>
 8003d2e:	4b7f      	ldr	r3, [pc, #508]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d36:	e005      	b.n	8003d44 <HAL_RCC_OscConfig+0x88>
 8003d38:	4b7c      	ldr	r3, [pc, #496]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3e:	091b      	lsrs	r3, r3, #4
 8003d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d223      	bcs.n	8003d90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fd87 	bl	8004860 <RCC_SetFlashLatencyFromMSIRange>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e383      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d5c:	4b73      	ldr	r3, [pc, #460]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a72      	ldr	r2, [pc, #456]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d62:	f043 0308 	orr.w	r3, r3, #8
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b70      	ldr	r3, [pc, #448]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	496d      	ldr	r1, [pc, #436]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d7a:	4b6c      	ldr	r3, [pc, #432]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	4968      	ldr	r1, [pc, #416]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	604b      	str	r3, [r1, #4]
 8003d8e:	e025      	b.n	8003ddc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d90:	4b66      	ldr	r3, [pc, #408]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a65      	ldr	r2, [pc, #404]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d96:	f043 0308 	orr.w	r3, r3, #8
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	4b63      	ldr	r3, [pc, #396]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	4960      	ldr	r1, [pc, #384]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dae:	4b5f      	ldr	r3, [pc, #380]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	495b      	ldr	r1, [pc, #364]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fd47 	bl	8004860 <RCC_SetFlashLatencyFromMSIRange>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e343      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ddc:	f000 fc4a 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b52      	ldr	r3, [pc, #328]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	4950      	ldr	r1, [pc, #320]	; (8003f30 <HAL_RCC_OscConfig+0x274>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
 8003df8:	4a4e      	ldr	r2, [pc, #312]	; (8003f34 <HAL_RCC_OscConfig+0x278>)
 8003dfa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dfc:	4b4e      	ldr	r3, [pc, #312]	; (8003f38 <HAL_RCC_OscConfig+0x27c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd fae3 	bl	80013cc <HAL_InitTick>
 8003e06:	4603      	mov	r3, r0
 8003e08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d052      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	e327      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d032      	beq.n	8003e82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e1c:	4b43      	ldr	r3, [pc, #268]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a42      	ldr	r2, [pc, #264]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e28:	f7fe fbc0 	bl	80025ac <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e30:	f7fe fbbc 	bl	80025ac <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e310      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e42:	4b3a      	ldr	r3, [pc, #232]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e4e:	4b37      	ldr	r3, [pc, #220]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a36      	ldr	r2, [pc, #216]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e54:	f043 0308 	orr.w	r3, r3, #8
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	4931      	ldr	r1, [pc, #196]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e6c:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	492c      	ldr	r1, [pc, #176]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	e01a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e82:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a29      	ldr	r2, [pc, #164]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e8e:	f7fe fb8d 	bl	80025ac <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e96:	f7fe fb89 	bl	80025ac <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e2dd      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ea8:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCC_OscConfig+0x1da>
 8003eb4:	e000      	b.n	8003eb8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003eb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d074      	beq.n	8003fae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d005      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x21a>
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b0c      	cmp	r3, #12
 8003ece:	d10e      	bne.n	8003eee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d10b      	bne.n	8003eee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed6:	4b15      	ldr	r3, [pc, #84]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d064      	beq.n	8003fac <HAL_RCC_OscConfig+0x2f0>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d160      	bne.n	8003fac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e2ba      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef6:	d106      	bne.n	8003f06 <HAL_RCC_OscConfig+0x24a>
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a0b      	ldr	r2, [pc, #44]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	e026      	b.n	8003f54 <HAL_RCC_OscConfig+0x298>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f0e:	d115      	bne.n	8003f3c <HAL_RCC_OscConfig+0x280>
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a05      	ldr	r2, [pc, #20]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003f16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	4b03      	ldr	r3, [pc, #12]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a02      	ldr	r2, [pc, #8]	; (8003f2c <HAL_RCC_OscConfig+0x270>)
 8003f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	e014      	b.n	8003f54 <HAL_RCC_OscConfig+0x298>
 8003f2a:	bf00      	nop
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	0800ee10 	.word	0x0800ee10
 8003f34:	20000000 	.word	0x20000000
 8003f38:	2000006c 	.word	0x2000006c
 8003f3c:	4ba0      	ldr	r3, [pc, #640]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a9f      	ldr	r2, [pc, #636]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8003f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4b9d      	ldr	r3, [pc, #628]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a9c      	ldr	r2, [pc, #624]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8003f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d013      	beq.n	8003f84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fe fb26 	bl	80025ac <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f64:	f7fe fb22 	bl	80025ac <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	; 0x64
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e276      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f76:	4b92      	ldr	r3, [pc, #584]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x2a8>
 8003f82:	e014      	b.n	8003fae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fe fb12 	bl	80025ac <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f8c:	f7fe fb0e 	bl	80025ac <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	; 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e262      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f9e:	4b88      	ldr	r3, [pc, #544]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x2d0>
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d060      	beq.n	800407c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_OscConfig+0x310>
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d119      	bne.n	8003ffa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d116      	bne.n	8003ffa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fcc:	4b7c      	ldr	r3, [pc, #496]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x328>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e23f      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe4:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	061b      	lsls	r3, r3, #24
 8003ff2:	4973      	ldr	r1, [pc, #460]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ff8:	e040      	b.n	800407c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d023      	beq.n	800404a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004002:	4b6f      	ldr	r3, [pc, #444]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a6e      	ldr	r2, [pc, #440]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8004008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400e:	f7fe facd 	bl	80025ac <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004016:	f7fe fac9 	bl	80025ac <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e21d      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004028:	4b65      	ldr	r3, [pc, #404]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004034:	4b62      	ldr	r3, [pc, #392]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	495f      	ldr	r1, [pc, #380]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
 8004048:	e018      	b.n	800407c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404a:	4b5d      	ldr	r3, [pc, #372]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a5c      	ldr	r2, [pc, #368]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8004050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7fe faa9 	bl	80025ac <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405e:	f7fe faa5 	bl	80025ac <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e1f9      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004070:	4b53      	ldr	r3, [pc, #332]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1f0      	bne.n	800405e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d03c      	beq.n	8004102 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01c      	beq.n	80040ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004090:	4b4b      	ldr	r3, [pc, #300]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8004092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004096:	4a4a      	ldr	r2, [pc, #296]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a0:	f7fe fa84 	bl	80025ac <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a8:	f7fe fa80 	bl	80025ac <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e1d4      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040ba:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 80040bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0ef      	beq.n	80040a8 <HAL_RCC_OscConfig+0x3ec>
 80040c8:	e01b      	b.n	8004102 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ca:	4b3d      	ldr	r3, [pc, #244]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 80040cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d0:	4a3b      	ldr	r2, [pc, #236]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040da:	f7fe fa67 	bl	80025ac <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e2:	f7fe fa63 	bl	80025ac <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e1b7      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040f4:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 80040f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1ef      	bne.n	80040e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80a6 	beq.w	800425c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004110:	2300      	movs	r3, #0
 8004112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004114:	4b2a      	ldr	r3, [pc, #168]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10d      	bne.n	800413c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004120:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	4a26      	ldr	r2, [pc, #152]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8004126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412a:	6593      	str	r3, [r2, #88]	; 0x58
 800412c:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004138:	2301      	movs	r3, #1
 800413a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800413c:	4b21      	ldr	r3, [pc, #132]	; (80041c4 <HAL_RCC_OscConfig+0x508>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d118      	bne.n	800417a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004148:	4b1e      	ldr	r3, [pc, #120]	; (80041c4 <HAL_RCC_OscConfig+0x508>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1d      	ldr	r2, [pc, #116]	; (80041c4 <HAL_RCC_OscConfig+0x508>)
 800414e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004152:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004154:	f7fe fa2a 	bl	80025ac <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415c:	f7fe fa26 	bl	80025ac <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e17a      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <HAL_RCC_OscConfig+0x508>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d108      	bne.n	8004194 <HAL_RCC_OscConfig+0x4d8>
 8004182:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004188:	4a0d      	ldr	r2, [pc, #52]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004192:	e029      	b.n	80041e8 <HAL_RCC_OscConfig+0x52c>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b05      	cmp	r3, #5
 800419a:	d115      	bne.n	80041c8 <HAL_RCC_OscConfig+0x50c>
 800419c:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a2:	4a07      	ldr	r2, [pc, #28]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 80041a4:	f043 0304 	orr.w	r3, r3, #4
 80041a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ac:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b2:	4a03      	ldr	r2, [pc, #12]	; (80041c0 <HAL_RCC_OscConfig+0x504>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041bc:	e014      	b.n	80041e8 <HAL_RCC_OscConfig+0x52c>
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40007000 	.word	0x40007000
 80041c8:	4b9c      	ldr	r3, [pc, #624]	; (800443c <HAL_RCC_OscConfig+0x780>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	4a9b      	ldr	r2, [pc, #620]	; (800443c <HAL_RCC_OscConfig+0x780>)
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041d8:	4b98      	ldr	r3, [pc, #608]	; (800443c <HAL_RCC_OscConfig+0x780>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	4a97      	ldr	r2, [pc, #604]	; (800443c <HAL_RCC_OscConfig+0x780>)
 80041e0:	f023 0304 	bic.w	r3, r3, #4
 80041e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d016      	beq.n	800421e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fe f9dc 	bl	80025ac <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f6:	e00a      	b.n	800420e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f7fe f9d8 	bl	80025ac <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e12a      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800420e:	4b8b      	ldr	r3, [pc, #556]	; (800443c <HAL_RCC_OscConfig+0x780>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ed      	beq.n	80041f8 <HAL_RCC_OscConfig+0x53c>
 800421c:	e015      	b.n	800424a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fe f9c5 	bl	80025ac <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004224:	e00a      	b.n	800423c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fe f9c1 	bl	80025ac <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	; 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e113      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800423c:	4b7f      	ldr	r3, [pc, #508]	; (800443c <HAL_RCC_OscConfig+0x780>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1ed      	bne.n	8004226 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800424a:	7ffb      	ldrb	r3, [r7, #31]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d105      	bne.n	800425c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004250:	4b7a      	ldr	r3, [pc, #488]	; (800443c <HAL_RCC_OscConfig+0x780>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	4a79      	ldr	r2, [pc, #484]	; (800443c <HAL_RCC_OscConfig+0x780>)
 8004256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800425a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80fe 	beq.w	8004462 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	2b02      	cmp	r3, #2
 800426c:	f040 80d0 	bne.w	8004410 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004270:	4b72      	ldr	r3, [pc, #456]	; (800443c <HAL_RCC_OscConfig+0x780>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f003 0203 	and.w	r2, r3, #3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	429a      	cmp	r2, r3
 8004282:	d130      	bne.n	80042e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	3b01      	subs	r3, #1
 8004290:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d127      	bne.n	80042e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d11f      	bne.n	80042e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042b0:	2a07      	cmp	r2, #7
 80042b2:	bf14      	ite	ne
 80042b4:	2201      	movne	r2, #1
 80042b6:	2200      	moveq	r2, #0
 80042b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d113      	bne.n	80042e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	3b01      	subs	r3, #1
 80042cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d109      	bne.n	80042e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	085b      	lsrs	r3, r3, #1
 80042de:	3b01      	subs	r3, #1
 80042e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d06e      	beq.n	80043c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b0c      	cmp	r3, #12
 80042ea:	d069      	beq.n	80043c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042ec:	4b53      	ldr	r3, [pc, #332]	; (800443c <HAL_RCC_OscConfig+0x780>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042f8:	4b50      	ldr	r3, [pc, #320]	; (800443c <HAL_RCC_OscConfig+0x780>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0ad      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004308:	4b4c      	ldr	r3, [pc, #304]	; (800443c <HAL_RCC_OscConfig+0x780>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a4b      	ldr	r2, [pc, #300]	; (800443c <HAL_RCC_OscConfig+0x780>)
 800430e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004312:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004314:	f7fe f94a 	bl	80025ac <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431c:	f7fe f946 	bl	80025ac <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e09a      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800432e:	4b43      	ldr	r3, [pc, #268]	; (800443c <HAL_RCC_OscConfig+0x780>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800433a:	4b40      	ldr	r3, [pc, #256]	; (800443c <HAL_RCC_OscConfig+0x780>)
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	4b40      	ldr	r3, [pc, #256]	; (8004440 <HAL_RCC_OscConfig+0x784>)
 8004340:	4013      	ands	r3, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800434a:	3a01      	subs	r2, #1
 800434c:	0112      	lsls	r2, r2, #4
 800434e:	4311      	orrs	r1, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004354:	0212      	lsls	r2, r2, #8
 8004356:	4311      	orrs	r1, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800435c:	0852      	lsrs	r2, r2, #1
 800435e:	3a01      	subs	r2, #1
 8004360:	0552      	lsls	r2, r2, #21
 8004362:	4311      	orrs	r1, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004368:	0852      	lsrs	r2, r2, #1
 800436a:	3a01      	subs	r2, #1
 800436c:	0652      	lsls	r2, r2, #25
 800436e:	4311      	orrs	r1, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004374:	0912      	lsrs	r2, r2, #4
 8004376:	0452      	lsls	r2, r2, #17
 8004378:	430a      	orrs	r2, r1
 800437a:	4930      	ldr	r1, [pc, #192]	; (800443c <HAL_RCC_OscConfig+0x780>)
 800437c:	4313      	orrs	r3, r2
 800437e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004380:	4b2e      	ldr	r3, [pc, #184]	; (800443c <HAL_RCC_OscConfig+0x780>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a2d      	ldr	r2, [pc, #180]	; (800443c <HAL_RCC_OscConfig+0x780>)
 8004386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800438c:	4b2b      	ldr	r3, [pc, #172]	; (800443c <HAL_RCC_OscConfig+0x780>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a2a      	ldr	r2, [pc, #168]	; (800443c <HAL_RCC_OscConfig+0x780>)
 8004392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004396:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004398:	f7fe f908 	bl	80025ac <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe f904 	bl	80025ac <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e058      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b2:	4b22      	ldr	r3, [pc, #136]	; (800443c <HAL_RCC_OscConfig+0x780>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043be:	e050      	b.n	8004462 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e04f      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c4:	4b1d      	ldr	r3, [pc, #116]	; (800443c <HAL_RCC_OscConfig+0x780>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d148      	bne.n	8004462 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043d0:	4b1a      	ldr	r3, [pc, #104]	; (800443c <HAL_RCC_OscConfig+0x780>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a19      	ldr	r2, [pc, #100]	; (800443c <HAL_RCC_OscConfig+0x780>)
 80043d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043dc:	4b17      	ldr	r3, [pc, #92]	; (800443c <HAL_RCC_OscConfig+0x780>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4a16      	ldr	r2, [pc, #88]	; (800443c <HAL_RCC_OscConfig+0x780>)
 80043e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043e8:	f7fe f8e0 	bl	80025ac <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fe f8dc 	bl	80025ac <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e030      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004402:	4b0e      	ldr	r3, [pc, #56]	; (800443c <HAL_RCC_OscConfig+0x780>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x734>
 800440e:	e028      	b.n	8004462 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2b0c      	cmp	r3, #12
 8004414:	d023      	beq.n	800445e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <HAL_RCC_OscConfig+0x780>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a08      	ldr	r2, [pc, #32]	; (800443c <HAL_RCC_OscConfig+0x780>)
 800441c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004422:	f7fe f8c3 	bl	80025ac <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004428:	e00c      	b.n	8004444 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442a:	f7fe f8bf 	bl	80025ac <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d905      	bls.n	8004444 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e013      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
 800443c:	40021000 	.word	0x40021000
 8004440:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004444:	4b09      	ldr	r3, [pc, #36]	; (800446c <HAL_RCC_OscConfig+0x7b0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1ec      	bne.n	800442a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_RCC_OscConfig+0x7b0>)
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	4905      	ldr	r1, [pc, #20]	; (800446c <HAL_RCC_OscConfig+0x7b0>)
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_RCC_OscConfig+0x7b4>)
 8004458:	4013      	ands	r3, r2
 800445a:	60cb      	str	r3, [r1, #12]
 800445c:	e001      	b.n	8004462 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40021000 	.word	0x40021000
 8004470:	feeefffc 	.word	0xfeeefffc

08004474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0e7      	b.n	8004658 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004488:	4b75      	ldr	r3, [pc, #468]	; (8004660 <HAL_RCC_ClockConfig+0x1ec>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d910      	bls.n	80044b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b72      	ldr	r3, [pc, #456]	; (8004660 <HAL_RCC_ClockConfig+0x1ec>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f023 0207 	bic.w	r2, r3, #7
 800449e:	4970      	ldr	r1, [pc, #448]	; (8004660 <HAL_RCC_ClockConfig+0x1ec>)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a6:	4b6e      	ldr	r3, [pc, #440]	; (8004660 <HAL_RCC_ClockConfig+0x1ec>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0cf      	b.n	8004658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d010      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	4b66      	ldr	r3, [pc, #408]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d908      	bls.n	80044e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d4:	4b63      	ldr	r3, [pc, #396]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4960      	ldr	r1, [pc, #384]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d04c      	beq.n	800458c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d107      	bne.n	800450a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044fa:	4b5a      	ldr	r3, [pc, #360]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d121      	bne.n	800454a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e0a6      	b.n	8004658 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004512:	4b54      	ldr	r3, [pc, #336]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d115      	bne.n	800454a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e09a      	b.n	8004658 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800452a:	4b4e      	ldr	r3, [pc, #312]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e08e      	b.n	8004658 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800453a:	4b4a      	ldr	r3, [pc, #296]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e086      	b.n	8004658 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800454a:	4b46      	ldr	r3, [pc, #280]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f023 0203 	bic.w	r2, r3, #3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4943      	ldr	r1, [pc, #268]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 8004558:	4313      	orrs	r3, r2
 800455a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800455c:	f7fe f826 	bl	80025ac <HAL_GetTick>
 8004560:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	e00a      	b.n	800457a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004564:	f7fe f822 	bl	80025ac <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004572:	4293      	cmp	r3, r2
 8004574:	d901      	bls.n	800457a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e06e      	b.n	8004658 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457a:	4b3a      	ldr	r3, [pc, #232]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 020c 	and.w	r2, r3, #12
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	429a      	cmp	r2, r3
 800458a:	d1eb      	bne.n	8004564 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d010      	beq.n	80045ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	4b31      	ldr	r3, [pc, #196]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d208      	bcs.n	80045ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a8:	4b2e      	ldr	r3, [pc, #184]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	492b      	ldr	r1, [pc, #172]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045ba:	4b29      	ldr	r3, [pc, #164]	; (8004660 <HAL_RCC_ClockConfig+0x1ec>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d210      	bcs.n	80045ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c8:	4b25      	ldr	r3, [pc, #148]	; (8004660 <HAL_RCC_ClockConfig+0x1ec>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 0207 	bic.w	r2, r3, #7
 80045d0:	4923      	ldr	r1, [pc, #140]	; (8004660 <HAL_RCC_ClockConfig+0x1ec>)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d8:	4b21      	ldr	r3, [pc, #132]	; (8004660 <HAL_RCC_ClockConfig+0x1ec>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d001      	beq.n	80045ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e036      	b.n	8004658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d008      	beq.n	8004608 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f6:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	4918      	ldr	r1, [pc, #96]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 8004604:	4313      	orrs	r3, r2
 8004606:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d009      	beq.n	8004628 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004614:	4b13      	ldr	r3, [pc, #76]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4910      	ldr	r1, [pc, #64]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 8004624:	4313      	orrs	r3, r2
 8004626:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004628:	f000 f824 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <HAL_RCC_ClockConfig+0x1f0>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	091b      	lsrs	r3, r3, #4
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	490b      	ldr	r1, [pc, #44]	; (8004668 <HAL_RCC_ClockConfig+0x1f4>)
 800463a:	5ccb      	ldrb	r3, [r1, r3]
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
 8004644:	4a09      	ldr	r2, [pc, #36]	; (800466c <HAL_RCC_ClockConfig+0x1f8>)
 8004646:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <HAL_RCC_ClockConfig+0x1fc>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f7fc febd 	bl	80013cc <HAL_InitTick>
 8004652:	4603      	mov	r3, r0
 8004654:	72fb      	strb	r3, [r7, #11]

  return status;
 8004656:	7afb      	ldrb	r3, [r7, #11]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40022000 	.word	0x40022000
 8004664:	40021000 	.word	0x40021000
 8004668:	0800ee10 	.word	0x0800ee10
 800466c:	20000000 	.word	0x20000000
 8004670:	2000006c 	.word	0x2000006c

08004674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004674:	b480      	push	{r7}
 8004676:	b089      	sub	sp, #36	; 0x24
 8004678:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	2300      	movs	r3, #0
 8004680:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004682:	4b3e      	ldr	r3, [pc, #248]	; (800477c <HAL_RCC_GetSysClockFreq+0x108>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800468c:	4b3b      	ldr	r3, [pc, #236]	; (800477c <HAL_RCC_GetSysClockFreq+0x108>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0303 	and.w	r3, r3, #3
 8004694:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x34>
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b0c      	cmp	r3, #12
 80046a0:	d121      	bne.n	80046e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d11e      	bne.n	80046e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046a8:	4b34      	ldr	r3, [pc, #208]	; (800477c <HAL_RCC_GetSysClockFreq+0x108>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d107      	bne.n	80046c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046b4:	4b31      	ldr	r3, [pc, #196]	; (800477c <HAL_RCC_GetSysClockFreq+0x108>)
 80046b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	e005      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046c4:	4b2d      	ldr	r3, [pc, #180]	; (800477c <HAL_RCC_GetSysClockFreq+0x108>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046d0:	4a2b      	ldr	r2, [pc, #172]	; (8004780 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10d      	bne.n	80046fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046e4:	e00a      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d102      	bne.n	80046f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ec:	4b25      	ldr	r3, [pc, #148]	; (8004784 <HAL_RCC_GetSysClockFreq+0x110>)
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	e004      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d101      	bne.n	80046fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046f8:	4b23      	ldr	r3, [pc, #140]	; (8004788 <HAL_RCC_GetSysClockFreq+0x114>)
 80046fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	2b0c      	cmp	r3, #12
 8004700:	d134      	bne.n	800476c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004702:	4b1e      	ldr	r3, [pc, #120]	; (800477c <HAL_RCC_GetSysClockFreq+0x108>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d003      	beq.n	800471a <HAL_RCC_GetSysClockFreq+0xa6>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d003      	beq.n	8004720 <HAL_RCC_GetSysClockFreq+0xac>
 8004718:	e005      	b.n	8004726 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800471a:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <HAL_RCC_GetSysClockFreq+0x110>)
 800471c:	617b      	str	r3, [r7, #20]
      break;
 800471e:	e005      	b.n	800472c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004720:	4b19      	ldr	r3, [pc, #100]	; (8004788 <HAL_RCC_GetSysClockFreq+0x114>)
 8004722:	617b      	str	r3, [r7, #20]
      break;
 8004724:	e002      	b.n	800472c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	617b      	str	r3, [r7, #20]
      break;
 800472a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800472c:	4b13      	ldr	r3, [pc, #76]	; (800477c <HAL_RCC_GetSysClockFreq+0x108>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	3301      	adds	r3, #1
 8004738:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800473a:	4b10      	ldr	r3, [pc, #64]	; (800477c <HAL_RCC_GetSysClockFreq+0x108>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	fb03 f202 	mul.w	r2, r3, r2
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <HAL_RCC_GetSysClockFreq+0x108>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	0e5b      	lsrs	r3, r3, #25
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	3301      	adds	r3, #1
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	fbb2 f3f3 	udiv	r3, r2, r3
 800476a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800476c:	69bb      	ldr	r3, [r7, #24]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3724      	adds	r7, #36	; 0x24
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000
 8004780:	0800ee28 	.word	0x0800ee28
 8004784:	00f42400 	.word	0x00f42400
 8004788:	007a1200 	.word	0x007a1200

0800478c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004792:	681b      	ldr	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000000 	.word	0x20000000

080047a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047a8:	f7ff fff0 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	0a1b      	lsrs	r3, r3, #8
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	4904      	ldr	r1, [pc, #16]	; (80047cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ba:	5ccb      	ldrb	r3, [r1, r3]
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000
 80047cc:	0800ee20 	.word	0x0800ee20

080047d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047d4:	f7ff ffda 	bl	800478c <HAL_RCC_GetHCLKFreq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	0adb      	lsrs	r3, r3, #11
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	4904      	ldr	r1, [pc, #16]	; (80047f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047e6:	5ccb      	ldrb	r3, [r1, r3]
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40021000 	.word	0x40021000
 80047f8:	0800ee20 	.word	0x0800ee20

080047fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	220f      	movs	r2, #15
 800480a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800480c:	4b12      	ldr	r3, [pc, #72]	; (8004858 <HAL_RCC_GetClockConfig+0x5c>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 0203 	and.w	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004818:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <HAL_RCC_GetClockConfig+0x5c>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004824:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <HAL_RCC_GetClockConfig+0x5c>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004830:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_RCC_GetClockConfig+0x5c>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	08db      	lsrs	r3, r3, #3
 8004836:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <HAL_RCC_GetClockConfig+0x60>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0207 	and.w	r2, r3, #7
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	601a      	str	r2, [r3, #0]
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000
 800485c:	40022000 	.word	0x40022000

08004860 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800486c:	4b2a      	ldr	r3, [pc, #168]	; (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800486e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004878:	f7ff f9bc 	bl	8003bf4 <HAL_PWREx_GetVoltageRange>
 800487c:	6178      	str	r0, [r7, #20]
 800487e:	e014      	b.n	80048aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004880:	4b25      	ldr	r3, [pc, #148]	; (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	4a24      	ldr	r2, [pc, #144]	; (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800488a:	6593      	str	r3, [r2, #88]	; 0x58
 800488c:	4b22      	ldr	r3, [pc, #136]	; (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800488e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004898:	f7ff f9ac 	bl	8003bf4 <HAL_PWREx_GetVoltageRange>
 800489c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800489e:	4b1e      	ldr	r3, [pc, #120]	; (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a2:	4a1d      	ldr	r2, [pc, #116]	; (8004918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b0:	d10b      	bne.n	80048ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b80      	cmp	r3, #128	; 0x80
 80048b6:	d919      	bls.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2ba0      	cmp	r3, #160	; 0xa0
 80048bc:	d902      	bls.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048be:	2302      	movs	r3, #2
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	e013      	b.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048c4:	2301      	movs	r3, #1
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	e010      	b.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b80      	cmp	r3, #128	; 0x80
 80048ce:	d902      	bls.n	80048d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048d0:	2303      	movs	r3, #3
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	e00a      	b.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b80      	cmp	r3, #128	; 0x80
 80048da:	d102      	bne.n	80048e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048dc:	2302      	movs	r3, #2
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	e004      	b.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b70      	cmp	r3, #112	; 0x70
 80048e6:	d101      	bne.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048e8:	2301      	movs	r3, #1
 80048ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 0207 	bic.w	r2, r3, #7
 80048f4:	4909      	ldr	r1, [pc, #36]	; (800491c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048fc:	4b07      	ldr	r3, [pc, #28]	; (800491c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	d001      	beq.n	800490e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40021000 	.word	0x40021000
 800491c:	40022000 	.word	0x40022000

08004920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004928:	2300      	movs	r3, #0
 800492a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800492c:	2300      	movs	r3, #0
 800492e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004938:	2b00      	cmp	r3, #0
 800493a:	d041      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004940:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004944:	d02a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004946:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800494a:	d824      	bhi.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800494c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004950:	d008      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004952:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004956:	d81e      	bhi.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800495c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004960:	d010      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004962:	e018      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004964:	4b86      	ldr	r3, [pc, #536]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a85      	ldr	r2, [pc, #532]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800496a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004970:	e015      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fabb 	bl	8004ef4 <RCCEx_PLLSAI1_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004982:	e00c      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3320      	adds	r3, #32
 8004988:	2100      	movs	r1, #0
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fba6 	bl	80050dc <RCCEx_PLLSAI2_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004994:	e003      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	74fb      	strb	r3, [r7, #19]
      break;
 800499a:	e000      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800499c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800499e:	7cfb      	ldrb	r3, [r7, #19]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10b      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049a4:	4b76      	ldr	r3, [pc, #472]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b2:	4973      	ldr	r1, [pc, #460]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049ba:	e001      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049bc:	7cfb      	ldrb	r3, [r7, #19]
 80049be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d041      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049d4:	d02a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80049d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049da:	d824      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049e0:	d008      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049e6:	d81e      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80049ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049f0:	d010      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80049f2:	e018      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049f4:	4b62      	ldr	r3, [pc, #392]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4a61      	ldr	r2, [pc, #388]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a00:	e015      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3304      	adds	r3, #4
 8004a06:	2100      	movs	r1, #0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fa73 	bl	8004ef4 <RCCEx_PLLSAI1_Config>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a12:	e00c      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3320      	adds	r3, #32
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fb5e 	bl	80050dc <RCCEx_PLLSAI2_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a24:	e003      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	74fb      	strb	r3, [r7, #19]
      break;
 8004a2a:	e000      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a2e:	7cfb      	ldrb	r3, [r7, #19]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a34:	4b52      	ldr	r3, [pc, #328]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a42:	494f      	ldr	r1, [pc, #316]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a4a:	e001      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80a0 	beq.w	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a62:	4b47      	ldr	r3, [pc, #284]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004a72:	2300      	movs	r3, #0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00d      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a78:	4b41      	ldr	r3, [pc, #260]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	4a40      	ldr	r2, [pc, #256]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a82:	6593      	str	r3, [r2, #88]	; 0x58
 8004a84:	4b3e      	ldr	r3, [pc, #248]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a90:	2301      	movs	r3, #1
 8004a92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a94:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a3a      	ldr	r2, [pc, #232]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004aa0:	f7fd fd84 	bl	80025ac <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004aa6:	e009      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa8:	f7fd fd80 	bl	80025ac <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d902      	bls.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	74fb      	strb	r3, [r7, #19]
        break;
 8004aba:	e005      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004abc:	4b31      	ldr	r3, [pc, #196]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0ef      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d15c      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ace:	4b2c      	ldr	r3, [pc, #176]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01f      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d019      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004aec:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004af8:	4b21      	ldr	r3, [pc, #132]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afe:	4a20      	ldr	r2, [pc, #128]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b08:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b18:	4a19      	ldr	r2, [pc, #100]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d016      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2a:	f7fd fd3f 	bl	80025ac <HAL_GetTick>
 8004b2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b30:	e00b      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b32:	f7fd fd3b 	bl	80025ac <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d902      	bls.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	74fb      	strb	r3, [r7, #19]
            break;
 8004b48:	e006      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ec      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b58:	7cfb      	ldrb	r3, [r7, #19]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b5e:	4b08      	ldr	r3, [pc, #32]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b6e:	4904      	ldr	r1, [pc, #16]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b76:	e009      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	74bb      	strb	r3, [r7, #18]
 8004b7c:	e006      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004b7e:	bf00      	nop
 8004b80:	40021000 	.word	0x40021000
 8004b84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b88:	7cfb      	ldrb	r3, [r7, #19]
 8004b8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b8c:	7c7b      	ldrb	r3, [r7, #17]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d105      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b92:	4b9e      	ldr	r3, [pc, #632]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b96:	4a9d      	ldr	r2, [pc, #628]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004baa:	4b98      	ldr	r3, [pc, #608]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	f023 0203 	bic.w	r2, r3, #3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	4994      	ldr	r1, [pc, #592]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bcc:	4b8f      	ldr	r3, [pc, #572]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd2:	f023 020c 	bic.w	r2, r3, #12
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bda:	498c      	ldr	r1, [pc, #560]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bee:	4b87      	ldr	r3, [pc, #540]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	4983      	ldr	r1, [pc, #524]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c10:	4b7e      	ldr	r3, [pc, #504]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1e:	497b      	ldr	r1, [pc, #492]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c32:	4b76      	ldr	r3, [pc, #472]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c40:	4972      	ldr	r1, [pc, #456]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c54:	4b6d      	ldr	r3, [pc, #436]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c62:	496a      	ldr	r1, [pc, #424]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c76:	4b65      	ldr	r3, [pc, #404]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c84:	4961      	ldr	r1, [pc, #388]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c98:	4b5c      	ldr	r3, [pc, #368]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca6:	4959      	ldr	r1, [pc, #356]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cba:	4b54      	ldr	r3, [pc, #336]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc8:	4950      	ldr	r1, [pc, #320]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cdc:	4b4b      	ldr	r3, [pc, #300]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cea:	4948      	ldr	r1, [pc, #288]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cfe:	4b43      	ldr	r3, [pc, #268]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	493f      	ldr	r1, [pc, #252]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d028      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d20:	4b3a      	ldr	r3, [pc, #232]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d2e:	4937      	ldr	r1, [pc, #220]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d3e:	d106      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d40:	4b32      	ldr	r3, [pc, #200]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	4a31      	ldr	r2, [pc, #196]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d4a:	60d3      	str	r3, [r2, #12]
 8004d4c:	e011      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d56:	d10c      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 f8c8 	bl	8004ef4 <RCCEx_PLLSAI1_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d68:	7cfb      	ldrb	r3, [r7, #19]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004d6e:	7cfb      	ldrb	r3, [r7, #19]
 8004d70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d028      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d7e:	4b23      	ldr	r3, [pc, #140]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8c:	491f      	ldr	r1, [pc, #124]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d9c:	d106      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	4a1a      	ldr	r2, [pc, #104]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004da8:	60d3      	str	r3, [r2, #12]
 8004daa:	e011      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004db4:	d10c      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3304      	adds	r3, #4
 8004dba:	2101      	movs	r1, #1
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 f899 	bl	8004ef4 <RCCEx_PLLSAI1_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dc6:	7cfb      	ldrb	r3, [r7, #19]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d02b      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dea:	4908      	ldr	r1, [pc, #32]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dfa:	d109      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dfc:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4a02      	ldr	r2, [pc, #8]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e06:	60d3      	str	r3, [r2, #12]
 8004e08:	e014      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e0a:	bf00      	nop
 8004e0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	2101      	movs	r1, #1
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 f867 	bl	8004ef4 <RCCEx_PLLSAI1_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e2a:	7cfb      	ldrb	r3, [r7, #19]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e30:	7cfb      	ldrb	r3, [r7, #19]
 8004e32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d02f      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e40:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e4e:	4928      	ldr	r1, [pc, #160]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e5e:	d10d      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	2102      	movs	r1, #2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 f844 	bl	8004ef4 <RCCEx_PLLSAI1_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e70:	7cfb      	ldrb	r3, [r7, #19]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d014      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e76:	7cfb      	ldrb	r3, [r7, #19]
 8004e78:	74bb      	strb	r3, [r7, #18]
 8004e7a:	e011      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3320      	adds	r3, #32
 8004e8a:	2102      	movs	r1, #2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 f925 	bl	80050dc <RCCEx_PLLSAI2_Config>
 8004e92:	4603      	mov	r3, r0
 8004e94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e96:	7cfb      	ldrb	r3, [r7, #19]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e9c:	7cfb      	ldrb	r3, [r7, #19]
 8004e9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004eac:	4b10      	ldr	r3, [pc, #64]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eba:	490d      	ldr	r1, [pc, #52]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ece:	4b08      	ldr	r3, [pc, #32]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ede:	4904      	ldr	r1, [pc, #16]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ee6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40021000 	.word	0x40021000

08004ef4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f02:	4b75      	ldr	r3, [pc, #468]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d018      	beq.n	8004f40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f0e:	4b72      	ldr	r3, [pc, #456]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0203 	and.w	r2, r3, #3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d10d      	bne.n	8004f3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
       ||
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d009      	beq.n	8004f3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f26:	4b6c      	ldr	r3, [pc, #432]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
       ||
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d047      	beq.n	8004fca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
 8004f3e:	e044      	b.n	8004fca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d018      	beq.n	8004f7a <RCCEx_PLLSAI1_Config+0x86>
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d825      	bhi.n	8004f98 <RCCEx_PLLSAI1_Config+0xa4>
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d002      	beq.n	8004f56 <RCCEx_PLLSAI1_Config+0x62>
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d009      	beq.n	8004f68 <RCCEx_PLLSAI1_Config+0x74>
 8004f54:	e020      	b.n	8004f98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f56:	4b60      	ldr	r3, [pc, #384]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d11d      	bne.n	8004f9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f66:	e01a      	b.n	8004f9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f68:	4b5b      	ldr	r3, [pc, #364]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d116      	bne.n	8004fa2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f78:	e013      	b.n	8004fa2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f7a:	4b57      	ldr	r3, [pc, #348]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10f      	bne.n	8004fa6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f86:	4b54      	ldr	r3, [pc, #336]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f96:	e006      	b.n	8004fa6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f9c:	e004      	b.n	8004fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f9e:	bf00      	nop
 8004fa0:	e002      	b.n	8004fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fa2:	bf00      	nop
 8004fa4:	e000      	b.n	8004fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10d      	bne.n	8004fca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fae:	4b4a      	ldr	r3, [pc, #296]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6819      	ldr	r1, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	430b      	orrs	r3, r1
 8004fc4:	4944      	ldr	r1, [pc, #272]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d17d      	bne.n	80050cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fd0:	4b41      	ldr	r3, [pc, #260]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a40      	ldr	r2, [pc, #256]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fdc:	f7fd fae6 	bl	80025ac <HAL_GetTick>
 8004fe0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fe2:	e009      	b.n	8004ff8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fe4:	f7fd fae2 	bl	80025ac <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d902      	bls.n	8004ff8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ff6:	e005      	b.n	8005004 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ff8:	4b37      	ldr	r3, [pc, #220]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1ef      	bne.n	8004fe4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d160      	bne.n	80050cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d111      	bne.n	8005034 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005010:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6892      	ldr	r2, [r2, #8]
 8005020:	0211      	lsls	r1, r2, #8
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68d2      	ldr	r2, [r2, #12]
 8005026:	0912      	lsrs	r2, r2, #4
 8005028:	0452      	lsls	r2, r2, #17
 800502a:	430a      	orrs	r2, r1
 800502c:	492a      	ldr	r1, [pc, #168]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800502e:	4313      	orrs	r3, r2
 8005030:	610b      	str	r3, [r1, #16]
 8005032:	e027      	b.n	8005084 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d112      	bne.n	8005060 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800503a:	4b27      	ldr	r3, [pc, #156]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005042:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6892      	ldr	r2, [r2, #8]
 800504a:	0211      	lsls	r1, r2, #8
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6912      	ldr	r2, [r2, #16]
 8005050:	0852      	lsrs	r2, r2, #1
 8005052:	3a01      	subs	r2, #1
 8005054:	0552      	lsls	r2, r2, #21
 8005056:	430a      	orrs	r2, r1
 8005058:	491f      	ldr	r1, [pc, #124]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800505a:	4313      	orrs	r3, r2
 800505c:	610b      	str	r3, [r1, #16]
 800505e:	e011      	b.n	8005084 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005068:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6892      	ldr	r2, [r2, #8]
 8005070:	0211      	lsls	r1, r2, #8
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6952      	ldr	r2, [r2, #20]
 8005076:	0852      	lsrs	r2, r2, #1
 8005078:	3a01      	subs	r2, #1
 800507a:	0652      	lsls	r2, r2, #25
 800507c:	430a      	orrs	r2, r1
 800507e:	4916      	ldr	r1, [pc, #88]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005080:	4313      	orrs	r3, r2
 8005082:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005084:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800508a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800508e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005090:	f7fd fa8c 	bl	80025ac <HAL_GetTick>
 8005094:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005096:	e009      	b.n	80050ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005098:	f7fd fa88 	bl	80025ac <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d902      	bls.n	80050ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	73fb      	strb	r3, [r7, #15]
          break;
 80050aa:	e005      	b.n	80050b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ef      	beq.n	8005098 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	4904      	ldr	r1, [pc, #16]	; (80050d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40021000 	.word	0x40021000

080050dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050ea:	4b6a      	ldr	r3, [pc, #424]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d018      	beq.n	8005128 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80050f6:	4b67      	ldr	r3, [pc, #412]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f003 0203 	and.w	r2, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d10d      	bne.n	8005122 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
       ||
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800510e:	4b61      	ldr	r3, [pc, #388]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	091b      	lsrs	r3, r3, #4
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
       ||
 800511e:	429a      	cmp	r2, r3
 8005120:	d047      	beq.n	80051b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	73fb      	strb	r3, [r7, #15]
 8005126:	e044      	b.n	80051b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b03      	cmp	r3, #3
 800512e:	d018      	beq.n	8005162 <RCCEx_PLLSAI2_Config+0x86>
 8005130:	2b03      	cmp	r3, #3
 8005132:	d825      	bhi.n	8005180 <RCCEx_PLLSAI2_Config+0xa4>
 8005134:	2b01      	cmp	r3, #1
 8005136:	d002      	beq.n	800513e <RCCEx_PLLSAI2_Config+0x62>
 8005138:	2b02      	cmp	r3, #2
 800513a:	d009      	beq.n	8005150 <RCCEx_PLLSAI2_Config+0x74>
 800513c:	e020      	b.n	8005180 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800513e:	4b55      	ldr	r3, [pc, #340]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d11d      	bne.n	8005186 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800514e:	e01a      	b.n	8005186 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005150:	4b50      	ldr	r3, [pc, #320]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005158:	2b00      	cmp	r3, #0
 800515a:	d116      	bne.n	800518a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005160:	e013      	b.n	800518a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005162:	4b4c      	ldr	r3, [pc, #304]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10f      	bne.n	800518e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800516e:	4b49      	ldr	r3, [pc, #292]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800517e:	e006      	b.n	800518e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
      break;
 8005184:	e004      	b.n	8005190 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005186:	bf00      	nop
 8005188:	e002      	b.n	8005190 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800518a:	bf00      	nop
 800518c:	e000      	b.n	8005190 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800518e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005190:	7bfb      	ldrb	r3, [r7, #15]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10d      	bne.n	80051b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005196:	4b3f      	ldr	r3, [pc, #252]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6819      	ldr	r1, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	430b      	orrs	r3, r1
 80051ac:	4939      	ldr	r1, [pc, #228]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d167      	bne.n	8005288 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051b8:	4b36      	ldr	r3, [pc, #216]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a35      	ldr	r2, [pc, #212]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051c4:	f7fd f9f2 	bl	80025ac <HAL_GetTick>
 80051c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051ca:	e009      	b.n	80051e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051cc:	f7fd f9ee 	bl	80025ac <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d902      	bls.n	80051e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	73fb      	strb	r3, [r7, #15]
        break;
 80051de:	e005      	b.n	80051ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051e0:	4b2c      	ldr	r3, [pc, #176]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1ef      	bne.n	80051cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d14a      	bne.n	8005288 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d111      	bne.n	800521c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051f8:	4b26      	ldr	r3, [pc, #152]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6892      	ldr	r2, [r2, #8]
 8005208:	0211      	lsls	r1, r2, #8
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68d2      	ldr	r2, [r2, #12]
 800520e:	0912      	lsrs	r2, r2, #4
 8005210:	0452      	lsls	r2, r2, #17
 8005212:	430a      	orrs	r2, r1
 8005214:	491f      	ldr	r1, [pc, #124]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005216:	4313      	orrs	r3, r2
 8005218:	614b      	str	r3, [r1, #20]
 800521a:	e011      	b.n	8005240 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800521c:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005224:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6892      	ldr	r2, [r2, #8]
 800522c:	0211      	lsls	r1, r2, #8
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6912      	ldr	r2, [r2, #16]
 8005232:	0852      	lsrs	r2, r2, #1
 8005234:	3a01      	subs	r2, #1
 8005236:	0652      	lsls	r2, r2, #25
 8005238:	430a      	orrs	r2, r1
 800523a:	4916      	ldr	r1, [pc, #88]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800523c:	4313      	orrs	r3, r2
 800523e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005240:	4b14      	ldr	r3, [pc, #80]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a13      	ldr	r2, [pc, #76]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524c:	f7fd f9ae 	bl	80025ac <HAL_GetTick>
 8005250:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005252:	e009      	b.n	8005268 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005254:	f7fd f9aa 	bl	80025ac <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d902      	bls.n	8005268 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	73fb      	strb	r3, [r7, #15]
          break;
 8005266:	e005      	b.n	8005274 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005268:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0ef      	beq.n	8005254 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800527a:	4b06      	ldr	r3, [pc, #24]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800527c:	695a      	ldr	r2, [r3, #20]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	4904      	ldr	r1, [pc, #16]	; (8005294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005284:	4313      	orrs	r3, r2
 8005286:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005288:	7bfb      	ldrb	r3, [r7, #15]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40021000 	.word	0x40021000

08005298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e049      	b.n	800533e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f841 	bl	8005346 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4619      	mov	r1, r3
 80052d6:	4610      	mov	r0, r2
 80052d8:	f000 fc6a 	bl	8005bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	d001      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e04f      	b.n	8005414 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a23      	ldr	r2, [pc, #140]	; (8005420 <HAL_TIM_Base_Start_IT+0xc4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d01d      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539e:	d018      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1f      	ldr	r2, [pc, #124]	; (8005424 <HAL_TIM_Base_Start_IT+0xc8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1e      	ldr	r2, [pc, #120]	; (8005428 <HAL_TIM_Base_Start_IT+0xcc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00e      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1c      	ldr	r2, [pc, #112]	; (800542c <HAL_TIM_Base_Start_IT+0xd0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1b      	ldr	r2, [pc, #108]	; (8005430 <HAL_TIM_Base_Start_IT+0xd4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_TIM_Base_Start_IT+0x76>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a19      	ldr	r2, [pc, #100]	; (8005434 <HAL_TIM_Base_Start_IT+0xd8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d115      	bne.n	80053fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	4b17      	ldr	r3, [pc, #92]	; (8005438 <HAL_TIM_Base_Start_IT+0xdc>)
 80053da:	4013      	ands	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b06      	cmp	r3, #6
 80053e2:	d015      	beq.n	8005410 <HAL_TIM_Base_Start_IT+0xb4>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ea:	d011      	beq.n	8005410 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fc:	e008      	b.n	8005410 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0201 	orr.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e000      	b.n	8005412 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005410:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40013400 	.word	0x40013400
 8005434:	40014000 	.word	0x40014000
 8005438:	00010007 	.word	0x00010007

0800543c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e049      	b.n	80054e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fc f99c 	bl	80017a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3304      	adds	r3, #4
 8005478:	4619      	mov	r1, r3
 800547a:	4610      	mov	r0, r2
 800547c:	f000 fb98 	bl	8005bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d109      	bne.n	8005510 <HAL_TIM_PWM_Start+0x24>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e03c      	b.n	800558a <HAL_TIM_PWM_Start+0x9e>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b04      	cmp	r3, #4
 8005514:	d109      	bne.n	800552a <HAL_TIM_PWM_Start+0x3e>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b01      	cmp	r3, #1
 8005520:	bf14      	ite	ne
 8005522:	2301      	movne	r3, #1
 8005524:	2300      	moveq	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	e02f      	b.n	800558a <HAL_TIM_PWM_Start+0x9e>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b08      	cmp	r3, #8
 800552e:	d109      	bne.n	8005544 <HAL_TIM_PWM_Start+0x58>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	bf14      	ite	ne
 800553c:	2301      	movne	r3, #1
 800553e:	2300      	moveq	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	e022      	b.n	800558a <HAL_TIM_PWM_Start+0x9e>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2b0c      	cmp	r3, #12
 8005548:	d109      	bne.n	800555e <HAL_TIM_PWM_Start+0x72>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b01      	cmp	r3, #1
 8005554:	bf14      	ite	ne
 8005556:	2301      	movne	r3, #1
 8005558:	2300      	moveq	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	e015      	b.n	800558a <HAL_TIM_PWM_Start+0x9e>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b10      	cmp	r3, #16
 8005562:	d109      	bne.n	8005578 <HAL_TIM_PWM_Start+0x8c>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	bf14      	ite	ne
 8005570:	2301      	movne	r3, #1
 8005572:	2300      	moveq	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	e008      	b.n	800558a <HAL_TIM_PWM_Start+0x9e>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b01      	cmp	r3, #1
 8005582:	bf14      	ite	ne
 8005584:	2301      	movne	r3, #1
 8005586:	2300      	moveq	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e09c      	b.n	80056cc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d104      	bne.n	80055a2 <HAL_TIM_PWM_Start+0xb6>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055a0:	e023      	b.n	80055ea <HAL_TIM_PWM_Start+0xfe>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d104      	bne.n	80055b2 <HAL_TIM_PWM_Start+0xc6>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055b0:	e01b      	b.n	80055ea <HAL_TIM_PWM_Start+0xfe>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d104      	bne.n	80055c2 <HAL_TIM_PWM_Start+0xd6>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055c0:	e013      	b.n	80055ea <HAL_TIM_PWM_Start+0xfe>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b0c      	cmp	r3, #12
 80055c6:	d104      	bne.n	80055d2 <HAL_TIM_PWM_Start+0xe6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055d0:	e00b      	b.n	80055ea <HAL_TIM_PWM_Start+0xfe>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b10      	cmp	r3, #16
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_PWM_Start+0xf6>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055e0:	e003      	b.n	80055ea <HAL_TIM_PWM_Start+0xfe>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2201      	movs	r2, #1
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fe4c 	bl	8006290 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a35      	ldr	r2, [pc, #212]	; (80056d4 <HAL_TIM_PWM_Start+0x1e8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d013      	beq.n	800562a <HAL_TIM_PWM_Start+0x13e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a34      	ldr	r2, [pc, #208]	; (80056d8 <HAL_TIM_PWM_Start+0x1ec>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <HAL_TIM_PWM_Start+0x13e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a32      	ldr	r2, [pc, #200]	; (80056dc <HAL_TIM_PWM_Start+0x1f0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_TIM_PWM_Start+0x13e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a31      	ldr	r2, [pc, #196]	; (80056e0 <HAL_TIM_PWM_Start+0x1f4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_TIM_PWM_Start+0x13e>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a2f      	ldr	r2, [pc, #188]	; (80056e4 <HAL_TIM_PWM_Start+0x1f8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d101      	bne.n	800562e <HAL_TIM_PWM_Start+0x142>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <HAL_TIM_PWM_Start+0x144>
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d007      	beq.n	8005644 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005642:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a22      	ldr	r2, [pc, #136]	; (80056d4 <HAL_TIM_PWM_Start+0x1e8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01d      	beq.n	800568a <HAL_TIM_PWM_Start+0x19e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005656:	d018      	beq.n	800568a <HAL_TIM_PWM_Start+0x19e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a22      	ldr	r2, [pc, #136]	; (80056e8 <HAL_TIM_PWM_Start+0x1fc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <HAL_TIM_PWM_Start+0x19e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a21      	ldr	r2, [pc, #132]	; (80056ec <HAL_TIM_PWM_Start+0x200>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00e      	beq.n	800568a <HAL_TIM_PWM_Start+0x19e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1f      	ldr	r2, [pc, #124]	; (80056f0 <HAL_TIM_PWM_Start+0x204>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d009      	beq.n	800568a <HAL_TIM_PWM_Start+0x19e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <HAL_TIM_PWM_Start+0x1ec>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_TIM_PWM_Start+0x19e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a15      	ldr	r2, [pc, #84]	; (80056dc <HAL_TIM_PWM_Start+0x1f0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d115      	bne.n	80056b6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	4b18      	ldr	r3, [pc, #96]	; (80056f4 <HAL_TIM_PWM_Start+0x208>)
 8005692:	4013      	ands	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b06      	cmp	r3, #6
 800569a:	d015      	beq.n	80056c8 <HAL_TIM_PWM_Start+0x1dc>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a2:	d011      	beq.n	80056c8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b4:	e008      	b.n	80056c8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0201 	orr.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	e000      	b.n	80056ca <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40013400 	.word	0x40013400
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40014400 	.word	0x40014400
 80056e4:	40014800 	.word	0x40014800
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800
 80056f0:	40000c00 	.word	0x40000c00
 80056f4:	00010007 	.word	0x00010007

080056f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b02      	cmp	r3, #2
 800570c:	d122      	bne.n	8005754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b02      	cmp	r3, #2
 800571a:	d11b      	bne.n	8005754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0202 	mvn.w	r2, #2
 8005724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fa1a 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
 8005740:	e005      	b.n	800574e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa0c 	bl	8005b60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fa1d 	bl	8005b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b04      	cmp	r3, #4
 8005760:	d122      	bne.n	80057a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b04      	cmp	r3, #4
 800576e:	d11b      	bne.n	80057a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0204 	mvn.w	r2, #4
 8005778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f9f0 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
 8005794:	e005      	b.n	80057a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f9e2 	bl	8005b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f9f3 	bl	8005b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d122      	bne.n	80057fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d11b      	bne.n	80057fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0208 	mvn.w	r2, #8
 80057cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2204      	movs	r2, #4
 80057d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f9c6 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
 80057e8:	e005      	b.n	80057f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f9b8 	bl	8005b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f9c9 	bl	8005b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0310 	and.w	r3, r3, #16
 8005806:	2b10      	cmp	r3, #16
 8005808:	d122      	bne.n	8005850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0310 	and.w	r3, r3, #16
 8005814:	2b10      	cmp	r3, #16
 8005816:	d11b      	bne.n	8005850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0210 	mvn.w	r2, #16
 8005820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2208      	movs	r2, #8
 8005826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f99c 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
 800583c:	e005      	b.n	800584a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f98e 	bl	8005b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f99f 	bl	8005b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b01      	cmp	r3, #1
 800585c:	d10e      	bne.n	800587c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b01      	cmp	r3, #1
 800586a:	d107      	bne.n	800587c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0201 	mvn.w	r2, #1
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fb fd68 	bl	800134c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005886:	2b80      	cmp	r3, #128	; 0x80
 8005888:	d10e      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005894:	2b80      	cmp	r3, #128	; 0x80
 8005896:	d107      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fdac 	bl	8006400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b6:	d10e      	bne.n	80058d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b80      	cmp	r3, #128	; 0x80
 80058c4:	d107      	bne.n	80058d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80058ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fd9f 	bl	8006414 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d10e      	bne.n	8005902 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b40      	cmp	r3, #64	; 0x40
 80058f0:	d107      	bne.n	8005902 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f94d 	bl	8005b9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b20      	cmp	r3, #32
 800590e:	d10e      	bne.n	800592e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b20      	cmp	r3, #32
 800591c:	d107      	bne.n	800592e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f06f 0220 	mvn.w	r2, #32
 8005926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fd5f 	bl	80063ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800592e:	bf00      	nop
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005952:	2302      	movs	r3, #2
 8005954:	e0ff      	b.n	8005b56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b14      	cmp	r3, #20
 8005962:	f200 80f0 	bhi.w	8005b46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005966:	a201      	add	r2, pc, #4	; (adr r2, 800596c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	080059c1 	.word	0x080059c1
 8005970:	08005b47 	.word	0x08005b47
 8005974:	08005b47 	.word	0x08005b47
 8005978:	08005b47 	.word	0x08005b47
 800597c:	08005a01 	.word	0x08005a01
 8005980:	08005b47 	.word	0x08005b47
 8005984:	08005b47 	.word	0x08005b47
 8005988:	08005b47 	.word	0x08005b47
 800598c:	08005a43 	.word	0x08005a43
 8005990:	08005b47 	.word	0x08005b47
 8005994:	08005b47 	.word	0x08005b47
 8005998:	08005b47 	.word	0x08005b47
 800599c:	08005a83 	.word	0x08005a83
 80059a0:	08005b47 	.word	0x08005b47
 80059a4:	08005b47 	.word	0x08005b47
 80059a8:	08005b47 	.word	0x08005b47
 80059ac:	08005ac5 	.word	0x08005ac5
 80059b0:	08005b47 	.word	0x08005b47
 80059b4:	08005b47 	.word	0x08005b47
 80059b8:	08005b47 	.word	0x08005b47
 80059bc:	08005b05 	.word	0x08005b05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 f98c 	bl	8005ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0208 	orr.w	r2, r2, #8
 80059da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0204 	bic.w	r2, r2, #4
 80059ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6999      	ldr	r1, [r3, #24]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	691a      	ldr	r2, [r3, #16]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	619a      	str	r2, [r3, #24]
      break;
 80059fe:	e0a5      	b.n	8005b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f9fc 	bl	8005e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699a      	ldr	r2, [r3, #24]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6999      	ldr	r1, [r3, #24]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	021a      	lsls	r2, r3, #8
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	619a      	str	r2, [r3, #24]
      break;
 8005a40:	e084      	b.n	8005b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 fa65 	bl	8005f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f042 0208 	orr.w	r2, r2, #8
 8005a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69da      	ldr	r2, [r3, #28]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0204 	bic.w	r2, r2, #4
 8005a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69d9      	ldr	r1, [r3, #28]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	61da      	str	r2, [r3, #28]
      break;
 8005a80:	e064      	b.n	8005b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 facd 	bl	8006028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69da      	ldr	r2, [r3, #28]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69d9      	ldr	r1, [r3, #28]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	021a      	lsls	r2, r3, #8
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	61da      	str	r2, [r3, #28]
      break;
 8005ac2:	e043      	b.n	8005b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fb16 	bl	80060fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0208 	orr.w	r2, r2, #8
 8005ade:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0204 	bic.w	r2, r2, #4
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b02:	e023      	b.n	8005b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fb5a 	bl	80061c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	021a      	lsls	r2, r3, #8
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b44:	e002      	b.n	8005b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	75fb      	strb	r3, [r7, #23]
      break;
 8005b4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop

08005b60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a40      	ldr	r2, [pc, #256]	; (8005cc4 <TIM_Base_SetConfig+0x114>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d013      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bce:	d00f      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a3d      	ldr	r2, [pc, #244]	; (8005cc8 <TIM_Base_SetConfig+0x118>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00b      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a3c      	ldr	r2, [pc, #240]	; (8005ccc <TIM_Base_SetConfig+0x11c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3b      	ldr	r2, [pc, #236]	; (8005cd0 <TIM_Base_SetConfig+0x120>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3a      	ldr	r2, [pc, #232]	; (8005cd4 <TIM_Base_SetConfig+0x124>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d108      	bne.n	8005c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a2f      	ldr	r2, [pc, #188]	; (8005cc4 <TIM_Base_SetConfig+0x114>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d01f      	beq.n	8005c4a <TIM_Base_SetConfig+0x9a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c10:	d01b      	beq.n	8005c4a <TIM_Base_SetConfig+0x9a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2c      	ldr	r2, [pc, #176]	; (8005cc8 <TIM_Base_SetConfig+0x118>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d017      	beq.n	8005c4a <TIM_Base_SetConfig+0x9a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a2b      	ldr	r2, [pc, #172]	; (8005ccc <TIM_Base_SetConfig+0x11c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d013      	beq.n	8005c4a <TIM_Base_SetConfig+0x9a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2a      	ldr	r2, [pc, #168]	; (8005cd0 <TIM_Base_SetConfig+0x120>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00f      	beq.n	8005c4a <TIM_Base_SetConfig+0x9a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a29      	ldr	r2, [pc, #164]	; (8005cd4 <TIM_Base_SetConfig+0x124>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00b      	beq.n	8005c4a <TIM_Base_SetConfig+0x9a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a28      	ldr	r2, [pc, #160]	; (8005cd8 <TIM_Base_SetConfig+0x128>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d007      	beq.n	8005c4a <TIM_Base_SetConfig+0x9a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a27      	ldr	r2, [pc, #156]	; (8005cdc <TIM_Base_SetConfig+0x12c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d003      	beq.n	8005c4a <TIM_Base_SetConfig+0x9a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a26      	ldr	r2, [pc, #152]	; (8005ce0 <TIM_Base_SetConfig+0x130>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d108      	bne.n	8005c5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a10      	ldr	r2, [pc, #64]	; (8005cc4 <TIM_Base_SetConfig+0x114>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00f      	beq.n	8005ca8 <TIM_Base_SetConfig+0xf8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a12      	ldr	r2, [pc, #72]	; (8005cd4 <TIM_Base_SetConfig+0x124>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00b      	beq.n	8005ca8 <TIM_Base_SetConfig+0xf8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a11      	ldr	r2, [pc, #68]	; (8005cd8 <TIM_Base_SetConfig+0x128>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d007      	beq.n	8005ca8 <TIM_Base_SetConfig+0xf8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a10      	ldr	r2, [pc, #64]	; (8005cdc <TIM_Base_SetConfig+0x12c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_Base_SetConfig+0xf8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a0f      	ldr	r2, [pc, #60]	; (8005ce0 <TIM_Base_SetConfig+0x130>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d103      	bne.n	8005cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	615a      	str	r2, [r3, #20]
}
 8005cb6:	bf00      	nop
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40012c00 	.word	0x40012c00
 8005cc8:	40000400 	.word	0x40000400
 8005ccc:	40000800 	.word	0x40000800
 8005cd0:	40000c00 	.word	0x40000c00
 8005cd4:	40013400 	.word	0x40013400
 8005cd8:	40014000 	.word	0x40014000
 8005cdc:	40014400 	.word	0x40014400
 8005ce0:	40014800 	.word	0x40014800

08005ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f023 0201 	bic.w	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f023 0302 	bic.w	r3, r3, #2
 8005d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a2c      	ldr	r2, [pc, #176]	; (8005df0 <TIM_OC1_SetConfig+0x10c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00f      	beq.n	8005d64 <TIM_OC1_SetConfig+0x80>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a2b      	ldr	r2, [pc, #172]	; (8005df4 <TIM_OC1_SetConfig+0x110>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00b      	beq.n	8005d64 <TIM_OC1_SetConfig+0x80>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a2a      	ldr	r2, [pc, #168]	; (8005df8 <TIM_OC1_SetConfig+0x114>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d007      	beq.n	8005d64 <TIM_OC1_SetConfig+0x80>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a29      	ldr	r2, [pc, #164]	; (8005dfc <TIM_OC1_SetConfig+0x118>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d003      	beq.n	8005d64 <TIM_OC1_SetConfig+0x80>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a28      	ldr	r2, [pc, #160]	; (8005e00 <TIM_OC1_SetConfig+0x11c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d10c      	bne.n	8005d7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f023 0308 	bic.w	r3, r3, #8
 8005d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 0304 	bic.w	r3, r3, #4
 8005d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <TIM_OC1_SetConfig+0x10c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00f      	beq.n	8005da6 <TIM_OC1_SetConfig+0xc2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a1a      	ldr	r2, [pc, #104]	; (8005df4 <TIM_OC1_SetConfig+0x110>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00b      	beq.n	8005da6 <TIM_OC1_SetConfig+0xc2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a19      	ldr	r2, [pc, #100]	; (8005df8 <TIM_OC1_SetConfig+0x114>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d007      	beq.n	8005da6 <TIM_OC1_SetConfig+0xc2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a18      	ldr	r2, [pc, #96]	; (8005dfc <TIM_OC1_SetConfig+0x118>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d003      	beq.n	8005da6 <TIM_OC1_SetConfig+0xc2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a17      	ldr	r2, [pc, #92]	; (8005e00 <TIM_OC1_SetConfig+0x11c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d111      	bne.n	8005dca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	621a      	str	r2, [r3, #32]
}
 8005de4:	bf00      	nop
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40013400 	.word	0x40013400
 8005df8:	40014000 	.word	0x40014000
 8005dfc:	40014400 	.word	0x40014400
 8005e00:	40014800 	.word	0x40014800

08005e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f023 0210 	bic.w	r2, r3, #16
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0320 	bic.w	r3, r3, #32
 8005e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a28      	ldr	r2, [pc, #160]	; (8005f04 <TIM_OC2_SetConfig+0x100>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_OC2_SetConfig+0x6c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a27      	ldr	r2, [pc, #156]	; (8005f08 <TIM_OC2_SetConfig+0x104>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10d      	bne.n	8005e8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a1d      	ldr	r2, [pc, #116]	; (8005f04 <TIM_OC2_SetConfig+0x100>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00f      	beq.n	8005eb4 <TIM_OC2_SetConfig+0xb0>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a1c      	ldr	r2, [pc, #112]	; (8005f08 <TIM_OC2_SetConfig+0x104>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00b      	beq.n	8005eb4 <TIM_OC2_SetConfig+0xb0>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a1b      	ldr	r2, [pc, #108]	; (8005f0c <TIM_OC2_SetConfig+0x108>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d007      	beq.n	8005eb4 <TIM_OC2_SetConfig+0xb0>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a1a      	ldr	r2, [pc, #104]	; (8005f10 <TIM_OC2_SetConfig+0x10c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_OC2_SetConfig+0xb0>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a19      	ldr	r2, [pc, #100]	; (8005f14 <TIM_OC2_SetConfig+0x110>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d113      	bne.n	8005edc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	621a      	str	r2, [r3, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40012c00 	.word	0x40012c00
 8005f08:	40013400 	.word	0x40013400
 8005f0c:	40014000 	.word	0x40014000
 8005f10:	40014400 	.word	0x40014400
 8005f14:	40014800 	.word	0x40014800

08005f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	021b      	lsls	r3, r3, #8
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a27      	ldr	r2, [pc, #156]	; (8006014 <TIM_OC3_SetConfig+0xfc>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d003      	beq.n	8005f82 <TIM_OC3_SetConfig+0x6a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a26      	ldr	r2, [pc, #152]	; (8006018 <TIM_OC3_SetConfig+0x100>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d10d      	bne.n	8005f9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a1c      	ldr	r2, [pc, #112]	; (8006014 <TIM_OC3_SetConfig+0xfc>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00f      	beq.n	8005fc6 <TIM_OC3_SetConfig+0xae>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a1b      	ldr	r2, [pc, #108]	; (8006018 <TIM_OC3_SetConfig+0x100>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <TIM_OC3_SetConfig+0xae>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1a      	ldr	r2, [pc, #104]	; (800601c <TIM_OC3_SetConfig+0x104>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_OC3_SetConfig+0xae>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a19      	ldr	r2, [pc, #100]	; (8006020 <TIM_OC3_SetConfig+0x108>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_OC3_SetConfig+0xae>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a18      	ldr	r2, [pc, #96]	; (8006024 <TIM_OC3_SetConfig+0x10c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d113      	bne.n	8005fee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	621a      	str	r2, [r3, #32]
}
 8006008:	bf00      	nop
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	40012c00 	.word	0x40012c00
 8006018:	40013400 	.word	0x40013400
 800601c:	40014000 	.word	0x40014000
 8006020:	40014400 	.word	0x40014400
 8006024:	40014800 	.word	0x40014800

08006028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	021b      	lsls	r3, r3, #8
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	031b      	lsls	r3, r3, #12
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <TIM_OC4_SetConfig+0xc0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00f      	beq.n	80060ac <TIM_OC4_SetConfig+0x84>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a17      	ldr	r2, [pc, #92]	; (80060ec <TIM_OC4_SetConfig+0xc4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00b      	beq.n	80060ac <TIM_OC4_SetConfig+0x84>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a16      	ldr	r2, [pc, #88]	; (80060f0 <TIM_OC4_SetConfig+0xc8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d007      	beq.n	80060ac <TIM_OC4_SetConfig+0x84>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <TIM_OC4_SetConfig+0xcc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_OC4_SetConfig+0x84>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a14      	ldr	r2, [pc, #80]	; (80060f8 <TIM_OC4_SetConfig+0xd0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d109      	bne.n	80060c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	019b      	lsls	r3, r3, #6
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40013400 	.word	0x40013400
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40014400 	.word	0x40014400
 80060f8:	40014800 	.word	0x40014800

080060fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800612a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006140:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	041b      	lsls	r3, r3, #16
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a17      	ldr	r2, [pc, #92]	; (80061b0 <TIM_OC5_SetConfig+0xb4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00f      	beq.n	8006176 <TIM_OC5_SetConfig+0x7a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a16      	ldr	r2, [pc, #88]	; (80061b4 <TIM_OC5_SetConfig+0xb8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00b      	beq.n	8006176 <TIM_OC5_SetConfig+0x7a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a15      	ldr	r2, [pc, #84]	; (80061b8 <TIM_OC5_SetConfig+0xbc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d007      	beq.n	8006176 <TIM_OC5_SetConfig+0x7a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a14      	ldr	r2, [pc, #80]	; (80061bc <TIM_OC5_SetConfig+0xc0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d003      	beq.n	8006176 <TIM_OC5_SetConfig+0x7a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a13      	ldr	r2, [pc, #76]	; (80061c0 <TIM_OC5_SetConfig+0xc4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d109      	bne.n	800618a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800617c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	621a      	str	r2, [r3, #32]
}
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	40012c00 	.word	0x40012c00
 80061b4:	40013400 	.word	0x40013400
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40014400 	.word	0x40014400
 80061c0:	40014800 	.word	0x40014800

080061c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800620a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	051b      	lsls	r3, r3, #20
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4313      	orrs	r3, r2
 8006216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a18      	ldr	r2, [pc, #96]	; (800627c <TIM_OC6_SetConfig+0xb8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00f      	beq.n	8006240 <TIM_OC6_SetConfig+0x7c>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a17      	ldr	r2, [pc, #92]	; (8006280 <TIM_OC6_SetConfig+0xbc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00b      	beq.n	8006240 <TIM_OC6_SetConfig+0x7c>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a16      	ldr	r2, [pc, #88]	; (8006284 <TIM_OC6_SetConfig+0xc0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d007      	beq.n	8006240 <TIM_OC6_SetConfig+0x7c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a15      	ldr	r2, [pc, #84]	; (8006288 <TIM_OC6_SetConfig+0xc4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_OC6_SetConfig+0x7c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a14      	ldr	r2, [pc, #80]	; (800628c <TIM_OC6_SetConfig+0xc8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d109      	bne.n	8006254 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006246:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	029b      	lsls	r3, r3, #10
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	621a      	str	r2, [r3, #32]
}
 800626e:	bf00      	nop
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40013400 	.word	0x40013400
 8006284:	40014000 	.word	0x40014000
 8006288:	40014400 	.word	0x40014400
 800628c:	40014800 	.word	0x40014800

08006290 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 031f 	and.w	r3, r3, #31
 80062a2:	2201      	movs	r2, #1
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a1a      	ldr	r2, [r3, #32]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	43db      	mvns	r3, r3
 80062b2:	401a      	ands	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1a      	ldr	r2, [r3, #32]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f003 031f 	and.w	r3, r3, #31
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	fa01 f303 	lsl.w	r3, r1, r3
 80062c8:	431a      	orrs	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	621a      	str	r2, [r3, #32]
}
 80062ce:	bf00      	nop
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e068      	b.n	80063c6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a2e      	ldr	r2, [pc, #184]	; (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d004      	beq.n	8006328 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a2d      	ldr	r2, [pc, #180]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d108      	bne.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800632e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006340:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a1e      	ldr	r2, [pc, #120]	; (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01d      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006366:	d018      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a1b      	ldr	r2, [pc, #108]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a1a      	ldr	r2, [pc, #104]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00e      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a18      	ldr	r2, [pc, #96]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d009      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d004      	beq.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d10c      	bne.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	40012c00 	.word	0x40012c00
 80063d8:	40013400 	.word	0x40013400
 80063dc:	40000400 	.word	0x40000400
 80063e0:	40000800 	.word	0x40000800
 80063e4:	40000c00 	.word	0x40000c00
 80063e8:	40014000 	.word	0x40014000

080063ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e040      	b.n	80064bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7fb fa30 	bl	80018b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2224      	movs	r2, #36	; 0x24
 8006454:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0201 	bic.w	r2, r2, #1
 8006464:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fbc8 	bl	8006bfc <UART_SetConfig>
 800646c:	4603      	mov	r3, r0
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e022      	b.n	80064bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fe74 	bl	800716c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fefb 	bl	80072b0 <UART_CheckIdleState>
 80064ba:	4603      	mov	r3, r0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08a      	sub	sp, #40	; 0x28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	4613      	mov	r3, r2
 80064d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	d178      	bne.n	80065cc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <HAL_UART_Transmit_DMA+0x22>
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e071      	b.n	80065ce <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_UART_Transmit_DMA+0x34>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e06a      	b.n	80065ce <HAL_UART_Transmit_DMA+0x10a>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	88fa      	ldrh	r2, [r7, #6]
 800650a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	88fa      	ldrh	r2, [r7, #6]
 8006512:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2221      	movs	r2, #33	; 0x21
 8006522:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d02b      	beq.n	8006584 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006530:	4a29      	ldr	r2, [pc, #164]	; (80065d8 <HAL_UART_Transmit_DMA+0x114>)
 8006532:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006538:	4a28      	ldr	r2, [pc, #160]	; (80065dc <HAL_UART_Transmit_DMA+0x118>)
 800653a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006540:	4a27      	ldr	r2, [pc, #156]	; (80065e0 <HAL_UART_Transmit_DMA+0x11c>)
 8006542:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006548:	2200      	movs	r2, #0
 800654a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006554:	4619      	mov	r1, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3328      	adds	r3, #40	; 0x28
 800655c:	461a      	mov	r2, r3
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	f7fc f9ee 	bl	8002940 <HAL_DMA_Start_IT>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00c      	beq.n	8006584 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2210      	movs	r2, #16
 800656e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2220      	movs	r2, #32
 800657e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e024      	b.n	80065ce <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2240      	movs	r2, #64	; 0x40
 800658a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3308      	adds	r3, #8
 800659a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	e853 3f00 	ldrex	r3, [r3]
 80065a2:	613b      	str	r3, [r7, #16]
   return(result);
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3308      	adds	r3, #8
 80065b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b4:	623a      	str	r2, [r7, #32]
 80065b6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	69f9      	ldr	r1, [r7, #28]
 80065ba:	6a3a      	ldr	r2, [r7, #32]
 80065bc:	e841 2300 	strex	r3, r2, [r1]
 80065c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e5      	bne.n	8006594 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e000      	b.n	80065ce <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80065cc:	2302      	movs	r3, #2
  }
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3728      	adds	r7, #40	; 0x28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	080075dd 	.word	0x080075dd
 80065dc:	08007677 	.word	0x08007677
 80065e0:	08007693 	.word	0x08007693

080065e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b0ba      	sub	sp, #232	; 0xe8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800660a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800660e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006612:	4013      	ands	r3, r2
 8006614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d115      	bne.n	800664c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00f      	beq.n	800664c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800662c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006630:	f003 0320 	and.w	r3, r3, #32
 8006634:	2b00      	cmp	r3, #0
 8006636:	d009      	beq.n	800664c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 82a6 	beq.w	8006b8e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	4798      	blx	r3
      }
      return;
 800664a:	e2a0      	b.n	8006b8e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800664c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8117 	beq.w	8006884 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006662:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006666:	4b85      	ldr	r3, [pc, #532]	; (800687c <HAL_UART_IRQHandler+0x298>)
 8006668:	4013      	ands	r3, r2
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 810a 	beq.w	8006884 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d011      	beq.n	80066a0 <HAL_UART_IRQHandler+0xbc>
 800667c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2201      	movs	r2, #1
 800668e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006696:	f043 0201 	orr.w	r2, r3, #1
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d011      	beq.n	80066d0 <HAL_UART_IRQHandler+0xec>
 80066ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00b      	beq.n	80066d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2202      	movs	r2, #2
 80066be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c6:	f043 0204 	orr.w	r2, r3, #4
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d011      	beq.n	8006700 <HAL_UART_IRQHandler+0x11c>
 80066dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00b      	beq.n	8006700 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2204      	movs	r2, #4
 80066ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f6:	f043 0202 	orr.w	r2, r3, #2
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006704:	f003 0308 	and.w	r3, r3, #8
 8006708:	2b00      	cmp	r3, #0
 800670a:	d017      	beq.n	800673c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800670c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b00      	cmp	r3, #0
 8006716:	d105      	bne.n	8006724 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800671c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2208      	movs	r2, #8
 800672a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006732:	f043 0208 	orr.w	r2, r3, #8
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800673c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006744:	2b00      	cmp	r3, #0
 8006746:	d012      	beq.n	800676e <HAL_UART_IRQHandler+0x18a>
 8006748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800674c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00c      	beq.n	800676e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800675c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006764:	f043 0220 	orr.w	r2, r3, #32
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 820c 	beq.w	8006b92 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800677a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00d      	beq.n	80067a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800678a:	f003 0320 	and.w	r3, r3, #32
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	d005      	beq.n	80067c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d04f      	beq.n	8006866 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fea5 	bl	8007516 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d6:	2b40      	cmp	r3, #64	; 0x40
 80067d8:	d141      	bne.n	800685e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3308      	adds	r3, #8
 8006802:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006806:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800680a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006812:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800681e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1d9      	bne.n	80067da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682a:	2b00      	cmp	r3, #0
 800682c:	d013      	beq.n	8006856 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006832:	4a13      	ldr	r2, [pc, #76]	; (8006880 <HAL_UART_IRQHandler+0x29c>)
 8006834:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	4618      	mov	r0, r3
 800683c:	f7fc f91e 	bl	8002a7c <HAL_DMA_Abort_IT>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d017      	beq.n	8006876 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006850:	4610      	mov	r0, r2
 8006852:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006854:	e00f      	b.n	8006876 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f9ba 	bl	8006bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800685c:	e00b      	b.n	8006876 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f9b6 	bl	8006bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006864:	e007      	b.n	8006876 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f9b2 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006874:	e18d      	b.n	8006b92 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006876:	bf00      	nop
    return;
 8006878:	e18b      	b.n	8006b92 <HAL_UART_IRQHandler+0x5ae>
 800687a:	bf00      	nop
 800687c:	04000120 	.word	0x04000120
 8006880:	0800770f 	.word	0x0800770f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006888:	2b01      	cmp	r3, #1
 800688a:	f040 8146 	bne.w	8006b1a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006892:	f003 0310 	and.w	r3, r3, #16
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 813f 	beq.w	8006b1a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800689c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8138 	beq.w	8006b1a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2210      	movs	r2, #16
 80068b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068bc:	2b40      	cmp	r3, #64	; 0x40
 80068be:	f040 80b4 	bne.w	8006a2a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 815f 	beq.w	8006b96 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80068de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068e2:	429a      	cmp	r2, r3
 80068e4:	f080 8157 	bcs.w	8006b96 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0320 	and.w	r3, r3, #32
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f040 8085 	bne.w	8006a0e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800691c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800692e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006932:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800693a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1da      	bne.n	8006904 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3308      	adds	r3, #8
 8006954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800695e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3308      	adds	r3, #8
 800696e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006972:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006976:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800697a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e1      	bne.n	800694e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3308      	adds	r3, #8
 8006990:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800699a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800699c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3308      	adds	r3, #8
 80069aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e3      	bne.n	800698a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069de:	f023 0310 	bic.w	r3, r3, #16
 80069e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80069f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e4      	bne.n	80069ce <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fb fff9 	bl	8002a00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f8de 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a28:	e0b5      	b.n	8006b96 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 80a7 	beq.w	8006b9a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80a2 	beq.w	8006b9a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a78:	647b      	str	r3, [r7, #68]	; 0x44
 8006a7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e4      	bne.n	8006a56 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3308      	adds	r3, #8
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	f023 0301 	bic.w	r3, r3, #1
 8006aa2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3308      	adds	r3, #8
 8006aac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ab0:	633a      	str	r2, [r7, #48]	; 0x30
 8006ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab8:	e841 2300 	strex	r3, r2, [r1]
 8006abc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1e3      	bne.n	8006a8c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0310 	bic.w	r3, r3, #16
 8006aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006af8:	61fb      	str	r3, [r7, #28]
 8006afa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	69b9      	ldr	r1, [r7, #24]
 8006afe:	69fa      	ldr	r2, [r7, #28]
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	617b      	str	r3, [r7, #20]
   return(result);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e4      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f866 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b18:	e03f      	b.n	8006b9a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00e      	beq.n	8006b44 <HAL_UART_IRQHandler+0x560>
 8006b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d008      	beq.n	8006b44 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fe26 	bl	800778e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b42:	e02d      	b.n	8006ba0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00e      	beq.n	8006b6e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d008      	beq.n	8006b6e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01c      	beq.n	8006b9e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	4798      	blx	r3
    }
    return;
 8006b6c:	e017      	b.n	8006b9e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d012      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x5bc>
 8006b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00c      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fdd7 	bl	800773a <UART_EndTransmit_IT>
    return;
 8006b8c:	e008      	b.n	8006ba0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006b8e:	bf00      	nop
 8006b90:	e006      	b.n	8006ba0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006b92:	bf00      	nop
 8006b94:	e004      	b.n	8006ba0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006b96:	bf00      	nop
 8006b98:	e002      	b.n	8006ba0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006b9a:	bf00      	nop
 8006b9c:	e000      	b.n	8006ba0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006b9e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ba0:	37e8      	adds	r7, #232	; 0xe8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop

08006ba8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c00:	b08a      	sub	sp, #40	; 0x28
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	431a      	orrs	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4ba4      	ldr	r3, [pc, #656]	; (8006ebc <UART_SetConfig+0x2c0>)
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	6812      	ldr	r2, [r2, #0]
 8006c32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c34:	430b      	orrs	r3, r1
 8006c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a99      	ldr	r2, [pc, #612]	; (8006ec0 <UART_SetConfig+0x2c4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d004      	beq.n	8006c68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c64:	4313      	orrs	r3, r2
 8006c66:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a90      	ldr	r2, [pc, #576]	; (8006ec4 <UART_SetConfig+0x2c8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d126      	bne.n	8006cd4 <UART_SetConfig+0xd8>
 8006c86:	4b90      	ldr	r3, [pc, #576]	; (8006ec8 <UART_SetConfig+0x2cc>)
 8006c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8c:	f003 0303 	and.w	r3, r3, #3
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d81b      	bhi.n	8006ccc <UART_SetConfig+0xd0>
 8006c94:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <UART_SetConfig+0xa0>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006cad 	.word	0x08006cad
 8006ca0:	08006cbd 	.word	0x08006cbd
 8006ca4:	08006cb5 	.word	0x08006cb5
 8006ca8:	08006cc5 	.word	0x08006cc5
 8006cac:	2301      	movs	r3, #1
 8006cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cb2:	e116      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cba:	e112      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc2:	e10e      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006cc4:	2308      	movs	r3, #8
 8006cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cca:	e10a      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006ccc:	2310      	movs	r3, #16
 8006cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd2:	e106      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a7c      	ldr	r2, [pc, #496]	; (8006ecc <UART_SetConfig+0x2d0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d138      	bne.n	8006d50 <UART_SetConfig+0x154>
 8006cde:	4b7a      	ldr	r3, [pc, #488]	; (8006ec8 <UART_SetConfig+0x2cc>)
 8006ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce4:	f003 030c 	and.w	r3, r3, #12
 8006ce8:	2b0c      	cmp	r3, #12
 8006cea:	d82d      	bhi.n	8006d48 <UART_SetConfig+0x14c>
 8006cec:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <UART_SetConfig+0xf8>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d29 	.word	0x08006d29
 8006cf8:	08006d49 	.word	0x08006d49
 8006cfc:	08006d49 	.word	0x08006d49
 8006d00:	08006d49 	.word	0x08006d49
 8006d04:	08006d39 	.word	0x08006d39
 8006d08:	08006d49 	.word	0x08006d49
 8006d0c:	08006d49 	.word	0x08006d49
 8006d10:	08006d49 	.word	0x08006d49
 8006d14:	08006d31 	.word	0x08006d31
 8006d18:	08006d49 	.word	0x08006d49
 8006d1c:	08006d49 	.word	0x08006d49
 8006d20:	08006d49 	.word	0x08006d49
 8006d24:	08006d41 	.word	0x08006d41
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d2e:	e0d8      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006d30:	2302      	movs	r3, #2
 8006d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d36:	e0d4      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3e:	e0d0      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006d40:	2308      	movs	r3, #8
 8006d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d46:	e0cc      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006d48:	2310      	movs	r3, #16
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d4e:	e0c8      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a5e      	ldr	r2, [pc, #376]	; (8006ed0 <UART_SetConfig+0x2d4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d125      	bne.n	8006da6 <UART_SetConfig+0x1aa>
 8006d5a:	4b5b      	ldr	r3, [pc, #364]	; (8006ec8 <UART_SetConfig+0x2cc>)
 8006d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d64:	2b30      	cmp	r3, #48	; 0x30
 8006d66:	d016      	beq.n	8006d96 <UART_SetConfig+0x19a>
 8006d68:	2b30      	cmp	r3, #48	; 0x30
 8006d6a:	d818      	bhi.n	8006d9e <UART_SetConfig+0x1a2>
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d00a      	beq.n	8006d86 <UART_SetConfig+0x18a>
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d814      	bhi.n	8006d9e <UART_SetConfig+0x1a2>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <UART_SetConfig+0x182>
 8006d78:	2b10      	cmp	r3, #16
 8006d7a:	d008      	beq.n	8006d8e <UART_SetConfig+0x192>
 8006d7c:	e00f      	b.n	8006d9e <UART_SetConfig+0x1a2>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d84:	e0ad      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006d86:	2302      	movs	r3, #2
 8006d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d8c:	e0a9      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006d8e:	2304      	movs	r3, #4
 8006d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d94:	e0a5      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006d96:	2308      	movs	r3, #8
 8006d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d9c:	e0a1      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006d9e:	2310      	movs	r3, #16
 8006da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da4:	e09d      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a4a      	ldr	r2, [pc, #296]	; (8006ed4 <UART_SetConfig+0x2d8>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d125      	bne.n	8006dfc <UART_SetConfig+0x200>
 8006db0:	4b45      	ldr	r3, [pc, #276]	; (8006ec8 <UART_SetConfig+0x2cc>)
 8006db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dba:	2bc0      	cmp	r3, #192	; 0xc0
 8006dbc:	d016      	beq.n	8006dec <UART_SetConfig+0x1f0>
 8006dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8006dc0:	d818      	bhi.n	8006df4 <UART_SetConfig+0x1f8>
 8006dc2:	2b80      	cmp	r3, #128	; 0x80
 8006dc4:	d00a      	beq.n	8006ddc <UART_SetConfig+0x1e0>
 8006dc6:	2b80      	cmp	r3, #128	; 0x80
 8006dc8:	d814      	bhi.n	8006df4 <UART_SetConfig+0x1f8>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <UART_SetConfig+0x1d8>
 8006dce:	2b40      	cmp	r3, #64	; 0x40
 8006dd0:	d008      	beq.n	8006de4 <UART_SetConfig+0x1e8>
 8006dd2:	e00f      	b.n	8006df4 <UART_SetConfig+0x1f8>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dda:	e082      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006de2:	e07e      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006de4:	2304      	movs	r3, #4
 8006de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dea:	e07a      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006dec:	2308      	movs	r3, #8
 8006dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006df2:	e076      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006df4:	2310      	movs	r3, #16
 8006df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dfa:	e072      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a35      	ldr	r2, [pc, #212]	; (8006ed8 <UART_SetConfig+0x2dc>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d12a      	bne.n	8006e5c <UART_SetConfig+0x260>
 8006e06:	4b30      	ldr	r3, [pc, #192]	; (8006ec8 <UART_SetConfig+0x2cc>)
 8006e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e14:	d01a      	beq.n	8006e4c <UART_SetConfig+0x250>
 8006e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e1a:	d81b      	bhi.n	8006e54 <UART_SetConfig+0x258>
 8006e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e20:	d00c      	beq.n	8006e3c <UART_SetConfig+0x240>
 8006e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e26:	d815      	bhi.n	8006e54 <UART_SetConfig+0x258>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <UART_SetConfig+0x238>
 8006e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e30:	d008      	beq.n	8006e44 <UART_SetConfig+0x248>
 8006e32:	e00f      	b.n	8006e54 <UART_SetConfig+0x258>
 8006e34:	2300      	movs	r3, #0
 8006e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e3a:	e052      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e42:	e04e      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006e44:	2304      	movs	r3, #4
 8006e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e4a:	e04a      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e52:	e046      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006e54:	2310      	movs	r3, #16
 8006e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e5a:	e042      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a17      	ldr	r2, [pc, #92]	; (8006ec0 <UART_SetConfig+0x2c4>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d13a      	bne.n	8006edc <UART_SetConfig+0x2e0>
 8006e66:	4b18      	ldr	r3, [pc, #96]	; (8006ec8 <UART_SetConfig+0x2cc>)
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e74:	d01a      	beq.n	8006eac <UART_SetConfig+0x2b0>
 8006e76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e7a:	d81b      	bhi.n	8006eb4 <UART_SetConfig+0x2b8>
 8006e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e80:	d00c      	beq.n	8006e9c <UART_SetConfig+0x2a0>
 8006e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e86:	d815      	bhi.n	8006eb4 <UART_SetConfig+0x2b8>
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <UART_SetConfig+0x298>
 8006e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e90:	d008      	beq.n	8006ea4 <UART_SetConfig+0x2a8>
 8006e92:	e00f      	b.n	8006eb4 <UART_SetConfig+0x2b8>
 8006e94:	2300      	movs	r3, #0
 8006e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e9a:	e022      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ea2:	e01e      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006ea4:	2304      	movs	r3, #4
 8006ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eaa:	e01a      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006eac:	2308      	movs	r3, #8
 8006eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eb2:	e016      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eba:	e012      	b.n	8006ee2 <UART_SetConfig+0x2e6>
 8006ebc:	efff69f3 	.word	0xefff69f3
 8006ec0:	40008000 	.word	0x40008000
 8006ec4:	40013800 	.word	0x40013800
 8006ec8:	40021000 	.word	0x40021000
 8006ecc:	40004400 	.word	0x40004400
 8006ed0:	40004800 	.word	0x40004800
 8006ed4:	40004c00 	.word	0x40004c00
 8006ed8:	40005000 	.word	0x40005000
 8006edc:	2310      	movs	r3, #16
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a9f      	ldr	r2, [pc, #636]	; (8007164 <UART_SetConfig+0x568>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d17a      	bne.n	8006fe2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006eec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d824      	bhi.n	8006f3e <UART_SetConfig+0x342>
 8006ef4:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <UART_SetConfig+0x300>)
 8006ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efa:	bf00      	nop
 8006efc:	08006f21 	.word	0x08006f21
 8006f00:	08006f3f 	.word	0x08006f3f
 8006f04:	08006f29 	.word	0x08006f29
 8006f08:	08006f3f 	.word	0x08006f3f
 8006f0c:	08006f2f 	.word	0x08006f2f
 8006f10:	08006f3f 	.word	0x08006f3f
 8006f14:	08006f3f 	.word	0x08006f3f
 8006f18:	08006f3f 	.word	0x08006f3f
 8006f1c:	08006f37 	.word	0x08006f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f20:	f7fd fc40 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 8006f24:	61f8      	str	r0, [r7, #28]
        break;
 8006f26:	e010      	b.n	8006f4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f28:	4b8f      	ldr	r3, [pc, #572]	; (8007168 <UART_SetConfig+0x56c>)
 8006f2a:	61fb      	str	r3, [r7, #28]
        break;
 8006f2c:	e00d      	b.n	8006f4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2e:	f7fd fba1 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8006f32:	61f8      	str	r0, [r7, #28]
        break;
 8006f34:	e009      	b.n	8006f4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f3a:	61fb      	str	r3, [r7, #28]
        break;
 8006f3c:	e005      	b.n	8006f4a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 80fb 	beq.w	8007148 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	4613      	mov	r3, r2
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	4413      	add	r3, r2
 8006f5c:	69fa      	ldr	r2, [r7, #28]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d305      	bcc.n	8006f6e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d903      	bls.n	8006f76 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f74:	e0e8      	b.n	8007148 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	461c      	mov	r4, r3
 8006f7c:	4615      	mov	r5, r2
 8006f7e:	f04f 0200 	mov.w	r2, #0
 8006f82:	f04f 0300 	mov.w	r3, #0
 8006f86:	022b      	lsls	r3, r5, #8
 8006f88:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f8c:	0222      	lsls	r2, r4, #8
 8006f8e:	68f9      	ldr	r1, [r7, #12]
 8006f90:	6849      	ldr	r1, [r1, #4]
 8006f92:	0849      	lsrs	r1, r1, #1
 8006f94:	2000      	movs	r0, #0
 8006f96:	4688      	mov	r8, r1
 8006f98:	4681      	mov	r9, r0
 8006f9a:	eb12 0a08 	adds.w	sl, r2, r8
 8006f9e:	eb43 0b09 	adc.w	fp, r3, r9
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	603b      	str	r3, [r7, #0]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fb0:	4650      	mov	r0, sl
 8006fb2:	4659      	mov	r1, fp
 8006fb4:	f7f9 fe68 	bl	8000c88 <__aeabi_uldivmod>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fc6:	d308      	bcc.n	8006fda <UART_SetConfig+0x3de>
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fce:	d204      	bcs.n	8006fda <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	60da      	str	r2, [r3, #12]
 8006fd8:	e0b6      	b.n	8007148 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006fe0:	e0b2      	b.n	8007148 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fea:	d15e      	bne.n	80070aa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006fec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d828      	bhi.n	8007046 <UART_SetConfig+0x44a>
 8006ff4:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <UART_SetConfig+0x400>)
 8006ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffa:	bf00      	nop
 8006ffc:	08007021 	.word	0x08007021
 8007000:	08007029 	.word	0x08007029
 8007004:	08007031 	.word	0x08007031
 8007008:	08007047 	.word	0x08007047
 800700c:	08007037 	.word	0x08007037
 8007010:	08007047 	.word	0x08007047
 8007014:	08007047 	.word	0x08007047
 8007018:	08007047 	.word	0x08007047
 800701c:	0800703f 	.word	0x0800703f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007020:	f7fd fbc0 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 8007024:	61f8      	str	r0, [r7, #28]
        break;
 8007026:	e014      	b.n	8007052 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007028:	f7fd fbd2 	bl	80047d0 <HAL_RCC_GetPCLK2Freq>
 800702c:	61f8      	str	r0, [r7, #28]
        break;
 800702e:	e010      	b.n	8007052 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007030:	4b4d      	ldr	r3, [pc, #308]	; (8007168 <UART_SetConfig+0x56c>)
 8007032:	61fb      	str	r3, [r7, #28]
        break;
 8007034:	e00d      	b.n	8007052 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007036:	f7fd fb1d 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 800703a:	61f8      	str	r0, [r7, #28]
        break;
 800703c:	e009      	b.n	8007052 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800703e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007042:	61fb      	str	r3, [r7, #28]
        break;
 8007044:	e005      	b.n	8007052 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007050:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d077      	beq.n	8007148 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	005a      	lsls	r2, r3, #1
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	085b      	lsrs	r3, r3, #1
 8007062:	441a      	add	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	fbb2 f3f3 	udiv	r3, r2, r3
 800706c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	2b0f      	cmp	r3, #15
 8007072:	d916      	bls.n	80070a2 <UART_SetConfig+0x4a6>
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800707a:	d212      	bcs.n	80070a2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	b29b      	uxth	r3, r3
 8007080:	f023 030f 	bic.w	r3, r3, #15
 8007084:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	085b      	lsrs	r3, r3, #1
 800708a:	b29b      	uxth	r3, r3
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	b29a      	uxth	r2, r3
 8007092:	8afb      	ldrh	r3, [r7, #22]
 8007094:	4313      	orrs	r3, r2
 8007096:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	8afa      	ldrh	r2, [r7, #22]
 800709e:	60da      	str	r2, [r3, #12]
 80070a0:	e052      	b.n	8007148 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80070a8:	e04e      	b.n	8007148 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070ae:	2b08      	cmp	r3, #8
 80070b0:	d827      	bhi.n	8007102 <UART_SetConfig+0x506>
 80070b2:	a201      	add	r2, pc, #4	; (adr r2, 80070b8 <UART_SetConfig+0x4bc>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	080070dd 	.word	0x080070dd
 80070bc:	080070e5 	.word	0x080070e5
 80070c0:	080070ed 	.word	0x080070ed
 80070c4:	08007103 	.word	0x08007103
 80070c8:	080070f3 	.word	0x080070f3
 80070cc:	08007103 	.word	0x08007103
 80070d0:	08007103 	.word	0x08007103
 80070d4:	08007103 	.word	0x08007103
 80070d8:	080070fb 	.word	0x080070fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070dc:	f7fd fb62 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 80070e0:	61f8      	str	r0, [r7, #28]
        break;
 80070e2:	e014      	b.n	800710e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070e4:	f7fd fb74 	bl	80047d0 <HAL_RCC_GetPCLK2Freq>
 80070e8:	61f8      	str	r0, [r7, #28]
        break;
 80070ea:	e010      	b.n	800710e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070ec:	4b1e      	ldr	r3, [pc, #120]	; (8007168 <UART_SetConfig+0x56c>)
 80070ee:	61fb      	str	r3, [r7, #28]
        break;
 80070f0:	e00d      	b.n	800710e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070f2:	f7fd fabf 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 80070f6:	61f8      	str	r0, [r7, #28]
        break;
 80070f8:	e009      	b.n	800710e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070fe:	61fb      	str	r3, [r7, #28]
        break;
 8007100:	e005      	b.n	800710e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800710c:	bf00      	nop
    }

    if (pclk != 0U)
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d019      	beq.n	8007148 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	085a      	lsrs	r2, r3, #1
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	441a      	add	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	fbb2 f3f3 	udiv	r3, r2, r3
 8007126:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b0f      	cmp	r3, #15
 800712c:	d909      	bls.n	8007142 <UART_SetConfig+0x546>
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007134:	d205      	bcs.n	8007142 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60da      	str	r2, [r3, #12]
 8007140:	e002      	b.n	8007148 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007154:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007158:	4618      	mov	r0, r3
 800715a:	3728      	adds	r7, #40	; 0x28
 800715c:	46bd      	mov	sp, r7
 800715e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007162:	bf00      	nop
 8007164:	40008000 	.word	0x40008000
 8007168:	00f42400 	.word	0x00f42400

0800716c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	f003 0310 	and.w	r3, r3, #16
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00a      	beq.n	800721e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01a      	beq.n	8007282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800726a:	d10a      	bne.n	8007282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	605a      	str	r2, [r3, #4]
  }
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072c0:	f7fb f974 	bl	80025ac <HAL_GetTick>
 80072c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b08      	cmp	r3, #8
 80072d2:	d10e      	bne.n	80072f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f82d 	bl	8007342 <UART_WaitOnFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e023      	b.n	800733a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	d10e      	bne.n	800731e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f817 	bl	8007342 <UART_WaitOnFlagUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e00d      	b.n	800733a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2220      	movs	r2, #32
 8007322:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2220      	movs	r2, #32
 8007328:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b09c      	sub	sp, #112	; 0x70
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	603b      	str	r3, [r7, #0]
 800734e:	4613      	mov	r3, r2
 8007350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007352:	e0a5      	b.n	80074a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735a:	f000 80a1 	beq.w	80074a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800735e:	f7fb f925 	bl	80025ac <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800736a:	429a      	cmp	r2, r3
 800736c:	d302      	bcc.n	8007374 <UART_WaitOnFlagUntilTimeout+0x32>
 800736e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007370:	2b00      	cmp	r3, #0
 8007372:	d13e      	bne.n	80073f2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007384:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007388:	667b      	str	r3, [r7, #100]	; 0x64
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007394:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007398:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e6      	bne.n	8007374 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3308      	adds	r3, #8
 80073ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	f023 0301 	bic.w	r3, r3, #1
 80073bc:	663b      	str	r3, [r7, #96]	; 0x60
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3308      	adds	r3, #8
 80073c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80073c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e5      	bne.n	80073a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2220      	movs	r2, #32
 80073de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2220      	movs	r2, #32
 80073e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e067      	b.n	80074c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d04f      	beq.n	80074a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800740a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800740e:	d147      	bne.n	80074a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007418:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800742e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007438:	637b      	str	r3, [r7, #52]	; 0x34
 800743a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800743e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e6      	bne.n	800741a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3308      	adds	r3, #8
 8007452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	613b      	str	r3, [r7, #16]
   return(result);
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	66bb      	str	r3, [r7, #104]	; 0x68
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3308      	adds	r3, #8
 800746a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800746c:	623a      	str	r2, [r7, #32]
 800746e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	69f9      	ldr	r1, [r7, #28]
 8007472:	6a3a      	ldr	r2, [r7, #32]
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	61bb      	str	r3, [r7, #24]
   return(result);
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e5      	bne.n	800744c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2220      	movs	r2, #32
 8007484:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e010      	b.n	80074c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	69da      	ldr	r2, [r3, #28]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	4013      	ands	r3, r2
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	bf0c      	ite	eq
 80074b0:	2301      	moveq	r3, #1
 80074b2:	2300      	movne	r3, #0
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	461a      	mov	r2, r3
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	f43f af4a 	beq.w	8007354 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3770      	adds	r7, #112	; 0x70
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b089      	sub	sp, #36	; 0x24
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	60bb      	str	r3, [r7, #8]
   return(result);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80074e6:	61fb      	str	r3, [r7, #28]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	6979      	ldr	r1, [r7, #20]
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	613b      	str	r3, [r7, #16]
   return(result);
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e6      	bne.n	80074d2 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2220      	movs	r2, #32
 8007508:	679a      	str	r2, [r3, #120]	; 0x78
}
 800750a:	bf00      	nop
 800750c:	3724      	adds	r7, #36	; 0x24
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007516:	b480      	push	{r7}
 8007518:	b095      	sub	sp, #84	; 0x54
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800753c:	643b      	str	r3, [r7, #64]	; 0x40
 800753e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e6      	bne.n	800751e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3308      	adds	r3, #8
 8007556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f023 0301 	bic.w	r3, r3, #1
 8007566:	64bb      	str	r3, [r7, #72]	; 0x48
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3308      	adds	r3, #8
 800756e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007570:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e5      	bne.n	8007550 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007588:	2b01      	cmp	r3, #1
 800758a:	d118      	bne.n	80075be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	60bb      	str	r3, [r7, #8]
   return(result);
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f023 0310 	bic.w	r3, r3, #16
 80075a0:	647b      	str	r3, [r7, #68]	; 0x44
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075aa:	61bb      	str	r3, [r7, #24]
 80075ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	6979      	ldr	r1, [r7, #20]
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	613b      	str	r3, [r7, #16]
   return(result);
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e6      	bne.n	800758c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2220      	movs	r2, #32
 80075c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	665a      	str	r2, [r3, #100]	; 0x64
}
 80075d0:	bf00      	nop
 80075d2:	3754      	adds	r7, #84	; 0x54
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b090      	sub	sp, #64	; 0x40
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d137      	bne.n	8007668 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80075f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3308      	adds	r3, #8
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	623b      	str	r3, [r7, #32]
   return(result);
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007616:	63bb      	str	r3, [r7, #56]	; 0x38
 8007618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3308      	adds	r3, #8
 800761e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007620:	633a      	str	r2, [r7, #48]	; 0x30
 8007622:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e5      	bne.n	8007600 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	60fb      	str	r3, [r7, #12]
   return(result);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007648:	637b      	str	r3, [r7, #52]	; 0x34
 800764a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007652:	61fb      	str	r3, [r7, #28]
 8007654:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	69b9      	ldr	r1, [r7, #24]
 8007658:	69fa      	ldr	r2, [r7, #28]
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	617b      	str	r3, [r7, #20]
   return(result);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e6      	bne.n	8007634 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007666:	e002      	b.n	800766e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007668:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800766a:	f7ff fa9d 	bl	8006ba8 <HAL_UART_TxCpltCallback>
}
 800766e:	bf00      	nop
 8007670:	3740      	adds	r7, #64	; 0x40
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007682:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7ff fa99 	bl	8006bbc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b086      	sub	sp, #24
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076a4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b6:	2b80      	cmp	r3, #128	; 0x80
 80076b8:	d109      	bne.n	80076ce <UART_DMAError+0x3c>
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	2b21      	cmp	r3, #33	; 0x21
 80076be:	d106      	bne.n	80076ce <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80076c8:	6978      	ldr	r0, [r7, #20]
 80076ca:	f7ff fefe 	bl	80074ca <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d8:	2b40      	cmp	r3, #64	; 0x40
 80076da:	d109      	bne.n	80076f0 <UART_DMAError+0x5e>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b22      	cmp	r3, #34	; 0x22
 80076e0:	d106      	bne.n	80076f0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80076ea:	6978      	ldr	r0, [r7, #20]
 80076ec:	f7ff ff13 	bl	8007516 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076f6:	f043 0210 	orr.w	r2, r3, #16
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007700:	6978      	ldr	r0, [r7, #20]
 8007702:	f7ff fa65 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007706:	bf00      	nop
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f7ff fa4f 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007732:	bf00      	nop
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b088      	sub	sp, #32
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007756:	61fb      	str	r3, [r7, #28]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	461a      	mov	r2, r3
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	61bb      	str	r3, [r7, #24]
 8007762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007764:	6979      	ldr	r1, [r7, #20]
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	e841 2300 	strex	r3, r2, [r1]
 800776c:	613b      	str	r3, [r7, #16]
   return(result);
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e6      	bne.n	8007742 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2220      	movs	r2, #32
 8007778:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7ff fa11 	bl	8006ba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007786:	bf00      	nop
 8007788:	3720      	adds	r7, #32
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	4603      	mov	r3, r0
 80077aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80077b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077b4:	2b84      	cmp	r3, #132	; 0x84
 80077b6:	d005      	beq.n	80077c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80077b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4413      	add	r3, r2
 80077c0:	3303      	adds	r3, #3
 80077c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80077c4:	68fb      	ldr	r3, [r7, #12]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80077d6:	f001 f89d 	bl	8008914 <vTaskStartScheduler>
  
  return osOK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	bd80      	pop	{r7, pc}

080077e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80077e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077e2:	b089      	sub	sp, #36	; 0x24
 80077e4:	af04      	add	r7, sp, #16
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d020      	beq.n	8007834 <osThreadCreate+0x54>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01c      	beq.n	8007834 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685c      	ldr	r4, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681d      	ldr	r5, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691e      	ldr	r6, [r3, #16]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800780c:	4618      	mov	r0, r3
 800780e:	f7ff ffc8 	bl	80077a2 <makeFreeRtosPriority>
 8007812:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800781c:	9202      	str	r2, [sp, #8]
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	9100      	str	r1, [sp, #0]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	4632      	mov	r2, r6
 8007826:	4629      	mov	r1, r5
 8007828:	4620      	mov	r0, r4
 800782a:	f000 fe0f 	bl	800844c <xTaskCreateStatic>
 800782e:	4603      	mov	r3, r0
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	e01c      	b.n	800786e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685c      	ldr	r4, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007840:	b29e      	uxth	r6, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff ffaa 	bl	80077a2 <makeFreeRtosPriority>
 800784e:	4602      	mov	r2, r0
 8007850:	f107 030c 	add.w	r3, r7, #12
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	9200      	str	r2, [sp, #0]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	4632      	mov	r2, r6
 800785c:	4629      	mov	r1, r5
 800785e:	4620      	mov	r0, r4
 8007860:	f000 fe51 	bl	8008506 <xTaskCreate>
 8007864:	4603      	mov	r3, r0
 8007866:	2b01      	cmp	r3, #1
 8007868:	d001      	beq.n	800786e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800786a:	2300      	movs	r3, #0
 800786c:	e000      	b.n	8007870 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800786e:	68fb      	ldr	r3, [r7, #12]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007878 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <osDelay+0x16>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	e000      	b.n	8007890 <osDelay+0x18>
 800788e:	2301      	movs	r3, #1
 8007890:	4618      	mov	r0, r3
 8007892:	f001 f80b 	bl	80088ac <vTaskDelay>
  
  return osOK;
 8007896:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f103 0208 	add.w	r2, r3, #8
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f04f 32ff 	mov.w	r2, #4294967295
 80078b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f103 0208 	add.w	r2, r3, #8
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f103 0208 	add.w	r2, r3, #8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078fa:	b480      	push	{r7}
 80078fc:	b085      	sub	sp, #20
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	601a      	str	r2, [r3, #0]
}
 8007936:	bf00      	nop
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007942:	b480      	push	{r7}
 8007944:	b085      	sub	sp, #20
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007958:	d103      	bne.n	8007962 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	e00c      	b.n	800797c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3308      	adds	r3, #8
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	e002      	b.n	8007970 <vListInsert+0x2e>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	429a      	cmp	r2, r3
 800797a:	d2f6      	bcs.n	800796a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	601a      	str	r2, [r3, #0]
}
 80079a8:	bf00      	nop
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6892      	ldr	r2, [r2, #8]
 80079ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	6852      	ldr	r2, [r2, #4]
 80079d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d103      	bne.n	80079e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	1e5a      	subs	r2, r3, #1
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10a      	bne.n	8007a32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a2e:	bf00      	nop
 8007a30:	e7fe      	b.n	8007a30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a32:	f002 f96f 	bl	8009d14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a3e:	68f9      	ldr	r1, [r7, #12]
 8007a40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a42:	fb01 f303 	mul.w	r3, r1, r3
 8007a46:	441a      	add	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a62:	3b01      	subs	r3, #1
 8007a64:	68f9      	ldr	r1, [r7, #12]
 8007a66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a68:	fb01 f303 	mul.w	r3, r1, r3
 8007a6c:	441a      	add	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	22ff      	movs	r2, #255	; 0xff
 8007a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	22ff      	movs	r2, #255	; 0xff
 8007a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d114      	bne.n	8007ab2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d01a      	beq.n	8007ac6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3310      	adds	r3, #16
 8007a94:	4618      	mov	r0, r3
 8007a96:	f001 f9f7 	bl	8008e88 <xTaskRemoveFromEventList>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d012      	beq.n	8007ac6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <xQueueGenericReset+0xcc>)
 8007aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	e009      	b.n	8007ac6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3310      	adds	r3, #16
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7ff fef2 	bl	80078a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3324      	adds	r3, #36	; 0x24
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7ff feed 	bl	80078a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ac6:	f002 f955 	bl	8009d74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007aca:	2301      	movs	r3, #1
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	e000ed04 	.word	0xe000ed04

08007ad8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08e      	sub	sp, #56	; 0x38
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10a      	bne.n	8007b02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <xQueueGenericCreateStatic+0x52>
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <xQueueGenericCreateStatic+0x56>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <xQueueGenericCreateStatic+0x58>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10a      	bne.n	8007b4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	623b      	str	r3, [r7, #32]
}
 8007b46:	bf00      	nop
 8007b48:	e7fe      	b.n	8007b48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <xQueueGenericCreateStatic+0x7e>
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <xQueueGenericCreateStatic+0x82>
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <xQueueGenericCreateStatic+0x84>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10a      	bne.n	8007b76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	61fb      	str	r3, [r7, #28]
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b76:	2348      	movs	r3, #72	; 0x48
 8007b78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	2b48      	cmp	r3, #72	; 0x48
 8007b7e:	d00a      	beq.n	8007b96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	61bb      	str	r3, [r7, #24]
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00d      	beq.n	8007bbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007baa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	68b9      	ldr	r1, [r7, #8]
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 f83f 	bl	8007c3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3730      	adds	r7, #48	; 0x30
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08a      	sub	sp, #40	; 0x28
 8007bcc:	af02      	add	r7, sp, #8
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	613b      	str	r3, [r7, #16]
}
 8007bee:	bf00      	nop
 8007bf0:	e7fe      	b.n	8007bf0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	fb02 f303 	mul.w	r3, r2, r3
 8007bfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	3348      	adds	r3, #72	; 0x48
 8007c00:	4618      	mov	r0, r3
 8007c02:	f002 f9a9 	bl	8009f58 <pvPortMalloc>
 8007c06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d011      	beq.n	8007c32 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	3348      	adds	r3, #72	; 0x48
 8007c16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c20:	79fa      	ldrb	r2, [r7, #7]
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	4613      	mov	r3, r2
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	68b9      	ldr	r1, [r7, #8]
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 f805 	bl	8007c3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c32:	69bb      	ldr	r3, [r7, #24]
	}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3720      	adds	r7, #32
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
 8007c48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d103      	bne.n	8007c58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	e002      	b.n	8007c5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	69b8      	ldr	r0, [r7, #24]
 8007c6e:	f7ff fecb 	bl	8007a08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08e      	sub	sp, #56	; 0x38
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <xQueueGenericSend+0x32>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007caa:	bf00      	nop
 8007cac:	e7fe      	b.n	8007cac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d103      	bne.n	8007cbc <xQueueGenericSend+0x40>
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <xQueueGenericSend+0x44>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <xQueueGenericSend+0x46>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <xQueueGenericSend+0x60>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cd8:	bf00      	nop
 8007cda:	e7fe      	b.n	8007cda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d103      	bne.n	8007cea <xQueueGenericSend+0x6e>
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d101      	bne.n	8007cee <xQueueGenericSend+0x72>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e000      	b.n	8007cf0 <xQueueGenericSend+0x74>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10a      	bne.n	8007d0a <xQueueGenericSend+0x8e>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	623b      	str	r3, [r7, #32]
}
 8007d06:	bf00      	nop
 8007d08:	e7fe      	b.n	8007d08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d0a:	f001 fa7d 	bl	8009208 <xTaskGetSchedulerState>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d102      	bne.n	8007d1a <xQueueGenericSend+0x9e>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <xQueueGenericSend+0xa2>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e000      	b.n	8007d20 <xQueueGenericSend+0xa4>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10a      	bne.n	8007d3a <xQueueGenericSend+0xbe>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	61fb      	str	r3, [r7, #28]
}
 8007d36:	bf00      	nop
 8007d38:	e7fe      	b.n	8007d38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d3a:	f001 ffeb 	bl	8009d14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d302      	bcc.n	8007d50 <xQueueGenericSend+0xd4>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d129      	bne.n	8007da4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	68b9      	ldr	r1, [r7, #8]
 8007d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d56:	f000 fa0b 	bl	8008170 <prvCopyDataToQueue>
 8007d5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d010      	beq.n	8007d86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	3324      	adds	r3, #36	; 0x24
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 f88d 	bl	8008e88 <xTaskRemoveFromEventList>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d013      	beq.n	8007d9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d74:	4b3f      	ldr	r3, [pc, #252]	; (8007e74 <xQueueGenericSend+0x1f8>)
 8007d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	e00a      	b.n	8007d9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d007      	beq.n	8007d9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d8c:	4b39      	ldr	r3, [pc, #228]	; (8007e74 <xQueueGenericSend+0x1f8>)
 8007d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d9c:	f001 ffea 	bl	8009d74 <vPortExitCritical>
				return pdPASS;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e063      	b.n	8007e6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d103      	bne.n	8007db2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007daa:	f001 ffe3 	bl	8009d74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	e05c      	b.n	8007e6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d106      	bne.n	8007dc6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007db8:	f107 0314 	add.w	r3, r7, #20
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f001 f8c5 	bl	8008f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dc6:	f001 ffd5 	bl	8009d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dca:	f000 fe13 	bl	80089f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dce:	f001 ffa1 	bl	8009d14 <vPortEnterCritical>
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dd8:	b25b      	sxtb	r3, r3
 8007dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dde:	d103      	bne.n	8007de8 <xQueueGenericSend+0x16c>
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dee:	b25b      	sxtb	r3, r3
 8007df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df4:	d103      	bne.n	8007dfe <xQueueGenericSend+0x182>
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dfe:	f001 ffb9 	bl	8009d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e02:	1d3a      	adds	r2, r7, #4
 8007e04:	f107 0314 	add.w	r3, r7, #20
 8007e08:	4611      	mov	r1, r2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f001 f8b4 	bl	8008f78 <xTaskCheckForTimeOut>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d124      	bne.n	8007e60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e18:	f000 faa2 	bl	8008360 <prvIsQueueFull>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d018      	beq.n	8007e54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	3310      	adds	r3, #16
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	4611      	mov	r1, r2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 ffdc 	bl	8008de8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e32:	f000 fa2d 	bl	8008290 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e36:	f000 fdeb 	bl	8008a10 <xTaskResumeAll>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f47f af7c 	bne.w	8007d3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e42:	4b0c      	ldr	r3, [pc, #48]	; (8007e74 <xQueueGenericSend+0x1f8>)
 8007e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	e772      	b.n	8007d3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e56:	f000 fa1b 	bl	8008290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e5a:	f000 fdd9 	bl	8008a10 <xTaskResumeAll>
 8007e5e:	e76c      	b.n	8007d3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e62:	f000 fa15 	bl	8008290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e66:	f000 fdd3 	bl	8008a10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3738      	adds	r7, #56	; 0x38
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	e000ed04 	.word	0xe000ed04

08007e78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b090      	sub	sp, #64	; 0x40
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
 8007e84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10a      	bne.n	8007ea6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d103      	bne.n	8007eb4 <xQueueGenericSendFromISR+0x3c>
 8007eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <xQueueGenericSendFromISR+0x40>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e000      	b.n	8007eba <xQueueGenericSendFromISR+0x42>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10a      	bne.n	8007ed4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ed0:	bf00      	nop
 8007ed2:	e7fe      	b.n	8007ed2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d103      	bne.n	8007ee2 <xQueueGenericSendFromISR+0x6a>
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d101      	bne.n	8007ee6 <xQueueGenericSendFromISR+0x6e>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e000      	b.n	8007ee8 <xQueueGenericSendFromISR+0x70>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	623b      	str	r3, [r7, #32]
}
 8007efe:	bf00      	nop
 8007f00:	e7fe      	b.n	8007f00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f02:	f001 ffe9 	bl	8009ed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f06:	f3ef 8211 	mrs	r2, BASEPRI
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	61fa      	str	r2, [r7, #28]
 8007f1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d302      	bcc.n	8007f34 <xQueueGenericSendFromISR+0xbc>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d12f      	bne.n	8007f94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f4a:	f000 f911 	bl	8008170 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f56:	d112      	bne.n	8007f7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d016      	beq.n	8007f8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	3324      	adds	r3, #36	; 0x24
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 ff8f 	bl	8008e88 <xTaskRemoveFromEventList>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00e      	beq.n	8007f8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00b      	beq.n	8007f8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	e007      	b.n	8007f8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f82:	3301      	adds	r3, #1
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	b25a      	sxtb	r2, r3
 8007f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f92:	e001      	b.n	8007f98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f94:	2300      	movs	r3, #0
 8007f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fa2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3740      	adds	r7, #64	; 0x40
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08c      	sub	sp, #48	; 0x30
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10a      	bne.n	8007fe0 <xQueueReceive+0x30>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	623b      	str	r3, [r7, #32]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d103      	bne.n	8007fee <xQueueReceive+0x3e>
 8007fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <xQueueReceive+0x42>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e000      	b.n	8007ff4 <xQueueReceive+0x44>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <xQueueReceive+0x5e>
	__asm volatile
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	61fb      	str	r3, [r7, #28]
}
 800800a:	bf00      	nop
 800800c:	e7fe      	b.n	800800c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800800e:	f001 f8fb 	bl	8009208 <xTaskGetSchedulerState>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d102      	bne.n	800801e <xQueueReceive+0x6e>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <xQueueReceive+0x72>
 800801e:	2301      	movs	r3, #1
 8008020:	e000      	b.n	8008024 <xQueueReceive+0x74>
 8008022:	2300      	movs	r3, #0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10a      	bne.n	800803e <xQueueReceive+0x8e>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	61bb      	str	r3, [r7, #24]
}
 800803a:	bf00      	nop
 800803c:	e7fe      	b.n	800803c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800803e:	f001 fe69 	bl	8009d14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008046:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	2b00      	cmp	r3, #0
 800804c:	d01f      	beq.n	800808e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008052:	f000 f8f7 	bl	8008244 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	1e5a      	subs	r2, r3, #1
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00f      	beq.n	8008086 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008068:	3310      	adds	r3, #16
 800806a:	4618      	mov	r0, r3
 800806c:	f000 ff0c 	bl	8008e88 <xTaskRemoveFromEventList>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008076:	4b3d      	ldr	r3, [pc, #244]	; (800816c <xQueueReceive+0x1bc>)
 8008078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008086:	f001 fe75 	bl	8009d74 <vPortExitCritical>
				return pdPASS;
 800808a:	2301      	movs	r3, #1
 800808c:	e069      	b.n	8008162 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d103      	bne.n	800809c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008094:	f001 fe6e 	bl	8009d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008098:	2300      	movs	r3, #0
 800809a:	e062      	b.n	8008162 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800809c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080a2:	f107 0310 	add.w	r3, r7, #16
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 ff50 	bl	8008f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080ac:	2301      	movs	r3, #1
 80080ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080b0:	f001 fe60 	bl	8009d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080b4:	f000 fc9e 	bl	80089f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080b8:	f001 fe2c 	bl	8009d14 <vPortEnterCritical>
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080c2:	b25b      	sxtb	r3, r3
 80080c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c8:	d103      	bne.n	80080d2 <xQueueReceive+0x122>
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080d8:	b25b      	sxtb	r3, r3
 80080da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080de:	d103      	bne.n	80080e8 <xQueueReceive+0x138>
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080e8:	f001 fe44 	bl	8009d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080ec:	1d3a      	adds	r2, r7, #4
 80080ee:	f107 0310 	add.w	r3, r7, #16
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 ff3f 	bl	8008f78 <xTaskCheckForTimeOut>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d123      	bne.n	8008148 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008102:	f000 f917 	bl	8008334 <prvIsQueueEmpty>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d017      	beq.n	800813c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800810c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810e:	3324      	adds	r3, #36	; 0x24
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	4611      	mov	r1, r2
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fe67 	bl	8008de8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800811a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800811c:	f000 f8b8 	bl	8008290 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008120:	f000 fc76 	bl	8008a10 <xTaskResumeAll>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d189      	bne.n	800803e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800812a:	4b10      	ldr	r3, [pc, #64]	; (800816c <xQueueReceive+0x1bc>)
 800812c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	e780      	b.n	800803e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800813c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800813e:	f000 f8a7 	bl	8008290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008142:	f000 fc65 	bl	8008a10 <xTaskResumeAll>
 8008146:	e77a      	b.n	800803e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800814a:	f000 f8a1 	bl	8008290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800814e:	f000 fc5f 	bl	8008a10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008154:	f000 f8ee 	bl	8008334 <prvIsQueueEmpty>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	f43f af6f 	beq.w	800803e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008160:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008162:	4618      	mov	r0, r3
 8008164:	3730      	adds	r7, #48	; 0x30
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	e000ed04 	.word	0xe000ed04

08008170 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800817c:	2300      	movs	r3, #0
 800817e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008184:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10d      	bne.n	80081aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d14d      	bne.n	8008232 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	4618      	mov	r0, r3
 800819c:	f001 f852 	bl	8009244 <xTaskPriorityDisinherit>
 80081a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	609a      	str	r2, [r3, #8]
 80081a8:	e043      	b.n	8008232 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d119      	bne.n	80081e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6858      	ldr	r0, [r3, #4]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	461a      	mov	r2, r3
 80081ba:	68b9      	ldr	r1, [r7, #8]
 80081bc:	f002 f9d9 	bl	800a572 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	441a      	add	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d32b      	bcc.n	8008232 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	605a      	str	r2, [r3, #4]
 80081e2:	e026      	b.n	8008232 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	68d8      	ldr	r0, [r3, #12]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ec:	461a      	mov	r2, r3
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	f002 f9bf 	bl	800a572 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fc:	425b      	negs	r3, r3
 80081fe:	441a      	add	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d207      	bcs.n	8008220 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008218:	425b      	negs	r3, r3
 800821a:	441a      	add	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d105      	bne.n	8008232 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	3b01      	subs	r3, #1
 8008230:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800823a:	697b      	ldr	r3, [r7, #20]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	2b00      	cmp	r3, #0
 8008254:	d018      	beq.n	8008288 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	441a      	add	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	429a      	cmp	r2, r3
 800826e:	d303      	bcc.n	8008278 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68d9      	ldr	r1, [r3, #12]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008280:	461a      	mov	r2, r3
 8008282:	6838      	ldr	r0, [r7, #0]
 8008284:	f002 f975 	bl	800a572 <memcpy>
	}
}
 8008288:	bf00      	nop
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008298:	f001 fd3c 	bl	8009d14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082a4:	e011      	b.n	80082ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d012      	beq.n	80082d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3324      	adds	r3, #36	; 0x24
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fde8 	bl	8008e88 <xTaskRemoveFromEventList>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082be:	f000 febd 	bl	800903c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	dce9      	bgt.n	80082a6 <prvUnlockQueue+0x16>
 80082d2:	e000      	b.n	80082d6 <prvUnlockQueue+0x46>
					break;
 80082d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	22ff      	movs	r2, #255	; 0xff
 80082da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082de:	f001 fd49 	bl	8009d74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082e2:	f001 fd17 	bl	8009d14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082ee:	e011      	b.n	8008314 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d012      	beq.n	800831e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3310      	adds	r3, #16
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fdc3 	bl	8008e88 <xTaskRemoveFromEventList>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008308:	f000 fe98 	bl	800903c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800830c:	7bbb      	ldrb	r3, [r7, #14]
 800830e:	3b01      	subs	r3, #1
 8008310:	b2db      	uxtb	r3, r3
 8008312:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008318:	2b00      	cmp	r3, #0
 800831a:	dce9      	bgt.n	80082f0 <prvUnlockQueue+0x60>
 800831c:	e000      	b.n	8008320 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800831e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	22ff      	movs	r2, #255	; 0xff
 8008324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008328:	f001 fd24 	bl	8009d74 <vPortExitCritical>
}
 800832c:	bf00      	nop
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800833c:	f001 fcea 	bl	8009d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008344:	2b00      	cmp	r3, #0
 8008346:	d102      	bne.n	800834e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008348:	2301      	movs	r3, #1
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	e001      	b.n	8008352 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800834e:	2300      	movs	r3, #0
 8008350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008352:	f001 fd0f 	bl	8009d74 <vPortExitCritical>

	return xReturn;
 8008356:	68fb      	ldr	r3, [r7, #12]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008368:	f001 fcd4 	bl	8009d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008374:	429a      	cmp	r2, r3
 8008376:	d102      	bne.n	800837e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008378:	2301      	movs	r3, #1
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	e001      	b.n	8008382 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800837e:	2300      	movs	r3, #0
 8008380:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008382:	f001 fcf7 	bl	8009d74 <vPortExitCritical>

	return xReturn;
 8008386:	68fb      	ldr	r3, [r7, #12]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e014      	b.n	80083ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083a0:	4a0f      	ldr	r2, [pc, #60]	; (80083e0 <vQueueAddToRegistry+0x50>)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10b      	bne.n	80083c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083ac:	490c      	ldr	r1, [pc, #48]	; (80083e0 <vQueueAddToRegistry+0x50>)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083b6:	4a0a      	ldr	r2, [pc, #40]	; (80083e0 <vQueueAddToRegistry+0x50>)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	4413      	add	r3, r2
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083c2:	e006      	b.n	80083d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3301      	adds	r3, #1
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b07      	cmp	r3, #7
 80083ce:	d9e7      	bls.n	80083a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083d0:	bf00      	nop
 80083d2:	bf00      	nop
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20000bfc 	.word	0x20000bfc

080083e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083f4:	f001 fc8e 	bl	8009d14 <vPortEnterCritical>
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083fe:	b25b      	sxtb	r3, r3
 8008400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008404:	d103      	bne.n	800840e <vQueueWaitForMessageRestricted+0x2a>
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008414:	b25b      	sxtb	r3, r3
 8008416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841a:	d103      	bne.n	8008424 <vQueueWaitForMessageRestricted+0x40>
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008424:	f001 fca6 	bl	8009d74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	2b00      	cmp	r3, #0
 800842e:	d106      	bne.n	800843e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	3324      	adds	r3, #36	; 0x24
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	68b9      	ldr	r1, [r7, #8]
 8008438:	4618      	mov	r0, r3
 800843a:	f000 fcf9 	bl	8008e30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800843e:	6978      	ldr	r0, [r7, #20]
 8008440:	f7ff ff26 	bl	8008290 <prvUnlockQueue>
	}
 8008444:	bf00      	nop
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08e      	sub	sp, #56	; 0x38
 8008450:	af04      	add	r7, sp, #16
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800845a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10a      	bne.n	8008476 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	623b      	str	r3, [r7, #32]
}
 8008472:	bf00      	nop
 8008474:	e7fe      	b.n	8008474 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <xTaskCreateStatic+0x46>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	61fb      	str	r3, [r7, #28]
}
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008492:	23b4      	movs	r3, #180	; 0xb4
 8008494:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	2bb4      	cmp	r3, #180	; 0xb4
 800849a:	d00a      	beq.n	80084b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800849c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	61bb      	str	r3, [r7, #24]
}
 80084ae:	bf00      	nop
 80084b0:	e7fe      	b.n	80084b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d01e      	beq.n	80084f8 <xTaskCreateStatic+0xac>
 80084ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d01b      	beq.n	80084f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	2202      	movs	r2, #2
 80084ce:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084d2:	2300      	movs	r3, #0
 80084d4:	9303      	str	r3, [sp, #12]
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	9302      	str	r3, [sp, #8]
 80084da:	f107 0314 	add.w	r3, r7, #20
 80084de:	9301      	str	r3, [sp, #4]
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	68b9      	ldr	r1, [r7, #8]
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 f850 	bl	8008590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084f2:	f000 f8f3 	bl	80086dc <prvAddNewTaskToReadyList>
 80084f6:	e001      	b.n	80084fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80084f8:	2300      	movs	r3, #0
 80084fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084fc:	697b      	ldr	r3, [r7, #20]
	}
 80084fe:	4618      	mov	r0, r3
 8008500:	3728      	adds	r7, #40	; 0x28
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008506:	b580      	push	{r7, lr}
 8008508:	b08c      	sub	sp, #48	; 0x30
 800850a:	af04      	add	r7, sp, #16
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	603b      	str	r3, [r7, #0]
 8008512:	4613      	mov	r3, r2
 8008514:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008516:	88fb      	ldrh	r3, [r7, #6]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4618      	mov	r0, r3
 800851c:	f001 fd1c 	bl	8009f58 <pvPortMalloc>
 8008520:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00e      	beq.n	8008546 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008528:	20b4      	movs	r0, #180	; 0xb4
 800852a:	f001 fd15 	bl	8009f58 <pvPortMalloc>
 800852e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	631a      	str	r2, [r3, #48]	; 0x30
 800853c:	e005      	b.n	800854a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800853e:	6978      	ldr	r0, [r7, #20]
 8008540:	f001 fdd6 	bl	800a0f0 <vPortFree>
 8008544:	e001      	b.n	800854a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008546:	2300      	movs	r3, #0
 8008548:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d017      	beq.n	8008580 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008558:	88fa      	ldrh	r2, [r7, #6]
 800855a:	2300      	movs	r3, #0
 800855c:	9303      	str	r3, [sp, #12]
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	9302      	str	r3, [sp, #8]
 8008562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 f80e 	bl	8008590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008574:	69f8      	ldr	r0, [r7, #28]
 8008576:	f000 f8b1 	bl	80086dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800857a:	2301      	movs	r3, #1
 800857c:	61bb      	str	r3, [r7, #24]
 800857e:	e002      	b.n	8008586 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008580:	f04f 33ff 	mov.w	r3, #4294967295
 8008584:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008586:	69bb      	ldr	r3, [r7, #24]
	}
 8008588:	4618      	mov	r0, r3
 800858a:	3720      	adds	r7, #32
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
 800859c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	461a      	mov	r2, r3
 80085a8:	21a5      	movs	r1, #165	; 0xa5
 80085aa:	f001 fff0 	bl	800a58e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085b8:	3b01      	subs	r3, #1
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	f023 0307 	bic.w	r3, r3, #7
 80085c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	f003 0307 	and.w	r3, r3, #7
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00a      	beq.n	80085e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	617b      	str	r3, [r7, #20]
}
 80085e4:	bf00      	nop
 80085e6:	e7fe      	b.n	80085e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d01f      	beq.n	800862e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085ee:	2300      	movs	r3, #0
 80085f0:	61fb      	str	r3, [r7, #28]
 80085f2:	e012      	b.n	800861a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	4413      	add	r3, r2
 80085fa:	7819      	ldrb	r1, [r3, #0]
 80085fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	4413      	add	r3, r2
 8008602:	3334      	adds	r3, #52	; 0x34
 8008604:	460a      	mov	r2, r1
 8008606:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	4413      	add	r3, r2
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d006      	beq.n	8008622 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	3301      	adds	r3, #1
 8008618:	61fb      	str	r3, [r7, #28]
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	2b0f      	cmp	r3, #15
 800861e:	d9e9      	bls.n	80085f4 <prvInitialiseNewTask+0x64>
 8008620:	e000      	b.n	8008624 <prvInitialiseNewTask+0x94>
			{
				break;
 8008622:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800862c:	e003      	b.n	8008636 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	2b06      	cmp	r3, #6
 800863a:	d901      	bls.n	8008640 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800863c:	2306      	movs	r3, #6
 800863e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008644:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800864a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800864c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864e:	2200      	movs	r2, #0
 8008650:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	3304      	adds	r3, #4
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff f942 	bl	80078e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	3318      	adds	r3, #24
 8008660:	4618      	mov	r0, r3
 8008662:	f7ff f93d 	bl	80078e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800866a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	f1c3 0207 	rsb	r2, r3, #7
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800867a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	2200      	movs	r2, #0
 8008680:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	2200      	movs	r2, #0
 8008688:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800868c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868e:	334c      	adds	r3, #76	; 0x4c
 8008690:	2260      	movs	r2, #96	; 0x60
 8008692:	2100      	movs	r1, #0
 8008694:	4618      	mov	r0, r3
 8008696:	f001 ff7a 	bl	800a58e <memset>
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	4a0c      	ldr	r2, [pc, #48]	; (80086d0 <prvInitialiseNewTask+0x140>)
 800869e:	651a      	str	r2, [r3, #80]	; 0x50
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	4a0c      	ldr	r2, [pc, #48]	; (80086d4 <prvInitialiseNewTask+0x144>)
 80086a4:	655a      	str	r2, [r3, #84]	; 0x54
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	4a0b      	ldr	r2, [pc, #44]	; (80086d8 <prvInitialiseNewTask+0x148>)
 80086aa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	68f9      	ldr	r1, [r7, #12]
 80086b0:	69b8      	ldr	r0, [r7, #24]
 80086b2:	f001 fa01 	bl	8009ab8 <pxPortInitialiseStack>
 80086b6:	4602      	mov	r2, r0
 80086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086c8:	bf00      	nop
 80086ca:	3720      	adds	r7, #32
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	0800ee78 	.word	0x0800ee78
 80086d4:	0800ee98 	.word	0x0800ee98
 80086d8:	0800ee58 	.word	0x0800ee58

080086dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086e4:	f001 fb16 	bl	8009d14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086e8:	4b2a      	ldr	r3, [pc, #168]	; (8008794 <prvAddNewTaskToReadyList+0xb8>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3301      	adds	r3, #1
 80086ee:	4a29      	ldr	r2, [pc, #164]	; (8008794 <prvAddNewTaskToReadyList+0xb8>)
 80086f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086f2:	4b29      	ldr	r3, [pc, #164]	; (8008798 <prvAddNewTaskToReadyList+0xbc>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d109      	bne.n	800870e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086fa:	4a27      	ldr	r2, [pc, #156]	; (8008798 <prvAddNewTaskToReadyList+0xbc>)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008700:	4b24      	ldr	r3, [pc, #144]	; (8008794 <prvAddNewTaskToReadyList+0xb8>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d110      	bne.n	800872a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008708:	f000 fcbc 	bl	8009084 <prvInitialiseTaskLists>
 800870c:	e00d      	b.n	800872a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800870e:	4b23      	ldr	r3, [pc, #140]	; (800879c <prvAddNewTaskToReadyList+0xc0>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d109      	bne.n	800872a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008716:	4b20      	ldr	r3, [pc, #128]	; (8008798 <prvAddNewTaskToReadyList+0xbc>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008720:	429a      	cmp	r2, r3
 8008722:	d802      	bhi.n	800872a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008724:	4a1c      	ldr	r2, [pc, #112]	; (8008798 <prvAddNewTaskToReadyList+0xbc>)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800872a:	4b1d      	ldr	r3, [pc, #116]	; (80087a0 <prvAddNewTaskToReadyList+0xc4>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3301      	adds	r3, #1
 8008730:	4a1b      	ldr	r2, [pc, #108]	; (80087a0 <prvAddNewTaskToReadyList+0xc4>)
 8008732:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008738:	2201      	movs	r2, #1
 800873a:	409a      	lsls	r2, r3
 800873c:	4b19      	ldr	r3, [pc, #100]	; (80087a4 <prvAddNewTaskToReadyList+0xc8>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4313      	orrs	r3, r2
 8008742:	4a18      	ldr	r2, [pc, #96]	; (80087a4 <prvAddNewTaskToReadyList+0xc8>)
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4a15      	ldr	r2, [pc, #84]	; (80087a8 <prvAddNewTaskToReadyList+0xcc>)
 8008754:	441a      	add	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	3304      	adds	r3, #4
 800875a:	4619      	mov	r1, r3
 800875c:	4610      	mov	r0, r2
 800875e:	f7ff f8cc 	bl	80078fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008762:	f001 fb07 	bl	8009d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008766:	4b0d      	ldr	r3, [pc, #52]	; (800879c <prvAddNewTaskToReadyList+0xc0>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00e      	beq.n	800878c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800876e:	4b0a      	ldr	r3, [pc, #40]	; (8008798 <prvAddNewTaskToReadyList+0xbc>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008778:	429a      	cmp	r2, r3
 800877a:	d207      	bcs.n	800878c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800877c:	4b0b      	ldr	r3, [pc, #44]	; (80087ac <prvAddNewTaskToReadyList+0xd0>)
 800877e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800878c:	bf00      	nop
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	20000d3c 	.word	0x20000d3c
 8008798:	20000c3c 	.word	0x20000c3c
 800879c:	20000d48 	.word	0x20000d48
 80087a0:	20000d58 	.word	0x20000d58
 80087a4:	20000d44 	.word	0x20000d44
 80087a8:	20000c40 	.word	0x20000c40
 80087ac:	e000ed04 	.word	0xe000ed04

080087b0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08a      	sub	sp, #40	; 0x28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80087ba:	2300      	movs	r3, #0
 80087bc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <vTaskDelayUntil+0x2a>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	617b      	str	r3, [r7, #20]
}
 80087d6:	bf00      	nop
 80087d8:	e7fe      	b.n	80087d8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10a      	bne.n	80087f6 <vTaskDelayUntil+0x46>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	613b      	str	r3, [r7, #16]
}
 80087f2:	bf00      	nop
 80087f4:	e7fe      	b.n	80087f4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80087f6:	4b2a      	ldr	r3, [pc, #168]	; (80088a0 <vTaskDelayUntil+0xf0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00a      	beq.n	8008814 <vTaskDelayUntil+0x64>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	60fb      	str	r3, [r7, #12]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008814:	f000 f8ee 	bl	80089f4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008818:	4b22      	ldr	r3, [pc, #136]	; (80088a4 <vTaskDelayUntil+0xf4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	4413      	add	r3, r2
 8008826:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6a3a      	ldr	r2, [r7, #32]
 800882e:	429a      	cmp	r2, r3
 8008830:	d20b      	bcs.n	800884a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	429a      	cmp	r2, r3
 800883a:	d211      	bcs.n	8008860 <vTaskDelayUntil+0xb0>
 800883c:	69fa      	ldr	r2, [r7, #28]
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	429a      	cmp	r2, r3
 8008842:	d90d      	bls.n	8008860 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008844:	2301      	movs	r3, #1
 8008846:	627b      	str	r3, [r7, #36]	; 0x24
 8008848:	e00a      	b.n	8008860 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	69fa      	ldr	r2, [r7, #28]
 8008850:	429a      	cmp	r2, r3
 8008852:	d303      	bcc.n	800885c <vTaskDelayUntil+0xac>
 8008854:	69fa      	ldr	r2, [r7, #28]
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	429a      	cmp	r2, r3
 800885a:	d901      	bls.n	8008860 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800885c:	2301      	movs	r3, #1
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	69fa      	ldr	r2, [r7, #28]
 8008864:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	2b00      	cmp	r3, #0
 800886a:	d006      	beq.n	800887a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800886c:	69fa      	ldr	r2, [r7, #28]
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	2100      	movs	r1, #0
 8008874:	4618      	mov	r0, r3
 8008876:	f000 fd6b 	bl	8009350 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800887a:	f000 f8c9 	bl	8008a10 <xTaskResumeAll>
 800887e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d107      	bne.n	8008896 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008886:	4b08      	ldr	r3, [pc, #32]	; (80088a8 <vTaskDelayUntil+0xf8>)
 8008888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008896:	bf00      	nop
 8008898:	3728      	adds	r7, #40	; 0x28
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	20000d64 	.word	0x20000d64
 80088a4:	20000d40 	.word	0x20000d40
 80088a8:	e000ed04 	.word	0xe000ed04

080088ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088b4:	2300      	movs	r3, #0
 80088b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d017      	beq.n	80088ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088be:	4b13      	ldr	r3, [pc, #76]	; (800890c <vTaskDelay+0x60>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00a      	beq.n	80088dc <vTaskDelay+0x30>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	60bb      	str	r3, [r7, #8]
}
 80088d8:	bf00      	nop
 80088da:	e7fe      	b.n	80088da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80088dc:	f000 f88a 	bl	80089f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088e0:	2100      	movs	r1, #0
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fd34 	bl	8009350 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088e8:	f000 f892 	bl	8008a10 <xTaskResumeAll>
 80088ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d107      	bne.n	8008904 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80088f4:	4b06      	ldr	r3, [pc, #24]	; (8008910 <vTaskDelay+0x64>)
 80088f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008904:	bf00      	nop
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	20000d64 	.word	0x20000d64
 8008910:	e000ed04 	.word	0xe000ed04

08008914 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08a      	sub	sp, #40	; 0x28
 8008918:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800891a:	2300      	movs	r3, #0
 800891c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800891e:	2300      	movs	r3, #0
 8008920:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008922:	463a      	mov	r2, r7
 8008924:	1d39      	adds	r1, r7, #4
 8008926:	f107 0308 	add.w	r3, r7, #8
 800892a:	4618      	mov	r0, r3
 800892c:	f7f8 fb96 	bl	800105c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	9202      	str	r2, [sp, #8]
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	2300      	movs	r3, #0
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	2300      	movs	r3, #0
 8008940:	460a      	mov	r2, r1
 8008942:	4924      	ldr	r1, [pc, #144]	; (80089d4 <vTaskStartScheduler+0xc0>)
 8008944:	4824      	ldr	r0, [pc, #144]	; (80089d8 <vTaskStartScheduler+0xc4>)
 8008946:	f7ff fd81 	bl	800844c <xTaskCreateStatic>
 800894a:	4603      	mov	r3, r0
 800894c:	4a23      	ldr	r2, [pc, #140]	; (80089dc <vTaskStartScheduler+0xc8>)
 800894e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008950:	4b22      	ldr	r3, [pc, #136]	; (80089dc <vTaskStartScheduler+0xc8>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008958:	2301      	movs	r3, #1
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	e001      	b.n	8008962 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800895e:	2300      	movs	r3, #0
 8008960:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d102      	bne.n	800896e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008968:	f000 fd58 	bl	800941c <xTimerCreateTimerTask>
 800896c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d11b      	bne.n	80089ac <vTaskStartScheduler+0x98>
	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	613b      	str	r3, [r7, #16]
}
 8008986:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008988:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <vTaskStartScheduler+0xcc>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	334c      	adds	r3, #76	; 0x4c
 800898e:	4a15      	ldr	r2, [pc, #84]	; (80089e4 <vTaskStartScheduler+0xd0>)
 8008990:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008992:	4b15      	ldr	r3, [pc, #84]	; (80089e8 <vTaskStartScheduler+0xd4>)
 8008994:	f04f 32ff 	mov.w	r2, #4294967295
 8008998:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800899a:	4b14      	ldr	r3, [pc, #80]	; (80089ec <vTaskStartScheduler+0xd8>)
 800899c:	2201      	movs	r2, #1
 800899e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80089a0:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <vTaskStartScheduler+0xdc>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80089a6:	f001 f913 	bl	8009bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089aa:	e00e      	b.n	80089ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b2:	d10a      	bne.n	80089ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	60fb      	str	r3, [r7, #12]
}
 80089c6:	bf00      	nop
 80089c8:	e7fe      	b.n	80089c8 <vTaskStartScheduler+0xb4>
}
 80089ca:	bf00      	nop
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	0800edf8 	.word	0x0800edf8
 80089d8:	08009055 	.word	0x08009055
 80089dc:	20000d60 	.word	0x20000d60
 80089e0:	20000c3c 	.word	0x20000c3c
 80089e4:	20000078 	.word	0x20000078
 80089e8:	20000d5c 	.word	0x20000d5c
 80089ec:	20000d48 	.word	0x20000d48
 80089f0:	20000d40 	.word	0x20000d40

080089f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80089f8:	4b04      	ldr	r3, [pc, #16]	; (8008a0c <vTaskSuspendAll+0x18>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3301      	adds	r3, #1
 80089fe:	4a03      	ldr	r2, [pc, #12]	; (8008a0c <vTaskSuspendAll+0x18>)
 8008a00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008a02:	bf00      	nop
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	20000d64 	.word	0x20000d64

08008a10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a1e:	4b41      	ldr	r3, [pc, #260]	; (8008b24 <xTaskResumeAll+0x114>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10a      	bne.n	8008a3c <xTaskResumeAll+0x2c>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	603b      	str	r3, [r7, #0]
}
 8008a38:	bf00      	nop
 8008a3a:	e7fe      	b.n	8008a3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a3c:	f001 f96a 	bl	8009d14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a40:	4b38      	ldr	r3, [pc, #224]	; (8008b24 <xTaskResumeAll+0x114>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	4a37      	ldr	r2, [pc, #220]	; (8008b24 <xTaskResumeAll+0x114>)
 8008a48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a4a:	4b36      	ldr	r3, [pc, #216]	; (8008b24 <xTaskResumeAll+0x114>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d161      	bne.n	8008b16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a52:	4b35      	ldr	r3, [pc, #212]	; (8008b28 <xTaskResumeAll+0x118>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d05d      	beq.n	8008b16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a5a:	e02e      	b.n	8008aba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a5c:	4b33      	ldr	r3, [pc, #204]	; (8008b2c <xTaskResumeAll+0x11c>)
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3318      	adds	r3, #24
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe ffa3 	bl	80079b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3304      	adds	r3, #4
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fe ff9e 	bl	80079b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	409a      	lsls	r2, r3
 8008a80:	4b2b      	ldr	r3, [pc, #172]	; (8008b30 <xTaskResumeAll+0x120>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	4a2a      	ldr	r2, [pc, #168]	; (8008b30 <xTaskResumeAll+0x120>)
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8e:	4613      	mov	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4a27      	ldr	r2, [pc, #156]	; (8008b34 <xTaskResumeAll+0x124>)
 8008a98:	441a      	add	r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f7fe ff2a 	bl	80078fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aaa:	4b23      	ldr	r3, [pc, #140]	; (8008b38 <xTaskResumeAll+0x128>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d302      	bcc.n	8008aba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008ab4:	4b21      	ldr	r3, [pc, #132]	; (8008b3c <xTaskResumeAll+0x12c>)
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008aba:	4b1c      	ldr	r3, [pc, #112]	; (8008b2c <xTaskResumeAll+0x11c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1cc      	bne.n	8008a5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ac8:	f000 fb7e 	bl	80091c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008acc:	4b1c      	ldr	r3, [pc, #112]	; (8008b40 <xTaskResumeAll+0x130>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d010      	beq.n	8008afa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ad8:	f000 f846 	bl	8008b68 <xTaskIncrementTick>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008ae2:	4b16      	ldr	r3, [pc, #88]	; (8008b3c <xTaskResumeAll+0x12c>)
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1f1      	bne.n	8008ad8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008af4:	4b12      	ldr	r3, [pc, #72]	; (8008b40 <xTaskResumeAll+0x130>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008afa:	4b10      	ldr	r3, [pc, #64]	; (8008b3c <xTaskResumeAll+0x12c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d009      	beq.n	8008b16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b02:	2301      	movs	r3, #1
 8008b04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b06:	4b0f      	ldr	r3, [pc, #60]	; (8008b44 <xTaskResumeAll+0x134>)
 8008b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b16:	f001 f92d 	bl	8009d74 <vPortExitCritical>

	return xAlreadyYielded;
 8008b1a:	68bb      	ldr	r3, [r7, #8]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20000d64 	.word	0x20000d64
 8008b28:	20000d3c 	.word	0x20000d3c
 8008b2c:	20000cfc 	.word	0x20000cfc
 8008b30:	20000d44 	.word	0x20000d44
 8008b34:	20000c40 	.word	0x20000c40
 8008b38:	20000c3c 	.word	0x20000c3c
 8008b3c:	20000d50 	.word	0x20000d50
 8008b40:	20000d4c 	.word	0x20000d4c
 8008b44:	e000ed04 	.word	0xe000ed04

08008b48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b4e:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <xTaskGetTickCount+0x1c>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b54:	687b      	ldr	r3, [r7, #4]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	20000d40 	.word	0x20000d40

08008b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b72:	4b4e      	ldr	r3, [pc, #312]	; (8008cac <xTaskIncrementTick+0x144>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f040 808e 	bne.w	8008c98 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b7c:	4b4c      	ldr	r3, [pc, #304]	; (8008cb0 <xTaskIncrementTick+0x148>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3301      	adds	r3, #1
 8008b82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b84:	4a4a      	ldr	r2, [pc, #296]	; (8008cb0 <xTaskIncrementTick+0x148>)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d120      	bne.n	8008bd2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b90:	4b48      	ldr	r3, [pc, #288]	; (8008cb4 <xTaskIncrementTick+0x14c>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	603b      	str	r3, [r7, #0]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <xTaskIncrementTick+0x46>
 8008bb0:	4b40      	ldr	r3, [pc, #256]	; (8008cb4 <xTaskIncrementTick+0x14c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	4b40      	ldr	r3, [pc, #256]	; (8008cb8 <xTaskIncrementTick+0x150>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a3e      	ldr	r2, [pc, #248]	; (8008cb4 <xTaskIncrementTick+0x14c>)
 8008bbc:	6013      	str	r3, [r2, #0]
 8008bbe:	4a3e      	ldr	r2, [pc, #248]	; (8008cb8 <xTaskIncrementTick+0x150>)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	4b3d      	ldr	r3, [pc, #244]	; (8008cbc <xTaskIncrementTick+0x154>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	4a3c      	ldr	r2, [pc, #240]	; (8008cbc <xTaskIncrementTick+0x154>)
 8008bcc:	6013      	str	r3, [r2, #0]
 8008bce:	f000 fafb 	bl	80091c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008bd2:	4b3b      	ldr	r3, [pc, #236]	; (8008cc0 <xTaskIncrementTick+0x158>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d348      	bcc.n	8008c6e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bdc:	4b35      	ldr	r3, [pc, #212]	; (8008cb4 <xTaskIncrementTick+0x14c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d104      	bne.n	8008bf0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be6:	4b36      	ldr	r3, [pc, #216]	; (8008cc0 <xTaskIncrementTick+0x158>)
 8008be8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bec:	601a      	str	r2, [r3, #0]
					break;
 8008bee:	e03e      	b.n	8008c6e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bf0:	4b30      	ldr	r3, [pc, #192]	; (8008cb4 <xTaskIncrementTick+0x14c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d203      	bcs.n	8008c10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c08:	4a2d      	ldr	r2, [pc, #180]	; (8008cc0 <xTaskIncrementTick+0x158>)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c0e:	e02e      	b.n	8008c6e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	3304      	adds	r3, #4
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fe fecd 	bl	80079b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d004      	beq.n	8008c2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	3318      	adds	r3, #24
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe fec4 	bl	80079b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c30:	2201      	movs	r2, #1
 8008c32:	409a      	lsls	r2, r3
 8008c34:	4b23      	ldr	r3, [pc, #140]	; (8008cc4 <xTaskIncrementTick+0x15c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	4a22      	ldr	r2, [pc, #136]	; (8008cc4 <xTaskIncrementTick+0x15c>)
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c42:	4613      	mov	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4a1f      	ldr	r2, [pc, #124]	; (8008cc8 <xTaskIncrementTick+0x160>)
 8008c4c:	441a      	add	r2, r3
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	3304      	adds	r3, #4
 8008c52:	4619      	mov	r1, r3
 8008c54:	4610      	mov	r0, r2
 8008c56:	f7fe fe50 	bl	80078fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5e:	4b1b      	ldr	r3, [pc, #108]	; (8008ccc <xTaskIncrementTick+0x164>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d3b9      	bcc.n	8008bdc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c6c:	e7b6      	b.n	8008bdc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c6e:	4b17      	ldr	r3, [pc, #92]	; (8008ccc <xTaskIncrementTick+0x164>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c74:	4914      	ldr	r1, [pc, #80]	; (8008cc8 <xTaskIncrementTick+0x160>)
 8008c76:	4613      	mov	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d901      	bls.n	8008c8a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008c86:	2301      	movs	r3, #1
 8008c88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c8a:	4b11      	ldr	r3, [pc, #68]	; (8008cd0 <xTaskIncrementTick+0x168>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d007      	beq.n	8008ca2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008c92:	2301      	movs	r3, #1
 8008c94:	617b      	str	r3, [r7, #20]
 8008c96:	e004      	b.n	8008ca2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c98:	4b0e      	ldr	r3, [pc, #56]	; (8008cd4 <xTaskIncrementTick+0x16c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	4a0d      	ldr	r2, [pc, #52]	; (8008cd4 <xTaskIncrementTick+0x16c>)
 8008ca0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ca2:	697b      	ldr	r3, [r7, #20]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	20000d64 	.word	0x20000d64
 8008cb0:	20000d40 	.word	0x20000d40
 8008cb4:	20000cf4 	.word	0x20000cf4
 8008cb8:	20000cf8 	.word	0x20000cf8
 8008cbc:	20000d54 	.word	0x20000d54
 8008cc0:	20000d5c 	.word	0x20000d5c
 8008cc4:	20000d44 	.word	0x20000d44
 8008cc8:	20000c40 	.word	0x20000c40
 8008ccc:	20000c3c 	.word	0x20000c3c
 8008cd0:	20000d50 	.word	0x20000d50
 8008cd4:	20000d4c 	.word	0x20000d4c

08008cd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b088      	sub	sp, #32
 8008cdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008cde:	4b3c      	ldr	r3, [pc, #240]	; (8008dd0 <vTaskSwitchContext+0xf8>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ce6:	4b3b      	ldr	r3, [pc, #236]	; (8008dd4 <vTaskSwitchContext+0xfc>)
 8008ce8:	2201      	movs	r2, #1
 8008cea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008cec:	e06b      	b.n	8008dc6 <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 8008cee:	4b39      	ldr	r3, [pc, #228]	; (8008dd4 <vTaskSwitchContext+0xfc>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008cf4:	4b38      	ldr	r3, [pc, #224]	; (8008dd8 <vTaskSwitchContext+0x100>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfa:	61fb      	str	r3, [r7, #28]
 8008cfc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008d00:	61bb      	str	r3, [r7, #24]
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d111      	bne.n	8008d30 <vTaskSwitchContext+0x58>
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d10b      	bne.n	8008d30 <vTaskSwitchContext+0x58>
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d105      	bne.n	8008d30 <vTaskSwitchContext+0x58>
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	330c      	adds	r3, #12
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d008      	beq.n	8008d42 <vTaskSwitchContext+0x6a>
 8008d30:	4b29      	ldr	r3, [pc, #164]	; (8008dd8 <vTaskSwitchContext+0x100>)
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	4b28      	ldr	r3, [pc, #160]	; (8008dd8 <vTaskSwitchContext+0x100>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3334      	adds	r3, #52	; 0x34
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	f7f8 f981 	bl	8001044 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d42:	4b26      	ldr	r3, [pc, #152]	; (8008ddc <vTaskSwitchContext+0x104>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	fab3 f383 	clz	r3, r3
 8008d4e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008d50:	7afb      	ldrb	r3, [r7, #11]
 8008d52:	f1c3 031f 	rsb	r3, r3, #31
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	4921      	ldr	r1, [pc, #132]	; (8008de0 <vTaskSwitchContext+0x108>)
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	440b      	add	r3, r1
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10a      	bne.n	8008d82 <vTaskSwitchContext+0xaa>
	__asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	607b      	str	r3, [r7, #4]
}
 8008d7e:	bf00      	nop
 8008d80:	e7fe      	b.n	8008d80 <vTaskSwitchContext+0xa8>
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	4613      	mov	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4a14      	ldr	r2, [pc, #80]	; (8008de0 <vTaskSwitchContext+0x108>)
 8008d8e:	4413      	add	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	605a      	str	r2, [r3, #4]
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	3308      	adds	r3, #8
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d104      	bne.n	8008db2 <vTaskSwitchContext+0xda>
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	605a      	str	r2, [r3, #4]
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	4a07      	ldr	r2, [pc, #28]	; (8008dd8 <vTaskSwitchContext+0x100>)
 8008dba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008dbc:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <vTaskSwitchContext+0x100>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	334c      	adds	r3, #76	; 0x4c
 8008dc2:	4a08      	ldr	r2, [pc, #32]	; (8008de4 <vTaskSwitchContext+0x10c>)
 8008dc4:	6013      	str	r3, [r2, #0]
}
 8008dc6:	bf00      	nop
 8008dc8:	3720      	adds	r7, #32
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20000d64 	.word	0x20000d64
 8008dd4:	20000d50 	.word	0x20000d50
 8008dd8:	20000c3c 	.word	0x20000c3c
 8008ddc:	20000d44 	.word	0x20000d44
 8008de0:	20000c40 	.word	0x20000c40
 8008de4:	20000078 	.word	0x20000078

08008de8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10a      	bne.n	8008e0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	60fb      	str	r3, [r7, #12]
}
 8008e0a:	bf00      	nop
 8008e0c:	e7fe      	b.n	8008e0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <vTaskPlaceOnEventList+0x44>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3318      	adds	r3, #24
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7fe fd93 	bl	8007942 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	6838      	ldr	r0, [r7, #0]
 8008e20:	f000 fa96 	bl	8009350 <prvAddCurrentTaskToDelayedList>
}
 8008e24:	bf00      	nop
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20000c3c 	.word	0x20000c3c

08008e30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10a      	bne.n	8008e58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	617b      	str	r3, [r7, #20]
}
 8008e54:	bf00      	nop
 8008e56:	e7fe      	b.n	8008e56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e58:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <vTaskPlaceOnEventListRestricted+0x54>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3318      	adds	r3, #24
 8008e5e:	4619      	mov	r1, r3
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f7fe fd4a 	bl	80078fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d002      	beq.n	8008e72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e72:	6879      	ldr	r1, [r7, #4]
 8008e74:	68b8      	ldr	r0, [r7, #8]
 8008e76:	f000 fa6b 	bl	8009350 <prvAddCurrentTaskToDelayedList>
	}
 8008e7a:	bf00      	nop
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20000c3c 	.word	0x20000c3c

08008e88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10a      	bne.n	8008eb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	60fb      	str	r3, [r7, #12]
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	3318      	adds	r3, #24
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fe fd7b 	bl	80079b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ebe:	4b1d      	ldr	r3, [pc, #116]	; (8008f34 <xTaskRemoveFromEventList+0xac>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d11c      	bne.n	8008f00 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fd72 	bl	80079b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	409a      	lsls	r2, r3
 8008ed8:	4b17      	ldr	r3, [pc, #92]	; (8008f38 <xTaskRemoveFromEventList+0xb0>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	4a16      	ldr	r2, [pc, #88]	; (8008f38 <xTaskRemoveFromEventList+0xb0>)
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4a13      	ldr	r2, [pc, #76]	; (8008f3c <xTaskRemoveFromEventList+0xb4>)
 8008ef0:	441a      	add	r2, r3
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4610      	mov	r0, r2
 8008efa:	f7fe fcfe 	bl	80078fa <vListInsertEnd>
 8008efe:	e005      	b.n	8008f0c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	3318      	adds	r3, #24
 8008f04:	4619      	mov	r1, r3
 8008f06:	480e      	ldr	r0, [pc, #56]	; (8008f40 <xTaskRemoveFromEventList+0xb8>)
 8008f08:	f7fe fcf7 	bl	80078fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f10:	4b0c      	ldr	r3, [pc, #48]	; (8008f44 <xTaskRemoveFromEventList+0xbc>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d905      	bls.n	8008f26 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f1e:	4b0a      	ldr	r3, [pc, #40]	; (8008f48 <xTaskRemoveFromEventList+0xc0>)
 8008f20:	2201      	movs	r2, #1
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	e001      	b.n	8008f2a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f2a:	697b      	ldr	r3, [r7, #20]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	20000d64 	.word	0x20000d64
 8008f38:	20000d44 	.word	0x20000d44
 8008f3c:	20000c40 	.word	0x20000c40
 8008f40:	20000cfc 	.word	0x20000cfc
 8008f44:	20000c3c 	.word	0x20000c3c
 8008f48:	20000d50 	.word	0x20000d50

08008f4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f54:	4b06      	ldr	r3, [pc, #24]	; (8008f70 <vTaskInternalSetTimeOutState+0x24>)
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f5c:	4b05      	ldr	r3, [pc, #20]	; (8008f74 <vTaskInternalSetTimeOutState+0x28>)
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	605a      	str	r2, [r3, #4]
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	20000d54 	.word	0x20000d54
 8008f74:	20000d40 	.word	0x20000d40

08008f78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10a      	bne.n	8008f9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	613b      	str	r3, [r7, #16]
}
 8008f9a:	bf00      	nop
 8008f9c:	e7fe      	b.n	8008f9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10a      	bne.n	8008fba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	60fb      	str	r3, [r7, #12]
}
 8008fb6:	bf00      	nop
 8008fb8:	e7fe      	b.n	8008fb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008fba:	f000 feab 	bl	8009d14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fbe:	4b1d      	ldr	r3, [pc, #116]	; (8009034 <xTaskCheckForTimeOut+0xbc>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	69ba      	ldr	r2, [r7, #24]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd6:	d102      	bne.n	8008fde <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61fb      	str	r3, [r7, #28]
 8008fdc:	e023      	b.n	8009026 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <xTaskCheckForTimeOut+0xc0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d007      	beq.n	8008ffa <xTaskCheckForTimeOut+0x82>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d302      	bcc.n	8008ffa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	61fb      	str	r3, [r7, #28]
 8008ff8:	e015      	b.n	8009026 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	429a      	cmp	r2, r3
 8009002:	d20b      	bcs.n	800901c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	1ad2      	subs	r2, r2, r3
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff ff9b 	bl	8008f4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009016:	2300      	movs	r3, #0
 8009018:	61fb      	str	r3, [r7, #28]
 800901a:	e004      	b.n	8009026 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009022:	2301      	movs	r3, #1
 8009024:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009026:	f000 fea5 	bl	8009d74 <vPortExitCritical>

	return xReturn;
 800902a:	69fb      	ldr	r3, [r7, #28]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3720      	adds	r7, #32
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	20000d40 	.word	0x20000d40
 8009038:	20000d54 	.word	0x20000d54

0800903c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009040:	4b03      	ldr	r3, [pc, #12]	; (8009050 <vTaskMissedYield+0x14>)
 8009042:	2201      	movs	r2, #1
 8009044:	601a      	str	r2, [r3, #0]
}
 8009046:	bf00      	nop
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	20000d50 	.word	0x20000d50

08009054 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800905c:	f000 f852 	bl	8009104 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009060:	4b06      	ldr	r3, [pc, #24]	; (800907c <prvIdleTask+0x28>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d9f9      	bls.n	800905c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009068:	4b05      	ldr	r3, [pc, #20]	; (8009080 <prvIdleTask+0x2c>)
 800906a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009078:	e7f0      	b.n	800905c <prvIdleTask+0x8>
 800907a:	bf00      	nop
 800907c:	20000c40 	.word	0x20000c40
 8009080:	e000ed04 	.word	0xe000ed04

08009084 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800908a:	2300      	movs	r3, #0
 800908c:	607b      	str	r3, [r7, #4]
 800908e:	e00c      	b.n	80090aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	4613      	mov	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4a12      	ldr	r2, [pc, #72]	; (80090e4 <prvInitialiseTaskLists+0x60>)
 800909c:	4413      	add	r3, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe fbfe 	bl	80078a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3301      	adds	r3, #1
 80090a8:	607b      	str	r3, [r7, #4]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b06      	cmp	r3, #6
 80090ae:	d9ef      	bls.n	8009090 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090b0:	480d      	ldr	r0, [pc, #52]	; (80090e8 <prvInitialiseTaskLists+0x64>)
 80090b2:	f7fe fbf5 	bl	80078a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090b6:	480d      	ldr	r0, [pc, #52]	; (80090ec <prvInitialiseTaskLists+0x68>)
 80090b8:	f7fe fbf2 	bl	80078a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090bc:	480c      	ldr	r0, [pc, #48]	; (80090f0 <prvInitialiseTaskLists+0x6c>)
 80090be:	f7fe fbef 	bl	80078a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090c2:	480c      	ldr	r0, [pc, #48]	; (80090f4 <prvInitialiseTaskLists+0x70>)
 80090c4:	f7fe fbec 	bl	80078a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090c8:	480b      	ldr	r0, [pc, #44]	; (80090f8 <prvInitialiseTaskLists+0x74>)
 80090ca:	f7fe fbe9 	bl	80078a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090ce:	4b0b      	ldr	r3, [pc, #44]	; (80090fc <prvInitialiseTaskLists+0x78>)
 80090d0:	4a05      	ldr	r2, [pc, #20]	; (80090e8 <prvInitialiseTaskLists+0x64>)
 80090d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090d4:	4b0a      	ldr	r3, [pc, #40]	; (8009100 <prvInitialiseTaskLists+0x7c>)
 80090d6:	4a05      	ldr	r2, [pc, #20]	; (80090ec <prvInitialiseTaskLists+0x68>)
 80090d8:	601a      	str	r2, [r3, #0]
}
 80090da:	bf00      	nop
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20000c40 	.word	0x20000c40
 80090e8:	20000ccc 	.word	0x20000ccc
 80090ec:	20000ce0 	.word	0x20000ce0
 80090f0:	20000cfc 	.word	0x20000cfc
 80090f4:	20000d10 	.word	0x20000d10
 80090f8:	20000d28 	.word	0x20000d28
 80090fc:	20000cf4 	.word	0x20000cf4
 8009100:	20000cf8 	.word	0x20000cf8

08009104 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800910a:	e019      	b.n	8009140 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800910c:	f000 fe02 	bl	8009d14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009110:	4b10      	ldr	r3, [pc, #64]	; (8009154 <prvCheckTasksWaitingTermination+0x50>)
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	3304      	adds	r3, #4
 800911c:	4618      	mov	r0, r3
 800911e:	f7fe fc49 	bl	80079b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009122:	4b0d      	ldr	r3, [pc, #52]	; (8009158 <prvCheckTasksWaitingTermination+0x54>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3b01      	subs	r3, #1
 8009128:	4a0b      	ldr	r2, [pc, #44]	; (8009158 <prvCheckTasksWaitingTermination+0x54>)
 800912a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800912c:	4b0b      	ldr	r3, [pc, #44]	; (800915c <prvCheckTasksWaitingTermination+0x58>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3b01      	subs	r3, #1
 8009132:	4a0a      	ldr	r2, [pc, #40]	; (800915c <prvCheckTasksWaitingTermination+0x58>)
 8009134:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009136:	f000 fe1d 	bl	8009d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f810 	bl	8009160 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009140:	4b06      	ldr	r3, [pc, #24]	; (800915c <prvCheckTasksWaitingTermination+0x58>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e1      	bne.n	800910c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20000d10 	.word	0x20000d10
 8009158:	20000d3c 	.word	0x20000d3c
 800915c:	20000d24 	.word	0x20000d24

08009160 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	334c      	adds	r3, #76	; 0x4c
 800916c:	4618      	mov	r0, r3
 800916e:	f002 f933 	bl	800b3d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d108      	bne.n	800918e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009180:	4618      	mov	r0, r3
 8009182:	f000 ffb5 	bl	800a0f0 <vPortFree>
				vPortFree( pxTCB );
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 ffb2 	bl	800a0f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800918c:	e018      	b.n	80091c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009194:	2b01      	cmp	r3, #1
 8009196:	d103      	bne.n	80091a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 ffa9 	bl	800a0f0 <vPortFree>
	}
 800919e:	e00f      	b.n	80091c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d00a      	beq.n	80091c0 <prvDeleteTCB+0x60>
	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	60fb      	str	r3, [r7, #12]
}
 80091bc:	bf00      	nop
 80091be:	e7fe      	b.n	80091be <prvDeleteTCB+0x5e>
	}
 80091c0:	bf00      	nop
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091ce:	4b0c      	ldr	r3, [pc, #48]	; (8009200 <prvResetNextTaskUnblockTime+0x38>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d104      	bne.n	80091e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091d8:	4b0a      	ldr	r3, [pc, #40]	; (8009204 <prvResetNextTaskUnblockTime+0x3c>)
 80091da:	f04f 32ff 	mov.w	r2, #4294967295
 80091de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091e0:	e008      	b.n	80091f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e2:	4b07      	ldr	r3, [pc, #28]	; (8009200 <prvResetNextTaskUnblockTime+0x38>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	4a04      	ldr	r2, [pc, #16]	; (8009204 <prvResetNextTaskUnblockTime+0x3c>)
 80091f2:	6013      	str	r3, [r2, #0]
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	20000cf4 	.word	0x20000cf4
 8009204:	20000d5c 	.word	0x20000d5c

08009208 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800920e:	4b0b      	ldr	r3, [pc, #44]	; (800923c <xTaskGetSchedulerState+0x34>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d102      	bne.n	800921c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009216:	2301      	movs	r3, #1
 8009218:	607b      	str	r3, [r7, #4]
 800921a:	e008      	b.n	800922e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800921c:	4b08      	ldr	r3, [pc, #32]	; (8009240 <xTaskGetSchedulerState+0x38>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d102      	bne.n	800922a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009224:	2302      	movs	r3, #2
 8009226:	607b      	str	r3, [r7, #4]
 8009228:	e001      	b.n	800922e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800922a:	2300      	movs	r3, #0
 800922c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800922e:	687b      	ldr	r3, [r7, #4]
	}
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	20000d48 	.word	0x20000d48
 8009240:	20000d64 	.word	0x20000d64

08009244 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009244:	b580      	push	{r7, lr}
 8009246:	b086      	sub	sp, #24
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009250:	2300      	movs	r3, #0
 8009252:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d06e      	beq.n	8009338 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800925a:	4b3a      	ldr	r3, [pc, #232]	; (8009344 <xTaskPriorityDisinherit+0x100>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	429a      	cmp	r2, r3
 8009262:	d00a      	beq.n	800927a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	60fb      	str	r3, [r7, #12]
}
 8009276:	bf00      	nop
 8009278:	e7fe      	b.n	8009278 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10a      	bne.n	8009298 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	60bb      	str	r3, [r7, #8]
}
 8009294:	bf00      	nop
 8009296:	e7fe      	b.n	8009296 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800929c:	1e5a      	subs	r2, r3, #1
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d044      	beq.n	8009338 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d140      	bne.n	8009338 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	3304      	adds	r3, #4
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fe fb7a 	bl	80079b4 <uxListRemove>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d115      	bne.n	80092f2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ca:	491f      	ldr	r1, [pc, #124]	; (8009348 <xTaskPriorityDisinherit+0x104>)
 80092cc:	4613      	mov	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	440b      	add	r3, r1
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10a      	bne.n	80092f2 <xTaskPriorityDisinherit+0xae>
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e0:	2201      	movs	r2, #1
 80092e2:	fa02 f303 	lsl.w	r3, r2, r3
 80092e6:	43da      	mvns	r2, r3
 80092e8:	4b18      	ldr	r3, [pc, #96]	; (800934c <xTaskPriorityDisinherit+0x108>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4013      	ands	r3, r2
 80092ee:	4a17      	ldr	r2, [pc, #92]	; (800934c <xTaskPriorityDisinherit+0x108>)
 80092f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fe:	f1c3 0207 	rsb	r2, r3, #7
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930a:	2201      	movs	r2, #1
 800930c:	409a      	lsls	r2, r3
 800930e:	4b0f      	ldr	r3, [pc, #60]	; (800934c <xTaskPriorityDisinherit+0x108>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4313      	orrs	r3, r2
 8009314:	4a0d      	ldr	r2, [pc, #52]	; (800934c <xTaskPriorityDisinherit+0x108>)
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800931c:	4613      	mov	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4a08      	ldr	r2, [pc, #32]	; (8009348 <xTaskPriorityDisinherit+0x104>)
 8009326:	441a      	add	r2, r3
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	3304      	adds	r3, #4
 800932c:	4619      	mov	r1, r3
 800932e:	4610      	mov	r0, r2
 8009330:	f7fe fae3 	bl	80078fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009334:	2301      	movs	r3, #1
 8009336:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009338:	697b      	ldr	r3, [r7, #20]
	}
 800933a:	4618      	mov	r0, r3
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20000c3c 	.word	0x20000c3c
 8009348:	20000c40 	.word	0x20000c40
 800934c:	20000d44 	.word	0x20000d44

08009350 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800935a:	4b29      	ldr	r3, [pc, #164]	; (8009400 <prvAddCurrentTaskToDelayedList+0xb0>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009360:	4b28      	ldr	r3, [pc, #160]	; (8009404 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3304      	adds	r3, #4
 8009366:	4618      	mov	r0, r3
 8009368:	f7fe fb24 	bl	80079b4 <uxListRemove>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10b      	bne.n	800938a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009372:	4b24      	ldr	r3, [pc, #144]	; (8009404 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009378:	2201      	movs	r2, #1
 800937a:	fa02 f303 	lsl.w	r3, r2, r3
 800937e:	43da      	mvns	r2, r3
 8009380:	4b21      	ldr	r3, [pc, #132]	; (8009408 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4013      	ands	r3, r2
 8009386:	4a20      	ldr	r2, [pc, #128]	; (8009408 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009388:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009390:	d10a      	bne.n	80093a8 <prvAddCurrentTaskToDelayedList+0x58>
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d007      	beq.n	80093a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009398:	4b1a      	ldr	r3, [pc, #104]	; (8009404 <prvAddCurrentTaskToDelayedList+0xb4>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3304      	adds	r3, #4
 800939e:	4619      	mov	r1, r3
 80093a0:	481a      	ldr	r0, [pc, #104]	; (800940c <prvAddCurrentTaskToDelayedList+0xbc>)
 80093a2:	f7fe faaa 	bl	80078fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093a6:	e026      	b.n	80093f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4413      	add	r3, r2
 80093ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093b0:	4b14      	ldr	r3, [pc, #80]	; (8009404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d209      	bcs.n	80093d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093c0:	4b13      	ldr	r3, [pc, #76]	; (8009410 <prvAddCurrentTaskToDelayedList+0xc0>)
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	4b0f      	ldr	r3, [pc, #60]	; (8009404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3304      	adds	r3, #4
 80093ca:	4619      	mov	r1, r3
 80093cc:	4610      	mov	r0, r2
 80093ce:	f7fe fab8 	bl	8007942 <vListInsert>
}
 80093d2:	e010      	b.n	80093f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093d4:	4b0f      	ldr	r3, [pc, #60]	; (8009414 <prvAddCurrentTaskToDelayedList+0xc4>)
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	4b0a      	ldr	r3, [pc, #40]	; (8009404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3304      	adds	r3, #4
 80093de:	4619      	mov	r1, r3
 80093e0:	4610      	mov	r0, r2
 80093e2:	f7fe faae 	bl	8007942 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093e6:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <prvAddCurrentTaskToDelayedList+0xc8>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d202      	bcs.n	80093f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80093f0:	4a09      	ldr	r2, [pc, #36]	; (8009418 <prvAddCurrentTaskToDelayedList+0xc8>)
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	6013      	str	r3, [r2, #0]
}
 80093f6:	bf00      	nop
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	20000d40 	.word	0x20000d40
 8009404:	20000c3c 	.word	0x20000c3c
 8009408:	20000d44 	.word	0x20000d44
 800940c:	20000d28 	.word	0x20000d28
 8009410:	20000cf8 	.word	0x20000cf8
 8009414:	20000cf4 	.word	0x20000cf4
 8009418:	20000d5c 	.word	0x20000d5c

0800941c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b08a      	sub	sp, #40	; 0x28
 8009420:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009422:	2300      	movs	r3, #0
 8009424:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009426:	f000 fb07 	bl	8009a38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800942a:	4b1c      	ldr	r3, [pc, #112]	; (800949c <xTimerCreateTimerTask+0x80>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d021      	beq.n	8009476 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009432:	2300      	movs	r3, #0
 8009434:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009436:	2300      	movs	r3, #0
 8009438:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800943a:	1d3a      	adds	r2, r7, #4
 800943c:	f107 0108 	add.w	r1, r7, #8
 8009440:	f107 030c 	add.w	r3, r7, #12
 8009444:	4618      	mov	r0, r3
 8009446:	f7f7 fe23 	bl	8001090 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800944a:	6879      	ldr	r1, [r7, #4]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	9202      	str	r2, [sp, #8]
 8009452:	9301      	str	r3, [sp, #4]
 8009454:	2302      	movs	r3, #2
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	2300      	movs	r3, #0
 800945a:	460a      	mov	r2, r1
 800945c:	4910      	ldr	r1, [pc, #64]	; (80094a0 <xTimerCreateTimerTask+0x84>)
 800945e:	4811      	ldr	r0, [pc, #68]	; (80094a4 <xTimerCreateTimerTask+0x88>)
 8009460:	f7fe fff4 	bl	800844c <xTaskCreateStatic>
 8009464:	4603      	mov	r3, r0
 8009466:	4a10      	ldr	r2, [pc, #64]	; (80094a8 <xTimerCreateTimerTask+0x8c>)
 8009468:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800946a:	4b0f      	ldr	r3, [pc, #60]	; (80094a8 <xTimerCreateTimerTask+0x8c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009472:	2301      	movs	r3, #1
 8009474:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10a      	bne.n	8009492 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	613b      	str	r3, [r7, #16]
}
 800948e:	bf00      	nop
 8009490:	e7fe      	b.n	8009490 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009492:	697b      	ldr	r3, [r7, #20]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	20000d98 	.word	0x20000d98
 80094a0:	0800ee00 	.word	0x0800ee00
 80094a4:	080095e1 	.word	0x080095e1
 80094a8:	20000d9c 	.word	0x20000d9c

080094ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b08a      	sub	sp, #40	; 0x28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80094ba:	2300      	movs	r3, #0
 80094bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10a      	bne.n	80094da <xTimerGenericCommand+0x2e>
	__asm volatile
 80094c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	623b      	str	r3, [r7, #32]
}
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80094da:	4b1a      	ldr	r3, [pc, #104]	; (8009544 <xTimerGenericCommand+0x98>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d02a      	beq.n	8009538 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2b05      	cmp	r3, #5
 80094f2:	dc18      	bgt.n	8009526 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80094f4:	f7ff fe88 	bl	8009208 <xTaskGetSchedulerState>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d109      	bne.n	8009512 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80094fe:	4b11      	ldr	r3, [pc, #68]	; (8009544 <xTimerGenericCommand+0x98>)
 8009500:	6818      	ldr	r0, [r3, #0]
 8009502:	f107 0110 	add.w	r1, r7, #16
 8009506:	2300      	movs	r3, #0
 8009508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800950a:	f7fe fbb7 	bl	8007c7c <xQueueGenericSend>
 800950e:	6278      	str	r0, [r7, #36]	; 0x24
 8009510:	e012      	b.n	8009538 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009512:	4b0c      	ldr	r3, [pc, #48]	; (8009544 <xTimerGenericCommand+0x98>)
 8009514:	6818      	ldr	r0, [r3, #0]
 8009516:	f107 0110 	add.w	r1, r7, #16
 800951a:	2300      	movs	r3, #0
 800951c:	2200      	movs	r2, #0
 800951e:	f7fe fbad 	bl	8007c7c <xQueueGenericSend>
 8009522:	6278      	str	r0, [r7, #36]	; 0x24
 8009524:	e008      	b.n	8009538 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009526:	4b07      	ldr	r3, [pc, #28]	; (8009544 <xTimerGenericCommand+0x98>)
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	f107 0110 	add.w	r1, r7, #16
 800952e:	2300      	movs	r3, #0
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	f7fe fca1 	bl	8007e78 <xQueueGenericSendFromISR>
 8009536:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800953a:	4618      	mov	r0, r3
 800953c:	3728      	adds	r7, #40	; 0x28
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20000d98 	.word	0x20000d98

08009548 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b088      	sub	sp, #32
 800954c:	af02      	add	r7, sp, #8
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009552:	4b22      	ldr	r3, [pc, #136]	; (80095dc <prvProcessExpiredTimer+0x94>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	3304      	adds	r3, #4
 8009560:	4618      	mov	r0, r3
 8009562:	f7fe fa27 	bl	80079b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800956c:	f003 0304 	and.w	r3, r3, #4
 8009570:	2b00      	cmp	r3, #0
 8009572:	d022      	beq.n	80095ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	699a      	ldr	r2, [r3, #24]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	18d1      	adds	r1, r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	6978      	ldr	r0, [r7, #20]
 8009582:	f000 f8d1 	bl	8009728 <prvInsertTimerInActiveList>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d01f      	beq.n	80095cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800958c:	2300      	movs	r3, #0
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	2300      	movs	r3, #0
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	2100      	movs	r1, #0
 8009596:	6978      	ldr	r0, [r7, #20]
 8009598:	f7ff ff88 	bl	80094ac <xTimerGenericCommand>
 800959c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d113      	bne.n	80095cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	60fb      	str	r3, [r7, #12]
}
 80095b6:	bf00      	nop
 80095b8:	e7fe      	b.n	80095b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80095c0:	f023 0301 	bic.w	r3, r3, #1
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	6a1b      	ldr	r3, [r3, #32]
 80095d0:	6978      	ldr	r0, [r7, #20]
 80095d2:	4798      	blx	r3
}
 80095d4:	bf00      	nop
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20000d90 	.word	0x20000d90

080095e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095e8:	f107 0308 	add.w	r3, r7, #8
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 f857 	bl	80096a0 <prvGetNextExpireTime>
 80095f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	4619      	mov	r1, r3
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 f803 	bl	8009604 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80095fe:	f000 f8d5 	bl	80097ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009602:	e7f1      	b.n	80095e8 <prvTimerTask+0x8>

08009604 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800960e:	f7ff f9f1 	bl	80089f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009612:	f107 0308 	add.w	r3, r7, #8
 8009616:	4618      	mov	r0, r3
 8009618:	f000 f866 	bl	80096e8 <prvSampleTimeNow>
 800961c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d130      	bne.n	8009686 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10a      	bne.n	8009640 <prvProcessTimerOrBlockTask+0x3c>
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	429a      	cmp	r2, r3
 8009630:	d806      	bhi.n	8009640 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009632:	f7ff f9ed 	bl	8008a10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009636:	68f9      	ldr	r1, [r7, #12]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff ff85 	bl	8009548 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800963e:	e024      	b.n	800968a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d008      	beq.n	8009658 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009646:	4b13      	ldr	r3, [pc, #76]	; (8009694 <prvProcessTimerOrBlockTask+0x90>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d101      	bne.n	8009654 <prvProcessTimerOrBlockTask+0x50>
 8009650:	2301      	movs	r3, #1
 8009652:	e000      	b.n	8009656 <prvProcessTimerOrBlockTask+0x52>
 8009654:	2300      	movs	r3, #0
 8009656:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009658:	4b0f      	ldr	r3, [pc, #60]	; (8009698 <prvProcessTimerOrBlockTask+0x94>)
 800965a:	6818      	ldr	r0, [r3, #0]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	4619      	mov	r1, r3
 8009666:	f7fe febd 	bl	80083e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800966a:	f7ff f9d1 	bl	8008a10 <xTaskResumeAll>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10a      	bne.n	800968a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009674:	4b09      	ldr	r3, [pc, #36]	; (800969c <prvProcessTimerOrBlockTask+0x98>)
 8009676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	f3bf 8f6f 	isb	sy
}
 8009684:	e001      	b.n	800968a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009686:	f7ff f9c3 	bl	8008a10 <xTaskResumeAll>
}
 800968a:	bf00      	nop
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20000d94 	.word	0x20000d94
 8009698:	20000d98 	.word	0x20000d98
 800969c:	e000ed04 	.word	0xe000ed04

080096a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096a8:	4b0e      	ldr	r3, [pc, #56]	; (80096e4 <prvGetNextExpireTime+0x44>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d101      	bne.n	80096b6 <prvGetNextExpireTime+0x16>
 80096b2:	2201      	movs	r2, #1
 80096b4:	e000      	b.n	80096b8 <prvGetNextExpireTime+0x18>
 80096b6:	2200      	movs	r2, #0
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d105      	bne.n	80096d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096c4:	4b07      	ldr	r3, [pc, #28]	; (80096e4 <prvGetNextExpireTime+0x44>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	60fb      	str	r3, [r7, #12]
 80096ce:	e001      	b.n	80096d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80096d0:	2300      	movs	r3, #0
 80096d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80096d4:	68fb      	ldr	r3, [r7, #12]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	20000d90 	.word	0x20000d90

080096e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80096f0:	f7ff fa2a 	bl	8008b48 <xTaskGetTickCount>
 80096f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80096f6:	4b0b      	ldr	r3, [pc, #44]	; (8009724 <prvSampleTimeNow+0x3c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d205      	bcs.n	800970c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009700:	f000 f936 	bl	8009970 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	601a      	str	r2, [r3, #0]
 800970a:	e002      	b.n	8009712 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009712:	4a04      	ldr	r2, [pc, #16]	; (8009724 <prvSampleTimeNow+0x3c>)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009718:	68fb      	ldr	r3, [r7, #12]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	20000da0 	.word	0x20000da0

08009728 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
 8009734:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009736:	2300      	movs	r3, #0
 8009738:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	429a      	cmp	r2, r3
 800974c:	d812      	bhi.n	8009774 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	1ad2      	subs	r2, r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	429a      	cmp	r2, r3
 800975a:	d302      	bcc.n	8009762 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800975c:	2301      	movs	r3, #1
 800975e:	617b      	str	r3, [r7, #20]
 8009760:	e01b      	b.n	800979a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009762:	4b10      	ldr	r3, [pc, #64]	; (80097a4 <prvInsertTimerInActiveList+0x7c>)
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3304      	adds	r3, #4
 800976a:	4619      	mov	r1, r3
 800976c:	4610      	mov	r0, r2
 800976e:	f7fe f8e8 	bl	8007942 <vListInsert>
 8009772:	e012      	b.n	800979a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	429a      	cmp	r2, r3
 800977a:	d206      	bcs.n	800978a <prvInsertTimerInActiveList+0x62>
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	429a      	cmp	r2, r3
 8009782:	d302      	bcc.n	800978a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009784:	2301      	movs	r3, #1
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	e007      	b.n	800979a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800978a:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <prvInsertTimerInActiveList+0x80>)
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3304      	adds	r3, #4
 8009792:	4619      	mov	r1, r3
 8009794:	4610      	mov	r0, r2
 8009796:	f7fe f8d4 	bl	8007942 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800979a:	697b      	ldr	r3, [r7, #20]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3718      	adds	r7, #24
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20000d94 	.word	0x20000d94
 80097a8:	20000d90 	.word	0x20000d90

080097ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08e      	sub	sp, #56	; 0x38
 80097b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097b2:	e0ca      	b.n	800994a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	da18      	bge.n	80097ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80097ba:	1d3b      	adds	r3, r7, #4
 80097bc:	3304      	adds	r3, #4
 80097be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80097c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10a      	bne.n	80097dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80097c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ca:	f383 8811 	msr	BASEPRI, r3
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f3bf 8f4f 	dsb	sy
 80097d6:	61fb      	str	r3, [r7, #28]
}
 80097d8:	bf00      	nop
 80097da:	e7fe      	b.n	80097da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80097dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097e2:	6850      	ldr	r0, [r2, #4]
 80097e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097e6:	6892      	ldr	r2, [r2, #8]
 80097e8:	4611      	mov	r1, r2
 80097ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f2c0 80aa 	blt.w	8009948 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80097f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d004      	beq.n	800980a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009802:	3304      	adds	r3, #4
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe f8d5 	bl	80079b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800980a:	463b      	mov	r3, r7
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff ff6b 	bl	80096e8 <prvSampleTimeNow>
 8009812:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b09      	cmp	r3, #9
 8009818:	f200 8097 	bhi.w	800994a <prvProcessReceivedCommands+0x19e>
 800981c:	a201      	add	r2, pc, #4	; (adr r2, 8009824 <prvProcessReceivedCommands+0x78>)
 800981e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009822:	bf00      	nop
 8009824:	0800984d 	.word	0x0800984d
 8009828:	0800984d 	.word	0x0800984d
 800982c:	0800984d 	.word	0x0800984d
 8009830:	080098c1 	.word	0x080098c1
 8009834:	080098d5 	.word	0x080098d5
 8009838:	0800991f 	.word	0x0800991f
 800983c:	0800984d 	.word	0x0800984d
 8009840:	0800984d 	.word	0x0800984d
 8009844:	080098c1 	.word	0x080098c1
 8009848:	080098d5 	.word	0x080098d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009852:	f043 0301 	orr.w	r3, r3, #1
 8009856:	b2da      	uxtb	r2, r3
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	18d1      	adds	r1, r2, r3
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800986c:	f7ff ff5c 	bl	8009728 <prvInsertTimerInActiveList>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d069      	beq.n	800994a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800987c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009884:	f003 0304 	and.w	r3, r3, #4
 8009888:	2b00      	cmp	r3, #0
 800988a:	d05e      	beq.n	800994a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	441a      	add	r2, r3
 8009894:	2300      	movs	r3, #0
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	2300      	movs	r3, #0
 800989a:	2100      	movs	r1, #0
 800989c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800989e:	f7ff fe05 	bl	80094ac <xTimerGenericCommand>
 80098a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80098a4:	6a3b      	ldr	r3, [r7, #32]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d14f      	bne.n	800994a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	61bb      	str	r3, [r7, #24]
}
 80098bc:	bf00      	nop
 80098be:	e7fe      	b.n	80098be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80098c6:	f023 0301 	bic.w	r3, r3, #1
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80098d2:	e03a      	b.n	800994a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80098da:	f043 0301 	orr.w	r3, r3, #1
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80098ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10a      	bne.n	800990a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	617b      	str	r3, [r7, #20]
}
 8009906:	bf00      	nop
 8009908:	e7fe      	b.n	8009908 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990c:	699a      	ldr	r2, [r3, #24]
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	18d1      	adds	r1, r2, r3
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009918:	f7ff ff06 	bl	8009728 <prvInsertTimerInActiveList>
					break;
 800991c:	e015      	b.n	800994a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009924:	f003 0302 	and.w	r3, r3, #2
 8009928:	2b00      	cmp	r3, #0
 800992a:	d103      	bne.n	8009934 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800992c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800992e:	f000 fbdf 	bl	800a0f0 <vPortFree>
 8009932:	e00a      	b.n	800994a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800993a:	f023 0301 	bic.w	r3, r3, #1
 800993e:	b2da      	uxtb	r2, r3
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009946:	e000      	b.n	800994a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009948:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800994a:	4b08      	ldr	r3, [pc, #32]	; (800996c <prvProcessReceivedCommands+0x1c0>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	1d39      	adds	r1, r7, #4
 8009950:	2200      	movs	r2, #0
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe fb2c 	bl	8007fb0 <xQueueReceive>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	f47f af2a 	bne.w	80097b4 <prvProcessReceivedCommands+0x8>
	}
}
 8009960:	bf00      	nop
 8009962:	bf00      	nop
 8009964:	3730      	adds	r7, #48	; 0x30
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20000d98 	.word	0x20000d98

08009970 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b088      	sub	sp, #32
 8009974:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009976:	e048      	b.n	8009a0a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009978:	4b2d      	ldr	r3, [pc, #180]	; (8009a30 <prvSwitchTimerLists+0xc0>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009982:	4b2b      	ldr	r3, [pc, #172]	; (8009a30 <prvSwitchTimerLists+0xc0>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3304      	adds	r3, #4
 8009990:	4618      	mov	r0, r3
 8009992:	f7fe f80f 	bl	80079b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80099a4:	f003 0304 	and.w	r3, r3, #4
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d02e      	beq.n	8009a0a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	4413      	add	r3, r2
 80099b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d90e      	bls.n	80099dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099ca:	4b19      	ldr	r3, [pc, #100]	; (8009a30 <prvSwitchTimerLists+0xc0>)
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	3304      	adds	r3, #4
 80099d2:	4619      	mov	r1, r3
 80099d4:	4610      	mov	r0, r2
 80099d6:	f7fd ffb4 	bl	8007942 <vListInsert>
 80099da:	e016      	b.n	8009a0a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099dc:	2300      	movs	r3, #0
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	2300      	movs	r3, #0
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	2100      	movs	r1, #0
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f7ff fd60 	bl	80094ac <xTimerGenericCommand>
 80099ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10a      	bne.n	8009a0a <prvSwitchTimerLists+0x9a>
	__asm volatile
 80099f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	603b      	str	r3, [r7, #0]
}
 8009a06:	bf00      	nop
 8009a08:	e7fe      	b.n	8009a08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a0a:	4b09      	ldr	r3, [pc, #36]	; (8009a30 <prvSwitchTimerLists+0xc0>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1b1      	bne.n	8009978 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a14:	4b06      	ldr	r3, [pc, #24]	; (8009a30 <prvSwitchTimerLists+0xc0>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a1a:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <prvSwitchTimerLists+0xc4>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a04      	ldr	r2, [pc, #16]	; (8009a30 <prvSwitchTimerLists+0xc0>)
 8009a20:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a22:	4a04      	ldr	r2, [pc, #16]	; (8009a34 <prvSwitchTimerLists+0xc4>)
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	6013      	str	r3, [r2, #0]
}
 8009a28:	bf00      	nop
 8009a2a:	3718      	adds	r7, #24
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	20000d90 	.word	0x20000d90
 8009a34:	20000d94 	.word	0x20000d94

08009a38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a3e:	f000 f969 	bl	8009d14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a42:	4b15      	ldr	r3, [pc, #84]	; (8009a98 <prvCheckForValidListAndQueue+0x60>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d120      	bne.n	8009a8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a4a:	4814      	ldr	r0, [pc, #80]	; (8009a9c <prvCheckForValidListAndQueue+0x64>)
 8009a4c:	f7fd ff28 	bl	80078a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a50:	4813      	ldr	r0, [pc, #76]	; (8009aa0 <prvCheckForValidListAndQueue+0x68>)
 8009a52:	f7fd ff25 	bl	80078a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a56:	4b13      	ldr	r3, [pc, #76]	; (8009aa4 <prvCheckForValidListAndQueue+0x6c>)
 8009a58:	4a10      	ldr	r2, [pc, #64]	; (8009a9c <prvCheckForValidListAndQueue+0x64>)
 8009a5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a5c:	4b12      	ldr	r3, [pc, #72]	; (8009aa8 <prvCheckForValidListAndQueue+0x70>)
 8009a5e:	4a10      	ldr	r2, [pc, #64]	; (8009aa0 <prvCheckForValidListAndQueue+0x68>)
 8009a60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a62:	2300      	movs	r3, #0
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	4b11      	ldr	r3, [pc, #68]	; (8009aac <prvCheckForValidListAndQueue+0x74>)
 8009a68:	4a11      	ldr	r2, [pc, #68]	; (8009ab0 <prvCheckForValidListAndQueue+0x78>)
 8009a6a:	2110      	movs	r1, #16
 8009a6c:	200a      	movs	r0, #10
 8009a6e:	f7fe f833 	bl	8007ad8 <xQueueGenericCreateStatic>
 8009a72:	4603      	mov	r3, r0
 8009a74:	4a08      	ldr	r2, [pc, #32]	; (8009a98 <prvCheckForValidListAndQueue+0x60>)
 8009a76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a78:	4b07      	ldr	r3, [pc, #28]	; (8009a98 <prvCheckForValidListAndQueue+0x60>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d005      	beq.n	8009a8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a80:	4b05      	ldr	r3, [pc, #20]	; (8009a98 <prvCheckForValidListAndQueue+0x60>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	490b      	ldr	r1, [pc, #44]	; (8009ab4 <prvCheckForValidListAndQueue+0x7c>)
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe fc82 	bl	8008390 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a8c:	f000 f972 	bl	8009d74 <vPortExitCritical>
}
 8009a90:	bf00      	nop
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	20000d98 	.word	0x20000d98
 8009a9c:	20000d68 	.word	0x20000d68
 8009aa0:	20000d7c 	.word	0x20000d7c
 8009aa4:	20000d90 	.word	0x20000d90
 8009aa8:	20000d94 	.word	0x20000d94
 8009aac:	20000e44 	.word	0x20000e44
 8009ab0:	20000da4 	.word	0x20000da4
 8009ab4:	0800ee08 	.word	0x0800ee08

08009ab8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	3b04      	subs	r3, #4
 8009ac8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3b04      	subs	r3, #4
 8009ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f023 0201 	bic.w	r2, r3, #1
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3b04      	subs	r3, #4
 8009ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ae8:	4a0c      	ldr	r2, [pc, #48]	; (8009b1c <pxPortInitialiseStack+0x64>)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	3b14      	subs	r3, #20
 8009af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3b04      	subs	r3, #4
 8009afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f06f 0202 	mvn.w	r2, #2
 8009b06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	3b20      	subs	r3, #32
 8009b0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	08009b21 	.word	0x08009b21

08009b20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b2a:	4b12      	ldr	r3, [pc, #72]	; (8009b74 <prvTaskExitError+0x54>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b32:	d00a      	beq.n	8009b4a <prvTaskExitError+0x2a>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	60fb      	str	r3, [r7, #12]
}
 8009b46:	bf00      	nop
 8009b48:	e7fe      	b.n	8009b48 <prvTaskExitError+0x28>
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	60bb      	str	r3, [r7, #8]
}
 8009b5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b5e:	bf00      	nop
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0fc      	beq.n	8009b60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b66:	bf00      	nop
 8009b68:	bf00      	nop
 8009b6a:	3714      	adds	r7, #20
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr
 8009b74:	20000074 	.word	0x20000074
	...

08009b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b80:	4b07      	ldr	r3, [pc, #28]	; (8009ba0 <pxCurrentTCBConst2>)
 8009b82:	6819      	ldr	r1, [r3, #0]
 8009b84:	6808      	ldr	r0, [r1, #0]
 8009b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8a:	f380 8809 	msr	PSP, r0
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f04f 0000 	mov.w	r0, #0
 8009b96:	f380 8811 	msr	BASEPRI, r0
 8009b9a:	4770      	bx	lr
 8009b9c:	f3af 8000 	nop.w

08009ba0 <pxCurrentTCBConst2>:
 8009ba0:	20000c3c 	.word	0x20000c3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ba4:	bf00      	nop
 8009ba6:	bf00      	nop

08009ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ba8:	4808      	ldr	r0, [pc, #32]	; (8009bcc <prvPortStartFirstTask+0x24>)
 8009baa:	6800      	ldr	r0, [r0, #0]
 8009bac:	6800      	ldr	r0, [r0, #0]
 8009bae:	f380 8808 	msr	MSP, r0
 8009bb2:	f04f 0000 	mov.w	r0, #0
 8009bb6:	f380 8814 	msr	CONTROL, r0
 8009bba:	b662      	cpsie	i
 8009bbc:	b661      	cpsie	f
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	df00      	svc	0
 8009bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009bca:	bf00      	nop
 8009bcc:	e000ed08 	.word	0xe000ed08

08009bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009bd6:	4b46      	ldr	r3, [pc, #280]	; (8009cf0 <xPortStartScheduler+0x120>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a46      	ldr	r2, [pc, #280]	; (8009cf4 <xPortStartScheduler+0x124>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d10a      	bne.n	8009bf6 <xPortStartScheduler+0x26>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	613b      	str	r3, [r7, #16]
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009bf6:	4b3e      	ldr	r3, [pc, #248]	; (8009cf0 <xPortStartScheduler+0x120>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a3f      	ldr	r2, [pc, #252]	; (8009cf8 <xPortStartScheduler+0x128>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d10a      	bne.n	8009c16 <xPortStartScheduler+0x46>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	60fb      	str	r3, [r7, #12]
}
 8009c12:	bf00      	nop
 8009c14:	e7fe      	b.n	8009c14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c16:	4b39      	ldr	r3, [pc, #228]	; (8009cfc <xPortStartScheduler+0x12c>)
 8009c18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	22ff      	movs	r2, #255	; 0xff
 8009c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c30:	78fb      	ldrb	r3, [r7, #3]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	4b31      	ldr	r3, [pc, #196]	; (8009d00 <xPortStartScheduler+0x130>)
 8009c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c3e:	4b31      	ldr	r3, [pc, #196]	; (8009d04 <xPortStartScheduler+0x134>)
 8009c40:	2207      	movs	r2, #7
 8009c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c44:	e009      	b.n	8009c5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009c46:	4b2f      	ldr	r3, [pc, #188]	; (8009d04 <xPortStartScheduler+0x134>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	4a2d      	ldr	r2, [pc, #180]	; (8009d04 <xPortStartScheduler+0x134>)
 8009c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c50:	78fb      	ldrb	r3, [r7, #3]
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c5a:	78fb      	ldrb	r3, [r7, #3]
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c62:	2b80      	cmp	r3, #128	; 0x80
 8009c64:	d0ef      	beq.n	8009c46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c66:	4b27      	ldr	r3, [pc, #156]	; (8009d04 <xPortStartScheduler+0x134>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f1c3 0307 	rsb	r3, r3, #7
 8009c6e:	2b04      	cmp	r3, #4
 8009c70:	d00a      	beq.n	8009c88 <xPortStartScheduler+0xb8>
	__asm volatile
 8009c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c76:	f383 8811 	msr	BASEPRI, r3
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	60bb      	str	r3, [r7, #8]
}
 8009c84:	bf00      	nop
 8009c86:	e7fe      	b.n	8009c86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c88:	4b1e      	ldr	r3, [pc, #120]	; (8009d04 <xPortStartScheduler+0x134>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	021b      	lsls	r3, r3, #8
 8009c8e:	4a1d      	ldr	r2, [pc, #116]	; (8009d04 <xPortStartScheduler+0x134>)
 8009c90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c92:	4b1c      	ldr	r3, [pc, #112]	; (8009d04 <xPortStartScheduler+0x134>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c9a:	4a1a      	ldr	r2, [pc, #104]	; (8009d04 <xPortStartScheduler+0x134>)
 8009c9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ca6:	4b18      	ldr	r3, [pc, #96]	; (8009d08 <xPortStartScheduler+0x138>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a17      	ldr	r2, [pc, #92]	; (8009d08 <xPortStartScheduler+0x138>)
 8009cac:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8009cb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009cb2:	4b15      	ldr	r3, [pc, #84]	; (8009d08 <xPortStartScheduler+0x138>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a14      	ldr	r2, [pc, #80]	; (8009d08 <xPortStartScheduler+0x138>)
 8009cb8:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8009cbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009cbe:	f000 f8dd 	bl	8009e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009cc2:	4b12      	ldr	r3, [pc, #72]	; (8009d0c <xPortStartScheduler+0x13c>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009cc8:	f000 f8fc 	bl	8009ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ccc:	4b10      	ldr	r3, [pc, #64]	; (8009d10 <xPortStartScheduler+0x140>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a0f      	ldr	r2, [pc, #60]	; (8009d10 <xPortStartScheduler+0x140>)
 8009cd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009cd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009cd8:	f7ff ff66 	bl	8009ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009cdc:	f7fe fffc 	bl	8008cd8 <vTaskSwitchContext>
	prvTaskExitError();
 8009ce0:	f7ff ff1e 	bl	8009b20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3718      	adds	r7, #24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	e000ed00 	.word	0xe000ed00
 8009cf4:	410fc271 	.word	0x410fc271
 8009cf8:	410fc270 	.word	0x410fc270
 8009cfc:	e000e400 	.word	0xe000e400
 8009d00:	20000e8c 	.word	0x20000e8c
 8009d04:	20000e90 	.word	0x20000e90
 8009d08:	e000ed20 	.word	0xe000ed20
 8009d0c:	20000074 	.word	0x20000074
 8009d10:	e000ef34 	.word	0xe000ef34

08009d14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	607b      	str	r3, [r7, #4]
}
 8009d2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d2e:	4b0f      	ldr	r3, [pc, #60]	; (8009d6c <vPortEnterCritical+0x58>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3301      	adds	r3, #1
 8009d34:	4a0d      	ldr	r2, [pc, #52]	; (8009d6c <vPortEnterCritical+0x58>)
 8009d36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d38:	4b0c      	ldr	r3, [pc, #48]	; (8009d6c <vPortEnterCritical+0x58>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d10f      	bne.n	8009d60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d40:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <vPortEnterCritical+0x5c>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00a      	beq.n	8009d60 <vPortEnterCritical+0x4c>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4e:	f383 8811 	msr	BASEPRI, r3
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	603b      	str	r3, [r7, #0]
}
 8009d5c:	bf00      	nop
 8009d5e:	e7fe      	b.n	8009d5e <vPortEnterCritical+0x4a>
	}
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr
 8009d6c:	20000074 	.word	0x20000074
 8009d70:	e000ed04 	.word	0xe000ed04

08009d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d7a:	4b12      	ldr	r3, [pc, #72]	; (8009dc4 <vPortExitCritical+0x50>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10a      	bne.n	8009d98 <vPortExitCritical+0x24>
	__asm volatile
 8009d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	607b      	str	r3, [r7, #4]
}
 8009d94:	bf00      	nop
 8009d96:	e7fe      	b.n	8009d96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d98:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <vPortExitCritical+0x50>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	4a09      	ldr	r2, [pc, #36]	; (8009dc4 <vPortExitCritical+0x50>)
 8009da0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009da2:	4b08      	ldr	r3, [pc, #32]	; (8009dc4 <vPortExitCritical+0x50>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d105      	bne.n	8009db6 <vPortExitCritical+0x42>
 8009daa:	2300      	movs	r3, #0
 8009dac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	f383 8811 	msr	BASEPRI, r3
}
 8009db4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009db6:	bf00      	nop
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	20000074 	.word	0x20000074
	...

08009dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009dd0:	f3ef 8009 	mrs	r0, PSP
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	4b15      	ldr	r3, [pc, #84]	; (8009e30 <pxCurrentTCBConst>)
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	f01e 0f10 	tst.w	lr, #16
 8009de0:	bf08      	it	eq
 8009de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dea:	6010      	str	r0, [r2, #0]
 8009dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009df4:	f380 8811 	msr	BASEPRI, r0
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f7fe ff6a 	bl	8008cd8 <vTaskSwitchContext>
 8009e04:	f04f 0000 	mov.w	r0, #0
 8009e08:	f380 8811 	msr	BASEPRI, r0
 8009e0c:	bc09      	pop	{r0, r3}
 8009e0e:	6819      	ldr	r1, [r3, #0]
 8009e10:	6808      	ldr	r0, [r1, #0]
 8009e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e16:	f01e 0f10 	tst.w	lr, #16
 8009e1a:	bf08      	it	eq
 8009e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e20:	f380 8809 	msr	PSP, r0
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	f3af 8000 	nop.w

08009e30 <pxCurrentTCBConst>:
 8009e30:	20000c3c 	.word	0x20000c3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e34:	bf00      	nop
 8009e36:	bf00      	nop

08009e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	607b      	str	r3, [r7, #4]
}
 8009e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e52:	f7fe fe89 	bl	8008b68 <xTaskIncrementTick>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d003      	beq.n	8009e64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e5c:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <SysTick_Handler+0x40>)
 8009e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	2300      	movs	r3, #0
 8009e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	f383 8811 	msr	BASEPRI, r3
}
 8009e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	e000ed04 	.word	0xe000ed04

08009e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e80:	4b0b      	ldr	r3, [pc, #44]	; (8009eb0 <vPortSetupTimerInterrupt+0x34>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e86:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <vPortSetupTimerInterrupt+0x38>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e8c:	4b0a      	ldr	r3, [pc, #40]	; (8009eb8 <vPortSetupTimerInterrupt+0x3c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a0a      	ldr	r2, [pc, #40]	; (8009ebc <vPortSetupTimerInterrupt+0x40>)
 8009e92:	fba2 2303 	umull	r2, r3, r2, r3
 8009e96:	099b      	lsrs	r3, r3, #6
 8009e98:	4a09      	ldr	r2, [pc, #36]	; (8009ec0 <vPortSetupTimerInterrupt+0x44>)
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e9e:	4b04      	ldr	r3, [pc, #16]	; (8009eb0 <vPortSetupTimerInterrupt+0x34>)
 8009ea0:	2207      	movs	r2, #7
 8009ea2:	601a      	str	r2, [r3, #0]
}
 8009ea4:	bf00      	nop
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	e000e010 	.word	0xe000e010
 8009eb4:	e000e018 	.word	0xe000e018
 8009eb8:	20000000 	.word	0x20000000
 8009ebc:	10624dd3 	.word	0x10624dd3
 8009ec0:	e000e014 	.word	0xe000e014

08009ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ed4 <vPortEnableVFP+0x10>
 8009ec8:	6801      	ldr	r1, [r0, #0]
 8009eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009ece:	6001      	str	r1, [r0, #0]
 8009ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ed2:	bf00      	nop
 8009ed4:	e000ed88 	.word	0xe000ed88

08009ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ede:	f3ef 8305 	mrs	r3, IPSR
 8009ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2b0f      	cmp	r3, #15
 8009ee8:	d914      	bls.n	8009f14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009eea:	4a17      	ldr	r2, [pc, #92]	; (8009f48 <vPortValidateInterruptPriority+0x70>)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	4413      	add	r3, r2
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ef4:	4b15      	ldr	r3, [pc, #84]	; (8009f4c <vPortValidateInterruptPriority+0x74>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	7afa      	ldrb	r2, [r7, #11]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d20a      	bcs.n	8009f14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	607b      	str	r3, [r7, #4]
}
 8009f10:	bf00      	nop
 8009f12:	e7fe      	b.n	8009f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f14:	4b0e      	ldr	r3, [pc, #56]	; (8009f50 <vPortValidateInterruptPriority+0x78>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f1c:	4b0d      	ldr	r3, [pc, #52]	; (8009f54 <vPortValidateInterruptPriority+0x7c>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d90a      	bls.n	8009f3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	603b      	str	r3, [r7, #0]
}
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <vPortValidateInterruptPriority+0x60>
	}
 8009f3a:	bf00      	nop
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	e000e3f0 	.word	0xe000e3f0
 8009f4c:	20000e8c 	.word	0x20000e8c
 8009f50:	e000ed0c 	.word	0xe000ed0c
 8009f54:	20000e90 	.word	0x20000e90

08009f58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b08a      	sub	sp, #40	; 0x28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f60:	2300      	movs	r3, #0
 8009f62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f64:	f7fe fd46 	bl	80089f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f68:	4b5b      	ldr	r3, [pc, #364]	; (800a0d8 <pvPortMalloc+0x180>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f70:	f000 f920 	bl	800a1b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f74:	4b59      	ldr	r3, [pc, #356]	; (800a0dc <pvPortMalloc+0x184>)
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f040 8093 	bne.w	800a0a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d01d      	beq.n	8009fc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009f88:	2208      	movs	r2, #8
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f003 0307 	and.w	r3, r3, #7
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d014      	beq.n	8009fc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f023 0307 	bic.w	r3, r3, #7
 8009fa0:	3308      	adds	r3, #8
 8009fa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f003 0307 	and.w	r3, r3, #7
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00a      	beq.n	8009fc4 <pvPortMalloc+0x6c>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	617b      	str	r3, [r7, #20]
}
 8009fc0:	bf00      	nop
 8009fc2:	e7fe      	b.n	8009fc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d06e      	beq.n	800a0a8 <pvPortMalloc+0x150>
 8009fca:	4b45      	ldr	r3, [pc, #276]	; (800a0e0 <pvPortMalloc+0x188>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d869      	bhi.n	800a0a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009fd4:	4b43      	ldr	r3, [pc, #268]	; (800a0e4 <pvPortMalloc+0x18c>)
 8009fd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009fd8:	4b42      	ldr	r3, [pc, #264]	; (800a0e4 <pvPortMalloc+0x18c>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009fde:	e004      	b.n	8009fea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d903      	bls.n	8009ffc <pvPortMalloc+0xa4>
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1f1      	bne.n	8009fe0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ffc:	4b36      	ldr	r3, [pc, #216]	; (800a0d8 <pvPortMalloc+0x180>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a002:	429a      	cmp	r2, r3
 800a004:	d050      	beq.n	800a0a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a006:	6a3b      	ldr	r3, [r7, #32]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2208      	movs	r2, #8
 800a00c:	4413      	add	r3, r2
 800a00e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	1ad2      	subs	r2, r2, r3
 800a020:	2308      	movs	r3, #8
 800a022:	005b      	lsls	r3, r3, #1
 800a024:	429a      	cmp	r2, r3
 800a026:	d91f      	bls.n	800a068 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4413      	add	r3, r2
 800a02e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	f003 0307 	and.w	r3, r3, #7
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00a      	beq.n	800a050 <pvPortMalloc+0xf8>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	613b      	str	r3, [r7, #16]
}
 800a04c:	bf00      	nop
 800a04e:	e7fe      	b.n	800a04e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a052:	685a      	ldr	r2, [r3, #4]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	1ad2      	subs	r2, r2, r3
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a062:	69b8      	ldr	r0, [r7, #24]
 800a064:	f000 f908 	bl	800a278 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a068:	4b1d      	ldr	r3, [pc, #116]	; (800a0e0 <pvPortMalloc+0x188>)
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	4a1b      	ldr	r2, [pc, #108]	; (800a0e0 <pvPortMalloc+0x188>)
 800a074:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a076:	4b1a      	ldr	r3, [pc, #104]	; (800a0e0 <pvPortMalloc+0x188>)
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	4b1b      	ldr	r3, [pc, #108]	; (800a0e8 <pvPortMalloc+0x190>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d203      	bcs.n	800a08a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a082:	4b17      	ldr	r3, [pc, #92]	; (800a0e0 <pvPortMalloc+0x188>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a18      	ldr	r2, [pc, #96]	; (800a0e8 <pvPortMalloc+0x190>)
 800a088:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	685a      	ldr	r2, [r3, #4]
 800a08e:	4b13      	ldr	r3, [pc, #76]	; (800a0dc <pvPortMalloc+0x184>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	431a      	orrs	r2, r3
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	2200      	movs	r2, #0
 800a09c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a09e:	4b13      	ldr	r3, [pc, #76]	; (800a0ec <pvPortMalloc+0x194>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	4a11      	ldr	r2, [pc, #68]	; (800a0ec <pvPortMalloc+0x194>)
 800a0a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a0a8:	f7fe fcb2 	bl	8008a10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	f003 0307 	and.w	r3, r3, #7
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00a      	beq.n	800a0cc <pvPortMalloc+0x174>
	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	60fb      	str	r3, [r7, #12]
}
 800a0c8:	bf00      	nop
 800a0ca:	e7fe      	b.n	800a0ca <pvPortMalloc+0x172>
	return pvReturn;
 800a0cc:	69fb      	ldr	r3, [r7, #28]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3728      	adds	r7, #40	; 0x28
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	200083cc 	.word	0x200083cc
 800a0dc:	200083e0 	.word	0x200083e0
 800a0e0:	200083d0 	.word	0x200083d0
 800a0e4:	200083c4 	.word	0x200083c4
 800a0e8:	200083d4 	.word	0x200083d4
 800a0ec:	200083d8 	.word	0x200083d8

0800a0f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d04d      	beq.n	800a19e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a102:	2308      	movs	r3, #8
 800a104:	425b      	negs	r3, r3
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	4413      	add	r3, r2
 800a10a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	685a      	ldr	r2, [r3, #4]
 800a114:	4b24      	ldr	r3, [pc, #144]	; (800a1a8 <vPortFree+0xb8>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4013      	ands	r3, r2
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10a      	bne.n	800a134 <vPortFree+0x44>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	60fb      	str	r3, [r7, #12]
}
 800a130:	bf00      	nop
 800a132:	e7fe      	b.n	800a132 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00a      	beq.n	800a152 <vPortFree+0x62>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	60bb      	str	r3, [r7, #8]
}
 800a14e:	bf00      	nop
 800a150:	e7fe      	b.n	800a150 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <vPortFree+0xb8>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4013      	ands	r3, r2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d01e      	beq.n	800a19e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d11a      	bne.n	800a19e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	4b0e      	ldr	r3, [pc, #56]	; (800a1a8 <vPortFree+0xb8>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	43db      	mvns	r3, r3
 800a172:	401a      	ands	r2, r3
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a178:	f7fe fc3c 	bl	80089f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	685a      	ldr	r2, [r3, #4]
 800a180:	4b0a      	ldr	r3, [pc, #40]	; (800a1ac <vPortFree+0xbc>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4413      	add	r3, r2
 800a186:	4a09      	ldr	r2, [pc, #36]	; (800a1ac <vPortFree+0xbc>)
 800a188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a18a:	6938      	ldr	r0, [r7, #16]
 800a18c:	f000 f874 	bl	800a278 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a190:	4b07      	ldr	r3, [pc, #28]	; (800a1b0 <vPortFree+0xc0>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	3301      	adds	r3, #1
 800a196:	4a06      	ldr	r2, [pc, #24]	; (800a1b0 <vPortFree+0xc0>)
 800a198:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a19a:	f7fe fc39 	bl	8008a10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a19e:	bf00      	nop
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	200083e0 	.word	0x200083e0
 800a1ac:	200083d0 	.word	0x200083d0
 800a1b0:	200083dc 	.word	0x200083dc

0800a1b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a1ba:	f247 5330 	movw	r3, #30000	; 0x7530
 800a1be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a1c0:	4b27      	ldr	r3, [pc, #156]	; (800a260 <prvHeapInit+0xac>)
 800a1c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f003 0307 	and.w	r3, r3, #7
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00c      	beq.n	800a1e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3307      	adds	r3, #7
 800a1d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f023 0307 	bic.w	r3, r3, #7
 800a1da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	4a1f      	ldr	r2, [pc, #124]	; (800a260 <prvHeapInit+0xac>)
 800a1e4:	4413      	add	r3, r2
 800a1e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a1ec:	4a1d      	ldr	r2, [pc, #116]	; (800a264 <prvHeapInit+0xb0>)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a1f2:	4b1c      	ldr	r3, [pc, #112]	; (800a264 <prvHeapInit+0xb0>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a200:	2208      	movs	r2, #8
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	1a9b      	subs	r3, r3, r2
 800a206:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f023 0307 	bic.w	r3, r3, #7
 800a20e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	4a15      	ldr	r2, [pc, #84]	; (800a268 <prvHeapInit+0xb4>)
 800a214:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a216:	4b14      	ldr	r3, [pc, #80]	; (800a268 <prvHeapInit+0xb4>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2200      	movs	r2, #0
 800a21c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a21e:	4b12      	ldr	r3, [pc, #72]	; (800a268 <prvHeapInit+0xb4>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2200      	movs	r2, #0
 800a224:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	1ad2      	subs	r2, r2, r3
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a234:	4b0c      	ldr	r3, [pc, #48]	; (800a268 <prvHeapInit+0xb4>)
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	4a0a      	ldr	r2, [pc, #40]	; (800a26c <prvHeapInit+0xb8>)
 800a242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	4a09      	ldr	r2, [pc, #36]	; (800a270 <prvHeapInit+0xbc>)
 800a24a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a24c:	4b09      	ldr	r3, [pc, #36]	; (800a274 <prvHeapInit+0xc0>)
 800a24e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a252:	601a      	str	r2, [r3, #0]
}
 800a254:	bf00      	nop
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	20000e94 	.word	0x20000e94
 800a264:	200083c4 	.word	0x200083c4
 800a268:	200083cc 	.word	0x200083cc
 800a26c:	200083d4 	.word	0x200083d4
 800a270:	200083d0 	.word	0x200083d0
 800a274:	200083e0 	.word	0x200083e0

0800a278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a280:	4b28      	ldr	r3, [pc, #160]	; (800a324 <prvInsertBlockIntoFreeList+0xac>)
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	e002      	b.n	800a28c <prvInsertBlockIntoFreeList+0x14>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	60fb      	str	r3, [r7, #12]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	429a      	cmp	r2, r3
 800a294:	d8f7      	bhi.n	800a286 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d108      	bne.n	800a2ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	441a      	add	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	441a      	add	r2, r3
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d118      	bne.n	800a300 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	4b15      	ldr	r3, [pc, #84]	; (800a328 <prvInsertBlockIntoFreeList+0xb0>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d00d      	beq.n	800a2f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	441a      	add	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	e008      	b.n	800a308 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a2f6:	4b0c      	ldr	r3, [pc, #48]	; (800a328 <prvInsertBlockIntoFreeList+0xb0>)
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	e003      	b.n	800a308 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d002      	beq.n	800a316 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a316:	bf00      	nop
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	200083c4 	.word	0x200083c4
 800a328:	200083cc 	.word	0x200083cc

0800a32c <__errno>:
 800a32c:	4b01      	ldr	r3, [pc, #4]	; (800a334 <__errno+0x8>)
 800a32e:	6818      	ldr	r0, [r3, #0]
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	20000078 	.word	0x20000078

0800a338 <std>:
 800a338:	2300      	movs	r3, #0
 800a33a:	b510      	push	{r4, lr}
 800a33c:	4604      	mov	r4, r0
 800a33e:	e9c0 3300 	strd	r3, r3, [r0]
 800a342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a346:	6083      	str	r3, [r0, #8]
 800a348:	8181      	strh	r1, [r0, #12]
 800a34a:	6643      	str	r3, [r0, #100]	; 0x64
 800a34c:	81c2      	strh	r2, [r0, #14]
 800a34e:	6183      	str	r3, [r0, #24]
 800a350:	4619      	mov	r1, r3
 800a352:	2208      	movs	r2, #8
 800a354:	305c      	adds	r0, #92	; 0x5c
 800a356:	f000 f91a 	bl	800a58e <memset>
 800a35a:	4b05      	ldr	r3, [pc, #20]	; (800a370 <std+0x38>)
 800a35c:	6263      	str	r3, [r4, #36]	; 0x24
 800a35e:	4b05      	ldr	r3, [pc, #20]	; (800a374 <std+0x3c>)
 800a360:	62a3      	str	r3, [r4, #40]	; 0x28
 800a362:	4b05      	ldr	r3, [pc, #20]	; (800a378 <std+0x40>)
 800a364:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a366:	4b05      	ldr	r3, [pc, #20]	; (800a37c <std+0x44>)
 800a368:	6224      	str	r4, [r4, #32]
 800a36a:	6323      	str	r3, [r4, #48]	; 0x30
 800a36c:	bd10      	pop	{r4, pc}
 800a36e:	bf00      	nop
 800a370:	0800b4fd 	.word	0x0800b4fd
 800a374:	0800b51f 	.word	0x0800b51f
 800a378:	0800b557 	.word	0x0800b557
 800a37c:	0800b57b 	.word	0x0800b57b

0800a380 <_cleanup_r>:
 800a380:	4901      	ldr	r1, [pc, #4]	; (800a388 <_cleanup_r+0x8>)
 800a382:	f000 b8af 	b.w	800a4e4 <_fwalk_reent>
 800a386:	bf00      	nop
 800a388:	0800d2e1 	.word	0x0800d2e1

0800a38c <__sfmoreglue>:
 800a38c:	b570      	push	{r4, r5, r6, lr}
 800a38e:	2268      	movs	r2, #104	; 0x68
 800a390:	1e4d      	subs	r5, r1, #1
 800a392:	4355      	muls	r5, r2
 800a394:	460e      	mov	r6, r1
 800a396:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a39a:	f000 f921 	bl	800a5e0 <_malloc_r>
 800a39e:	4604      	mov	r4, r0
 800a3a0:	b140      	cbz	r0, 800a3b4 <__sfmoreglue+0x28>
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	e9c0 1600 	strd	r1, r6, [r0]
 800a3a8:	300c      	adds	r0, #12
 800a3aa:	60a0      	str	r0, [r4, #8]
 800a3ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a3b0:	f000 f8ed 	bl	800a58e <memset>
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}

0800a3b8 <__sfp_lock_acquire>:
 800a3b8:	4801      	ldr	r0, [pc, #4]	; (800a3c0 <__sfp_lock_acquire+0x8>)
 800a3ba:	f000 b8d8 	b.w	800a56e <__retarget_lock_acquire_recursive>
 800a3be:	bf00      	nop
 800a3c0:	200083e5 	.word	0x200083e5

0800a3c4 <__sfp_lock_release>:
 800a3c4:	4801      	ldr	r0, [pc, #4]	; (800a3cc <__sfp_lock_release+0x8>)
 800a3c6:	f000 b8d3 	b.w	800a570 <__retarget_lock_release_recursive>
 800a3ca:	bf00      	nop
 800a3cc:	200083e5 	.word	0x200083e5

0800a3d0 <__sinit_lock_acquire>:
 800a3d0:	4801      	ldr	r0, [pc, #4]	; (800a3d8 <__sinit_lock_acquire+0x8>)
 800a3d2:	f000 b8cc 	b.w	800a56e <__retarget_lock_acquire_recursive>
 800a3d6:	bf00      	nop
 800a3d8:	200083e6 	.word	0x200083e6

0800a3dc <__sinit_lock_release>:
 800a3dc:	4801      	ldr	r0, [pc, #4]	; (800a3e4 <__sinit_lock_release+0x8>)
 800a3de:	f000 b8c7 	b.w	800a570 <__retarget_lock_release_recursive>
 800a3e2:	bf00      	nop
 800a3e4:	200083e6 	.word	0x200083e6

0800a3e8 <__sinit>:
 800a3e8:	b510      	push	{r4, lr}
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	f7ff fff0 	bl	800a3d0 <__sinit_lock_acquire>
 800a3f0:	69a3      	ldr	r3, [r4, #24]
 800a3f2:	b11b      	cbz	r3, 800a3fc <__sinit+0x14>
 800a3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f8:	f7ff bff0 	b.w	800a3dc <__sinit_lock_release>
 800a3fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a400:	6523      	str	r3, [r4, #80]	; 0x50
 800a402:	4b13      	ldr	r3, [pc, #76]	; (800a450 <__sinit+0x68>)
 800a404:	4a13      	ldr	r2, [pc, #76]	; (800a454 <__sinit+0x6c>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	62a2      	str	r2, [r4, #40]	; 0x28
 800a40a:	42a3      	cmp	r3, r4
 800a40c:	bf04      	itt	eq
 800a40e:	2301      	moveq	r3, #1
 800a410:	61a3      	streq	r3, [r4, #24]
 800a412:	4620      	mov	r0, r4
 800a414:	f000 f820 	bl	800a458 <__sfp>
 800a418:	6060      	str	r0, [r4, #4]
 800a41a:	4620      	mov	r0, r4
 800a41c:	f000 f81c 	bl	800a458 <__sfp>
 800a420:	60a0      	str	r0, [r4, #8]
 800a422:	4620      	mov	r0, r4
 800a424:	f000 f818 	bl	800a458 <__sfp>
 800a428:	2200      	movs	r2, #0
 800a42a:	60e0      	str	r0, [r4, #12]
 800a42c:	2104      	movs	r1, #4
 800a42e:	6860      	ldr	r0, [r4, #4]
 800a430:	f7ff ff82 	bl	800a338 <std>
 800a434:	68a0      	ldr	r0, [r4, #8]
 800a436:	2201      	movs	r2, #1
 800a438:	2109      	movs	r1, #9
 800a43a:	f7ff ff7d 	bl	800a338 <std>
 800a43e:	68e0      	ldr	r0, [r4, #12]
 800a440:	2202      	movs	r2, #2
 800a442:	2112      	movs	r1, #18
 800a444:	f7ff ff78 	bl	800a338 <std>
 800a448:	2301      	movs	r3, #1
 800a44a:	61a3      	str	r3, [r4, #24]
 800a44c:	e7d2      	b.n	800a3f4 <__sinit+0xc>
 800a44e:	bf00      	nop
 800a450:	0800eeb8 	.word	0x0800eeb8
 800a454:	0800a381 	.word	0x0800a381

0800a458 <__sfp>:
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45a:	4607      	mov	r7, r0
 800a45c:	f7ff ffac 	bl	800a3b8 <__sfp_lock_acquire>
 800a460:	4b1e      	ldr	r3, [pc, #120]	; (800a4dc <__sfp+0x84>)
 800a462:	681e      	ldr	r6, [r3, #0]
 800a464:	69b3      	ldr	r3, [r6, #24]
 800a466:	b913      	cbnz	r3, 800a46e <__sfp+0x16>
 800a468:	4630      	mov	r0, r6
 800a46a:	f7ff ffbd 	bl	800a3e8 <__sinit>
 800a46e:	3648      	adds	r6, #72	; 0x48
 800a470:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a474:	3b01      	subs	r3, #1
 800a476:	d503      	bpl.n	800a480 <__sfp+0x28>
 800a478:	6833      	ldr	r3, [r6, #0]
 800a47a:	b30b      	cbz	r3, 800a4c0 <__sfp+0x68>
 800a47c:	6836      	ldr	r6, [r6, #0]
 800a47e:	e7f7      	b.n	800a470 <__sfp+0x18>
 800a480:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a484:	b9d5      	cbnz	r5, 800a4bc <__sfp+0x64>
 800a486:	4b16      	ldr	r3, [pc, #88]	; (800a4e0 <__sfp+0x88>)
 800a488:	60e3      	str	r3, [r4, #12]
 800a48a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a48e:	6665      	str	r5, [r4, #100]	; 0x64
 800a490:	f000 f86c 	bl	800a56c <__retarget_lock_init_recursive>
 800a494:	f7ff ff96 	bl	800a3c4 <__sfp_lock_release>
 800a498:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a49c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a4a0:	6025      	str	r5, [r4, #0]
 800a4a2:	61a5      	str	r5, [r4, #24]
 800a4a4:	2208      	movs	r2, #8
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4ac:	f000 f86f 	bl	800a58e <memset>
 800a4b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a4b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4bc:	3468      	adds	r4, #104	; 0x68
 800a4be:	e7d9      	b.n	800a474 <__sfp+0x1c>
 800a4c0:	2104      	movs	r1, #4
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	f7ff ff62 	bl	800a38c <__sfmoreglue>
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	6030      	str	r0, [r6, #0]
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d1d5      	bne.n	800a47c <__sfp+0x24>
 800a4d0:	f7ff ff78 	bl	800a3c4 <__sfp_lock_release>
 800a4d4:	230c      	movs	r3, #12
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	e7ee      	b.n	800a4b8 <__sfp+0x60>
 800a4da:	bf00      	nop
 800a4dc:	0800eeb8 	.word	0x0800eeb8
 800a4e0:	ffff0001 	.word	0xffff0001

0800a4e4 <_fwalk_reent>:
 800a4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e8:	4606      	mov	r6, r0
 800a4ea:	4688      	mov	r8, r1
 800a4ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a4f0:	2700      	movs	r7, #0
 800a4f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4f6:	f1b9 0901 	subs.w	r9, r9, #1
 800a4fa:	d505      	bpl.n	800a508 <_fwalk_reent+0x24>
 800a4fc:	6824      	ldr	r4, [r4, #0]
 800a4fe:	2c00      	cmp	r4, #0
 800a500:	d1f7      	bne.n	800a4f2 <_fwalk_reent+0xe>
 800a502:	4638      	mov	r0, r7
 800a504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a508:	89ab      	ldrh	r3, [r5, #12]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d907      	bls.n	800a51e <_fwalk_reent+0x3a>
 800a50e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a512:	3301      	adds	r3, #1
 800a514:	d003      	beq.n	800a51e <_fwalk_reent+0x3a>
 800a516:	4629      	mov	r1, r5
 800a518:	4630      	mov	r0, r6
 800a51a:	47c0      	blx	r8
 800a51c:	4307      	orrs	r7, r0
 800a51e:	3568      	adds	r5, #104	; 0x68
 800a520:	e7e9      	b.n	800a4f6 <_fwalk_reent+0x12>
	...

0800a524 <__libc_init_array>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	4d0d      	ldr	r5, [pc, #52]	; (800a55c <__libc_init_array+0x38>)
 800a528:	4c0d      	ldr	r4, [pc, #52]	; (800a560 <__libc_init_array+0x3c>)
 800a52a:	1b64      	subs	r4, r4, r5
 800a52c:	10a4      	asrs	r4, r4, #2
 800a52e:	2600      	movs	r6, #0
 800a530:	42a6      	cmp	r6, r4
 800a532:	d109      	bne.n	800a548 <__libc_init_array+0x24>
 800a534:	4d0b      	ldr	r5, [pc, #44]	; (800a564 <__libc_init_array+0x40>)
 800a536:	4c0c      	ldr	r4, [pc, #48]	; (800a568 <__libc_init_array+0x44>)
 800a538:	f004 fc06 	bl	800ed48 <_init>
 800a53c:	1b64      	subs	r4, r4, r5
 800a53e:	10a4      	asrs	r4, r4, #2
 800a540:	2600      	movs	r6, #0
 800a542:	42a6      	cmp	r6, r4
 800a544:	d105      	bne.n	800a552 <__libc_init_array+0x2e>
 800a546:	bd70      	pop	{r4, r5, r6, pc}
 800a548:	f855 3b04 	ldr.w	r3, [r5], #4
 800a54c:	4798      	blx	r3
 800a54e:	3601      	adds	r6, #1
 800a550:	e7ee      	b.n	800a530 <__libc_init_array+0xc>
 800a552:	f855 3b04 	ldr.w	r3, [r5], #4
 800a556:	4798      	blx	r3
 800a558:	3601      	adds	r6, #1
 800a55a:	e7f2      	b.n	800a542 <__libc_init_array+0x1e>
 800a55c:	0800f308 	.word	0x0800f308
 800a560:	0800f308 	.word	0x0800f308
 800a564:	0800f308 	.word	0x0800f308
 800a568:	0800f30c 	.word	0x0800f30c

0800a56c <__retarget_lock_init_recursive>:
 800a56c:	4770      	bx	lr

0800a56e <__retarget_lock_acquire_recursive>:
 800a56e:	4770      	bx	lr

0800a570 <__retarget_lock_release_recursive>:
 800a570:	4770      	bx	lr

0800a572 <memcpy>:
 800a572:	440a      	add	r2, r1
 800a574:	4291      	cmp	r1, r2
 800a576:	f100 33ff 	add.w	r3, r0, #4294967295
 800a57a:	d100      	bne.n	800a57e <memcpy+0xc>
 800a57c:	4770      	bx	lr
 800a57e:	b510      	push	{r4, lr}
 800a580:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a584:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a588:	4291      	cmp	r1, r2
 800a58a:	d1f9      	bne.n	800a580 <memcpy+0xe>
 800a58c:	bd10      	pop	{r4, pc}

0800a58e <memset>:
 800a58e:	4402      	add	r2, r0
 800a590:	4603      	mov	r3, r0
 800a592:	4293      	cmp	r3, r2
 800a594:	d100      	bne.n	800a598 <memset+0xa>
 800a596:	4770      	bx	lr
 800a598:	f803 1b01 	strb.w	r1, [r3], #1
 800a59c:	e7f9      	b.n	800a592 <memset+0x4>
	...

0800a5a0 <sbrk_aligned>:
 800a5a0:	b570      	push	{r4, r5, r6, lr}
 800a5a2:	4e0e      	ldr	r6, [pc, #56]	; (800a5dc <sbrk_aligned+0x3c>)
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	6831      	ldr	r1, [r6, #0]
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	b911      	cbnz	r1, 800a5b2 <sbrk_aligned+0x12>
 800a5ac:	f000 ff70 	bl	800b490 <_sbrk_r>
 800a5b0:	6030      	str	r0, [r6, #0]
 800a5b2:	4621      	mov	r1, r4
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	f000 ff6b 	bl	800b490 <_sbrk_r>
 800a5ba:	1c43      	adds	r3, r0, #1
 800a5bc:	d00a      	beq.n	800a5d4 <sbrk_aligned+0x34>
 800a5be:	1cc4      	adds	r4, r0, #3
 800a5c0:	f024 0403 	bic.w	r4, r4, #3
 800a5c4:	42a0      	cmp	r0, r4
 800a5c6:	d007      	beq.n	800a5d8 <sbrk_aligned+0x38>
 800a5c8:	1a21      	subs	r1, r4, r0
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	f000 ff60 	bl	800b490 <_sbrk_r>
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	d101      	bne.n	800a5d8 <sbrk_aligned+0x38>
 800a5d4:	f04f 34ff 	mov.w	r4, #4294967295
 800a5d8:	4620      	mov	r0, r4
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	200083ec 	.word	0x200083ec

0800a5e0 <_malloc_r>:
 800a5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e4:	1ccd      	adds	r5, r1, #3
 800a5e6:	f025 0503 	bic.w	r5, r5, #3
 800a5ea:	3508      	adds	r5, #8
 800a5ec:	2d0c      	cmp	r5, #12
 800a5ee:	bf38      	it	cc
 800a5f0:	250c      	movcc	r5, #12
 800a5f2:	2d00      	cmp	r5, #0
 800a5f4:	4607      	mov	r7, r0
 800a5f6:	db01      	blt.n	800a5fc <_malloc_r+0x1c>
 800a5f8:	42a9      	cmp	r1, r5
 800a5fa:	d905      	bls.n	800a608 <_malloc_r+0x28>
 800a5fc:	230c      	movs	r3, #12
 800a5fe:	603b      	str	r3, [r7, #0]
 800a600:	2600      	movs	r6, #0
 800a602:	4630      	mov	r0, r6
 800a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a608:	4e2e      	ldr	r6, [pc, #184]	; (800a6c4 <_malloc_r+0xe4>)
 800a60a:	f003 fabd 	bl	800db88 <__malloc_lock>
 800a60e:	6833      	ldr	r3, [r6, #0]
 800a610:	461c      	mov	r4, r3
 800a612:	bb34      	cbnz	r4, 800a662 <_malloc_r+0x82>
 800a614:	4629      	mov	r1, r5
 800a616:	4638      	mov	r0, r7
 800a618:	f7ff ffc2 	bl	800a5a0 <sbrk_aligned>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	4604      	mov	r4, r0
 800a620:	d14d      	bne.n	800a6be <_malloc_r+0xde>
 800a622:	6834      	ldr	r4, [r6, #0]
 800a624:	4626      	mov	r6, r4
 800a626:	2e00      	cmp	r6, #0
 800a628:	d140      	bne.n	800a6ac <_malloc_r+0xcc>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	4631      	mov	r1, r6
 800a62e:	4638      	mov	r0, r7
 800a630:	eb04 0803 	add.w	r8, r4, r3
 800a634:	f000 ff2c 	bl	800b490 <_sbrk_r>
 800a638:	4580      	cmp	r8, r0
 800a63a:	d13a      	bne.n	800a6b2 <_malloc_r+0xd2>
 800a63c:	6821      	ldr	r1, [r4, #0]
 800a63e:	3503      	adds	r5, #3
 800a640:	1a6d      	subs	r5, r5, r1
 800a642:	f025 0503 	bic.w	r5, r5, #3
 800a646:	3508      	adds	r5, #8
 800a648:	2d0c      	cmp	r5, #12
 800a64a:	bf38      	it	cc
 800a64c:	250c      	movcc	r5, #12
 800a64e:	4629      	mov	r1, r5
 800a650:	4638      	mov	r0, r7
 800a652:	f7ff ffa5 	bl	800a5a0 <sbrk_aligned>
 800a656:	3001      	adds	r0, #1
 800a658:	d02b      	beq.n	800a6b2 <_malloc_r+0xd2>
 800a65a:	6823      	ldr	r3, [r4, #0]
 800a65c:	442b      	add	r3, r5
 800a65e:	6023      	str	r3, [r4, #0]
 800a660:	e00e      	b.n	800a680 <_malloc_r+0xa0>
 800a662:	6822      	ldr	r2, [r4, #0]
 800a664:	1b52      	subs	r2, r2, r5
 800a666:	d41e      	bmi.n	800a6a6 <_malloc_r+0xc6>
 800a668:	2a0b      	cmp	r2, #11
 800a66a:	d916      	bls.n	800a69a <_malloc_r+0xba>
 800a66c:	1961      	adds	r1, r4, r5
 800a66e:	42a3      	cmp	r3, r4
 800a670:	6025      	str	r5, [r4, #0]
 800a672:	bf18      	it	ne
 800a674:	6059      	strne	r1, [r3, #4]
 800a676:	6863      	ldr	r3, [r4, #4]
 800a678:	bf08      	it	eq
 800a67a:	6031      	streq	r1, [r6, #0]
 800a67c:	5162      	str	r2, [r4, r5]
 800a67e:	604b      	str	r3, [r1, #4]
 800a680:	4638      	mov	r0, r7
 800a682:	f104 060b 	add.w	r6, r4, #11
 800a686:	f003 fa85 	bl	800db94 <__malloc_unlock>
 800a68a:	f026 0607 	bic.w	r6, r6, #7
 800a68e:	1d23      	adds	r3, r4, #4
 800a690:	1af2      	subs	r2, r6, r3
 800a692:	d0b6      	beq.n	800a602 <_malloc_r+0x22>
 800a694:	1b9b      	subs	r3, r3, r6
 800a696:	50a3      	str	r3, [r4, r2]
 800a698:	e7b3      	b.n	800a602 <_malloc_r+0x22>
 800a69a:	6862      	ldr	r2, [r4, #4]
 800a69c:	42a3      	cmp	r3, r4
 800a69e:	bf0c      	ite	eq
 800a6a0:	6032      	streq	r2, [r6, #0]
 800a6a2:	605a      	strne	r2, [r3, #4]
 800a6a4:	e7ec      	b.n	800a680 <_malloc_r+0xa0>
 800a6a6:	4623      	mov	r3, r4
 800a6a8:	6864      	ldr	r4, [r4, #4]
 800a6aa:	e7b2      	b.n	800a612 <_malloc_r+0x32>
 800a6ac:	4634      	mov	r4, r6
 800a6ae:	6876      	ldr	r6, [r6, #4]
 800a6b0:	e7b9      	b.n	800a626 <_malloc_r+0x46>
 800a6b2:	230c      	movs	r3, #12
 800a6b4:	603b      	str	r3, [r7, #0]
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	f003 fa6c 	bl	800db94 <__malloc_unlock>
 800a6bc:	e7a1      	b.n	800a602 <_malloc_r+0x22>
 800a6be:	6025      	str	r5, [r4, #0]
 800a6c0:	e7de      	b.n	800a680 <_malloc_r+0xa0>
 800a6c2:	bf00      	nop
 800a6c4:	200083e8 	.word	0x200083e8

0800a6c8 <__cvt>:
 800a6c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6cc:	ec55 4b10 	vmov	r4, r5, d0
 800a6d0:	2d00      	cmp	r5, #0
 800a6d2:	460e      	mov	r6, r1
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	462b      	mov	r3, r5
 800a6d8:	bfbb      	ittet	lt
 800a6da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a6de:	461d      	movlt	r5, r3
 800a6e0:	2300      	movge	r3, #0
 800a6e2:	232d      	movlt	r3, #45	; 0x2d
 800a6e4:	700b      	strb	r3, [r1, #0]
 800a6e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a6ec:	4691      	mov	r9, r2
 800a6ee:	f023 0820 	bic.w	r8, r3, #32
 800a6f2:	bfbc      	itt	lt
 800a6f4:	4622      	movlt	r2, r4
 800a6f6:	4614      	movlt	r4, r2
 800a6f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6fc:	d005      	beq.n	800a70a <__cvt+0x42>
 800a6fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a702:	d100      	bne.n	800a706 <__cvt+0x3e>
 800a704:	3601      	adds	r6, #1
 800a706:	2102      	movs	r1, #2
 800a708:	e000      	b.n	800a70c <__cvt+0x44>
 800a70a:	2103      	movs	r1, #3
 800a70c:	ab03      	add	r3, sp, #12
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	ab02      	add	r3, sp, #8
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	ec45 4b10 	vmov	d0, r4, r5
 800a718:	4653      	mov	r3, sl
 800a71a:	4632      	mov	r2, r6
 800a71c:	f001 ff6c 	bl	800c5f8 <_dtoa_r>
 800a720:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a724:	4607      	mov	r7, r0
 800a726:	d102      	bne.n	800a72e <__cvt+0x66>
 800a728:	f019 0f01 	tst.w	r9, #1
 800a72c:	d022      	beq.n	800a774 <__cvt+0xac>
 800a72e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a732:	eb07 0906 	add.w	r9, r7, r6
 800a736:	d110      	bne.n	800a75a <__cvt+0x92>
 800a738:	783b      	ldrb	r3, [r7, #0]
 800a73a:	2b30      	cmp	r3, #48	; 0x30
 800a73c:	d10a      	bne.n	800a754 <__cvt+0x8c>
 800a73e:	2200      	movs	r2, #0
 800a740:	2300      	movs	r3, #0
 800a742:	4620      	mov	r0, r4
 800a744:	4629      	mov	r1, r5
 800a746:	f7f6 f9bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800a74a:	b918      	cbnz	r0, 800a754 <__cvt+0x8c>
 800a74c:	f1c6 0601 	rsb	r6, r6, #1
 800a750:	f8ca 6000 	str.w	r6, [sl]
 800a754:	f8da 3000 	ldr.w	r3, [sl]
 800a758:	4499      	add	r9, r3
 800a75a:	2200      	movs	r2, #0
 800a75c:	2300      	movs	r3, #0
 800a75e:	4620      	mov	r0, r4
 800a760:	4629      	mov	r1, r5
 800a762:	f7f6 f9b1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a766:	b108      	cbz	r0, 800a76c <__cvt+0xa4>
 800a768:	f8cd 900c 	str.w	r9, [sp, #12]
 800a76c:	2230      	movs	r2, #48	; 0x30
 800a76e:	9b03      	ldr	r3, [sp, #12]
 800a770:	454b      	cmp	r3, r9
 800a772:	d307      	bcc.n	800a784 <__cvt+0xbc>
 800a774:	9b03      	ldr	r3, [sp, #12]
 800a776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a778:	1bdb      	subs	r3, r3, r7
 800a77a:	4638      	mov	r0, r7
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	b004      	add	sp, #16
 800a780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a784:	1c59      	adds	r1, r3, #1
 800a786:	9103      	str	r1, [sp, #12]
 800a788:	701a      	strb	r2, [r3, #0]
 800a78a:	e7f0      	b.n	800a76e <__cvt+0xa6>

0800a78c <__exponent>:
 800a78c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a78e:	4603      	mov	r3, r0
 800a790:	2900      	cmp	r1, #0
 800a792:	bfb8      	it	lt
 800a794:	4249      	neglt	r1, r1
 800a796:	f803 2b02 	strb.w	r2, [r3], #2
 800a79a:	bfb4      	ite	lt
 800a79c:	222d      	movlt	r2, #45	; 0x2d
 800a79e:	222b      	movge	r2, #43	; 0x2b
 800a7a0:	2909      	cmp	r1, #9
 800a7a2:	7042      	strb	r2, [r0, #1]
 800a7a4:	dd2a      	ble.n	800a7fc <__exponent+0x70>
 800a7a6:	f10d 0407 	add.w	r4, sp, #7
 800a7aa:	46a4      	mov	ip, r4
 800a7ac:	270a      	movs	r7, #10
 800a7ae:	46a6      	mov	lr, r4
 800a7b0:	460a      	mov	r2, r1
 800a7b2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a7b6:	fb07 1516 	mls	r5, r7, r6, r1
 800a7ba:	3530      	adds	r5, #48	; 0x30
 800a7bc:	2a63      	cmp	r2, #99	; 0x63
 800a7be:	f104 34ff 	add.w	r4, r4, #4294967295
 800a7c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a7c6:	4631      	mov	r1, r6
 800a7c8:	dcf1      	bgt.n	800a7ae <__exponent+0x22>
 800a7ca:	3130      	adds	r1, #48	; 0x30
 800a7cc:	f1ae 0502 	sub.w	r5, lr, #2
 800a7d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a7d4:	1c44      	adds	r4, r0, #1
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4561      	cmp	r1, ip
 800a7da:	d30a      	bcc.n	800a7f2 <__exponent+0x66>
 800a7dc:	f10d 0209 	add.w	r2, sp, #9
 800a7e0:	eba2 020e 	sub.w	r2, r2, lr
 800a7e4:	4565      	cmp	r5, ip
 800a7e6:	bf88      	it	hi
 800a7e8:	2200      	movhi	r2, #0
 800a7ea:	4413      	add	r3, r2
 800a7ec:	1a18      	subs	r0, r3, r0
 800a7ee:	b003      	add	sp, #12
 800a7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a7fa:	e7ed      	b.n	800a7d8 <__exponent+0x4c>
 800a7fc:	2330      	movs	r3, #48	; 0x30
 800a7fe:	3130      	adds	r1, #48	; 0x30
 800a800:	7083      	strb	r3, [r0, #2]
 800a802:	70c1      	strb	r1, [r0, #3]
 800a804:	1d03      	adds	r3, r0, #4
 800a806:	e7f1      	b.n	800a7ec <__exponent+0x60>

0800a808 <_printf_float>:
 800a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	ed2d 8b02 	vpush	{d8}
 800a810:	b08d      	sub	sp, #52	; 0x34
 800a812:	460c      	mov	r4, r1
 800a814:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a818:	4616      	mov	r6, r2
 800a81a:	461f      	mov	r7, r3
 800a81c:	4605      	mov	r5, r0
 800a81e:	f003 f91d 	bl	800da5c <_localeconv_r>
 800a822:	f8d0 a000 	ldr.w	sl, [r0]
 800a826:	4650      	mov	r0, sl
 800a828:	f7f5 fcd2 	bl	80001d0 <strlen>
 800a82c:	2300      	movs	r3, #0
 800a82e:	930a      	str	r3, [sp, #40]	; 0x28
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	9305      	str	r3, [sp, #20]
 800a834:	f8d8 3000 	ldr.w	r3, [r8]
 800a838:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a83c:	3307      	adds	r3, #7
 800a83e:	f023 0307 	bic.w	r3, r3, #7
 800a842:	f103 0208 	add.w	r2, r3, #8
 800a846:	f8c8 2000 	str.w	r2, [r8]
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a852:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a856:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a85a:	9307      	str	r3, [sp, #28]
 800a85c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a860:	ee08 0a10 	vmov	s16, r0
 800a864:	4b9f      	ldr	r3, [pc, #636]	; (800aae4 <_printf_float+0x2dc>)
 800a866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a86a:	f04f 32ff 	mov.w	r2, #4294967295
 800a86e:	f7f6 f95d 	bl	8000b2c <__aeabi_dcmpun>
 800a872:	bb88      	cbnz	r0, 800a8d8 <_printf_float+0xd0>
 800a874:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a878:	4b9a      	ldr	r3, [pc, #616]	; (800aae4 <_printf_float+0x2dc>)
 800a87a:	f04f 32ff 	mov.w	r2, #4294967295
 800a87e:	f7f6 f937 	bl	8000af0 <__aeabi_dcmple>
 800a882:	bb48      	cbnz	r0, 800a8d8 <_printf_float+0xd0>
 800a884:	2200      	movs	r2, #0
 800a886:	2300      	movs	r3, #0
 800a888:	4640      	mov	r0, r8
 800a88a:	4649      	mov	r1, r9
 800a88c:	f7f6 f926 	bl	8000adc <__aeabi_dcmplt>
 800a890:	b110      	cbz	r0, 800a898 <_printf_float+0x90>
 800a892:	232d      	movs	r3, #45	; 0x2d
 800a894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a898:	4b93      	ldr	r3, [pc, #588]	; (800aae8 <_printf_float+0x2e0>)
 800a89a:	4894      	ldr	r0, [pc, #592]	; (800aaec <_printf_float+0x2e4>)
 800a89c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a8a0:	bf94      	ite	ls
 800a8a2:	4698      	movls	r8, r3
 800a8a4:	4680      	movhi	r8, r0
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	6123      	str	r3, [r4, #16]
 800a8aa:	9b05      	ldr	r3, [sp, #20]
 800a8ac:	f023 0204 	bic.w	r2, r3, #4
 800a8b0:	6022      	str	r2, [r4, #0]
 800a8b2:	f04f 0900 	mov.w	r9, #0
 800a8b6:	9700      	str	r7, [sp, #0]
 800a8b8:	4633      	mov	r3, r6
 800a8ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8bc:	4621      	mov	r1, r4
 800a8be:	4628      	mov	r0, r5
 800a8c0:	f000 f9d8 	bl	800ac74 <_printf_common>
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	f040 8090 	bne.w	800a9ea <_printf_float+0x1e2>
 800a8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ce:	b00d      	add	sp, #52	; 0x34
 800a8d0:	ecbd 8b02 	vpop	{d8}
 800a8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d8:	4642      	mov	r2, r8
 800a8da:	464b      	mov	r3, r9
 800a8dc:	4640      	mov	r0, r8
 800a8de:	4649      	mov	r1, r9
 800a8e0:	f7f6 f924 	bl	8000b2c <__aeabi_dcmpun>
 800a8e4:	b140      	cbz	r0, 800a8f8 <_printf_float+0xf0>
 800a8e6:	464b      	mov	r3, r9
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	bfbc      	itt	lt
 800a8ec:	232d      	movlt	r3, #45	; 0x2d
 800a8ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a8f2:	487f      	ldr	r0, [pc, #508]	; (800aaf0 <_printf_float+0x2e8>)
 800a8f4:	4b7f      	ldr	r3, [pc, #508]	; (800aaf4 <_printf_float+0x2ec>)
 800a8f6:	e7d1      	b.n	800a89c <_printf_float+0x94>
 800a8f8:	6863      	ldr	r3, [r4, #4]
 800a8fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a8fe:	9206      	str	r2, [sp, #24]
 800a900:	1c5a      	adds	r2, r3, #1
 800a902:	d13f      	bne.n	800a984 <_printf_float+0x17c>
 800a904:	2306      	movs	r3, #6
 800a906:	6063      	str	r3, [r4, #4]
 800a908:	9b05      	ldr	r3, [sp, #20]
 800a90a:	6861      	ldr	r1, [r4, #4]
 800a90c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a910:	2300      	movs	r3, #0
 800a912:	9303      	str	r3, [sp, #12]
 800a914:	ab0a      	add	r3, sp, #40	; 0x28
 800a916:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a91a:	ab09      	add	r3, sp, #36	; 0x24
 800a91c:	ec49 8b10 	vmov	d0, r8, r9
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	6022      	str	r2, [r4, #0]
 800a924:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a928:	4628      	mov	r0, r5
 800a92a:	f7ff fecd 	bl	800a6c8 <__cvt>
 800a92e:	9b06      	ldr	r3, [sp, #24]
 800a930:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a932:	2b47      	cmp	r3, #71	; 0x47
 800a934:	4680      	mov	r8, r0
 800a936:	d108      	bne.n	800a94a <_printf_float+0x142>
 800a938:	1cc8      	adds	r0, r1, #3
 800a93a:	db02      	blt.n	800a942 <_printf_float+0x13a>
 800a93c:	6863      	ldr	r3, [r4, #4]
 800a93e:	4299      	cmp	r1, r3
 800a940:	dd41      	ble.n	800a9c6 <_printf_float+0x1be>
 800a942:	f1ab 0b02 	sub.w	fp, fp, #2
 800a946:	fa5f fb8b 	uxtb.w	fp, fp
 800a94a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a94e:	d820      	bhi.n	800a992 <_printf_float+0x18a>
 800a950:	3901      	subs	r1, #1
 800a952:	465a      	mov	r2, fp
 800a954:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a958:	9109      	str	r1, [sp, #36]	; 0x24
 800a95a:	f7ff ff17 	bl	800a78c <__exponent>
 800a95e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a960:	1813      	adds	r3, r2, r0
 800a962:	2a01      	cmp	r2, #1
 800a964:	4681      	mov	r9, r0
 800a966:	6123      	str	r3, [r4, #16]
 800a968:	dc02      	bgt.n	800a970 <_printf_float+0x168>
 800a96a:	6822      	ldr	r2, [r4, #0]
 800a96c:	07d2      	lsls	r2, r2, #31
 800a96e:	d501      	bpl.n	800a974 <_printf_float+0x16c>
 800a970:	3301      	adds	r3, #1
 800a972:	6123      	str	r3, [r4, #16]
 800a974:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d09c      	beq.n	800a8b6 <_printf_float+0xae>
 800a97c:	232d      	movs	r3, #45	; 0x2d
 800a97e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a982:	e798      	b.n	800a8b6 <_printf_float+0xae>
 800a984:	9a06      	ldr	r2, [sp, #24]
 800a986:	2a47      	cmp	r2, #71	; 0x47
 800a988:	d1be      	bne.n	800a908 <_printf_float+0x100>
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1bc      	bne.n	800a908 <_printf_float+0x100>
 800a98e:	2301      	movs	r3, #1
 800a990:	e7b9      	b.n	800a906 <_printf_float+0xfe>
 800a992:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a996:	d118      	bne.n	800a9ca <_printf_float+0x1c2>
 800a998:	2900      	cmp	r1, #0
 800a99a:	6863      	ldr	r3, [r4, #4]
 800a99c:	dd0b      	ble.n	800a9b6 <_printf_float+0x1ae>
 800a99e:	6121      	str	r1, [r4, #16]
 800a9a0:	b913      	cbnz	r3, 800a9a8 <_printf_float+0x1a0>
 800a9a2:	6822      	ldr	r2, [r4, #0]
 800a9a4:	07d0      	lsls	r0, r2, #31
 800a9a6:	d502      	bpl.n	800a9ae <_printf_float+0x1a6>
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	440b      	add	r3, r1
 800a9ac:	6123      	str	r3, [r4, #16]
 800a9ae:	65a1      	str	r1, [r4, #88]	; 0x58
 800a9b0:	f04f 0900 	mov.w	r9, #0
 800a9b4:	e7de      	b.n	800a974 <_printf_float+0x16c>
 800a9b6:	b913      	cbnz	r3, 800a9be <_printf_float+0x1b6>
 800a9b8:	6822      	ldr	r2, [r4, #0]
 800a9ba:	07d2      	lsls	r2, r2, #31
 800a9bc:	d501      	bpl.n	800a9c2 <_printf_float+0x1ba>
 800a9be:	3302      	adds	r3, #2
 800a9c0:	e7f4      	b.n	800a9ac <_printf_float+0x1a4>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e7f2      	b.n	800a9ac <_printf_float+0x1a4>
 800a9c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9cc:	4299      	cmp	r1, r3
 800a9ce:	db05      	blt.n	800a9dc <_printf_float+0x1d4>
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	6121      	str	r1, [r4, #16]
 800a9d4:	07d8      	lsls	r0, r3, #31
 800a9d6:	d5ea      	bpl.n	800a9ae <_printf_float+0x1a6>
 800a9d8:	1c4b      	adds	r3, r1, #1
 800a9da:	e7e7      	b.n	800a9ac <_printf_float+0x1a4>
 800a9dc:	2900      	cmp	r1, #0
 800a9de:	bfd4      	ite	le
 800a9e0:	f1c1 0202 	rsble	r2, r1, #2
 800a9e4:	2201      	movgt	r2, #1
 800a9e6:	4413      	add	r3, r2
 800a9e8:	e7e0      	b.n	800a9ac <_printf_float+0x1a4>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	055a      	lsls	r2, r3, #21
 800a9ee:	d407      	bmi.n	800aa00 <_printf_float+0x1f8>
 800a9f0:	6923      	ldr	r3, [r4, #16]
 800a9f2:	4642      	mov	r2, r8
 800a9f4:	4631      	mov	r1, r6
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	47b8      	blx	r7
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	d12c      	bne.n	800aa58 <_printf_float+0x250>
 800a9fe:	e764      	b.n	800a8ca <_printf_float+0xc2>
 800aa00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa04:	f240 80e0 	bls.w	800abc8 <_printf_float+0x3c0>
 800aa08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f7f6 f85a 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d034      	beq.n	800aa82 <_printf_float+0x27a>
 800aa18:	4a37      	ldr	r2, [pc, #220]	; (800aaf8 <_printf_float+0x2f0>)
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	4631      	mov	r1, r6
 800aa1e:	4628      	mov	r0, r5
 800aa20:	47b8      	blx	r7
 800aa22:	3001      	adds	r0, #1
 800aa24:	f43f af51 	beq.w	800a8ca <_printf_float+0xc2>
 800aa28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	db02      	blt.n	800aa36 <_printf_float+0x22e>
 800aa30:	6823      	ldr	r3, [r4, #0]
 800aa32:	07d8      	lsls	r0, r3, #31
 800aa34:	d510      	bpl.n	800aa58 <_printf_float+0x250>
 800aa36:	ee18 3a10 	vmov	r3, s16
 800aa3a:	4652      	mov	r2, sl
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	4628      	mov	r0, r5
 800aa40:	47b8      	blx	r7
 800aa42:	3001      	adds	r0, #1
 800aa44:	f43f af41 	beq.w	800a8ca <_printf_float+0xc2>
 800aa48:	f04f 0800 	mov.w	r8, #0
 800aa4c:	f104 091a 	add.w	r9, r4, #26
 800aa50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa52:	3b01      	subs	r3, #1
 800aa54:	4543      	cmp	r3, r8
 800aa56:	dc09      	bgt.n	800aa6c <_printf_float+0x264>
 800aa58:	6823      	ldr	r3, [r4, #0]
 800aa5a:	079b      	lsls	r3, r3, #30
 800aa5c:	f100 8105 	bmi.w	800ac6a <_printf_float+0x462>
 800aa60:	68e0      	ldr	r0, [r4, #12]
 800aa62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa64:	4298      	cmp	r0, r3
 800aa66:	bfb8      	it	lt
 800aa68:	4618      	movlt	r0, r3
 800aa6a:	e730      	b.n	800a8ce <_printf_float+0xc6>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	464a      	mov	r2, r9
 800aa70:	4631      	mov	r1, r6
 800aa72:	4628      	mov	r0, r5
 800aa74:	47b8      	blx	r7
 800aa76:	3001      	adds	r0, #1
 800aa78:	f43f af27 	beq.w	800a8ca <_printf_float+0xc2>
 800aa7c:	f108 0801 	add.w	r8, r8, #1
 800aa80:	e7e6      	b.n	800aa50 <_printf_float+0x248>
 800aa82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	dc39      	bgt.n	800aafc <_printf_float+0x2f4>
 800aa88:	4a1b      	ldr	r2, [pc, #108]	; (800aaf8 <_printf_float+0x2f0>)
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	4628      	mov	r0, r5
 800aa90:	47b8      	blx	r7
 800aa92:	3001      	adds	r0, #1
 800aa94:	f43f af19 	beq.w	800a8ca <_printf_float+0xc2>
 800aa98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	d102      	bne.n	800aaa6 <_printf_float+0x29e>
 800aaa0:	6823      	ldr	r3, [r4, #0]
 800aaa2:	07d9      	lsls	r1, r3, #31
 800aaa4:	d5d8      	bpl.n	800aa58 <_printf_float+0x250>
 800aaa6:	ee18 3a10 	vmov	r3, s16
 800aaaa:	4652      	mov	r2, sl
 800aaac:	4631      	mov	r1, r6
 800aaae:	4628      	mov	r0, r5
 800aab0:	47b8      	blx	r7
 800aab2:	3001      	adds	r0, #1
 800aab4:	f43f af09 	beq.w	800a8ca <_printf_float+0xc2>
 800aab8:	f04f 0900 	mov.w	r9, #0
 800aabc:	f104 0a1a 	add.w	sl, r4, #26
 800aac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aac2:	425b      	negs	r3, r3
 800aac4:	454b      	cmp	r3, r9
 800aac6:	dc01      	bgt.n	800aacc <_printf_float+0x2c4>
 800aac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaca:	e792      	b.n	800a9f2 <_printf_float+0x1ea>
 800aacc:	2301      	movs	r3, #1
 800aace:	4652      	mov	r2, sl
 800aad0:	4631      	mov	r1, r6
 800aad2:	4628      	mov	r0, r5
 800aad4:	47b8      	blx	r7
 800aad6:	3001      	adds	r0, #1
 800aad8:	f43f aef7 	beq.w	800a8ca <_printf_float+0xc2>
 800aadc:	f109 0901 	add.w	r9, r9, #1
 800aae0:	e7ee      	b.n	800aac0 <_printf_float+0x2b8>
 800aae2:	bf00      	nop
 800aae4:	7fefffff 	.word	0x7fefffff
 800aae8:	0800eebc 	.word	0x0800eebc
 800aaec:	0800eec0 	.word	0x0800eec0
 800aaf0:	0800eec8 	.word	0x0800eec8
 800aaf4:	0800eec4 	.word	0x0800eec4
 800aaf8:	0800eecc 	.word	0x0800eecc
 800aafc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aafe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab00:	429a      	cmp	r2, r3
 800ab02:	bfa8      	it	ge
 800ab04:	461a      	movge	r2, r3
 800ab06:	2a00      	cmp	r2, #0
 800ab08:	4691      	mov	r9, r2
 800ab0a:	dc37      	bgt.n	800ab7c <_printf_float+0x374>
 800ab0c:	f04f 0b00 	mov.w	fp, #0
 800ab10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab14:	f104 021a 	add.w	r2, r4, #26
 800ab18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab1a:	9305      	str	r3, [sp, #20]
 800ab1c:	eba3 0309 	sub.w	r3, r3, r9
 800ab20:	455b      	cmp	r3, fp
 800ab22:	dc33      	bgt.n	800ab8c <_printf_float+0x384>
 800ab24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	db3b      	blt.n	800aba4 <_printf_float+0x39c>
 800ab2c:	6823      	ldr	r3, [r4, #0]
 800ab2e:	07da      	lsls	r2, r3, #31
 800ab30:	d438      	bmi.n	800aba4 <_printf_float+0x39c>
 800ab32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab34:	9a05      	ldr	r2, [sp, #20]
 800ab36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab38:	1a9a      	subs	r2, r3, r2
 800ab3a:	eba3 0901 	sub.w	r9, r3, r1
 800ab3e:	4591      	cmp	r9, r2
 800ab40:	bfa8      	it	ge
 800ab42:	4691      	movge	r9, r2
 800ab44:	f1b9 0f00 	cmp.w	r9, #0
 800ab48:	dc35      	bgt.n	800abb6 <_printf_float+0x3ae>
 800ab4a:	f04f 0800 	mov.w	r8, #0
 800ab4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab52:	f104 0a1a 	add.w	sl, r4, #26
 800ab56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab5a:	1a9b      	subs	r3, r3, r2
 800ab5c:	eba3 0309 	sub.w	r3, r3, r9
 800ab60:	4543      	cmp	r3, r8
 800ab62:	f77f af79 	ble.w	800aa58 <_printf_float+0x250>
 800ab66:	2301      	movs	r3, #1
 800ab68:	4652      	mov	r2, sl
 800ab6a:	4631      	mov	r1, r6
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	47b8      	blx	r7
 800ab70:	3001      	adds	r0, #1
 800ab72:	f43f aeaa 	beq.w	800a8ca <_printf_float+0xc2>
 800ab76:	f108 0801 	add.w	r8, r8, #1
 800ab7a:	e7ec      	b.n	800ab56 <_printf_float+0x34e>
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	4631      	mov	r1, r6
 800ab80:	4642      	mov	r2, r8
 800ab82:	4628      	mov	r0, r5
 800ab84:	47b8      	blx	r7
 800ab86:	3001      	adds	r0, #1
 800ab88:	d1c0      	bne.n	800ab0c <_printf_float+0x304>
 800ab8a:	e69e      	b.n	800a8ca <_printf_float+0xc2>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	4631      	mov	r1, r6
 800ab90:	4628      	mov	r0, r5
 800ab92:	9205      	str	r2, [sp, #20]
 800ab94:	47b8      	blx	r7
 800ab96:	3001      	adds	r0, #1
 800ab98:	f43f ae97 	beq.w	800a8ca <_printf_float+0xc2>
 800ab9c:	9a05      	ldr	r2, [sp, #20]
 800ab9e:	f10b 0b01 	add.w	fp, fp, #1
 800aba2:	e7b9      	b.n	800ab18 <_printf_float+0x310>
 800aba4:	ee18 3a10 	vmov	r3, s16
 800aba8:	4652      	mov	r2, sl
 800abaa:	4631      	mov	r1, r6
 800abac:	4628      	mov	r0, r5
 800abae:	47b8      	blx	r7
 800abb0:	3001      	adds	r0, #1
 800abb2:	d1be      	bne.n	800ab32 <_printf_float+0x32a>
 800abb4:	e689      	b.n	800a8ca <_printf_float+0xc2>
 800abb6:	9a05      	ldr	r2, [sp, #20]
 800abb8:	464b      	mov	r3, r9
 800abba:	4442      	add	r2, r8
 800abbc:	4631      	mov	r1, r6
 800abbe:	4628      	mov	r0, r5
 800abc0:	47b8      	blx	r7
 800abc2:	3001      	adds	r0, #1
 800abc4:	d1c1      	bne.n	800ab4a <_printf_float+0x342>
 800abc6:	e680      	b.n	800a8ca <_printf_float+0xc2>
 800abc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abca:	2a01      	cmp	r2, #1
 800abcc:	dc01      	bgt.n	800abd2 <_printf_float+0x3ca>
 800abce:	07db      	lsls	r3, r3, #31
 800abd0:	d538      	bpl.n	800ac44 <_printf_float+0x43c>
 800abd2:	2301      	movs	r3, #1
 800abd4:	4642      	mov	r2, r8
 800abd6:	4631      	mov	r1, r6
 800abd8:	4628      	mov	r0, r5
 800abda:	47b8      	blx	r7
 800abdc:	3001      	adds	r0, #1
 800abde:	f43f ae74 	beq.w	800a8ca <_printf_float+0xc2>
 800abe2:	ee18 3a10 	vmov	r3, s16
 800abe6:	4652      	mov	r2, sl
 800abe8:	4631      	mov	r1, r6
 800abea:	4628      	mov	r0, r5
 800abec:	47b8      	blx	r7
 800abee:	3001      	adds	r0, #1
 800abf0:	f43f ae6b 	beq.w	800a8ca <_printf_float+0xc2>
 800abf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abf8:	2200      	movs	r2, #0
 800abfa:	2300      	movs	r3, #0
 800abfc:	f7f5 ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac00:	b9d8      	cbnz	r0, 800ac3a <_printf_float+0x432>
 800ac02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac04:	f108 0201 	add.w	r2, r8, #1
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	4631      	mov	r1, r6
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	47b8      	blx	r7
 800ac10:	3001      	adds	r0, #1
 800ac12:	d10e      	bne.n	800ac32 <_printf_float+0x42a>
 800ac14:	e659      	b.n	800a8ca <_printf_float+0xc2>
 800ac16:	2301      	movs	r3, #1
 800ac18:	4652      	mov	r2, sl
 800ac1a:	4631      	mov	r1, r6
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	47b8      	blx	r7
 800ac20:	3001      	adds	r0, #1
 800ac22:	f43f ae52 	beq.w	800a8ca <_printf_float+0xc2>
 800ac26:	f108 0801 	add.w	r8, r8, #1
 800ac2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	4543      	cmp	r3, r8
 800ac30:	dcf1      	bgt.n	800ac16 <_printf_float+0x40e>
 800ac32:	464b      	mov	r3, r9
 800ac34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac38:	e6dc      	b.n	800a9f4 <_printf_float+0x1ec>
 800ac3a:	f04f 0800 	mov.w	r8, #0
 800ac3e:	f104 0a1a 	add.w	sl, r4, #26
 800ac42:	e7f2      	b.n	800ac2a <_printf_float+0x422>
 800ac44:	2301      	movs	r3, #1
 800ac46:	4642      	mov	r2, r8
 800ac48:	e7df      	b.n	800ac0a <_printf_float+0x402>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	464a      	mov	r2, r9
 800ac4e:	4631      	mov	r1, r6
 800ac50:	4628      	mov	r0, r5
 800ac52:	47b8      	blx	r7
 800ac54:	3001      	adds	r0, #1
 800ac56:	f43f ae38 	beq.w	800a8ca <_printf_float+0xc2>
 800ac5a:	f108 0801 	add.w	r8, r8, #1
 800ac5e:	68e3      	ldr	r3, [r4, #12]
 800ac60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac62:	1a5b      	subs	r3, r3, r1
 800ac64:	4543      	cmp	r3, r8
 800ac66:	dcf0      	bgt.n	800ac4a <_printf_float+0x442>
 800ac68:	e6fa      	b.n	800aa60 <_printf_float+0x258>
 800ac6a:	f04f 0800 	mov.w	r8, #0
 800ac6e:	f104 0919 	add.w	r9, r4, #25
 800ac72:	e7f4      	b.n	800ac5e <_printf_float+0x456>

0800ac74 <_printf_common>:
 800ac74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac78:	4616      	mov	r6, r2
 800ac7a:	4699      	mov	r9, r3
 800ac7c:	688a      	ldr	r2, [r1, #8]
 800ac7e:	690b      	ldr	r3, [r1, #16]
 800ac80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac84:	4293      	cmp	r3, r2
 800ac86:	bfb8      	it	lt
 800ac88:	4613      	movlt	r3, r2
 800ac8a:	6033      	str	r3, [r6, #0]
 800ac8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac90:	4607      	mov	r7, r0
 800ac92:	460c      	mov	r4, r1
 800ac94:	b10a      	cbz	r2, 800ac9a <_printf_common+0x26>
 800ac96:	3301      	adds	r3, #1
 800ac98:	6033      	str	r3, [r6, #0]
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	0699      	lsls	r1, r3, #26
 800ac9e:	bf42      	ittt	mi
 800aca0:	6833      	ldrmi	r3, [r6, #0]
 800aca2:	3302      	addmi	r3, #2
 800aca4:	6033      	strmi	r3, [r6, #0]
 800aca6:	6825      	ldr	r5, [r4, #0]
 800aca8:	f015 0506 	ands.w	r5, r5, #6
 800acac:	d106      	bne.n	800acbc <_printf_common+0x48>
 800acae:	f104 0a19 	add.w	sl, r4, #25
 800acb2:	68e3      	ldr	r3, [r4, #12]
 800acb4:	6832      	ldr	r2, [r6, #0]
 800acb6:	1a9b      	subs	r3, r3, r2
 800acb8:	42ab      	cmp	r3, r5
 800acba:	dc26      	bgt.n	800ad0a <_printf_common+0x96>
 800acbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acc0:	1e13      	subs	r3, r2, #0
 800acc2:	6822      	ldr	r2, [r4, #0]
 800acc4:	bf18      	it	ne
 800acc6:	2301      	movne	r3, #1
 800acc8:	0692      	lsls	r2, r2, #26
 800acca:	d42b      	bmi.n	800ad24 <_printf_common+0xb0>
 800accc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acd0:	4649      	mov	r1, r9
 800acd2:	4638      	mov	r0, r7
 800acd4:	47c0      	blx	r8
 800acd6:	3001      	adds	r0, #1
 800acd8:	d01e      	beq.n	800ad18 <_printf_common+0xa4>
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	68e5      	ldr	r5, [r4, #12]
 800acde:	6832      	ldr	r2, [r6, #0]
 800ace0:	f003 0306 	and.w	r3, r3, #6
 800ace4:	2b04      	cmp	r3, #4
 800ace6:	bf08      	it	eq
 800ace8:	1aad      	subeq	r5, r5, r2
 800acea:	68a3      	ldr	r3, [r4, #8]
 800acec:	6922      	ldr	r2, [r4, #16]
 800acee:	bf0c      	ite	eq
 800acf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acf4:	2500      	movne	r5, #0
 800acf6:	4293      	cmp	r3, r2
 800acf8:	bfc4      	itt	gt
 800acfa:	1a9b      	subgt	r3, r3, r2
 800acfc:	18ed      	addgt	r5, r5, r3
 800acfe:	2600      	movs	r6, #0
 800ad00:	341a      	adds	r4, #26
 800ad02:	42b5      	cmp	r5, r6
 800ad04:	d11a      	bne.n	800ad3c <_printf_common+0xc8>
 800ad06:	2000      	movs	r0, #0
 800ad08:	e008      	b.n	800ad1c <_printf_common+0xa8>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	4649      	mov	r1, r9
 800ad10:	4638      	mov	r0, r7
 800ad12:	47c0      	blx	r8
 800ad14:	3001      	adds	r0, #1
 800ad16:	d103      	bne.n	800ad20 <_printf_common+0xac>
 800ad18:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad20:	3501      	adds	r5, #1
 800ad22:	e7c6      	b.n	800acb2 <_printf_common+0x3e>
 800ad24:	18e1      	adds	r1, r4, r3
 800ad26:	1c5a      	adds	r2, r3, #1
 800ad28:	2030      	movs	r0, #48	; 0x30
 800ad2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad2e:	4422      	add	r2, r4
 800ad30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad38:	3302      	adds	r3, #2
 800ad3a:	e7c7      	b.n	800accc <_printf_common+0x58>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	4622      	mov	r2, r4
 800ad40:	4649      	mov	r1, r9
 800ad42:	4638      	mov	r0, r7
 800ad44:	47c0      	blx	r8
 800ad46:	3001      	adds	r0, #1
 800ad48:	d0e6      	beq.n	800ad18 <_printf_common+0xa4>
 800ad4a:	3601      	adds	r6, #1
 800ad4c:	e7d9      	b.n	800ad02 <_printf_common+0x8e>
	...

0800ad50 <_printf_i>:
 800ad50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad54:	7e0f      	ldrb	r7, [r1, #24]
 800ad56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad58:	2f78      	cmp	r7, #120	; 0x78
 800ad5a:	4691      	mov	r9, r2
 800ad5c:	4680      	mov	r8, r0
 800ad5e:	460c      	mov	r4, r1
 800ad60:	469a      	mov	sl, r3
 800ad62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad66:	d807      	bhi.n	800ad78 <_printf_i+0x28>
 800ad68:	2f62      	cmp	r7, #98	; 0x62
 800ad6a:	d80a      	bhi.n	800ad82 <_printf_i+0x32>
 800ad6c:	2f00      	cmp	r7, #0
 800ad6e:	f000 80d8 	beq.w	800af22 <_printf_i+0x1d2>
 800ad72:	2f58      	cmp	r7, #88	; 0x58
 800ad74:	f000 80a3 	beq.w	800aebe <_printf_i+0x16e>
 800ad78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad80:	e03a      	b.n	800adf8 <_printf_i+0xa8>
 800ad82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad86:	2b15      	cmp	r3, #21
 800ad88:	d8f6      	bhi.n	800ad78 <_printf_i+0x28>
 800ad8a:	a101      	add	r1, pc, #4	; (adr r1, 800ad90 <_printf_i+0x40>)
 800ad8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad90:	0800ade9 	.word	0x0800ade9
 800ad94:	0800adfd 	.word	0x0800adfd
 800ad98:	0800ad79 	.word	0x0800ad79
 800ad9c:	0800ad79 	.word	0x0800ad79
 800ada0:	0800ad79 	.word	0x0800ad79
 800ada4:	0800ad79 	.word	0x0800ad79
 800ada8:	0800adfd 	.word	0x0800adfd
 800adac:	0800ad79 	.word	0x0800ad79
 800adb0:	0800ad79 	.word	0x0800ad79
 800adb4:	0800ad79 	.word	0x0800ad79
 800adb8:	0800ad79 	.word	0x0800ad79
 800adbc:	0800af09 	.word	0x0800af09
 800adc0:	0800ae2d 	.word	0x0800ae2d
 800adc4:	0800aeeb 	.word	0x0800aeeb
 800adc8:	0800ad79 	.word	0x0800ad79
 800adcc:	0800ad79 	.word	0x0800ad79
 800add0:	0800af2b 	.word	0x0800af2b
 800add4:	0800ad79 	.word	0x0800ad79
 800add8:	0800ae2d 	.word	0x0800ae2d
 800addc:	0800ad79 	.word	0x0800ad79
 800ade0:	0800ad79 	.word	0x0800ad79
 800ade4:	0800aef3 	.word	0x0800aef3
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	1d1a      	adds	r2, r3, #4
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	602a      	str	r2, [r5, #0]
 800adf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adf8:	2301      	movs	r3, #1
 800adfa:	e0a3      	b.n	800af44 <_printf_i+0x1f4>
 800adfc:	6820      	ldr	r0, [r4, #0]
 800adfe:	6829      	ldr	r1, [r5, #0]
 800ae00:	0606      	lsls	r6, r0, #24
 800ae02:	f101 0304 	add.w	r3, r1, #4
 800ae06:	d50a      	bpl.n	800ae1e <_printf_i+0xce>
 800ae08:	680e      	ldr	r6, [r1, #0]
 800ae0a:	602b      	str	r3, [r5, #0]
 800ae0c:	2e00      	cmp	r6, #0
 800ae0e:	da03      	bge.n	800ae18 <_printf_i+0xc8>
 800ae10:	232d      	movs	r3, #45	; 0x2d
 800ae12:	4276      	negs	r6, r6
 800ae14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae18:	485e      	ldr	r0, [pc, #376]	; (800af94 <_printf_i+0x244>)
 800ae1a:	230a      	movs	r3, #10
 800ae1c:	e019      	b.n	800ae52 <_printf_i+0x102>
 800ae1e:	680e      	ldr	r6, [r1, #0]
 800ae20:	602b      	str	r3, [r5, #0]
 800ae22:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae26:	bf18      	it	ne
 800ae28:	b236      	sxthne	r6, r6
 800ae2a:	e7ef      	b.n	800ae0c <_printf_i+0xbc>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	6820      	ldr	r0, [r4, #0]
 800ae30:	1d19      	adds	r1, r3, #4
 800ae32:	6029      	str	r1, [r5, #0]
 800ae34:	0601      	lsls	r1, r0, #24
 800ae36:	d501      	bpl.n	800ae3c <_printf_i+0xec>
 800ae38:	681e      	ldr	r6, [r3, #0]
 800ae3a:	e002      	b.n	800ae42 <_printf_i+0xf2>
 800ae3c:	0646      	lsls	r6, r0, #25
 800ae3e:	d5fb      	bpl.n	800ae38 <_printf_i+0xe8>
 800ae40:	881e      	ldrh	r6, [r3, #0]
 800ae42:	4854      	ldr	r0, [pc, #336]	; (800af94 <_printf_i+0x244>)
 800ae44:	2f6f      	cmp	r7, #111	; 0x6f
 800ae46:	bf0c      	ite	eq
 800ae48:	2308      	moveq	r3, #8
 800ae4a:	230a      	movne	r3, #10
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae52:	6865      	ldr	r5, [r4, #4]
 800ae54:	60a5      	str	r5, [r4, #8]
 800ae56:	2d00      	cmp	r5, #0
 800ae58:	bfa2      	ittt	ge
 800ae5a:	6821      	ldrge	r1, [r4, #0]
 800ae5c:	f021 0104 	bicge.w	r1, r1, #4
 800ae60:	6021      	strge	r1, [r4, #0]
 800ae62:	b90e      	cbnz	r6, 800ae68 <_printf_i+0x118>
 800ae64:	2d00      	cmp	r5, #0
 800ae66:	d04d      	beq.n	800af04 <_printf_i+0x1b4>
 800ae68:	4615      	mov	r5, r2
 800ae6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae6e:	fb03 6711 	mls	r7, r3, r1, r6
 800ae72:	5dc7      	ldrb	r7, [r0, r7]
 800ae74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae78:	4637      	mov	r7, r6
 800ae7a:	42bb      	cmp	r3, r7
 800ae7c:	460e      	mov	r6, r1
 800ae7e:	d9f4      	bls.n	800ae6a <_printf_i+0x11a>
 800ae80:	2b08      	cmp	r3, #8
 800ae82:	d10b      	bne.n	800ae9c <_printf_i+0x14c>
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	07de      	lsls	r6, r3, #31
 800ae88:	d508      	bpl.n	800ae9c <_printf_i+0x14c>
 800ae8a:	6923      	ldr	r3, [r4, #16]
 800ae8c:	6861      	ldr	r1, [r4, #4]
 800ae8e:	4299      	cmp	r1, r3
 800ae90:	bfde      	ittt	le
 800ae92:	2330      	movle	r3, #48	; 0x30
 800ae94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae9c:	1b52      	subs	r2, r2, r5
 800ae9e:	6122      	str	r2, [r4, #16]
 800aea0:	f8cd a000 	str.w	sl, [sp]
 800aea4:	464b      	mov	r3, r9
 800aea6:	aa03      	add	r2, sp, #12
 800aea8:	4621      	mov	r1, r4
 800aeaa:	4640      	mov	r0, r8
 800aeac:	f7ff fee2 	bl	800ac74 <_printf_common>
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d14c      	bne.n	800af4e <_printf_i+0x1fe>
 800aeb4:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb8:	b004      	add	sp, #16
 800aeba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aebe:	4835      	ldr	r0, [pc, #212]	; (800af94 <_printf_i+0x244>)
 800aec0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aec4:	6829      	ldr	r1, [r5, #0]
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	f851 6b04 	ldr.w	r6, [r1], #4
 800aecc:	6029      	str	r1, [r5, #0]
 800aece:	061d      	lsls	r5, r3, #24
 800aed0:	d514      	bpl.n	800aefc <_printf_i+0x1ac>
 800aed2:	07df      	lsls	r7, r3, #31
 800aed4:	bf44      	itt	mi
 800aed6:	f043 0320 	orrmi.w	r3, r3, #32
 800aeda:	6023      	strmi	r3, [r4, #0]
 800aedc:	b91e      	cbnz	r6, 800aee6 <_printf_i+0x196>
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	f023 0320 	bic.w	r3, r3, #32
 800aee4:	6023      	str	r3, [r4, #0]
 800aee6:	2310      	movs	r3, #16
 800aee8:	e7b0      	b.n	800ae4c <_printf_i+0xfc>
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	f043 0320 	orr.w	r3, r3, #32
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	2378      	movs	r3, #120	; 0x78
 800aef4:	4828      	ldr	r0, [pc, #160]	; (800af98 <_printf_i+0x248>)
 800aef6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aefa:	e7e3      	b.n	800aec4 <_printf_i+0x174>
 800aefc:	0659      	lsls	r1, r3, #25
 800aefe:	bf48      	it	mi
 800af00:	b2b6      	uxthmi	r6, r6
 800af02:	e7e6      	b.n	800aed2 <_printf_i+0x182>
 800af04:	4615      	mov	r5, r2
 800af06:	e7bb      	b.n	800ae80 <_printf_i+0x130>
 800af08:	682b      	ldr	r3, [r5, #0]
 800af0a:	6826      	ldr	r6, [r4, #0]
 800af0c:	6961      	ldr	r1, [r4, #20]
 800af0e:	1d18      	adds	r0, r3, #4
 800af10:	6028      	str	r0, [r5, #0]
 800af12:	0635      	lsls	r5, r6, #24
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	d501      	bpl.n	800af1c <_printf_i+0x1cc>
 800af18:	6019      	str	r1, [r3, #0]
 800af1a:	e002      	b.n	800af22 <_printf_i+0x1d2>
 800af1c:	0670      	lsls	r0, r6, #25
 800af1e:	d5fb      	bpl.n	800af18 <_printf_i+0x1c8>
 800af20:	8019      	strh	r1, [r3, #0]
 800af22:	2300      	movs	r3, #0
 800af24:	6123      	str	r3, [r4, #16]
 800af26:	4615      	mov	r5, r2
 800af28:	e7ba      	b.n	800aea0 <_printf_i+0x150>
 800af2a:	682b      	ldr	r3, [r5, #0]
 800af2c:	1d1a      	adds	r2, r3, #4
 800af2e:	602a      	str	r2, [r5, #0]
 800af30:	681d      	ldr	r5, [r3, #0]
 800af32:	6862      	ldr	r2, [r4, #4]
 800af34:	2100      	movs	r1, #0
 800af36:	4628      	mov	r0, r5
 800af38:	f7f5 f952 	bl	80001e0 <memchr>
 800af3c:	b108      	cbz	r0, 800af42 <_printf_i+0x1f2>
 800af3e:	1b40      	subs	r0, r0, r5
 800af40:	6060      	str	r0, [r4, #4]
 800af42:	6863      	ldr	r3, [r4, #4]
 800af44:	6123      	str	r3, [r4, #16]
 800af46:	2300      	movs	r3, #0
 800af48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af4c:	e7a8      	b.n	800aea0 <_printf_i+0x150>
 800af4e:	6923      	ldr	r3, [r4, #16]
 800af50:	462a      	mov	r2, r5
 800af52:	4649      	mov	r1, r9
 800af54:	4640      	mov	r0, r8
 800af56:	47d0      	blx	sl
 800af58:	3001      	adds	r0, #1
 800af5a:	d0ab      	beq.n	800aeb4 <_printf_i+0x164>
 800af5c:	6823      	ldr	r3, [r4, #0]
 800af5e:	079b      	lsls	r3, r3, #30
 800af60:	d413      	bmi.n	800af8a <_printf_i+0x23a>
 800af62:	68e0      	ldr	r0, [r4, #12]
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	4298      	cmp	r0, r3
 800af68:	bfb8      	it	lt
 800af6a:	4618      	movlt	r0, r3
 800af6c:	e7a4      	b.n	800aeb8 <_printf_i+0x168>
 800af6e:	2301      	movs	r3, #1
 800af70:	4632      	mov	r2, r6
 800af72:	4649      	mov	r1, r9
 800af74:	4640      	mov	r0, r8
 800af76:	47d0      	blx	sl
 800af78:	3001      	adds	r0, #1
 800af7a:	d09b      	beq.n	800aeb4 <_printf_i+0x164>
 800af7c:	3501      	adds	r5, #1
 800af7e:	68e3      	ldr	r3, [r4, #12]
 800af80:	9903      	ldr	r1, [sp, #12]
 800af82:	1a5b      	subs	r3, r3, r1
 800af84:	42ab      	cmp	r3, r5
 800af86:	dcf2      	bgt.n	800af6e <_printf_i+0x21e>
 800af88:	e7eb      	b.n	800af62 <_printf_i+0x212>
 800af8a:	2500      	movs	r5, #0
 800af8c:	f104 0619 	add.w	r6, r4, #25
 800af90:	e7f5      	b.n	800af7e <_printf_i+0x22e>
 800af92:	bf00      	nop
 800af94:	0800eece 	.word	0x0800eece
 800af98:	0800eedf 	.word	0x0800eedf

0800af9c <_scanf_float>:
 800af9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa0:	b087      	sub	sp, #28
 800afa2:	4617      	mov	r7, r2
 800afa4:	9303      	str	r3, [sp, #12]
 800afa6:	688b      	ldr	r3, [r1, #8]
 800afa8:	1e5a      	subs	r2, r3, #1
 800afaa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800afae:	bf83      	ittte	hi
 800afb0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800afb4:	195b      	addhi	r3, r3, r5
 800afb6:	9302      	strhi	r3, [sp, #8]
 800afb8:	2300      	movls	r3, #0
 800afba:	bf86      	itte	hi
 800afbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800afc0:	608b      	strhi	r3, [r1, #8]
 800afc2:	9302      	strls	r3, [sp, #8]
 800afc4:	680b      	ldr	r3, [r1, #0]
 800afc6:	468b      	mov	fp, r1
 800afc8:	2500      	movs	r5, #0
 800afca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800afce:	f84b 3b1c 	str.w	r3, [fp], #28
 800afd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800afd6:	4680      	mov	r8, r0
 800afd8:	460c      	mov	r4, r1
 800afda:	465e      	mov	r6, fp
 800afdc:	46aa      	mov	sl, r5
 800afde:	46a9      	mov	r9, r5
 800afe0:	9501      	str	r5, [sp, #4]
 800afe2:	68a2      	ldr	r2, [r4, #8]
 800afe4:	b152      	cbz	r2, 800affc <_scanf_float+0x60>
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	2b4e      	cmp	r3, #78	; 0x4e
 800afec:	d864      	bhi.n	800b0b8 <_scanf_float+0x11c>
 800afee:	2b40      	cmp	r3, #64	; 0x40
 800aff0:	d83c      	bhi.n	800b06c <_scanf_float+0xd0>
 800aff2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800aff6:	b2c8      	uxtb	r0, r1
 800aff8:	280e      	cmp	r0, #14
 800affa:	d93a      	bls.n	800b072 <_scanf_float+0xd6>
 800affc:	f1b9 0f00 	cmp.w	r9, #0
 800b000:	d003      	beq.n	800b00a <_scanf_float+0x6e>
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b00e:	f1ba 0f01 	cmp.w	sl, #1
 800b012:	f200 8113 	bhi.w	800b23c <_scanf_float+0x2a0>
 800b016:	455e      	cmp	r6, fp
 800b018:	f200 8105 	bhi.w	800b226 <_scanf_float+0x28a>
 800b01c:	2501      	movs	r5, #1
 800b01e:	4628      	mov	r0, r5
 800b020:	b007      	add	sp, #28
 800b022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b026:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b02a:	2a0d      	cmp	r2, #13
 800b02c:	d8e6      	bhi.n	800affc <_scanf_float+0x60>
 800b02e:	a101      	add	r1, pc, #4	; (adr r1, 800b034 <_scanf_float+0x98>)
 800b030:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b034:	0800b173 	.word	0x0800b173
 800b038:	0800affd 	.word	0x0800affd
 800b03c:	0800affd 	.word	0x0800affd
 800b040:	0800affd 	.word	0x0800affd
 800b044:	0800b1d3 	.word	0x0800b1d3
 800b048:	0800b1ab 	.word	0x0800b1ab
 800b04c:	0800affd 	.word	0x0800affd
 800b050:	0800affd 	.word	0x0800affd
 800b054:	0800b181 	.word	0x0800b181
 800b058:	0800affd 	.word	0x0800affd
 800b05c:	0800affd 	.word	0x0800affd
 800b060:	0800affd 	.word	0x0800affd
 800b064:	0800affd 	.word	0x0800affd
 800b068:	0800b139 	.word	0x0800b139
 800b06c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b070:	e7db      	b.n	800b02a <_scanf_float+0x8e>
 800b072:	290e      	cmp	r1, #14
 800b074:	d8c2      	bhi.n	800affc <_scanf_float+0x60>
 800b076:	a001      	add	r0, pc, #4	; (adr r0, 800b07c <_scanf_float+0xe0>)
 800b078:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b07c:	0800b12b 	.word	0x0800b12b
 800b080:	0800affd 	.word	0x0800affd
 800b084:	0800b12b 	.word	0x0800b12b
 800b088:	0800b1bf 	.word	0x0800b1bf
 800b08c:	0800affd 	.word	0x0800affd
 800b090:	0800b0d9 	.word	0x0800b0d9
 800b094:	0800b115 	.word	0x0800b115
 800b098:	0800b115 	.word	0x0800b115
 800b09c:	0800b115 	.word	0x0800b115
 800b0a0:	0800b115 	.word	0x0800b115
 800b0a4:	0800b115 	.word	0x0800b115
 800b0a8:	0800b115 	.word	0x0800b115
 800b0ac:	0800b115 	.word	0x0800b115
 800b0b0:	0800b115 	.word	0x0800b115
 800b0b4:	0800b115 	.word	0x0800b115
 800b0b8:	2b6e      	cmp	r3, #110	; 0x6e
 800b0ba:	d809      	bhi.n	800b0d0 <_scanf_float+0x134>
 800b0bc:	2b60      	cmp	r3, #96	; 0x60
 800b0be:	d8b2      	bhi.n	800b026 <_scanf_float+0x8a>
 800b0c0:	2b54      	cmp	r3, #84	; 0x54
 800b0c2:	d077      	beq.n	800b1b4 <_scanf_float+0x218>
 800b0c4:	2b59      	cmp	r3, #89	; 0x59
 800b0c6:	d199      	bne.n	800affc <_scanf_float+0x60>
 800b0c8:	2d07      	cmp	r5, #7
 800b0ca:	d197      	bne.n	800affc <_scanf_float+0x60>
 800b0cc:	2508      	movs	r5, #8
 800b0ce:	e029      	b.n	800b124 <_scanf_float+0x188>
 800b0d0:	2b74      	cmp	r3, #116	; 0x74
 800b0d2:	d06f      	beq.n	800b1b4 <_scanf_float+0x218>
 800b0d4:	2b79      	cmp	r3, #121	; 0x79
 800b0d6:	e7f6      	b.n	800b0c6 <_scanf_float+0x12a>
 800b0d8:	6821      	ldr	r1, [r4, #0]
 800b0da:	05c8      	lsls	r0, r1, #23
 800b0dc:	d51a      	bpl.n	800b114 <_scanf_float+0x178>
 800b0de:	9b02      	ldr	r3, [sp, #8]
 800b0e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b0e4:	6021      	str	r1, [r4, #0]
 800b0e6:	f109 0901 	add.w	r9, r9, #1
 800b0ea:	b11b      	cbz	r3, 800b0f4 <_scanf_float+0x158>
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	3201      	adds	r2, #1
 800b0f0:	9302      	str	r3, [sp, #8]
 800b0f2:	60a2      	str	r2, [r4, #8]
 800b0f4:	68a3      	ldr	r3, [r4, #8]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	60a3      	str	r3, [r4, #8]
 800b0fa:	6923      	ldr	r3, [r4, #16]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	6123      	str	r3, [r4, #16]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3b01      	subs	r3, #1
 800b104:	2b00      	cmp	r3, #0
 800b106:	607b      	str	r3, [r7, #4]
 800b108:	f340 8084 	ble.w	800b214 <_scanf_float+0x278>
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	3301      	adds	r3, #1
 800b110:	603b      	str	r3, [r7, #0]
 800b112:	e766      	b.n	800afe2 <_scanf_float+0x46>
 800b114:	eb1a 0f05 	cmn.w	sl, r5
 800b118:	f47f af70 	bne.w	800affc <_scanf_float+0x60>
 800b11c:	6822      	ldr	r2, [r4, #0]
 800b11e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b122:	6022      	str	r2, [r4, #0]
 800b124:	f806 3b01 	strb.w	r3, [r6], #1
 800b128:	e7e4      	b.n	800b0f4 <_scanf_float+0x158>
 800b12a:	6822      	ldr	r2, [r4, #0]
 800b12c:	0610      	lsls	r0, r2, #24
 800b12e:	f57f af65 	bpl.w	800affc <_scanf_float+0x60>
 800b132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b136:	e7f4      	b.n	800b122 <_scanf_float+0x186>
 800b138:	f1ba 0f00 	cmp.w	sl, #0
 800b13c:	d10e      	bne.n	800b15c <_scanf_float+0x1c0>
 800b13e:	f1b9 0f00 	cmp.w	r9, #0
 800b142:	d10e      	bne.n	800b162 <_scanf_float+0x1c6>
 800b144:	6822      	ldr	r2, [r4, #0]
 800b146:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b14a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b14e:	d108      	bne.n	800b162 <_scanf_float+0x1c6>
 800b150:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b154:	6022      	str	r2, [r4, #0]
 800b156:	f04f 0a01 	mov.w	sl, #1
 800b15a:	e7e3      	b.n	800b124 <_scanf_float+0x188>
 800b15c:	f1ba 0f02 	cmp.w	sl, #2
 800b160:	d055      	beq.n	800b20e <_scanf_float+0x272>
 800b162:	2d01      	cmp	r5, #1
 800b164:	d002      	beq.n	800b16c <_scanf_float+0x1d0>
 800b166:	2d04      	cmp	r5, #4
 800b168:	f47f af48 	bne.w	800affc <_scanf_float+0x60>
 800b16c:	3501      	adds	r5, #1
 800b16e:	b2ed      	uxtb	r5, r5
 800b170:	e7d8      	b.n	800b124 <_scanf_float+0x188>
 800b172:	f1ba 0f01 	cmp.w	sl, #1
 800b176:	f47f af41 	bne.w	800affc <_scanf_float+0x60>
 800b17a:	f04f 0a02 	mov.w	sl, #2
 800b17e:	e7d1      	b.n	800b124 <_scanf_float+0x188>
 800b180:	b97d      	cbnz	r5, 800b1a2 <_scanf_float+0x206>
 800b182:	f1b9 0f00 	cmp.w	r9, #0
 800b186:	f47f af3c 	bne.w	800b002 <_scanf_float+0x66>
 800b18a:	6822      	ldr	r2, [r4, #0]
 800b18c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b190:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b194:	f47f af39 	bne.w	800b00a <_scanf_float+0x6e>
 800b198:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b19c:	6022      	str	r2, [r4, #0]
 800b19e:	2501      	movs	r5, #1
 800b1a0:	e7c0      	b.n	800b124 <_scanf_float+0x188>
 800b1a2:	2d03      	cmp	r5, #3
 800b1a4:	d0e2      	beq.n	800b16c <_scanf_float+0x1d0>
 800b1a6:	2d05      	cmp	r5, #5
 800b1a8:	e7de      	b.n	800b168 <_scanf_float+0x1cc>
 800b1aa:	2d02      	cmp	r5, #2
 800b1ac:	f47f af26 	bne.w	800affc <_scanf_float+0x60>
 800b1b0:	2503      	movs	r5, #3
 800b1b2:	e7b7      	b.n	800b124 <_scanf_float+0x188>
 800b1b4:	2d06      	cmp	r5, #6
 800b1b6:	f47f af21 	bne.w	800affc <_scanf_float+0x60>
 800b1ba:	2507      	movs	r5, #7
 800b1bc:	e7b2      	b.n	800b124 <_scanf_float+0x188>
 800b1be:	6822      	ldr	r2, [r4, #0]
 800b1c0:	0591      	lsls	r1, r2, #22
 800b1c2:	f57f af1b 	bpl.w	800affc <_scanf_float+0x60>
 800b1c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b1ca:	6022      	str	r2, [r4, #0]
 800b1cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800b1d0:	e7a8      	b.n	800b124 <_scanf_float+0x188>
 800b1d2:	6822      	ldr	r2, [r4, #0]
 800b1d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b1d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b1dc:	d006      	beq.n	800b1ec <_scanf_float+0x250>
 800b1de:	0550      	lsls	r0, r2, #21
 800b1e0:	f57f af0c 	bpl.w	800affc <_scanf_float+0x60>
 800b1e4:	f1b9 0f00 	cmp.w	r9, #0
 800b1e8:	f43f af0f 	beq.w	800b00a <_scanf_float+0x6e>
 800b1ec:	0591      	lsls	r1, r2, #22
 800b1ee:	bf58      	it	pl
 800b1f0:	9901      	ldrpl	r1, [sp, #4]
 800b1f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b1f6:	bf58      	it	pl
 800b1f8:	eba9 0101 	subpl.w	r1, r9, r1
 800b1fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b200:	bf58      	it	pl
 800b202:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b206:	6022      	str	r2, [r4, #0]
 800b208:	f04f 0900 	mov.w	r9, #0
 800b20c:	e78a      	b.n	800b124 <_scanf_float+0x188>
 800b20e:	f04f 0a03 	mov.w	sl, #3
 800b212:	e787      	b.n	800b124 <_scanf_float+0x188>
 800b214:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b218:	4639      	mov	r1, r7
 800b21a:	4640      	mov	r0, r8
 800b21c:	4798      	blx	r3
 800b21e:	2800      	cmp	r0, #0
 800b220:	f43f aedf 	beq.w	800afe2 <_scanf_float+0x46>
 800b224:	e6ea      	b.n	800affc <_scanf_float+0x60>
 800b226:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b22a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b22e:	463a      	mov	r2, r7
 800b230:	4640      	mov	r0, r8
 800b232:	4798      	blx	r3
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	3b01      	subs	r3, #1
 800b238:	6123      	str	r3, [r4, #16]
 800b23a:	e6ec      	b.n	800b016 <_scanf_float+0x7a>
 800b23c:	1e6b      	subs	r3, r5, #1
 800b23e:	2b06      	cmp	r3, #6
 800b240:	d825      	bhi.n	800b28e <_scanf_float+0x2f2>
 800b242:	2d02      	cmp	r5, #2
 800b244:	d836      	bhi.n	800b2b4 <_scanf_float+0x318>
 800b246:	455e      	cmp	r6, fp
 800b248:	f67f aee8 	bls.w	800b01c <_scanf_float+0x80>
 800b24c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b250:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b254:	463a      	mov	r2, r7
 800b256:	4640      	mov	r0, r8
 800b258:	4798      	blx	r3
 800b25a:	6923      	ldr	r3, [r4, #16]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	6123      	str	r3, [r4, #16]
 800b260:	e7f1      	b.n	800b246 <_scanf_float+0x2aa>
 800b262:	9802      	ldr	r0, [sp, #8]
 800b264:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b268:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b26c:	9002      	str	r0, [sp, #8]
 800b26e:	463a      	mov	r2, r7
 800b270:	4640      	mov	r0, r8
 800b272:	4798      	blx	r3
 800b274:	6923      	ldr	r3, [r4, #16]
 800b276:	3b01      	subs	r3, #1
 800b278:	6123      	str	r3, [r4, #16]
 800b27a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b27e:	fa5f fa8a 	uxtb.w	sl, sl
 800b282:	f1ba 0f02 	cmp.w	sl, #2
 800b286:	d1ec      	bne.n	800b262 <_scanf_float+0x2c6>
 800b288:	3d03      	subs	r5, #3
 800b28a:	b2ed      	uxtb	r5, r5
 800b28c:	1b76      	subs	r6, r6, r5
 800b28e:	6823      	ldr	r3, [r4, #0]
 800b290:	05da      	lsls	r2, r3, #23
 800b292:	d52f      	bpl.n	800b2f4 <_scanf_float+0x358>
 800b294:	055b      	lsls	r3, r3, #21
 800b296:	d510      	bpl.n	800b2ba <_scanf_float+0x31e>
 800b298:	455e      	cmp	r6, fp
 800b29a:	f67f aebf 	bls.w	800b01c <_scanf_float+0x80>
 800b29e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b2a6:	463a      	mov	r2, r7
 800b2a8:	4640      	mov	r0, r8
 800b2aa:	4798      	blx	r3
 800b2ac:	6923      	ldr	r3, [r4, #16]
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	6123      	str	r3, [r4, #16]
 800b2b2:	e7f1      	b.n	800b298 <_scanf_float+0x2fc>
 800b2b4:	46aa      	mov	sl, r5
 800b2b6:	9602      	str	r6, [sp, #8]
 800b2b8:	e7df      	b.n	800b27a <_scanf_float+0x2de>
 800b2ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b2be:	6923      	ldr	r3, [r4, #16]
 800b2c0:	2965      	cmp	r1, #101	; 0x65
 800b2c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b2c6:	f106 35ff 	add.w	r5, r6, #4294967295
 800b2ca:	6123      	str	r3, [r4, #16]
 800b2cc:	d00c      	beq.n	800b2e8 <_scanf_float+0x34c>
 800b2ce:	2945      	cmp	r1, #69	; 0x45
 800b2d0:	d00a      	beq.n	800b2e8 <_scanf_float+0x34c>
 800b2d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2d6:	463a      	mov	r2, r7
 800b2d8:	4640      	mov	r0, r8
 800b2da:	4798      	blx	r3
 800b2dc:	6923      	ldr	r3, [r4, #16]
 800b2de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	1eb5      	subs	r5, r6, #2
 800b2e6:	6123      	str	r3, [r4, #16]
 800b2e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2ec:	463a      	mov	r2, r7
 800b2ee:	4640      	mov	r0, r8
 800b2f0:	4798      	blx	r3
 800b2f2:	462e      	mov	r6, r5
 800b2f4:	6825      	ldr	r5, [r4, #0]
 800b2f6:	f015 0510 	ands.w	r5, r5, #16
 800b2fa:	d159      	bne.n	800b3b0 <_scanf_float+0x414>
 800b2fc:	7035      	strb	r5, [r6, #0]
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b308:	d11b      	bne.n	800b342 <_scanf_float+0x3a6>
 800b30a:	9b01      	ldr	r3, [sp, #4]
 800b30c:	454b      	cmp	r3, r9
 800b30e:	eba3 0209 	sub.w	r2, r3, r9
 800b312:	d123      	bne.n	800b35c <_scanf_float+0x3c0>
 800b314:	2200      	movs	r2, #0
 800b316:	4659      	mov	r1, fp
 800b318:	4640      	mov	r0, r8
 800b31a:	f000 ff57 	bl	800c1cc <_strtod_r>
 800b31e:	6822      	ldr	r2, [r4, #0]
 800b320:	9b03      	ldr	r3, [sp, #12]
 800b322:	f012 0f02 	tst.w	r2, #2
 800b326:	ec57 6b10 	vmov	r6, r7, d0
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	d021      	beq.n	800b372 <_scanf_float+0x3d6>
 800b32e:	9903      	ldr	r1, [sp, #12]
 800b330:	1d1a      	adds	r2, r3, #4
 800b332:	600a      	str	r2, [r1, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	e9c3 6700 	strd	r6, r7, [r3]
 800b33a:	68e3      	ldr	r3, [r4, #12]
 800b33c:	3301      	adds	r3, #1
 800b33e:	60e3      	str	r3, [r4, #12]
 800b340:	e66d      	b.n	800b01e <_scanf_float+0x82>
 800b342:	9b04      	ldr	r3, [sp, #16]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d0e5      	beq.n	800b314 <_scanf_float+0x378>
 800b348:	9905      	ldr	r1, [sp, #20]
 800b34a:	230a      	movs	r3, #10
 800b34c:	462a      	mov	r2, r5
 800b34e:	3101      	adds	r1, #1
 800b350:	4640      	mov	r0, r8
 800b352:	f000 ffc3 	bl	800c2dc <_strtol_r>
 800b356:	9b04      	ldr	r3, [sp, #16]
 800b358:	9e05      	ldr	r6, [sp, #20]
 800b35a:	1ac2      	subs	r2, r0, r3
 800b35c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b360:	429e      	cmp	r6, r3
 800b362:	bf28      	it	cs
 800b364:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b368:	4912      	ldr	r1, [pc, #72]	; (800b3b4 <_scanf_float+0x418>)
 800b36a:	4630      	mov	r0, r6
 800b36c:	f000 f8a6 	bl	800b4bc <siprintf>
 800b370:	e7d0      	b.n	800b314 <_scanf_float+0x378>
 800b372:	9903      	ldr	r1, [sp, #12]
 800b374:	f012 0f04 	tst.w	r2, #4
 800b378:	f103 0204 	add.w	r2, r3, #4
 800b37c:	600a      	str	r2, [r1, #0]
 800b37e:	d1d9      	bne.n	800b334 <_scanf_float+0x398>
 800b380:	f8d3 8000 	ldr.w	r8, [r3]
 800b384:	ee10 2a10 	vmov	r2, s0
 800b388:	ee10 0a10 	vmov	r0, s0
 800b38c:	463b      	mov	r3, r7
 800b38e:	4639      	mov	r1, r7
 800b390:	f7f5 fbcc 	bl	8000b2c <__aeabi_dcmpun>
 800b394:	b128      	cbz	r0, 800b3a2 <_scanf_float+0x406>
 800b396:	4808      	ldr	r0, [pc, #32]	; (800b3b8 <_scanf_float+0x41c>)
 800b398:	f000 f88a 	bl	800b4b0 <nanf>
 800b39c:	ed88 0a00 	vstr	s0, [r8]
 800b3a0:	e7cb      	b.n	800b33a <_scanf_float+0x39e>
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	4639      	mov	r1, r7
 800b3a6:	f7f5 fc1f 	bl	8000be8 <__aeabi_d2f>
 800b3aa:	f8c8 0000 	str.w	r0, [r8]
 800b3ae:	e7c4      	b.n	800b33a <_scanf_float+0x39e>
 800b3b0:	2500      	movs	r5, #0
 800b3b2:	e634      	b.n	800b01e <_scanf_float+0x82>
 800b3b4:	0800eef0 	.word	0x0800eef0
 800b3b8:	0800ef83 	.word	0x0800ef83

0800b3bc <cleanup_glue>:
 800b3bc:	b538      	push	{r3, r4, r5, lr}
 800b3be:	460c      	mov	r4, r1
 800b3c0:	6809      	ldr	r1, [r1, #0]
 800b3c2:	4605      	mov	r5, r0
 800b3c4:	b109      	cbz	r1, 800b3ca <cleanup_glue+0xe>
 800b3c6:	f7ff fff9 	bl	800b3bc <cleanup_glue>
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3d2:	f003 b8bd 	b.w	800e550 <_free_r>
	...

0800b3d8 <_reclaim_reent>:
 800b3d8:	4b2c      	ldr	r3, [pc, #176]	; (800b48c <_reclaim_reent+0xb4>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4283      	cmp	r3, r0
 800b3de:	b570      	push	{r4, r5, r6, lr}
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	d051      	beq.n	800b488 <_reclaim_reent+0xb0>
 800b3e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b3e6:	b143      	cbz	r3, 800b3fa <_reclaim_reent+0x22>
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d14a      	bne.n	800b484 <_reclaim_reent+0xac>
 800b3ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3f0:	6819      	ldr	r1, [r3, #0]
 800b3f2:	b111      	cbz	r1, 800b3fa <_reclaim_reent+0x22>
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f003 f8ab 	bl	800e550 <_free_r>
 800b3fa:	6961      	ldr	r1, [r4, #20]
 800b3fc:	b111      	cbz	r1, 800b404 <_reclaim_reent+0x2c>
 800b3fe:	4620      	mov	r0, r4
 800b400:	f003 f8a6 	bl	800e550 <_free_r>
 800b404:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b406:	b111      	cbz	r1, 800b40e <_reclaim_reent+0x36>
 800b408:	4620      	mov	r0, r4
 800b40a:	f003 f8a1 	bl	800e550 <_free_r>
 800b40e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b410:	b111      	cbz	r1, 800b418 <_reclaim_reent+0x40>
 800b412:	4620      	mov	r0, r4
 800b414:	f003 f89c 	bl	800e550 <_free_r>
 800b418:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b41a:	b111      	cbz	r1, 800b422 <_reclaim_reent+0x4a>
 800b41c:	4620      	mov	r0, r4
 800b41e:	f003 f897 	bl	800e550 <_free_r>
 800b422:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b424:	b111      	cbz	r1, 800b42c <_reclaim_reent+0x54>
 800b426:	4620      	mov	r0, r4
 800b428:	f003 f892 	bl	800e550 <_free_r>
 800b42c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b42e:	b111      	cbz	r1, 800b436 <_reclaim_reent+0x5e>
 800b430:	4620      	mov	r0, r4
 800b432:	f003 f88d 	bl	800e550 <_free_r>
 800b436:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b438:	b111      	cbz	r1, 800b440 <_reclaim_reent+0x68>
 800b43a:	4620      	mov	r0, r4
 800b43c:	f003 f888 	bl	800e550 <_free_r>
 800b440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b442:	b111      	cbz	r1, 800b44a <_reclaim_reent+0x72>
 800b444:	4620      	mov	r0, r4
 800b446:	f003 f883 	bl	800e550 <_free_r>
 800b44a:	69a3      	ldr	r3, [r4, #24]
 800b44c:	b1e3      	cbz	r3, 800b488 <_reclaim_reent+0xb0>
 800b44e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b450:	4620      	mov	r0, r4
 800b452:	4798      	blx	r3
 800b454:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b456:	b1b9      	cbz	r1, 800b488 <_reclaim_reent+0xb0>
 800b458:	4620      	mov	r0, r4
 800b45a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b45e:	f7ff bfad 	b.w	800b3bc <cleanup_glue>
 800b462:	5949      	ldr	r1, [r1, r5]
 800b464:	b941      	cbnz	r1, 800b478 <_reclaim_reent+0xa0>
 800b466:	3504      	adds	r5, #4
 800b468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b46a:	2d80      	cmp	r5, #128	; 0x80
 800b46c:	68d9      	ldr	r1, [r3, #12]
 800b46e:	d1f8      	bne.n	800b462 <_reclaim_reent+0x8a>
 800b470:	4620      	mov	r0, r4
 800b472:	f003 f86d 	bl	800e550 <_free_r>
 800b476:	e7ba      	b.n	800b3ee <_reclaim_reent+0x16>
 800b478:	680e      	ldr	r6, [r1, #0]
 800b47a:	4620      	mov	r0, r4
 800b47c:	f003 f868 	bl	800e550 <_free_r>
 800b480:	4631      	mov	r1, r6
 800b482:	e7ef      	b.n	800b464 <_reclaim_reent+0x8c>
 800b484:	2500      	movs	r5, #0
 800b486:	e7ef      	b.n	800b468 <_reclaim_reent+0x90>
 800b488:	bd70      	pop	{r4, r5, r6, pc}
 800b48a:	bf00      	nop
 800b48c:	20000078 	.word	0x20000078

0800b490 <_sbrk_r>:
 800b490:	b538      	push	{r3, r4, r5, lr}
 800b492:	4d06      	ldr	r5, [pc, #24]	; (800b4ac <_sbrk_r+0x1c>)
 800b494:	2300      	movs	r3, #0
 800b496:	4604      	mov	r4, r0
 800b498:	4608      	mov	r0, r1
 800b49a:	602b      	str	r3, [r5, #0]
 800b49c:	f7f6 f8de 	bl	800165c <_sbrk>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_sbrk_r+0x1a>
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_sbrk_r+0x1a>
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	200083f0 	.word	0x200083f0

0800b4b0 <nanf>:
 800b4b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b4b8 <nanf+0x8>
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	7fc00000 	.word	0x7fc00000

0800b4bc <siprintf>:
 800b4bc:	b40e      	push	{r1, r2, r3}
 800b4be:	b500      	push	{lr}
 800b4c0:	b09c      	sub	sp, #112	; 0x70
 800b4c2:	ab1d      	add	r3, sp, #116	; 0x74
 800b4c4:	9002      	str	r0, [sp, #8]
 800b4c6:	9006      	str	r0, [sp, #24]
 800b4c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b4cc:	4809      	ldr	r0, [pc, #36]	; (800b4f4 <siprintf+0x38>)
 800b4ce:	9107      	str	r1, [sp, #28]
 800b4d0:	9104      	str	r1, [sp, #16]
 800b4d2:	4909      	ldr	r1, [pc, #36]	; (800b4f8 <siprintf+0x3c>)
 800b4d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4d8:	9105      	str	r1, [sp, #20]
 800b4da:	6800      	ldr	r0, [r0, #0]
 800b4dc:	9301      	str	r3, [sp, #4]
 800b4de:	a902      	add	r1, sp, #8
 800b4e0:	f003 f8de 	bl	800e6a0 <_svfiprintf_r>
 800b4e4:	9b02      	ldr	r3, [sp, #8]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	701a      	strb	r2, [r3, #0]
 800b4ea:	b01c      	add	sp, #112	; 0x70
 800b4ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4f0:	b003      	add	sp, #12
 800b4f2:	4770      	bx	lr
 800b4f4:	20000078 	.word	0x20000078
 800b4f8:	ffff0208 	.word	0xffff0208

0800b4fc <__sread>:
 800b4fc:	b510      	push	{r4, lr}
 800b4fe:	460c      	mov	r4, r1
 800b500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b504:	f003 fb26 	bl	800eb54 <_read_r>
 800b508:	2800      	cmp	r0, #0
 800b50a:	bfab      	itete	ge
 800b50c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b50e:	89a3      	ldrhlt	r3, [r4, #12]
 800b510:	181b      	addge	r3, r3, r0
 800b512:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b516:	bfac      	ite	ge
 800b518:	6563      	strge	r3, [r4, #84]	; 0x54
 800b51a:	81a3      	strhlt	r3, [r4, #12]
 800b51c:	bd10      	pop	{r4, pc}

0800b51e <__swrite>:
 800b51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b522:	461f      	mov	r7, r3
 800b524:	898b      	ldrh	r3, [r1, #12]
 800b526:	05db      	lsls	r3, r3, #23
 800b528:	4605      	mov	r5, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	4616      	mov	r6, r2
 800b52e:	d505      	bpl.n	800b53c <__swrite+0x1e>
 800b530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b534:	2302      	movs	r3, #2
 800b536:	2200      	movs	r2, #0
 800b538:	f002 fa94 	bl	800da64 <_lseek_r>
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b546:	81a3      	strh	r3, [r4, #12]
 800b548:	4632      	mov	r2, r6
 800b54a:	463b      	mov	r3, r7
 800b54c:	4628      	mov	r0, r5
 800b54e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b552:	f000 bf17 	b.w	800c384 <_write_r>

0800b556 <__sseek>:
 800b556:	b510      	push	{r4, lr}
 800b558:	460c      	mov	r4, r1
 800b55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b55e:	f002 fa81 	bl	800da64 <_lseek_r>
 800b562:	1c43      	adds	r3, r0, #1
 800b564:	89a3      	ldrh	r3, [r4, #12]
 800b566:	bf15      	itete	ne
 800b568:	6560      	strne	r0, [r4, #84]	; 0x54
 800b56a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b56e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b572:	81a3      	strheq	r3, [r4, #12]
 800b574:	bf18      	it	ne
 800b576:	81a3      	strhne	r3, [r4, #12]
 800b578:	bd10      	pop	{r4, pc}

0800b57a <__sclose>:
 800b57a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b57e:	f000 bf9f 	b.w	800c4c0 <_close_r>

0800b582 <sulp>:
 800b582:	b570      	push	{r4, r5, r6, lr}
 800b584:	4604      	mov	r4, r0
 800b586:	460d      	mov	r5, r1
 800b588:	ec45 4b10 	vmov	d0, r4, r5
 800b58c:	4616      	mov	r6, r2
 800b58e:	f002 fe79 	bl	800e284 <__ulp>
 800b592:	ec51 0b10 	vmov	r0, r1, d0
 800b596:	b17e      	cbz	r6, 800b5b8 <sulp+0x36>
 800b598:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b59c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	dd09      	ble.n	800b5b8 <sulp+0x36>
 800b5a4:	051b      	lsls	r3, r3, #20
 800b5a6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b5aa:	2400      	movs	r4, #0
 800b5ac:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b5b0:	4622      	mov	r2, r4
 800b5b2:	462b      	mov	r3, r5
 800b5b4:	f7f5 f820 	bl	80005f8 <__aeabi_dmul>
 800b5b8:	bd70      	pop	{r4, r5, r6, pc}
 800b5ba:	0000      	movs	r0, r0
 800b5bc:	0000      	movs	r0, r0
	...

0800b5c0 <_strtod_l>:
 800b5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c4:	ed2d 8b02 	vpush	{d8}
 800b5c8:	b09d      	sub	sp, #116	; 0x74
 800b5ca:	461f      	mov	r7, r3
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	9318      	str	r3, [sp, #96]	; 0x60
 800b5d0:	4ba2      	ldr	r3, [pc, #648]	; (800b85c <_strtod_l+0x29c>)
 800b5d2:	9213      	str	r2, [sp, #76]	; 0x4c
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	9305      	str	r3, [sp, #20]
 800b5d8:	4604      	mov	r4, r0
 800b5da:	4618      	mov	r0, r3
 800b5dc:	4688      	mov	r8, r1
 800b5de:	f7f4 fdf7 	bl	80001d0 <strlen>
 800b5e2:	f04f 0a00 	mov.w	sl, #0
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	f04f 0b00 	mov.w	fp, #0
 800b5ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b5f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5f2:	781a      	ldrb	r2, [r3, #0]
 800b5f4:	2a2b      	cmp	r2, #43	; 0x2b
 800b5f6:	d04e      	beq.n	800b696 <_strtod_l+0xd6>
 800b5f8:	d83b      	bhi.n	800b672 <_strtod_l+0xb2>
 800b5fa:	2a0d      	cmp	r2, #13
 800b5fc:	d834      	bhi.n	800b668 <_strtod_l+0xa8>
 800b5fe:	2a08      	cmp	r2, #8
 800b600:	d834      	bhi.n	800b66c <_strtod_l+0xac>
 800b602:	2a00      	cmp	r2, #0
 800b604:	d03e      	beq.n	800b684 <_strtod_l+0xc4>
 800b606:	2300      	movs	r3, #0
 800b608:	930a      	str	r3, [sp, #40]	; 0x28
 800b60a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b60c:	7833      	ldrb	r3, [r6, #0]
 800b60e:	2b30      	cmp	r3, #48	; 0x30
 800b610:	f040 80b0 	bne.w	800b774 <_strtod_l+0x1b4>
 800b614:	7873      	ldrb	r3, [r6, #1]
 800b616:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b61a:	2b58      	cmp	r3, #88	; 0x58
 800b61c:	d168      	bne.n	800b6f0 <_strtod_l+0x130>
 800b61e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b620:	9301      	str	r3, [sp, #4]
 800b622:	ab18      	add	r3, sp, #96	; 0x60
 800b624:	9702      	str	r7, [sp, #8]
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	4a8d      	ldr	r2, [pc, #564]	; (800b860 <_strtod_l+0x2a0>)
 800b62a:	ab19      	add	r3, sp, #100	; 0x64
 800b62c:	a917      	add	r1, sp, #92	; 0x5c
 800b62e:	4620      	mov	r0, r4
 800b630:	f001 ff0c 	bl	800d44c <__gethex>
 800b634:	f010 0707 	ands.w	r7, r0, #7
 800b638:	4605      	mov	r5, r0
 800b63a:	d005      	beq.n	800b648 <_strtod_l+0x88>
 800b63c:	2f06      	cmp	r7, #6
 800b63e:	d12c      	bne.n	800b69a <_strtod_l+0xda>
 800b640:	3601      	adds	r6, #1
 800b642:	2300      	movs	r3, #0
 800b644:	9617      	str	r6, [sp, #92]	; 0x5c
 800b646:	930a      	str	r3, [sp, #40]	; 0x28
 800b648:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f040 8590 	bne.w	800c170 <_strtod_l+0xbb0>
 800b650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b652:	b1eb      	cbz	r3, 800b690 <_strtod_l+0xd0>
 800b654:	4652      	mov	r2, sl
 800b656:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b65a:	ec43 2b10 	vmov	d0, r2, r3
 800b65e:	b01d      	add	sp, #116	; 0x74
 800b660:	ecbd 8b02 	vpop	{d8}
 800b664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b668:	2a20      	cmp	r2, #32
 800b66a:	d1cc      	bne.n	800b606 <_strtod_l+0x46>
 800b66c:	3301      	adds	r3, #1
 800b66e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b670:	e7be      	b.n	800b5f0 <_strtod_l+0x30>
 800b672:	2a2d      	cmp	r2, #45	; 0x2d
 800b674:	d1c7      	bne.n	800b606 <_strtod_l+0x46>
 800b676:	2201      	movs	r2, #1
 800b678:	920a      	str	r2, [sp, #40]	; 0x28
 800b67a:	1c5a      	adds	r2, r3, #1
 800b67c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b67e:	785b      	ldrb	r3, [r3, #1]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1c2      	bne.n	800b60a <_strtod_l+0x4a>
 800b684:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b686:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f040 856e 	bne.w	800c16c <_strtod_l+0xbac>
 800b690:	4652      	mov	r2, sl
 800b692:	465b      	mov	r3, fp
 800b694:	e7e1      	b.n	800b65a <_strtod_l+0x9a>
 800b696:	2200      	movs	r2, #0
 800b698:	e7ee      	b.n	800b678 <_strtod_l+0xb8>
 800b69a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b69c:	b13a      	cbz	r2, 800b6ae <_strtod_l+0xee>
 800b69e:	2135      	movs	r1, #53	; 0x35
 800b6a0:	a81a      	add	r0, sp, #104	; 0x68
 800b6a2:	f002 fefa 	bl	800e49a <__copybits>
 800b6a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f002 fab9 	bl	800dc20 <_Bfree>
 800b6ae:	3f01      	subs	r7, #1
 800b6b0:	2f04      	cmp	r7, #4
 800b6b2:	d806      	bhi.n	800b6c2 <_strtod_l+0x102>
 800b6b4:	e8df f007 	tbb	[pc, r7]
 800b6b8:	1714030a 	.word	0x1714030a
 800b6bc:	0a          	.byte	0x0a
 800b6bd:	00          	.byte	0x00
 800b6be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b6c2:	0728      	lsls	r0, r5, #28
 800b6c4:	d5c0      	bpl.n	800b648 <_strtod_l+0x88>
 800b6c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b6ca:	e7bd      	b.n	800b648 <_strtod_l+0x88>
 800b6cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b6d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b6d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b6d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b6da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b6de:	e7f0      	b.n	800b6c2 <_strtod_l+0x102>
 800b6e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b864 <_strtod_l+0x2a4>
 800b6e4:	e7ed      	b.n	800b6c2 <_strtod_l+0x102>
 800b6e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b6ea:	f04f 3aff 	mov.w	sl, #4294967295
 800b6ee:	e7e8      	b.n	800b6c2 <_strtod_l+0x102>
 800b6f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6f6:	785b      	ldrb	r3, [r3, #1]
 800b6f8:	2b30      	cmp	r3, #48	; 0x30
 800b6fa:	d0f9      	beq.n	800b6f0 <_strtod_l+0x130>
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0a3      	beq.n	800b648 <_strtod_l+0x88>
 800b700:	2301      	movs	r3, #1
 800b702:	f04f 0900 	mov.w	r9, #0
 800b706:	9304      	str	r3, [sp, #16]
 800b708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b70a:	9308      	str	r3, [sp, #32]
 800b70c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b710:	464f      	mov	r7, r9
 800b712:	220a      	movs	r2, #10
 800b714:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b716:	7806      	ldrb	r6, [r0, #0]
 800b718:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b71c:	b2d9      	uxtb	r1, r3
 800b71e:	2909      	cmp	r1, #9
 800b720:	d92a      	bls.n	800b778 <_strtod_l+0x1b8>
 800b722:	9905      	ldr	r1, [sp, #20]
 800b724:	462a      	mov	r2, r5
 800b726:	f003 fa2f 	bl	800eb88 <strncmp>
 800b72a:	b398      	cbz	r0, 800b794 <_strtod_l+0x1d4>
 800b72c:	2000      	movs	r0, #0
 800b72e:	4632      	mov	r2, r6
 800b730:	463d      	mov	r5, r7
 800b732:	9005      	str	r0, [sp, #20]
 800b734:	4603      	mov	r3, r0
 800b736:	2a65      	cmp	r2, #101	; 0x65
 800b738:	d001      	beq.n	800b73e <_strtod_l+0x17e>
 800b73a:	2a45      	cmp	r2, #69	; 0x45
 800b73c:	d118      	bne.n	800b770 <_strtod_l+0x1b0>
 800b73e:	b91d      	cbnz	r5, 800b748 <_strtod_l+0x188>
 800b740:	9a04      	ldr	r2, [sp, #16]
 800b742:	4302      	orrs	r2, r0
 800b744:	d09e      	beq.n	800b684 <_strtod_l+0xc4>
 800b746:	2500      	movs	r5, #0
 800b748:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b74c:	f108 0201 	add.w	r2, r8, #1
 800b750:	9217      	str	r2, [sp, #92]	; 0x5c
 800b752:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b756:	2a2b      	cmp	r2, #43	; 0x2b
 800b758:	d075      	beq.n	800b846 <_strtod_l+0x286>
 800b75a:	2a2d      	cmp	r2, #45	; 0x2d
 800b75c:	d07b      	beq.n	800b856 <_strtod_l+0x296>
 800b75e:	f04f 0c00 	mov.w	ip, #0
 800b762:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b766:	2909      	cmp	r1, #9
 800b768:	f240 8082 	bls.w	800b870 <_strtod_l+0x2b0>
 800b76c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b770:	2600      	movs	r6, #0
 800b772:	e09d      	b.n	800b8b0 <_strtod_l+0x2f0>
 800b774:	2300      	movs	r3, #0
 800b776:	e7c4      	b.n	800b702 <_strtod_l+0x142>
 800b778:	2f08      	cmp	r7, #8
 800b77a:	bfd8      	it	le
 800b77c:	9907      	ldrle	r1, [sp, #28]
 800b77e:	f100 0001 	add.w	r0, r0, #1
 800b782:	bfda      	itte	le
 800b784:	fb02 3301 	mlale	r3, r2, r1, r3
 800b788:	9307      	strle	r3, [sp, #28]
 800b78a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b78e:	3701      	adds	r7, #1
 800b790:	9017      	str	r0, [sp, #92]	; 0x5c
 800b792:	e7bf      	b.n	800b714 <_strtod_l+0x154>
 800b794:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b796:	195a      	adds	r2, r3, r5
 800b798:	9217      	str	r2, [sp, #92]	; 0x5c
 800b79a:	5d5a      	ldrb	r2, [r3, r5]
 800b79c:	2f00      	cmp	r7, #0
 800b79e:	d037      	beq.n	800b810 <_strtod_l+0x250>
 800b7a0:	9005      	str	r0, [sp, #20]
 800b7a2:	463d      	mov	r5, r7
 800b7a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b7a8:	2b09      	cmp	r3, #9
 800b7aa:	d912      	bls.n	800b7d2 <_strtod_l+0x212>
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e7c2      	b.n	800b736 <_strtod_l+0x176>
 800b7b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7b2:	1c5a      	adds	r2, r3, #1
 800b7b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7b6:	785a      	ldrb	r2, [r3, #1]
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	2a30      	cmp	r2, #48	; 0x30
 800b7bc:	d0f8      	beq.n	800b7b0 <_strtod_l+0x1f0>
 800b7be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b7c2:	2b08      	cmp	r3, #8
 800b7c4:	f200 84d9 	bhi.w	800c17a <_strtod_l+0xbba>
 800b7c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7ca:	9005      	str	r0, [sp, #20]
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	9308      	str	r3, [sp, #32]
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	3a30      	subs	r2, #48	; 0x30
 800b7d4:	f100 0301 	add.w	r3, r0, #1
 800b7d8:	d014      	beq.n	800b804 <_strtod_l+0x244>
 800b7da:	9905      	ldr	r1, [sp, #20]
 800b7dc:	4419      	add	r1, r3
 800b7de:	9105      	str	r1, [sp, #20]
 800b7e0:	462b      	mov	r3, r5
 800b7e2:	eb00 0e05 	add.w	lr, r0, r5
 800b7e6:	210a      	movs	r1, #10
 800b7e8:	4573      	cmp	r3, lr
 800b7ea:	d113      	bne.n	800b814 <_strtod_l+0x254>
 800b7ec:	182b      	adds	r3, r5, r0
 800b7ee:	2b08      	cmp	r3, #8
 800b7f0:	f105 0501 	add.w	r5, r5, #1
 800b7f4:	4405      	add	r5, r0
 800b7f6:	dc1c      	bgt.n	800b832 <_strtod_l+0x272>
 800b7f8:	9907      	ldr	r1, [sp, #28]
 800b7fa:	230a      	movs	r3, #10
 800b7fc:	fb03 2301 	mla	r3, r3, r1, r2
 800b800:	9307      	str	r3, [sp, #28]
 800b802:	2300      	movs	r3, #0
 800b804:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b806:	1c51      	adds	r1, r2, #1
 800b808:	9117      	str	r1, [sp, #92]	; 0x5c
 800b80a:	7852      	ldrb	r2, [r2, #1]
 800b80c:	4618      	mov	r0, r3
 800b80e:	e7c9      	b.n	800b7a4 <_strtod_l+0x1e4>
 800b810:	4638      	mov	r0, r7
 800b812:	e7d2      	b.n	800b7ba <_strtod_l+0x1fa>
 800b814:	2b08      	cmp	r3, #8
 800b816:	dc04      	bgt.n	800b822 <_strtod_l+0x262>
 800b818:	9e07      	ldr	r6, [sp, #28]
 800b81a:	434e      	muls	r6, r1
 800b81c:	9607      	str	r6, [sp, #28]
 800b81e:	3301      	adds	r3, #1
 800b820:	e7e2      	b.n	800b7e8 <_strtod_l+0x228>
 800b822:	f103 0c01 	add.w	ip, r3, #1
 800b826:	f1bc 0f10 	cmp.w	ip, #16
 800b82a:	bfd8      	it	le
 800b82c:	fb01 f909 	mulle.w	r9, r1, r9
 800b830:	e7f5      	b.n	800b81e <_strtod_l+0x25e>
 800b832:	2d10      	cmp	r5, #16
 800b834:	bfdc      	itt	le
 800b836:	230a      	movle	r3, #10
 800b838:	fb03 2909 	mlale	r9, r3, r9, r2
 800b83c:	e7e1      	b.n	800b802 <_strtod_l+0x242>
 800b83e:	2300      	movs	r3, #0
 800b840:	9305      	str	r3, [sp, #20]
 800b842:	2301      	movs	r3, #1
 800b844:	e77c      	b.n	800b740 <_strtod_l+0x180>
 800b846:	f04f 0c00 	mov.w	ip, #0
 800b84a:	f108 0202 	add.w	r2, r8, #2
 800b84e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b850:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b854:	e785      	b.n	800b762 <_strtod_l+0x1a2>
 800b856:	f04f 0c01 	mov.w	ip, #1
 800b85a:	e7f6      	b.n	800b84a <_strtod_l+0x28a>
 800b85c:	0800f17c 	.word	0x0800f17c
 800b860:	0800eef8 	.word	0x0800eef8
 800b864:	7ff00000 	.word	0x7ff00000
 800b868:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b86a:	1c51      	adds	r1, r2, #1
 800b86c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b86e:	7852      	ldrb	r2, [r2, #1]
 800b870:	2a30      	cmp	r2, #48	; 0x30
 800b872:	d0f9      	beq.n	800b868 <_strtod_l+0x2a8>
 800b874:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b878:	2908      	cmp	r1, #8
 800b87a:	f63f af79 	bhi.w	800b770 <_strtod_l+0x1b0>
 800b87e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b882:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b884:	9206      	str	r2, [sp, #24]
 800b886:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b888:	1c51      	adds	r1, r2, #1
 800b88a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b88c:	7852      	ldrb	r2, [r2, #1]
 800b88e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b892:	2e09      	cmp	r6, #9
 800b894:	d937      	bls.n	800b906 <_strtod_l+0x346>
 800b896:	9e06      	ldr	r6, [sp, #24]
 800b898:	1b89      	subs	r1, r1, r6
 800b89a:	2908      	cmp	r1, #8
 800b89c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b8a0:	dc02      	bgt.n	800b8a8 <_strtod_l+0x2e8>
 800b8a2:	4576      	cmp	r6, lr
 800b8a4:	bfa8      	it	ge
 800b8a6:	4676      	movge	r6, lr
 800b8a8:	f1bc 0f00 	cmp.w	ip, #0
 800b8ac:	d000      	beq.n	800b8b0 <_strtod_l+0x2f0>
 800b8ae:	4276      	negs	r6, r6
 800b8b0:	2d00      	cmp	r5, #0
 800b8b2:	d14d      	bne.n	800b950 <_strtod_l+0x390>
 800b8b4:	9904      	ldr	r1, [sp, #16]
 800b8b6:	4301      	orrs	r1, r0
 800b8b8:	f47f aec6 	bne.w	800b648 <_strtod_l+0x88>
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f47f aee1 	bne.w	800b684 <_strtod_l+0xc4>
 800b8c2:	2a69      	cmp	r2, #105	; 0x69
 800b8c4:	d027      	beq.n	800b916 <_strtod_l+0x356>
 800b8c6:	dc24      	bgt.n	800b912 <_strtod_l+0x352>
 800b8c8:	2a49      	cmp	r2, #73	; 0x49
 800b8ca:	d024      	beq.n	800b916 <_strtod_l+0x356>
 800b8cc:	2a4e      	cmp	r2, #78	; 0x4e
 800b8ce:	f47f aed9 	bne.w	800b684 <_strtod_l+0xc4>
 800b8d2:	499f      	ldr	r1, [pc, #636]	; (800bb50 <_strtod_l+0x590>)
 800b8d4:	a817      	add	r0, sp, #92	; 0x5c
 800b8d6:	f002 f811 	bl	800d8fc <__match>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	f43f aed2 	beq.w	800b684 <_strtod_l+0xc4>
 800b8e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	2b28      	cmp	r3, #40	; 0x28
 800b8e6:	d12d      	bne.n	800b944 <_strtod_l+0x384>
 800b8e8:	499a      	ldr	r1, [pc, #616]	; (800bb54 <_strtod_l+0x594>)
 800b8ea:	aa1a      	add	r2, sp, #104	; 0x68
 800b8ec:	a817      	add	r0, sp, #92	; 0x5c
 800b8ee:	f002 f819 	bl	800d924 <__hexnan>
 800b8f2:	2805      	cmp	r0, #5
 800b8f4:	d126      	bne.n	800b944 <_strtod_l+0x384>
 800b8f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b8f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b8fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b900:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b904:	e6a0      	b.n	800b648 <_strtod_l+0x88>
 800b906:	210a      	movs	r1, #10
 800b908:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b90c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b910:	e7b9      	b.n	800b886 <_strtod_l+0x2c6>
 800b912:	2a6e      	cmp	r2, #110	; 0x6e
 800b914:	e7db      	b.n	800b8ce <_strtod_l+0x30e>
 800b916:	4990      	ldr	r1, [pc, #576]	; (800bb58 <_strtod_l+0x598>)
 800b918:	a817      	add	r0, sp, #92	; 0x5c
 800b91a:	f001 ffef 	bl	800d8fc <__match>
 800b91e:	2800      	cmp	r0, #0
 800b920:	f43f aeb0 	beq.w	800b684 <_strtod_l+0xc4>
 800b924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b926:	498d      	ldr	r1, [pc, #564]	; (800bb5c <_strtod_l+0x59c>)
 800b928:	3b01      	subs	r3, #1
 800b92a:	a817      	add	r0, sp, #92	; 0x5c
 800b92c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b92e:	f001 ffe5 	bl	800d8fc <__match>
 800b932:	b910      	cbnz	r0, 800b93a <_strtod_l+0x37a>
 800b934:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b936:	3301      	adds	r3, #1
 800b938:	9317      	str	r3, [sp, #92]	; 0x5c
 800b93a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bb6c <_strtod_l+0x5ac>
 800b93e:	f04f 0a00 	mov.w	sl, #0
 800b942:	e681      	b.n	800b648 <_strtod_l+0x88>
 800b944:	4886      	ldr	r0, [pc, #536]	; (800bb60 <_strtod_l+0x5a0>)
 800b946:	f003 f917 	bl	800eb78 <nan>
 800b94a:	ec5b ab10 	vmov	sl, fp, d0
 800b94e:	e67b      	b.n	800b648 <_strtod_l+0x88>
 800b950:	9b05      	ldr	r3, [sp, #20]
 800b952:	9807      	ldr	r0, [sp, #28]
 800b954:	1af3      	subs	r3, r6, r3
 800b956:	2f00      	cmp	r7, #0
 800b958:	bf08      	it	eq
 800b95a:	462f      	moveq	r7, r5
 800b95c:	2d10      	cmp	r5, #16
 800b95e:	9306      	str	r3, [sp, #24]
 800b960:	46a8      	mov	r8, r5
 800b962:	bfa8      	it	ge
 800b964:	f04f 0810 	movge.w	r8, #16
 800b968:	f7f4 fdcc 	bl	8000504 <__aeabi_ui2d>
 800b96c:	2d09      	cmp	r5, #9
 800b96e:	4682      	mov	sl, r0
 800b970:	468b      	mov	fp, r1
 800b972:	dd13      	ble.n	800b99c <_strtod_l+0x3dc>
 800b974:	4b7b      	ldr	r3, [pc, #492]	; (800bb64 <_strtod_l+0x5a4>)
 800b976:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b97a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b97e:	f7f4 fe3b 	bl	80005f8 <__aeabi_dmul>
 800b982:	4682      	mov	sl, r0
 800b984:	4648      	mov	r0, r9
 800b986:	468b      	mov	fp, r1
 800b988:	f7f4 fdbc 	bl	8000504 <__aeabi_ui2d>
 800b98c:	4602      	mov	r2, r0
 800b98e:	460b      	mov	r3, r1
 800b990:	4650      	mov	r0, sl
 800b992:	4659      	mov	r1, fp
 800b994:	f7f4 fc7a 	bl	800028c <__adddf3>
 800b998:	4682      	mov	sl, r0
 800b99a:	468b      	mov	fp, r1
 800b99c:	2d0f      	cmp	r5, #15
 800b99e:	dc38      	bgt.n	800ba12 <_strtod_l+0x452>
 800b9a0:	9b06      	ldr	r3, [sp, #24]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f43f ae50 	beq.w	800b648 <_strtod_l+0x88>
 800b9a8:	dd24      	ble.n	800b9f4 <_strtod_l+0x434>
 800b9aa:	2b16      	cmp	r3, #22
 800b9ac:	dc0b      	bgt.n	800b9c6 <_strtod_l+0x406>
 800b9ae:	496d      	ldr	r1, [pc, #436]	; (800bb64 <_strtod_l+0x5a4>)
 800b9b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9b8:	4652      	mov	r2, sl
 800b9ba:	465b      	mov	r3, fp
 800b9bc:	f7f4 fe1c 	bl	80005f8 <__aeabi_dmul>
 800b9c0:	4682      	mov	sl, r0
 800b9c2:	468b      	mov	fp, r1
 800b9c4:	e640      	b.n	800b648 <_strtod_l+0x88>
 800b9c6:	9a06      	ldr	r2, [sp, #24]
 800b9c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	db20      	blt.n	800ba12 <_strtod_l+0x452>
 800b9d0:	4c64      	ldr	r4, [pc, #400]	; (800bb64 <_strtod_l+0x5a4>)
 800b9d2:	f1c5 050f 	rsb	r5, r5, #15
 800b9d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b9da:	4652      	mov	r2, sl
 800b9dc:	465b      	mov	r3, fp
 800b9de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9e2:	f7f4 fe09 	bl	80005f8 <__aeabi_dmul>
 800b9e6:	9b06      	ldr	r3, [sp, #24]
 800b9e8:	1b5d      	subs	r5, r3, r5
 800b9ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b9ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b9f2:	e7e3      	b.n	800b9bc <_strtod_l+0x3fc>
 800b9f4:	9b06      	ldr	r3, [sp, #24]
 800b9f6:	3316      	adds	r3, #22
 800b9f8:	db0b      	blt.n	800ba12 <_strtod_l+0x452>
 800b9fa:	9b05      	ldr	r3, [sp, #20]
 800b9fc:	1b9e      	subs	r6, r3, r6
 800b9fe:	4b59      	ldr	r3, [pc, #356]	; (800bb64 <_strtod_l+0x5a4>)
 800ba00:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ba04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba08:	4650      	mov	r0, sl
 800ba0a:	4659      	mov	r1, fp
 800ba0c:	f7f4 ff1e 	bl	800084c <__aeabi_ddiv>
 800ba10:	e7d6      	b.n	800b9c0 <_strtod_l+0x400>
 800ba12:	9b06      	ldr	r3, [sp, #24]
 800ba14:	eba5 0808 	sub.w	r8, r5, r8
 800ba18:	4498      	add	r8, r3
 800ba1a:	f1b8 0f00 	cmp.w	r8, #0
 800ba1e:	dd74      	ble.n	800bb0a <_strtod_l+0x54a>
 800ba20:	f018 030f 	ands.w	r3, r8, #15
 800ba24:	d00a      	beq.n	800ba3c <_strtod_l+0x47c>
 800ba26:	494f      	ldr	r1, [pc, #316]	; (800bb64 <_strtod_l+0x5a4>)
 800ba28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba2c:	4652      	mov	r2, sl
 800ba2e:	465b      	mov	r3, fp
 800ba30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba34:	f7f4 fde0 	bl	80005f8 <__aeabi_dmul>
 800ba38:	4682      	mov	sl, r0
 800ba3a:	468b      	mov	fp, r1
 800ba3c:	f038 080f 	bics.w	r8, r8, #15
 800ba40:	d04f      	beq.n	800bae2 <_strtod_l+0x522>
 800ba42:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ba46:	dd22      	ble.n	800ba8e <_strtod_l+0x4ce>
 800ba48:	2500      	movs	r5, #0
 800ba4a:	462e      	mov	r6, r5
 800ba4c:	9507      	str	r5, [sp, #28]
 800ba4e:	9505      	str	r5, [sp, #20]
 800ba50:	2322      	movs	r3, #34	; 0x22
 800ba52:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bb6c <_strtod_l+0x5ac>
 800ba56:	6023      	str	r3, [r4, #0]
 800ba58:	f04f 0a00 	mov.w	sl, #0
 800ba5c:	9b07      	ldr	r3, [sp, #28]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f43f adf2 	beq.w	800b648 <_strtod_l+0x88>
 800ba64:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba66:	4620      	mov	r0, r4
 800ba68:	f002 f8da 	bl	800dc20 <_Bfree>
 800ba6c:	9905      	ldr	r1, [sp, #20]
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f002 f8d6 	bl	800dc20 <_Bfree>
 800ba74:	4631      	mov	r1, r6
 800ba76:	4620      	mov	r0, r4
 800ba78:	f002 f8d2 	bl	800dc20 <_Bfree>
 800ba7c:	9907      	ldr	r1, [sp, #28]
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f002 f8ce 	bl	800dc20 <_Bfree>
 800ba84:	4629      	mov	r1, r5
 800ba86:	4620      	mov	r0, r4
 800ba88:	f002 f8ca 	bl	800dc20 <_Bfree>
 800ba8c:	e5dc      	b.n	800b648 <_strtod_l+0x88>
 800ba8e:	4b36      	ldr	r3, [pc, #216]	; (800bb68 <_strtod_l+0x5a8>)
 800ba90:	9304      	str	r3, [sp, #16]
 800ba92:	2300      	movs	r3, #0
 800ba94:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ba98:	4650      	mov	r0, sl
 800ba9a:	4659      	mov	r1, fp
 800ba9c:	4699      	mov	r9, r3
 800ba9e:	f1b8 0f01 	cmp.w	r8, #1
 800baa2:	dc21      	bgt.n	800bae8 <_strtod_l+0x528>
 800baa4:	b10b      	cbz	r3, 800baaa <_strtod_l+0x4ea>
 800baa6:	4682      	mov	sl, r0
 800baa8:	468b      	mov	fp, r1
 800baaa:	4b2f      	ldr	r3, [pc, #188]	; (800bb68 <_strtod_l+0x5a8>)
 800baac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bab0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bab4:	4652      	mov	r2, sl
 800bab6:	465b      	mov	r3, fp
 800bab8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800babc:	f7f4 fd9c 	bl	80005f8 <__aeabi_dmul>
 800bac0:	4b2a      	ldr	r3, [pc, #168]	; (800bb6c <_strtod_l+0x5ac>)
 800bac2:	460a      	mov	r2, r1
 800bac4:	400b      	ands	r3, r1
 800bac6:	492a      	ldr	r1, [pc, #168]	; (800bb70 <_strtod_l+0x5b0>)
 800bac8:	428b      	cmp	r3, r1
 800baca:	4682      	mov	sl, r0
 800bacc:	d8bc      	bhi.n	800ba48 <_strtod_l+0x488>
 800bace:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bad2:	428b      	cmp	r3, r1
 800bad4:	bf86      	itte	hi
 800bad6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bb74 <_strtod_l+0x5b4>
 800bada:	f04f 3aff 	movhi.w	sl, #4294967295
 800bade:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bae2:	2300      	movs	r3, #0
 800bae4:	9304      	str	r3, [sp, #16]
 800bae6:	e084      	b.n	800bbf2 <_strtod_l+0x632>
 800bae8:	f018 0f01 	tst.w	r8, #1
 800baec:	d005      	beq.n	800bafa <_strtod_l+0x53a>
 800baee:	9b04      	ldr	r3, [sp, #16]
 800baf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf4:	f7f4 fd80 	bl	80005f8 <__aeabi_dmul>
 800baf8:	2301      	movs	r3, #1
 800bafa:	9a04      	ldr	r2, [sp, #16]
 800bafc:	3208      	adds	r2, #8
 800bafe:	f109 0901 	add.w	r9, r9, #1
 800bb02:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bb06:	9204      	str	r2, [sp, #16]
 800bb08:	e7c9      	b.n	800ba9e <_strtod_l+0x4de>
 800bb0a:	d0ea      	beq.n	800bae2 <_strtod_l+0x522>
 800bb0c:	f1c8 0800 	rsb	r8, r8, #0
 800bb10:	f018 020f 	ands.w	r2, r8, #15
 800bb14:	d00a      	beq.n	800bb2c <_strtod_l+0x56c>
 800bb16:	4b13      	ldr	r3, [pc, #76]	; (800bb64 <_strtod_l+0x5a4>)
 800bb18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb1c:	4650      	mov	r0, sl
 800bb1e:	4659      	mov	r1, fp
 800bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb24:	f7f4 fe92 	bl	800084c <__aeabi_ddiv>
 800bb28:	4682      	mov	sl, r0
 800bb2a:	468b      	mov	fp, r1
 800bb2c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bb30:	d0d7      	beq.n	800bae2 <_strtod_l+0x522>
 800bb32:	f1b8 0f1f 	cmp.w	r8, #31
 800bb36:	dd1f      	ble.n	800bb78 <_strtod_l+0x5b8>
 800bb38:	2500      	movs	r5, #0
 800bb3a:	462e      	mov	r6, r5
 800bb3c:	9507      	str	r5, [sp, #28]
 800bb3e:	9505      	str	r5, [sp, #20]
 800bb40:	2322      	movs	r3, #34	; 0x22
 800bb42:	f04f 0a00 	mov.w	sl, #0
 800bb46:	f04f 0b00 	mov.w	fp, #0
 800bb4a:	6023      	str	r3, [r4, #0]
 800bb4c:	e786      	b.n	800ba5c <_strtod_l+0x49c>
 800bb4e:	bf00      	nop
 800bb50:	0800eec9 	.word	0x0800eec9
 800bb54:	0800ef0c 	.word	0x0800ef0c
 800bb58:	0800eec1 	.word	0x0800eec1
 800bb5c:	0800f088 	.word	0x0800f088
 800bb60:	0800ef83 	.word	0x0800ef83
 800bb64:	0800f218 	.word	0x0800f218
 800bb68:	0800f1f0 	.word	0x0800f1f0
 800bb6c:	7ff00000 	.word	0x7ff00000
 800bb70:	7ca00000 	.word	0x7ca00000
 800bb74:	7fefffff 	.word	0x7fefffff
 800bb78:	f018 0310 	ands.w	r3, r8, #16
 800bb7c:	bf18      	it	ne
 800bb7e:	236a      	movne	r3, #106	; 0x6a
 800bb80:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bf30 <_strtod_l+0x970>
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	4650      	mov	r0, sl
 800bb88:	4659      	mov	r1, fp
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	f018 0f01 	tst.w	r8, #1
 800bb90:	d004      	beq.n	800bb9c <_strtod_l+0x5dc>
 800bb92:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bb96:	f7f4 fd2f 	bl	80005f8 <__aeabi_dmul>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bba0:	f109 0908 	add.w	r9, r9, #8
 800bba4:	d1f2      	bne.n	800bb8c <_strtod_l+0x5cc>
 800bba6:	b10b      	cbz	r3, 800bbac <_strtod_l+0x5ec>
 800bba8:	4682      	mov	sl, r0
 800bbaa:	468b      	mov	fp, r1
 800bbac:	9b04      	ldr	r3, [sp, #16]
 800bbae:	b1c3      	cbz	r3, 800bbe2 <_strtod_l+0x622>
 800bbb0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bbb4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	4659      	mov	r1, fp
 800bbbc:	dd11      	ble.n	800bbe2 <_strtod_l+0x622>
 800bbbe:	2b1f      	cmp	r3, #31
 800bbc0:	f340 8124 	ble.w	800be0c <_strtod_l+0x84c>
 800bbc4:	2b34      	cmp	r3, #52	; 0x34
 800bbc6:	bfde      	ittt	le
 800bbc8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bbcc:	f04f 33ff 	movle.w	r3, #4294967295
 800bbd0:	fa03 f202 	lslle.w	r2, r3, r2
 800bbd4:	f04f 0a00 	mov.w	sl, #0
 800bbd8:	bfcc      	ite	gt
 800bbda:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bbde:	ea02 0b01 	andle.w	fp, r2, r1
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	4650      	mov	r0, sl
 800bbe8:	4659      	mov	r1, fp
 800bbea:	f7f4 ff6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d1a2      	bne.n	800bb38 <_strtod_l+0x578>
 800bbf2:	9b07      	ldr	r3, [sp, #28]
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	9908      	ldr	r1, [sp, #32]
 800bbf8:	462b      	mov	r3, r5
 800bbfa:	463a      	mov	r2, r7
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	f002 f877 	bl	800dcf0 <__s2b>
 800bc02:	9007      	str	r0, [sp, #28]
 800bc04:	2800      	cmp	r0, #0
 800bc06:	f43f af1f 	beq.w	800ba48 <_strtod_l+0x488>
 800bc0a:	9b05      	ldr	r3, [sp, #20]
 800bc0c:	1b9e      	subs	r6, r3, r6
 800bc0e:	9b06      	ldr	r3, [sp, #24]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	bfb4      	ite	lt
 800bc14:	4633      	movlt	r3, r6
 800bc16:	2300      	movge	r3, #0
 800bc18:	930c      	str	r3, [sp, #48]	; 0x30
 800bc1a:	9b06      	ldr	r3, [sp, #24]
 800bc1c:	2500      	movs	r5, #0
 800bc1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bc22:	9312      	str	r3, [sp, #72]	; 0x48
 800bc24:	462e      	mov	r6, r5
 800bc26:	9b07      	ldr	r3, [sp, #28]
 800bc28:	4620      	mov	r0, r4
 800bc2a:	6859      	ldr	r1, [r3, #4]
 800bc2c:	f001 ffb8 	bl	800dba0 <_Balloc>
 800bc30:	9005      	str	r0, [sp, #20]
 800bc32:	2800      	cmp	r0, #0
 800bc34:	f43f af0c 	beq.w	800ba50 <_strtod_l+0x490>
 800bc38:	9b07      	ldr	r3, [sp, #28]
 800bc3a:	691a      	ldr	r2, [r3, #16]
 800bc3c:	3202      	adds	r2, #2
 800bc3e:	f103 010c 	add.w	r1, r3, #12
 800bc42:	0092      	lsls	r2, r2, #2
 800bc44:	300c      	adds	r0, #12
 800bc46:	f7fe fc94 	bl	800a572 <memcpy>
 800bc4a:	ec4b ab10 	vmov	d0, sl, fp
 800bc4e:	aa1a      	add	r2, sp, #104	; 0x68
 800bc50:	a919      	add	r1, sp, #100	; 0x64
 800bc52:	4620      	mov	r0, r4
 800bc54:	f002 fb92 	bl	800e37c <__d2b>
 800bc58:	ec4b ab18 	vmov	d8, sl, fp
 800bc5c:	9018      	str	r0, [sp, #96]	; 0x60
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f43f aef6 	beq.w	800ba50 <_strtod_l+0x490>
 800bc64:	2101      	movs	r1, #1
 800bc66:	4620      	mov	r0, r4
 800bc68:	f002 f8dc 	bl	800de24 <__i2b>
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	f43f aeee 	beq.w	800ba50 <_strtod_l+0x490>
 800bc74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc76:	9904      	ldr	r1, [sp, #16]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	bfab      	itete	ge
 800bc7c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bc7e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bc80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bc82:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bc86:	bfac      	ite	ge
 800bc88:	eb03 0902 	addge.w	r9, r3, r2
 800bc8c:	1ad7      	sublt	r7, r2, r3
 800bc8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bc90:	eba3 0801 	sub.w	r8, r3, r1
 800bc94:	4490      	add	r8, r2
 800bc96:	4ba1      	ldr	r3, [pc, #644]	; (800bf1c <_strtod_l+0x95c>)
 800bc98:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc9c:	4598      	cmp	r8, r3
 800bc9e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bca2:	f280 80c7 	bge.w	800be34 <_strtod_l+0x874>
 800bca6:	eba3 0308 	sub.w	r3, r3, r8
 800bcaa:	2b1f      	cmp	r3, #31
 800bcac:	eba2 0203 	sub.w	r2, r2, r3
 800bcb0:	f04f 0101 	mov.w	r1, #1
 800bcb4:	f300 80b1 	bgt.w	800be1a <_strtod_l+0x85a>
 800bcb8:	fa01 f303 	lsl.w	r3, r1, r3
 800bcbc:	930d      	str	r3, [sp, #52]	; 0x34
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9308      	str	r3, [sp, #32]
 800bcc2:	eb09 0802 	add.w	r8, r9, r2
 800bcc6:	9b04      	ldr	r3, [sp, #16]
 800bcc8:	45c1      	cmp	r9, r8
 800bcca:	4417      	add	r7, r2
 800bccc:	441f      	add	r7, r3
 800bcce:	464b      	mov	r3, r9
 800bcd0:	bfa8      	it	ge
 800bcd2:	4643      	movge	r3, r8
 800bcd4:	42bb      	cmp	r3, r7
 800bcd6:	bfa8      	it	ge
 800bcd8:	463b      	movge	r3, r7
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	bfc2      	ittt	gt
 800bcde:	eba8 0803 	subgt.w	r8, r8, r3
 800bce2:	1aff      	subgt	r7, r7, r3
 800bce4:	eba9 0903 	subgt.w	r9, r9, r3
 800bce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	dd17      	ble.n	800bd1e <_strtod_l+0x75e>
 800bcee:	4631      	mov	r1, r6
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f002 f956 	bl	800dfa4 <__pow5mult>
 800bcf8:	4606      	mov	r6, r0
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	f43f aea8 	beq.w	800ba50 <_strtod_l+0x490>
 800bd00:	4601      	mov	r1, r0
 800bd02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bd04:	4620      	mov	r0, r4
 800bd06:	f002 f8a3 	bl	800de50 <__multiply>
 800bd0a:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	f43f ae9f 	beq.w	800ba50 <_strtod_l+0x490>
 800bd12:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd14:	4620      	mov	r0, r4
 800bd16:	f001 ff83 	bl	800dc20 <_Bfree>
 800bd1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd1c:	9318      	str	r3, [sp, #96]	; 0x60
 800bd1e:	f1b8 0f00 	cmp.w	r8, #0
 800bd22:	f300 808c 	bgt.w	800be3e <_strtod_l+0x87e>
 800bd26:	9b06      	ldr	r3, [sp, #24]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	dd08      	ble.n	800bd3e <_strtod_l+0x77e>
 800bd2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd2e:	9905      	ldr	r1, [sp, #20]
 800bd30:	4620      	mov	r0, r4
 800bd32:	f002 f937 	bl	800dfa4 <__pow5mult>
 800bd36:	9005      	str	r0, [sp, #20]
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	f43f ae89 	beq.w	800ba50 <_strtod_l+0x490>
 800bd3e:	2f00      	cmp	r7, #0
 800bd40:	dd08      	ble.n	800bd54 <_strtod_l+0x794>
 800bd42:	9905      	ldr	r1, [sp, #20]
 800bd44:	463a      	mov	r2, r7
 800bd46:	4620      	mov	r0, r4
 800bd48:	f002 f986 	bl	800e058 <__lshift>
 800bd4c:	9005      	str	r0, [sp, #20]
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	f43f ae7e 	beq.w	800ba50 <_strtod_l+0x490>
 800bd54:	f1b9 0f00 	cmp.w	r9, #0
 800bd58:	dd08      	ble.n	800bd6c <_strtod_l+0x7ac>
 800bd5a:	4631      	mov	r1, r6
 800bd5c:	464a      	mov	r2, r9
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f002 f97a 	bl	800e058 <__lshift>
 800bd64:	4606      	mov	r6, r0
 800bd66:	2800      	cmp	r0, #0
 800bd68:	f43f ae72 	beq.w	800ba50 <_strtod_l+0x490>
 800bd6c:	9a05      	ldr	r2, [sp, #20]
 800bd6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd70:	4620      	mov	r0, r4
 800bd72:	f002 f9fd 	bl	800e170 <__mdiff>
 800bd76:	4605      	mov	r5, r0
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	f43f ae69 	beq.w	800ba50 <_strtod_l+0x490>
 800bd7e:	68c3      	ldr	r3, [r0, #12]
 800bd80:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd82:	2300      	movs	r3, #0
 800bd84:	60c3      	str	r3, [r0, #12]
 800bd86:	4631      	mov	r1, r6
 800bd88:	f002 f9d6 	bl	800e138 <__mcmp>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	da60      	bge.n	800be52 <_strtod_l+0x892>
 800bd90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd92:	ea53 030a 	orrs.w	r3, r3, sl
 800bd96:	f040 8082 	bne.w	800be9e <_strtod_l+0x8de>
 800bd9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d17d      	bne.n	800be9e <_strtod_l+0x8de>
 800bda2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bda6:	0d1b      	lsrs	r3, r3, #20
 800bda8:	051b      	lsls	r3, r3, #20
 800bdaa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bdae:	d976      	bls.n	800be9e <_strtod_l+0x8de>
 800bdb0:	696b      	ldr	r3, [r5, #20]
 800bdb2:	b913      	cbnz	r3, 800bdba <_strtod_l+0x7fa>
 800bdb4:	692b      	ldr	r3, [r5, #16]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	dd71      	ble.n	800be9e <_strtod_l+0x8de>
 800bdba:	4629      	mov	r1, r5
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f002 f94a 	bl	800e058 <__lshift>
 800bdc4:	4631      	mov	r1, r6
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	f002 f9b6 	bl	800e138 <__mcmp>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	dd66      	ble.n	800be9e <_strtod_l+0x8de>
 800bdd0:	9904      	ldr	r1, [sp, #16]
 800bdd2:	4a53      	ldr	r2, [pc, #332]	; (800bf20 <_strtod_l+0x960>)
 800bdd4:	465b      	mov	r3, fp
 800bdd6:	2900      	cmp	r1, #0
 800bdd8:	f000 8081 	beq.w	800bede <_strtod_l+0x91e>
 800bddc:	ea02 010b 	and.w	r1, r2, fp
 800bde0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bde4:	dc7b      	bgt.n	800bede <_strtod_l+0x91e>
 800bde6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bdea:	f77f aea9 	ble.w	800bb40 <_strtod_l+0x580>
 800bdee:	4b4d      	ldr	r3, [pc, #308]	; (800bf24 <_strtod_l+0x964>)
 800bdf0:	4650      	mov	r0, sl
 800bdf2:	4659      	mov	r1, fp
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f7f4 fbff 	bl	80005f8 <__aeabi_dmul>
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	4303      	orrs	r3, r0
 800bdfe:	bf08      	it	eq
 800be00:	2322      	moveq	r3, #34	; 0x22
 800be02:	4682      	mov	sl, r0
 800be04:	468b      	mov	fp, r1
 800be06:	bf08      	it	eq
 800be08:	6023      	streq	r3, [r4, #0]
 800be0a:	e62b      	b.n	800ba64 <_strtod_l+0x4a4>
 800be0c:	f04f 32ff 	mov.w	r2, #4294967295
 800be10:	fa02 f303 	lsl.w	r3, r2, r3
 800be14:	ea03 0a0a 	and.w	sl, r3, sl
 800be18:	e6e3      	b.n	800bbe2 <_strtod_l+0x622>
 800be1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800be1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800be22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800be26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800be2a:	fa01 f308 	lsl.w	r3, r1, r8
 800be2e:	9308      	str	r3, [sp, #32]
 800be30:	910d      	str	r1, [sp, #52]	; 0x34
 800be32:	e746      	b.n	800bcc2 <_strtod_l+0x702>
 800be34:	2300      	movs	r3, #0
 800be36:	9308      	str	r3, [sp, #32]
 800be38:	2301      	movs	r3, #1
 800be3a:	930d      	str	r3, [sp, #52]	; 0x34
 800be3c:	e741      	b.n	800bcc2 <_strtod_l+0x702>
 800be3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be40:	4642      	mov	r2, r8
 800be42:	4620      	mov	r0, r4
 800be44:	f002 f908 	bl	800e058 <__lshift>
 800be48:	9018      	str	r0, [sp, #96]	; 0x60
 800be4a:	2800      	cmp	r0, #0
 800be4c:	f47f af6b 	bne.w	800bd26 <_strtod_l+0x766>
 800be50:	e5fe      	b.n	800ba50 <_strtod_l+0x490>
 800be52:	465f      	mov	r7, fp
 800be54:	d16e      	bne.n	800bf34 <_strtod_l+0x974>
 800be56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be5c:	b342      	cbz	r2, 800beb0 <_strtod_l+0x8f0>
 800be5e:	4a32      	ldr	r2, [pc, #200]	; (800bf28 <_strtod_l+0x968>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d128      	bne.n	800beb6 <_strtod_l+0x8f6>
 800be64:	9b04      	ldr	r3, [sp, #16]
 800be66:	4651      	mov	r1, sl
 800be68:	b1eb      	cbz	r3, 800bea6 <_strtod_l+0x8e6>
 800be6a:	4b2d      	ldr	r3, [pc, #180]	; (800bf20 <_strtod_l+0x960>)
 800be6c:	403b      	ands	r3, r7
 800be6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800be72:	f04f 32ff 	mov.w	r2, #4294967295
 800be76:	d819      	bhi.n	800beac <_strtod_l+0x8ec>
 800be78:	0d1b      	lsrs	r3, r3, #20
 800be7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be7e:	fa02 f303 	lsl.w	r3, r2, r3
 800be82:	4299      	cmp	r1, r3
 800be84:	d117      	bne.n	800beb6 <_strtod_l+0x8f6>
 800be86:	4b29      	ldr	r3, [pc, #164]	; (800bf2c <_strtod_l+0x96c>)
 800be88:	429f      	cmp	r7, r3
 800be8a:	d102      	bne.n	800be92 <_strtod_l+0x8d2>
 800be8c:	3101      	adds	r1, #1
 800be8e:	f43f addf 	beq.w	800ba50 <_strtod_l+0x490>
 800be92:	4b23      	ldr	r3, [pc, #140]	; (800bf20 <_strtod_l+0x960>)
 800be94:	403b      	ands	r3, r7
 800be96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800be9a:	f04f 0a00 	mov.w	sl, #0
 800be9e:	9b04      	ldr	r3, [sp, #16]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d1a4      	bne.n	800bdee <_strtod_l+0x82e>
 800bea4:	e5de      	b.n	800ba64 <_strtod_l+0x4a4>
 800bea6:	f04f 33ff 	mov.w	r3, #4294967295
 800beaa:	e7ea      	b.n	800be82 <_strtod_l+0x8c2>
 800beac:	4613      	mov	r3, r2
 800beae:	e7e8      	b.n	800be82 <_strtod_l+0x8c2>
 800beb0:	ea53 030a 	orrs.w	r3, r3, sl
 800beb4:	d08c      	beq.n	800bdd0 <_strtod_l+0x810>
 800beb6:	9b08      	ldr	r3, [sp, #32]
 800beb8:	b1db      	cbz	r3, 800bef2 <_strtod_l+0x932>
 800beba:	423b      	tst	r3, r7
 800bebc:	d0ef      	beq.n	800be9e <_strtod_l+0x8de>
 800bebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bec0:	9a04      	ldr	r2, [sp, #16]
 800bec2:	4650      	mov	r0, sl
 800bec4:	4659      	mov	r1, fp
 800bec6:	b1c3      	cbz	r3, 800befa <_strtod_l+0x93a>
 800bec8:	f7ff fb5b 	bl	800b582 <sulp>
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	ec51 0b18 	vmov	r0, r1, d8
 800bed4:	f7f4 f9da 	bl	800028c <__adddf3>
 800bed8:	4682      	mov	sl, r0
 800beda:	468b      	mov	fp, r1
 800bedc:	e7df      	b.n	800be9e <_strtod_l+0x8de>
 800bede:	4013      	ands	r3, r2
 800bee0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bee4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bee8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800beec:	f04f 3aff 	mov.w	sl, #4294967295
 800bef0:	e7d5      	b.n	800be9e <_strtod_l+0x8de>
 800bef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bef4:	ea13 0f0a 	tst.w	r3, sl
 800bef8:	e7e0      	b.n	800bebc <_strtod_l+0x8fc>
 800befa:	f7ff fb42 	bl	800b582 <sulp>
 800befe:	4602      	mov	r2, r0
 800bf00:	460b      	mov	r3, r1
 800bf02:	ec51 0b18 	vmov	r0, r1, d8
 800bf06:	f7f4 f9bf 	bl	8000288 <__aeabi_dsub>
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4682      	mov	sl, r0
 800bf10:	468b      	mov	fp, r1
 800bf12:	f7f4 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d0c1      	beq.n	800be9e <_strtod_l+0x8de>
 800bf1a:	e611      	b.n	800bb40 <_strtod_l+0x580>
 800bf1c:	fffffc02 	.word	0xfffffc02
 800bf20:	7ff00000 	.word	0x7ff00000
 800bf24:	39500000 	.word	0x39500000
 800bf28:	000fffff 	.word	0x000fffff
 800bf2c:	7fefffff 	.word	0x7fefffff
 800bf30:	0800ef20 	.word	0x0800ef20
 800bf34:	4631      	mov	r1, r6
 800bf36:	4628      	mov	r0, r5
 800bf38:	f002 fa7c 	bl	800e434 <__ratio>
 800bf3c:	ec59 8b10 	vmov	r8, r9, d0
 800bf40:	ee10 0a10 	vmov	r0, s0
 800bf44:	2200      	movs	r2, #0
 800bf46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf4a:	4649      	mov	r1, r9
 800bf4c:	f7f4 fdd0 	bl	8000af0 <__aeabi_dcmple>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d07a      	beq.n	800c04a <_strtod_l+0xa8a>
 800bf54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d04a      	beq.n	800bff0 <_strtod_l+0xa30>
 800bf5a:	4b95      	ldr	r3, [pc, #596]	; (800c1b0 <_strtod_l+0xbf0>)
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf62:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c1b0 <_strtod_l+0xbf0>
 800bf66:	f04f 0800 	mov.w	r8, #0
 800bf6a:	4b92      	ldr	r3, [pc, #584]	; (800c1b4 <_strtod_l+0xbf4>)
 800bf6c:	403b      	ands	r3, r7
 800bf6e:	930d      	str	r3, [sp, #52]	; 0x34
 800bf70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf72:	4b91      	ldr	r3, [pc, #580]	; (800c1b8 <_strtod_l+0xbf8>)
 800bf74:	429a      	cmp	r2, r3
 800bf76:	f040 80b0 	bne.w	800c0da <_strtod_l+0xb1a>
 800bf7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf7e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bf82:	ec4b ab10 	vmov	d0, sl, fp
 800bf86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf8a:	f002 f97b 	bl	800e284 <__ulp>
 800bf8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf92:	ec53 2b10 	vmov	r2, r3, d0
 800bf96:	f7f4 fb2f 	bl	80005f8 <__aeabi_dmul>
 800bf9a:	4652      	mov	r2, sl
 800bf9c:	465b      	mov	r3, fp
 800bf9e:	f7f4 f975 	bl	800028c <__adddf3>
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4983      	ldr	r1, [pc, #524]	; (800c1b4 <_strtod_l+0xbf4>)
 800bfa6:	4a85      	ldr	r2, [pc, #532]	; (800c1bc <_strtod_l+0xbfc>)
 800bfa8:	4019      	ands	r1, r3
 800bfaa:	4291      	cmp	r1, r2
 800bfac:	4682      	mov	sl, r0
 800bfae:	d960      	bls.n	800c072 <_strtod_l+0xab2>
 800bfb0:	ee18 3a90 	vmov	r3, s17
 800bfb4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d104      	bne.n	800bfc6 <_strtod_l+0xa06>
 800bfbc:	ee18 3a10 	vmov	r3, s16
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	f43f ad45 	beq.w	800ba50 <_strtod_l+0x490>
 800bfc6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c1c8 <_strtod_l+0xc08>
 800bfca:	f04f 3aff 	mov.w	sl, #4294967295
 800bfce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f001 fe25 	bl	800dc20 <_Bfree>
 800bfd6:	9905      	ldr	r1, [sp, #20]
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f001 fe21 	bl	800dc20 <_Bfree>
 800bfde:	4631      	mov	r1, r6
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	f001 fe1d 	bl	800dc20 <_Bfree>
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f001 fe19 	bl	800dc20 <_Bfree>
 800bfee:	e61a      	b.n	800bc26 <_strtod_l+0x666>
 800bff0:	f1ba 0f00 	cmp.w	sl, #0
 800bff4:	d11b      	bne.n	800c02e <_strtod_l+0xa6e>
 800bff6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bffa:	b9f3      	cbnz	r3, 800c03a <_strtod_l+0xa7a>
 800bffc:	4b6c      	ldr	r3, [pc, #432]	; (800c1b0 <_strtod_l+0xbf0>)
 800bffe:	2200      	movs	r2, #0
 800c000:	4640      	mov	r0, r8
 800c002:	4649      	mov	r1, r9
 800c004:	f7f4 fd6a 	bl	8000adc <__aeabi_dcmplt>
 800c008:	b9d0      	cbnz	r0, 800c040 <_strtod_l+0xa80>
 800c00a:	4640      	mov	r0, r8
 800c00c:	4649      	mov	r1, r9
 800c00e:	4b6c      	ldr	r3, [pc, #432]	; (800c1c0 <_strtod_l+0xc00>)
 800c010:	2200      	movs	r2, #0
 800c012:	f7f4 faf1 	bl	80005f8 <__aeabi_dmul>
 800c016:	4680      	mov	r8, r0
 800c018:	4689      	mov	r9, r1
 800c01a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c01e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c022:	9315      	str	r3, [sp, #84]	; 0x54
 800c024:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c028:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c02c:	e79d      	b.n	800bf6a <_strtod_l+0x9aa>
 800c02e:	f1ba 0f01 	cmp.w	sl, #1
 800c032:	d102      	bne.n	800c03a <_strtod_l+0xa7a>
 800c034:	2f00      	cmp	r7, #0
 800c036:	f43f ad83 	beq.w	800bb40 <_strtod_l+0x580>
 800c03a:	4b62      	ldr	r3, [pc, #392]	; (800c1c4 <_strtod_l+0xc04>)
 800c03c:	2200      	movs	r2, #0
 800c03e:	e78e      	b.n	800bf5e <_strtod_l+0x99e>
 800c040:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c1c0 <_strtod_l+0xc00>
 800c044:	f04f 0800 	mov.w	r8, #0
 800c048:	e7e7      	b.n	800c01a <_strtod_l+0xa5a>
 800c04a:	4b5d      	ldr	r3, [pc, #372]	; (800c1c0 <_strtod_l+0xc00>)
 800c04c:	4640      	mov	r0, r8
 800c04e:	4649      	mov	r1, r9
 800c050:	2200      	movs	r2, #0
 800c052:	f7f4 fad1 	bl	80005f8 <__aeabi_dmul>
 800c056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c058:	4680      	mov	r8, r0
 800c05a:	4689      	mov	r9, r1
 800c05c:	b933      	cbnz	r3, 800c06c <_strtod_l+0xaac>
 800c05e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c062:	900e      	str	r0, [sp, #56]	; 0x38
 800c064:	930f      	str	r3, [sp, #60]	; 0x3c
 800c066:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c06a:	e7dd      	b.n	800c028 <_strtod_l+0xa68>
 800c06c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c070:	e7f9      	b.n	800c066 <_strtod_l+0xaa6>
 800c072:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c076:	9b04      	ldr	r3, [sp, #16]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d1a8      	bne.n	800bfce <_strtod_l+0xa0e>
 800c07c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c082:	0d1b      	lsrs	r3, r3, #20
 800c084:	051b      	lsls	r3, r3, #20
 800c086:	429a      	cmp	r2, r3
 800c088:	d1a1      	bne.n	800bfce <_strtod_l+0xa0e>
 800c08a:	4640      	mov	r0, r8
 800c08c:	4649      	mov	r1, r9
 800c08e:	f7f4 fe13 	bl	8000cb8 <__aeabi_d2lz>
 800c092:	f7f4 fa83 	bl	800059c <__aeabi_l2d>
 800c096:	4602      	mov	r2, r0
 800c098:	460b      	mov	r3, r1
 800c09a:	4640      	mov	r0, r8
 800c09c:	4649      	mov	r1, r9
 800c09e:	f7f4 f8f3 	bl	8000288 <__aeabi_dsub>
 800c0a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0a8:	ea43 030a 	orr.w	r3, r3, sl
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	4680      	mov	r8, r0
 800c0b0:	4689      	mov	r9, r1
 800c0b2:	d055      	beq.n	800c160 <_strtod_l+0xba0>
 800c0b4:	a336      	add	r3, pc, #216	; (adr r3, 800c190 <_strtod_l+0xbd0>)
 800c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ba:	f7f4 fd0f 	bl	8000adc <__aeabi_dcmplt>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f47f acd0 	bne.w	800ba64 <_strtod_l+0x4a4>
 800c0c4:	a334      	add	r3, pc, #208	; (adr r3, 800c198 <_strtod_l+0xbd8>)
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	4640      	mov	r0, r8
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	f7f4 fd23 	bl	8000b18 <__aeabi_dcmpgt>
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	f43f af7b 	beq.w	800bfce <_strtod_l+0xa0e>
 800c0d8:	e4c4      	b.n	800ba64 <_strtod_l+0x4a4>
 800c0da:	9b04      	ldr	r3, [sp, #16]
 800c0dc:	b333      	cbz	r3, 800c12c <_strtod_l+0xb6c>
 800c0de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c0e4:	d822      	bhi.n	800c12c <_strtod_l+0xb6c>
 800c0e6:	a32e      	add	r3, pc, #184	; (adr r3, 800c1a0 <_strtod_l+0xbe0>)
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	4649      	mov	r1, r9
 800c0f0:	f7f4 fcfe 	bl	8000af0 <__aeabi_dcmple>
 800c0f4:	b1a0      	cbz	r0, 800c120 <_strtod_l+0xb60>
 800c0f6:	4649      	mov	r1, r9
 800c0f8:	4640      	mov	r0, r8
 800c0fa:	f7f4 fd55 	bl	8000ba8 <__aeabi_d2uiz>
 800c0fe:	2801      	cmp	r0, #1
 800c100:	bf38      	it	cc
 800c102:	2001      	movcc	r0, #1
 800c104:	f7f4 f9fe 	bl	8000504 <__aeabi_ui2d>
 800c108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c10a:	4680      	mov	r8, r0
 800c10c:	4689      	mov	r9, r1
 800c10e:	bb23      	cbnz	r3, 800c15a <_strtod_l+0xb9a>
 800c110:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c114:	9010      	str	r0, [sp, #64]	; 0x40
 800c116:	9311      	str	r3, [sp, #68]	; 0x44
 800c118:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c11c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c122:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c124:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c128:	1a9b      	subs	r3, r3, r2
 800c12a:	9309      	str	r3, [sp, #36]	; 0x24
 800c12c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c130:	eeb0 0a48 	vmov.f32	s0, s16
 800c134:	eef0 0a68 	vmov.f32	s1, s17
 800c138:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c13c:	f002 f8a2 	bl	800e284 <__ulp>
 800c140:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c144:	ec53 2b10 	vmov	r2, r3, d0
 800c148:	f7f4 fa56 	bl	80005f8 <__aeabi_dmul>
 800c14c:	ec53 2b18 	vmov	r2, r3, d8
 800c150:	f7f4 f89c 	bl	800028c <__adddf3>
 800c154:	4682      	mov	sl, r0
 800c156:	468b      	mov	fp, r1
 800c158:	e78d      	b.n	800c076 <_strtod_l+0xab6>
 800c15a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c15e:	e7db      	b.n	800c118 <_strtod_l+0xb58>
 800c160:	a311      	add	r3, pc, #68	; (adr r3, 800c1a8 <_strtod_l+0xbe8>)
 800c162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c166:	f7f4 fcb9 	bl	8000adc <__aeabi_dcmplt>
 800c16a:	e7b2      	b.n	800c0d2 <_strtod_l+0xb12>
 800c16c:	2300      	movs	r3, #0
 800c16e:	930a      	str	r3, [sp, #40]	; 0x28
 800c170:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c172:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c174:	6013      	str	r3, [r2, #0]
 800c176:	f7ff ba6b 	b.w	800b650 <_strtod_l+0x90>
 800c17a:	2a65      	cmp	r2, #101	; 0x65
 800c17c:	f43f ab5f 	beq.w	800b83e <_strtod_l+0x27e>
 800c180:	2a45      	cmp	r2, #69	; 0x45
 800c182:	f43f ab5c 	beq.w	800b83e <_strtod_l+0x27e>
 800c186:	2301      	movs	r3, #1
 800c188:	f7ff bb94 	b.w	800b8b4 <_strtod_l+0x2f4>
 800c18c:	f3af 8000 	nop.w
 800c190:	94a03595 	.word	0x94a03595
 800c194:	3fdfffff 	.word	0x3fdfffff
 800c198:	35afe535 	.word	0x35afe535
 800c19c:	3fe00000 	.word	0x3fe00000
 800c1a0:	ffc00000 	.word	0xffc00000
 800c1a4:	41dfffff 	.word	0x41dfffff
 800c1a8:	94a03595 	.word	0x94a03595
 800c1ac:	3fcfffff 	.word	0x3fcfffff
 800c1b0:	3ff00000 	.word	0x3ff00000
 800c1b4:	7ff00000 	.word	0x7ff00000
 800c1b8:	7fe00000 	.word	0x7fe00000
 800c1bc:	7c9fffff 	.word	0x7c9fffff
 800c1c0:	3fe00000 	.word	0x3fe00000
 800c1c4:	bff00000 	.word	0xbff00000
 800c1c8:	7fefffff 	.word	0x7fefffff

0800c1cc <_strtod_r>:
 800c1cc:	4b01      	ldr	r3, [pc, #4]	; (800c1d4 <_strtod_r+0x8>)
 800c1ce:	f7ff b9f7 	b.w	800b5c0 <_strtod_l>
 800c1d2:	bf00      	nop
 800c1d4:	200000e0 	.word	0x200000e0

0800c1d8 <_strtol_l.constprop.0>:
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1de:	d001      	beq.n	800c1e4 <_strtol_l.constprop.0+0xc>
 800c1e0:	2b24      	cmp	r3, #36	; 0x24
 800c1e2:	d906      	bls.n	800c1f2 <_strtol_l.constprop.0+0x1a>
 800c1e4:	f7fe f8a2 	bl	800a32c <__errno>
 800c1e8:	2316      	movs	r3, #22
 800c1ea:	6003      	str	r3, [r0, #0]
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c2d8 <_strtol_l.constprop.0+0x100>
 800c1f6:	460d      	mov	r5, r1
 800c1f8:	462e      	mov	r6, r5
 800c1fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c202:	f017 0708 	ands.w	r7, r7, #8
 800c206:	d1f7      	bne.n	800c1f8 <_strtol_l.constprop.0+0x20>
 800c208:	2c2d      	cmp	r4, #45	; 0x2d
 800c20a:	d132      	bne.n	800c272 <_strtol_l.constprop.0+0x9a>
 800c20c:	782c      	ldrb	r4, [r5, #0]
 800c20e:	2701      	movs	r7, #1
 800c210:	1cb5      	adds	r5, r6, #2
 800c212:	2b00      	cmp	r3, #0
 800c214:	d05b      	beq.n	800c2ce <_strtol_l.constprop.0+0xf6>
 800c216:	2b10      	cmp	r3, #16
 800c218:	d109      	bne.n	800c22e <_strtol_l.constprop.0+0x56>
 800c21a:	2c30      	cmp	r4, #48	; 0x30
 800c21c:	d107      	bne.n	800c22e <_strtol_l.constprop.0+0x56>
 800c21e:	782c      	ldrb	r4, [r5, #0]
 800c220:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c224:	2c58      	cmp	r4, #88	; 0x58
 800c226:	d14d      	bne.n	800c2c4 <_strtol_l.constprop.0+0xec>
 800c228:	786c      	ldrb	r4, [r5, #1]
 800c22a:	2310      	movs	r3, #16
 800c22c:	3502      	adds	r5, #2
 800c22e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c232:	f108 38ff 	add.w	r8, r8, #4294967295
 800c236:	f04f 0c00 	mov.w	ip, #0
 800c23a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c23e:	4666      	mov	r6, ip
 800c240:	fb03 8a19 	mls	sl, r3, r9, r8
 800c244:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c248:	f1be 0f09 	cmp.w	lr, #9
 800c24c:	d816      	bhi.n	800c27c <_strtol_l.constprop.0+0xa4>
 800c24e:	4674      	mov	r4, lr
 800c250:	42a3      	cmp	r3, r4
 800c252:	dd24      	ble.n	800c29e <_strtol_l.constprop.0+0xc6>
 800c254:	f1bc 0f00 	cmp.w	ip, #0
 800c258:	db1e      	blt.n	800c298 <_strtol_l.constprop.0+0xc0>
 800c25a:	45b1      	cmp	r9, r6
 800c25c:	d31c      	bcc.n	800c298 <_strtol_l.constprop.0+0xc0>
 800c25e:	d101      	bne.n	800c264 <_strtol_l.constprop.0+0x8c>
 800c260:	45a2      	cmp	sl, r4
 800c262:	db19      	blt.n	800c298 <_strtol_l.constprop.0+0xc0>
 800c264:	fb06 4603 	mla	r6, r6, r3, r4
 800c268:	f04f 0c01 	mov.w	ip, #1
 800c26c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c270:	e7e8      	b.n	800c244 <_strtol_l.constprop.0+0x6c>
 800c272:	2c2b      	cmp	r4, #43	; 0x2b
 800c274:	bf04      	itt	eq
 800c276:	782c      	ldrbeq	r4, [r5, #0]
 800c278:	1cb5      	addeq	r5, r6, #2
 800c27a:	e7ca      	b.n	800c212 <_strtol_l.constprop.0+0x3a>
 800c27c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c280:	f1be 0f19 	cmp.w	lr, #25
 800c284:	d801      	bhi.n	800c28a <_strtol_l.constprop.0+0xb2>
 800c286:	3c37      	subs	r4, #55	; 0x37
 800c288:	e7e2      	b.n	800c250 <_strtol_l.constprop.0+0x78>
 800c28a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c28e:	f1be 0f19 	cmp.w	lr, #25
 800c292:	d804      	bhi.n	800c29e <_strtol_l.constprop.0+0xc6>
 800c294:	3c57      	subs	r4, #87	; 0x57
 800c296:	e7db      	b.n	800c250 <_strtol_l.constprop.0+0x78>
 800c298:	f04f 3cff 	mov.w	ip, #4294967295
 800c29c:	e7e6      	b.n	800c26c <_strtol_l.constprop.0+0x94>
 800c29e:	f1bc 0f00 	cmp.w	ip, #0
 800c2a2:	da05      	bge.n	800c2b0 <_strtol_l.constprop.0+0xd8>
 800c2a4:	2322      	movs	r3, #34	; 0x22
 800c2a6:	6003      	str	r3, [r0, #0]
 800c2a8:	4646      	mov	r6, r8
 800c2aa:	b942      	cbnz	r2, 800c2be <_strtol_l.constprop.0+0xe6>
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	e79e      	b.n	800c1ee <_strtol_l.constprop.0+0x16>
 800c2b0:	b107      	cbz	r7, 800c2b4 <_strtol_l.constprop.0+0xdc>
 800c2b2:	4276      	negs	r6, r6
 800c2b4:	2a00      	cmp	r2, #0
 800c2b6:	d0f9      	beq.n	800c2ac <_strtol_l.constprop.0+0xd4>
 800c2b8:	f1bc 0f00 	cmp.w	ip, #0
 800c2bc:	d000      	beq.n	800c2c0 <_strtol_l.constprop.0+0xe8>
 800c2be:	1e69      	subs	r1, r5, #1
 800c2c0:	6011      	str	r1, [r2, #0]
 800c2c2:	e7f3      	b.n	800c2ac <_strtol_l.constprop.0+0xd4>
 800c2c4:	2430      	movs	r4, #48	; 0x30
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1b1      	bne.n	800c22e <_strtol_l.constprop.0+0x56>
 800c2ca:	2308      	movs	r3, #8
 800c2cc:	e7af      	b.n	800c22e <_strtol_l.constprop.0+0x56>
 800c2ce:	2c30      	cmp	r4, #48	; 0x30
 800c2d0:	d0a5      	beq.n	800c21e <_strtol_l.constprop.0+0x46>
 800c2d2:	230a      	movs	r3, #10
 800c2d4:	e7ab      	b.n	800c22e <_strtol_l.constprop.0+0x56>
 800c2d6:	bf00      	nop
 800c2d8:	0800ef85 	.word	0x0800ef85

0800c2dc <_strtol_r>:
 800c2dc:	f7ff bf7c 	b.w	800c1d8 <_strtol_l.constprop.0>

0800c2e0 <__swbuf_r>:
 800c2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e2:	460e      	mov	r6, r1
 800c2e4:	4614      	mov	r4, r2
 800c2e6:	4605      	mov	r5, r0
 800c2e8:	b118      	cbz	r0, 800c2f2 <__swbuf_r+0x12>
 800c2ea:	6983      	ldr	r3, [r0, #24]
 800c2ec:	b90b      	cbnz	r3, 800c2f2 <__swbuf_r+0x12>
 800c2ee:	f7fe f87b 	bl	800a3e8 <__sinit>
 800c2f2:	4b21      	ldr	r3, [pc, #132]	; (800c378 <__swbuf_r+0x98>)
 800c2f4:	429c      	cmp	r4, r3
 800c2f6:	d12b      	bne.n	800c350 <__swbuf_r+0x70>
 800c2f8:	686c      	ldr	r4, [r5, #4]
 800c2fa:	69a3      	ldr	r3, [r4, #24]
 800c2fc:	60a3      	str	r3, [r4, #8]
 800c2fe:	89a3      	ldrh	r3, [r4, #12]
 800c300:	071a      	lsls	r2, r3, #28
 800c302:	d52f      	bpl.n	800c364 <__swbuf_r+0x84>
 800c304:	6923      	ldr	r3, [r4, #16]
 800c306:	b36b      	cbz	r3, 800c364 <__swbuf_r+0x84>
 800c308:	6923      	ldr	r3, [r4, #16]
 800c30a:	6820      	ldr	r0, [r4, #0]
 800c30c:	1ac0      	subs	r0, r0, r3
 800c30e:	6963      	ldr	r3, [r4, #20]
 800c310:	b2f6      	uxtb	r6, r6
 800c312:	4283      	cmp	r3, r0
 800c314:	4637      	mov	r7, r6
 800c316:	dc04      	bgt.n	800c322 <__swbuf_r+0x42>
 800c318:	4621      	mov	r1, r4
 800c31a:	4628      	mov	r0, r5
 800c31c:	f000 ffe0 	bl	800d2e0 <_fflush_r>
 800c320:	bb30      	cbnz	r0, 800c370 <__swbuf_r+0x90>
 800c322:	68a3      	ldr	r3, [r4, #8]
 800c324:	3b01      	subs	r3, #1
 800c326:	60a3      	str	r3, [r4, #8]
 800c328:	6823      	ldr	r3, [r4, #0]
 800c32a:	1c5a      	adds	r2, r3, #1
 800c32c:	6022      	str	r2, [r4, #0]
 800c32e:	701e      	strb	r6, [r3, #0]
 800c330:	6963      	ldr	r3, [r4, #20]
 800c332:	3001      	adds	r0, #1
 800c334:	4283      	cmp	r3, r0
 800c336:	d004      	beq.n	800c342 <__swbuf_r+0x62>
 800c338:	89a3      	ldrh	r3, [r4, #12]
 800c33a:	07db      	lsls	r3, r3, #31
 800c33c:	d506      	bpl.n	800c34c <__swbuf_r+0x6c>
 800c33e:	2e0a      	cmp	r6, #10
 800c340:	d104      	bne.n	800c34c <__swbuf_r+0x6c>
 800c342:	4621      	mov	r1, r4
 800c344:	4628      	mov	r0, r5
 800c346:	f000 ffcb 	bl	800d2e0 <_fflush_r>
 800c34a:	b988      	cbnz	r0, 800c370 <__swbuf_r+0x90>
 800c34c:	4638      	mov	r0, r7
 800c34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c350:	4b0a      	ldr	r3, [pc, #40]	; (800c37c <__swbuf_r+0x9c>)
 800c352:	429c      	cmp	r4, r3
 800c354:	d101      	bne.n	800c35a <__swbuf_r+0x7a>
 800c356:	68ac      	ldr	r4, [r5, #8]
 800c358:	e7cf      	b.n	800c2fa <__swbuf_r+0x1a>
 800c35a:	4b09      	ldr	r3, [pc, #36]	; (800c380 <__swbuf_r+0xa0>)
 800c35c:	429c      	cmp	r4, r3
 800c35e:	bf08      	it	eq
 800c360:	68ec      	ldreq	r4, [r5, #12]
 800c362:	e7ca      	b.n	800c2fa <__swbuf_r+0x1a>
 800c364:	4621      	mov	r1, r4
 800c366:	4628      	mov	r0, r5
 800c368:	f000 f81e 	bl	800c3a8 <__swsetup_r>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d0cb      	beq.n	800c308 <__swbuf_r+0x28>
 800c370:	f04f 37ff 	mov.w	r7, #4294967295
 800c374:	e7ea      	b.n	800c34c <__swbuf_r+0x6c>
 800c376:	bf00      	nop
 800c378:	0800ee78 	.word	0x0800ee78
 800c37c:	0800ee98 	.word	0x0800ee98
 800c380:	0800ee58 	.word	0x0800ee58

0800c384 <_write_r>:
 800c384:	b538      	push	{r3, r4, r5, lr}
 800c386:	4d07      	ldr	r5, [pc, #28]	; (800c3a4 <_write_r+0x20>)
 800c388:	4604      	mov	r4, r0
 800c38a:	4608      	mov	r0, r1
 800c38c:	4611      	mov	r1, r2
 800c38e:	2200      	movs	r2, #0
 800c390:	602a      	str	r2, [r5, #0]
 800c392:	461a      	mov	r2, r3
 800c394:	f7f5 f911 	bl	80015ba <_write>
 800c398:	1c43      	adds	r3, r0, #1
 800c39a:	d102      	bne.n	800c3a2 <_write_r+0x1e>
 800c39c:	682b      	ldr	r3, [r5, #0]
 800c39e:	b103      	cbz	r3, 800c3a2 <_write_r+0x1e>
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	bd38      	pop	{r3, r4, r5, pc}
 800c3a4:	200083f0 	.word	0x200083f0

0800c3a8 <__swsetup_r>:
 800c3a8:	4b32      	ldr	r3, [pc, #200]	; (800c474 <__swsetup_r+0xcc>)
 800c3aa:	b570      	push	{r4, r5, r6, lr}
 800c3ac:	681d      	ldr	r5, [r3, #0]
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	460c      	mov	r4, r1
 800c3b2:	b125      	cbz	r5, 800c3be <__swsetup_r+0x16>
 800c3b4:	69ab      	ldr	r3, [r5, #24]
 800c3b6:	b913      	cbnz	r3, 800c3be <__swsetup_r+0x16>
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	f7fe f815 	bl	800a3e8 <__sinit>
 800c3be:	4b2e      	ldr	r3, [pc, #184]	; (800c478 <__swsetup_r+0xd0>)
 800c3c0:	429c      	cmp	r4, r3
 800c3c2:	d10f      	bne.n	800c3e4 <__swsetup_r+0x3c>
 800c3c4:	686c      	ldr	r4, [r5, #4]
 800c3c6:	89a3      	ldrh	r3, [r4, #12]
 800c3c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3cc:	0719      	lsls	r1, r3, #28
 800c3ce:	d42c      	bmi.n	800c42a <__swsetup_r+0x82>
 800c3d0:	06dd      	lsls	r5, r3, #27
 800c3d2:	d411      	bmi.n	800c3f8 <__swsetup_r+0x50>
 800c3d4:	2309      	movs	r3, #9
 800c3d6:	6033      	str	r3, [r6, #0]
 800c3d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c3dc:	81a3      	strh	r3, [r4, #12]
 800c3de:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e2:	e03e      	b.n	800c462 <__swsetup_r+0xba>
 800c3e4:	4b25      	ldr	r3, [pc, #148]	; (800c47c <__swsetup_r+0xd4>)
 800c3e6:	429c      	cmp	r4, r3
 800c3e8:	d101      	bne.n	800c3ee <__swsetup_r+0x46>
 800c3ea:	68ac      	ldr	r4, [r5, #8]
 800c3ec:	e7eb      	b.n	800c3c6 <__swsetup_r+0x1e>
 800c3ee:	4b24      	ldr	r3, [pc, #144]	; (800c480 <__swsetup_r+0xd8>)
 800c3f0:	429c      	cmp	r4, r3
 800c3f2:	bf08      	it	eq
 800c3f4:	68ec      	ldreq	r4, [r5, #12]
 800c3f6:	e7e6      	b.n	800c3c6 <__swsetup_r+0x1e>
 800c3f8:	0758      	lsls	r0, r3, #29
 800c3fa:	d512      	bpl.n	800c422 <__swsetup_r+0x7a>
 800c3fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3fe:	b141      	cbz	r1, 800c412 <__swsetup_r+0x6a>
 800c400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c404:	4299      	cmp	r1, r3
 800c406:	d002      	beq.n	800c40e <__swsetup_r+0x66>
 800c408:	4630      	mov	r0, r6
 800c40a:	f002 f8a1 	bl	800e550 <_free_r>
 800c40e:	2300      	movs	r3, #0
 800c410:	6363      	str	r3, [r4, #52]	; 0x34
 800c412:	89a3      	ldrh	r3, [r4, #12]
 800c414:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c418:	81a3      	strh	r3, [r4, #12]
 800c41a:	2300      	movs	r3, #0
 800c41c:	6063      	str	r3, [r4, #4]
 800c41e:	6923      	ldr	r3, [r4, #16]
 800c420:	6023      	str	r3, [r4, #0]
 800c422:	89a3      	ldrh	r3, [r4, #12]
 800c424:	f043 0308 	orr.w	r3, r3, #8
 800c428:	81a3      	strh	r3, [r4, #12]
 800c42a:	6923      	ldr	r3, [r4, #16]
 800c42c:	b94b      	cbnz	r3, 800c442 <__swsetup_r+0x9a>
 800c42e:	89a3      	ldrh	r3, [r4, #12]
 800c430:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c438:	d003      	beq.n	800c442 <__swsetup_r+0x9a>
 800c43a:	4621      	mov	r1, r4
 800c43c:	4630      	mov	r0, r6
 800c43e:	f001 fb49 	bl	800dad4 <__smakebuf_r>
 800c442:	89a0      	ldrh	r0, [r4, #12]
 800c444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c448:	f010 0301 	ands.w	r3, r0, #1
 800c44c:	d00a      	beq.n	800c464 <__swsetup_r+0xbc>
 800c44e:	2300      	movs	r3, #0
 800c450:	60a3      	str	r3, [r4, #8]
 800c452:	6963      	ldr	r3, [r4, #20]
 800c454:	425b      	negs	r3, r3
 800c456:	61a3      	str	r3, [r4, #24]
 800c458:	6923      	ldr	r3, [r4, #16]
 800c45a:	b943      	cbnz	r3, 800c46e <__swsetup_r+0xc6>
 800c45c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c460:	d1ba      	bne.n	800c3d8 <__swsetup_r+0x30>
 800c462:	bd70      	pop	{r4, r5, r6, pc}
 800c464:	0781      	lsls	r1, r0, #30
 800c466:	bf58      	it	pl
 800c468:	6963      	ldrpl	r3, [r4, #20]
 800c46a:	60a3      	str	r3, [r4, #8]
 800c46c:	e7f4      	b.n	800c458 <__swsetup_r+0xb0>
 800c46e:	2000      	movs	r0, #0
 800c470:	e7f7      	b.n	800c462 <__swsetup_r+0xba>
 800c472:	bf00      	nop
 800c474:	20000078 	.word	0x20000078
 800c478:	0800ee78 	.word	0x0800ee78
 800c47c:	0800ee98 	.word	0x0800ee98
 800c480:	0800ee58 	.word	0x0800ee58

0800c484 <__assert_func>:
 800c484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c486:	4614      	mov	r4, r2
 800c488:	461a      	mov	r2, r3
 800c48a:	4b09      	ldr	r3, [pc, #36]	; (800c4b0 <__assert_func+0x2c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4605      	mov	r5, r0
 800c490:	68d8      	ldr	r0, [r3, #12]
 800c492:	b14c      	cbz	r4, 800c4a8 <__assert_func+0x24>
 800c494:	4b07      	ldr	r3, [pc, #28]	; (800c4b4 <__assert_func+0x30>)
 800c496:	9100      	str	r1, [sp, #0]
 800c498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c49c:	4906      	ldr	r1, [pc, #24]	; (800c4b8 <__assert_func+0x34>)
 800c49e:	462b      	mov	r3, r5
 800c4a0:	f000 ff5a 	bl	800d358 <fiprintf>
 800c4a4:	f002 fb91 	bl	800ebca <abort>
 800c4a8:	4b04      	ldr	r3, [pc, #16]	; (800c4bc <__assert_func+0x38>)
 800c4aa:	461c      	mov	r4, r3
 800c4ac:	e7f3      	b.n	800c496 <__assert_func+0x12>
 800c4ae:	bf00      	nop
 800c4b0:	20000078 	.word	0x20000078
 800c4b4:	0800ef48 	.word	0x0800ef48
 800c4b8:	0800ef55 	.word	0x0800ef55
 800c4bc:	0800ef83 	.word	0x0800ef83

0800c4c0 <_close_r>:
 800c4c0:	b538      	push	{r3, r4, r5, lr}
 800c4c2:	4d06      	ldr	r5, [pc, #24]	; (800c4dc <_close_r+0x1c>)
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	4608      	mov	r0, r1
 800c4ca:	602b      	str	r3, [r5, #0]
 800c4cc:	f7f5 f891 	bl	80015f2 <_close>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	d102      	bne.n	800c4da <_close_r+0x1a>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	b103      	cbz	r3, 800c4da <_close_r+0x1a>
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	bd38      	pop	{r3, r4, r5, pc}
 800c4dc:	200083f0 	.word	0x200083f0

0800c4e0 <quorem>:
 800c4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e4:	6903      	ldr	r3, [r0, #16]
 800c4e6:	690c      	ldr	r4, [r1, #16]
 800c4e8:	42a3      	cmp	r3, r4
 800c4ea:	4607      	mov	r7, r0
 800c4ec:	f2c0 8081 	blt.w	800c5f2 <quorem+0x112>
 800c4f0:	3c01      	subs	r4, #1
 800c4f2:	f101 0814 	add.w	r8, r1, #20
 800c4f6:	f100 0514 	add.w	r5, r0, #20
 800c4fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4fe:	9301      	str	r3, [sp, #4]
 800c500:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c504:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c508:	3301      	adds	r3, #1
 800c50a:	429a      	cmp	r2, r3
 800c50c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c510:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c514:	fbb2 f6f3 	udiv	r6, r2, r3
 800c518:	d331      	bcc.n	800c57e <quorem+0x9e>
 800c51a:	f04f 0e00 	mov.w	lr, #0
 800c51e:	4640      	mov	r0, r8
 800c520:	46ac      	mov	ip, r5
 800c522:	46f2      	mov	sl, lr
 800c524:	f850 2b04 	ldr.w	r2, [r0], #4
 800c528:	b293      	uxth	r3, r2
 800c52a:	fb06 e303 	mla	r3, r6, r3, lr
 800c52e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c532:	b29b      	uxth	r3, r3
 800c534:	ebaa 0303 	sub.w	r3, sl, r3
 800c538:	f8dc a000 	ldr.w	sl, [ip]
 800c53c:	0c12      	lsrs	r2, r2, #16
 800c53e:	fa13 f38a 	uxtah	r3, r3, sl
 800c542:	fb06 e202 	mla	r2, r6, r2, lr
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	9b00      	ldr	r3, [sp, #0]
 800c54a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c54e:	b292      	uxth	r2, r2
 800c550:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c558:	f8bd 3000 	ldrh.w	r3, [sp]
 800c55c:	4581      	cmp	r9, r0
 800c55e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c562:	f84c 3b04 	str.w	r3, [ip], #4
 800c566:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c56a:	d2db      	bcs.n	800c524 <quorem+0x44>
 800c56c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c570:	b92b      	cbnz	r3, 800c57e <quorem+0x9e>
 800c572:	9b01      	ldr	r3, [sp, #4]
 800c574:	3b04      	subs	r3, #4
 800c576:	429d      	cmp	r5, r3
 800c578:	461a      	mov	r2, r3
 800c57a:	d32e      	bcc.n	800c5da <quorem+0xfa>
 800c57c:	613c      	str	r4, [r7, #16]
 800c57e:	4638      	mov	r0, r7
 800c580:	f001 fdda 	bl	800e138 <__mcmp>
 800c584:	2800      	cmp	r0, #0
 800c586:	db24      	blt.n	800c5d2 <quorem+0xf2>
 800c588:	3601      	adds	r6, #1
 800c58a:	4628      	mov	r0, r5
 800c58c:	f04f 0c00 	mov.w	ip, #0
 800c590:	f858 2b04 	ldr.w	r2, [r8], #4
 800c594:	f8d0 e000 	ldr.w	lr, [r0]
 800c598:	b293      	uxth	r3, r2
 800c59a:	ebac 0303 	sub.w	r3, ip, r3
 800c59e:	0c12      	lsrs	r2, r2, #16
 800c5a0:	fa13 f38e 	uxtah	r3, r3, lr
 800c5a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c5a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5b2:	45c1      	cmp	r9, r8
 800c5b4:	f840 3b04 	str.w	r3, [r0], #4
 800c5b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c5bc:	d2e8      	bcs.n	800c590 <quorem+0xb0>
 800c5be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5c6:	b922      	cbnz	r2, 800c5d2 <quorem+0xf2>
 800c5c8:	3b04      	subs	r3, #4
 800c5ca:	429d      	cmp	r5, r3
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	d30a      	bcc.n	800c5e6 <quorem+0x106>
 800c5d0:	613c      	str	r4, [r7, #16]
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	b003      	add	sp, #12
 800c5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5da:	6812      	ldr	r2, [r2, #0]
 800c5dc:	3b04      	subs	r3, #4
 800c5de:	2a00      	cmp	r2, #0
 800c5e0:	d1cc      	bne.n	800c57c <quorem+0x9c>
 800c5e2:	3c01      	subs	r4, #1
 800c5e4:	e7c7      	b.n	800c576 <quorem+0x96>
 800c5e6:	6812      	ldr	r2, [r2, #0]
 800c5e8:	3b04      	subs	r3, #4
 800c5ea:	2a00      	cmp	r2, #0
 800c5ec:	d1f0      	bne.n	800c5d0 <quorem+0xf0>
 800c5ee:	3c01      	subs	r4, #1
 800c5f0:	e7eb      	b.n	800c5ca <quorem+0xea>
 800c5f2:	2000      	movs	r0, #0
 800c5f4:	e7ee      	b.n	800c5d4 <quorem+0xf4>
	...

0800c5f8 <_dtoa_r>:
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	ed2d 8b04 	vpush	{d8-d9}
 800c600:	ec57 6b10 	vmov	r6, r7, d0
 800c604:	b093      	sub	sp, #76	; 0x4c
 800c606:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c608:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c60c:	9106      	str	r1, [sp, #24]
 800c60e:	ee10 aa10 	vmov	sl, s0
 800c612:	4604      	mov	r4, r0
 800c614:	9209      	str	r2, [sp, #36]	; 0x24
 800c616:	930c      	str	r3, [sp, #48]	; 0x30
 800c618:	46bb      	mov	fp, r7
 800c61a:	b975      	cbnz	r5, 800c63a <_dtoa_r+0x42>
 800c61c:	2010      	movs	r0, #16
 800c61e:	f001 fa99 	bl	800db54 <malloc>
 800c622:	4602      	mov	r2, r0
 800c624:	6260      	str	r0, [r4, #36]	; 0x24
 800c626:	b920      	cbnz	r0, 800c632 <_dtoa_r+0x3a>
 800c628:	4ba7      	ldr	r3, [pc, #668]	; (800c8c8 <_dtoa_r+0x2d0>)
 800c62a:	21ea      	movs	r1, #234	; 0xea
 800c62c:	48a7      	ldr	r0, [pc, #668]	; (800c8cc <_dtoa_r+0x2d4>)
 800c62e:	f7ff ff29 	bl	800c484 <__assert_func>
 800c632:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c636:	6005      	str	r5, [r0, #0]
 800c638:	60c5      	str	r5, [r0, #12]
 800c63a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c63c:	6819      	ldr	r1, [r3, #0]
 800c63e:	b151      	cbz	r1, 800c656 <_dtoa_r+0x5e>
 800c640:	685a      	ldr	r2, [r3, #4]
 800c642:	604a      	str	r2, [r1, #4]
 800c644:	2301      	movs	r3, #1
 800c646:	4093      	lsls	r3, r2
 800c648:	608b      	str	r3, [r1, #8]
 800c64a:	4620      	mov	r0, r4
 800c64c:	f001 fae8 	bl	800dc20 <_Bfree>
 800c650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c652:	2200      	movs	r2, #0
 800c654:	601a      	str	r2, [r3, #0]
 800c656:	1e3b      	subs	r3, r7, #0
 800c658:	bfaa      	itet	ge
 800c65a:	2300      	movge	r3, #0
 800c65c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c660:	f8c8 3000 	strge.w	r3, [r8]
 800c664:	4b9a      	ldr	r3, [pc, #616]	; (800c8d0 <_dtoa_r+0x2d8>)
 800c666:	bfbc      	itt	lt
 800c668:	2201      	movlt	r2, #1
 800c66a:	f8c8 2000 	strlt.w	r2, [r8]
 800c66e:	ea33 030b 	bics.w	r3, r3, fp
 800c672:	d11b      	bne.n	800c6ac <_dtoa_r+0xb4>
 800c674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c676:	f242 730f 	movw	r3, #9999	; 0x270f
 800c67a:	6013      	str	r3, [r2, #0]
 800c67c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c680:	4333      	orrs	r3, r6
 800c682:	f000 8592 	beq.w	800d1aa <_dtoa_r+0xbb2>
 800c686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c688:	b963      	cbnz	r3, 800c6a4 <_dtoa_r+0xac>
 800c68a:	4b92      	ldr	r3, [pc, #584]	; (800c8d4 <_dtoa_r+0x2dc>)
 800c68c:	e022      	b.n	800c6d4 <_dtoa_r+0xdc>
 800c68e:	4b92      	ldr	r3, [pc, #584]	; (800c8d8 <_dtoa_r+0x2e0>)
 800c690:	9301      	str	r3, [sp, #4]
 800c692:	3308      	adds	r3, #8
 800c694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c696:	6013      	str	r3, [r2, #0]
 800c698:	9801      	ldr	r0, [sp, #4]
 800c69a:	b013      	add	sp, #76	; 0x4c
 800c69c:	ecbd 8b04 	vpop	{d8-d9}
 800c6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a4:	4b8b      	ldr	r3, [pc, #556]	; (800c8d4 <_dtoa_r+0x2dc>)
 800c6a6:	9301      	str	r3, [sp, #4]
 800c6a8:	3303      	adds	r3, #3
 800c6aa:	e7f3      	b.n	800c694 <_dtoa_r+0x9c>
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	4650      	mov	r0, sl
 800c6b2:	4659      	mov	r1, fp
 800c6b4:	f7f4 fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6b8:	ec4b ab19 	vmov	d9, sl, fp
 800c6bc:	4680      	mov	r8, r0
 800c6be:	b158      	cbz	r0, 800c6d8 <_dtoa_r+0xe0>
 800c6c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	6013      	str	r3, [r2, #0]
 800c6c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 856b 	beq.w	800d1a4 <_dtoa_r+0xbac>
 800c6ce:	4883      	ldr	r0, [pc, #524]	; (800c8dc <_dtoa_r+0x2e4>)
 800c6d0:	6018      	str	r0, [r3, #0]
 800c6d2:	1e43      	subs	r3, r0, #1
 800c6d4:	9301      	str	r3, [sp, #4]
 800c6d6:	e7df      	b.n	800c698 <_dtoa_r+0xa0>
 800c6d8:	ec4b ab10 	vmov	d0, sl, fp
 800c6dc:	aa10      	add	r2, sp, #64	; 0x40
 800c6de:	a911      	add	r1, sp, #68	; 0x44
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f001 fe4b 	bl	800e37c <__d2b>
 800c6e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c6ea:	ee08 0a10 	vmov	s16, r0
 800c6ee:	2d00      	cmp	r5, #0
 800c6f0:	f000 8084 	beq.w	800c7fc <_dtoa_r+0x204>
 800c6f4:	ee19 3a90 	vmov	r3, s19
 800c6f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c700:	4656      	mov	r6, sl
 800c702:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c706:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c70a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c70e:	4b74      	ldr	r3, [pc, #464]	; (800c8e0 <_dtoa_r+0x2e8>)
 800c710:	2200      	movs	r2, #0
 800c712:	4630      	mov	r0, r6
 800c714:	4639      	mov	r1, r7
 800c716:	f7f3 fdb7 	bl	8000288 <__aeabi_dsub>
 800c71a:	a365      	add	r3, pc, #404	; (adr r3, 800c8b0 <_dtoa_r+0x2b8>)
 800c71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c720:	f7f3 ff6a 	bl	80005f8 <__aeabi_dmul>
 800c724:	a364      	add	r3, pc, #400	; (adr r3, 800c8b8 <_dtoa_r+0x2c0>)
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	f7f3 fdaf 	bl	800028c <__adddf3>
 800c72e:	4606      	mov	r6, r0
 800c730:	4628      	mov	r0, r5
 800c732:	460f      	mov	r7, r1
 800c734:	f7f3 fef6 	bl	8000524 <__aeabi_i2d>
 800c738:	a361      	add	r3, pc, #388	; (adr r3, 800c8c0 <_dtoa_r+0x2c8>)
 800c73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73e:	f7f3 ff5b 	bl	80005f8 <__aeabi_dmul>
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	4630      	mov	r0, r6
 800c748:	4639      	mov	r1, r7
 800c74a:	f7f3 fd9f 	bl	800028c <__adddf3>
 800c74e:	4606      	mov	r6, r0
 800c750:	460f      	mov	r7, r1
 800c752:	f7f4 fa01 	bl	8000b58 <__aeabi_d2iz>
 800c756:	2200      	movs	r2, #0
 800c758:	9000      	str	r0, [sp, #0]
 800c75a:	2300      	movs	r3, #0
 800c75c:	4630      	mov	r0, r6
 800c75e:	4639      	mov	r1, r7
 800c760:	f7f4 f9bc 	bl	8000adc <__aeabi_dcmplt>
 800c764:	b150      	cbz	r0, 800c77c <_dtoa_r+0x184>
 800c766:	9800      	ldr	r0, [sp, #0]
 800c768:	f7f3 fedc 	bl	8000524 <__aeabi_i2d>
 800c76c:	4632      	mov	r2, r6
 800c76e:	463b      	mov	r3, r7
 800c770:	f7f4 f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 800c774:	b910      	cbnz	r0, 800c77c <_dtoa_r+0x184>
 800c776:	9b00      	ldr	r3, [sp, #0]
 800c778:	3b01      	subs	r3, #1
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	9b00      	ldr	r3, [sp, #0]
 800c77e:	2b16      	cmp	r3, #22
 800c780:	d85a      	bhi.n	800c838 <_dtoa_r+0x240>
 800c782:	9a00      	ldr	r2, [sp, #0]
 800c784:	4b57      	ldr	r3, [pc, #348]	; (800c8e4 <_dtoa_r+0x2ec>)
 800c786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78e:	ec51 0b19 	vmov	r0, r1, d9
 800c792:	f7f4 f9a3 	bl	8000adc <__aeabi_dcmplt>
 800c796:	2800      	cmp	r0, #0
 800c798:	d050      	beq.n	800c83c <_dtoa_r+0x244>
 800c79a:	9b00      	ldr	r3, [sp, #0]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7a6:	1b5d      	subs	r5, r3, r5
 800c7a8:	1e6b      	subs	r3, r5, #1
 800c7aa:	9305      	str	r3, [sp, #20]
 800c7ac:	bf45      	ittet	mi
 800c7ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800c7b2:	9304      	strmi	r3, [sp, #16]
 800c7b4:	2300      	movpl	r3, #0
 800c7b6:	2300      	movmi	r3, #0
 800c7b8:	bf4c      	ite	mi
 800c7ba:	9305      	strmi	r3, [sp, #20]
 800c7bc:	9304      	strpl	r3, [sp, #16]
 800c7be:	9b00      	ldr	r3, [sp, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	db3d      	blt.n	800c840 <_dtoa_r+0x248>
 800c7c4:	9b05      	ldr	r3, [sp, #20]
 800c7c6:	9a00      	ldr	r2, [sp, #0]
 800c7c8:	920a      	str	r2, [sp, #40]	; 0x28
 800c7ca:	4413      	add	r3, r2
 800c7cc:	9305      	str	r3, [sp, #20]
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	9307      	str	r3, [sp, #28]
 800c7d2:	9b06      	ldr	r3, [sp, #24]
 800c7d4:	2b09      	cmp	r3, #9
 800c7d6:	f200 8089 	bhi.w	800c8ec <_dtoa_r+0x2f4>
 800c7da:	2b05      	cmp	r3, #5
 800c7dc:	bfc4      	itt	gt
 800c7de:	3b04      	subgt	r3, #4
 800c7e0:	9306      	strgt	r3, [sp, #24]
 800c7e2:	9b06      	ldr	r3, [sp, #24]
 800c7e4:	f1a3 0302 	sub.w	r3, r3, #2
 800c7e8:	bfcc      	ite	gt
 800c7ea:	2500      	movgt	r5, #0
 800c7ec:	2501      	movle	r5, #1
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	f200 8087 	bhi.w	800c902 <_dtoa_r+0x30a>
 800c7f4:	e8df f003 	tbb	[pc, r3]
 800c7f8:	59383a2d 	.word	0x59383a2d
 800c7fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c800:	441d      	add	r5, r3
 800c802:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c806:	2b20      	cmp	r3, #32
 800c808:	bfc1      	itttt	gt
 800c80a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c80e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c812:	fa0b f303 	lslgt.w	r3, fp, r3
 800c816:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c81a:	bfda      	itte	le
 800c81c:	f1c3 0320 	rsble	r3, r3, #32
 800c820:	fa06 f003 	lslle.w	r0, r6, r3
 800c824:	4318      	orrgt	r0, r3
 800c826:	f7f3 fe6d 	bl	8000504 <__aeabi_ui2d>
 800c82a:	2301      	movs	r3, #1
 800c82c:	4606      	mov	r6, r0
 800c82e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c832:	3d01      	subs	r5, #1
 800c834:	930e      	str	r3, [sp, #56]	; 0x38
 800c836:	e76a      	b.n	800c70e <_dtoa_r+0x116>
 800c838:	2301      	movs	r3, #1
 800c83a:	e7b2      	b.n	800c7a2 <_dtoa_r+0x1aa>
 800c83c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c83e:	e7b1      	b.n	800c7a4 <_dtoa_r+0x1ac>
 800c840:	9b04      	ldr	r3, [sp, #16]
 800c842:	9a00      	ldr	r2, [sp, #0]
 800c844:	1a9b      	subs	r3, r3, r2
 800c846:	9304      	str	r3, [sp, #16]
 800c848:	4253      	negs	r3, r2
 800c84a:	9307      	str	r3, [sp, #28]
 800c84c:	2300      	movs	r3, #0
 800c84e:	930a      	str	r3, [sp, #40]	; 0x28
 800c850:	e7bf      	b.n	800c7d2 <_dtoa_r+0x1da>
 800c852:	2300      	movs	r3, #0
 800c854:	9308      	str	r3, [sp, #32]
 800c856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c858:	2b00      	cmp	r3, #0
 800c85a:	dc55      	bgt.n	800c908 <_dtoa_r+0x310>
 800c85c:	2301      	movs	r3, #1
 800c85e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c862:	461a      	mov	r2, r3
 800c864:	9209      	str	r2, [sp, #36]	; 0x24
 800c866:	e00c      	b.n	800c882 <_dtoa_r+0x28a>
 800c868:	2301      	movs	r3, #1
 800c86a:	e7f3      	b.n	800c854 <_dtoa_r+0x25c>
 800c86c:	2300      	movs	r3, #0
 800c86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c870:	9308      	str	r3, [sp, #32]
 800c872:	9b00      	ldr	r3, [sp, #0]
 800c874:	4413      	add	r3, r2
 800c876:	9302      	str	r3, [sp, #8]
 800c878:	3301      	adds	r3, #1
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	9303      	str	r3, [sp, #12]
 800c87e:	bfb8      	it	lt
 800c880:	2301      	movlt	r3, #1
 800c882:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c884:	2200      	movs	r2, #0
 800c886:	6042      	str	r2, [r0, #4]
 800c888:	2204      	movs	r2, #4
 800c88a:	f102 0614 	add.w	r6, r2, #20
 800c88e:	429e      	cmp	r6, r3
 800c890:	6841      	ldr	r1, [r0, #4]
 800c892:	d93d      	bls.n	800c910 <_dtoa_r+0x318>
 800c894:	4620      	mov	r0, r4
 800c896:	f001 f983 	bl	800dba0 <_Balloc>
 800c89a:	9001      	str	r0, [sp, #4]
 800c89c:	2800      	cmp	r0, #0
 800c89e:	d13b      	bne.n	800c918 <_dtoa_r+0x320>
 800c8a0:	4b11      	ldr	r3, [pc, #68]	; (800c8e8 <_dtoa_r+0x2f0>)
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c8a8:	e6c0      	b.n	800c62c <_dtoa_r+0x34>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e7df      	b.n	800c86e <_dtoa_r+0x276>
 800c8ae:	bf00      	nop
 800c8b0:	636f4361 	.word	0x636f4361
 800c8b4:	3fd287a7 	.word	0x3fd287a7
 800c8b8:	8b60c8b3 	.word	0x8b60c8b3
 800c8bc:	3fc68a28 	.word	0x3fc68a28
 800c8c0:	509f79fb 	.word	0x509f79fb
 800c8c4:	3fd34413 	.word	0x3fd34413
 800c8c8:	0800f092 	.word	0x0800f092
 800c8cc:	0800f0a9 	.word	0x0800f0a9
 800c8d0:	7ff00000 	.word	0x7ff00000
 800c8d4:	0800f08e 	.word	0x0800f08e
 800c8d8:	0800f085 	.word	0x0800f085
 800c8dc:	0800eecd 	.word	0x0800eecd
 800c8e0:	3ff80000 	.word	0x3ff80000
 800c8e4:	0800f218 	.word	0x0800f218
 800c8e8:	0800f104 	.word	0x0800f104
 800c8ec:	2501      	movs	r5, #1
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	9306      	str	r3, [sp, #24]
 800c8f2:	9508      	str	r5, [sp, #32]
 800c8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	2312      	movs	r3, #18
 800c900:	e7b0      	b.n	800c864 <_dtoa_r+0x26c>
 800c902:	2301      	movs	r3, #1
 800c904:	9308      	str	r3, [sp, #32]
 800c906:	e7f5      	b.n	800c8f4 <_dtoa_r+0x2fc>
 800c908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c90a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c90e:	e7b8      	b.n	800c882 <_dtoa_r+0x28a>
 800c910:	3101      	adds	r1, #1
 800c912:	6041      	str	r1, [r0, #4]
 800c914:	0052      	lsls	r2, r2, #1
 800c916:	e7b8      	b.n	800c88a <_dtoa_r+0x292>
 800c918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c91a:	9a01      	ldr	r2, [sp, #4]
 800c91c:	601a      	str	r2, [r3, #0]
 800c91e:	9b03      	ldr	r3, [sp, #12]
 800c920:	2b0e      	cmp	r3, #14
 800c922:	f200 809d 	bhi.w	800ca60 <_dtoa_r+0x468>
 800c926:	2d00      	cmp	r5, #0
 800c928:	f000 809a 	beq.w	800ca60 <_dtoa_r+0x468>
 800c92c:	9b00      	ldr	r3, [sp, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	dd32      	ble.n	800c998 <_dtoa_r+0x3a0>
 800c932:	4ab7      	ldr	r2, [pc, #732]	; (800cc10 <_dtoa_r+0x618>)
 800c934:	f003 030f 	and.w	r3, r3, #15
 800c938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c93c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c940:	9b00      	ldr	r3, [sp, #0]
 800c942:	05d8      	lsls	r0, r3, #23
 800c944:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c948:	d516      	bpl.n	800c978 <_dtoa_r+0x380>
 800c94a:	4bb2      	ldr	r3, [pc, #712]	; (800cc14 <_dtoa_r+0x61c>)
 800c94c:	ec51 0b19 	vmov	r0, r1, d9
 800c950:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c954:	f7f3 ff7a 	bl	800084c <__aeabi_ddiv>
 800c958:	f007 070f 	and.w	r7, r7, #15
 800c95c:	4682      	mov	sl, r0
 800c95e:	468b      	mov	fp, r1
 800c960:	2503      	movs	r5, #3
 800c962:	4eac      	ldr	r6, [pc, #688]	; (800cc14 <_dtoa_r+0x61c>)
 800c964:	b957      	cbnz	r7, 800c97c <_dtoa_r+0x384>
 800c966:	4642      	mov	r2, r8
 800c968:	464b      	mov	r3, r9
 800c96a:	4650      	mov	r0, sl
 800c96c:	4659      	mov	r1, fp
 800c96e:	f7f3 ff6d 	bl	800084c <__aeabi_ddiv>
 800c972:	4682      	mov	sl, r0
 800c974:	468b      	mov	fp, r1
 800c976:	e028      	b.n	800c9ca <_dtoa_r+0x3d2>
 800c978:	2502      	movs	r5, #2
 800c97a:	e7f2      	b.n	800c962 <_dtoa_r+0x36a>
 800c97c:	07f9      	lsls	r1, r7, #31
 800c97e:	d508      	bpl.n	800c992 <_dtoa_r+0x39a>
 800c980:	4640      	mov	r0, r8
 800c982:	4649      	mov	r1, r9
 800c984:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c988:	f7f3 fe36 	bl	80005f8 <__aeabi_dmul>
 800c98c:	3501      	adds	r5, #1
 800c98e:	4680      	mov	r8, r0
 800c990:	4689      	mov	r9, r1
 800c992:	107f      	asrs	r7, r7, #1
 800c994:	3608      	adds	r6, #8
 800c996:	e7e5      	b.n	800c964 <_dtoa_r+0x36c>
 800c998:	f000 809b 	beq.w	800cad2 <_dtoa_r+0x4da>
 800c99c:	9b00      	ldr	r3, [sp, #0]
 800c99e:	4f9d      	ldr	r7, [pc, #628]	; (800cc14 <_dtoa_r+0x61c>)
 800c9a0:	425e      	negs	r6, r3
 800c9a2:	4b9b      	ldr	r3, [pc, #620]	; (800cc10 <_dtoa_r+0x618>)
 800c9a4:	f006 020f 	and.w	r2, r6, #15
 800c9a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	ec51 0b19 	vmov	r0, r1, d9
 800c9b4:	f7f3 fe20 	bl	80005f8 <__aeabi_dmul>
 800c9b8:	1136      	asrs	r6, r6, #4
 800c9ba:	4682      	mov	sl, r0
 800c9bc:	468b      	mov	fp, r1
 800c9be:	2300      	movs	r3, #0
 800c9c0:	2502      	movs	r5, #2
 800c9c2:	2e00      	cmp	r6, #0
 800c9c4:	d17a      	bne.n	800cabc <_dtoa_r+0x4c4>
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1d3      	bne.n	800c972 <_dtoa_r+0x37a>
 800c9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f000 8082 	beq.w	800cad6 <_dtoa_r+0x4de>
 800c9d2:	4b91      	ldr	r3, [pc, #580]	; (800cc18 <_dtoa_r+0x620>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	4650      	mov	r0, sl
 800c9d8:	4659      	mov	r1, fp
 800c9da:	f7f4 f87f 	bl	8000adc <__aeabi_dcmplt>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	d079      	beq.n	800cad6 <_dtoa_r+0x4de>
 800c9e2:	9b03      	ldr	r3, [sp, #12]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d076      	beq.n	800cad6 <_dtoa_r+0x4de>
 800c9e8:	9b02      	ldr	r3, [sp, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	dd36      	ble.n	800ca5c <_dtoa_r+0x464>
 800c9ee:	9b00      	ldr	r3, [sp, #0]
 800c9f0:	4650      	mov	r0, sl
 800c9f2:	4659      	mov	r1, fp
 800c9f4:	1e5f      	subs	r7, r3, #1
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	4b88      	ldr	r3, [pc, #544]	; (800cc1c <_dtoa_r+0x624>)
 800c9fa:	f7f3 fdfd 	bl	80005f8 <__aeabi_dmul>
 800c9fe:	9e02      	ldr	r6, [sp, #8]
 800ca00:	4682      	mov	sl, r0
 800ca02:	468b      	mov	fp, r1
 800ca04:	3501      	adds	r5, #1
 800ca06:	4628      	mov	r0, r5
 800ca08:	f7f3 fd8c 	bl	8000524 <__aeabi_i2d>
 800ca0c:	4652      	mov	r2, sl
 800ca0e:	465b      	mov	r3, fp
 800ca10:	f7f3 fdf2 	bl	80005f8 <__aeabi_dmul>
 800ca14:	4b82      	ldr	r3, [pc, #520]	; (800cc20 <_dtoa_r+0x628>)
 800ca16:	2200      	movs	r2, #0
 800ca18:	f7f3 fc38 	bl	800028c <__adddf3>
 800ca1c:	46d0      	mov	r8, sl
 800ca1e:	46d9      	mov	r9, fp
 800ca20:	4682      	mov	sl, r0
 800ca22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ca26:	2e00      	cmp	r6, #0
 800ca28:	d158      	bne.n	800cadc <_dtoa_r+0x4e4>
 800ca2a:	4b7e      	ldr	r3, [pc, #504]	; (800cc24 <_dtoa_r+0x62c>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	4640      	mov	r0, r8
 800ca30:	4649      	mov	r1, r9
 800ca32:	f7f3 fc29 	bl	8000288 <__aeabi_dsub>
 800ca36:	4652      	mov	r2, sl
 800ca38:	465b      	mov	r3, fp
 800ca3a:	4680      	mov	r8, r0
 800ca3c:	4689      	mov	r9, r1
 800ca3e:	f7f4 f86b 	bl	8000b18 <__aeabi_dcmpgt>
 800ca42:	2800      	cmp	r0, #0
 800ca44:	f040 8295 	bne.w	800cf72 <_dtoa_r+0x97a>
 800ca48:	4652      	mov	r2, sl
 800ca4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ca4e:	4640      	mov	r0, r8
 800ca50:	4649      	mov	r1, r9
 800ca52:	f7f4 f843 	bl	8000adc <__aeabi_dcmplt>
 800ca56:	2800      	cmp	r0, #0
 800ca58:	f040 8289 	bne.w	800cf6e <_dtoa_r+0x976>
 800ca5c:	ec5b ab19 	vmov	sl, fp, d9
 800ca60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	f2c0 8148 	blt.w	800ccf8 <_dtoa_r+0x700>
 800ca68:	9a00      	ldr	r2, [sp, #0]
 800ca6a:	2a0e      	cmp	r2, #14
 800ca6c:	f300 8144 	bgt.w	800ccf8 <_dtoa_r+0x700>
 800ca70:	4b67      	ldr	r3, [pc, #412]	; (800cc10 <_dtoa_r+0x618>)
 800ca72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca76:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f280 80d5 	bge.w	800cc2c <_dtoa_r+0x634>
 800ca82:	9b03      	ldr	r3, [sp, #12]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f300 80d1 	bgt.w	800cc2c <_dtoa_r+0x634>
 800ca8a:	f040 826f 	bne.w	800cf6c <_dtoa_r+0x974>
 800ca8e:	4b65      	ldr	r3, [pc, #404]	; (800cc24 <_dtoa_r+0x62c>)
 800ca90:	2200      	movs	r2, #0
 800ca92:	4640      	mov	r0, r8
 800ca94:	4649      	mov	r1, r9
 800ca96:	f7f3 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ca9a:	4652      	mov	r2, sl
 800ca9c:	465b      	mov	r3, fp
 800ca9e:	f7f4 f831 	bl	8000b04 <__aeabi_dcmpge>
 800caa2:	9e03      	ldr	r6, [sp, #12]
 800caa4:	4637      	mov	r7, r6
 800caa6:	2800      	cmp	r0, #0
 800caa8:	f040 8245 	bne.w	800cf36 <_dtoa_r+0x93e>
 800caac:	9d01      	ldr	r5, [sp, #4]
 800caae:	2331      	movs	r3, #49	; 0x31
 800cab0:	f805 3b01 	strb.w	r3, [r5], #1
 800cab4:	9b00      	ldr	r3, [sp, #0]
 800cab6:	3301      	adds	r3, #1
 800cab8:	9300      	str	r3, [sp, #0]
 800caba:	e240      	b.n	800cf3e <_dtoa_r+0x946>
 800cabc:	07f2      	lsls	r2, r6, #31
 800cabe:	d505      	bpl.n	800cacc <_dtoa_r+0x4d4>
 800cac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cac4:	f7f3 fd98 	bl	80005f8 <__aeabi_dmul>
 800cac8:	3501      	adds	r5, #1
 800caca:	2301      	movs	r3, #1
 800cacc:	1076      	asrs	r6, r6, #1
 800cace:	3708      	adds	r7, #8
 800cad0:	e777      	b.n	800c9c2 <_dtoa_r+0x3ca>
 800cad2:	2502      	movs	r5, #2
 800cad4:	e779      	b.n	800c9ca <_dtoa_r+0x3d2>
 800cad6:	9f00      	ldr	r7, [sp, #0]
 800cad8:	9e03      	ldr	r6, [sp, #12]
 800cada:	e794      	b.n	800ca06 <_dtoa_r+0x40e>
 800cadc:	9901      	ldr	r1, [sp, #4]
 800cade:	4b4c      	ldr	r3, [pc, #304]	; (800cc10 <_dtoa_r+0x618>)
 800cae0:	4431      	add	r1, r6
 800cae2:	910d      	str	r1, [sp, #52]	; 0x34
 800cae4:	9908      	ldr	r1, [sp, #32]
 800cae6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800caea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800caee:	2900      	cmp	r1, #0
 800caf0:	d043      	beq.n	800cb7a <_dtoa_r+0x582>
 800caf2:	494d      	ldr	r1, [pc, #308]	; (800cc28 <_dtoa_r+0x630>)
 800caf4:	2000      	movs	r0, #0
 800caf6:	f7f3 fea9 	bl	800084c <__aeabi_ddiv>
 800cafa:	4652      	mov	r2, sl
 800cafc:	465b      	mov	r3, fp
 800cafe:	f7f3 fbc3 	bl	8000288 <__aeabi_dsub>
 800cb02:	9d01      	ldr	r5, [sp, #4]
 800cb04:	4682      	mov	sl, r0
 800cb06:	468b      	mov	fp, r1
 800cb08:	4649      	mov	r1, r9
 800cb0a:	4640      	mov	r0, r8
 800cb0c:	f7f4 f824 	bl	8000b58 <__aeabi_d2iz>
 800cb10:	4606      	mov	r6, r0
 800cb12:	f7f3 fd07 	bl	8000524 <__aeabi_i2d>
 800cb16:	4602      	mov	r2, r0
 800cb18:	460b      	mov	r3, r1
 800cb1a:	4640      	mov	r0, r8
 800cb1c:	4649      	mov	r1, r9
 800cb1e:	f7f3 fbb3 	bl	8000288 <__aeabi_dsub>
 800cb22:	3630      	adds	r6, #48	; 0x30
 800cb24:	f805 6b01 	strb.w	r6, [r5], #1
 800cb28:	4652      	mov	r2, sl
 800cb2a:	465b      	mov	r3, fp
 800cb2c:	4680      	mov	r8, r0
 800cb2e:	4689      	mov	r9, r1
 800cb30:	f7f3 ffd4 	bl	8000adc <__aeabi_dcmplt>
 800cb34:	2800      	cmp	r0, #0
 800cb36:	d163      	bne.n	800cc00 <_dtoa_r+0x608>
 800cb38:	4642      	mov	r2, r8
 800cb3a:	464b      	mov	r3, r9
 800cb3c:	4936      	ldr	r1, [pc, #216]	; (800cc18 <_dtoa_r+0x620>)
 800cb3e:	2000      	movs	r0, #0
 800cb40:	f7f3 fba2 	bl	8000288 <__aeabi_dsub>
 800cb44:	4652      	mov	r2, sl
 800cb46:	465b      	mov	r3, fp
 800cb48:	f7f3 ffc8 	bl	8000adc <__aeabi_dcmplt>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	f040 80b5 	bne.w	800ccbc <_dtoa_r+0x6c4>
 800cb52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb54:	429d      	cmp	r5, r3
 800cb56:	d081      	beq.n	800ca5c <_dtoa_r+0x464>
 800cb58:	4b30      	ldr	r3, [pc, #192]	; (800cc1c <_dtoa_r+0x624>)
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	4650      	mov	r0, sl
 800cb5e:	4659      	mov	r1, fp
 800cb60:	f7f3 fd4a 	bl	80005f8 <__aeabi_dmul>
 800cb64:	4b2d      	ldr	r3, [pc, #180]	; (800cc1c <_dtoa_r+0x624>)
 800cb66:	4682      	mov	sl, r0
 800cb68:	468b      	mov	fp, r1
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	4649      	mov	r1, r9
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f7f3 fd42 	bl	80005f8 <__aeabi_dmul>
 800cb74:	4680      	mov	r8, r0
 800cb76:	4689      	mov	r9, r1
 800cb78:	e7c6      	b.n	800cb08 <_dtoa_r+0x510>
 800cb7a:	4650      	mov	r0, sl
 800cb7c:	4659      	mov	r1, fp
 800cb7e:	f7f3 fd3b 	bl	80005f8 <__aeabi_dmul>
 800cb82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb84:	9d01      	ldr	r5, [sp, #4]
 800cb86:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb88:	4682      	mov	sl, r0
 800cb8a:	468b      	mov	fp, r1
 800cb8c:	4649      	mov	r1, r9
 800cb8e:	4640      	mov	r0, r8
 800cb90:	f7f3 ffe2 	bl	8000b58 <__aeabi_d2iz>
 800cb94:	4606      	mov	r6, r0
 800cb96:	f7f3 fcc5 	bl	8000524 <__aeabi_i2d>
 800cb9a:	3630      	adds	r6, #48	; 0x30
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	460b      	mov	r3, r1
 800cba0:	4640      	mov	r0, r8
 800cba2:	4649      	mov	r1, r9
 800cba4:	f7f3 fb70 	bl	8000288 <__aeabi_dsub>
 800cba8:	f805 6b01 	strb.w	r6, [r5], #1
 800cbac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbae:	429d      	cmp	r5, r3
 800cbb0:	4680      	mov	r8, r0
 800cbb2:	4689      	mov	r9, r1
 800cbb4:	f04f 0200 	mov.w	r2, #0
 800cbb8:	d124      	bne.n	800cc04 <_dtoa_r+0x60c>
 800cbba:	4b1b      	ldr	r3, [pc, #108]	; (800cc28 <_dtoa_r+0x630>)
 800cbbc:	4650      	mov	r0, sl
 800cbbe:	4659      	mov	r1, fp
 800cbc0:	f7f3 fb64 	bl	800028c <__adddf3>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4640      	mov	r0, r8
 800cbca:	4649      	mov	r1, r9
 800cbcc:	f7f3 ffa4 	bl	8000b18 <__aeabi_dcmpgt>
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d173      	bne.n	800ccbc <_dtoa_r+0x6c4>
 800cbd4:	4652      	mov	r2, sl
 800cbd6:	465b      	mov	r3, fp
 800cbd8:	4913      	ldr	r1, [pc, #76]	; (800cc28 <_dtoa_r+0x630>)
 800cbda:	2000      	movs	r0, #0
 800cbdc:	f7f3 fb54 	bl	8000288 <__aeabi_dsub>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4640      	mov	r0, r8
 800cbe6:	4649      	mov	r1, r9
 800cbe8:	f7f3 ff78 	bl	8000adc <__aeabi_dcmplt>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	f43f af35 	beq.w	800ca5c <_dtoa_r+0x464>
 800cbf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cbf4:	1e6b      	subs	r3, r5, #1
 800cbf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cbfc:	2b30      	cmp	r3, #48	; 0x30
 800cbfe:	d0f8      	beq.n	800cbf2 <_dtoa_r+0x5fa>
 800cc00:	9700      	str	r7, [sp, #0]
 800cc02:	e049      	b.n	800cc98 <_dtoa_r+0x6a0>
 800cc04:	4b05      	ldr	r3, [pc, #20]	; (800cc1c <_dtoa_r+0x624>)
 800cc06:	f7f3 fcf7 	bl	80005f8 <__aeabi_dmul>
 800cc0a:	4680      	mov	r8, r0
 800cc0c:	4689      	mov	r9, r1
 800cc0e:	e7bd      	b.n	800cb8c <_dtoa_r+0x594>
 800cc10:	0800f218 	.word	0x0800f218
 800cc14:	0800f1f0 	.word	0x0800f1f0
 800cc18:	3ff00000 	.word	0x3ff00000
 800cc1c:	40240000 	.word	0x40240000
 800cc20:	401c0000 	.word	0x401c0000
 800cc24:	40140000 	.word	0x40140000
 800cc28:	3fe00000 	.word	0x3fe00000
 800cc2c:	9d01      	ldr	r5, [sp, #4]
 800cc2e:	4656      	mov	r6, sl
 800cc30:	465f      	mov	r7, fp
 800cc32:	4642      	mov	r2, r8
 800cc34:	464b      	mov	r3, r9
 800cc36:	4630      	mov	r0, r6
 800cc38:	4639      	mov	r1, r7
 800cc3a:	f7f3 fe07 	bl	800084c <__aeabi_ddiv>
 800cc3e:	f7f3 ff8b 	bl	8000b58 <__aeabi_d2iz>
 800cc42:	4682      	mov	sl, r0
 800cc44:	f7f3 fc6e 	bl	8000524 <__aeabi_i2d>
 800cc48:	4642      	mov	r2, r8
 800cc4a:	464b      	mov	r3, r9
 800cc4c:	f7f3 fcd4 	bl	80005f8 <__aeabi_dmul>
 800cc50:	4602      	mov	r2, r0
 800cc52:	460b      	mov	r3, r1
 800cc54:	4630      	mov	r0, r6
 800cc56:	4639      	mov	r1, r7
 800cc58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cc5c:	f7f3 fb14 	bl	8000288 <__aeabi_dsub>
 800cc60:	f805 6b01 	strb.w	r6, [r5], #1
 800cc64:	9e01      	ldr	r6, [sp, #4]
 800cc66:	9f03      	ldr	r7, [sp, #12]
 800cc68:	1bae      	subs	r6, r5, r6
 800cc6a:	42b7      	cmp	r7, r6
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	460b      	mov	r3, r1
 800cc70:	d135      	bne.n	800ccde <_dtoa_r+0x6e6>
 800cc72:	f7f3 fb0b 	bl	800028c <__adddf3>
 800cc76:	4642      	mov	r2, r8
 800cc78:	464b      	mov	r3, r9
 800cc7a:	4606      	mov	r6, r0
 800cc7c:	460f      	mov	r7, r1
 800cc7e:	f7f3 ff4b 	bl	8000b18 <__aeabi_dcmpgt>
 800cc82:	b9d0      	cbnz	r0, 800ccba <_dtoa_r+0x6c2>
 800cc84:	4642      	mov	r2, r8
 800cc86:	464b      	mov	r3, r9
 800cc88:	4630      	mov	r0, r6
 800cc8a:	4639      	mov	r1, r7
 800cc8c:	f7f3 ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc90:	b110      	cbz	r0, 800cc98 <_dtoa_r+0x6a0>
 800cc92:	f01a 0f01 	tst.w	sl, #1
 800cc96:	d110      	bne.n	800ccba <_dtoa_r+0x6c2>
 800cc98:	4620      	mov	r0, r4
 800cc9a:	ee18 1a10 	vmov	r1, s16
 800cc9e:	f000 ffbf 	bl	800dc20 <_Bfree>
 800cca2:	2300      	movs	r3, #0
 800cca4:	9800      	ldr	r0, [sp, #0]
 800cca6:	702b      	strb	r3, [r5, #0]
 800cca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccaa:	3001      	adds	r0, #1
 800ccac:	6018      	str	r0, [r3, #0]
 800ccae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f43f acf1 	beq.w	800c698 <_dtoa_r+0xa0>
 800ccb6:	601d      	str	r5, [r3, #0]
 800ccb8:	e4ee      	b.n	800c698 <_dtoa_r+0xa0>
 800ccba:	9f00      	ldr	r7, [sp, #0]
 800ccbc:	462b      	mov	r3, r5
 800ccbe:	461d      	mov	r5, r3
 800ccc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccc4:	2a39      	cmp	r2, #57	; 0x39
 800ccc6:	d106      	bne.n	800ccd6 <_dtoa_r+0x6de>
 800ccc8:	9a01      	ldr	r2, [sp, #4]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d1f7      	bne.n	800ccbe <_dtoa_r+0x6c6>
 800ccce:	9901      	ldr	r1, [sp, #4]
 800ccd0:	2230      	movs	r2, #48	; 0x30
 800ccd2:	3701      	adds	r7, #1
 800ccd4:	700a      	strb	r2, [r1, #0]
 800ccd6:	781a      	ldrb	r2, [r3, #0]
 800ccd8:	3201      	adds	r2, #1
 800ccda:	701a      	strb	r2, [r3, #0]
 800ccdc:	e790      	b.n	800cc00 <_dtoa_r+0x608>
 800ccde:	4ba6      	ldr	r3, [pc, #664]	; (800cf78 <_dtoa_r+0x980>)
 800cce0:	2200      	movs	r2, #0
 800cce2:	f7f3 fc89 	bl	80005f8 <__aeabi_dmul>
 800cce6:	2200      	movs	r2, #0
 800cce8:	2300      	movs	r3, #0
 800ccea:	4606      	mov	r6, r0
 800ccec:	460f      	mov	r7, r1
 800ccee:	f7f3 feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	d09d      	beq.n	800cc32 <_dtoa_r+0x63a>
 800ccf6:	e7cf      	b.n	800cc98 <_dtoa_r+0x6a0>
 800ccf8:	9a08      	ldr	r2, [sp, #32]
 800ccfa:	2a00      	cmp	r2, #0
 800ccfc:	f000 80d7 	beq.w	800ceae <_dtoa_r+0x8b6>
 800cd00:	9a06      	ldr	r2, [sp, #24]
 800cd02:	2a01      	cmp	r2, #1
 800cd04:	f300 80ba 	bgt.w	800ce7c <_dtoa_r+0x884>
 800cd08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd0a:	2a00      	cmp	r2, #0
 800cd0c:	f000 80b2 	beq.w	800ce74 <_dtoa_r+0x87c>
 800cd10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd14:	9e07      	ldr	r6, [sp, #28]
 800cd16:	9d04      	ldr	r5, [sp, #16]
 800cd18:	9a04      	ldr	r2, [sp, #16]
 800cd1a:	441a      	add	r2, r3
 800cd1c:	9204      	str	r2, [sp, #16]
 800cd1e:	9a05      	ldr	r2, [sp, #20]
 800cd20:	2101      	movs	r1, #1
 800cd22:	441a      	add	r2, r3
 800cd24:	4620      	mov	r0, r4
 800cd26:	9205      	str	r2, [sp, #20]
 800cd28:	f001 f87c 	bl	800de24 <__i2b>
 800cd2c:	4607      	mov	r7, r0
 800cd2e:	2d00      	cmp	r5, #0
 800cd30:	dd0c      	ble.n	800cd4c <_dtoa_r+0x754>
 800cd32:	9b05      	ldr	r3, [sp, #20]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	dd09      	ble.n	800cd4c <_dtoa_r+0x754>
 800cd38:	42ab      	cmp	r3, r5
 800cd3a:	9a04      	ldr	r2, [sp, #16]
 800cd3c:	bfa8      	it	ge
 800cd3e:	462b      	movge	r3, r5
 800cd40:	1ad2      	subs	r2, r2, r3
 800cd42:	9204      	str	r2, [sp, #16]
 800cd44:	9a05      	ldr	r2, [sp, #20]
 800cd46:	1aed      	subs	r5, r5, r3
 800cd48:	1ad3      	subs	r3, r2, r3
 800cd4a:	9305      	str	r3, [sp, #20]
 800cd4c:	9b07      	ldr	r3, [sp, #28]
 800cd4e:	b31b      	cbz	r3, 800cd98 <_dtoa_r+0x7a0>
 800cd50:	9b08      	ldr	r3, [sp, #32]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f000 80af 	beq.w	800ceb6 <_dtoa_r+0x8be>
 800cd58:	2e00      	cmp	r6, #0
 800cd5a:	dd13      	ble.n	800cd84 <_dtoa_r+0x78c>
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	4632      	mov	r2, r6
 800cd60:	4620      	mov	r0, r4
 800cd62:	f001 f91f 	bl	800dfa4 <__pow5mult>
 800cd66:	ee18 2a10 	vmov	r2, s16
 800cd6a:	4601      	mov	r1, r0
 800cd6c:	4607      	mov	r7, r0
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f001 f86e 	bl	800de50 <__multiply>
 800cd74:	ee18 1a10 	vmov	r1, s16
 800cd78:	4680      	mov	r8, r0
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f000 ff50 	bl	800dc20 <_Bfree>
 800cd80:	ee08 8a10 	vmov	s16, r8
 800cd84:	9b07      	ldr	r3, [sp, #28]
 800cd86:	1b9a      	subs	r2, r3, r6
 800cd88:	d006      	beq.n	800cd98 <_dtoa_r+0x7a0>
 800cd8a:	ee18 1a10 	vmov	r1, s16
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f001 f908 	bl	800dfa4 <__pow5mult>
 800cd94:	ee08 0a10 	vmov	s16, r0
 800cd98:	2101      	movs	r1, #1
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f001 f842 	bl	800de24 <__i2b>
 800cda0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	4606      	mov	r6, r0
 800cda6:	f340 8088 	ble.w	800ceba <_dtoa_r+0x8c2>
 800cdaa:	461a      	mov	r2, r3
 800cdac:	4601      	mov	r1, r0
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f001 f8f8 	bl	800dfa4 <__pow5mult>
 800cdb4:	9b06      	ldr	r3, [sp, #24]
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	4606      	mov	r6, r0
 800cdba:	f340 8081 	ble.w	800cec0 <_dtoa_r+0x8c8>
 800cdbe:	f04f 0800 	mov.w	r8, #0
 800cdc2:	6933      	ldr	r3, [r6, #16]
 800cdc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cdc8:	6918      	ldr	r0, [r3, #16]
 800cdca:	f000 ffdb 	bl	800dd84 <__hi0bits>
 800cdce:	f1c0 0020 	rsb	r0, r0, #32
 800cdd2:	9b05      	ldr	r3, [sp, #20]
 800cdd4:	4418      	add	r0, r3
 800cdd6:	f010 001f 	ands.w	r0, r0, #31
 800cdda:	f000 8092 	beq.w	800cf02 <_dtoa_r+0x90a>
 800cdde:	f1c0 0320 	rsb	r3, r0, #32
 800cde2:	2b04      	cmp	r3, #4
 800cde4:	f340 808a 	ble.w	800cefc <_dtoa_r+0x904>
 800cde8:	f1c0 001c 	rsb	r0, r0, #28
 800cdec:	9b04      	ldr	r3, [sp, #16]
 800cdee:	4403      	add	r3, r0
 800cdf0:	9304      	str	r3, [sp, #16]
 800cdf2:	9b05      	ldr	r3, [sp, #20]
 800cdf4:	4403      	add	r3, r0
 800cdf6:	4405      	add	r5, r0
 800cdf8:	9305      	str	r3, [sp, #20]
 800cdfa:	9b04      	ldr	r3, [sp, #16]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	dd07      	ble.n	800ce10 <_dtoa_r+0x818>
 800ce00:	ee18 1a10 	vmov	r1, s16
 800ce04:	461a      	mov	r2, r3
 800ce06:	4620      	mov	r0, r4
 800ce08:	f001 f926 	bl	800e058 <__lshift>
 800ce0c:	ee08 0a10 	vmov	s16, r0
 800ce10:	9b05      	ldr	r3, [sp, #20]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	dd05      	ble.n	800ce22 <_dtoa_r+0x82a>
 800ce16:	4631      	mov	r1, r6
 800ce18:	461a      	mov	r2, r3
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	f001 f91c 	bl	800e058 <__lshift>
 800ce20:	4606      	mov	r6, r0
 800ce22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d06e      	beq.n	800cf06 <_dtoa_r+0x90e>
 800ce28:	ee18 0a10 	vmov	r0, s16
 800ce2c:	4631      	mov	r1, r6
 800ce2e:	f001 f983 	bl	800e138 <__mcmp>
 800ce32:	2800      	cmp	r0, #0
 800ce34:	da67      	bge.n	800cf06 <_dtoa_r+0x90e>
 800ce36:	9b00      	ldr	r3, [sp, #0]
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	ee18 1a10 	vmov	r1, s16
 800ce3e:	9300      	str	r3, [sp, #0]
 800ce40:	220a      	movs	r2, #10
 800ce42:	2300      	movs	r3, #0
 800ce44:	4620      	mov	r0, r4
 800ce46:	f000 ff0d 	bl	800dc64 <__multadd>
 800ce4a:	9b08      	ldr	r3, [sp, #32]
 800ce4c:	ee08 0a10 	vmov	s16, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f000 81b1 	beq.w	800d1b8 <_dtoa_r+0xbc0>
 800ce56:	2300      	movs	r3, #0
 800ce58:	4639      	mov	r1, r7
 800ce5a:	220a      	movs	r2, #10
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	f000 ff01 	bl	800dc64 <__multadd>
 800ce62:	9b02      	ldr	r3, [sp, #8]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	4607      	mov	r7, r0
 800ce68:	f300 808e 	bgt.w	800cf88 <_dtoa_r+0x990>
 800ce6c:	9b06      	ldr	r3, [sp, #24]
 800ce6e:	2b02      	cmp	r3, #2
 800ce70:	dc51      	bgt.n	800cf16 <_dtoa_r+0x91e>
 800ce72:	e089      	b.n	800cf88 <_dtoa_r+0x990>
 800ce74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce7a:	e74b      	b.n	800cd14 <_dtoa_r+0x71c>
 800ce7c:	9b03      	ldr	r3, [sp, #12]
 800ce7e:	1e5e      	subs	r6, r3, #1
 800ce80:	9b07      	ldr	r3, [sp, #28]
 800ce82:	42b3      	cmp	r3, r6
 800ce84:	bfbf      	itttt	lt
 800ce86:	9b07      	ldrlt	r3, [sp, #28]
 800ce88:	9607      	strlt	r6, [sp, #28]
 800ce8a:	1af2      	sublt	r2, r6, r3
 800ce8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ce8e:	bfb6      	itet	lt
 800ce90:	189b      	addlt	r3, r3, r2
 800ce92:	1b9e      	subge	r6, r3, r6
 800ce94:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ce96:	9b03      	ldr	r3, [sp, #12]
 800ce98:	bfb8      	it	lt
 800ce9a:	2600      	movlt	r6, #0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	bfb7      	itett	lt
 800cea0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cea4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cea8:	1a9d      	sublt	r5, r3, r2
 800ceaa:	2300      	movlt	r3, #0
 800ceac:	e734      	b.n	800cd18 <_dtoa_r+0x720>
 800ceae:	9e07      	ldr	r6, [sp, #28]
 800ceb0:	9d04      	ldr	r5, [sp, #16]
 800ceb2:	9f08      	ldr	r7, [sp, #32]
 800ceb4:	e73b      	b.n	800cd2e <_dtoa_r+0x736>
 800ceb6:	9a07      	ldr	r2, [sp, #28]
 800ceb8:	e767      	b.n	800cd8a <_dtoa_r+0x792>
 800ceba:	9b06      	ldr	r3, [sp, #24]
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	dc18      	bgt.n	800cef2 <_dtoa_r+0x8fa>
 800cec0:	f1ba 0f00 	cmp.w	sl, #0
 800cec4:	d115      	bne.n	800cef2 <_dtoa_r+0x8fa>
 800cec6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ceca:	b993      	cbnz	r3, 800cef2 <_dtoa_r+0x8fa>
 800cecc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ced0:	0d1b      	lsrs	r3, r3, #20
 800ced2:	051b      	lsls	r3, r3, #20
 800ced4:	b183      	cbz	r3, 800cef8 <_dtoa_r+0x900>
 800ced6:	9b04      	ldr	r3, [sp, #16]
 800ced8:	3301      	adds	r3, #1
 800ceda:	9304      	str	r3, [sp, #16]
 800cedc:	9b05      	ldr	r3, [sp, #20]
 800cede:	3301      	adds	r3, #1
 800cee0:	9305      	str	r3, [sp, #20]
 800cee2:	f04f 0801 	mov.w	r8, #1
 800cee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f47f af6a 	bne.w	800cdc2 <_dtoa_r+0x7ca>
 800ceee:	2001      	movs	r0, #1
 800cef0:	e76f      	b.n	800cdd2 <_dtoa_r+0x7da>
 800cef2:	f04f 0800 	mov.w	r8, #0
 800cef6:	e7f6      	b.n	800cee6 <_dtoa_r+0x8ee>
 800cef8:	4698      	mov	r8, r3
 800cefa:	e7f4      	b.n	800cee6 <_dtoa_r+0x8ee>
 800cefc:	f43f af7d 	beq.w	800cdfa <_dtoa_r+0x802>
 800cf00:	4618      	mov	r0, r3
 800cf02:	301c      	adds	r0, #28
 800cf04:	e772      	b.n	800cdec <_dtoa_r+0x7f4>
 800cf06:	9b03      	ldr	r3, [sp, #12]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	dc37      	bgt.n	800cf7c <_dtoa_r+0x984>
 800cf0c:	9b06      	ldr	r3, [sp, #24]
 800cf0e:	2b02      	cmp	r3, #2
 800cf10:	dd34      	ble.n	800cf7c <_dtoa_r+0x984>
 800cf12:	9b03      	ldr	r3, [sp, #12]
 800cf14:	9302      	str	r3, [sp, #8]
 800cf16:	9b02      	ldr	r3, [sp, #8]
 800cf18:	b96b      	cbnz	r3, 800cf36 <_dtoa_r+0x93e>
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	2205      	movs	r2, #5
 800cf1e:	4620      	mov	r0, r4
 800cf20:	f000 fea0 	bl	800dc64 <__multadd>
 800cf24:	4601      	mov	r1, r0
 800cf26:	4606      	mov	r6, r0
 800cf28:	ee18 0a10 	vmov	r0, s16
 800cf2c:	f001 f904 	bl	800e138 <__mcmp>
 800cf30:	2800      	cmp	r0, #0
 800cf32:	f73f adbb 	bgt.w	800caac <_dtoa_r+0x4b4>
 800cf36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf38:	9d01      	ldr	r5, [sp, #4]
 800cf3a:	43db      	mvns	r3, r3
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	f04f 0800 	mov.w	r8, #0
 800cf42:	4631      	mov	r1, r6
 800cf44:	4620      	mov	r0, r4
 800cf46:	f000 fe6b 	bl	800dc20 <_Bfree>
 800cf4a:	2f00      	cmp	r7, #0
 800cf4c:	f43f aea4 	beq.w	800cc98 <_dtoa_r+0x6a0>
 800cf50:	f1b8 0f00 	cmp.w	r8, #0
 800cf54:	d005      	beq.n	800cf62 <_dtoa_r+0x96a>
 800cf56:	45b8      	cmp	r8, r7
 800cf58:	d003      	beq.n	800cf62 <_dtoa_r+0x96a>
 800cf5a:	4641      	mov	r1, r8
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f000 fe5f 	bl	800dc20 <_Bfree>
 800cf62:	4639      	mov	r1, r7
 800cf64:	4620      	mov	r0, r4
 800cf66:	f000 fe5b 	bl	800dc20 <_Bfree>
 800cf6a:	e695      	b.n	800cc98 <_dtoa_r+0x6a0>
 800cf6c:	2600      	movs	r6, #0
 800cf6e:	4637      	mov	r7, r6
 800cf70:	e7e1      	b.n	800cf36 <_dtoa_r+0x93e>
 800cf72:	9700      	str	r7, [sp, #0]
 800cf74:	4637      	mov	r7, r6
 800cf76:	e599      	b.n	800caac <_dtoa_r+0x4b4>
 800cf78:	40240000 	.word	0x40240000
 800cf7c:	9b08      	ldr	r3, [sp, #32]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f000 80ca 	beq.w	800d118 <_dtoa_r+0xb20>
 800cf84:	9b03      	ldr	r3, [sp, #12]
 800cf86:	9302      	str	r3, [sp, #8]
 800cf88:	2d00      	cmp	r5, #0
 800cf8a:	dd05      	ble.n	800cf98 <_dtoa_r+0x9a0>
 800cf8c:	4639      	mov	r1, r7
 800cf8e:	462a      	mov	r2, r5
 800cf90:	4620      	mov	r0, r4
 800cf92:	f001 f861 	bl	800e058 <__lshift>
 800cf96:	4607      	mov	r7, r0
 800cf98:	f1b8 0f00 	cmp.w	r8, #0
 800cf9c:	d05b      	beq.n	800d056 <_dtoa_r+0xa5e>
 800cf9e:	6879      	ldr	r1, [r7, #4]
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	f000 fdfd 	bl	800dba0 <_Balloc>
 800cfa6:	4605      	mov	r5, r0
 800cfa8:	b928      	cbnz	r0, 800cfb6 <_dtoa_r+0x9be>
 800cfaa:	4b87      	ldr	r3, [pc, #540]	; (800d1c8 <_dtoa_r+0xbd0>)
 800cfac:	4602      	mov	r2, r0
 800cfae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cfb2:	f7ff bb3b 	b.w	800c62c <_dtoa_r+0x34>
 800cfb6:	693a      	ldr	r2, [r7, #16]
 800cfb8:	3202      	adds	r2, #2
 800cfba:	0092      	lsls	r2, r2, #2
 800cfbc:	f107 010c 	add.w	r1, r7, #12
 800cfc0:	300c      	adds	r0, #12
 800cfc2:	f7fd fad6 	bl	800a572 <memcpy>
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	4629      	mov	r1, r5
 800cfca:	4620      	mov	r0, r4
 800cfcc:	f001 f844 	bl	800e058 <__lshift>
 800cfd0:	9b01      	ldr	r3, [sp, #4]
 800cfd2:	f103 0901 	add.w	r9, r3, #1
 800cfd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cfda:	4413      	add	r3, r2
 800cfdc:	9305      	str	r3, [sp, #20]
 800cfde:	f00a 0301 	and.w	r3, sl, #1
 800cfe2:	46b8      	mov	r8, r7
 800cfe4:	9304      	str	r3, [sp, #16]
 800cfe6:	4607      	mov	r7, r0
 800cfe8:	4631      	mov	r1, r6
 800cfea:	ee18 0a10 	vmov	r0, s16
 800cfee:	f7ff fa77 	bl	800c4e0 <quorem>
 800cff2:	4641      	mov	r1, r8
 800cff4:	9002      	str	r0, [sp, #8]
 800cff6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cffa:	ee18 0a10 	vmov	r0, s16
 800cffe:	f001 f89b 	bl	800e138 <__mcmp>
 800d002:	463a      	mov	r2, r7
 800d004:	9003      	str	r0, [sp, #12]
 800d006:	4631      	mov	r1, r6
 800d008:	4620      	mov	r0, r4
 800d00a:	f001 f8b1 	bl	800e170 <__mdiff>
 800d00e:	68c2      	ldr	r2, [r0, #12]
 800d010:	f109 3bff 	add.w	fp, r9, #4294967295
 800d014:	4605      	mov	r5, r0
 800d016:	bb02      	cbnz	r2, 800d05a <_dtoa_r+0xa62>
 800d018:	4601      	mov	r1, r0
 800d01a:	ee18 0a10 	vmov	r0, s16
 800d01e:	f001 f88b 	bl	800e138 <__mcmp>
 800d022:	4602      	mov	r2, r0
 800d024:	4629      	mov	r1, r5
 800d026:	4620      	mov	r0, r4
 800d028:	9207      	str	r2, [sp, #28]
 800d02a:	f000 fdf9 	bl	800dc20 <_Bfree>
 800d02e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d032:	ea43 0102 	orr.w	r1, r3, r2
 800d036:	9b04      	ldr	r3, [sp, #16]
 800d038:	430b      	orrs	r3, r1
 800d03a:	464d      	mov	r5, r9
 800d03c:	d10f      	bne.n	800d05e <_dtoa_r+0xa66>
 800d03e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d042:	d02a      	beq.n	800d09a <_dtoa_r+0xaa2>
 800d044:	9b03      	ldr	r3, [sp, #12]
 800d046:	2b00      	cmp	r3, #0
 800d048:	dd02      	ble.n	800d050 <_dtoa_r+0xa58>
 800d04a:	9b02      	ldr	r3, [sp, #8]
 800d04c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d050:	f88b a000 	strb.w	sl, [fp]
 800d054:	e775      	b.n	800cf42 <_dtoa_r+0x94a>
 800d056:	4638      	mov	r0, r7
 800d058:	e7ba      	b.n	800cfd0 <_dtoa_r+0x9d8>
 800d05a:	2201      	movs	r2, #1
 800d05c:	e7e2      	b.n	800d024 <_dtoa_r+0xa2c>
 800d05e:	9b03      	ldr	r3, [sp, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	db04      	blt.n	800d06e <_dtoa_r+0xa76>
 800d064:	9906      	ldr	r1, [sp, #24]
 800d066:	430b      	orrs	r3, r1
 800d068:	9904      	ldr	r1, [sp, #16]
 800d06a:	430b      	orrs	r3, r1
 800d06c:	d122      	bne.n	800d0b4 <_dtoa_r+0xabc>
 800d06e:	2a00      	cmp	r2, #0
 800d070:	ddee      	ble.n	800d050 <_dtoa_r+0xa58>
 800d072:	ee18 1a10 	vmov	r1, s16
 800d076:	2201      	movs	r2, #1
 800d078:	4620      	mov	r0, r4
 800d07a:	f000 ffed 	bl	800e058 <__lshift>
 800d07e:	4631      	mov	r1, r6
 800d080:	ee08 0a10 	vmov	s16, r0
 800d084:	f001 f858 	bl	800e138 <__mcmp>
 800d088:	2800      	cmp	r0, #0
 800d08a:	dc03      	bgt.n	800d094 <_dtoa_r+0xa9c>
 800d08c:	d1e0      	bne.n	800d050 <_dtoa_r+0xa58>
 800d08e:	f01a 0f01 	tst.w	sl, #1
 800d092:	d0dd      	beq.n	800d050 <_dtoa_r+0xa58>
 800d094:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d098:	d1d7      	bne.n	800d04a <_dtoa_r+0xa52>
 800d09a:	2339      	movs	r3, #57	; 0x39
 800d09c:	f88b 3000 	strb.w	r3, [fp]
 800d0a0:	462b      	mov	r3, r5
 800d0a2:	461d      	mov	r5, r3
 800d0a4:	3b01      	subs	r3, #1
 800d0a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d0aa:	2a39      	cmp	r2, #57	; 0x39
 800d0ac:	d071      	beq.n	800d192 <_dtoa_r+0xb9a>
 800d0ae:	3201      	adds	r2, #1
 800d0b0:	701a      	strb	r2, [r3, #0]
 800d0b2:	e746      	b.n	800cf42 <_dtoa_r+0x94a>
 800d0b4:	2a00      	cmp	r2, #0
 800d0b6:	dd07      	ble.n	800d0c8 <_dtoa_r+0xad0>
 800d0b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0bc:	d0ed      	beq.n	800d09a <_dtoa_r+0xaa2>
 800d0be:	f10a 0301 	add.w	r3, sl, #1
 800d0c2:	f88b 3000 	strb.w	r3, [fp]
 800d0c6:	e73c      	b.n	800cf42 <_dtoa_r+0x94a>
 800d0c8:	9b05      	ldr	r3, [sp, #20]
 800d0ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d0ce:	4599      	cmp	r9, r3
 800d0d0:	d047      	beq.n	800d162 <_dtoa_r+0xb6a>
 800d0d2:	ee18 1a10 	vmov	r1, s16
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	220a      	movs	r2, #10
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f000 fdc2 	bl	800dc64 <__multadd>
 800d0e0:	45b8      	cmp	r8, r7
 800d0e2:	ee08 0a10 	vmov	s16, r0
 800d0e6:	f04f 0300 	mov.w	r3, #0
 800d0ea:	f04f 020a 	mov.w	r2, #10
 800d0ee:	4641      	mov	r1, r8
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	d106      	bne.n	800d102 <_dtoa_r+0xb0a>
 800d0f4:	f000 fdb6 	bl	800dc64 <__multadd>
 800d0f8:	4680      	mov	r8, r0
 800d0fa:	4607      	mov	r7, r0
 800d0fc:	f109 0901 	add.w	r9, r9, #1
 800d100:	e772      	b.n	800cfe8 <_dtoa_r+0x9f0>
 800d102:	f000 fdaf 	bl	800dc64 <__multadd>
 800d106:	4639      	mov	r1, r7
 800d108:	4680      	mov	r8, r0
 800d10a:	2300      	movs	r3, #0
 800d10c:	220a      	movs	r2, #10
 800d10e:	4620      	mov	r0, r4
 800d110:	f000 fda8 	bl	800dc64 <__multadd>
 800d114:	4607      	mov	r7, r0
 800d116:	e7f1      	b.n	800d0fc <_dtoa_r+0xb04>
 800d118:	9b03      	ldr	r3, [sp, #12]
 800d11a:	9302      	str	r3, [sp, #8]
 800d11c:	9d01      	ldr	r5, [sp, #4]
 800d11e:	ee18 0a10 	vmov	r0, s16
 800d122:	4631      	mov	r1, r6
 800d124:	f7ff f9dc 	bl	800c4e0 <quorem>
 800d128:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d12c:	9b01      	ldr	r3, [sp, #4]
 800d12e:	f805 ab01 	strb.w	sl, [r5], #1
 800d132:	1aea      	subs	r2, r5, r3
 800d134:	9b02      	ldr	r3, [sp, #8]
 800d136:	4293      	cmp	r3, r2
 800d138:	dd09      	ble.n	800d14e <_dtoa_r+0xb56>
 800d13a:	ee18 1a10 	vmov	r1, s16
 800d13e:	2300      	movs	r3, #0
 800d140:	220a      	movs	r2, #10
 800d142:	4620      	mov	r0, r4
 800d144:	f000 fd8e 	bl	800dc64 <__multadd>
 800d148:	ee08 0a10 	vmov	s16, r0
 800d14c:	e7e7      	b.n	800d11e <_dtoa_r+0xb26>
 800d14e:	9b02      	ldr	r3, [sp, #8]
 800d150:	2b00      	cmp	r3, #0
 800d152:	bfc8      	it	gt
 800d154:	461d      	movgt	r5, r3
 800d156:	9b01      	ldr	r3, [sp, #4]
 800d158:	bfd8      	it	le
 800d15a:	2501      	movle	r5, #1
 800d15c:	441d      	add	r5, r3
 800d15e:	f04f 0800 	mov.w	r8, #0
 800d162:	ee18 1a10 	vmov	r1, s16
 800d166:	2201      	movs	r2, #1
 800d168:	4620      	mov	r0, r4
 800d16a:	f000 ff75 	bl	800e058 <__lshift>
 800d16e:	4631      	mov	r1, r6
 800d170:	ee08 0a10 	vmov	s16, r0
 800d174:	f000 ffe0 	bl	800e138 <__mcmp>
 800d178:	2800      	cmp	r0, #0
 800d17a:	dc91      	bgt.n	800d0a0 <_dtoa_r+0xaa8>
 800d17c:	d102      	bne.n	800d184 <_dtoa_r+0xb8c>
 800d17e:	f01a 0f01 	tst.w	sl, #1
 800d182:	d18d      	bne.n	800d0a0 <_dtoa_r+0xaa8>
 800d184:	462b      	mov	r3, r5
 800d186:	461d      	mov	r5, r3
 800d188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d18c:	2a30      	cmp	r2, #48	; 0x30
 800d18e:	d0fa      	beq.n	800d186 <_dtoa_r+0xb8e>
 800d190:	e6d7      	b.n	800cf42 <_dtoa_r+0x94a>
 800d192:	9a01      	ldr	r2, [sp, #4]
 800d194:	429a      	cmp	r2, r3
 800d196:	d184      	bne.n	800d0a2 <_dtoa_r+0xaaa>
 800d198:	9b00      	ldr	r3, [sp, #0]
 800d19a:	3301      	adds	r3, #1
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	2331      	movs	r3, #49	; 0x31
 800d1a0:	7013      	strb	r3, [r2, #0]
 800d1a2:	e6ce      	b.n	800cf42 <_dtoa_r+0x94a>
 800d1a4:	4b09      	ldr	r3, [pc, #36]	; (800d1cc <_dtoa_r+0xbd4>)
 800d1a6:	f7ff ba95 	b.w	800c6d4 <_dtoa_r+0xdc>
 800d1aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f47f aa6e 	bne.w	800c68e <_dtoa_r+0x96>
 800d1b2:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <_dtoa_r+0xbd8>)
 800d1b4:	f7ff ba8e 	b.w	800c6d4 <_dtoa_r+0xdc>
 800d1b8:	9b02      	ldr	r3, [sp, #8]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	dcae      	bgt.n	800d11c <_dtoa_r+0xb24>
 800d1be:	9b06      	ldr	r3, [sp, #24]
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	f73f aea8 	bgt.w	800cf16 <_dtoa_r+0x91e>
 800d1c6:	e7a9      	b.n	800d11c <_dtoa_r+0xb24>
 800d1c8:	0800f104 	.word	0x0800f104
 800d1cc:	0800eecc 	.word	0x0800eecc
 800d1d0:	0800f085 	.word	0x0800f085

0800d1d4 <__sflush_r>:
 800d1d4:	898a      	ldrh	r2, [r1, #12]
 800d1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1da:	4605      	mov	r5, r0
 800d1dc:	0710      	lsls	r0, r2, #28
 800d1de:	460c      	mov	r4, r1
 800d1e0:	d458      	bmi.n	800d294 <__sflush_r+0xc0>
 800d1e2:	684b      	ldr	r3, [r1, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	dc05      	bgt.n	800d1f4 <__sflush_r+0x20>
 800d1e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	dc02      	bgt.n	800d1f4 <__sflush_r+0x20>
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1f6:	2e00      	cmp	r6, #0
 800d1f8:	d0f9      	beq.n	800d1ee <__sflush_r+0x1a>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d200:	682f      	ldr	r7, [r5, #0]
 800d202:	602b      	str	r3, [r5, #0]
 800d204:	d032      	beq.n	800d26c <__sflush_r+0x98>
 800d206:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d208:	89a3      	ldrh	r3, [r4, #12]
 800d20a:	075a      	lsls	r2, r3, #29
 800d20c:	d505      	bpl.n	800d21a <__sflush_r+0x46>
 800d20e:	6863      	ldr	r3, [r4, #4]
 800d210:	1ac0      	subs	r0, r0, r3
 800d212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d214:	b10b      	cbz	r3, 800d21a <__sflush_r+0x46>
 800d216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d218:	1ac0      	subs	r0, r0, r3
 800d21a:	2300      	movs	r3, #0
 800d21c:	4602      	mov	r2, r0
 800d21e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d220:	6a21      	ldr	r1, [r4, #32]
 800d222:	4628      	mov	r0, r5
 800d224:	47b0      	blx	r6
 800d226:	1c43      	adds	r3, r0, #1
 800d228:	89a3      	ldrh	r3, [r4, #12]
 800d22a:	d106      	bne.n	800d23a <__sflush_r+0x66>
 800d22c:	6829      	ldr	r1, [r5, #0]
 800d22e:	291d      	cmp	r1, #29
 800d230:	d82c      	bhi.n	800d28c <__sflush_r+0xb8>
 800d232:	4a2a      	ldr	r2, [pc, #168]	; (800d2dc <__sflush_r+0x108>)
 800d234:	40ca      	lsrs	r2, r1
 800d236:	07d6      	lsls	r6, r2, #31
 800d238:	d528      	bpl.n	800d28c <__sflush_r+0xb8>
 800d23a:	2200      	movs	r2, #0
 800d23c:	6062      	str	r2, [r4, #4]
 800d23e:	04d9      	lsls	r1, r3, #19
 800d240:	6922      	ldr	r2, [r4, #16]
 800d242:	6022      	str	r2, [r4, #0]
 800d244:	d504      	bpl.n	800d250 <__sflush_r+0x7c>
 800d246:	1c42      	adds	r2, r0, #1
 800d248:	d101      	bne.n	800d24e <__sflush_r+0x7a>
 800d24a:	682b      	ldr	r3, [r5, #0]
 800d24c:	b903      	cbnz	r3, 800d250 <__sflush_r+0x7c>
 800d24e:	6560      	str	r0, [r4, #84]	; 0x54
 800d250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d252:	602f      	str	r7, [r5, #0]
 800d254:	2900      	cmp	r1, #0
 800d256:	d0ca      	beq.n	800d1ee <__sflush_r+0x1a>
 800d258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d25c:	4299      	cmp	r1, r3
 800d25e:	d002      	beq.n	800d266 <__sflush_r+0x92>
 800d260:	4628      	mov	r0, r5
 800d262:	f001 f975 	bl	800e550 <_free_r>
 800d266:	2000      	movs	r0, #0
 800d268:	6360      	str	r0, [r4, #52]	; 0x34
 800d26a:	e7c1      	b.n	800d1f0 <__sflush_r+0x1c>
 800d26c:	6a21      	ldr	r1, [r4, #32]
 800d26e:	2301      	movs	r3, #1
 800d270:	4628      	mov	r0, r5
 800d272:	47b0      	blx	r6
 800d274:	1c41      	adds	r1, r0, #1
 800d276:	d1c7      	bne.n	800d208 <__sflush_r+0x34>
 800d278:	682b      	ldr	r3, [r5, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d0c4      	beq.n	800d208 <__sflush_r+0x34>
 800d27e:	2b1d      	cmp	r3, #29
 800d280:	d001      	beq.n	800d286 <__sflush_r+0xb2>
 800d282:	2b16      	cmp	r3, #22
 800d284:	d101      	bne.n	800d28a <__sflush_r+0xb6>
 800d286:	602f      	str	r7, [r5, #0]
 800d288:	e7b1      	b.n	800d1ee <__sflush_r+0x1a>
 800d28a:	89a3      	ldrh	r3, [r4, #12]
 800d28c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d290:	81a3      	strh	r3, [r4, #12]
 800d292:	e7ad      	b.n	800d1f0 <__sflush_r+0x1c>
 800d294:	690f      	ldr	r7, [r1, #16]
 800d296:	2f00      	cmp	r7, #0
 800d298:	d0a9      	beq.n	800d1ee <__sflush_r+0x1a>
 800d29a:	0793      	lsls	r3, r2, #30
 800d29c:	680e      	ldr	r6, [r1, #0]
 800d29e:	bf08      	it	eq
 800d2a0:	694b      	ldreq	r3, [r1, #20]
 800d2a2:	600f      	str	r7, [r1, #0]
 800d2a4:	bf18      	it	ne
 800d2a6:	2300      	movne	r3, #0
 800d2a8:	eba6 0807 	sub.w	r8, r6, r7
 800d2ac:	608b      	str	r3, [r1, #8]
 800d2ae:	f1b8 0f00 	cmp.w	r8, #0
 800d2b2:	dd9c      	ble.n	800d1ee <__sflush_r+0x1a>
 800d2b4:	6a21      	ldr	r1, [r4, #32]
 800d2b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d2b8:	4643      	mov	r3, r8
 800d2ba:	463a      	mov	r2, r7
 800d2bc:	4628      	mov	r0, r5
 800d2be:	47b0      	blx	r6
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	dc06      	bgt.n	800d2d2 <__sflush_r+0xfe>
 800d2c4:	89a3      	ldrh	r3, [r4, #12]
 800d2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2ca:	81a3      	strh	r3, [r4, #12]
 800d2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d0:	e78e      	b.n	800d1f0 <__sflush_r+0x1c>
 800d2d2:	4407      	add	r7, r0
 800d2d4:	eba8 0800 	sub.w	r8, r8, r0
 800d2d8:	e7e9      	b.n	800d2ae <__sflush_r+0xda>
 800d2da:	bf00      	nop
 800d2dc:	20400001 	.word	0x20400001

0800d2e0 <_fflush_r>:
 800d2e0:	b538      	push	{r3, r4, r5, lr}
 800d2e2:	690b      	ldr	r3, [r1, #16]
 800d2e4:	4605      	mov	r5, r0
 800d2e6:	460c      	mov	r4, r1
 800d2e8:	b913      	cbnz	r3, 800d2f0 <_fflush_r+0x10>
 800d2ea:	2500      	movs	r5, #0
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	bd38      	pop	{r3, r4, r5, pc}
 800d2f0:	b118      	cbz	r0, 800d2fa <_fflush_r+0x1a>
 800d2f2:	6983      	ldr	r3, [r0, #24]
 800d2f4:	b90b      	cbnz	r3, 800d2fa <_fflush_r+0x1a>
 800d2f6:	f7fd f877 	bl	800a3e8 <__sinit>
 800d2fa:	4b14      	ldr	r3, [pc, #80]	; (800d34c <_fflush_r+0x6c>)
 800d2fc:	429c      	cmp	r4, r3
 800d2fe:	d11b      	bne.n	800d338 <_fflush_r+0x58>
 800d300:	686c      	ldr	r4, [r5, #4]
 800d302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d0ef      	beq.n	800d2ea <_fflush_r+0xa>
 800d30a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d30c:	07d0      	lsls	r0, r2, #31
 800d30e:	d404      	bmi.n	800d31a <_fflush_r+0x3a>
 800d310:	0599      	lsls	r1, r3, #22
 800d312:	d402      	bmi.n	800d31a <_fflush_r+0x3a>
 800d314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d316:	f7fd f92a 	bl	800a56e <__retarget_lock_acquire_recursive>
 800d31a:	4628      	mov	r0, r5
 800d31c:	4621      	mov	r1, r4
 800d31e:	f7ff ff59 	bl	800d1d4 <__sflush_r>
 800d322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d324:	07da      	lsls	r2, r3, #31
 800d326:	4605      	mov	r5, r0
 800d328:	d4e0      	bmi.n	800d2ec <_fflush_r+0xc>
 800d32a:	89a3      	ldrh	r3, [r4, #12]
 800d32c:	059b      	lsls	r3, r3, #22
 800d32e:	d4dd      	bmi.n	800d2ec <_fflush_r+0xc>
 800d330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d332:	f7fd f91d 	bl	800a570 <__retarget_lock_release_recursive>
 800d336:	e7d9      	b.n	800d2ec <_fflush_r+0xc>
 800d338:	4b05      	ldr	r3, [pc, #20]	; (800d350 <_fflush_r+0x70>)
 800d33a:	429c      	cmp	r4, r3
 800d33c:	d101      	bne.n	800d342 <_fflush_r+0x62>
 800d33e:	68ac      	ldr	r4, [r5, #8]
 800d340:	e7df      	b.n	800d302 <_fflush_r+0x22>
 800d342:	4b04      	ldr	r3, [pc, #16]	; (800d354 <_fflush_r+0x74>)
 800d344:	429c      	cmp	r4, r3
 800d346:	bf08      	it	eq
 800d348:	68ec      	ldreq	r4, [r5, #12]
 800d34a:	e7da      	b.n	800d302 <_fflush_r+0x22>
 800d34c:	0800ee78 	.word	0x0800ee78
 800d350:	0800ee98 	.word	0x0800ee98
 800d354:	0800ee58 	.word	0x0800ee58

0800d358 <fiprintf>:
 800d358:	b40e      	push	{r1, r2, r3}
 800d35a:	b503      	push	{r0, r1, lr}
 800d35c:	4601      	mov	r1, r0
 800d35e:	ab03      	add	r3, sp, #12
 800d360:	4805      	ldr	r0, [pc, #20]	; (800d378 <fiprintf+0x20>)
 800d362:	f853 2b04 	ldr.w	r2, [r3], #4
 800d366:	6800      	ldr	r0, [r0, #0]
 800d368:	9301      	str	r3, [sp, #4]
 800d36a:	f001 fac3 	bl	800e8f4 <_vfiprintf_r>
 800d36e:	b002      	add	sp, #8
 800d370:	f85d eb04 	ldr.w	lr, [sp], #4
 800d374:	b003      	add	sp, #12
 800d376:	4770      	bx	lr
 800d378:	20000078 	.word	0x20000078

0800d37c <rshift>:
 800d37c:	6903      	ldr	r3, [r0, #16]
 800d37e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d386:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d38a:	f100 0414 	add.w	r4, r0, #20
 800d38e:	dd45      	ble.n	800d41c <rshift+0xa0>
 800d390:	f011 011f 	ands.w	r1, r1, #31
 800d394:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d398:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d39c:	d10c      	bne.n	800d3b8 <rshift+0x3c>
 800d39e:	f100 0710 	add.w	r7, r0, #16
 800d3a2:	4629      	mov	r1, r5
 800d3a4:	42b1      	cmp	r1, r6
 800d3a6:	d334      	bcc.n	800d412 <rshift+0x96>
 800d3a8:	1a9b      	subs	r3, r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	1eea      	subs	r2, r5, #3
 800d3ae:	4296      	cmp	r6, r2
 800d3b0:	bf38      	it	cc
 800d3b2:	2300      	movcc	r3, #0
 800d3b4:	4423      	add	r3, r4
 800d3b6:	e015      	b.n	800d3e4 <rshift+0x68>
 800d3b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d3bc:	f1c1 0820 	rsb	r8, r1, #32
 800d3c0:	40cf      	lsrs	r7, r1
 800d3c2:	f105 0e04 	add.w	lr, r5, #4
 800d3c6:	46a1      	mov	r9, r4
 800d3c8:	4576      	cmp	r6, lr
 800d3ca:	46f4      	mov	ip, lr
 800d3cc:	d815      	bhi.n	800d3fa <rshift+0x7e>
 800d3ce:	1a9a      	subs	r2, r3, r2
 800d3d0:	0092      	lsls	r2, r2, #2
 800d3d2:	3a04      	subs	r2, #4
 800d3d4:	3501      	adds	r5, #1
 800d3d6:	42ae      	cmp	r6, r5
 800d3d8:	bf38      	it	cc
 800d3da:	2200      	movcc	r2, #0
 800d3dc:	18a3      	adds	r3, r4, r2
 800d3de:	50a7      	str	r7, [r4, r2]
 800d3e0:	b107      	cbz	r7, 800d3e4 <rshift+0x68>
 800d3e2:	3304      	adds	r3, #4
 800d3e4:	1b1a      	subs	r2, r3, r4
 800d3e6:	42a3      	cmp	r3, r4
 800d3e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d3ec:	bf08      	it	eq
 800d3ee:	2300      	moveq	r3, #0
 800d3f0:	6102      	str	r2, [r0, #16]
 800d3f2:	bf08      	it	eq
 800d3f4:	6143      	streq	r3, [r0, #20]
 800d3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3fa:	f8dc c000 	ldr.w	ip, [ip]
 800d3fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800d402:	ea4c 0707 	orr.w	r7, ip, r7
 800d406:	f849 7b04 	str.w	r7, [r9], #4
 800d40a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d40e:	40cf      	lsrs	r7, r1
 800d410:	e7da      	b.n	800d3c8 <rshift+0x4c>
 800d412:	f851 cb04 	ldr.w	ip, [r1], #4
 800d416:	f847 cf04 	str.w	ip, [r7, #4]!
 800d41a:	e7c3      	b.n	800d3a4 <rshift+0x28>
 800d41c:	4623      	mov	r3, r4
 800d41e:	e7e1      	b.n	800d3e4 <rshift+0x68>

0800d420 <__hexdig_fun>:
 800d420:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d424:	2b09      	cmp	r3, #9
 800d426:	d802      	bhi.n	800d42e <__hexdig_fun+0xe>
 800d428:	3820      	subs	r0, #32
 800d42a:	b2c0      	uxtb	r0, r0
 800d42c:	4770      	bx	lr
 800d42e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d432:	2b05      	cmp	r3, #5
 800d434:	d801      	bhi.n	800d43a <__hexdig_fun+0x1a>
 800d436:	3847      	subs	r0, #71	; 0x47
 800d438:	e7f7      	b.n	800d42a <__hexdig_fun+0xa>
 800d43a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d43e:	2b05      	cmp	r3, #5
 800d440:	d801      	bhi.n	800d446 <__hexdig_fun+0x26>
 800d442:	3827      	subs	r0, #39	; 0x27
 800d444:	e7f1      	b.n	800d42a <__hexdig_fun+0xa>
 800d446:	2000      	movs	r0, #0
 800d448:	4770      	bx	lr
	...

0800d44c <__gethex>:
 800d44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d450:	ed2d 8b02 	vpush	{d8}
 800d454:	b089      	sub	sp, #36	; 0x24
 800d456:	ee08 0a10 	vmov	s16, r0
 800d45a:	9304      	str	r3, [sp, #16]
 800d45c:	4bb4      	ldr	r3, [pc, #720]	; (800d730 <__gethex+0x2e4>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	9301      	str	r3, [sp, #4]
 800d462:	4618      	mov	r0, r3
 800d464:	468b      	mov	fp, r1
 800d466:	4690      	mov	r8, r2
 800d468:	f7f2 feb2 	bl	80001d0 <strlen>
 800d46c:	9b01      	ldr	r3, [sp, #4]
 800d46e:	f8db 2000 	ldr.w	r2, [fp]
 800d472:	4403      	add	r3, r0
 800d474:	4682      	mov	sl, r0
 800d476:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d47a:	9305      	str	r3, [sp, #20]
 800d47c:	1c93      	adds	r3, r2, #2
 800d47e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d482:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d486:	32fe      	adds	r2, #254	; 0xfe
 800d488:	18d1      	adds	r1, r2, r3
 800d48a:	461f      	mov	r7, r3
 800d48c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d490:	9100      	str	r1, [sp, #0]
 800d492:	2830      	cmp	r0, #48	; 0x30
 800d494:	d0f8      	beq.n	800d488 <__gethex+0x3c>
 800d496:	f7ff ffc3 	bl	800d420 <__hexdig_fun>
 800d49a:	4604      	mov	r4, r0
 800d49c:	2800      	cmp	r0, #0
 800d49e:	d13a      	bne.n	800d516 <__gethex+0xca>
 800d4a0:	9901      	ldr	r1, [sp, #4]
 800d4a2:	4652      	mov	r2, sl
 800d4a4:	4638      	mov	r0, r7
 800d4a6:	f001 fb6f 	bl	800eb88 <strncmp>
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	d168      	bne.n	800d582 <__gethex+0x136>
 800d4b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d4b4:	eb07 060a 	add.w	r6, r7, sl
 800d4b8:	f7ff ffb2 	bl	800d420 <__hexdig_fun>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	d062      	beq.n	800d586 <__gethex+0x13a>
 800d4c0:	4633      	mov	r3, r6
 800d4c2:	7818      	ldrb	r0, [r3, #0]
 800d4c4:	2830      	cmp	r0, #48	; 0x30
 800d4c6:	461f      	mov	r7, r3
 800d4c8:	f103 0301 	add.w	r3, r3, #1
 800d4cc:	d0f9      	beq.n	800d4c2 <__gethex+0x76>
 800d4ce:	f7ff ffa7 	bl	800d420 <__hexdig_fun>
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	fab0 f480 	clz	r4, r0
 800d4d8:	0964      	lsrs	r4, r4, #5
 800d4da:	4635      	mov	r5, r6
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	463a      	mov	r2, r7
 800d4e0:	4616      	mov	r6, r2
 800d4e2:	3201      	adds	r2, #1
 800d4e4:	7830      	ldrb	r0, [r6, #0]
 800d4e6:	f7ff ff9b 	bl	800d420 <__hexdig_fun>
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	d1f8      	bne.n	800d4e0 <__gethex+0x94>
 800d4ee:	9901      	ldr	r1, [sp, #4]
 800d4f0:	4652      	mov	r2, sl
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	f001 fb48 	bl	800eb88 <strncmp>
 800d4f8:	b980      	cbnz	r0, 800d51c <__gethex+0xd0>
 800d4fa:	b94d      	cbnz	r5, 800d510 <__gethex+0xc4>
 800d4fc:	eb06 050a 	add.w	r5, r6, sl
 800d500:	462a      	mov	r2, r5
 800d502:	4616      	mov	r6, r2
 800d504:	3201      	adds	r2, #1
 800d506:	7830      	ldrb	r0, [r6, #0]
 800d508:	f7ff ff8a 	bl	800d420 <__hexdig_fun>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d1f8      	bne.n	800d502 <__gethex+0xb6>
 800d510:	1bad      	subs	r5, r5, r6
 800d512:	00ad      	lsls	r5, r5, #2
 800d514:	e004      	b.n	800d520 <__gethex+0xd4>
 800d516:	2400      	movs	r4, #0
 800d518:	4625      	mov	r5, r4
 800d51a:	e7e0      	b.n	800d4de <__gethex+0x92>
 800d51c:	2d00      	cmp	r5, #0
 800d51e:	d1f7      	bne.n	800d510 <__gethex+0xc4>
 800d520:	7833      	ldrb	r3, [r6, #0]
 800d522:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d526:	2b50      	cmp	r3, #80	; 0x50
 800d528:	d13b      	bne.n	800d5a2 <__gethex+0x156>
 800d52a:	7873      	ldrb	r3, [r6, #1]
 800d52c:	2b2b      	cmp	r3, #43	; 0x2b
 800d52e:	d02c      	beq.n	800d58a <__gethex+0x13e>
 800d530:	2b2d      	cmp	r3, #45	; 0x2d
 800d532:	d02e      	beq.n	800d592 <__gethex+0x146>
 800d534:	1c71      	adds	r1, r6, #1
 800d536:	f04f 0900 	mov.w	r9, #0
 800d53a:	7808      	ldrb	r0, [r1, #0]
 800d53c:	f7ff ff70 	bl	800d420 <__hexdig_fun>
 800d540:	1e43      	subs	r3, r0, #1
 800d542:	b2db      	uxtb	r3, r3
 800d544:	2b18      	cmp	r3, #24
 800d546:	d82c      	bhi.n	800d5a2 <__gethex+0x156>
 800d548:	f1a0 0210 	sub.w	r2, r0, #16
 800d54c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d550:	f7ff ff66 	bl	800d420 <__hexdig_fun>
 800d554:	1e43      	subs	r3, r0, #1
 800d556:	b2db      	uxtb	r3, r3
 800d558:	2b18      	cmp	r3, #24
 800d55a:	d91d      	bls.n	800d598 <__gethex+0x14c>
 800d55c:	f1b9 0f00 	cmp.w	r9, #0
 800d560:	d000      	beq.n	800d564 <__gethex+0x118>
 800d562:	4252      	negs	r2, r2
 800d564:	4415      	add	r5, r2
 800d566:	f8cb 1000 	str.w	r1, [fp]
 800d56a:	b1e4      	cbz	r4, 800d5a6 <__gethex+0x15a>
 800d56c:	9b00      	ldr	r3, [sp, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	bf14      	ite	ne
 800d572:	2700      	movne	r7, #0
 800d574:	2706      	moveq	r7, #6
 800d576:	4638      	mov	r0, r7
 800d578:	b009      	add	sp, #36	; 0x24
 800d57a:	ecbd 8b02 	vpop	{d8}
 800d57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d582:	463e      	mov	r6, r7
 800d584:	4625      	mov	r5, r4
 800d586:	2401      	movs	r4, #1
 800d588:	e7ca      	b.n	800d520 <__gethex+0xd4>
 800d58a:	f04f 0900 	mov.w	r9, #0
 800d58e:	1cb1      	adds	r1, r6, #2
 800d590:	e7d3      	b.n	800d53a <__gethex+0xee>
 800d592:	f04f 0901 	mov.w	r9, #1
 800d596:	e7fa      	b.n	800d58e <__gethex+0x142>
 800d598:	230a      	movs	r3, #10
 800d59a:	fb03 0202 	mla	r2, r3, r2, r0
 800d59e:	3a10      	subs	r2, #16
 800d5a0:	e7d4      	b.n	800d54c <__gethex+0x100>
 800d5a2:	4631      	mov	r1, r6
 800d5a4:	e7df      	b.n	800d566 <__gethex+0x11a>
 800d5a6:	1bf3      	subs	r3, r6, r7
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	4621      	mov	r1, r4
 800d5ac:	2b07      	cmp	r3, #7
 800d5ae:	dc0b      	bgt.n	800d5c8 <__gethex+0x17c>
 800d5b0:	ee18 0a10 	vmov	r0, s16
 800d5b4:	f000 faf4 	bl	800dba0 <_Balloc>
 800d5b8:	4604      	mov	r4, r0
 800d5ba:	b940      	cbnz	r0, 800d5ce <__gethex+0x182>
 800d5bc:	4b5d      	ldr	r3, [pc, #372]	; (800d734 <__gethex+0x2e8>)
 800d5be:	4602      	mov	r2, r0
 800d5c0:	21de      	movs	r1, #222	; 0xde
 800d5c2:	485d      	ldr	r0, [pc, #372]	; (800d738 <__gethex+0x2ec>)
 800d5c4:	f7fe ff5e 	bl	800c484 <__assert_func>
 800d5c8:	3101      	adds	r1, #1
 800d5ca:	105b      	asrs	r3, r3, #1
 800d5cc:	e7ee      	b.n	800d5ac <__gethex+0x160>
 800d5ce:	f100 0914 	add.w	r9, r0, #20
 800d5d2:	f04f 0b00 	mov.w	fp, #0
 800d5d6:	f1ca 0301 	rsb	r3, sl, #1
 800d5da:	f8cd 9008 	str.w	r9, [sp, #8]
 800d5de:	f8cd b000 	str.w	fp, [sp]
 800d5e2:	9306      	str	r3, [sp, #24]
 800d5e4:	42b7      	cmp	r7, r6
 800d5e6:	d340      	bcc.n	800d66a <__gethex+0x21e>
 800d5e8:	9802      	ldr	r0, [sp, #8]
 800d5ea:	9b00      	ldr	r3, [sp, #0]
 800d5ec:	f840 3b04 	str.w	r3, [r0], #4
 800d5f0:	eba0 0009 	sub.w	r0, r0, r9
 800d5f4:	1080      	asrs	r0, r0, #2
 800d5f6:	0146      	lsls	r6, r0, #5
 800d5f8:	6120      	str	r0, [r4, #16]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f000 fbc2 	bl	800dd84 <__hi0bits>
 800d600:	1a30      	subs	r0, r6, r0
 800d602:	f8d8 6000 	ldr.w	r6, [r8]
 800d606:	42b0      	cmp	r0, r6
 800d608:	dd63      	ble.n	800d6d2 <__gethex+0x286>
 800d60a:	1b87      	subs	r7, r0, r6
 800d60c:	4639      	mov	r1, r7
 800d60e:	4620      	mov	r0, r4
 800d610:	f000 ff66 	bl	800e4e0 <__any_on>
 800d614:	4682      	mov	sl, r0
 800d616:	b1a8      	cbz	r0, 800d644 <__gethex+0x1f8>
 800d618:	1e7b      	subs	r3, r7, #1
 800d61a:	1159      	asrs	r1, r3, #5
 800d61c:	f003 021f 	and.w	r2, r3, #31
 800d620:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d624:	f04f 0a01 	mov.w	sl, #1
 800d628:	fa0a f202 	lsl.w	r2, sl, r2
 800d62c:	420a      	tst	r2, r1
 800d62e:	d009      	beq.n	800d644 <__gethex+0x1f8>
 800d630:	4553      	cmp	r3, sl
 800d632:	dd05      	ble.n	800d640 <__gethex+0x1f4>
 800d634:	1eb9      	subs	r1, r7, #2
 800d636:	4620      	mov	r0, r4
 800d638:	f000 ff52 	bl	800e4e0 <__any_on>
 800d63c:	2800      	cmp	r0, #0
 800d63e:	d145      	bne.n	800d6cc <__gethex+0x280>
 800d640:	f04f 0a02 	mov.w	sl, #2
 800d644:	4639      	mov	r1, r7
 800d646:	4620      	mov	r0, r4
 800d648:	f7ff fe98 	bl	800d37c <rshift>
 800d64c:	443d      	add	r5, r7
 800d64e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d652:	42ab      	cmp	r3, r5
 800d654:	da4c      	bge.n	800d6f0 <__gethex+0x2a4>
 800d656:	ee18 0a10 	vmov	r0, s16
 800d65a:	4621      	mov	r1, r4
 800d65c:	f000 fae0 	bl	800dc20 <_Bfree>
 800d660:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d662:	2300      	movs	r3, #0
 800d664:	6013      	str	r3, [r2, #0]
 800d666:	27a3      	movs	r7, #163	; 0xa3
 800d668:	e785      	b.n	800d576 <__gethex+0x12a>
 800d66a:	1e73      	subs	r3, r6, #1
 800d66c:	9a05      	ldr	r2, [sp, #20]
 800d66e:	9303      	str	r3, [sp, #12]
 800d670:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d674:	4293      	cmp	r3, r2
 800d676:	d019      	beq.n	800d6ac <__gethex+0x260>
 800d678:	f1bb 0f20 	cmp.w	fp, #32
 800d67c:	d107      	bne.n	800d68e <__gethex+0x242>
 800d67e:	9b02      	ldr	r3, [sp, #8]
 800d680:	9a00      	ldr	r2, [sp, #0]
 800d682:	f843 2b04 	str.w	r2, [r3], #4
 800d686:	9302      	str	r3, [sp, #8]
 800d688:	2300      	movs	r3, #0
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	469b      	mov	fp, r3
 800d68e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d692:	f7ff fec5 	bl	800d420 <__hexdig_fun>
 800d696:	9b00      	ldr	r3, [sp, #0]
 800d698:	f000 000f 	and.w	r0, r0, #15
 800d69c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d6a0:	4303      	orrs	r3, r0
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	f10b 0b04 	add.w	fp, fp, #4
 800d6a8:	9b03      	ldr	r3, [sp, #12]
 800d6aa:	e00d      	b.n	800d6c8 <__gethex+0x27c>
 800d6ac:	9b03      	ldr	r3, [sp, #12]
 800d6ae:	9a06      	ldr	r2, [sp, #24]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	42bb      	cmp	r3, r7
 800d6b4:	d3e0      	bcc.n	800d678 <__gethex+0x22c>
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	9901      	ldr	r1, [sp, #4]
 800d6ba:	9307      	str	r3, [sp, #28]
 800d6bc:	4652      	mov	r2, sl
 800d6be:	f001 fa63 	bl	800eb88 <strncmp>
 800d6c2:	9b07      	ldr	r3, [sp, #28]
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d1d7      	bne.n	800d678 <__gethex+0x22c>
 800d6c8:	461e      	mov	r6, r3
 800d6ca:	e78b      	b.n	800d5e4 <__gethex+0x198>
 800d6cc:	f04f 0a03 	mov.w	sl, #3
 800d6d0:	e7b8      	b.n	800d644 <__gethex+0x1f8>
 800d6d2:	da0a      	bge.n	800d6ea <__gethex+0x29e>
 800d6d4:	1a37      	subs	r7, r6, r0
 800d6d6:	4621      	mov	r1, r4
 800d6d8:	ee18 0a10 	vmov	r0, s16
 800d6dc:	463a      	mov	r2, r7
 800d6de:	f000 fcbb 	bl	800e058 <__lshift>
 800d6e2:	1bed      	subs	r5, r5, r7
 800d6e4:	4604      	mov	r4, r0
 800d6e6:	f100 0914 	add.w	r9, r0, #20
 800d6ea:	f04f 0a00 	mov.w	sl, #0
 800d6ee:	e7ae      	b.n	800d64e <__gethex+0x202>
 800d6f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d6f4:	42a8      	cmp	r0, r5
 800d6f6:	dd72      	ble.n	800d7de <__gethex+0x392>
 800d6f8:	1b45      	subs	r5, r0, r5
 800d6fa:	42ae      	cmp	r6, r5
 800d6fc:	dc36      	bgt.n	800d76c <__gethex+0x320>
 800d6fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d702:	2b02      	cmp	r3, #2
 800d704:	d02a      	beq.n	800d75c <__gethex+0x310>
 800d706:	2b03      	cmp	r3, #3
 800d708:	d02c      	beq.n	800d764 <__gethex+0x318>
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d11c      	bne.n	800d748 <__gethex+0x2fc>
 800d70e:	42ae      	cmp	r6, r5
 800d710:	d11a      	bne.n	800d748 <__gethex+0x2fc>
 800d712:	2e01      	cmp	r6, #1
 800d714:	d112      	bne.n	800d73c <__gethex+0x2f0>
 800d716:	9a04      	ldr	r2, [sp, #16]
 800d718:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d71c:	6013      	str	r3, [r2, #0]
 800d71e:	2301      	movs	r3, #1
 800d720:	6123      	str	r3, [r4, #16]
 800d722:	f8c9 3000 	str.w	r3, [r9]
 800d726:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d728:	2762      	movs	r7, #98	; 0x62
 800d72a:	601c      	str	r4, [r3, #0]
 800d72c:	e723      	b.n	800d576 <__gethex+0x12a>
 800d72e:	bf00      	nop
 800d730:	0800f17c 	.word	0x0800f17c
 800d734:	0800f104 	.word	0x0800f104
 800d738:	0800f115 	.word	0x0800f115
 800d73c:	1e71      	subs	r1, r6, #1
 800d73e:	4620      	mov	r0, r4
 800d740:	f000 fece 	bl	800e4e0 <__any_on>
 800d744:	2800      	cmp	r0, #0
 800d746:	d1e6      	bne.n	800d716 <__gethex+0x2ca>
 800d748:	ee18 0a10 	vmov	r0, s16
 800d74c:	4621      	mov	r1, r4
 800d74e:	f000 fa67 	bl	800dc20 <_Bfree>
 800d752:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d754:	2300      	movs	r3, #0
 800d756:	6013      	str	r3, [r2, #0]
 800d758:	2750      	movs	r7, #80	; 0x50
 800d75a:	e70c      	b.n	800d576 <__gethex+0x12a>
 800d75c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d1f2      	bne.n	800d748 <__gethex+0x2fc>
 800d762:	e7d8      	b.n	800d716 <__gethex+0x2ca>
 800d764:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d766:	2b00      	cmp	r3, #0
 800d768:	d1d5      	bne.n	800d716 <__gethex+0x2ca>
 800d76a:	e7ed      	b.n	800d748 <__gethex+0x2fc>
 800d76c:	1e6f      	subs	r7, r5, #1
 800d76e:	f1ba 0f00 	cmp.w	sl, #0
 800d772:	d131      	bne.n	800d7d8 <__gethex+0x38c>
 800d774:	b127      	cbz	r7, 800d780 <__gethex+0x334>
 800d776:	4639      	mov	r1, r7
 800d778:	4620      	mov	r0, r4
 800d77a:	f000 feb1 	bl	800e4e0 <__any_on>
 800d77e:	4682      	mov	sl, r0
 800d780:	117b      	asrs	r3, r7, #5
 800d782:	2101      	movs	r1, #1
 800d784:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d788:	f007 071f 	and.w	r7, r7, #31
 800d78c:	fa01 f707 	lsl.w	r7, r1, r7
 800d790:	421f      	tst	r7, r3
 800d792:	4629      	mov	r1, r5
 800d794:	4620      	mov	r0, r4
 800d796:	bf18      	it	ne
 800d798:	f04a 0a02 	orrne.w	sl, sl, #2
 800d79c:	1b76      	subs	r6, r6, r5
 800d79e:	f7ff fded 	bl	800d37c <rshift>
 800d7a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d7a6:	2702      	movs	r7, #2
 800d7a8:	f1ba 0f00 	cmp.w	sl, #0
 800d7ac:	d048      	beq.n	800d840 <__gethex+0x3f4>
 800d7ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	d015      	beq.n	800d7e2 <__gethex+0x396>
 800d7b6:	2b03      	cmp	r3, #3
 800d7b8:	d017      	beq.n	800d7ea <__gethex+0x39e>
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d109      	bne.n	800d7d2 <__gethex+0x386>
 800d7be:	f01a 0f02 	tst.w	sl, #2
 800d7c2:	d006      	beq.n	800d7d2 <__gethex+0x386>
 800d7c4:	f8d9 0000 	ldr.w	r0, [r9]
 800d7c8:	ea4a 0a00 	orr.w	sl, sl, r0
 800d7cc:	f01a 0f01 	tst.w	sl, #1
 800d7d0:	d10e      	bne.n	800d7f0 <__gethex+0x3a4>
 800d7d2:	f047 0710 	orr.w	r7, r7, #16
 800d7d6:	e033      	b.n	800d840 <__gethex+0x3f4>
 800d7d8:	f04f 0a01 	mov.w	sl, #1
 800d7dc:	e7d0      	b.n	800d780 <__gethex+0x334>
 800d7de:	2701      	movs	r7, #1
 800d7e0:	e7e2      	b.n	800d7a8 <__gethex+0x35c>
 800d7e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7e4:	f1c3 0301 	rsb	r3, r3, #1
 800d7e8:	9315      	str	r3, [sp, #84]	; 0x54
 800d7ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d0f0      	beq.n	800d7d2 <__gethex+0x386>
 800d7f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d7f4:	f104 0314 	add.w	r3, r4, #20
 800d7f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d7fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d800:	f04f 0c00 	mov.w	ip, #0
 800d804:	4618      	mov	r0, r3
 800d806:	f853 2b04 	ldr.w	r2, [r3], #4
 800d80a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d80e:	d01c      	beq.n	800d84a <__gethex+0x3fe>
 800d810:	3201      	adds	r2, #1
 800d812:	6002      	str	r2, [r0, #0]
 800d814:	2f02      	cmp	r7, #2
 800d816:	f104 0314 	add.w	r3, r4, #20
 800d81a:	d13f      	bne.n	800d89c <__gethex+0x450>
 800d81c:	f8d8 2000 	ldr.w	r2, [r8]
 800d820:	3a01      	subs	r2, #1
 800d822:	42b2      	cmp	r2, r6
 800d824:	d10a      	bne.n	800d83c <__gethex+0x3f0>
 800d826:	1171      	asrs	r1, r6, #5
 800d828:	2201      	movs	r2, #1
 800d82a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d82e:	f006 061f 	and.w	r6, r6, #31
 800d832:	fa02 f606 	lsl.w	r6, r2, r6
 800d836:	421e      	tst	r6, r3
 800d838:	bf18      	it	ne
 800d83a:	4617      	movne	r7, r2
 800d83c:	f047 0720 	orr.w	r7, r7, #32
 800d840:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d842:	601c      	str	r4, [r3, #0]
 800d844:	9b04      	ldr	r3, [sp, #16]
 800d846:	601d      	str	r5, [r3, #0]
 800d848:	e695      	b.n	800d576 <__gethex+0x12a>
 800d84a:	4299      	cmp	r1, r3
 800d84c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d850:	d8d8      	bhi.n	800d804 <__gethex+0x3b8>
 800d852:	68a3      	ldr	r3, [r4, #8]
 800d854:	459b      	cmp	fp, r3
 800d856:	db19      	blt.n	800d88c <__gethex+0x440>
 800d858:	6861      	ldr	r1, [r4, #4]
 800d85a:	ee18 0a10 	vmov	r0, s16
 800d85e:	3101      	adds	r1, #1
 800d860:	f000 f99e 	bl	800dba0 <_Balloc>
 800d864:	4681      	mov	r9, r0
 800d866:	b918      	cbnz	r0, 800d870 <__gethex+0x424>
 800d868:	4b1a      	ldr	r3, [pc, #104]	; (800d8d4 <__gethex+0x488>)
 800d86a:	4602      	mov	r2, r0
 800d86c:	2184      	movs	r1, #132	; 0x84
 800d86e:	e6a8      	b.n	800d5c2 <__gethex+0x176>
 800d870:	6922      	ldr	r2, [r4, #16]
 800d872:	3202      	adds	r2, #2
 800d874:	f104 010c 	add.w	r1, r4, #12
 800d878:	0092      	lsls	r2, r2, #2
 800d87a:	300c      	adds	r0, #12
 800d87c:	f7fc fe79 	bl	800a572 <memcpy>
 800d880:	4621      	mov	r1, r4
 800d882:	ee18 0a10 	vmov	r0, s16
 800d886:	f000 f9cb 	bl	800dc20 <_Bfree>
 800d88a:	464c      	mov	r4, r9
 800d88c:	6923      	ldr	r3, [r4, #16]
 800d88e:	1c5a      	adds	r2, r3, #1
 800d890:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d894:	6122      	str	r2, [r4, #16]
 800d896:	2201      	movs	r2, #1
 800d898:	615a      	str	r2, [r3, #20]
 800d89a:	e7bb      	b.n	800d814 <__gethex+0x3c8>
 800d89c:	6922      	ldr	r2, [r4, #16]
 800d89e:	455a      	cmp	r2, fp
 800d8a0:	dd0b      	ble.n	800d8ba <__gethex+0x46e>
 800d8a2:	2101      	movs	r1, #1
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f7ff fd69 	bl	800d37c <rshift>
 800d8aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8ae:	3501      	adds	r5, #1
 800d8b0:	42ab      	cmp	r3, r5
 800d8b2:	f6ff aed0 	blt.w	800d656 <__gethex+0x20a>
 800d8b6:	2701      	movs	r7, #1
 800d8b8:	e7c0      	b.n	800d83c <__gethex+0x3f0>
 800d8ba:	f016 061f 	ands.w	r6, r6, #31
 800d8be:	d0fa      	beq.n	800d8b6 <__gethex+0x46a>
 800d8c0:	4453      	add	r3, sl
 800d8c2:	f1c6 0620 	rsb	r6, r6, #32
 800d8c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d8ca:	f000 fa5b 	bl	800dd84 <__hi0bits>
 800d8ce:	42b0      	cmp	r0, r6
 800d8d0:	dbe7      	blt.n	800d8a2 <__gethex+0x456>
 800d8d2:	e7f0      	b.n	800d8b6 <__gethex+0x46a>
 800d8d4:	0800f104 	.word	0x0800f104

0800d8d8 <L_shift>:
 800d8d8:	f1c2 0208 	rsb	r2, r2, #8
 800d8dc:	0092      	lsls	r2, r2, #2
 800d8de:	b570      	push	{r4, r5, r6, lr}
 800d8e0:	f1c2 0620 	rsb	r6, r2, #32
 800d8e4:	6843      	ldr	r3, [r0, #4]
 800d8e6:	6804      	ldr	r4, [r0, #0]
 800d8e8:	fa03 f506 	lsl.w	r5, r3, r6
 800d8ec:	432c      	orrs	r4, r5
 800d8ee:	40d3      	lsrs	r3, r2
 800d8f0:	6004      	str	r4, [r0, #0]
 800d8f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d8f6:	4288      	cmp	r0, r1
 800d8f8:	d3f4      	bcc.n	800d8e4 <L_shift+0xc>
 800d8fa:	bd70      	pop	{r4, r5, r6, pc}

0800d8fc <__match>:
 800d8fc:	b530      	push	{r4, r5, lr}
 800d8fe:	6803      	ldr	r3, [r0, #0]
 800d900:	3301      	adds	r3, #1
 800d902:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d906:	b914      	cbnz	r4, 800d90e <__match+0x12>
 800d908:	6003      	str	r3, [r0, #0]
 800d90a:	2001      	movs	r0, #1
 800d90c:	bd30      	pop	{r4, r5, pc}
 800d90e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d912:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d916:	2d19      	cmp	r5, #25
 800d918:	bf98      	it	ls
 800d91a:	3220      	addls	r2, #32
 800d91c:	42a2      	cmp	r2, r4
 800d91e:	d0f0      	beq.n	800d902 <__match+0x6>
 800d920:	2000      	movs	r0, #0
 800d922:	e7f3      	b.n	800d90c <__match+0x10>

0800d924 <__hexnan>:
 800d924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d928:	680b      	ldr	r3, [r1, #0]
 800d92a:	115e      	asrs	r6, r3, #5
 800d92c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d930:	f013 031f 	ands.w	r3, r3, #31
 800d934:	b087      	sub	sp, #28
 800d936:	bf18      	it	ne
 800d938:	3604      	addne	r6, #4
 800d93a:	2500      	movs	r5, #0
 800d93c:	1f37      	subs	r7, r6, #4
 800d93e:	4690      	mov	r8, r2
 800d940:	6802      	ldr	r2, [r0, #0]
 800d942:	9301      	str	r3, [sp, #4]
 800d944:	4682      	mov	sl, r0
 800d946:	f846 5c04 	str.w	r5, [r6, #-4]
 800d94a:	46b9      	mov	r9, r7
 800d94c:	463c      	mov	r4, r7
 800d94e:	9502      	str	r5, [sp, #8]
 800d950:	46ab      	mov	fp, r5
 800d952:	7851      	ldrb	r1, [r2, #1]
 800d954:	1c53      	adds	r3, r2, #1
 800d956:	9303      	str	r3, [sp, #12]
 800d958:	b341      	cbz	r1, 800d9ac <__hexnan+0x88>
 800d95a:	4608      	mov	r0, r1
 800d95c:	9205      	str	r2, [sp, #20]
 800d95e:	9104      	str	r1, [sp, #16]
 800d960:	f7ff fd5e 	bl	800d420 <__hexdig_fun>
 800d964:	2800      	cmp	r0, #0
 800d966:	d14f      	bne.n	800da08 <__hexnan+0xe4>
 800d968:	9904      	ldr	r1, [sp, #16]
 800d96a:	9a05      	ldr	r2, [sp, #20]
 800d96c:	2920      	cmp	r1, #32
 800d96e:	d818      	bhi.n	800d9a2 <__hexnan+0x7e>
 800d970:	9b02      	ldr	r3, [sp, #8]
 800d972:	459b      	cmp	fp, r3
 800d974:	dd13      	ble.n	800d99e <__hexnan+0x7a>
 800d976:	454c      	cmp	r4, r9
 800d978:	d206      	bcs.n	800d988 <__hexnan+0x64>
 800d97a:	2d07      	cmp	r5, #7
 800d97c:	dc04      	bgt.n	800d988 <__hexnan+0x64>
 800d97e:	462a      	mov	r2, r5
 800d980:	4649      	mov	r1, r9
 800d982:	4620      	mov	r0, r4
 800d984:	f7ff ffa8 	bl	800d8d8 <L_shift>
 800d988:	4544      	cmp	r4, r8
 800d98a:	d950      	bls.n	800da2e <__hexnan+0x10a>
 800d98c:	2300      	movs	r3, #0
 800d98e:	f1a4 0904 	sub.w	r9, r4, #4
 800d992:	f844 3c04 	str.w	r3, [r4, #-4]
 800d996:	f8cd b008 	str.w	fp, [sp, #8]
 800d99a:	464c      	mov	r4, r9
 800d99c:	461d      	mov	r5, r3
 800d99e:	9a03      	ldr	r2, [sp, #12]
 800d9a0:	e7d7      	b.n	800d952 <__hexnan+0x2e>
 800d9a2:	2929      	cmp	r1, #41	; 0x29
 800d9a4:	d156      	bne.n	800da54 <__hexnan+0x130>
 800d9a6:	3202      	adds	r2, #2
 800d9a8:	f8ca 2000 	str.w	r2, [sl]
 800d9ac:	f1bb 0f00 	cmp.w	fp, #0
 800d9b0:	d050      	beq.n	800da54 <__hexnan+0x130>
 800d9b2:	454c      	cmp	r4, r9
 800d9b4:	d206      	bcs.n	800d9c4 <__hexnan+0xa0>
 800d9b6:	2d07      	cmp	r5, #7
 800d9b8:	dc04      	bgt.n	800d9c4 <__hexnan+0xa0>
 800d9ba:	462a      	mov	r2, r5
 800d9bc:	4649      	mov	r1, r9
 800d9be:	4620      	mov	r0, r4
 800d9c0:	f7ff ff8a 	bl	800d8d8 <L_shift>
 800d9c4:	4544      	cmp	r4, r8
 800d9c6:	d934      	bls.n	800da32 <__hexnan+0x10e>
 800d9c8:	f1a8 0204 	sub.w	r2, r8, #4
 800d9cc:	4623      	mov	r3, r4
 800d9ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800d9d2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d9d6:	429f      	cmp	r7, r3
 800d9d8:	d2f9      	bcs.n	800d9ce <__hexnan+0xaa>
 800d9da:	1b3b      	subs	r3, r7, r4
 800d9dc:	f023 0303 	bic.w	r3, r3, #3
 800d9e0:	3304      	adds	r3, #4
 800d9e2:	3401      	adds	r4, #1
 800d9e4:	3e03      	subs	r6, #3
 800d9e6:	42b4      	cmp	r4, r6
 800d9e8:	bf88      	it	hi
 800d9ea:	2304      	movhi	r3, #4
 800d9ec:	4443      	add	r3, r8
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f843 2b04 	str.w	r2, [r3], #4
 800d9f4:	429f      	cmp	r7, r3
 800d9f6:	d2fb      	bcs.n	800d9f0 <__hexnan+0xcc>
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	b91b      	cbnz	r3, 800da04 <__hexnan+0xe0>
 800d9fc:	4547      	cmp	r7, r8
 800d9fe:	d127      	bne.n	800da50 <__hexnan+0x12c>
 800da00:	2301      	movs	r3, #1
 800da02:	603b      	str	r3, [r7, #0]
 800da04:	2005      	movs	r0, #5
 800da06:	e026      	b.n	800da56 <__hexnan+0x132>
 800da08:	3501      	adds	r5, #1
 800da0a:	2d08      	cmp	r5, #8
 800da0c:	f10b 0b01 	add.w	fp, fp, #1
 800da10:	dd06      	ble.n	800da20 <__hexnan+0xfc>
 800da12:	4544      	cmp	r4, r8
 800da14:	d9c3      	bls.n	800d99e <__hexnan+0x7a>
 800da16:	2300      	movs	r3, #0
 800da18:	f844 3c04 	str.w	r3, [r4, #-4]
 800da1c:	2501      	movs	r5, #1
 800da1e:	3c04      	subs	r4, #4
 800da20:	6822      	ldr	r2, [r4, #0]
 800da22:	f000 000f 	and.w	r0, r0, #15
 800da26:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800da2a:	6022      	str	r2, [r4, #0]
 800da2c:	e7b7      	b.n	800d99e <__hexnan+0x7a>
 800da2e:	2508      	movs	r5, #8
 800da30:	e7b5      	b.n	800d99e <__hexnan+0x7a>
 800da32:	9b01      	ldr	r3, [sp, #4]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d0df      	beq.n	800d9f8 <__hexnan+0xd4>
 800da38:	f04f 32ff 	mov.w	r2, #4294967295
 800da3c:	f1c3 0320 	rsb	r3, r3, #32
 800da40:	fa22 f303 	lsr.w	r3, r2, r3
 800da44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800da48:	401a      	ands	r2, r3
 800da4a:	f846 2c04 	str.w	r2, [r6, #-4]
 800da4e:	e7d3      	b.n	800d9f8 <__hexnan+0xd4>
 800da50:	3f04      	subs	r7, #4
 800da52:	e7d1      	b.n	800d9f8 <__hexnan+0xd4>
 800da54:	2004      	movs	r0, #4
 800da56:	b007      	add	sp, #28
 800da58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da5c <_localeconv_r>:
 800da5c:	4800      	ldr	r0, [pc, #0]	; (800da60 <_localeconv_r+0x4>)
 800da5e:	4770      	bx	lr
 800da60:	200001d0 	.word	0x200001d0

0800da64 <_lseek_r>:
 800da64:	b538      	push	{r3, r4, r5, lr}
 800da66:	4d07      	ldr	r5, [pc, #28]	; (800da84 <_lseek_r+0x20>)
 800da68:	4604      	mov	r4, r0
 800da6a:	4608      	mov	r0, r1
 800da6c:	4611      	mov	r1, r2
 800da6e:	2200      	movs	r2, #0
 800da70:	602a      	str	r2, [r5, #0]
 800da72:	461a      	mov	r2, r3
 800da74:	f7f3 fde4 	bl	8001640 <_lseek>
 800da78:	1c43      	adds	r3, r0, #1
 800da7a:	d102      	bne.n	800da82 <_lseek_r+0x1e>
 800da7c:	682b      	ldr	r3, [r5, #0]
 800da7e:	b103      	cbz	r3, 800da82 <_lseek_r+0x1e>
 800da80:	6023      	str	r3, [r4, #0]
 800da82:	bd38      	pop	{r3, r4, r5, pc}
 800da84:	200083f0 	.word	0x200083f0

0800da88 <__swhatbuf_r>:
 800da88:	b570      	push	{r4, r5, r6, lr}
 800da8a:	460e      	mov	r6, r1
 800da8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da90:	2900      	cmp	r1, #0
 800da92:	b096      	sub	sp, #88	; 0x58
 800da94:	4614      	mov	r4, r2
 800da96:	461d      	mov	r5, r3
 800da98:	da08      	bge.n	800daac <__swhatbuf_r+0x24>
 800da9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800da9e:	2200      	movs	r2, #0
 800daa0:	602a      	str	r2, [r5, #0]
 800daa2:	061a      	lsls	r2, r3, #24
 800daa4:	d410      	bmi.n	800dac8 <__swhatbuf_r+0x40>
 800daa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daaa:	e00e      	b.n	800daca <__swhatbuf_r+0x42>
 800daac:	466a      	mov	r2, sp
 800daae:	f001 f893 	bl	800ebd8 <_fstat_r>
 800dab2:	2800      	cmp	r0, #0
 800dab4:	dbf1      	blt.n	800da9a <__swhatbuf_r+0x12>
 800dab6:	9a01      	ldr	r2, [sp, #4]
 800dab8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dabc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dac0:	425a      	negs	r2, r3
 800dac2:	415a      	adcs	r2, r3
 800dac4:	602a      	str	r2, [r5, #0]
 800dac6:	e7ee      	b.n	800daa6 <__swhatbuf_r+0x1e>
 800dac8:	2340      	movs	r3, #64	; 0x40
 800daca:	2000      	movs	r0, #0
 800dacc:	6023      	str	r3, [r4, #0]
 800dace:	b016      	add	sp, #88	; 0x58
 800dad0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dad4 <__smakebuf_r>:
 800dad4:	898b      	ldrh	r3, [r1, #12]
 800dad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dad8:	079d      	lsls	r5, r3, #30
 800dada:	4606      	mov	r6, r0
 800dadc:	460c      	mov	r4, r1
 800dade:	d507      	bpl.n	800daf0 <__smakebuf_r+0x1c>
 800dae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dae4:	6023      	str	r3, [r4, #0]
 800dae6:	6123      	str	r3, [r4, #16]
 800dae8:	2301      	movs	r3, #1
 800daea:	6163      	str	r3, [r4, #20]
 800daec:	b002      	add	sp, #8
 800daee:	bd70      	pop	{r4, r5, r6, pc}
 800daf0:	ab01      	add	r3, sp, #4
 800daf2:	466a      	mov	r2, sp
 800daf4:	f7ff ffc8 	bl	800da88 <__swhatbuf_r>
 800daf8:	9900      	ldr	r1, [sp, #0]
 800dafa:	4605      	mov	r5, r0
 800dafc:	4630      	mov	r0, r6
 800dafe:	f7fc fd6f 	bl	800a5e0 <_malloc_r>
 800db02:	b948      	cbnz	r0, 800db18 <__smakebuf_r+0x44>
 800db04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db08:	059a      	lsls	r2, r3, #22
 800db0a:	d4ef      	bmi.n	800daec <__smakebuf_r+0x18>
 800db0c:	f023 0303 	bic.w	r3, r3, #3
 800db10:	f043 0302 	orr.w	r3, r3, #2
 800db14:	81a3      	strh	r3, [r4, #12]
 800db16:	e7e3      	b.n	800dae0 <__smakebuf_r+0xc>
 800db18:	4b0d      	ldr	r3, [pc, #52]	; (800db50 <__smakebuf_r+0x7c>)
 800db1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	6020      	str	r0, [r4, #0]
 800db20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db24:	81a3      	strh	r3, [r4, #12]
 800db26:	9b00      	ldr	r3, [sp, #0]
 800db28:	6163      	str	r3, [r4, #20]
 800db2a:	9b01      	ldr	r3, [sp, #4]
 800db2c:	6120      	str	r0, [r4, #16]
 800db2e:	b15b      	cbz	r3, 800db48 <__smakebuf_r+0x74>
 800db30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db34:	4630      	mov	r0, r6
 800db36:	f001 f861 	bl	800ebfc <_isatty_r>
 800db3a:	b128      	cbz	r0, 800db48 <__smakebuf_r+0x74>
 800db3c:	89a3      	ldrh	r3, [r4, #12]
 800db3e:	f023 0303 	bic.w	r3, r3, #3
 800db42:	f043 0301 	orr.w	r3, r3, #1
 800db46:	81a3      	strh	r3, [r4, #12]
 800db48:	89a0      	ldrh	r0, [r4, #12]
 800db4a:	4305      	orrs	r5, r0
 800db4c:	81a5      	strh	r5, [r4, #12]
 800db4e:	e7cd      	b.n	800daec <__smakebuf_r+0x18>
 800db50:	0800a381 	.word	0x0800a381

0800db54 <malloc>:
 800db54:	4b02      	ldr	r3, [pc, #8]	; (800db60 <malloc+0xc>)
 800db56:	4601      	mov	r1, r0
 800db58:	6818      	ldr	r0, [r3, #0]
 800db5a:	f7fc bd41 	b.w	800a5e0 <_malloc_r>
 800db5e:	bf00      	nop
 800db60:	20000078 	.word	0x20000078

0800db64 <__ascii_mbtowc>:
 800db64:	b082      	sub	sp, #8
 800db66:	b901      	cbnz	r1, 800db6a <__ascii_mbtowc+0x6>
 800db68:	a901      	add	r1, sp, #4
 800db6a:	b142      	cbz	r2, 800db7e <__ascii_mbtowc+0x1a>
 800db6c:	b14b      	cbz	r3, 800db82 <__ascii_mbtowc+0x1e>
 800db6e:	7813      	ldrb	r3, [r2, #0]
 800db70:	600b      	str	r3, [r1, #0]
 800db72:	7812      	ldrb	r2, [r2, #0]
 800db74:	1e10      	subs	r0, r2, #0
 800db76:	bf18      	it	ne
 800db78:	2001      	movne	r0, #1
 800db7a:	b002      	add	sp, #8
 800db7c:	4770      	bx	lr
 800db7e:	4610      	mov	r0, r2
 800db80:	e7fb      	b.n	800db7a <__ascii_mbtowc+0x16>
 800db82:	f06f 0001 	mvn.w	r0, #1
 800db86:	e7f8      	b.n	800db7a <__ascii_mbtowc+0x16>

0800db88 <__malloc_lock>:
 800db88:	4801      	ldr	r0, [pc, #4]	; (800db90 <__malloc_lock+0x8>)
 800db8a:	f7fc bcf0 	b.w	800a56e <__retarget_lock_acquire_recursive>
 800db8e:	bf00      	nop
 800db90:	200083e4 	.word	0x200083e4

0800db94 <__malloc_unlock>:
 800db94:	4801      	ldr	r0, [pc, #4]	; (800db9c <__malloc_unlock+0x8>)
 800db96:	f7fc bceb 	b.w	800a570 <__retarget_lock_release_recursive>
 800db9a:	bf00      	nop
 800db9c:	200083e4 	.word	0x200083e4

0800dba0 <_Balloc>:
 800dba0:	b570      	push	{r4, r5, r6, lr}
 800dba2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dba4:	4604      	mov	r4, r0
 800dba6:	460d      	mov	r5, r1
 800dba8:	b976      	cbnz	r6, 800dbc8 <_Balloc+0x28>
 800dbaa:	2010      	movs	r0, #16
 800dbac:	f7ff ffd2 	bl	800db54 <malloc>
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	6260      	str	r0, [r4, #36]	; 0x24
 800dbb4:	b920      	cbnz	r0, 800dbc0 <_Balloc+0x20>
 800dbb6:	4b18      	ldr	r3, [pc, #96]	; (800dc18 <_Balloc+0x78>)
 800dbb8:	4818      	ldr	r0, [pc, #96]	; (800dc1c <_Balloc+0x7c>)
 800dbba:	2166      	movs	r1, #102	; 0x66
 800dbbc:	f7fe fc62 	bl	800c484 <__assert_func>
 800dbc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbc4:	6006      	str	r6, [r0, #0]
 800dbc6:	60c6      	str	r6, [r0, #12]
 800dbc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dbca:	68f3      	ldr	r3, [r6, #12]
 800dbcc:	b183      	cbz	r3, 800dbf0 <_Balloc+0x50>
 800dbce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dbd6:	b9b8      	cbnz	r0, 800dc08 <_Balloc+0x68>
 800dbd8:	2101      	movs	r1, #1
 800dbda:	fa01 f605 	lsl.w	r6, r1, r5
 800dbde:	1d72      	adds	r2, r6, #5
 800dbe0:	0092      	lsls	r2, r2, #2
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	f000 fc9d 	bl	800e522 <_calloc_r>
 800dbe8:	b160      	cbz	r0, 800dc04 <_Balloc+0x64>
 800dbea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dbee:	e00e      	b.n	800dc0e <_Balloc+0x6e>
 800dbf0:	2221      	movs	r2, #33	; 0x21
 800dbf2:	2104      	movs	r1, #4
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f000 fc94 	bl	800e522 <_calloc_r>
 800dbfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbfc:	60f0      	str	r0, [r6, #12]
 800dbfe:	68db      	ldr	r3, [r3, #12]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d1e4      	bne.n	800dbce <_Balloc+0x2e>
 800dc04:	2000      	movs	r0, #0
 800dc06:	bd70      	pop	{r4, r5, r6, pc}
 800dc08:	6802      	ldr	r2, [r0, #0]
 800dc0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc14:	e7f7      	b.n	800dc06 <_Balloc+0x66>
 800dc16:	bf00      	nop
 800dc18:	0800f092 	.word	0x0800f092
 800dc1c:	0800f190 	.word	0x0800f190

0800dc20 <_Bfree>:
 800dc20:	b570      	push	{r4, r5, r6, lr}
 800dc22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dc24:	4605      	mov	r5, r0
 800dc26:	460c      	mov	r4, r1
 800dc28:	b976      	cbnz	r6, 800dc48 <_Bfree+0x28>
 800dc2a:	2010      	movs	r0, #16
 800dc2c:	f7ff ff92 	bl	800db54 <malloc>
 800dc30:	4602      	mov	r2, r0
 800dc32:	6268      	str	r0, [r5, #36]	; 0x24
 800dc34:	b920      	cbnz	r0, 800dc40 <_Bfree+0x20>
 800dc36:	4b09      	ldr	r3, [pc, #36]	; (800dc5c <_Bfree+0x3c>)
 800dc38:	4809      	ldr	r0, [pc, #36]	; (800dc60 <_Bfree+0x40>)
 800dc3a:	218a      	movs	r1, #138	; 0x8a
 800dc3c:	f7fe fc22 	bl	800c484 <__assert_func>
 800dc40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc44:	6006      	str	r6, [r0, #0]
 800dc46:	60c6      	str	r6, [r0, #12]
 800dc48:	b13c      	cbz	r4, 800dc5a <_Bfree+0x3a>
 800dc4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dc4c:	6862      	ldr	r2, [r4, #4]
 800dc4e:	68db      	ldr	r3, [r3, #12]
 800dc50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc54:	6021      	str	r1, [r4, #0]
 800dc56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc5a:	bd70      	pop	{r4, r5, r6, pc}
 800dc5c:	0800f092 	.word	0x0800f092
 800dc60:	0800f190 	.word	0x0800f190

0800dc64 <__multadd>:
 800dc64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc68:	690d      	ldr	r5, [r1, #16]
 800dc6a:	4607      	mov	r7, r0
 800dc6c:	460c      	mov	r4, r1
 800dc6e:	461e      	mov	r6, r3
 800dc70:	f101 0c14 	add.w	ip, r1, #20
 800dc74:	2000      	movs	r0, #0
 800dc76:	f8dc 3000 	ldr.w	r3, [ip]
 800dc7a:	b299      	uxth	r1, r3
 800dc7c:	fb02 6101 	mla	r1, r2, r1, r6
 800dc80:	0c1e      	lsrs	r6, r3, #16
 800dc82:	0c0b      	lsrs	r3, r1, #16
 800dc84:	fb02 3306 	mla	r3, r2, r6, r3
 800dc88:	b289      	uxth	r1, r1
 800dc8a:	3001      	adds	r0, #1
 800dc8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc90:	4285      	cmp	r5, r0
 800dc92:	f84c 1b04 	str.w	r1, [ip], #4
 800dc96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dc9a:	dcec      	bgt.n	800dc76 <__multadd+0x12>
 800dc9c:	b30e      	cbz	r6, 800dce2 <__multadd+0x7e>
 800dc9e:	68a3      	ldr	r3, [r4, #8]
 800dca0:	42ab      	cmp	r3, r5
 800dca2:	dc19      	bgt.n	800dcd8 <__multadd+0x74>
 800dca4:	6861      	ldr	r1, [r4, #4]
 800dca6:	4638      	mov	r0, r7
 800dca8:	3101      	adds	r1, #1
 800dcaa:	f7ff ff79 	bl	800dba0 <_Balloc>
 800dcae:	4680      	mov	r8, r0
 800dcb0:	b928      	cbnz	r0, 800dcbe <__multadd+0x5a>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	4b0c      	ldr	r3, [pc, #48]	; (800dce8 <__multadd+0x84>)
 800dcb6:	480d      	ldr	r0, [pc, #52]	; (800dcec <__multadd+0x88>)
 800dcb8:	21b5      	movs	r1, #181	; 0xb5
 800dcba:	f7fe fbe3 	bl	800c484 <__assert_func>
 800dcbe:	6922      	ldr	r2, [r4, #16]
 800dcc0:	3202      	adds	r2, #2
 800dcc2:	f104 010c 	add.w	r1, r4, #12
 800dcc6:	0092      	lsls	r2, r2, #2
 800dcc8:	300c      	adds	r0, #12
 800dcca:	f7fc fc52 	bl	800a572 <memcpy>
 800dcce:	4621      	mov	r1, r4
 800dcd0:	4638      	mov	r0, r7
 800dcd2:	f7ff ffa5 	bl	800dc20 <_Bfree>
 800dcd6:	4644      	mov	r4, r8
 800dcd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dcdc:	3501      	adds	r5, #1
 800dcde:	615e      	str	r6, [r3, #20]
 800dce0:	6125      	str	r5, [r4, #16]
 800dce2:	4620      	mov	r0, r4
 800dce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dce8:	0800f104 	.word	0x0800f104
 800dcec:	0800f190 	.word	0x0800f190

0800dcf0 <__s2b>:
 800dcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcf4:	460c      	mov	r4, r1
 800dcf6:	4615      	mov	r5, r2
 800dcf8:	461f      	mov	r7, r3
 800dcfa:	2209      	movs	r2, #9
 800dcfc:	3308      	adds	r3, #8
 800dcfe:	4606      	mov	r6, r0
 800dd00:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd04:	2100      	movs	r1, #0
 800dd06:	2201      	movs	r2, #1
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	db09      	blt.n	800dd20 <__s2b+0x30>
 800dd0c:	4630      	mov	r0, r6
 800dd0e:	f7ff ff47 	bl	800dba0 <_Balloc>
 800dd12:	b940      	cbnz	r0, 800dd26 <__s2b+0x36>
 800dd14:	4602      	mov	r2, r0
 800dd16:	4b19      	ldr	r3, [pc, #100]	; (800dd7c <__s2b+0x8c>)
 800dd18:	4819      	ldr	r0, [pc, #100]	; (800dd80 <__s2b+0x90>)
 800dd1a:	21ce      	movs	r1, #206	; 0xce
 800dd1c:	f7fe fbb2 	bl	800c484 <__assert_func>
 800dd20:	0052      	lsls	r2, r2, #1
 800dd22:	3101      	adds	r1, #1
 800dd24:	e7f0      	b.n	800dd08 <__s2b+0x18>
 800dd26:	9b08      	ldr	r3, [sp, #32]
 800dd28:	6143      	str	r3, [r0, #20]
 800dd2a:	2d09      	cmp	r5, #9
 800dd2c:	f04f 0301 	mov.w	r3, #1
 800dd30:	6103      	str	r3, [r0, #16]
 800dd32:	dd16      	ble.n	800dd62 <__s2b+0x72>
 800dd34:	f104 0909 	add.w	r9, r4, #9
 800dd38:	46c8      	mov	r8, r9
 800dd3a:	442c      	add	r4, r5
 800dd3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dd40:	4601      	mov	r1, r0
 800dd42:	3b30      	subs	r3, #48	; 0x30
 800dd44:	220a      	movs	r2, #10
 800dd46:	4630      	mov	r0, r6
 800dd48:	f7ff ff8c 	bl	800dc64 <__multadd>
 800dd4c:	45a0      	cmp	r8, r4
 800dd4e:	d1f5      	bne.n	800dd3c <__s2b+0x4c>
 800dd50:	f1a5 0408 	sub.w	r4, r5, #8
 800dd54:	444c      	add	r4, r9
 800dd56:	1b2d      	subs	r5, r5, r4
 800dd58:	1963      	adds	r3, r4, r5
 800dd5a:	42bb      	cmp	r3, r7
 800dd5c:	db04      	blt.n	800dd68 <__s2b+0x78>
 800dd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd62:	340a      	adds	r4, #10
 800dd64:	2509      	movs	r5, #9
 800dd66:	e7f6      	b.n	800dd56 <__s2b+0x66>
 800dd68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd6c:	4601      	mov	r1, r0
 800dd6e:	3b30      	subs	r3, #48	; 0x30
 800dd70:	220a      	movs	r2, #10
 800dd72:	4630      	mov	r0, r6
 800dd74:	f7ff ff76 	bl	800dc64 <__multadd>
 800dd78:	e7ee      	b.n	800dd58 <__s2b+0x68>
 800dd7a:	bf00      	nop
 800dd7c:	0800f104 	.word	0x0800f104
 800dd80:	0800f190 	.word	0x0800f190

0800dd84 <__hi0bits>:
 800dd84:	0c03      	lsrs	r3, r0, #16
 800dd86:	041b      	lsls	r3, r3, #16
 800dd88:	b9d3      	cbnz	r3, 800ddc0 <__hi0bits+0x3c>
 800dd8a:	0400      	lsls	r0, r0, #16
 800dd8c:	2310      	movs	r3, #16
 800dd8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dd92:	bf04      	itt	eq
 800dd94:	0200      	lsleq	r0, r0, #8
 800dd96:	3308      	addeq	r3, #8
 800dd98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dd9c:	bf04      	itt	eq
 800dd9e:	0100      	lsleq	r0, r0, #4
 800dda0:	3304      	addeq	r3, #4
 800dda2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dda6:	bf04      	itt	eq
 800dda8:	0080      	lsleq	r0, r0, #2
 800ddaa:	3302      	addeq	r3, #2
 800ddac:	2800      	cmp	r0, #0
 800ddae:	db05      	blt.n	800ddbc <__hi0bits+0x38>
 800ddb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ddb4:	f103 0301 	add.w	r3, r3, #1
 800ddb8:	bf08      	it	eq
 800ddba:	2320      	moveq	r3, #32
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	4770      	bx	lr
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	e7e4      	b.n	800dd8e <__hi0bits+0xa>

0800ddc4 <__lo0bits>:
 800ddc4:	6803      	ldr	r3, [r0, #0]
 800ddc6:	f013 0207 	ands.w	r2, r3, #7
 800ddca:	4601      	mov	r1, r0
 800ddcc:	d00b      	beq.n	800dde6 <__lo0bits+0x22>
 800ddce:	07da      	lsls	r2, r3, #31
 800ddd0:	d423      	bmi.n	800de1a <__lo0bits+0x56>
 800ddd2:	0798      	lsls	r0, r3, #30
 800ddd4:	bf49      	itett	mi
 800ddd6:	085b      	lsrmi	r3, r3, #1
 800ddd8:	089b      	lsrpl	r3, r3, #2
 800ddda:	2001      	movmi	r0, #1
 800dddc:	600b      	strmi	r3, [r1, #0]
 800ddde:	bf5c      	itt	pl
 800dde0:	600b      	strpl	r3, [r1, #0]
 800dde2:	2002      	movpl	r0, #2
 800dde4:	4770      	bx	lr
 800dde6:	b298      	uxth	r0, r3
 800dde8:	b9a8      	cbnz	r0, 800de16 <__lo0bits+0x52>
 800ddea:	0c1b      	lsrs	r3, r3, #16
 800ddec:	2010      	movs	r0, #16
 800ddee:	b2da      	uxtb	r2, r3
 800ddf0:	b90a      	cbnz	r2, 800ddf6 <__lo0bits+0x32>
 800ddf2:	3008      	adds	r0, #8
 800ddf4:	0a1b      	lsrs	r3, r3, #8
 800ddf6:	071a      	lsls	r2, r3, #28
 800ddf8:	bf04      	itt	eq
 800ddfa:	091b      	lsreq	r3, r3, #4
 800ddfc:	3004      	addeq	r0, #4
 800ddfe:	079a      	lsls	r2, r3, #30
 800de00:	bf04      	itt	eq
 800de02:	089b      	lsreq	r3, r3, #2
 800de04:	3002      	addeq	r0, #2
 800de06:	07da      	lsls	r2, r3, #31
 800de08:	d403      	bmi.n	800de12 <__lo0bits+0x4e>
 800de0a:	085b      	lsrs	r3, r3, #1
 800de0c:	f100 0001 	add.w	r0, r0, #1
 800de10:	d005      	beq.n	800de1e <__lo0bits+0x5a>
 800de12:	600b      	str	r3, [r1, #0]
 800de14:	4770      	bx	lr
 800de16:	4610      	mov	r0, r2
 800de18:	e7e9      	b.n	800ddee <__lo0bits+0x2a>
 800de1a:	2000      	movs	r0, #0
 800de1c:	4770      	bx	lr
 800de1e:	2020      	movs	r0, #32
 800de20:	4770      	bx	lr
	...

0800de24 <__i2b>:
 800de24:	b510      	push	{r4, lr}
 800de26:	460c      	mov	r4, r1
 800de28:	2101      	movs	r1, #1
 800de2a:	f7ff feb9 	bl	800dba0 <_Balloc>
 800de2e:	4602      	mov	r2, r0
 800de30:	b928      	cbnz	r0, 800de3e <__i2b+0x1a>
 800de32:	4b05      	ldr	r3, [pc, #20]	; (800de48 <__i2b+0x24>)
 800de34:	4805      	ldr	r0, [pc, #20]	; (800de4c <__i2b+0x28>)
 800de36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800de3a:	f7fe fb23 	bl	800c484 <__assert_func>
 800de3e:	2301      	movs	r3, #1
 800de40:	6144      	str	r4, [r0, #20]
 800de42:	6103      	str	r3, [r0, #16]
 800de44:	bd10      	pop	{r4, pc}
 800de46:	bf00      	nop
 800de48:	0800f104 	.word	0x0800f104
 800de4c:	0800f190 	.word	0x0800f190

0800de50 <__multiply>:
 800de50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de54:	4691      	mov	r9, r2
 800de56:	690a      	ldr	r2, [r1, #16]
 800de58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	bfb8      	it	lt
 800de60:	460b      	movlt	r3, r1
 800de62:	460c      	mov	r4, r1
 800de64:	bfbc      	itt	lt
 800de66:	464c      	movlt	r4, r9
 800de68:	4699      	movlt	r9, r3
 800de6a:	6927      	ldr	r7, [r4, #16]
 800de6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800de70:	68a3      	ldr	r3, [r4, #8]
 800de72:	6861      	ldr	r1, [r4, #4]
 800de74:	eb07 060a 	add.w	r6, r7, sl
 800de78:	42b3      	cmp	r3, r6
 800de7a:	b085      	sub	sp, #20
 800de7c:	bfb8      	it	lt
 800de7e:	3101      	addlt	r1, #1
 800de80:	f7ff fe8e 	bl	800dba0 <_Balloc>
 800de84:	b930      	cbnz	r0, 800de94 <__multiply+0x44>
 800de86:	4602      	mov	r2, r0
 800de88:	4b44      	ldr	r3, [pc, #272]	; (800df9c <__multiply+0x14c>)
 800de8a:	4845      	ldr	r0, [pc, #276]	; (800dfa0 <__multiply+0x150>)
 800de8c:	f240 115d 	movw	r1, #349	; 0x15d
 800de90:	f7fe faf8 	bl	800c484 <__assert_func>
 800de94:	f100 0514 	add.w	r5, r0, #20
 800de98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de9c:	462b      	mov	r3, r5
 800de9e:	2200      	movs	r2, #0
 800dea0:	4543      	cmp	r3, r8
 800dea2:	d321      	bcc.n	800dee8 <__multiply+0x98>
 800dea4:	f104 0314 	add.w	r3, r4, #20
 800dea8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800deac:	f109 0314 	add.w	r3, r9, #20
 800deb0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800deb4:	9202      	str	r2, [sp, #8]
 800deb6:	1b3a      	subs	r2, r7, r4
 800deb8:	3a15      	subs	r2, #21
 800deba:	f022 0203 	bic.w	r2, r2, #3
 800debe:	3204      	adds	r2, #4
 800dec0:	f104 0115 	add.w	r1, r4, #21
 800dec4:	428f      	cmp	r7, r1
 800dec6:	bf38      	it	cc
 800dec8:	2204      	movcc	r2, #4
 800deca:	9201      	str	r2, [sp, #4]
 800decc:	9a02      	ldr	r2, [sp, #8]
 800dece:	9303      	str	r3, [sp, #12]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d80c      	bhi.n	800deee <__multiply+0x9e>
 800ded4:	2e00      	cmp	r6, #0
 800ded6:	dd03      	ble.n	800dee0 <__multiply+0x90>
 800ded8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d05a      	beq.n	800df96 <__multiply+0x146>
 800dee0:	6106      	str	r6, [r0, #16]
 800dee2:	b005      	add	sp, #20
 800dee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dee8:	f843 2b04 	str.w	r2, [r3], #4
 800deec:	e7d8      	b.n	800dea0 <__multiply+0x50>
 800deee:	f8b3 a000 	ldrh.w	sl, [r3]
 800def2:	f1ba 0f00 	cmp.w	sl, #0
 800def6:	d024      	beq.n	800df42 <__multiply+0xf2>
 800def8:	f104 0e14 	add.w	lr, r4, #20
 800defc:	46a9      	mov	r9, r5
 800defe:	f04f 0c00 	mov.w	ip, #0
 800df02:	f85e 2b04 	ldr.w	r2, [lr], #4
 800df06:	f8d9 1000 	ldr.w	r1, [r9]
 800df0a:	fa1f fb82 	uxth.w	fp, r2
 800df0e:	b289      	uxth	r1, r1
 800df10:	fb0a 110b 	mla	r1, sl, fp, r1
 800df14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800df18:	f8d9 2000 	ldr.w	r2, [r9]
 800df1c:	4461      	add	r1, ip
 800df1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df22:	fb0a c20b 	mla	r2, sl, fp, ip
 800df26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df2a:	b289      	uxth	r1, r1
 800df2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df30:	4577      	cmp	r7, lr
 800df32:	f849 1b04 	str.w	r1, [r9], #4
 800df36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df3a:	d8e2      	bhi.n	800df02 <__multiply+0xb2>
 800df3c:	9a01      	ldr	r2, [sp, #4]
 800df3e:	f845 c002 	str.w	ip, [r5, r2]
 800df42:	9a03      	ldr	r2, [sp, #12]
 800df44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800df48:	3304      	adds	r3, #4
 800df4a:	f1b9 0f00 	cmp.w	r9, #0
 800df4e:	d020      	beq.n	800df92 <__multiply+0x142>
 800df50:	6829      	ldr	r1, [r5, #0]
 800df52:	f104 0c14 	add.w	ip, r4, #20
 800df56:	46ae      	mov	lr, r5
 800df58:	f04f 0a00 	mov.w	sl, #0
 800df5c:	f8bc b000 	ldrh.w	fp, [ip]
 800df60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800df64:	fb09 220b 	mla	r2, r9, fp, r2
 800df68:	4492      	add	sl, r2
 800df6a:	b289      	uxth	r1, r1
 800df6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800df70:	f84e 1b04 	str.w	r1, [lr], #4
 800df74:	f85c 2b04 	ldr.w	r2, [ip], #4
 800df78:	f8be 1000 	ldrh.w	r1, [lr]
 800df7c:	0c12      	lsrs	r2, r2, #16
 800df7e:	fb09 1102 	mla	r1, r9, r2, r1
 800df82:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800df86:	4567      	cmp	r7, ip
 800df88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800df8c:	d8e6      	bhi.n	800df5c <__multiply+0x10c>
 800df8e:	9a01      	ldr	r2, [sp, #4]
 800df90:	50a9      	str	r1, [r5, r2]
 800df92:	3504      	adds	r5, #4
 800df94:	e79a      	b.n	800decc <__multiply+0x7c>
 800df96:	3e01      	subs	r6, #1
 800df98:	e79c      	b.n	800ded4 <__multiply+0x84>
 800df9a:	bf00      	nop
 800df9c:	0800f104 	.word	0x0800f104
 800dfa0:	0800f190 	.word	0x0800f190

0800dfa4 <__pow5mult>:
 800dfa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfa8:	4615      	mov	r5, r2
 800dfaa:	f012 0203 	ands.w	r2, r2, #3
 800dfae:	4606      	mov	r6, r0
 800dfb0:	460f      	mov	r7, r1
 800dfb2:	d007      	beq.n	800dfc4 <__pow5mult+0x20>
 800dfb4:	4c25      	ldr	r4, [pc, #148]	; (800e04c <__pow5mult+0xa8>)
 800dfb6:	3a01      	subs	r2, #1
 800dfb8:	2300      	movs	r3, #0
 800dfba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dfbe:	f7ff fe51 	bl	800dc64 <__multadd>
 800dfc2:	4607      	mov	r7, r0
 800dfc4:	10ad      	asrs	r5, r5, #2
 800dfc6:	d03d      	beq.n	800e044 <__pow5mult+0xa0>
 800dfc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dfca:	b97c      	cbnz	r4, 800dfec <__pow5mult+0x48>
 800dfcc:	2010      	movs	r0, #16
 800dfce:	f7ff fdc1 	bl	800db54 <malloc>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	6270      	str	r0, [r6, #36]	; 0x24
 800dfd6:	b928      	cbnz	r0, 800dfe4 <__pow5mult+0x40>
 800dfd8:	4b1d      	ldr	r3, [pc, #116]	; (800e050 <__pow5mult+0xac>)
 800dfda:	481e      	ldr	r0, [pc, #120]	; (800e054 <__pow5mult+0xb0>)
 800dfdc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dfe0:	f7fe fa50 	bl	800c484 <__assert_func>
 800dfe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dfe8:	6004      	str	r4, [r0, #0]
 800dfea:	60c4      	str	r4, [r0, #12]
 800dfec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dff0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dff4:	b94c      	cbnz	r4, 800e00a <__pow5mult+0x66>
 800dff6:	f240 2171 	movw	r1, #625	; 0x271
 800dffa:	4630      	mov	r0, r6
 800dffc:	f7ff ff12 	bl	800de24 <__i2b>
 800e000:	2300      	movs	r3, #0
 800e002:	f8c8 0008 	str.w	r0, [r8, #8]
 800e006:	4604      	mov	r4, r0
 800e008:	6003      	str	r3, [r0, #0]
 800e00a:	f04f 0900 	mov.w	r9, #0
 800e00e:	07eb      	lsls	r3, r5, #31
 800e010:	d50a      	bpl.n	800e028 <__pow5mult+0x84>
 800e012:	4639      	mov	r1, r7
 800e014:	4622      	mov	r2, r4
 800e016:	4630      	mov	r0, r6
 800e018:	f7ff ff1a 	bl	800de50 <__multiply>
 800e01c:	4639      	mov	r1, r7
 800e01e:	4680      	mov	r8, r0
 800e020:	4630      	mov	r0, r6
 800e022:	f7ff fdfd 	bl	800dc20 <_Bfree>
 800e026:	4647      	mov	r7, r8
 800e028:	106d      	asrs	r5, r5, #1
 800e02a:	d00b      	beq.n	800e044 <__pow5mult+0xa0>
 800e02c:	6820      	ldr	r0, [r4, #0]
 800e02e:	b938      	cbnz	r0, 800e040 <__pow5mult+0x9c>
 800e030:	4622      	mov	r2, r4
 800e032:	4621      	mov	r1, r4
 800e034:	4630      	mov	r0, r6
 800e036:	f7ff ff0b 	bl	800de50 <__multiply>
 800e03a:	6020      	str	r0, [r4, #0]
 800e03c:	f8c0 9000 	str.w	r9, [r0]
 800e040:	4604      	mov	r4, r0
 800e042:	e7e4      	b.n	800e00e <__pow5mult+0x6a>
 800e044:	4638      	mov	r0, r7
 800e046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e04a:	bf00      	nop
 800e04c:	0800f2e0 	.word	0x0800f2e0
 800e050:	0800f092 	.word	0x0800f092
 800e054:	0800f190 	.word	0x0800f190

0800e058 <__lshift>:
 800e058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e05c:	460c      	mov	r4, r1
 800e05e:	6849      	ldr	r1, [r1, #4]
 800e060:	6923      	ldr	r3, [r4, #16]
 800e062:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e066:	68a3      	ldr	r3, [r4, #8]
 800e068:	4607      	mov	r7, r0
 800e06a:	4691      	mov	r9, r2
 800e06c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e070:	f108 0601 	add.w	r6, r8, #1
 800e074:	42b3      	cmp	r3, r6
 800e076:	db0b      	blt.n	800e090 <__lshift+0x38>
 800e078:	4638      	mov	r0, r7
 800e07a:	f7ff fd91 	bl	800dba0 <_Balloc>
 800e07e:	4605      	mov	r5, r0
 800e080:	b948      	cbnz	r0, 800e096 <__lshift+0x3e>
 800e082:	4602      	mov	r2, r0
 800e084:	4b2a      	ldr	r3, [pc, #168]	; (800e130 <__lshift+0xd8>)
 800e086:	482b      	ldr	r0, [pc, #172]	; (800e134 <__lshift+0xdc>)
 800e088:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e08c:	f7fe f9fa 	bl	800c484 <__assert_func>
 800e090:	3101      	adds	r1, #1
 800e092:	005b      	lsls	r3, r3, #1
 800e094:	e7ee      	b.n	800e074 <__lshift+0x1c>
 800e096:	2300      	movs	r3, #0
 800e098:	f100 0114 	add.w	r1, r0, #20
 800e09c:	f100 0210 	add.w	r2, r0, #16
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	4553      	cmp	r3, sl
 800e0a4:	db37      	blt.n	800e116 <__lshift+0xbe>
 800e0a6:	6920      	ldr	r0, [r4, #16]
 800e0a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e0ac:	f104 0314 	add.w	r3, r4, #20
 800e0b0:	f019 091f 	ands.w	r9, r9, #31
 800e0b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e0bc:	d02f      	beq.n	800e11e <__lshift+0xc6>
 800e0be:	f1c9 0e20 	rsb	lr, r9, #32
 800e0c2:	468a      	mov	sl, r1
 800e0c4:	f04f 0c00 	mov.w	ip, #0
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	fa02 f209 	lsl.w	r2, r2, r9
 800e0ce:	ea42 020c 	orr.w	r2, r2, ip
 800e0d2:	f84a 2b04 	str.w	r2, [sl], #4
 800e0d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0da:	4298      	cmp	r0, r3
 800e0dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e0e0:	d8f2      	bhi.n	800e0c8 <__lshift+0x70>
 800e0e2:	1b03      	subs	r3, r0, r4
 800e0e4:	3b15      	subs	r3, #21
 800e0e6:	f023 0303 	bic.w	r3, r3, #3
 800e0ea:	3304      	adds	r3, #4
 800e0ec:	f104 0215 	add.w	r2, r4, #21
 800e0f0:	4290      	cmp	r0, r2
 800e0f2:	bf38      	it	cc
 800e0f4:	2304      	movcc	r3, #4
 800e0f6:	f841 c003 	str.w	ip, [r1, r3]
 800e0fa:	f1bc 0f00 	cmp.w	ip, #0
 800e0fe:	d001      	beq.n	800e104 <__lshift+0xac>
 800e100:	f108 0602 	add.w	r6, r8, #2
 800e104:	3e01      	subs	r6, #1
 800e106:	4638      	mov	r0, r7
 800e108:	612e      	str	r6, [r5, #16]
 800e10a:	4621      	mov	r1, r4
 800e10c:	f7ff fd88 	bl	800dc20 <_Bfree>
 800e110:	4628      	mov	r0, r5
 800e112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e116:	f842 0f04 	str.w	r0, [r2, #4]!
 800e11a:	3301      	adds	r3, #1
 800e11c:	e7c1      	b.n	800e0a2 <__lshift+0x4a>
 800e11e:	3904      	subs	r1, #4
 800e120:	f853 2b04 	ldr.w	r2, [r3], #4
 800e124:	f841 2f04 	str.w	r2, [r1, #4]!
 800e128:	4298      	cmp	r0, r3
 800e12a:	d8f9      	bhi.n	800e120 <__lshift+0xc8>
 800e12c:	e7ea      	b.n	800e104 <__lshift+0xac>
 800e12e:	bf00      	nop
 800e130:	0800f104 	.word	0x0800f104
 800e134:	0800f190 	.word	0x0800f190

0800e138 <__mcmp>:
 800e138:	b530      	push	{r4, r5, lr}
 800e13a:	6902      	ldr	r2, [r0, #16]
 800e13c:	690c      	ldr	r4, [r1, #16]
 800e13e:	1b12      	subs	r2, r2, r4
 800e140:	d10e      	bne.n	800e160 <__mcmp+0x28>
 800e142:	f100 0314 	add.w	r3, r0, #20
 800e146:	3114      	adds	r1, #20
 800e148:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e14c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e150:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e154:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e158:	42a5      	cmp	r5, r4
 800e15a:	d003      	beq.n	800e164 <__mcmp+0x2c>
 800e15c:	d305      	bcc.n	800e16a <__mcmp+0x32>
 800e15e:	2201      	movs	r2, #1
 800e160:	4610      	mov	r0, r2
 800e162:	bd30      	pop	{r4, r5, pc}
 800e164:	4283      	cmp	r3, r0
 800e166:	d3f3      	bcc.n	800e150 <__mcmp+0x18>
 800e168:	e7fa      	b.n	800e160 <__mcmp+0x28>
 800e16a:	f04f 32ff 	mov.w	r2, #4294967295
 800e16e:	e7f7      	b.n	800e160 <__mcmp+0x28>

0800e170 <__mdiff>:
 800e170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e174:	460c      	mov	r4, r1
 800e176:	4606      	mov	r6, r0
 800e178:	4611      	mov	r1, r2
 800e17a:	4620      	mov	r0, r4
 800e17c:	4690      	mov	r8, r2
 800e17e:	f7ff ffdb 	bl	800e138 <__mcmp>
 800e182:	1e05      	subs	r5, r0, #0
 800e184:	d110      	bne.n	800e1a8 <__mdiff+0x38>
 800e186:	4629      	mov	r1, r5
 800e188:	4630      	mov	r0, r6
 800e18a:	f7ff fd09 	bl	800dba0 <_Balloc>
 800e18e:	b930      	cbnz	r0, 800e19e <__mdiff+0x2e>
 800e190:	4b3a      	ldr	r3, [pc, #232]	; (800e27c <__mdiff+0x10c>)
 800e192:	4602      	mov	r2, r0
 800e194:	f240 2132 	movw	r1, #562	; 0x232
 800e198:	4839      	ldr	r0, [pc, #228]	; (800e280 <__mdiff+0x110>)
 800e19a:	f7fe f973 	bl	800c484 <__assert_func>
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e1a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1a8:	bfa4      	itt	ge
 800e1aa:	4643      	movge	r3, r8
 800e1ac:	46a0      	movge	r8, r4
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e1b4:	bfa6      	itte	ge
 800e1b6:	461c      	movge	r4, r3
 800e1b8:	2500      	movge	r5, #0
 800e1ba:	2501      	movlt	r5, #1
 800e1bc:	f7ff fcf0 	bl	800dba0 <_Balloc>
 800e1c0:	b920      	cbnz	r0, 800e1cc <__mdiff+0x5c>
 800e1c2:	4b2e      	ldr	r3, [pc, #184]	; (800e27c <__mdiff+0x10c>)
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e1ca:	e7e5      	b.n	800e198 <__mdiff+0x28>
 800e1cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e1d0:	6926      	ldr	r6, [r4, #16]
 800e1d2:	60c5      	str	r5, [r0, #12]
 800e1d4:	f104 0914 	add.w	r9, r4, #20
 800e1d8:	f108 0514 	add.w	r5, r8, #20
 800e1dc:	f100 0e14 	add.w	lr, r0, #20
 800e1e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e1e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e1e8:	f108 0210 	add.w	r2, r8, #16
 800e1ec:	46f2      	mov	sl, lr
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e1f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e1f8:	fa1f f883 	uxth.w	r8, r3
 800e1fc:	fa11 f18b 	uxtah	r1, r1, fp
 800e200:	0c1b      	lsrs	r3, r3, #16
 800e202:	eba1 0808 	sub.w	r8, r1, r8
 800e206:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e20a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e20e:	fa1f f888 	uxth.w	r8, r8
 800e212:	1419      	asrs	r1, r3, #16
 800e214:	454e      	cmp	r6, r9
 800e216:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e21a:	f84a 3b04 	str.w	r3, [sl], #4
 800e21e:	d8e7      	bhi.n	800e1f0 <__mdiff+0x80>
 800e220:	1b33      	subs	r3, r6, r4
 800e222:	3b15      	subs	r3, #21
 800e224:	f023 0303 	bic.w	r3, r3, #3
 800e228:	3304      	adds	r3, #4
 800e22a:	3415      	adds	r4, #21
 800e22c:	42a6      	cmp	r6, r4
 800e22e:	bf38      	it	cc
 800e230:	2304      	movcc	r3, #4
 800e232:	441d      	add	r5, r3
 800e234:	4473      	add	r3, lr
 800e236:	469e      	mov	lr, r3
 800e238:	462e      	mov	r6, r5
 800e23a:	4566      	cmp	r6, ip
 800e23c:	d30e      	bcc.n	800e25c <__mdiff+0xec>
 800e23e:	f10c 0203 	add.w	r2, ip, #3
 800e242:	1b52      	subs	r2, r2, r5
 800e244:	f022 0203 	bic.w	r2, r2, #3
 800e248:	3d03      	subs	r5, #3
 800e24a:	45ac      	cmp	ip, r5
 800e24c:	bf38      	it	cc
 800e24e:	2200      	movcc	r2, #0
 800e250:	441a      	add	r2, r3
 800e252:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e256:	b17b      	cbz	r3, 800e278 <__mdiff+0x108>
 800e258:	6107      	str	r7, [r0, #16]
 800e25a:	e7a3      	b.n	800e1a4 <__mdiff+0x34>
 800e25c:	f856 8b04 	ldr.w	r8, [r6], #4
 800e260:	fa11 f288 	uxtah	r2, r1, r8
 800e264:	1414      	asrs	r4, r2, #16
 800e266:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e26a:	b292      	uxth	r2, r2
 800e26c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e270:	f84e 2b04 	str.w	r2, [lr], #4
 800e274:	1421      	asrs	r1, r4, #16
 800e276:	e7e0      	b.n	800e23a <__mdiff+0xca>
 800e278:	3f01      	subs	r7, #1
 800e27a:	e7ea      	b.n	800e252 <__mdiff+0xe2>
 800e27c:	0800f104 	.word	0x0800f104
 800e280:	0800f190 	.word	0x0800f190

0800e284 <__ulp>:
 800e284:	b082      	sub	sp, #8
 800e286:	ed8d 0b00 	vstr	d0, [sp]
 800e28a:	9b01      	ldr	r3, [sp, #4]
 800e28c:	4912      	ldr	r1, [pc, #72]	; (800e2d8 <__ulp+0x54>)
 800e28e:	4019      	ands	r1, r3
 800e290:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e294:	2900      	cmp	r1, #0
 800e296:	dd05      	ble.n	800e2a4 <__ulp+0x20>
 800e298:	2200      	movs	r2, #0
 800e29a:	460b      	mov	r3, r1
 800e29c:	ec43 2b10 	vmov	d0, r2, r3
 800e2a0:	b002      	add	sp, #8
 800e2a2:	4770      	bx	lr
 800e2a4:	4249      	negs	r1, r1
 800e2a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e2aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e2ae:	f04f 0200 	mov.w	r2, #0
 800e2b2:	f04f 0300 	mov.w	r3, #0
 800e2b6:	da04      	bge.n	800e2c2 <__ulp+0x3e>
 800e2b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e2bc:	fa41 f300 	asr.w	r3, r1, r0
 800e2c0:	e7ec      	b.n	800e29c <__ulp+0x18>
 800e2c2:	f1a0 0114 	sub.w	r1, r0, #20
 800e2c6:	291e      	cmp	r1, #30
 800e2c8:	bfda      	itte	le
 800e2ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e2ce:	fa20 f101 	lsrle.w	r1, r0, r1
 800e2d2:	2101      	movgt	r1, #1
 800e2d4:	460a      	mov	r2, r1
 800e2d6:	e7e1      	b.n	800e29c <__ulp+0x18>
 800e2d8:	7ff00000 	.word	0x7ff00000

0800e2dc <__b2d>:
 800e2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2de:	6905      	ldr	r5, [r0, #16]
 800e2e0:	f100 0714 	add.w	r7, r0, #20
 800e2e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e2e8:	1f2e      	subs	r6, r5, #4
 800e2ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f7ff fd48 	bl	800dd84 <__hi0bits>
 800e2f4:	f1c0 0320 	rsb	r3, r0, #32
 800e2f8:	280a      	cmp	r0, #10
 800e2fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e378 <__b2d+0x9c>
 800e2fe:	600b      	str	r3, [r1, #0]
 800e300:	dc14      	bgt.n	800e32c <__b2d+0x50>
 800e302:	f1c0 0e0b 	rsb	lr, r0, #11
 800e306:	fa24 f10e 	lsr.w	r1, r4, lr
 800e30a:	42b7      	cmp	r7, r6
 800e30c:	ea41 030c 	orr.w	r3, r1, ip
 800e310:	bf34      	ite	cc
 800e312:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e316:	2100      	movcs	r1, #0
 800e318:	3015      	adds	r0, #21
 800e31a:	fa04 f000 	lsl.w	r0, r4, r0
 800e31e:	fa21 f10e 	lsr.w	r1, r1, lr
 800e322:	ea40 0201 	orr.w	r2, r0, r1
 800e326:	ec43 2b10 	vmov	d0, r2, r3
 800e32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e32c:	42b7      	cmp	r7, r6
 800e32e:	bf3a      	itte	cc
 800e330:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e334:	f1a5 0608 	subcc.w	r6, r5, #8
 800e338:	2100      	movcs	r1, #0
 800e33a:	380b      	subs	r0, #11
 800e33c:	d017      	beq.n	800e36e <__b2d+0x92>
 800e33e:	f1c0 0c20 	rsb	ip, r0, #32
 800e342:	fa04 f500 	lsl.w	r5, r4, r0
 800e346:	42be      	cmp	r6, r7
 800e348:	fa21 f40c 	lsr.w	r4, r1, ip
 800e34c:	ea45 0504 	orr.w	r5, r5, r4
 800e350:	bf8c      	ite	hi
 800e352:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e356:	2400      	movls	r4, #0
 800e358:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e35c:	fa01 f000 	lsl.w	r0, r1, r0
 800e360:	fa24 f40c 	lsr.w	r4, r4, ip
 800e364:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e368:	ea40 0204 	orr.w	r2, r0, r4
 800e36c:	e7db      	b.n	800e326 <__b2d+0x4a>
 800e36e:	ea44 030c 	orr.w	r3, r4, ip
 800e372:	460a      	mov	r2, r1
 800e374:	e7d7      	b.n	800e326 <__b2d+0x4a>
 800e376:	bf00      	nop
 800e378:	3ff00000 	.word	0x3ff00000

0800e37c <__d2b>:
 800e37c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e380:	4689      	mov	r9, r1
 800e382:	2101      	movs	r1, #1
 800e384:	ec57 6b10 	vmov	r6, r7, d0
 800e388:	4690      	mov	r8, r2
 800e38a:	f7ff fc09 	bl	800dba0 <_Balloc>
 800e38e:	4604      	mov	r4, r0
 800e390:	b930      	cbnz	r0, 800e3a0 <__d2b+0x24>
 800e392:	4602      	mov	r2, r0
 800e394:	4b25      	ldr	r3, [pc, #148]	; (800e42c <__d2b+0xb0>)
 800e396:	4826      	ldr	r0, [pc, #152]	; (800e430 <__d2b+0xb4>)
 800e398:	f240 310a 	movw	r1, #778	; 0x30a
 800e39c:	f7fe f872 	bl	800c484 <__assert_func>
 800e3a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e3a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e3a8:	bb35      	cbnz	r5, 800e3f8 <__d2b+0x7c>
 800e3aa:	2e00      	cmp	r6, #0
 800e3ac:	9301      	str	r3, [sp, #4]
 800e3ae:	d028      	beq.n	800e402 <__d2b+0x86>
 800e3b0:	4668      	mov	r0, sp
 800e3b2:	9600      	str	r6, [sp, #0]
 800e3b4:	f7ff fd06 	bl	800ddc4 <__lo0bits>
 800e3b8:	9900      	ldr	r1, [sp, #0]
 800e3ba:	b300      	cbz	r0, 800e3fe <__d2b+0x82>
 800e3bc:	9a01      	ldr	r2, [sp, #4]
 800e3be:	f1c0 0320 	rsb	r3, r0, #32
 800e3c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e3c6:	430b      	orrs	r3, r1
 800e3c8:	40c2      	lsrs	r2, r0
 800e3ca:	6163      	str	r3, [r4, #20]
 800e3cc:	9201      	str	r2, [sp, #4]
 800e3ce:	9b01      	ldr	r3, [sp, #4]
 800e3d0:	61a3      	str	r3, [r4, #24]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	bf14      	ite	ne
 800e3d6:	2202      	movne	r2, #2
 800e3d8:	2201      	moveq	r2, #1
 800e3da:	6122      	str	r2, [r4, #16]
 800e3dc:	b1d5      	cbz	r5, 800e414 <__d2b+0x98>
 800e3de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e3e2:	4405      	add	r5, r0
 800e3e4:	f8c9 5000 	str.w	r5, [r9]
 800e3e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e3ec:	f8c8 0000 	str.w	r0, [r8]
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	b003      	add	sp, #12
 800e3f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e3fc:	e7d5      	b.n	800e3aa <__d2b+0x2e>
 800e3fe:	6161      	str	r1, [r4, #20]
 800e400:	e7e5      	b.n	800e3ce <__d2b+0x52>
 800e402:	a801      	add	r0, sp, #4
 800e404:	f7ff fcde 	bl	800ddc4 <__lo0bits>
 800e408:	9b01      	ldr	r3, [sp, #4]
 800e40a:	6163      	str	r3, [r4, #20]
 800e40c:	2201      	movs	r2, #1
 800e40e:	6122      	str	r2, [r4, #16]
 800e410:	3020      	adds	r0, #32
 800e412:	e7e3      	b.n	800e3dc <__d2b+0x60>
 800e414:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e418:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e41c:	f8c9 0000 	str.w	r0, [r9]
 800e420:	6918      	ldr	r0, [r3, #16]
 800e422:	f7ff fcaf 	bl	800dd84 <__hi0bits>
 800e426:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e42a:	e7df      	b.n	800e3ec <__d2b+0x70>
 800e42c:	0800f104 	.word	0x0800f104
 800e430:	0800f190 	.word	0x0800f190

0800e434 <__ratio>:
 800e434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e438:	4688      	mov	r8, r1
 800e43a:	4669      	mov	r1, sp
 800e43c:	4681      	mov	r9, r0
 800e43e:	f7ff ff4d 	bl	800e2dc <__b2d>
 800e442:	a901      	add	r1, sp, #4
 800e444:	4640      	mov	r0, r8
 800e446:	ec55 4b10 	vmov	r4, r5, d0
 800e44a:	f7ff ff47 	bl	800e2dc <__b2d>
 800e44e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e452:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e456:	eba3 0c02 	sub.w	ip, r3, r2
 800e45a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e45e:	1a9b      	subs	r3, r3, r2
 800e460:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e464:	ec51 0b10 	vmov	r0, r1, d0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	bfd6      	itet	le
 800e46c:	460a      	movle	r2, r1
 800e46e:	462a      	movgt	r2, r5
 800e470:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e474:	468b      	mov	fp, r1
 800e476:	462f      	mov	r7, r5
 800e478:	bfd4      	ite	le
 800e47a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e47e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e482:	4620      	mov	r0, r4
 800e484:	ee10 2a10 	vmov	r2, s0
 800e488:	465b      	mov	r3, fp
 800e48a:	4639      	mov	r1, r7
 800e48c:	f7f2 f9de 	bl	800084c <__aeabi_ddiv>
 800e490:	ec41 0b10 	vmov	d0, r0, r1
 800e494:	b003      	add	sp, #12
 800e496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e49a <__copybits>:
 800e49a:	3901      	subs	r1, #1
 800e49c:	b570      	push	{r4, r5, r6, lr}
 800e49e:	1149      	asrs	r1, r1, #5
 800e4a0:	6914      	ldr	r4, [r2, #16]
 800e4a2:	3101      	adds	r1, #1
 800e4a4:	f102 0314 	add.w	r3, r2, #20
 800e4a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e4ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e4b0:	1f05      	subs	r5, r0, #4
 800e4b2:	42a3      	cmp	r3, r4
 800e4b4:	d30c      	bcc.n	800e4d0 <__copybits+0x36>
 800e4b6:	1aa3      	subs	r3, r4, r2
 800e4b8:	3b11      	subs	r3, #17
 800e4ba:	f023 0303 	bic.w	r3, r3, #3
 800e4be:	3211      	adds	r2, #17
 800e4c0:	42a2      	cmp	r2, r4
 800e4c2:	bf88      	it	hi
 800e4c4:	2300      	movhi	r3, #0
 800e4c6:	4418      	add	r0, r3
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	4288      	cmp	r0, r1
 800e4cc:	d305      	bcc.n	800e4da <__copybits+0x40>
 800e4ce:	bd70      	pop	{r4, r5, r6, pc}
 800e4d0:	f853 6b04 	ldr.w	r6, [r3], #4
 800e4d4:	f845 6f04 	str.w	r6, [r5, #4]!
 800e4d8:	e7eb      	b.n	800e4b2 <__copybits+0x18>
 800e4da:	f840 3b04 	str.w	r3, [r0], #4
 800e4de:	e7f4      	b.n	800e4ca <__copybits+0x30>

0800e4e0 <__any_on>:
 800e4e0:	f100 0214 	add.w	r2, r0, #20
 800e4e4:	6900      	ldr	r0, [r0, #16]
 800e4e6:	114b      	asrs	r3, r1, #5
 800e4e8:	4298      	cmp	r0, r3
 800e4ea:	b510      	push	{r4, lr}
 800e4ec:	db11      	blt.n	800e512 <__any_on+0x32>
 800e4ee:	dd0a      	ble.n	800e506 <__any_on+0x26>
 800e4f0:	f011 011f 	ands.w	r1, r1, #31
 800e4f4:	d007      	beq.n	800e506 <__any_on+0x26>
 800e4f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e4fa:	fa24 f001 	lsr.w	r0, r4, r1
 800e4fe:	fa00 f101 	lsl.w	r1, r0, r1
 800e502:	428c      	cmp	r4, r1
 800e504:	d10b      	bne.n	800e51e <__any_on+0x3e>
 800e506:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d803      	bhi.n	800e516 <__any_on+0x36>
 800e50e:	2000      	movs	r0, #0
 800e510:	bd10      	pop	{r4, pc}
 800e512:	4603      	mov	r3, r0
 800e514:	e7f7      	b.n	800e506 <__any_on+0x26>
 800e516:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e51a:	2900      	cmp	r1, #0
 800e51c:	d0f5      	beq.n	800e50a <__any_on+0x2a>
 800e51e:	2001      	movs	r0, #1
 800e520:	e7f6      	b.n	800e510 <__any_on+0x30>

0800e522 <_calloc_r>:
 800e522:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e524:	fba1 2402 	umull	r2, r4, r1, r2
 800e528:	b94c      	cbnz	r4, 800e53e <_calloc_r+0x1c>
 800e52a:	4611      	mov	r1, r2
 800e52c:	9201      	str	r2, [sp, #4]
 800e52e:	f7fc f857 	bl	800a5e0 <_malloc_r>
 800e532:	9a01      	ldr	r2, [sp, #4]
 800e534:	4605      	mov	r5, r0
 800e536:	b930      	cbnz	r0, 800e546 <_calloc_r+0x24>
 800e538:	4628      	mov	r0, r5
 800e53a:	b003      	add	sp, #12
 800e53c:	bd30      	pop	{r4, r5, pc}
 800e53e:	220c      	movs	r2, #12
 800e540:	6002      	str	r2, [r0, #0]
 800e542:	2500      	movs	r5, #0
 800e544:	e7f8      	b.n	800e538 <_calloc_r+0x16>
 800e546:	4621      	mov	r1, r4
 800e548:	f7fc f821 	bl	800a58e <memset>
 800e54c:	e7f4      	b.n	800e538 <_calloc_r+0x16>
	...

0800e550 <_free_r>:
 800e550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e552:	2900      	cmp	r1, #0
 800e554:	d044      	beq.n	800e5e0 <_free_r+0x90>
 800e556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e55a:	9001      	str	r0, [sp, #4]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f1a1 0404 	sub.w	r4, r1, #4
 800e562:	bfb8      	it	lt
 800e564:	18e4      	addlt	r4, r4, r3
 800e566:	f7ff fb0f 	bl	800db88 <__malloc_lock>
 800e56a:	4a1e      	ldr	r2, [pc, #120]	; (800e5e4 <_free_r+0x94>)
 800e56c:	9801      	ldr	r0, [sp, #4]
 800e56e:	6813      	ldr	r3, [r2, #0]
 800e570:	b933      	cbnz	r3, 800e580 <_free_r+0x30>
 800e572:	6063      	str	r3, [r4, #4]
 800e574:	6014      	str	r4, [r2, #0]
 800e576:	b003      	add	sp, #12
 800e578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e57c:	f7ff bb0a 	b.w	800db94 <__malloc_unlock>
 800e580:	42a3      	cmp	r3, r4
 800e582:	d908      	bls.n	800e596 <_free_r+0x46>
 800e584:	6825      	ldr	r5, [r4, #0]
 800e586:	1961      	adds	r1, r4, r5
 800e588:	428b      	cmp	r3, r1
 800e58a:	bf01      	itttt	eq
 800e58c:	6819      	ldreq	r1, [r3, #0]
 800e58e:	685b      	ldreq	r3, [r3, #4]
 800e590:	1949      	addeq	r1, r1, r5
 800e592:	6021      	streq	r1, [r4, #0]
 800e594:	e7ed      	b.n	800e572 <_free_r+0x22>
 800e596:	461a      	mov	r2, r3
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	b10b      	cbz	r3, 800e5a0 <_free_r+0x50>
 800e59c:	42a3      	cmp	r3, r4
 800e59e:	d9fa      	bls.n	800e596 <_free_r+0x46>
 800e5a0:	6811      	ldr	r1, [r2, #0]
 800e5a2:	1855      	adds	r5, r2, r1
 800e5a4:	42a5      	cmp	r5, r4
 800e5a6:	d10b      	bne.n	800e5c0 <_free_r+0x70>
 800e5a8:	6824      	ldr	r4, [r4, #0]
 800e5aa:	4421      	add	r1, r4
 800e5ac:	1854      	adds	r4, r2, r1
 800e5ae:	42a3      	cmp	r3, r4
 800e5b0:	6011      	str	r1, [r2, #0]
 800e5b2:	d1e0      	bne.n	800e576 <_free_r+0x26>
 800e5b4:	681c      	ldr	r4, [r3, #0]
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	6053      	str	r3, [r2, #4]
 800e5ba:	4421      	add	r1, r4
 800e5bc:	6011      	str	r1, [r2, #0]
 800e5be:	e7da      	b.n	800e576 <_free_r+0x26>
 800e5c0:	d902      	bls.n	800e5c8 <_free_r+0x78>
 800e5c2:	230c      	movs	r3, #12
 800e5c4:	6003      	str	r3, [r0, #0]
 800e5c6:	e7d6      	b.n	800e576 <_free_r+0x26>
 800e5c8:	6825      	ldr	r5, [r4, #0]
 800e5ca:	1961      	adds	r1, r4, r5
 800e5cc:	428b      	cmp	r3, r1
 800e5ce:	bf04      	itt	eq
 800e5d0:	6819      	ldreq	r1, [r3, #0]
 800e5d2:	685b      	ldreq	r3, [r3, #4]
 800e5d4:	6063      	str	r3, [r4, #4]
 800e5d6:	bf04      	itt	eq
 800e5d8:	1949      	addeq	r1, r1, r5
 800e5da:	6021      	streq	r1, [r4, #0]
 800e5dc:	6054      	str	r4, [r2, #4]
 800e5de:	e7ca      	b.n	800e576 <_free_r+0x26>
 800e5e0:	b003      	add	sp, #12
 800e5e2:	bd30      	pop	{r4, r5, pc}
 800e5e4:	200083e8 	.word	0x200083e8

0800e5e8 <__ssputs_r>:
 800e5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5ec:	688e      	ldr	r6, [r1, #8]
 800e5ee:	429e      	cmp	r6, r3
 800e5f0:	4682      	mov	sl, r0
 800e5f2:	460c      	mov	r4, r1
 800e5f4:	4690      	mov	r8, r2
 800e5f6:	461f      	mov	r7, r3
 800e5f8:	d838      	bhi.n	800e66c <__ssputs_r+0x84>
 800e5fa:	898a      	ldrh	r2, [r1, #12]
 800e5fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e600:	d032      	beq.n	800e668 <__ssputs_r+0x80>
 800e602:	6825      	ldr	r5, [r4, #0]
 800e604:	6909      	ldr	r1, [r1, #16]
 800e606:	eba5 0901 	sub.w	r9, r5, r1
 800e60a:	6965      	ldr	r5, [r4, #20]
 800e60c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e610:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e614:	3301      	adds	r3, #1
 800e616:	444b      	add	r3, r9
 800e618:	106d      	asrs	r5, r5, #1
 800e61a:	429d      	cmp	r5, r3
 800e61c:	bf38      	it	cc
 800e61e:	461d      	movcc	r5, r3
 800e620:	0553      	lsls	r3, r2, #21
 800e622:	d531      	bpl.n	800e688 <__ssputs_r+0xa0>
 800e624:	4629      	mov	r1, r5
 800e626:	f7fb ffdb 	bl	800a5e0 <_malloc_r>
 800e62a:	4606      	mov	r6, r0
 800e62c:	b950      	cbnz	r0, 800e644 <__ssputs_r+0x5c>
 800e62e:	230c      	movs	r3, #12
 800e630:	f8ca 3000 	str.w	r3, [sl]
 800e634:	89a3      	ldrh	r3, [r4, #12]
 800e636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e63a:	81a3      	strh	r3, [r4, #12]
 800e63c:	f04f 30ff 	mov.w	r0, #4294967295
 800e640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e644:	6921      	ldr	r1, [r4, #16]
 800e646:	464a      	mov	r2, r9
 800e648:	f7fb ff93 	bl	800a572 <memcpy>
 800e64c:	89a3      	ldrh	r3, [r4, #12]
 800e64e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e656:	81a3      	strh	r3, [r4, #12]
 800e658:	6126      	str	r6, [r4, #16]
 800e65a:	6165      	str	r5, [r4, #20]
 800e65c:	444e      	add	r6, r9
 800e65e:	eba5 0509 	sub.w	r5, r5, r9
 800e662:	6026      	str	r6, [r4, #0]
 800e664:	60a5      	str	r5, [r4, #8]
 800e666:	463e      	mov	r6, r7
 800e668:	42be      	cmp	r6, r7
 800e66a:	d900      	bls.n	800e66e <__ssputs_r+0x86>
 800e66c:	463e      	mov	r6, r7
 800e66e:	6820      	ldr	r0, [r4, #0]
 800e670:	4632      	mov	r2, r6
 800e672:	4641      	mov	r1, r8
 800e674:	f000 fad2 	bl	800ec1c <memmove>
 800e678:	68a3      	ldr	r3, [r4, #8]
 800e67a:	1b9b      	subs	r3, r3, r6
 800e67c:	60a3      	str	r3, [r4, #8]
 800e67e:	6823      	ldr	r3, [r4, #0]
 800e680:	4433      	add	r3, r6
 800e682:	6023      	str	r3, [r4, #0]
 800e684:	2000      	movs	r0, #0
 800e686:	e7db      	b.n	800e640 <__ssputs_r+0x58>
 800e688:	462a      	mov	r2, r5
 800e68a:	f000 fae1 	bl	800ec50 <_realloc_r>
 800e68e:	4606      	mov	r6, r0
 800e690:	2800      	cmp	r0, #0
 800e692:	d1e1      	bne.n	800e658 <__ssputs_r+0x70>
 800e694:	6921      	ldr	r1, [r4, #16]
 800e696:	4650      	mov	r0, sl
 800e698:	f7ff ff5a 	bl	800e550 <_free_r>
 800e69c:	e7c7      	b.n	800e62e <__ssputs_r+0x46>
	...

0800e6a0 <_svfiprintf_r>:
 800e6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a4:	4698      	mov	r8, r3
 800e6a6:	898b      	ldrh	r3, [r1, #12]
 800e6a8:	061b      	lsls	r3, r3, #24
 800e6aa:	b09d      	sub	sp, #116	; 0x74
 800e6ac:	4607      	mov	r7, r0
 800e6ae:	460d      	mov	r5, r1
 800e6b0:	4614      	mov	r4, r2
 800e6b2:	d50e      	bpl.n	800e6d2 <_svfiprintf_r+0x32>
 800e6b4:	690b      	ldr	r3, [r1, #16]
 800e6b6:	b963      	cbnz	r3, 800e6d2 <_svfiprintf_r+0x32>
 800e6b8:	2140      	movs	r1, #64	; 0x40
 800e6ba:	f7fb ff91 	bl	800a5e0 <_malloc_r>
 800e6be:	6028      	str	r0, [r5, #0]
 800e6c0:	6128      	str	r0, [r5, #16]
 800e6c2:	b920      	cbnz	r0, 800e6ce <_svfiprintf_r+0x2e>
 800e6c4:	230c      	movs	r3, #12
 800e6c6:	603b      	str	r3, [r7, #0]
 800e6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6cc:	e0d1      	b.n	800e872 <_svfiprintf_r+0x1d2>
 800e6ce:	2340      	movs	r3, #64	; 0x40
 800e6d0:	616b      	str	r3, [r5, #20]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e6d6:	2320      	movs	r3, #32
 800e6d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6e0:	2330      	movs	r3, #48	; 0x30
 800e6e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e88c <_svfiprintf_r+0x1ec>
 800e6e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6ea:	f04f 0901 	mov.w	r9, #1
 800e6ee:	4623      	mov	r3, r4
 800e6f0:	469a      	mov	sl, r3
 800e6f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6f6:	b10a      	cbz	r2, 800e6fc <_svfiprintf_r+0x5c>
 800e6f8:	2a25      	cmp	r2, #37	; 0x25
 800e6fa:	d1f9      	bne.n	800e6f0 <_svfiprintf_r+0x50>
 800e6fc:	ebba 0b04 	subs.w	fp, sl, r4
 800e700:	d00b      	beq.n	800e71a <_svfiprintf_r+0x7a>
 800e702:	465b      	mov	r3, fp
 800e704:	4622      	mov	r2, r4
 800e706:	4629      	mov	r1, r5
 800e708:	4638      	mov	r0, r7
 800e70a:	f7ff ff6d 	bl	800e5e8 <__ssputs_r>
 800e70e:	3001      	adds	r0, #1
 800e710:	f000 80aa 	beq.w	800e868 <_svfiprintf_r+0x1c8>
 800e714:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e716:	445a      	add	r2, fp
 800e718:	9209      	str	r2, [sp, #36]	; 0x24
 800e71a:	f89a 3000 	ldrb.w	r3, [sl]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	f000 80a2 	beq.w	800e868 <_svfiprintf_r+0x1c8>
 800e724:	2300      	movs	r3, #0
 800e726:	f04f 32ff 	mov.w	r2, #4294967295
 800e72a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e72e:	f10a 0a01 	add.w	sl, sl, #1
 800e732:	9304      	str	r3, [sp, #16]
 800e734:	9307      	str	r3, [sp, #28]
 800e736:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e73a:	931a      	str	r3, [sp, #104]	; 0x68
 800e73c:	4654      	mov	r4, sl
 800e73e:	2205      	movs	r2, #5
 800e740:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e744:	4851      	ldr	r0, [pc, #324]	; (800e88c <_svfiprintf_r+0x1ec>)
 800e746:	f7f1 fd4b 	bl	80001e0 <memchr>
 800e74a:	9a04      	ldr	r2, [sp, #16]
 800e74c:	b9d8      	cbnz	r0, 800e786 <_svfiprintf_r+0xe6>
 800e74e:	06d0      	lsls	r0, r2, #27
 800e750:	bf44      	itt	mi
 800e752:	2320      	movmi	r3, #32
 800e754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e758:	0711      	lsls	r1, r2, #28
 800e75a:	bf44      	itt	mi
 800e75c:	232b      	movmi	r3, #43	; 0x2b
 800e75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e762:	f89a 3000 	ldrb.w	r3, [sl]
 800e766:	2b2a      	cmp	r3, #42	; 0x2a
 800e768:	d015      	beq.n	800e796 <_svfiprintf_r+0xf6>
 800e76a:	9a07      	ldr	r2, [sp, #28]
 800e76c:	4654      	mov	r4, sl
 800e76e:	2000      	movs	r0, #0
 800e770:	f04f 0c0a 	mov.w	ip, #10
 800e774:	4621      	mov	r1, r4
 800e776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e77a:	3b30      	subs	r3, #48	; 0x30
 800e77c:	2b09      	cmp	r3, #9
 800e77e:	d94e      	bls.n	800e81e <_svfiprintf_r+0x17e>
 800e780:	b1b0      	cbz	r0, 800e7b0 <_svfiprintf_r+0x110>
 800e782:	9207      	str	r2, [sp, #28]
 800e784:	e014      	b.n	800e7b0 <_svfiprintf_r+0x110>
 800e786:	eba0 0308 	sub.w	r3, r0, r8
 800e78a:	fa09 f303 	lsl.w	r3, r9, r3
 800e78e:	4313      	orrs	r3, r2
 800e790:	9304      	str	r3, [sp, #16]
 800e792:	46a2      	mov	sl, r4
 800e794:	e7d2      	b.n	800e73c <_svfiprintf_r+0x9c>
 800e796:	9b03      	ldr	r3, [sp, #12]
 800e798:	1d19      	adds	r1, r3, #4
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	9103      	str	r1, [sp, #12]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	bfbb      	ittet	lt
 800e7a2:	425b      	neglt	r3, r3
 800e7a4:	f042 0202 	orrlt.w	r2, r2, #2
 800e7a8:	9307      	strge	r3, [sp, #28]
 800e7aa:	9307      	strlt	r3, [sp, #28]
 800e7ac:	bfb8      	it	lt
 800e7ae:	9204      	strlt	r2, [sp, #16]
 800e7b0:	7823      	ldrb	r3, [r4, #0]
 800e7b2:	2b2e      	cmp	r3, #46	; 0x2e
 800e7b4:	d10c      	bne.n	800e7d0 <_svfiprintf_r+0x130>
 800e7b6:	7863      	ldrb	r3, [r4, #1]
 800e7b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e7ba:	d135      	bne.n	800e828 <_svfiprintf_r+0x188>
 800e7bc:	9b03      	ldr	r3, [sp, #12]
 800e7be:	1d1a      	adds	r2, r3, #4
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	9203      	str	r2, [sp, #12]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	bfb8      	it	lt
 800e7c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e7cc:	3402      	adds	r4, #2
 800e7ce:	9305      	str	r3, [sp, #20]
 800e7d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e89c <_svfiprintf_r+0x1fc>
 800e7d4:	7821      	ldrb	r1, [r4, #0]
 800e7d6:	2203      	movs	r2, #3
 800e7d8:	4650      	mov	r0, sl
 800e7da:	f7f1 fd01 	bl	80001e0 <memchr>
 800e7de:	b140      	cbz	r0, 800e7f2 <_svfiprintf_r+0x152>
 800e7e0:	2340      	movs	r3, #64	; 0x40
 800e7e2:	eba0 000a 	sub.w	r0, r0, sl
 800e7e6:	fa03 f000 	lsl.w	r0, r3, r0
 800e7ea:	9b04      	ldr	r3, [sp, #16]
 800e7ec:	4303      	orrs	r3, r0
 800e7ee:	3401      	adds	r4, #1
 800e7f0:	9304      	str	r3, [sp, #16]
 800e7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7f6:	4826      	ldr	r0, [pc, #152]	; (800e890 <_svfiprintf_r+0x1f0>)
 800e7f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7fc:	2206      	movs	r2, #6
 800e7fe:	f7f1 fcef 	bl	80001e0 <memchr>
 800e802:	2800      	cmp	r0, #0
 800e804:	d038      	beq.n	800e878 <_svfiprintf_r+0x1d8>
 800e806:	4b23      	ldr	r3, [pc, #140]	; (800e894 <_svfiprintf_r+0x1f4>)
 800e808:	bb1b      	cbnz	r3, 800e852 <_svfiprintf_r+0x1b2>
 800e80a:	9b03      	ldr	r3, [sp, #12]
 800e80c:	3307      	adds	r3, #7
 800e80e:	f023 0307 	bic.w	r3, r3, #7
 800e812:	3308      	adds	r3, #8
 800e814:	9303      	str	r3, [sp, #12]
 800e816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e818:	4433      	add	r3, r6
 800e81a:	9309      	str	r3, [sp, #36]	; 0x24
 800e81c:	e767      	b.n	800e6ee <_svfiprintf_r+0x4e>
 800e81e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e822:	460c      	mov	r4, r1
 800e824:	2001      	movs	r0, #1
 800e826:	e7a5      	b.n	800e774 <_svfiprintf_r+0xd4>
 800e828:	2300      	movs	r3, #0
 800e82a:	3401      	adds	r4, #1
 800e82c:	9305      	str	r3, [sp, #20]
 800e82e:	4619      	mov	r1, r3
 800e830:	f04f 0c0a 	mov.w	ip, #10
 800e834:	4620      	mov	r0, r4
 800e836:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e83a:	3a30      	subs	r2, #48	; 0x30
 800e83c:	2a09      	cmp	r2, #9
 800e83e:	d903      	bls.n	800e848 <_svfiprintf_r+0x1a8>
 800e840:	2b00      	cmp	r3, #0
 800e842:	d0c5      	beq.n	800e7d0 <_svfiprintf_r+0x130>
 800e844:	9105      	str	r1, [sp, #20]
 800e846:	e7c3      	b.n	800e7d0 <_svfiprintf_r+0x130>
 800e848:	fb0c 2101 	mla	r1, ip, r1, r2
 800e84c:	4604      	mov	r4, r0
 800e84e:	2301      	movs	r3, #1
 800e850:	e7f0      	b.n	800e834 <_svfiprintf_r+0x194>
 800e852:	ab03      	add	r3, sp, #12
 800e854:	9300      	str	r3, [sp, #0]
 800e856:	462a      	mov	r2, r5
 800e858:	4b0f      	ldr	r3, [pc, #60]	; (800e898 <_svfiprintf_r+0x1f8>)
 800e85a:	a904      	add	r1, sp, #16
 800e85c:	4638      	mov	r0, r7
 800e85e:	f7fb ffd3 	bl	800a808 <_printf_float>
 800e862:	1c42      	adds	r2, r0, #1
 800e864:	4606      	mov	r6, r0
 800e866:	d1d6      	bne.n	800e816 <_svfiprintf_r+0x176>
 800e868:	89ab      	ldrh	r3, [r5, #12]
 800e86a:	065b      	lsls	r3, r3, #25
 800e86c:	f53f af2c 	bmi.w	800e6c8 <_svfiprintf_r+0x28>
 800e870:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e872:	b01d      	add	sp, #116	; 0x74
 800e874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e878:	ab03      	add	r3, sp, #12
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	462a      	mov	r2, r5
 800e87e:	4b06      	ldr	r3, [pc, #24]	; (800e898 <_svfiprintf_r+0x1f8>)
 800e880:	a904      	add	r1, sp, #16
 800e882:	4638      	mov	r0, r7
 800e884:	f7fc fa64 	bl	800ad50 <_printf_i>
 800e888:	e7eb      	b.n	800e862 <_svfiprintf_r+0x1c2>
 800e88a:	bf00      	nop
 800e88c:	0800f2ec 	.word	0x0800f2ec
 800e890:	0800f2f6 	.word	0x0800f2f6
 800e894:	0800a809 	.word	0x0800a809
 800e898:	0800e5e9 	.word	0x0800e5e9
 800e89c:	0800f2f2 	.word	0x0800f2f2

0800e8a0 <__sfputc_r>:
 800e8a0:	6893      	ldr	r3, [r2, #8]
 800e8a2:	3b01      	subs	r3, #1
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	b410      	push	{r4}
 800e8a8:	6093      	str	r3, [r2, #8]
 800e8aa:	da08      	bge.n	800e8be <__sfputc_r+0x1e>
 800e8ac:	6994      	ldr	r4, [r2, #24]
 800e8ae:	42a3      	cmp	r3, r4
 800e8b0:	db01      	blt.n	800e8b6 <__sfputc_r+0x16>
 800e8b2:	290a      	cmp	r1, #10
 800e8b4:	d103      	bne.n	800e8be <__sfputc_r+0x1e>
 800e8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8ba:	f7fd bd11 	b.w	800c2e0 <__swbuf_r>
 800e8be:	6813      	ldr	r3, [r2, #0]
 800e8c0:	1c58      	adds	r0, r3, #1
 800e8c2:	6010      	str	r0, [r2, #0]
 800e8c4:	7019      	strb	r1, [r3, #0]
 800e8c6:	4608      	mov	r0, r1
 800e8c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8cc:	4770      	bx	lr

0800e8ce <__sfputs_r>:
 800e8ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8d0:	4606      	mov	r6, r0
 800e8d2:	460f      	mov	r7, r1
 800e8d4:	4614      	mov	r4, r2
 800e8d6:	18d5      	adds	r5, r2, r3
 800e8d8:	42ac      	cmp	r4, r5
 800e8da:	d101      	bne.n	800e8e0 <__sfputs_r+0x12>
 800e8dc:	2000      	movs	r0, #0
 800e8de:	e007      	b.n	800e8f0 <__sfputs_r+0x22>
 800e8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8e4:	463a      	mov	r2, r7
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	f7ff ffda 	bl	800e8a0 <__sfputc_r>
 800e8ec:	1c43      	adds	r3, r0, #1
 800e8ee:	d1f3      	bne.n	800e8d8 <__sfputs_r+0xa>
 800e8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8f4 <_vfiprintf_r>:
 800e8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f8:	460d      	mov	r5, r1
 800e8fa:	b09d      	sub	sp, #116	; 0x74
 800e8fc:	4614      	mov	r4, r2
 800e8fe:	4698      	mov	r8, r3
 800e900:	4606      	mov	r6, r0
 800e902:	b118      	cbz	r0, 800e90c <_vfiprintf_r+0x18>
 800e904:	6983      	ldr	r3, [r0, #24]
 800e906:	b90b      	cbnz	r3, 800e90c <_vfiprintf_r+0x18>
 800e908:	f7fb fd6e 	bl	800a3e8 <__sinit>
 800e90c:	4b89      	ldr	r3, [pc, #548]	; (800eb34 <_vfiprintf_r+0x240>)
 800e90e:	429d      	cmp	r5, r3
 800e910:	d11b      	bne.n	800e94a <_vfiprintf_r+0x56>
 800e912:	6875      	ldr	r5, [r6, #4]
 800e914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e916:	07d9      	lsls	r1, r3, #31
 800e918:	d405      	bmi.n	800e926 <_vfiprintf_r+0x32>
 800e91a:	89ab      	ldrh	r3, [r5, #12]
 800e91c:	059a      	lsls	r2, r3, #22
 800e91e:	d402      	bmi.n	800e926 <_vfiprintf_r+0x32>
 800e920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e922:	f7fb fe24 	bl	800a56e <__retarget_lock_acquire_recursive>
 800e926:	89ab      	ldrh	r3, [r5, #12]
 800e928:	071b      	lsls	r3, r3, #28
 800e92a:	d501      	bpl.n	800e930 <_vfiprintf_r+0x3c>
 800e92c:	692b      	ldr	r3, [r5, #16]
 800e92e:	b9eb      	cbnz	r3, 800e96c <_vfiprintf_r+0x78>
 800e930:	4629      	mov	r1, r5
 800e932:	4630      	mov	r0, r6
 800e934:	f7fd fd38 	bl	800c3a8 <__swsetup_r>
 800e938:	b1c0      	cbz	r0, 800e96c <_vfiprintf_r+0x78>
 800e93a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e93c:	07dc      	lsls	r4, r3, #31
 800e93e:	d50e      	bpl.n	800e95e <_vfiprintf_r+0x6a>
 800e940:	f04f 30ff 	mov.w	r0, #4294967295
 800e944:	b01d      	add	sp, #116	; 0x74
 800e946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e94a:	4b7b      	ldr	r3, [pc, #492]	; (800eb38 <_vfiprintf_r+0x244>)
 800e94c:	429d      	cmp	r5, r3
 800e94e:	d101      	bne.n	800e954 <_vfiprintf_r+0x60>
 800e950:	68b5      	ldr	r5, [r6, #8]
 800e952:	e7df      	b.n	800e914 <_vfiprintf_r+0x20>
 800e954:	4b79      	ldr	r3, [pc, #484]	; (800eb3c <_vfiprintf_r+0x248>)
 800e956:	429d      	cmp	r5, r3
 800e958:	bf08      	it	eq
 800e95a:	68f5      	ldreq	r5, [r6, #12]
 800e95c:	e7da      	b.n	800e914 <_vfiprintf_r+0x20>
 800e95e:	89ab      	ldrh	r3, [r5, #12]
 800e960:	0598      	lsls	r0, r3, #22
 800e962:	d4ed      	bmi.n	800e940 <_vfiprintf_r+0x4c>
 800e964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e966:	f7fb fe03 	bl	800a570 <__retarget_lock_release_recursive>
 800e96a:	e7e9      	b.n	800e940 <_vfiprintf_r+0x4c>
 800e96c:	2300      	movs	r3, #0
 800e96e:	9309      	str	r3, [sp, #36]	; 0x24
 800e970:	2320      	movs	r3, #32
 800e972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e976:	f8cd 800c 	str.w	r8, [sp, #12]
 800e97a:	2330      	movs	r3, #48	; 0x30
 800e97c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eb40 <_vfiprintf_r+0x24c>
 800e980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e984:	f04f 0901 	mov.w	r9, #1
 800e988:	4623      	mov	r3, r4
 800e98a:	469a      	mov	sl, r3
 800e98c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e990:	b10a      	cbz	r2, 800e996 <_vfiprintf_r+0xa2>
 800e992:	2a25      	cmp	r2, #37	; 0x25
 800e994:	d1f9      	bne.n	800e98a <_vfiprintf_r+0x96>
 800e996:	ebba 0b04 	subs.w	fp, sl, r4
 800e99a:	d00b      	beq.n	800e9b4 <_vfiprintf_r+0xc0>
 800e99c:	465b      	mov	r3, fp
 800e99e:	4622      	mov	r2, r4
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f7ff ff93 	bl	800e8ce <__sfputs_r>
 800e9a8:	3001      	adds	r0, #1
 800e9aa:	f000 80aa 	beq.w	800eb02 <_vfiprintf_r+0x20e>
 800e9ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9b0:	445a      	add	r2, fp
 800e9b2:	9209      	str	r2, [sp, #36]	; 0x24
 800e9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	f000 80a2 	beq.w	800eb02 <_vfiprintf_r+0x20e>
 800e9be:	2300      	movs	r3, #0
 800e9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e9c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9c8:	f10a 0a01 	add.w	sl, sl, #1
 800e9cc:	9304      	str	r3, [sp, #16]
 800e9ce:	9307      	str	r3, [sp, #28]
 800e9d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9d4:	931a      	str	r3, [sp, #104]	; 0x68
 800e9d6:	4654      	mov	r4, sl
 800e9d8:	2205      	movs	r2, #5
 800e9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9de:	4858      	ldr	r0, [pc, #352]	; (800eb40 <_vfiprintf_r+0x24c>)
 800e9e0:	f7f1 fbfe 	bl	80001e0 <memchr>
 800e9e4:	9a04      	ldr	r2, [sp, #16]
 800e9e6:	b9d8      	cbnz	r0, 800ea20 <_vfiprintf_r+0x12c>
 800e9e8:	06d1      	lsls	r1, r2, #27
 800e9ea:	bf44      	itt	mi
 800e9ec:	2320      	movmi	r3, #32
 800e9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9f2:	0713      	lsls	r3, r2, #28
 800e9f4:	bf44      	itt	mi
 800e9f6:	232b      	movmi	r3, #43	; 0x2b
 800e9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800ea00:	2b2a      	cmp	r3, #42	; 0x2a
 800ea02:	d015      	beq.n	800ea30 <_vfiprintf_r+0x13c>
 800ea04:	9a07      	ldr	r2, [sp, #28]
 800ea06:	4654      	mov	r4, sl
 800ea08:	2000      	movs	r0, #0
 800ea0a:	f04f 0c0a 	mov.w	ip, #10
 800ea0e:	4621      	mov	r1, r4
 800ea10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea14:	3b30      	subs	r3, #48	; 0x30
 800ea16:	2b09      	cmp	r3, #9
 800ea18:	d94e      	bls.n	800eab8 <_vfiprintf_r+0x1c4>
 800ea1a:	b1b0      	cbz	r0, 800ea4a <_vfiprintf_r+0x156>
 800ea1c:	9207      	str	r2, [sp, #28]
 800ea1e:	e014      	b.n	800ea4a <_vfiprintf_r+0x156>
 800ea20:	eba0 0308 	sub.w	r3, r0, r8
 800ea24:	fa09 f303 	lsl.w	r3, r9, r3
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	9304      	str	r3, [sp, #16]
 800ea2c:	46a2      	mov	sl, r4
 800ea2e:	e7d2      	b.n	800e9d6 <_vfiprintf_r+0xe2>
 800ea30:	9b03      	ldr	r3, [sp, #12]
 800ea32:	1d19      	adds	r1, r3, #4
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	9103      	str	r1, [sp, #12]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	bfbb      	ittet	lt
 800ea3c:	425b      	neglt	r3, r3
 800ea3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ea42:	9307      	strge	r3, [sp, #28]
 800ea44:	9307      	strlt	r3, [sp, #28]
 800ea46:	bfb8      	it	lt
 800ea48:	9204      	strlt	r2, [sp, #16]
 800ea4a:	7823      	ldrb	r3, [r4, #0]
 800ea4c:	2b2e      	cmp	r3, #46	; 0x2e
 800ea4e:	d10c      	bne.n	800ea6a <_vfiprintf_r+0x176>
 800ea50:	7863      	ldrb	r3, [r4, #1]
 800ea52:	2b2a      	cmp	r3, #42	; 0x2a
 800ea54:	d135      	bne.n	800eac2 <_vfiprintf_r+0x1ce>
 800ea56:	9b03      	ldr	r3, [sp, #12]
 800ea58:	1d1a      	adds	r2, r3, #4
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	9203      	str	r2, [sp, #12]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	bfb8      	it	lt
 800ea62:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea66:	3402      	adds	r4, #2
 800ea68:	9305      	str	r3, [sp, #20]
 800ea6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eb50 <_vfiprintf_r+0x25c>
 800ea6e:	7821      	ldrb	r1, [r4, #0]
 800ea70:	2203      	movs	r2, #3
 800ea72:	4650      	mov	r0, sl
 800ea74:	f7f1 fbb4 	bl	80001e0 <memchr>
 800ea78:	b140      	cbz	r0, 800ea8c <_vfiprintf_r+0x198>
 800ea7a:	2340      	movs	r3, #64	; 0x40
 800ea7c:	eba0 000a 	sub.w	r0, r0, sl
 800ea80:	fa03 f000 	lsl.w	r0, r3, r0
 800ea84:	9b04      	ldr	r3, [sp, #16]
 800ea86:	4303      	orrs	r3, r0
 800ea88:	3401      	adds	r4, #1
 800ea8a:	9304      	str	r3, [sp, #16]
 800ea8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea90:	482c      	ldr	r0, [pc, #176]	; (800eb44 <_vfiprintf_r+0x250>)
 800ea92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea96:	2206      	movs	r2, #6
 800ea98:	f7f1 fba2 	bl	80001e0 <memchr>
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	d03f      	beq.n	800eb20 <_vfiprintf_r+0x22c>
 800eaa0:	4b29      	ldr	r3, [pc, #164]	; (800eb48 <_vfiprintf_r+0x254>)
 800eaa2:	bb1b      	cbnz	r3, 800eaec <_vfiprintf_r+0x1f8>
 800eaa4:	9b03      	ldr	r3, [sp, #12]
 800eaa6:	3307      	adds	r3, #7
 800eaa8:	f023 0307 	bic.w	r3, r3, #7
 800eaac:	3308      	adds	r3, #8
 800eaae:	9303      	str	r3, [sp, #12]
 800eab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eab2:	443b      	add	r3, r7
 800eab4:	9309      	str	r3, [sp, #36]	; 0x24
 800eab6:	e767      	b.n	800e988 <_vfiprintf_r+0x94>
 800eab8:	fb0c 3202 	mla	r2, ip, r2, r3
 800eabc:	460c      	mov	r4, r1
 800eabe:	2001      	movs	r0, #1
 800eac0:	e7a5      	b.n	800ea0e <_vfiprintf_r+0x11a>
 800eac2:	2300      	movs	r3, #0
 800eac4:	3401      	adds	r4, #1
 800eac6:	9305      	str	r3, [sp, #20]
 800eac8:	4619      	mov	r1, r3
 800eaca:	f04f 0c0a 	mov.w	ip, #10
 800eace:	4620      	mov	r0, r4
 800ead0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ead4:	3a30      	subs	r2, #48	; 0x30
 800ead6:	2a09      	cmp	r2, #9
 800ead8:	d903      	bls.n	800eae2 <_vfiprintf_r+0x1ee>
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d0c5      	beq.n	800ea6a <_vfiprintf_r+0x176>
 800eade:	9105      	str	r1, [sp, #20]
 800eae0:	e7c3      	b.n	800ea6a <_vfiprintf_r+0x176>
 800eae2:	fb0c 2101 	mla	r1, ip, r1, r2
 800eae6:	4604      	mov	r4, r0
 800eae8:	2301      	movs	r3, #1
 800eaea:	e7f0      	b.n	800eace <_vfiprintf_r+0x1da>
 800eaec:	ab03      	add	r3, sp, #12
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	462a      	mov	r2, r5
 800eaf2:	4b16      	ldr	r3, [pc, #88]	; (800eb4c <_vfiprintf_r+0x258>)
 800eaf4:	a904      	add	r1, sp, #16
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	f7fb fe86 	bl	800a808 <_printf_float>
 800eafc:	4607      	mov	r7, r0
 800eafe:	1c78      	adds	r0, r7, #1
 800eb00:	d1d6      	bne.n	800eab0 <_vfiprintf_r+0x1bc>
 800eb02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb04:	07d9      	lsls	r1, r3, #31
 800eb06:	d405      	bmi.n	800eb14 <_vfiprintf_r+0x220>
 800eb08:	89ab      	ldrh	r3, [r5, #12]
 800eb0a:	059a      	lsls	r2, r3, #22
 800eb0c:	d402      	bmi.n	800eb14 <_vfiprintf_r+0x220>
 800eb0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb10:	f7fb fd2e 	bl	800a570 <__retarget_lock_release_recursive>
 800eb14:	89ab      	ldrh	r3, [r5, #12]
 800eb16:	065b      	lsls	r3, r3, #25
 800eb18:	f53f af12 	bmi.w	800e940 <_vfiprintf_r+0x4c>
 800eb1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb1e:	e711      	b.n	800e944 <_vfiprintf_r+0x50>
 800eb20:	ab03      	add	r3, sp, #12
 800eb22:	9300      	str	r3, [sp, #0]
 800eb24:	462a      	mov	r2, r5
 800eb26:	4b09      	ldr	r3, [pc, #36]	; (800eb4c <_vfiprintf_r+0x258>)
 800eb28:	a904      	add	r1, sp, #16
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	f7fc f910 	bl	800ad50 <_printf_i>
 800eb30:	e7e4      	b.n	800eafc <_vfiprintf_r+0x208>
 800eb32:	bf00      	nop
 800eb34:	0800ee78 	.word	0x0800ee78
 800eb38:	0800ee98 	.word	0x0800ee98
 800eb3c:	0800ee58 	.word	0x0800ee58
 800eb40:	0800f2ec 	.word	0x0800f2ec
 800eb44:	0800f2f6 	.word	0x0800f2f6
 800eb48:	0800a809 	.word	0x0800a809
 800eb4c:	0800e8cf 	.word	0x0800e8cf
 800eb50:	0800f2f2 	.word	0x0800f2f2

0800eb54 <_read_r>:
 800eb54:	b538      	push	{r3, r4, r5, lr}
 800eb56:	4d07      	ldr	r5, [pc, #28]	; (800eb74 <_read_r+0x20>)
 800eb58:	4604      	mov	r4, r0
 800eb5a:	4608      	mov	r0, r1
 800eb5c:	4611      	mov	r1, r2
 800eb5e:	2200      	movs	r2, #0
 800eb60:	602a      	str	r2, [r5, #0]
 800eb62:	461a      	mov	r2, r3
 800eb64:	f7f2 fd0c 	bl	8001580 <_read>
 800eb68:	1c43      	adds	r3, r0, #1
 800eb6a:	d102      	bne.n	800eb72 <_read_r+0x1e>
 800eb6c:	682b      	ldr	r3, [r5, #0]
 800eb6e:	b103      	cbz	r3, 800eb72 <_read_r+0x1e>
 800eb70:	6023      	str	r3, [r4, #0]
 800eb72:	bd38      	pop	{r3, r4, r5, pc}
 800eb74:	200083f0 	.word	0x200083f0

0800eb78 <nan>:
 800eb78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eb80 <nan+0x8>
 800eb7c:	4770      	bx	lr
 800eb7e:	bf00      	nop
 800eb80:	00000000 	.word	0x00000000
 800eb84:	7ff80000 	.word	0x7ff80000

0800eb88 <strncmp>:
 800eb88:	b510      	push	{r4, lr}
 800eb8a:	b17a      	cbz	r2, 800ebac <strncmp+0x24>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	3901      	subs	r1, #1
 800eb90:	1884      	adds	r4, r0, r2
 800eb92:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eb96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800eb9a:	4290      	cmp	r0, r2
 800eb9c:	d101      	bne.n	800eba2 <strncmp+0x1a>
 800eb9e:	42a3      	cmp	r3, r4
 800eba0:	d101      	bne.n	800eba6 <strncmp+0x1e>
 800eba2:	1a80      	subs	r0, r0, r2
 800eba4:	bd10      	pop	{r4, pc}
 800eba6:	2800      	cmp	r0, #0
 800eba8:	d1f3      	bne.n	800eb92 <strncmp+0xa>
 800ebaa:	e7fa      	b.n	800eba2 <strncmp+0x1a>
 800ebac:	4610      	mov	r0, r2
 800ebae:	e7f9      	b.n	800eba4 <strncmp+0x1c>

0800ebb0 <__ascii_wctomb>:
 800ebb0:	b149      	cbz	r1, 800ebc6 <__ascii_wctomb+0x16>
 800ebb2:	2aff      	cmp	r2, #255	; 0xff
 800ebb4:	bf85      	ittet	hi
 800ebb6:	238a      	movhi	r3, #138	; 0x8a
 800ebb8:	6003      	strhi	r3, [r0, #0]
 800ebba:	700a      	strbls	r2, [r1, #0]
 800ebbc:	f04f 30ff 	movhi.w	r0, #4294967295
 800ebc0:	bf98      	it	ls
 800ebc2:	2001      	movls	r0, #1
 800ebc4:	4770      	bx	lr
 800ebc6:	4608      	mov	r0, r1
 800ebc8:	4770      	bx	lr

0800ebca <abort>:
 800ebca:	b508      	push	{r3, lr}
 800ebcc:	2006      	movs	r0, #6
 800ebce:	f000 f897 	bl	800ed00 <raise>
 800ebd2:	2001      	movs	r0, #1
 800ebd4:	f7f2 fcca 	bl	800156c <_exit>

0800ebd8 <_fstat_r>:
 800ebd8:	b538      	push	{r3, r4, r5, lr}
 800ebda:	4d07      	ldr	r5, [pc, #28]	; (800ebf8 <_fstat_r+0x20>)
 800ebdc:	2300      	movs	r3, #0
 800ebde:	4604      	mov	r4, r0
 800ebe0:	4608      	mov	r0, r1
 800ebe2:	4611      	mov	r1, r2
 800ebe4:	602b      	str	r3, [r5, #0]
 800ebe6:	f7f2 fd10 	bl	800160a <_fstat>
 800ebea:	1c43      	adds	r3, r0, #1
 800ebec:	d102      	bne.n	800ebf4 <_fstat_r+0x1c>
 800ebee:	682b      	ldr	r3, [r5, #0]
 800ebf0:	b103      	cbz	r3, 800ebf4 <_fstat_r+0x1c>
 800ebf2:	6023      	str	r3, [r4, #0]
 800ebf4:	bd38      	pop	{r3, r4, r5, pc}
 800ebf6:	bf00      	nop
 800ebf8:	200083f0 	.word	0x200083f0

0800ebfc <_isatty_r>:
 800ebfc:	b538      	push	{r3, r4, r5, lr}
 800ebfe:	4d06      	ldr	r5, [pc, #24]	; (800ec18 <_isatty_r+0x1c>)
 800ec00:	2300      	movs	r3, #0
 800ec02:	4604      	mov	r4, r0
 800ec04:	4608      	mov	r0, r1
 800ec06:	602b      	str	r3, [r5, #0]
 800ec08:	f7f2 fd0f 	bl	800162a <_isatty>
 800ec0c:	1c43      	adds	r3, r0, #1
 800ec0e:	d102      	bne.n	800ec16 <_isatty_r+0x1a>
 800ec10:	682b      	ldr	r3, [r5, #0]
 800ec12:	b103      	cbz	r3, 800ec16 <_isatty_r+0x1a>
 800ec14:	6023      	str	r3, [r4, #0]
 800ec16:	bd38      	pop	{r3, r4, r5, pc}
 800ec18:	200083f0 	.word	0x200083f0

0800ec1c <memmove>:
 800ec1c:	4288      	cmp	r0, r1
 800ec1e:	b510      	push	{r4, lr}
 800ec20:	eb01 0402 	add.w	r4, r1, r2
 800ec24:	d902      	bls.n	800ec2c <memmove+0x10>
 800ec26:	4284      	cmp	r4, r0
 800ec28:	4623      	mov	r3, r4
 800ec2a:	d807      	bhi.n	800ec3c <memmove+0x20>
 800ec2c:	1e43      	subs	r3, r0, #1
 800ec2e:	42a1      	cmp	r1, r4
 800ec30:	d008      	beq.n	800ec44 <memmove+0x28>
 800ec32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec3a:	e7f8      	b.n	800ec2e <memmove+0x12>
 800ec3c:	4402      	add	r2, r0
 800ec3e:	4601      	mov	r1, r0
 800ec40:	428a      	cmp	r2, r1
 800ec42:	d100      	bne.n	800ec46 <memmove+0x2a>
 800ec44:	bd10      	pop	{r4, pc}
 800ec46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec4e:	e7f7      	b.n	800ec40 <memmove+0x24>

0800ec50 <_realloc_r>:
 800ec50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec54:	4680      	mov	r8, r0
 800ec56:	4614      	mov	r4, r2
 800ec58:	460e      	mov	r6, r1
 800ec5a:	b921      	cbnz	r1, 800ec66 <_realloc_r+0x16>
 800ec5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec60:	4611      	mov	r1, r2
 800ec62:	f7fb bcbd 	b.w	800a5e0 <_malloc_r>
 800ec66:	b92a      	cbnz	r2, 800ec74 <_realloc_r+0x24>
 800ec68:	f7ff fc72 	bl	800e550 <_free_r>
 800ec6c:	4625      	mov	r5, r4
 800ec6e:	4628      	mov	r0, r5
 800ec70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec74:	f000 f860 	bl	800ed38 <_malloc_usable_size_r>
 800ec78:	4284      	cmp	r4, r0
 800ec7a:	4607      	mov	r7, r0
 800ec7c:	d802      	bhi.n	800ec84 <_realloc_r+0x34>
 800ec7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec82:	d812      	bhi.n	800ecaa <_realloc_r+0x5a>
 800ec84:	4621      	mov	r1, r4
 800ec86:	4640      	mov	r0, r8
 800ec88:	f7fb fcaa 	bl	800a5e0 <_malloc_r>
 800ec8c:	4605      	mov	r5, r0
 800ec8e:	2800      	cmp	r0, #0
 800ec90:	d0ed      	beq.n	800ec6e <_realloc_r+0x1e>
 800ec92:	42bc      	cmp	r4, r7
 800ec94:	4622      	mov	r2, r4
 800ec96:	4631      	mov	r1, r6
 800ec98:	bf28      	it	cs
 800ec9a:	463a      	movcs	r2, r7
 800ec9c:	f7fb fc69 	bl	800a572 <memcpy>
 800eca0:	4631      	mov	r1, r6
 800eca2:	4640      	mov	r0, r8
 800eca4:	f7ff fc54 	bl	800e550 <_free_r>
 800eca8:	e7e1      	b.n	800ec6e <_realloc_r+0x1e>
 800ecaa:	4635      	mov	r5, r6
 800ecac:	e7df      	b.n	800ec6e <_realloc_r+0x1e>

0800ecae <_raise_r>:
 800ecae:	291f      	cmp	r1, #31
 800ecb0:	b538      	push	{r3, r4, r5, lr}
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	460d      	mov	r5, r1
 800ecb6:	d904      	bls.n	800ecc2 <_raise_r+0x14>
 800ecb8:	2316      	movs	r3, #22
 800ecba:	6003      	str	r3, [r0, #0]
 800ecbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc0:	bd38      	pop	{r3, r4, r5, pc}
 800ecc2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ecc4:	b112      	cbz	r2, 800eccc <_raise_r+0x1e>
 800ecc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ecca:	b94b      	cbnz	r3, 800ece0 <_raise_r+0x32>
 800eccc:	4620      	mov	r0, r4
 800ecce:	f000 f831 	bl	800ed34 <_getpid_r>
 800ecd2:	462a      	mov	r2, r5
 800ecd4:	4601      	mov	r1, r0
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecdc:	f000 b818 	b.w	800ed10 <_kill_r>
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d00a      	beq.n	800ecfa <_raise_r+0x4c>
 800ece4:	1c59      	adds	r1, r3, #1
 800ece6:	d103      	bne.n	800ecf0 <_raise_r+0x42>
 800ece8:	2316      	movs	r3, #22
 800ecea:	6003      	str	r3, [r0, #0]
 800ecec:	2001      	movs	r0, #1
 800ecee:	e7e7      	b.n	800ecc0 <_raise_r+0x12>
 800ecf0:	2400      	movs	r4, #0
 800ecf2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ecf6:	4628      	mov	r0, r5
 800ecf8:	4798      	blx	r3
 800ecfa:	2000      	movs	r0, #0
 800ecfc:	e7e0      	b.n	800ecc0 <_raise_r+0x12>
	...

0800ed00 <raise>:
 800ed00:	4b02      	ldr	r3, [pc, #8]	; (800ed0c <raise+0xc>)
 800ed02:	4601      	mov	r1, r0
 800ed04:	6818      	ldr	r0, [r3, #0]
 800ed06:	f7ff bfd2 	b.w	800ecae <_raise_r>
 800ed0a:	bf00      	nop
 800ed0c:	20000078 	.word	0x20000078

0800ed10 <_kill_r>:
 800ed10:	b538      	push	{r3, r4, r5, lr}
 800ed12:	4d07      	ldr	r5, [pc, #28]	; (800ed30 <_kill_r+0x20>)
 800ed14:	2300      	movs	r3, #0
 800ed16:	4604      	mov	r4, r0
 800ed18:	4608      	mov	r0, r1
 800ed1a:	4611      	mov	r1, r2
 800ed1c:	602b      	str	r3, [r5, #0]
 800ed1e:	f7f2 fc15 	bl	800154c <_kill>
 800ed22:	1c43      	adds	r3, r0, #1
 800ed24:	d102      	bne.n	800ed2c <_kill_r+0x1c>
 800ed26:	682b      	ldr	r3, [r5, #0]
 800ed28:	b103      	cbz	r3, 800ed2c <_kill_r+0x1c>
 800ed2a:	6023      	str	r3, [r4, #0]
 800ed2c:	bd38      	pop	{r3, r4, r5, pc}
 800ed2e:	bf00      	nop
 800ed30:	200083f0 	.word	0x200083f0

0800ed34 <_getpid_r>:
 800ed34:	f7f2 bc02 	b.w	800153c <_getpid>

0800ed38 <_malloc_usable_size_r>:
 800ed38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed3c:	1f18      	subs	r0, r3, #4
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	bfbc      	itt	lt
 800ed42:	580b      	ldrlt	r3, [r1, r0]
 800ed44:	18c0      	addlt	r0, r0, r3
 800ed46:	4770      	bx	lr

0800ed48 <_init>:
 800ed48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed4a:	bf00      	nop
 800ed4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed4e:	bc08      	pop	{r3}
 800ed50:	469e      	mov	lr, r3
 800ed52:	4770      	bx	lr

0800ed54 <_fini>:
 800ed54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed56:	bf00      	nop
 800ed58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed5a:	bc08      	pop	{r3}
 800ed5c:	469e      	mov	lr, r3
 800ed5e:	4770      	bx	lr
