
assignment2_mx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dab0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800dc40  0800dc40  0001dc40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1d8  0800e1d8  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1d8  0800e1d8  0001e1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1e0  0800e1e0  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1e0  0800e1e0  0001e1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1e4  0800e1e4  0001e1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800e1e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ae8  20000218  0800e400  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00004200  20005d00  0800e400  00025d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e69  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e60  00000000  00000000  000430b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce8  00000000  00000000  00047f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa0  00000000  00000000  00049c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d36c  00000000  00000000  0004b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000251bc  00000000  00000000  00078a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104531  00000000  00000000  0009dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a20f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bc4  00000000  00000000  001a214c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc28 	.word	0x0800dc28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	0800dc28 	.word	0x0800dc28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_DMA_Init+0x48>)
 8001000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <MX_DMA_Init+0x48>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6493      	str	r3, [r2, #72]	; 0x48
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <MX_DMA_Init+0x48>)
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2105      	movs	r1, #5
 800101a:	200e      	movs	r0, #14
 800101c:	f001 f946 	bl	80022ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001020:	200e      	movs	r0, #14
 8001022:	f001 f95f 	bl	80022e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2105      	movs	r1, #5
 800102a:	200f      	movs	r0, #15
 800102c:	f001 f93e 	bl	80022ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001030:	200f      	movs	r0, #15
 8001032:	f001 f957 	bl	80022e4 <HAL_NVIC_EnableIRQ>

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <vApplicationGetIdleTaskMemory+0x2c>)
 8001054:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <vApplicationGetIdleTaskMemory+0x30>)
 800105a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000250 	.word	0x20000250
 8001074:	20000304 	.word	0x20000304

08001078 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001088:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <vApplicationGetTimerTaskMemory+0x30>)
 800108e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001096:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	20000504 	.word	0x20000504
 80010a8:	200005b8 	.word	0x200005b8

080010ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010ac:	b5b0      	push	{r4, r5, r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af02      	add	r7, sp, #8
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	UART1_queue = xQueueCreate(5,sizeof(queue_UART_msg_t*));
 80010b2:	2200      	movs	r2, #0
 80010b4:	2104      	movs	r1, #4
 80010b6:	2005      	movs	r0, #5
 80010b8:	f005 fd28 	bl	8006b0c <xQueueGenericCreate>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a2a      	ldr	r2, [pc, #168]	; (8001168 <MX_FREERTOS_Init+0xbc>)
 80010c0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <MX_FREERTOS_Init+0xc0>)
 80010c4:	463c      	mov	r4, r7
 80010c6:	461d      	mov	r5, r3
 80010c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010d4:	463b      	mov	r3, r7
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f005 fb23 	bl	8006724 <osThreadCreate>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a23      	ldr	r2, [pc, #140]	; (8001170 <MX_FREERTOS_Init+0xc4>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  BaseType_t status =0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
	if (UART1_queue != NULL){
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_FREERTOS_Init+0xbc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d036      	beq.n	800115e <MX_FREERTOS_Init+0xb2>
		//error somehow? lol
	  status = xTaskCreate(lis_task, "lis_task", configMINIMAL_STACK_SIZE, (void*)1,
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <MX_FREERTOS_Init+0xc8>)
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	2307      	movs	r3, #7
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	2280      	movs	r2, #128	; 0x80
 80010fc:	491e      	ldr	r1, [pc, #120]	; (8001178 <MX_FREERTOS_Init+0xcc>)
 80010fe:	481f      	ldr	r0, [pc, #124]	; (800117c <MX_FREERTOS_Init+0xd0>)
 8001100:	f006 f9a3 	bl	800744a <xTaskCreate>
 8001104:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 7, &lis_task_handle);
	  status = xTaskCreate(uart1_task, "uart_task", configMINIMAL_STACK_SIZE, (void*)1,
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_FREERTOS_Init+0xd4>)
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	2307      	movs	r3, #7
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2301      	movs	r3, #1
 8001110:	2280      	movs	r2, #128	; 0x80
 8001112:	491c      	ldr	r1, [pc, #112]	; (8001184 <MX_FREERTOS_Init+0xd8>)
 8001114:	481c      	ldr	r0, [pc, #112]	; (8001188 <MX_FREERTOS_Init+0xdc>)
 8001116:	f006 f998 	bl	800744a <xTaskCreate>
 800111a:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 7, &uart1_task_handle);
	  status = xTaskCreate(lps_task, "lps_task", configMINIMAL_STACK_SIZE, (void*)1,
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_FREERTOS_Init+0xe0>)
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	2307      	movs	r3, #7
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	4919      	ldr	r1, [pc, #100]	; (8001190 <MX_FREERTOS_Init+0xe4>)
 800112a:	481a      	ldr	r0, [pc, #104]	; (8001194 <MX_FREERTOS_Init+0xe8>)
 800112c:	f006 f98d 	bl	800744a <xTaskCreate>
 8001130:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 7, &lps_task_handle);
	  status = xTaskCreate(hts_task, "hts_task", configMINIMAL_STACK_SIZE, (void*)1,
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_FREERTOS_Init+0xec>)
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	2307      	movs	r3, #7
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	2280      	movs	r2, #128	; 0x80
 800113e:	4917      	ldr	r1, [pc, #92]	; (800119c <MX_FREERTOS_Init+0xf0>)
 8001140:	4817      	ldr	r0, [pc, #92]	; (80011a0 <MX_FREERTOS_Init+0xf4>)
 8001142:	f006 f982 	bl	800744a <xTaskCreate>
 8001146:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 7, &hts_task_handle);
	  status = xTaskCreate(lsm_task, "lsm_task", configMINIMAL_STACK_SIZE, (void*)1,
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_FREERTOS_Init+0xf8>)
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	2307      	movs	r3, #7
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	4914      	ldr	r1, [pc, #80]	; (80011a8 <MX_FREERTOS_Init+0xfc>)
 8001156:	4815      	ldr	r0, [pc, #84]	; (80011ac <MX_FREERTOS_Init+0x100>)
 8001158:	f006 f977 	bl	800744a <xTaskCreate>
 800115c:	61f8      	str	r0, [r7, #28]
			  /*priority*/ (UBaseType_t) 7, &lsm_task_handle);
	}
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800115e:	bf00      	nop
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bdb0      	pop	{r4, r5, r7, pc}
 8001166:	bf00      	nop
 8001168:	20000248 	.word	0x20000248
 800116c:	0800dc88 	.word	0x0800dc88
 8001170:	2000024c 	.word	0x2000024c
 8001174:	20000238 	.word	0x20000238
 8001178:	0800dc4c 	.word	0x0800dc4c
 800117c:	080018f5 	.word	0x080018f5
 8001180:	20000234 	.word	0x20000234
 8001184:	0800dc58 	.word	0x0800dc58
 8001188:	08001af5 	.word	0x08001af5
 800118c:	2000023c 	.word	0x2000023c
 8001190:	0800dc64 	.word	0x0800dc64
 8001194:	08001939 	.word	0x08001939
 8001198:	20000244 	.word	0x20000244
 800119c:	0800dc70 	.word	0x0800dc70
 80011a0:	080018d7 	.word	0x080018d7
 80011a4:	20000240 	.word	0x20000240
 80011a8:	0800dc7c 	.word	0x0800dc7c
 80011ac:	08001959 	.word	0x08001959

080011b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 80011b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80011bc:	f005 fafe 	bl	80067bc <osDelay>
 80011c0:	e7fa      	b.n	80011b8 <StartDefaultTask+0x8>
	...

080011c4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_GPIO_Init+0x68>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a13      	ldr	r2, [pc, #76]	; (800122c <MX_GPIO_Init+0x68>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_GPIO_Init+0x68>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_GPIO_Init+0x68>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a0d      	ldr	r2, [pc, #52]	; (800122c <MX_GPIO_Init+0x68>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <MX_GPIO_Init+0x68>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSHBUTTON_Pin;
 800120a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800120e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001214:	2301      	movs	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSHBUTTON_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4619      	mov	r1, r3
 800121e:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_GPIO_Init+0x6c>)
 8001220:	f001 fae4 	bl	80027ec <HAL_GPIO_Init>

}
 8001224:	bf00      	nop
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000
 8001230:	48000800 	.word	0x48000800

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001238:	f000 ff48 	bl	80020cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123c:	f000 f80b 	bl	8001256 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001240:	f7ff ffc0 	bl	80011c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001244:	f7ff fed8 	bl	8000ff8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001248:	f000 fa1e 	bl	8001688 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800124c:	f7ff ff2e 	bl	80010ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001250:	f005 fa61 	bl	8006716 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001254:	e7fe      	b.n	8001254 <main+0x20>

08001256 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b096      	sub	sp, #88	; 0x58
 800125a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2244      	movs	r2, #68	; 0x44
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f008 f902 	bl	800946e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001278:	f44f 7000 	mov.w	r0, #512	; 0x200
 800127c:	f002 fa60 	bl	8003740 <HAL_PWREx_ControlVoltageScaling>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001286:	f000 f83d 	bl	8001304 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128a:	2302      	movs	r3, #2
 800128c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001292:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001294:	2310      	movs	r3, #16
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001298:	2300      	movs	r3, #0
 800129a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 faa3 	bl	80037ec <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80012ac:	f000 f82a 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b0:	230f      	movs	r3, #15
 80012b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b4:	2301      	movs	r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 fe6b 	bl	8003fa4 <HAL_RCC_ClockConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012d4:	f000 f816 	bl	8001304 <Error_Handler>
  }
}
 80012d8:	bf00      	nop
 80012da:	3758      	adds	r7, #88	; 0x58
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012f2:	f000 ff03 	bl	80020fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40001000 	.word	0x40001000

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_MspInit+0x4c>)
 8001318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131a:	4a10      	ldr	r2, [pc, #64]	; (800135c <HAL_MspInit+0x4c>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6613      	str	r3, [r2, #96]	; 0x60
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_MspInit+0x4c>)
 8001324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_MspInit+0x4c>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <HAL_MspInit+0x4c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6593      	str	r3, [r2, #88]	; 0x58
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_MspInit+0x4c>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	210f      	movs	r1, #15
 800134a:	f06f 0001 	mvn.w	r0, #1
 800134e:	f000 ffad 	bl	80022ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000

08001360 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08e      	sub	sp, #56	; 0x38
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800136e:	4b34      	ldr	r3, [pc, #208]	; (8001440 <HAL_InitTick+0xe0>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	4a33      	ldr	r2, [pc, #204]	; (8001440 <HAL_InitTick+0xe0>)
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	6593      	str	r3, [r2, #88]	; 0x58
 800137a:	4b31      	ldr	r3, [pc, #196]	; (8001440 <HAL_InitTick+0xe0>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001386:	f107 0210 	add.w	r2, r7, #16
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f002 ffcb 	bl	800432c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800139a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139c:	2b00      	cmp	r3, #0
 800139e:	d103      	bne.n	80013a8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013a0:	f002 ff98 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 80013a4:	6378      	str	r0, [r7, #52]	; 0x34
 80013a6:	e004      	b.n	80013b2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013a8:	f002 ff94 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 80013ac:	4603      	mov	r3, r0
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b4:	4a23      	ldr	r2, [pc, #140]	; (8001444 <HAL_InitTick+0xe4>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9b      	lsrs	r3, r3, #18
 80013bc:	3b01      	subs	r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <HAL_InitTick+0xe8>)
 80013c2:	4a22      	ldr	r2, [pc, #136]	; (800144c <HAL_InitTick+0xec>)
 80013c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <HAL_InitTick+0xe8>)
 80013c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ce:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <HAL_InitTick+0xe8>)
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <HAL_InitTick+0xe8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_InitTick+0xe8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_InitTick+0xe8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013e6:	4818      	ldr	r0, [pc, #96]	; (8001448 <HAL_InitTick+0xe8>)
 80013e8:	f003 fcee 	bl	8004dc8 <HAL_TIM_Base_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d11b      	bne.n	8001432 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013fa:	4813      	ldr	r0, [pc, #76]	; (8001448 <HAL_InitTick+0xe8>)
 80013fc:	f003 fd46 	bl	8004e8c <HAL_TIM_Base_Start_IT>
 8001400:	4603      	mov	r3, r0
 8001402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001406:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800140a:	2b00      	cmp	r3, #0
 800140c:	d111      	bne.n	8001432 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800140e:	2036      	movs	r0, #54	; 0x36
 8001410:	f000 ff68 	bl	80022e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b0f      	cmp	r3, #15
 8001418:	d808      	bhi.n	800142c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800141a:	2200      	movs	r2, #0
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	2036      	movs	r0, #54	; 0x36
 8001420:	f000 ff44 	bl	80022ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_InitTick+0xf0>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e002      	b.n	8001432 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001432:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001436:	4618      	mov	r0, r3
 8001438:	3738      	adds	r7, #56	; 0x38
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	431bde83 	.word	0x431bde83
 8001448:	200009b8 	.word	0x200009b8
 800144c:	40001000 	.word	0x40001000
 8001450:	20000038 	.word	0x20000038

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <NMI_Handler+0x4>

0800145a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <DMA1_Channel4_IRQHandler+0x10>)
 800148e:	f001 f8ce 	bl	800262e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000ad4 	.word	0x20000ad4

0800149c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <DMA1_Channel5_IRQHandler+0x10>)
 80014a2:	f001 f8c4 	bl	800262e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000a8c 	.word	0x20000a8c

080014b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <USART1_IRQHandler+0x10>)
 80014b6:	f004 f837 	bl	8005528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000a08 	.word	0x20000a08

080014c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <TIM6_DAC_IRQHandler+0x10>)
 80014ca:	f003 fd4f 	bl	8004f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200009b8 	.word	0x200009b8

080014d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return 1;
 80014dc:	2301      	movs	r3, #1
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <_kill>:

int _kill(int pid, int sig)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014f2:	f007 fe8b 	bl	800920c <__errno>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2216      	movs	r2, #22
 80014fa:	601a      	str	r2, [r3, #0]
  return -1;
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_exit>:

void _exit (int status)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ffe7 	bl	80014e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800151a:	e7fe      	b.n	800151a <_exit+0x12>

0800151c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e00a      	b.n	8001544 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800152e:	f3af 8000 	nop.w
 8001532:	4601      	mov	r1, r0
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	60ba      	str	r2, [r7, #8]
 800153a:	b2ca      	uxtb	r2, r1
 800153c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dbf0      	blt.n	800152e <_read+0x12>
  }

  return len;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e009      	b.n	800157c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	60ba      	str	r2, [r7, #8]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	dbf1      	blt.n	8001568 <_write+0x12>
  }
  return len;
 8001584:	687b      	ldr	r3, [r7, #4]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <_close>:

int _close(int file)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b6:	605a      	str	r2, [r3, #4]
  return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_isatty>:

int _isatty(int file)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f007 fdf0 	bl	800920c <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20018000 	.word	0x20018000
 8001658:	00003000 	.word	0x00003000
 800165c:	20000a04 	.word	0x20000a04
 8001660:	20005d00 	.word	0x20005d00

08001664 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_USART1_UART_Init+0x58>)
 800168e:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <MX_USART1_UART_Init+0x5c>)
 8001690:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <MX_USART1_UART_Init+0x58>)
 8001694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001698:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_USART1_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_USART1_UART_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_USART1_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_USART1_UART_Init+0x58>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <MX_USART1_UART_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_USART1_UART_Init+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <MX_USART1_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_USART1_UART_Init+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_USART1_UART_Init+0x58>)
 80016cc:	f003 fe4e 	bl	800536c <HAL_UART_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016d6:	f7ff fe15 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000a08 	.word	0x20000a08
 80016e4:	40013800 	.word	0x40013800

080016e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0ac      	sub	sp, #176	; 0xb0
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2288      	movs	r2, #136	; 0x88
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f007 feb0 	bl	800946e <memset>
  if(uartHandle->Instance==USART1)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a4e      	ldr	r2, [pc, #312]	; (800184c <HAL_UART_MspInit+0x164>)
 8001714:	4293      	cmp	r3, r2
 8001716:	f040 8095 	bne.w	8001844 <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800171a:	2301      	movs	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800171e:	2300      	movs	r3, #0
 8001720:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4618      	mov	r0, r3
 8001728:	f002 fe92 	bl	8004450 <HAL_RCCEx_PeriphCLKConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001732:	f7ff fde7 	bl	8001304 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <HAL_UART_MspInit+0x168>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173a:	4a45      	ldr	r2, [pc, #276]	; (8001850 <HAL_UART_MspInit+0x168>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6613      	str	r3, [r2, #96]	; 0x60
 8001742:	4b43      	ldr	r3, [pc, #268]	; (8001850 <HAL_UART_MspInit+0x168>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	4b40      	ldr	r3, [pc, #256]	; (8001850 <HAL_UART_MspInit+0x168>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	4a3f      	ldr	r2, [pc, #252]	; (8001850 <HAL_UART_MspInit+0x168>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_UART_MspInit+0x168>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001766:	23c0      	movs	r3, #192	; 0xc0
 8001768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800177e:	2307      	movs	r3, #7
 8001780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001788:	4619      	mov	r1, r3
 800178a:	4832      	ldr	r0, [pc, #200]	; (8001854 <HAL_UART_MspInit+0x16c>)
 800178c:	f001 f82e 	bl	80027ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001790:	4b31      	ldr	r3, [pc, #196]	; (8001858 <HAL_UART_MspInit+0x170>)
 8001792:	4a32      	ldr	r2, [pc, #200]	; (800185c <HAL_UART_MspInit+0x174>)
 8001794:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <HAL_UART_MspInit+0x170>)
 8001798:	2202      	movs	r2, #2
 800179a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800179c:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <HAL_UART_MspInit+0x170>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <HAL_UART_MspInit+0x170>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <HAL_UART_MspInit+0x170>)
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <HAL_UART_MspInit+0x170>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <HAL_UART_MspInit+0x170>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_UART_MspInit+0x170>)
 80017bc:	2220      	movs	r2, #32
 80017be:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <HAL_UART_MspInit+0x170>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017c6:	4824      	ldr	r0, [pc, #144]	; (8001858 <HAL_UART_MspInit+0x170>)
 80017c8:	f000 fd9a 	bl	8002300 <HAL_DMA_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80017d2:	f7ff fd97 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <HAL_UART_MspInit+0x170>)
 80017da:	671a      	str	r2, [r3, #112]	; 0x70
 80017dc:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <HAL_UART_MspInit+0x170>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <HAL_UART_MspInit+0x178>)
 80017e4:	4a1f      	ldr	r2, [pc, #124]	; (8001864 <HAL_UART_MspInit+0x17c>)
 80017e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_UART_MspInit+0x178>)
 80017ea:	2202      	movs	r2, #2
 80017ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <HAL_UART_MspInit+0x178>)
 80017f0:	2210      	movs	r2, #16
 80017f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_UART_MspInit+0x178>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_UART_MspInit+0x178>)
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_UART_MspInit+0x178>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <HAL_UART_MspInit+0x178>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_UART_MspInit+0x178>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_UART_MspInit+0x178>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001818:	4811      	ldr	r0, [pc, #68]	; (8001860 <HAL_UART_MspInit+0x178>)
 800181a:	f000 fd71 	bl	8002300 <HAL_DMA_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8001824:	f7ff fd6e 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <HAL_UART_MspInit+0x178>)
 800182c:	66da      	str	r2, [r3, #108]	; 0x6c
 800182e:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <HAL_UART_MspInit+0x178>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2105      	movs	r1, #5
 8001838:	2025      	movs	r0, #37	; 0x25
 800183a:	f000 fd37 	bl	80022ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800183e:	2025      	movs	r0, #37	; 0x25
 8001840:	f000 fd50 	bl	80022e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001844:	bf00      	nop
 8001846:	37b0      	adds	r7, #176	; 0xb0
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40013800 	.word	0x40013800
 8001850:	40021000 	.word	0x40021000
 8001854:	48000400 	.word	0x48000400
 8001858:	20000a8c 	.word	0x20000a8c
 800185c:	40020058 	.word	0x40020058
 8001860:	20000ad4 	.word	0x20000ad4
 8001864:	40020044 	.word	0x40020044

08001868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800186c:	f7ff fefa 	bl	8001664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001872:	490d      	ldr	r1, [pc, #52]	; (80018a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <LoopForever+0xe>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001888:	4c0a      	ldr	r4, [pc, #40]	; (80018b4 <LoopForever+0x16>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001896:	f007 fdb5 	bl	8009404 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800189a:	f7ff fccb 	bl	8001234 <main>

0800189e <LoopForever>:

LoopForever:
    b LoopForever
 800189e:	e7fe      	b.n	800189e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80018ac:	0800e1e8 	.word	0x0800e1e8
  ldr r2, =_sbss
 80018b0:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80018b4:	20005d00 	.word	0x20005d00

080018b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC1_2_IRQHandler>

080018ba <hts_init>:
#include "rtos_incs.h"
#include "stm32l475e_iot01_tsensor.h"
#include "stdio.h"
#include "hts_task.h"

void hts_init(){
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <hts_loop>:

void hts_loop(){
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <hts_task>:

void hts_task(void* pvParameters){
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
	hts_init();
 80018de:	f7ff ffec 	bl	80018ba <hts_init>
	vTaskDelay(5);
 80018e2:	2005      	movs	r0, #5
 80018e4:	f005 ff7c 	bl	80077e0 <vTaskDelay>
	while(1){
		hts_loop();
 80018e8:	f7ff ffee 	bl	80018c8 <hts_loop>
		vTaskDelay(5);
 80018ec:	2005      	movs	r0, #5
 80018ee:	f005 ff77 	bl	80077e0 <vTaskDelay>
		hts_loop();
 80018f2:	e7f9      	b.n	80018e8 <hts_task+0x12>

080018f4 <lis_task>:

void lis_loop(){

}

void lis_task(void* pvParameters){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	vTaskDelay(5);
 80018fc:	2005      	movs	r0, #5
 80018fe:	f005 ff6f 	bl	80077e0 <vTaskDelay>
	uint8_t toggle = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
	while(1){
		vTaskDelay(5);
 8001906:	2005      	movs	r0, #5
 8001908:	f005 ff6a 	bl	80077e0 <vTaskDelay>
		toggle = !toggle;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf0c      	ite	eq
 8001912:	2301      	moveq	r3, #1
 8001914:	2300      	movne	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(5);
 800191a:	e7f4      	b.n	8001906 <lis_task+0x12>

0800191c <lps_init>:

#include "rtos_incs.h"
#include "stm32l475e_iot01_psensor.h"
#include "stdio.h"
#include "lps_task.h"
void lps_init(){
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <lps_loop>:

void lps_loop(){
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <lps_task>:

void lps_task(void* argument){
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	lps_init();
 8001940:	f7ff ffec 	bl	800191c <lps_init>
	vTaskDelay(5);
 8001944:	2005      	movs	r0, #5
 8001946:	f005 ff4b 	bl	80077e0 <vTaskDelay>
	while(1){
		lps_loop();
 800194a:	f7ff ffee 	bl	800192a <lps_loop>
		vTaskDelay(5);
 800194e:	2005      	movs	r0, #5
 8001950:	f005 ff46 	bl	80077e0 <vTaskDelay>
		lps_loop();
 8001954:	e7f9      	b.n	800194a <lps_task+0x12>
	...

08001958 <lsm_task>:

void lsm_loop(){

}

void lsm_task(void* argument){
 8001958:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800195c:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8001960:	af04      	add	r7, sp, #16
 8001962:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001966:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800196a:	6018      	str	r0, [r3, #0]
	BSP_ACCELERO_Init();
 800196c:	f000 fa30 	bl	8001dd0 <BSP_ACCELERO_Init>
	char tx_buffer[256];
	int tx_len;
	int16_t accel_data_i16[3] = { 0 };
 8001970:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001974:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	809a      	strh	r2, [r3, #4]
	float accel_data[3];			// array to store the x, y and z readings.
	while(1){
		TickType_t last_wake_time = xTaskGetTickCount();
 800197e:	f006 f87d 	bl	8007a7c <xTaskGetTickCount>
 8001982:	4602      	mov	r2, r0
 8001984:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001988:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800198c:	601a      	str	r2, [r3, #0]
		BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
 800198e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001992:	4618      	mov	r0, r3
 8001994:	f000 fa5a 	bl	8001e4c <BSP_ACCELERO_AccGetXYZ>
		// the function above returns 16 bit integers which are acceleration in mg (9.8/1000 m/s^2).
		// Converting to float to print the actual acceleration.
		accel_data[0] = (float)accel_data_i16[0] * (9.8/1000.0f);
 8001998:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800199c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ac:	ee17 0a90 	vmov	r0, s15
 80019b0:	f7fe fdca 	bl	8000548 <__aeabi_f2d>
 80019b4:	a34d      	add	r3, pc, #308	; (adr r3, 8001aec <lsm_task+0x194>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	f7fe fe1d 	bl	80005f8 <__aeabi_dmul>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff f90f 	bl	8000be8 <__aeabi_d2f>
 80019ca:	4602      	mov	r2, r0
 80019cc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80019d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019d4:	601a      	str	r2, [r3, #0]
		accel_data[1] = (float)accel_data_i16[1] * (9.8/1000.0f);
 80019d6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80019da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ea:	ee17 0a90 	vmov	r0, s15
 80019ee:	f7fe fdab 	bl	8000548 <__aeabi_f2d>
 80019f2:	a33e      	add	r3, pc, #248	; (adr r3, 8001aec <lsm_task+0x194>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fdfe 	bl	80005f8 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f8f0 	bl	8000be8 <__aeabi_d2f>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a0e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a12:	605a      	str	r2, [r3, #4]
		accel_data[2] = (float)accel_data_i16[2] * (9.8/1000.0f);
 8001a14:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a28:	ee17 0a90 	vmov	r0, s15
 8001a2c:	f7fe fd8c 	bl	8000548 <__aeabi_f2d>
 8001a30:	a32e      	add	r3, pc, #184	; (adr r3, 8001aec <lsm_task+0x194>)
 8001a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a36:	f7fe fddf 	bl	80005f8 <__aeabi_dmul>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f7ff f8d1 	bl	8000be8 <__aeabi_d2f>
 8001a46:	4602      	mov	r2, r0
 8001a48:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a50:	609a      	str	r2, [r3, #8]
		tx_len = sprintf((char*)tx_buffer,"AccelX : %f; Accel Y: %f; Accel Z: %f\n", accel_data[0], accel_data[1], accel_data[2]);
 8001a52:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a56:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fd73 	bl	8000548 <__aeabi_f2d>
 8001a62:	4680      	mov	r8, r0
 8001a64:	4689      	mov	r9, r1
 8001a66:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a6a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd69 	bl	8000548 <__aeabi_f2d>
 8001a76:	4604      	mov	r4, r0
 8001a78:	460d      	mov	r5, r1
 8001a7a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a7e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd5f 	bl	8000548 <__aeabi_f2d>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8001a92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a96:	e9cd 4500 	strd	r4, r5, [sp]
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	464b      	mov	r3, r9
 8001a9e:	4912      	ldr	r1, [pc, #72]	; (8001ae8 <lsm_task+0x190>)
 8001aa0:	f008 fc7c 	bl	800a39c <siprintf>
 8001aa4:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
		queue_UART_msg_t accelero_send;
		memcpy(accelero_send.uart_chars, tx_buffer, tx_len);
 8001aa8:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8001aac:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8001ab0:	f107 0308 	add.w	r3, r7, #8
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f007 fccb 	bl	8009452 <memcpy>
		accelero_send.char_len = tx_len;
 8001abc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001ac6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001aca:	805a      	strh	r2, [r3, #2]
		accelero_send.type = TX;
 8001acc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001ad0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
//		xQueueSendToBack(UART1_queue,&accelero_send,10);
		vTaskDelayUntil(&last_wake_time, 1000);
 8001ad8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001adc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f005 fdff 	bl	80076e4 <vTaskDelayUntil>
	while(1){
 8001ae6:	e74a      	b.n	800197e <lsm_task+0x26>
 8001ae8:	0800dca4 	.word	0x0800dca4
 8001aec:	bc01a36f 	.word	0xbc01a36f
 8001af0:	3f841205 	.word	0x3f841205

08001af4 <uart1_task>:
#include "uart1_task.h"




void uart1_task(void* pvParameters){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	//init code
	queue_UART_msg_t *uart_q;
	while(1){
		xQueueReceive(UART1_queue, &uart_q, 0);
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <uart1_task+0x34>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f107 010c 	add.w	r1, r7, #12
 8001b04:	2200      	movs	r2, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f005 f9f4 	bl	8006ef4 <xQueueReceive>
		if (uart_q->type == TX){
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d1f3      	bne.n	8001afc <uart1_task+0x8>
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)uart_q->uart_chars, uart_q->char_len);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1d19      	adds	r1, r3, #4
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	885b      	ldrh	r3, [r3, #2]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4803      	ldr	r0, [pc, #12]	; (8001b2c <uart1_task+0x38>)
 8001b20:	f003 fc72 	bl	8005408 <HAL_UART_Transmit_DMA>
		xQueueReceive(UART1_queue, &uart_q, 0);
 8001b24:	e7ea      	b.n	8001afc <uart1_task+0x8>
 8001b26:	bf00      	nop
 8001b28:	20000248 	.word	0x20000248
 8001b2c:	20000a08 	.word	0x20000a08

08001b30 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001b38:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <I2Cx_MspInit+0xa8>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	4a26      	ldr	r2, [pc, #152]	; (8001bd8 <I2Cx_MspInit+0xa8>)
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <I2Cx_MspInit+0xa8>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001b50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b54:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001b56:	2312      	movs	r3, #18
 8001b58:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001b62:	2304      	movs	r3, #4
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	481b      	ldr	r0, [pc, #108]	; (8001bdc <I2Cx_MspInit+0xac>)
 8001b6e:	f000 fe3d 	bl	80027ec <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4818      	ldr	r0, [pc, #96]	; (8001bdc <I2Cx_MspInit+0xac>)
 8001b7a:	f000 fe37 	bl	80027ec <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <I2Cx_MspInit+0xa8>)
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	4a15      	ldr	r2, [pc, #84]	; (8001bd8 <I2Cx_MspInit+0xa8>)
 8001b84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b88:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <I2Cx_MspInit+0xa8>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <I2Cx_MspInit+0xa8>)
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <I2Cx_MspInit+0xa8>)
 8001b9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ba0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <I2Cx_MspInit+0xa8>)
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <I2Cx_MspInit+0xa8>)
 8001ba8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001bac:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	210f      	movs	r1, #15
 8001bb2:	2021      	movs	r0, #33	; 0x21
 8001bb4:	f000 fb7a 	bl	80022ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001bb8:	2021      	movs	r0, #33	; 0x21
 8001bba:	f000 fb93 	bl	80022e4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	210f      	movs	r1, #15
 8001bc2:	2022      	movs	r0, #34	; 0x22
 8001bc4:	f000 fb72 	bl	80022ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001bc8:	2022      	movs	r0, #34	; 0x22
 8001bca:	f000 fb8b 	bl	80022e4 <HAL_NVIC_EnableIRQ>
}
 8001bce:	bf00      	nop
 8001bd0:	3728      	adds	r7, #40	; 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	48000400 	.word	0x48000400

08001be0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <I2Cx_Init+0x54>)
 8001bec:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a11      	ldr	r2, [pc, #68]	; (8001c38 <I2Cx_Init+0x58>)
 8001bf2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff89 	bl	8001b30 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 ff8e 	bl	8002b40 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001c24:	2100      	movs	r1, #0
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f001 fd30 	bl	800368c <HAL_I2CEx_ConfigAnalogFilter>
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40005800 	.word	0x40005800
 8001c38:	00702681 	.word	0x00702681

08001c3c <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af04      	add	r7, sp, #16
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	4608      	mov	r0, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	72fb      	strb	r3, [r7, #11]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	813b      	strh	r3, [r7, #8]
 8001c52:	4613      	mov	r3, r2
 8001c54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c5a:	7afb      	ldrb	r3, [r7, #11]
 8001c5c:	b299      	uxth	r1, r3
 8001c5e:	88f8      	ldrh	r0, [r7, #6]
 8001c60:	893a      	ldrh	r2, [r7, #8]
 8001c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	4603      	mov	r3, r0
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f001 f94a 	bl	8002f0c <HAL_I2C_Mem_Read>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d004      	beq.n	8001c8c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001c82:	7afb      	ldrb	r3, [r7, #11]
 8001c84:	4619      	mov	r1, r3
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f832 	bl	8001cf0 <I2Cx_Error>
  }
  return status;
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b08a      	sub	sp, #40	; 0x28
 8001c9a:	af04      	add	r7, sp, #16
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	4608      	mov	r0, r1
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	72fb      	strb	r3, [r7, #11]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	813b      	strh	r3, [r7, #8]
 8001cac:	4613      	mov	r3, r2
 8001cae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001cb4:	7afb      	ldrb	r3, [r7, #11]
 8001cb6:	b299      	uxth	r1, r3
 8001cb8:	88f8      	ldrh	r0, [r7, #6]
 8001cba:	893a      	ldrh	r2, [r7, #8]
 8001cbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc0:	9302      	str	r3, [sp, #8]
 8001cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	4603      	mov	r3, r0
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f001 f809 	bl	8002ce4 <HAL_I2C_Mem_Write>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001cdc:	7afb      	ldrb	r3, [r7, #11]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 f805 	bl	8001cf0 <I2Cx_Error>
  }
  return status;
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 ffae 	bl	8002c5e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ff6c 	bl	8001be0 <I2Cx_Init>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <SENSOR_IO_Init+0x10>)
 8001d16:	f7ff ff63 	bl	8001be0 <I2Cx_Init>
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000b1c 	.word	0x20000b1c

08001d24 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	71bb      	strb	r3, [r7, #6]
 8001d32:	4613      	mov	r3, r2
 8001d34:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001d36:	79bb      	ldrb	r3, [r7, #6]
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	79f9      	ldrb	r1, [r7, #7]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	1d7b      	adds	r3, r7, #5
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	2301      	movs	r3, #1
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <SENSOR_IO_Write+0x30>)
 8001d48:	f7ff ffa5 	bl	8001c96 <I2Cx_WriteMultiple>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000b1c 	.word	0x20000b1c

08001d58 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460a      	mov	r2, r1
 8001d62:	71fb      	strb	r3, [r7, #7]
 8001d64:	4613      	mov	r3, r2
 8001d66:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001d6c:	79bb      	ldrb	r3, [r7, #6]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	79f9      	ldrb	r1, [r7, #7]
 8001d72:	2301      	movs	r3, #1
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	f107 030f 	add.w	r3, r7, #15
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	4804      	ldr	r0, [pc, #16]	; (8001d90 <SENSOR_IO_Read+0x38>)
 8001d80:	f7ff ff5c 	bl	8001c3c <I2Cx_ReadMultiple>

  return read_value;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000b1c 	.word	0x20000b1c

08001d94 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	603a      	str	r2, [r7, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
 8001da2:	460b      	mov	r3, r1
 8001da4:	71bb      	strb	r3, [r7, #6]
 8001da6:	4613      	mov	r3, r2
 8001da8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001daa:	79bb      	ldrb	r3, [r7, #6]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	79f9      	ldrb	r1, [r7, #7]
 8001db0:	88bb      	ldrh	r3, [r7, #4]
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2301      	movs	r3, #1
 8001dba:	4804      	ldr	r0, [pc, #16]	; (8001dcc <SENSOR_IO_ReadMultiple+0x38>)
 8001dbc:	f7ff ff3e 	bl	8001c3c <I2Cx_ReadMultiple>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b29b      	uxth	r3, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000b1c 	.word	0x20000b1c

08001dd0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <BSP_ACCELERO_Init+0x74>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	4798      	blx	r3
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b6a      	cmp	r3, #106	; 0x6a
 8001de8:	d002      	beq.n	8001df0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
 8001dee:	e024      	b.n	8001e3a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001df0:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <BSP_ACCELERO_Init+0x78>)
 8001df2:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <BSP_ACCELERO_Init+0x74>)
 8001df4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001df6:	2330      	movs	r3, #48	; 0x30
 8001df8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001e02:	2340      	movs	r3, #64	; 0x40
 8001e04:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001e0e:	797a      	ldrb	r2, [r7, #5]
 8001e10:	7abb      	ldrb	r3, [r7, #10]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001e18:	7a3b      	ldrb	r3, [r7, #8]
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	b21a      	sxth	r2, r3
 8001e24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <BSP_ACCELERO_Init+0x78>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	89ba      	ldrh	r2, [r7, #12]
 8001e36:	4610      	mov	r0, r2
 8001e38:	4798      	blx	r3
  }  

  return ret;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000004 	.word	0x20000004
 8001e48:	20000b70 	.word	0x20000b70

08001e4c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d009      	beq.n	8001e70 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001e66:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
    }
  }
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000b70 	.word	0x20000b70

08001e7c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001e8a:	2110      	movs	r1, #16
 8001e8c:	20d4      	movs	r0, #212	; 0xd4
 8001e8e:	f7ff ff63 	bl	8001d58 <SENSOR_IO_Read>
 8001e92:	4603      	mov	r3, r0
 8001e94:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001e9a:	7bbb      	ldrb	r3, [r7, #14]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001ea2:	7bba      	ldrb	r2, [r7, #14]
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001eaa:	7bbb      	ldrb	r3, [r7, #14]
 8001eac:	461a      	mov	r2, r3
 8001eae:	2110      	movs	r1, #16
 8001eb0:	20d4      	movs	r0, #212	; 0xd4
 8001eb2:	f7ff ff37 	bl	8001d24 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001eb6:	2112      	movs	r1, #18
 8001eb8:	20d4      	movs	r0, #212	; 0xd4
 8001eba:	f7ff ff4d 	bl	8001d58 <SENSOR_IO_Read>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001ed0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001ed2:	7bba      	ldrb	r2, [r7, #14]
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001eda:	7bbb      	ldrb	r3, [r7, #14]
 8001edc:	461a      	mov	r2, r3
 8001ede:	2112      	movs	r1, #18
 8001ee0:	20d4      	movs	r0, #212	; 0xd4
 8001ee2:	f7ff ff1f 	bl	8001d24 <SENSOR_IO_Write>


  /* Read INT1_CTRL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8001ee6:	210d      	movs	r1, #13
 8001ee8:	20d4      	movs	r0, #212	; 0xd4
 8001eea:	f7ff ff35 	bl	8001d58 <SENSOR_IO_Read>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	73bb      	strb	r3, [r7, #14]
  tmp |= (1 | 1<< 1); //set ACC drdy and gyro drdy on int pin1
 8001ef2:	7bbb      	ldrb	r3, [r7, #14]
 8001ef4:	f043 0303 	orr.w	r3, r3, #3
 8001ef8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8001efa:	7bbb      	ldrb	r3, [r7, #14]
 8001efc:	461a      	mov	r2, r3
 8001efe:	210d      	movs	r1, #13
 8001f00:	20d4      	movs	r0, #212	; 0xd4
 8001f02:	f7ff ff0f 	bl	8001d24 <SENSOR_IO_Write>
}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001f14:	2300      	movs	r3, #0
 8001f16:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001f18:	2110      	movs	r1, #16
 8001f1a:	20d4      	movs	r0, #212	; 0xd4
 8001f1c:	f7ff ff1c 	bl	8001d58 <SENSOR_IO_Read>
 8001f20:	4603      	mov	r3, r0
 8001f22:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2110      	movs	r1, #16
 8001f32:	20d4      	movs	r0, #212	; 0xd4
 8001f34:	f7ff fef6 	bl	8001d24 <SENSOR_IO_Write>
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001f44:	f7ff fee4 	bl	8001d10 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001f48:	210f      	movs	r1, #15
 8001f4a:	20d4      	movs	r0, #212	; 0xd4
 8001f4c:	f7ff ff04 	bl	8001d58 <SENSOR_IO_Read>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001f64:	2115      	movs	r1, #21
 8001f66:	20d4      	movs	r0, #212	; 0xd4
 8001f68:	f7ff fef6 	bl	8001d58 <SENSOR_IO_Read>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	f023 0310 	bic.w	r3, r3, #16
 8001f76:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	f043 0310 	orr.w	r3, r3, #16
 8001f84:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2115      	movs	r1, #21
 8001f8c:	20d4      	movs	r0, #212	; 0xd4
 8001f8e:	f7ff fec9 	bl	8001d24 <SENSOR_IO_Write>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001fb2:	2110      	movs	r1, #16
 8001fb4:	20d4      	movs	r0, #212	; 0xd4
 8001fb6:	f7ff fecf 	bl	8001d58 <SENSOR_IO_Read>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001fbe:	f107 0208 	add.w	r2, r7, #8
 8001fc2:	2306      	movs	r3, #6
 8001fc4:	2128      	movs	r1, #40	; 0x28
 8001fc6:	20d4      	movs	r0, #212	; 0xd4
 8001fc8:	f7ff fee4 	bl	8001d94 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	77fb      	strb	r3, [r7, #31]
 8001fd0:	e01c      	b.n	800200c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001fd2:	7ffb      	ldrb	r3, [r7, #31]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	3320      	adds	r3, #32
 8001fda:	443b      	add	r3, r7
 8001fdc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	7ffb      	ldrb	r3, [r7, #31]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	3320      	adds	r3, #32
 8001fec:	443b      	add	r3, r7
 8001fee:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	7ffb      	ldrb	r3, [r7, #31]
 8001ffa:	b212      	sxth	r2, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	3320      	adds	r3, #32
 8002000:	443b      	add	r3, r7
 8002002:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002006:	7ffb      	ldrb	r3, [r7, #31]
 8002008:	3301      	adds	r3, #1
 800200a:	77fb      	strb	r3, [r7, #31]
 800200c:	7ffb      	ldrb	r3, [r7, #31]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d9df      	bls.n	8001fd2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002012:	7dfb      	ldrb	r3, [r7, #23]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b0c      	cmp	r3, #12
 800201a:	d829      	bhi.n	8002070 <LSM6DSL_AccReadXYZ+0xd4>
 800201c:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <LSM6DSL_AccReadXYZ+0x88>)
 800201e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002022:	bf00      	nop
 8002024:	08002059 	.word	0x08002059
 8002028:	08002071 	.word	0x08002071
 800202c:	08002071 	.word	0x08002071
 8002030:	08002071 	.word	0x08002071
 8002034:	0800206b 	.word	0x0800206b
 8002038:	08002071 	.word	0x08002071
 800203c:	08002071 	.word	0x08002071
 8002040:	08002071 	.word	0x08002071
 8002044:	0800205f 	.word	0x0800205f
 8002048:	08002071 	.word	0x08002071
 800204c:	08002071 	.word	0x08002071
 8002050:	08002071 	.word	0x08002071
 8002054:	08002065 	.word	0x08002065
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <LSM6DSL_AccReadXYZ+0x120>)
 800205a:	61bb      	str	r3, [r7, #24]
    break;
 800205c:	e008      	b.n	8002070 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <LSM6DSL_AccReadXYZ+0x124>)
 8002060:	61bb      	str	r3, [r7, #24]
    break;
 8002062:	e005      	b.n	8002070 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <LSM6DSL_AccReadXYZ+0x128>)
 8002066:	61bb      	str	r3, [r7, #24]
    break;
 8002068:	e002      	b.n	8002070 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <LSM6DSL_AccReadXYZ+0x12c>)
 800206c:	61bb      	str	r3, [r7, #24]
    break;    
 800206e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002070:	2300      	movs	r3, #0
 8002072:	77fb      	strb	r3, [r7, #31]
 8002074:	e01a      	b.n	80020ac <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002076:	7ffb      	ldrb	r3, [r7, #31]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	3320      	adds	r3, #32
 800207c:	443b      	add	r3, r7
 800207e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800208a:	edd7 7a06 	vldr	s15, [r7, #24]
 800208e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002092:	7ffb      	ldrb	r3, [r7, #31]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209e:	ee17 2a90 	vmov	r2, s15
 80020a2:	b212      	sxth	r2, r2
 80020a4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80020a6:	7ffb      	ldrb	r3, [r7, #31]
 80020a8:	3301      	adds	r3, #1
 80020aa:	77fb      	strb	r3, [r7, #31]
 80020ac:	7ffb      	ldrb	r3, [r7, #31]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d9e1      	bls.n	8002076 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	3d79db23 	.word	0x3d79db23
 80020c0:	3df9db23 	.word	0x3df9db23
 80020c4:	3e79db23 	.word	0x3e79db23
 80020c8:	3ef9db23 	.word	0x3ef9db23

080020cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d6:	2003      	movs	r0, #3
 80020d8:	f000 f8dd 	bl	8002296 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020dc:	200f      	movs	r0, #15
 80020de:	f7ff f93f 	bl	8001360 <HAL_InitTick>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	e001      	b.n	80020f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020ee:	f7ff f90f 	bl	8001310 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020f2:	79fb      	ldrb	r3, [r7, #7]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_IncTick+0x20>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_IncTick+0x24>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4413      	add	r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_IncTick+0x24>)
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	2000003c 	.word	0x2000003c
 8002120:	20000b74 	.word	0x20000b74

08002124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return uwTick;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_GetTick+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000b74 	.word	0x20000b74

0800213c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216e:	4a04      	ldr	r2, [pc, #16]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	60d3      	str	r3, [r2, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <__NVIC_GetPriorityGrouping+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0307 	and.w	r3, r3, #7
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	db0b      	blt.n	80021ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4907      	ldr	r1, [pc, #28]	; (80021d8 <__NVIC_EnableIRQ+0x38>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2001      	movs	r0, #1
 80021c2:	fa00 f202 	lsl.w	r2, r0, r2
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000e100 	.word	0xe000e100

080021dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	; (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <__NVIC_SetPriority+0x50>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f1c3 0307 	rsb	r3, r3, #7
 800224a:	2b04      	cmp	r3, #4
 800224c:	bf28      	it	cs
 800224e:	2304      	movcs	r3, #4
 8002250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3304      	adds	r3, #4
 8002256:	2b06      	cmp	r3, #6
 8002258:	d902      	bls.n	8002260 <NVIC_EncodePriority+0x30>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3b03      	subs	r3, #3
 800225e:	e000      	b.n	8002262 <NVIC_EncodePriority+0x32>
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43d9      	mvns	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	4313      	orrs	r3, r2
         );
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ff4c 	bl	800213c <__NVIC_SetPriorityGrouping>
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022be:	f7ff ff61 	bl	8002184 <__NVIC_GetPriorityGrouping>
 80022c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	6978      	ldr	r0, [r7, #20]
 80022ca:	f7ff ffb1 	bl	8002230 <NVIC_EncodePriority>
 80022ce:	4602      	mov	r2, r0
 80022d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff80 	bl	80021dc <__NVIC_SetPriority>
}
 80022dc:	bf00      	nop
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff54 	bl	80021a0 <__NVIC_EnableIRQ>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e098      	b.n	8002444 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	4b4d      	ldr	r3, [pc, #308]	; (8002450 <HAL_DMA_Init+0x150>)
 800231a:	429a      	cmp	r2, r3
 800231c:	d80f      	bhi.n	800233e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	4b4b      	ldr	r3, [pc, #300]	; (8002454 <HAL_DMA_Init+0x154>)
 8002326:	4413      	add	r3, r2
 8002328:	4a4b      	ldr	r2, [pc, #300]	; (8002458 <HAL_DMA_Init+0x158>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	009a      	lsls	r2, r3, #2
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a48      	ldr	r2, [pc, #288]	; (800245c <HAL_DMA_Init+0x15c>)
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
 800233c:	e00e      	b.n	800235c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	4b46      	ldr	r3, [pc, #280]	; (8002460 <HAL_DMA_Init+0x160>)
 8002346:	4413      	add	r3, r2
 8002348:	4a43      	ldr	r2, [pc, #268]	; (8002458 <HAL_DMA_Init+0x158>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	009a      	lsls	r2, r3, #2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a42      	ldr	r2, [pc, #264]	; (8002464 <HAL_DMA_Init+0x164>)
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002376:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002380:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023b6:	d039      	beq.n	800242c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	4a27      	ldr	r2, [pc, #156]	; (800245c <HAL_DMA_Init+0x15c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d11a      	bne.n	80023f8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023c2:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_DMA_Init+0x168>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f003 031c 	and.w	r3, r3, #28
 80023ce:	210f      	movs	r1, #15
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	4924      	ldr	r1, [pc, #144]	; (8002468 <HAL_DMA_Init+0x168>)
 80023d8:	4013      	ands	r3, r2
 80023da:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80023dc:	4b22      	ldr	r3, [pc, #136]	; (8002468 <HAL_DMA_Init+0x168>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e8:	f003 031c 	and.w	r3, r3, #28
 80023ec:	fa01 f303 	lsl.w	r3, r1, r3
 80023f0:	491d      	ldr	r1, [pc, #116]	; (8002468 <HAL_DMA_Init+0x168>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
 80023f6:	e019      	b.n	800242c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023f8:	4b1c      	ldr	r3, [pc, #112]	; (800246c <HAL_DMA_Init+0x16c>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	f003 031c 	and.w	r3, r3, #28
 8002404:	210f      	movs	r1, #15
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	4917      	ldr	r1, [pc, #92]	; (800246c <HAL_DMA_Init+0x16c>)
 800240e:	4013      	ands	r3, r2
 8002410:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_DMA_Init+0x16c>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	f003 031c 	and.w	r3, r3, #28
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	4911      	ldr	r1, [pc, #68]	; (800246c <HAL_DMA_Init+0x16c>)
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40020407 	.word	0x40020407
 8002454:	bffdfff8 	.word	0xbffdfff8
 8002458:	cccccccd 	.word	0xcccccccd
 800245c:	40020000 	.word	0x40020000
 8002460:	bffdfbf8 	.word	0xbffdfbf8
 8002464:	40020400 	.word	0x40020400
 8002468:	400200a8 	.word	0x400200a8
 800246c:	400204a8 	.word	0x400204a8

08002470 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_DMA_Start_IT+0x20>
 800248c:	2302      	movs	r3, #2
 800248e:	e04b      	b.n	8002528 <HAL_DMA_Start_IT+0xb8>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d13a      	bne.n	800251a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f95f 	bl	800278c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 020e 	orr.w	r2, r2, #14
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	e00f      	b.n	8002508 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0204 	bic.w	r2, r2, #4
 80024f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 020a 	orr.w	r2, r2, #10
 8002506:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	e005      	b.n	8002526 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002522:	2302      	movs	r3, #2
 8002524:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002526:	7dfb      	ldrb	r3, [r7, #23]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d008      	beq.n	800255a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2204      	movs	r2, #4
 800254c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e022      	b.n	80025a0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 020e 	bic.w	r2, r2, #14
 8002568:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f003 021c 	and.w	r2, r3, #28
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2101      	movs	r1, #1
 8002588:	fa01 f202 	lsl.w	r2, r1, r2
 800258c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d005      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2204      	movs	r2, #4
 80025c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
 80025ce:	e029      	b.n	8002624 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 020e 	bic.w	r2, r2, #14
 80025de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	f003 021c 	and.w	r2, r3, #28
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	2101      	movs	r1, #1
 80025fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002602:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	4798      	blx	r3
    }
  }
  return status;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f003 031c 	and.w	r3, r3, #28
 800264e:	2204      	movs	r2, #4
 8002650:	409a      	lsls	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d026      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x7a>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d021      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	d107      	bne.n	8002682 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0204 	bic.w	r2, r2, #4
 8002680:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f003 021c 	and.w	r2, r3, #28
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2104      	movs	r1, #4
 8002690:	fa01 f202 	lsl.w	r2, r1, r2
 8002694:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	2b00      	cmp	r3, #0
 800269c:	d071      	beq.n	8002782 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80026a6:	e06c      	b.n	8002782 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ac:	f003 031c 	and.w	r3, r3, #28
 80026b0:	2202      	movs	r2, #2
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d02e      	beq.n	800271a <HAL_DMA_IRQHandler+0xec>
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d029      	beq.n	800271a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10b      	bne.n	80026ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 020a 	bic.w	r2, r2, #10
 80026e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	f003 021c 	and.w	r2, r3, #28
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	2102      	movs	r1, #2
 80026fa:	fa01 f202 	lsl.w	r2, r1, r2
 80026fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d038      	beq.n	8002782 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002718:	e033      	b.n	8002782 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f003 031c 	and.w	r3, r3, #28
 8002722:	2208      	movs	r2, #8
 8002724:	409a      	lsls	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d02a      	beq.n	8002784 <HAL_DMA_IRQHandler+0x156>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d025      	beq.n	8002784 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 020e 	bic.w	r2, r2, #14
 8002746:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274c:	f003 021c 	and.w	r2, r3, #28
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	2101      	movs	r1, #1
 8002756:	fa01 f202 	lsl.w	r2, r1, r2
 800275a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002782:	bf00      	nop
 8002784:	bf00      	nop
}
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f003 021c 	and.w	r2, r3, #28
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2101      	movs	r1, #1
 80027a8:	fa01 f202 	lsl.w	r2, r1, r2
 80027ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d108      	bne.n	80027d0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027ce:	e007      	b.n	80027e0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	60da      	str	r2, [r3, #12]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fa:	e17f      	b.n	8002afc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8171 	beq.w	8002af6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d005      	beq.n	800282c <HAL_GPIO_Init+0x40>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d130      	bne.n	800288e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002862:	2201      	movs	r2, #1
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	f003 0201 	and.w	r2, r3, #1
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b03      	cmp	r3, #3
 8002898:	d118      	bne.n	80028cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028a0:	2201      	movs	r2, #1
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	f003 0201 	and.w	r2, r3, #1
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d017      	beq.n	8002908 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d123      	bne.n	800295c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	6939      	ldr	r1, [r7, #16]
 8002958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0203 	and.w	r2, r3, #3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80ac 	beq.w	8002af6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	4b5f      	ldr	r3, [pc, #380]	; (8002b1c <HAL_GPIO_Init+0x330>)
 80029a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a2:	4a5e      	ldr	r2, [pc, #376]	; (8002b1c <HAL_GPIO_Init+0x330>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6613      	str	r3, [r2, #96]	; 0x60
 80029aa:	4b5c      	ldr	r3, [pc, #368]	; (8002b1c <HAL_GPIO_Init+0x330>)
 80029ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029b6:	4a5a      	ldr	r2, [pc, #360]	; (8002b20 <HAL_GPIO_Init+0x334>)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3302      	adds	r3, #2
 80029be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	220f      	movs	r2, #15
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029e0:	d025      	beq.n	8002a2e <HAL_GPIO_Init+0x242>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4f      	ldr	r2, [pc, #316]	; (8002b24 <HAL_GPIO_Init+0x338>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01f      	beq.n	8002a2a <HAL_GPIO_Init+0x23e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4e      	ldr	r2, [pc, #312]	; (8002b28 <HAL_GPIO_Init+0x33c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d019      	beq.n	8002a26 <HAL_GPIO_Init+0x23a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4d      	ldr	r2, [pc, #308]	; (8002b2c <HAL_GPIO_Init+0x340>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_GPIO_Init+0x236>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4c      	ldr	r2, [pc, #304]	; (8002b30 <HAL_GPIO_Init+0x344>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00d      	beq.n	8002a1e <HAL_GPIO_Init+0x232>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4b      	ldr	r2, [pc, #300]	; (8002b34 <HAL_GPIO_Init+0x348>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <HAL_GPIO_Init+0x22e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4a      	ldr	r2, [pc, #296]	; (8002b38 <HAL_GPIO_Init+0x34c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_GPIO_Init+0x22a>
 8002a12:	2306      	movs	r3, #6
 8002a14:	e00c      	b.n	8002a30 <HAL_GPIO_Init+0x244>
 8002a16:	2307      	movs	r3, #7
 8002a18:	e00a      	b.n	8002a30 <HAL_GPIO_Init+0x244>
 8002a1a:	2305      	movs	r3, #5
 8002a1c:	e008      	b.n	8002a30 <HAL_GPIO_Init+0x244>
 8002a1e:	2304      	movs	r3, #4
 8002a20:	e006      	b.n	8002a30 <HAL_GPIO_Init+0x244>
 8002a22:	2303      	movs	r3, #3
 8002a24:	e004      	b.n	8002a30 <HAL_GPIO_Init+0x244>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e002      	b.n	8002a30 <HAL_GPIO_Init+0x244>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_GPIO_Init+0x244>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	f002 0203 	and.w	r2, r2, #3
 8002a36:	0092      	lsls	r2, r2, #2
 8002a38:	4093      	lsls	r3, r2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a40:	4937      	ldr	r1, [pc, #220]	; (8002b20 <HAL_GPIO_Init+0x334>)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a4e:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <HAL_GPIO_Init+0x350>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a72:	4a32      	ldr	r2, [pc, #200]	; (8002b3c <HAL_GPIO_Init+0x350>)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a78:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <HAL_GPIO_Init+0x350>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a9c:	4a27      	ldr	r2, [pc, #156]	; (8002b3c <HAL_GPIO_Init+0x350>)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002aa2:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <HAL_GPIO_Init+0x350>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ac6:	4a1d      	ldr	r2, [pc, #116]	; (8002b3c <HAL_GPIO_Init+0x350>)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002acc:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <HAL_GPIO_Init+0x350>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002af0:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <HAL_GPIO_Init+0x350>)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3301      	adds	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa22 f303 	lsr.w	r3, r2, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f47f ae78 	bne.w	80027fc <HAL_GPIO_Init+0x10>
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40010000 	.word	0x40010000
 8002b24:	48000400 	.word	0x48000400
 8002b28:	48000800 	.word	0x48000800
 8002b2c:	48000c00 	.word	0x48000c00
 8002b30:	48001000 	.word	0x48001000
 8002b34:	48001400 	.word	0x48001400
 8002b38:	48001800 	.word	0x48001800
 8002b3c:	40010400 	.word	0x40010400

08002b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e081      	b.n	8002c56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f8a8 	bl	8002cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ba0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	e006      	b.n	8002bc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d104      	bne.n	8002bda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69d9      	ldr	r1, [r3, #28]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1a      	ldr	r2, [r3, #32]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e021      	b.n	8002cb4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2224      	movs	r2, #36	; 0x24
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f821 	bl	8002cd0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	4608      	mov	r0, r1
 8002cee:	4611      	mov	r1, r2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	817b      	strh	r3, [r7, #10]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	813b      	strh	r3, [r7, #8]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	f040 80f9 	bne.w	8002efe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_I2C_Mem_Write+0x34>
 8002d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0ed      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_I2C_Mem_Write+0x4e>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e0e6      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d3a:	f7ff f9f3 	bl	8002124 <HAL_GetTick>
 8002d3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2319      	movs	r3, #25
 8002d46:	2201      	movs	r2, #1
 8002d48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fac3 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0d1      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2221      	movs	r2, #33	; 0x21
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2240      	movs	r2, #64	; 0x40
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d84:	88f8      	ldrh	r0, [r7, #6]
 8002d86:	893a      	ldrh	r2, [r7, #8]
 8002d88:	8979      	ldrh	r1, [r7, #10]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	9301      	str	r3, [sp, #4]
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	4603      	mov	r3, r0
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f9d3 	bl	8003140 <I2C_RequestMemoryWrite>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0a9      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2bff      	cmp	r3, #255	; 0xff
 8002db4:	d90e      	bls.n	8002dd4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	22ff      	movs	r2, #255	; 0xff
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	8979      	ldrh	r1, [r7, #10]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fc2b 	bl	8003628 <I2C_TransferConfig>
 8002dd2:	e00f      	b.n	8002df4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	8979      	ldrh	r1, [r7, #10]
 8002de6:	2300      	movs	r3, #0
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fc1a 	bl	8003628 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 faad 	bl	8003358 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e07b      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	781a      	ldrb	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d034      	beq.n	8002eac <HAL_I2C_Mem_Write+0x1c8>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d130      	bne.n	8002eac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	2200      	movs	r2, #0
 8002e52:	2180      	movs	r1, #128	; 0x80
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fa3f 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e04d      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2bff      	cmp	r3, #255	; 0xff
 8002e6c:	d90e      	bls.n	8002e8c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	22ff      	movs	r2, #255	; 0xff
 8002e72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	8979      	ldrh	r1, [r7, #10]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fbcf 	bl	8003628 <I2C_TransferConfig>
 8002e8a:	e00f      	b.n	8002eac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	8979      	ldrh	r1, [r7, #10]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fbbe 	bl	8003628 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d19e      	bne.n	8002df4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fa8c 	bl	80033d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e01a      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_I2C_Mem_Write+0x224>)
 8002ede:	400b      	ands	r3, r1
 8002ee0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	fe00e800 	.word	0xfe00e800

08002f0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	4608      	mov	r0, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	817b      	strh	r3, [r7, #10]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	813b      	strh	r3, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	f040 80fd 	bne.w	800312e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_I2C_Mem_Read+0x34>
 8002f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0f1      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_I2C_Mem_Read+0x4e>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e0ea      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f62:	f7ff f8df 	bl	8002124 <HAL_GetTick>
 8002f66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2319      	movs	r3, #25
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f9af 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0d5      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2222      	movs	r2, #34	; 0x22
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2240      	movs	r2, #64	; 0x40
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fac:	88f8      	ldrh	r0, [r7, #6]
 8002fae:	893a      	ldrh	r2, [r7, #8]
 8002fb0:	8979      	ldrh	r1, [r7, #10]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	4603      	mov	r3, r0
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f913 	bl	80031e8 <I2C_RequestMemoryRead>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0ad      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2bff      	cmp	r3, #255	; 0xff
 8002fdc:	d90e      	bls.n	8002ffc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	22ff      	movs	r2, #255	; 0xff
 8002fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	8979      	ldrh	r1, [r7, #10]
 8002fec:	4b52      	ldr	r3, [pc, #328]	; (8003138 <HAL_I2C_Mem_Read+0x22c>)
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fb17 	bl	8003628 <I2C_TransferConfig>
 8002ffa:	e00f      	b.n	800301c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	b2da      	uxtb	r2, r3
 800300c:	8979      	ldrh	r1, [r7, #10]
 800300e:	4b4a      	ldr	r3, [pc, #296]	; (8003138 <HAL_I2C_Mem_Read+0x22c>)
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 fb06 	bl	8003628 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	2200      	movs	r2, #0
 8003024:	2104      	movs	r1, #4
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f956 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e07c      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d034      	beq.n	80030dc <HAL_I2C_Mem_Read+0x1d0>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d130      	bne.n	80030dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	2200      	movs	r2, #0
 8003082:	2180      	movs	r1, #128	; 0x80
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f927 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e04d      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	2bff      	cmp	r3, #255	; 0xff
 800309c:	d90e      	bls.n	80030bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	22ff      	movs	r2, #255	; 0xff
 80030a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	8979      	ldrh	r1, [r7, #10]
 80030ac:	2300      	movs	r3, #0
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fab7 	bl	8003628 <I2C_TransferConfig>
 80030ba:	e00f      	b.n	80030dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	8979      	ldrh	r1, [r7, #10]
 80030ce:	2300      	movs	r3, #0
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 faa6 	bl	8003628 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d19a      	bne.n	800301c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f974 	bl	80033d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e01a      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2220      	movs	r2, #32
 8003100:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_I2C_Mem_Read+0x230>)
 800310e:	400b      	ands	r3, r1
 8003110:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800312e:	2302      	movs	r3, #2
  }
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	80002400 	.word	0x80002400
 800313c:	fe00e800 	.word	0xfe00e800

08003140 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	461a      	mov	r2, r3
 800314e:	4603      	mov	r3, r0
 8003150:	817b      	strh	r3, [r7, #10]
 8003152:	460b      	mov	r3, r1
 8003154:	813b      	strh	r3, [r7, #8]
 8003156:	4613      	mov	r3, r2
 8003158:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	8979      	ldrh	r1, [r7, #10]
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <I2C_RequestMemoryWrite+0xa4>)
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fa5d 	bl	8003628 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	69b9      	ldr	r1, [r7, #24]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f8f0 	bl	8003358 <I2C_WaitOnTXISFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e02c      	b.n	80031dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d105      	bne.n	8003194 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003188:	893b      	ldrh	r3, [r7, #8]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
 8003192:	e015      	b.n	80031c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003194:	893b      	ldrh	r3, [r7, #8]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	b29b      	uxth	r3, r3
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	69b9      	ldr	r1, [r7, #24]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f8d6 	bl	8003358 <I2C_WaitOnTXISFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e012      	b.n	80031dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031b6:	893b      	ldrh	r3, [r7, #8]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2200      	movs	r2, #0
 80031c8:	2180      	movs	r1, #128	; 0x80
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f884 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	80002000 	.word	0x80002000

080031e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	4608      	mov	r0, r1
 80031f2:	4611      	mov	r1, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	460b      	mov	r3, r1
 80031fc:	813b      	strh	r3, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	8979      	ldrh	r1, [r7, #10]
 8003208:	4b20      	ldr	r3, [pc, #128]	; (800328c <I2C_RequestMemoryRead+0xa4>)
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2300      	movs	r3, #0
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fa0a 	bl	8003628 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	69b9      	ldr	r1, [r7, #24]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f89d 	bl	8003358 <I2C_WaitOnTXISFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e02c      	b.n	8003282 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d105      	bne.n	800323a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800322e:	893b      	ldrh	r3, [r7, #8]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
 8003238:	e015      	b.n	8003266 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800323a:	893b      	ldrh	r3, [r7, #8]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	b29b      	uxth	r3, r3
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	69b9      	ldr	r1, [r7, #24]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f883 	bl	8003358 <I2C_WaitOnTXISFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e012      	b.n	8003282 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800325c:	893b      	ldrh	r3, [r7, #8]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2200      	movs	r2, #0
 800326e:	2140      	movs	r1, #64	; 0x40
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f831 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	80002000 	.word	0x80002000

08003290 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d103      	bne.n	80032ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2200      	movs	r2, #0
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d007      	beq.n	80032cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	619a      	str	r2, [r3, #24]
  }
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032e8:	e022      	b.n	8003330 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d01e      	beq.n	8003330 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	f7fe ff17 	bl	8002124 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d113      	bne.n	8003330 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e00f      	b.n	8003350 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4013      	ands	r3, r2
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	429a      	cmp	r2, r3
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	429a      	cmp	r2, r3
 800334c:	d0cd      	beq.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003364:	e02c      	b.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f870 	bl	8003450 <I2C_IsErrorOccurred>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e02a      	b.n	80033d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d01e      	beq.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003382:	f7fe fecf 	bl	8002124 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	429a      	cmp	r2, r3
 8003390:	d302      	bcc.n	8003398 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d113      	bne.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e007      	b.n	80033d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d1cb      	bne.n	8003366 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e4:	e028      	b.n	8003438 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f830 	bl	8003450 <I2C_IsErrorOccurred>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e026      	b.n	8003448 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fa:	f7fe fe93 	bl	8002124 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	d302      	bcc.n	8003410 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d113      	bne.n	8003438 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e007      	b.n	8003448 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b20      	cmp	r3, #32
 8003444:	d1cf      	bne.n	80033e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d075      	beq.n	8003568 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2210      	movs	r2, #16
 8003482:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003484:	e056      	b.n	8003534 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d052      	beq.n	8003534 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800348e:	f7fe fe49 	bl	8002124 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	429a      	cmp	r2, r3
 800349c:	d302      	bcc.n	80034a4 <I2C_IsErrorOccurred+0x54>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d147      	bne.n	8003534 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c6:	d12e      	bne.n	8003526 <I2C_IsErrorOccurred+0xd6>
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034ce:	d02a      	beq.n	8003526 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d027      	beq.n	8003526 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034e6:	f7fe fe1d 	bl	8002124 <HAL_GetTick>
 80034ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ec:	e01b      	b.n	8003526 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034ee:	f7fe fe19 	bl	8002124 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b19      	cmp	r3, #25
 80034fa:	d914      	bls.n	8003526 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	f043 0220 	orr.w	r2, r3, #32
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b20      	cmp	r3, #32
 8003532:	d1dc      	bne.n	80034ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b20      	cmp	r3, #32
 8003540:	d003      	beq.n	800354a <I2C_IsErrorOccurred+0xfa>
 8003542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003546:	2b00      	cmp	r3, #0
 8003548:	d09d      	beq.n	8003486 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800354a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2220      	movs	r2, #32
 8003558:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800358a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	f043 0308 	orr.w	r3, r3, #8
 80035a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	f043 0302 	orr.w	r3, r3, #2
 80035c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80035d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01c      	beq.n	8003618 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f7ff fe56 	bl	8003290 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6859      	ldr	r1, [r3, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <I2C_IsErrorOccurred+0x1d4>)
 80035f0:	400b      	ands	r3, r1
 80035f2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800361c:	4618      	mov	r0, r3
 800361e:	3728      	adds	r7, #40	; 0x28
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	fe00e800 	.word	0xfe00e800

08003628 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	817b      	strh	r3, [r7, #10]
 8003636:	4613      	mov	r3, r2
 8003638:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800363a:	897b      	ldrh	r3, [r7, #10]
 800363c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003640:	7a7b      	ldrb	r3, [r7, #9]
 8003642:	041b      	lsls	r3, r3, #16
 8003644:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003648:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	4313      	orrs	r3, r2
 8003652:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003656:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	0d5b      	lsrs	r3, r3, #21
 8003662:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <I2C_TransferConfig+0x60>)
 8003668:	430b      	orrs	r3, r1
 800366a:	43db      	mvns	r3, r3
 800366c:	ea02 0103 	and.w	r1, r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	03ff63ff 	.word	0x03ff63ff

0800368c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d138      	bne.n	8003714 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e032      	b.n	8003716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2224      	movs	r2, #36	; 0x24
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	e000      	b.n	8003716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003714:	2302      	movs	r3, #2
  }
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <HAL_PWREx_GetVoltageRange+0x18>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40007000 	.word	0x40007000

08003740 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800374e:	d130      	bne.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003750:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800375c:	d038      	beq.n	80037d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003766:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800376c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800376e:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2232      	movs	r2, #50	; 0x32
 8003774:	fb02 f303 	mul.w	r3, r2, r3
 8003778:	4a1b      	ldr	r2, [pc, #108]	; (80037e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	0c9b      	lsrs	r3, r3, #18
 8003780:	3301      	adds	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003784:	e002      	b.n	800378c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3b01      	subs	r3, #1
 800378a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800378c:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003798:	d102      	bne.n	80037a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f2      	bne.n	8003786 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ac:	d110      	bne.n	80037d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e00f      	b.n	80037d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037be:	d007      	beq.n	80037d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037c0:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037c8:	4a05      	ldr	r2, [pc, #20]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40007000 	.word	0x40007000
 80037e4:	20000000 	.word	0x20000000
 80037e8:	431bde83 	.word	0x431bde83

080037ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e3ca      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037fe:	4b97      	ldr	r3, [pc, #604]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003808:	4b94      	ldr	r3, [pc, #592]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80e4 	beq.w	80039e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <HAL_RCC_OscConfig+0x4a>
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	2b0c      	cmp	r3, #12
 800382a:	f040 808b 	bne.w	8003944 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b01      	cmp	r3, #1
 8003832:	f040 8087 	bne.w	8003944 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003836:	4b89      	ldr	r3, [pc, #548]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_RCC_OscConfig+0x62>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e3a2      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1a      	ldr	r2, [r3, #32]
 8003852:	4b82      	ldr	r3, [pc, #520]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d004      	beq.n	8003868 <HAL_RCC_OscConfig+0x7c>
 800385e:	4b7f      	ldr	r3, [pc, #508]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003866:	e005      	b.n	8003874 <HAL_RCC_OscConfig+0x88>
 8003868:	4b7c      	ldr	r3, [pc, #496]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800386a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003874:	4293      	cmp	r3, r2
 8003876:	d223      	bcs.n	80038c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fd87 	bl	8004390 <RCC_SetFlashLatencyFromMSIRange>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e383      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800388c:	4b73      	ldr	r3, [pc, #460]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a72      	ldr	r2, [pc, #456]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003892:	f043 0308 	orr.w	r3, r3, #8
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b70      	ldr	r3, [pc, #448]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	496d      	ldr	r1, [pc, #436]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038aa:	4b6c      	ldr	r3, [pc, #432]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	4968      	ldr	r1, [pc, #416]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]
 80038be:	e025      	b.n	800390c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c0:	4b66      	ldr	r3, [pc, #408]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a65      	ldr	r2, [pc, #404]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038c6:	f043 0308 	orr.w	r3, r3, #8
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	4960      	ldr	r1, [pc, #384]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038de:	4b5f      	ldr	r3, [pc, #380]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	495b      	ldr	r1, [pc, #364]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fd47 	bl	8004390 <RCC_SetFlashLatencyFromMSIRange>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e343      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800390c:	f000 fc4a 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b52      	ldr	r3, [pc, #328]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	4950      	ldr	r1, [pc, #320]	; (8003a60 <HAL_RCC_OscConfig+0x274>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
 8003928:	4a4e      	ldr	r2, [pc, #312]	; (8003a64 <HAL_RCC_OscConfig+0x278>)
 800392a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800392c:	4b4e      	ldr	r3, [pc, #312]	; (8003a68 <HAL_RCC_OscConfig+0x27c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7fd fd15 	bl	8001360 <HAL_InitTick>
 8003936:	4603      	mov	r3, r0
 8003938:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d052      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	e327      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d032      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800394c:	4b43      	ldr	r3, [pc, #268]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a42      	ldr	r2, [pc, #264]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003958:	f7fe fbe4 	bl	8002124 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003960:	f7fe fbe0 	bl	8002124 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e310      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003972:	4b3a      	ldr	r3, [pc, #232]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800397e:	4b37      	ldr	r3, [pc, #220]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a36      	ldr	r2, [pc, #216]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003984:	f043 0308 	orr.w	r3, r3, #8
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b34      	ldr	r3, [pc, #208]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	4931      	ldr	r1, [pc, #196]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800399c:	4b2f      	ldr	r3, [pc, #188]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	492c      	ldr	r1, [pc, #176]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
 80039b0:	e01a      	b.n	80039e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039b2:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a29      	ldr	r2, [pc, #164]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039be:	f7fe fbb1 	bl	8002124 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039c6:	f7fe fbad 	bl	8002124 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e2dd      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039d8:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f0      	bne.n	80039c6 <HAL_RCC_OscConfig+0x1da>
 80039e4:	e000      	b.n	80039e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d074      	beq.n	8003ade <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x21a>
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b0c      	cmp	r3, #12
 80039fe:	d10e      	bne.n	8003a1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d10b      	bne.n	8003a1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a06:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d064      	beq.n	8003adc <HAL_RCC_OscConfig+0x2f0>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d160      	bne.n	8003adc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e2ba      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a26:	d106      	bne.n	8003a36 <HAL_RCC_OscConfig+0x24a>
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0b      	ldr	r2, [pc, #44]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	e026      	b.n	8003a84 <HAL_RCC_OscConfig+0x298>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a3e:	d115      	bne.n	8003a6c <HAL_RCC_OscConfig+0x280>
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a05      	ldr	r2, [pc, #20]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a02      	ldr	r2, [pc, #8]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	e014      	b.n	8003a84 <HAL_RCC_OscConfig+0x298>
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	0800dce4 	.word	0x0800dce4
 8003a64:	20000000 	.word	0x20000000
 8003a68:	20000038 	.word	0x20000038
 8003a6c:	4ba0      	ldr	r3, [pc, #640]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a9f      	ldr	r2, [pc, #636]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b9d      	ldr	r3, [pc, #628]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a9c      	ldr	r2, [pc, #624]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fb4a 	bl	8002124 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a94:	f7fe fb46 	bl	8002124 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	; 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e276      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa6:	4b92      	ldr	r3, [pc, #584]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x2a8>
 8003ab2:	e014      	b.n	8003ade <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7fe fb36 	bl	8002124 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003abc:	f7fe fb32 	bl	8002124 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	; 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e262      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ace:	4b88      	ldr	r3, [pc, #544]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x2d0>
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d060      	beq.n	8003bac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_OscConfig+0x310>
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b0c      	cmp	r3, #12
 8003af4:	d119      	bne.n	8003b2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d116      	bne.n	8003b2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003afc:	4b7c      	ldr	r3, [pc, #496]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_OscConfig+0x328>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e23f      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b14:	4b76      	ldr	r3, [pc, #472]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	4973      	ldr	r1, [pc, #460]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b28:	e040      	b.n	8003bac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d023      	beq.n	8003b7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b32:	4b6f      	ldr	r3, [pc, #444]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6e      	ldr	r2, [pc, #440]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3e:	f7fe faf1 	bl	8002124 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b46:	f7fe faed 	bl	8002124 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e21d      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b58:	4b65      	ldr	r3, [pc, #404]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b64:	4b62      	ldr	r3, [pc, #392]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	061b      	lsls	r3, r3, #24
 8003b72:	495f      	ldr	r1, [pc, #380]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
 8003b78:	e018      	b.n	8003bac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7a:	4b5d      	ldr	r3, [pc, #372]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a5c      	ldr	r2, [pc, #368]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fe facd 	bl	8002124 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8e:	f7fe fac9 	bl	8002124 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1f9      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ba0:	4b53      	ldr	r3, [pc, #332]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f0      	bne.n	8003b8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d03c      	beq.n	8003c32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01c      	beq.n	8003bfa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc0:	4b4b      	ldr	r3, [pc, #300]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc6:	4a4a      	ldr	r2, [pc, #296]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fe faa8 	bl	8002124 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd8:	f7fe faa4 	bl	8002124 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e1d4      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bea:	4b41      	ldr	r3, [pc, #260]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0ef      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x3ec>
 8003bf8:	e01b      	b.n	8003c32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfa:	4b3d      	ldr	r3, [pc, #244]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c00:	4a3b      	ldr	r2, [pc, #236]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0a:	f7fe fa8b 	bl	8002124 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c12:	f7fe fa87 	bl	8002124 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e1b7      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c24:	4b32      	ldr	r3, [pc, #200]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1ef      	bne.n	8003c12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80a6 	beq.w	8003d8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c40:	2300      	movs	r3, #0
 8003c42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c44:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10d      	bne.n	8003c6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c50:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	4a26      	ldr	r2, [pc, #152]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c5c:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c6c:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <HAL_RCC_OscConfig+0x508>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d118      	bne.n	8003caa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c78:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <HAL_RCC_OscConfig+0x508>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1d      	ldr	r2, [pc, #116]	; (8003cf4 <HAL_RCC_OscConfig+0x508>)
 8003c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c84:	f7fe fa4e 	bl	8002124 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8c:	f7fe fa4a 	bl	8002124 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e17a      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <HAL_RCC_OscConfig+0x508>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d108      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x4d8>
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	4a0d      	ldr	r2, [pc, #52]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc2:	e029      	b.n	8003d18 <HAL_RCC_OscConfig+0x52c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b05      	cmp	r3, #5
 8003cca:	d115      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x50c>
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	4a07      	ldr	r2, [pc, #28]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003cd4:	f043 0304 	orr.w	r3, r3, #4
 8003cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cdc:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	4a03      	ldr	r2, [pc, #12]	; (8003cf0 <HAL_RCC_OscConfig+0x504>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cec:	e014      	b.n	8003d18 <HAL_RCC_OscConfig+0x52c>
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40007000 	.word	0x40007000
 8003cf8:	4b9c      	ldr	r3, [pc, #624]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	4a9b      	ldr	r2, [pc, #620]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d08:	4b98      	ldr	r3, [pc, #608]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	4a97      	ldr	r2, [pc, #604]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003d10:	f023 0304 	bic.w	r3, r3, #4
 8003d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d016      	beq.n	8003d4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d20:	f7fe fa00 	bl	8002124 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d26:	e00a      	b.n	8003d3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d28:	f7fe f9fc 	bl	8002124 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e12a      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d3e:	4b8b      	ldr	r3, [pc, #556]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ed      	beq.n	8003d28 <HAL_RCC_OscConfig+0x53c>
 8003d4c:	e015      	b.n	8003d7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fe f9e9 	bl	8002124 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d54:	e00a      	b.n	8003d6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d56:	f7fe f9e5 	bl	8002124 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e113      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d6c:	4b7f      	ldr	r3, [pc, #508]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1ed      	bne.n	8003d56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d7a:	7ffb      	ldrb	r3, [r7, #31]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d80:	4b7a      	ldr	r3, [pc, #488]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	4a79      	ldr	r2, [pc, #484]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80fe 	beq.w	8003f92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	f040 80d0 	bne.w	8003f40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003da0:	4b72      	ldr	r3, [pc, #456]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0203 	and.w	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d130      	bne.n	8003e16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d127      	bne.n	8003e16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d11f      	bne.n	8003e16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003de0:	2a07      	cmp	r2, #7
 8003de2:	bf14      	ite	ne
 8003de4:	2201      	movne	r2, #1
 8003de6:	2200      	moveq	r2, #0
 8003de8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d113      	bne.n	8003e16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	085b      	lsrs	r3, r3, #1
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d109      	bne.n	8003e16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d06e      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b0c      	cmp	r3, #12
 8003e1a:	d069      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e1c:	4b53      	ldr	r3, [pc, #332]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e28:	4b50      	ldr	r3, [pc, #320]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0ad      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e38:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a4b      	ldr	r2, [pc, #300]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e44:	f7fe f96e 	bl	8002124 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fe f96a 	bl	8002124 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e09a      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e5e:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e6a:	4b40      	ldr	r3, [pc, #256]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	4b40      	ldr	r3, [pc, #256]	; (8003f70 <HAL_RCC_OscConfig+0x784>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e7a:	3a01      	subs	r2, #1
 8003e7c:	0112      	lsls	r2, r2, #4
 8003e7e:	4311      	orrs	r1, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e84:	0212      	lsls	r2, r2, #8
 8003e86:	4311      	orrs	r1, r2
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e8c:	0852      	lsrs	r2, r2, #1
 8003e8e:	3a01      	subs	r2, #1
 8003e90:	0552      	lsls	r2, r2, #21
 8003e92:	4311      	orrs	r1, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e98:	0852      	lsrs	r2, r2, #1
 8003e9a:	3a01      	subs	r2, #1
 8003e9c:	0652      	lsls	r2, r2, #25
 8003e9e:	4311      	orrs	r1, r2
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ea4:	0912      	lsrs	r2, r2, #4
 8003ea6:	0452      	lsls	r2, r2, #17
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	4930      	ldr	r1, [pc, #192]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003eb0:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2d      	ldr	r2, [pc, #180]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ebc:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ec8:	f7fe f92c 	bl	8002124 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fe f928 	bl	8002124 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e058      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee2:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eee:	e050      	b.n	8003f92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e04f      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d148      	bne.n	8003f92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f00:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a19      	ldr	r2, [pc, #100]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f0c:	4b17      	ldr	r3, [pc, #92]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a16      	ldr	r2, [pc, #88]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f18:	f7fe f904 	bl	8002124 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fe f900 	bl	8002124 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e030      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f32:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x734>
 8003f3e:	e028      	b.n	8003f92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	d023      	beq.n	8003f8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fe f8e7 	bl	8002124 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f58:	e00c      	b.n	8003f74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fe f8e3 	bl	8002124 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d905      	bls.n	8003f74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e013      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_RCC_OscConfig+0x7b0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ec      	bne.n	8003f5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_RCC_OscConfig+0x7b0>)
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	4905      	ldr	r1, [pc, #20]	; (8003f9c <HAL_RCC_OscConfig+0x7b0>)
 8003f86:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCC_OscConfig+0x7b4>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60cb      	str	r3, [r1, #12]
 8003f8c:	e001      	b.n	8003f92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	feeefffc 	.word	0xfeeefffc

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0e7      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b75      	ldr	r3, [pc, #468]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d910      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b72      	ldr	r3, [pc, #456]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0207 	bic.w	r2, r3, #7
 8003fce:	4970      	ldr	r1, [pc, #448]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b6e      	ldr	r3, [pc, #440]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0cf      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d010      	beq.n	8004016 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	4b66      	ldr	r3, [pc, #408]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004000:	429a      	cmp	r2, r3
 8004002:	d908      	bls.n	8004016 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004004:	4b63      	ldr	r3, [pc, #396]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4960      	ldr	r1, [pc, #384]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d04c      	beq.n	80040bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b03      	cmp	r3, #3
 8004028:	d107      	bne.n	800403a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800402a:	4b5a      	ldr	r3, [pc, #360]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d121      	bne.n	800407a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e0a6      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004042:	4b54      	ldr	r3, [pc, #336]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d115      	bne.n	800407a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e09a      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d107      	bne.n	800406a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800405a:	4b4e      	ldr	r3, [pc, #312]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e08e      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800406a:	4b4a      	ldr	r3, [pc, #296]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e086      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800407a:	4b46      	ldr	r3, [pc, #280]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f023 0203 	bic.w	r2, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4943      	ldr	r1, [pc, #268]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004088:	4313      	orrs	r3, r2
 800408a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fe f84a 	bl	8002124 <HAL_GetTick>
 8004090:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	e00a      	b.n	80040aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004094:	f7fe f846 	bl	8002124 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e06e      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	4b3a      	ldr	r3, [pc, #232]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 020c 	and.w	r2, r3, #12
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d1eb      	bne.n	8004094 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d010      	beq.n	80040ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d208      	bcs.n	80040ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d8:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	492b      	ldr	r1, [pc, #172]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ea:	4b29      	ldr	r3, [pc, #164]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d210      	bcs.n	800411a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f8:	4b25      	ldr	r3, [pc, #148]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 0207 	bic.w	r2, r3, #7
 8004100:	4923      	ldr	r1, [pc, #140]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	4313      	orrs	r3, r2
 8004106:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004108:	4b21      	ldr	r3, [pc, #132]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d001      	beq.n	800411a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e036      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	d008      	beq.n	8004138 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004126:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	4918      	ldr	r1, [pc, #96]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004134:	4313      	orrs	r3, r2
 8004136:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d009      	beq.n	8004158 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4910      	ldr	r1, [pc, #64]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004158:	f000 f824 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 800415c:	4602      	mov	r2, r0
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	490b      	ldr	r1, [pc, #44]	; (8004198 <HAL_RCC_ClockConfig+0x1f4>)
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
 8004174:	4a09      	ldr	r2, [pc, #36]	; (800419c <HAL_RCC_ClockConfig+0x1f8>)
 8004176:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <HAL_RCC_ClockConfig+0x1fc>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7fd f8ef 	bl	8001360 <HAL_InitTick>
 8004182:	4603      	mov	r3, r0
 8004184:	72fb      	strb	r3, [r7, #11]

  return status;
 8004186:	7afb      	ldrb	r3, [r7, #11]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40022000 	.word	0x40022000
 8004194:	40021000 	.word	0x40021000
 8004198:	0800dce4 	.word	0x0800dce4
 800419c:	20000000 	.word	0x20000000
 80041a0:	20000038 	.word	0x20000038

080041a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b089      	sub	sp, #36	; 0x24
 80041a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	2300      	movs	r3, #0
 80041b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b2:	4b3e      	ldr	r3, [pc, #248]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041bc:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0x34>
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b0c      	cmp	r3, #12
 80041d0:	d121      	bne.n	8004216 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d11e      	bne.n	8004216 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041d8:	4b34      	ldr	r3, [pc, #208]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041e4:	4b31      	ldr	r3, [pc, #196]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e005      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041f4:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004200:	4a2b      	ldr	r2, [pc, #172]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004208:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10d      	bne.n	800422c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004214:	e00a      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b04      	cmp	r3, #4
 800421a:	d102      	bne.n	8004222 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800421e:	61bb      	str	r3, [r7, #24]
 8004220:	e004      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d101      	bne.n	800422c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004228:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800422a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b0c      	cmp	r3, #12
 8004230:	d134      	bne.n	800429c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004232:	4b1e      	ldr	r3, [pc, #120]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d003      	beq.n	800424a <HAL_RCC_GetSysClockFreq+0xa6>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d003      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0xac>
 8004248:	e005      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800424a:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800424c:	617b      	str	r3, [r7, #20]
      break;
 800424e:	e005      	b.n	800425c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004250:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004252:	617b      	str	r3, [r7, #20]
      break;
 8004254:	e002      	b.n	800425c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	617b      	str	r3, [r7, #20]
      break;
 800425a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800425c:	4b13      	ldr	r3, [pc, #76]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	3301      	adds	r3, #1
 8004268:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	fb03 f202 	mul.w	r2, r3, r2
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	0e5b      	lsrs	r3, r3, #25
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	3301      	adds	r3, #1
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800429c:	69bb      	ldr	r3, [r7, #24]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3724      	adds	r7, #36	; 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
 80042b0:	0800dcfc 	.word	0x0800dcfc
 80042b4:	00f42400 	.word	0x00f42400
 80042b8:	007a1200 	.word	0x007a1200

080042bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c0:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042c2:	681b      	ldr	r3, [r3, #0]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000000 	.word	0x20000000

080042d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042d8:	f7ff fff0 	bl	80042bc <HAL_RCC_GetHCLKFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4904      	ldr	r1, [pc, #16]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40021000 	.word	0x40021000
 80042fc:	0800dcf4 	.word	0x0800dcf4

08004300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004304:	f7ff ffda 	bl	80042bc <HAL_RCC_GetHCLKFreq>
 8004308:	4602      	mov	r2, r0
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <HAL_RCC_GetPCLK2Freq+0x24>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	0adb      	lsrs	r3, r3, #11
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4904      	ldr	r1, [pc, #16]	; (8004328 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40021000 	.word	0x40021000
 8004328:	0800dcf4 	.word	0x0800dcf4

0800432c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	220f      	movs	r2, #15
 800433a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800433c:	4b12      	ldr	r3, [pc, #72]	; (8004388 <HAL_RCC_GetClockConfig+0x5c>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 0203 	and.w	r2, r3, #3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004348:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <HAL_RCC_GetClockConfig+0x5c>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004354:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <HAL_RCC_GetClockConfig+0x5c>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004360:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_RCC_GetClockConfig+0x5c>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	08db      	lsrs	r3, r3, #3
 8004366:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800436e:	4b07      	ldr	r3, [pc, #28]	; (800438c <HAL_RCC_GetClockConfig+0x60>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0207 	and.w	r2, r3, #7
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	601a      	str	r2, [r3, #0]
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000
 800438c:	40022000 	.word	0x40022000

08004390 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004398:	2300      	movs	r3, #0
 800439a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800439c:	4b2a      	ldr	r3, [pc, #168]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043a8:	f7ff f9bc 	bl	8003724 <HAL_PWREx_GetVoltageRange>
 80043ac:	6178      	str	r0, [r7, #20]
 80043ae:	e014      	b.n	80043da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	4a24      	ldr	r2, [pc, #144]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ba:	6593      	str	r3, [r2, #88]	; 0x58
 80043bc:	4b22      	ldr	r3, [pc, #136]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043c8:	f7ff f9ac 	bl	8003724 <HAL_PWREx_GetVoltageRange>
 80043cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043ce:	4b1e      	ldr	r3, [pc, #120]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	4a1d      	ldr	r2, [pc, #116]	; (8004448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e0:	d10b      	bne.n	80043fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b80      	cmp	r3, #128	; 0x80
 80043e6:	d919      	bls.n	800441c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2ba0      	cmp	r3, #160	; 0xa0
 80043ec:	d902      	bls.n	80043f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043ee:	2302      	movs	r3, #2
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	e013      	b.n	800441c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043f4:	2301      	movs	r3, #1
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	e010      	b.n	800441c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b80      	cmp	r3, #128	; 0x80
 80043fe:	d902      	bls.n	8004406 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004400:	2303      	movs	r3, #3
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	e00a      	b.n	800441c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b80      	cmp	r3, #128	; 0x80
 800440a:	d102      	bne.n	8004412 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800440c:	2302      	movs	r3, #2
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	e004      	b.n	800441c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b70      	cmp	r3, #112	; 0x70
 8004416:	d101      	bne.n	800441c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004418:	2301      	movs	r3, #1
 800441a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f023 0207 	bic.w	r2, r3, #7
 8004424:	4909      	ldr	r1, [pc, #36]	; (800444c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800442c:	4b07      	ldr	r3, [pc, #28]	; (800444c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	429a      	cmp	r2, r3
 8004438:	d001      	beq.n	800443e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40021000 	.word	0x40021000
 800444c:	40022000 	.word	0x40022000

08004450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004458:	2300      	movs	r3, #0
 800445a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800445c:	2300      	movs	r3, #0
 800445e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004468:	2b00      	cmp	r3, #0
 800446a:	d041      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004470:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004474:	d02a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004476:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800447a:	d824      	bhi.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800447c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004480:	d008      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004486:	d81e      	bhi.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800448c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004490:	d010      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004492:	e018      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004494:	4b86      	ldr	r3, [pc, #536]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	4a85      	ldr	r2, [pc, #532]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044a0:	e015      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3304      	adds	r3, #4
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fabb 	bl	8004a24 <RCCEx_PLLSAI1_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044b2:	e00c      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3320      	adds	r3, #32
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fba6 	bl	8004c0c <RCCEx_PLLSAI2_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044c4:	e003      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	74fb      	strb	r3, [r7, #19]
      break;
 80044ca:	e000      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ce:	7cfb      	ldrb	r3, [r7, #19]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10b      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044d4:	4b76      	ldr	r3, [pc, #472]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044e2:	4973      	ldr	r1, [pc, #460]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044ea:	e001      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d041      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004500:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004504:	d02a      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004506:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800450a:	d824      	bhi.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800450c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004510:	d008      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004512:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004516:	d81e      	bhi.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800451c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004520:	d010      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004522:	e018      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004524:	4b62      	ldr	r3, [pc, #392]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	4a61      	ldr	r2, [pc, #388]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800452a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004530:	e015      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3304      	adds	r3, #4
 8004536:	2100      	movs	r1, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fa73 	bl	8004a24 <RCCEx_PLLSAI1_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004542:	e00c      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3320      	adds	r3, #32
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fb5e 	bl	8004c0c <RCCEx_PLLSAI2_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004554:	e003      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	74fb      	strb	r3, [r7, #19]
      break;
 800455a:	e000      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800455c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455e:	7cfb      	ldrb	r3, [r7, #19]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10b      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004564:	4b52      	ldr	r3, [pc, #328]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004572:	494f      	ldr	r1, [pc, #316]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800457a:	e001      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457c:	7cfb      	ldrb	r3, [r7, #19]
 800457e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80a0 	beq.w	80046ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458e:	2300      	movs	r3, #0
 8004590:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004592:	4b47      	ldr	r3, [pc, #284]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00d      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a8:	4b41      	ldr	r3, [pc, #260]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	4a40      	ldr	r2, [pc, #256]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b2:	6593      	str	r3, [r2, #88]	; 0x58
 80045b4:	4b3e      	ldr	r3, [pc, #248]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c0:	2301      	movs	r3, #1
 80045c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045c4:	4b3b      	ldr	r3, [pc, #236]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a3a      	ldr	r2, [pc, #232]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045d0:	f7fd fda8 	bl	8002124 <HAL_GetTick>
 80045d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045d6:	e009      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d8:	f7fd fda4 	bl	8002124 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d902      	bls.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	74fb      	strb	r3, [r7, #19]
        break;
 80045ea:	e005      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045ec:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0ef      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d15c      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045fe:	4b2c      	ldr	r3, [pc, #176]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004608:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01f      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	429a      	cmp	r2, r3
 800461a:	d019      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004626:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004628:	4b21      	ldr	r3, [pc, #132]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	4a20      	ldr	r2, [pc, #128]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	4a1c      	ldr	r2, [pc, #112]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004648:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d016      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465a:	f7fd fd63 	bl	8002124 <HAL_GetTick>
 800465e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004660:	e00b      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fd fd5f 	bl	8002124 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d902      	bls.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	74fb      	strb	r3, [r7, #19]
            break;
 8004678:	e006      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800467a:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0ec      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10c      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800468e:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469e:	4904      	ldr	r1, [pc, #16]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046a6:	e009      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046a8:	7cfb      	ldrb	r3, [r7, #19]
 80046aa:	74bb      	strb	r3, [r7, #18]
 80046ac:	e006      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b8:	7cfb      	ldrb	r3, [r7, #19]
 80046ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046bc:	7c7b      	ldrb	r3, [r7, #17]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d105      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c2:	4b9e      	ldr	r3, [pc, #632]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c6:	4a9d      	ldr	r2, [pc, #628]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046da:	4b98      	ldr	r3, [pc, #608]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	f023 0203 	bic.w	r2, r3, #3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	4994      	ldr	r1, [pc, #592]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046fc:	4b8f      	ldr	r3, [pc, #572]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	f023 020c 	bic.w	r2, r3, #12
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470a:	498c      	ldr	r1, [pc, #560]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800471e:	4b87      	ldr	r3, [pc, #540]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004724:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	4983      	ldr	r1, [pc, #524]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004740:	4b7e      	ldr	r3, [pc, #504]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004746:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	497b      	ldr	r1, [pc, #492]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004762:	4b76      	ldr	r3, [pc, #472]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004770:	4972      	ldr	r1, [pc, #456]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004784:	4b6d      	ldr	r3, [pc, #436]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004792:	496a      	ldr	r1, [pc, #424]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047a6:	4b65      	ldr	r3, [pc, #404]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b4:	4961      	ldr	r1, [pc, #388]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047c8:	4b5c      	ldr	r3, [pc, #368]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d6:	4959      	ldr	r1, [pc, #356]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047ea:	4b54      	ldr	r3, [pc, #336]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f8:	4950      	ldr	r1, [pc, #320]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800480c:	4b4b      	ldr	r3, [pc, #300]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	4948      	ldr	r1, [pc, #288]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800482e:	4b43      	ldr	r3, [pc, #268]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	493f      	ldr	r1, [pc, #252]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d028      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004850:	4b3a      	ldr	r3, [pc, #232]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800485e:	4937      	ldr	r1, [pc, #220]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800486a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800486e:	d106      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004870:	4b32      	ldr	r3, [pc, #200]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4a31      	ldr	r2, [pc, #196]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800487a:	60d3      	str	r3, [r2, #12]
 800487c:	e011      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004882:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004886:	d10c      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3304      	adds	r3, #4
 800488c:	2101      	movs	r1, #1
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f8c8 	bl	8004a24 <RCCEx_PLLSAI1_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800489e:	7cfb      	ldrb	r3, [r7, #19]
 80048a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d028      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048ae:	4b23      	ldr	r3, [pc, #140]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048bc:	491f      	ldr	r1, [pc, #124]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048cc:	d106      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ce:	4b1b      	ldr	r3, [pc, #108]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	4a1a      	ldr	r2, [pc, #104]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048d8:	60d3      	str	r3, [r2, #12]
 80048da:	e011      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e4:	d10c      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	2101      	movs	r1, #1
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 f899 	bl	8004a24 <RCCEx_PLLSAI1_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048f6:	7cfb      	ldrb	r3, [r7, #19]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d02b      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491a:	4908      	ldr	r1, [pc, #32]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800492a:	d109      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4a02      	ldr	r2, [pc, #8]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004936:	60d3      	str	r3, [r2, #12]
 8004938:	e014      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800493a:	bf00      	nop
 800493c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004948:	d10c      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3304      	adds	r3, #4
 800494e:	2101      	movs	r1, #1
 8004950:	4618      	mov	r0, r3
 8004952:	f000 f867 	bl	8004a24 <RCCEx_PLLSAI1_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800495a:	7cfb      	ldrb	r3, [r7, #19]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004960:	7cfb      	ldrb	r3, [r7, #19]
 8004962:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d02f      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004970:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800497e:	4928      	ldr	r1, [pc, #160]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800498a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800498e:	d10d      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	2102      	movs	r1, #2
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f844 	bl	8004a24 <RCCEx_PLLSAI1_Config>
 800499c:	4603      	mov	r3, r0
 800499e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d014      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049a6:	7cfb      	ldrb	r3, [r7, #19]
 80049a8:	74bb      	strb	r3, [r7, #18]
 80049aa:	e011      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3320      	adds	r3, #32
 80049ba:	2102      	movs	r1, #2
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 f925 	bl	8004c0c <RCCEx_PLLSAI2_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049c6:	7cfb      	ldrb	r3, [r7, #19]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049cc:	7cfb      	ldrb	r3, [r7, #19]
 80049ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049dc:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ea:	490d      	ldr	r1, [pc, #52]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049fe:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a0e:	4904      	ldr	r1, [pc, #16]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a16:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40021000 	.word	0x40021000

08004a24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a32:	4b75      	ldr	r3, [pc, #468]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d018      	beq.n	8004a70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a3e:	4b72      	ldr	r3, [pc, #456]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f003 0203 	and.w	r2, r3, #3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d10d      	bne.n	8004a6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
       ||
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a56:	4b6c      	ldr	r3, [pc, #432]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	091b      	lsrs	r3, r3, #4
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
       ||
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d047      	beq.n	8004afa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	73fb      	strb	r3, [r7, #15]
 8004a6e:	e044      	b.n	8004afa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d018      	beq.n	8004aaa <RCCEx_PLLSAI1_Config+0x86>
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d825      	bhi.n	8004ac8 <RCCEx_PLLSAI1_Config+0xa4>
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d002      	beq.n	8004a86 <RCCEx_PLLSAI1_Config+0x62>
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d009      	beq.n	8004a98 <RCCEx_PLLSAI1_Config+0x74>
 8004a84:	e020      	b.n	8004ac8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a86:	4b60      	ldr	r3, [pc, #384]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11d      	bne.n	8004ace <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a96:	e01a      	b.n	8004ace <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a98:	4b5b      	ldr	r3, [pc, #364]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d116      	bne.n	8004ad2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa8:	e013      	b.n	8004ad2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004aaa:	4b57      	ldr	r3, [pc, #348]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10f      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ab6:	4b54      	ldr	r3, [pc, #336]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ac6:	e006      	b.n	8004ad6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
      break;
 8004acc:	e004      	b.n	8004ad8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ace:	bf00      	nop
 8004ad0:	e002      	b.n	8004ad8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ad6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10d      	bne.n	8004afa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ade:	4b4a      	ldr	r3, [pc, #296]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6819      	ldr	r1, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	430b      	orrs	r3, r1
 8004af4:	4944      	ldr	r1, [pc, #272]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d17d      	bne.n	8004bfc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b00:	4b41      	ldr	r3, [pc, #260]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a40      	ldr	r2, [pc, #256]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b0c:	f7fd fb0a 	bl	8002124 <HAL_GetTick>
 8004b10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b12:	e009      	b.n	8004b28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b14:	f7fd fb06 	bl	8002124 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d902      	bls.n	8004b28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	73fb      	strb	r3, [r7, #15]
        break;
 8004b26:	e005      	b.n	8004b34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b28:	4b37      	ldr	r3, [pc, #220]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1ef      	bne.n	8004b14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d160      	bne.n	8004bfc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d111      	bne.n	8004b64 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b40:	4b31      	ldr	r3, [pc, #196]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6892      	ldr	r2, [r2, #8]
 8004b50:	0211      	lsls	r1, r2, #8
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68d2      	ldr	r2, [r2, #12]
 8004b56:	0912      	lsrs	r2, r2, #4
 8004b58:	0452      	lsls	r2, r2, #17
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	492a      	ldr	r1, [pc, #168]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	610b      	str	r3, [r1, #16]
 8004b62:	e027      	b.n	8004bb4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d112      	bne.n	8004b90 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b6a:	4b27      	ldr	r3, [pc, #156]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6892      	ldr	r2, [r2, #8]
 8004b7a:	0211      	lsls	r1, r2, #8
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6912      	ldr	r2, [r2, #16]
 8004b80:	0852      	lsrs	r2, r2, #1
 8004b82:	3a01      	subs	r2, #1
 8004b84:	0552      	lsls	r2, r2, #21
 8004b86:	430a      	orrs	r2, r1
 8004b88:	491f      	ldr	r1, [pc, #124]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	610b      	str	r3, [r1, #16]
 8004b8e:	e011      	b.n	8004bb4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b90:	4b1d      	ldr	r3, [pc, #116]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6892      	ldr	r2, [r2, #8]
 8004ba0:	0211      	lsls	r1, r2, #8
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6952      	ldr	r2, [r2, #20]
 8004ba6:	0852      	lsrs	r2, r2, #1
 8004ba8:	3a01      	subs	r2, #1
 8004baa:	0652      	lsls	r2, r2, #25
 8004bac:	430a      	orrs	r2, r1
 8004bae:	4916      	ldr	r1, [pc, #88]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bb4:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a13      	ldr	r2, [pc, #76]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc0:	f7fd fab0 	bl	8002124 <HAL_GetTick>
 8004bc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bc6:	e009      	b.n	8004bdc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bc8:	f7fd faac 	bl	8002124 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d902      	bls.n	8004bdc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	73fb      	strb	r3, [r7, #15]
          break;
 8004bda:	e005      	b.n	8004be8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0ef      	beq.n	8004bc8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	4904      	ldr	r1, [pc, #16]	; (8004c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40021000 	.word	0x40021000

08004c0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c1a:	4b6a      	ldr	r3, [pc, #424]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d018      	beq.n	8004c58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c26:	4b67      	ldr	r3, [pc, #412]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0203 	and.w	r2, r3, #3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d10d      	bne.n	8004c52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
       ||
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c3e:	4b61      	ldr	r3, [pc, #388]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d047      	beq.n	8004ce2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
 8004c56:	e044      	b.n	8004ce2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d018      	beq.n	8004c92 <RCCEx_PLLSAI2_Config+0x86>
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d825      	bhi.n	8004cb0 <RCCEx_PLLSAI2_Config+0xa4>
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d002      	beq.n	8004c6e <RCCEx_PLLSAI2_Config+0x62>
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d009      	beq.n	8004c80 <RCCEx_PLLSAI2_Config+0x74>
 8004c6c:	e020      	b.n	8004cb0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c6e:	4b55      	ldr	r3, [pc, #340]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d11d      	bne.n	8004cb6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c7e:	e01a      	b.n	8004cb6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c80:	4b50      	ldr	r3, [pc, #320]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d116      	bne.n	8004cba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c90:	e013      	b.n	8004cba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c92:	4b4c      	ldr	r3, [pc, #304]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10f      	bne.n	8004cbe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c9e:	4b49      	ldr	r3, [pc, #292]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cae:	e006      	b.n	8004cbe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb4:	e004      	b.n	8004cc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cb6:	bf00      	nop
 8004cb8:	e002      	b.n	8004cc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cba:	bf00      	nop
 8004cbc:	e000      	b.n	8004cc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10d      	bne.n	8004ce2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cc6:	4b3f      	ldr	r3, [pc, #252]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6819      	ldr	r1, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	430b      	orrs	r3, r1
 8004cdc:	4939      	ldr	r1, [pc, #228]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d167      	bne.n	8004db8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ce8:	4b36      	ldr	r3, [pc, #216]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a35      	ldr	r2, [pc, #212]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf4:	f7fd fa16 	bl	8002124 <HAL_GetTick>
 8004cf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cfa:	e009      	b.n	8004d10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cfc:	f7fd fa12 	bl	8002124 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d902      	bls.n	8004d10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d0e:	e005      	b.n	8004d1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d10:	4b2c      	ldr	r3, [pc, #176]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1ef      	bne.n	8004cfc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d14a      	bne.n	8004db8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d111      	bne.n	8004d4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d28:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6892      	ldr	r2, [r2, #8]
 8004d38:	0211      	lsls	r1, r2, #8
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68d2      	ldr	r2, [r2, #12]
 8004d3e:	0912      	lsrs	r2, r2, #4
 8004d40:	0452      	lsls	r2, r2, #17
 8004d42:	430a      	orrs	r2, r1
 8004d44:	491f      	ldr	r1, [pc, #124]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	614b      	str	r3, [r1, #20]
 8004d4a:	e011      	b.n	8004d70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6892      	ldr	r2, [r2, #8]
 8004d5c:	0211      	lsls	r1, r2, #8
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6912      	ldr	r2, [r2, #16]
 8004d62:	0852      	lsrs	r2, r2, #1
 8004d64:	3a01      	subs	r2, #1
 8004d66:	0652      	lsls	r2, r2, #25
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	4916      	ldr	r1, [pc, #88]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d70:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a13      	ldr	r2, [pc, #76]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fd f9d2 	bl	8002124 <HAL_GetTick>
 8004d80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d82:	e009      	b.n	8004d98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d84:	f7fd f9ce 	bl	8002124 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d902      	bls.n	8004d98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	73fb      	strb	r3, [r7, #15]
          break;
 8004d96:	e005      	b.n	8004da4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d98:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0ef      	beq.n	8004d84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	4904      	ldr	r1, [pc, #16]	; (8004dc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40021000 	.word	0x40021000

08004dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e049      	b.n	8004e6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f841 	bl	8004e76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3304      	adds	r3, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	4610      	mov	r0, r2
 8004e08:	f000 f9f8 	bl	80051fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d001      	beq.n	8004ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e04f      	b.n	8004f44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a23      	ldr	r2, [pc, #140]	; (8004f50 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d01d      	beq.n	8004f02 <HAL_TIM_Base_Start_IT+0x76>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ece:	d018      	beq.n	8004f02 <HAL_TIM_Base_Start_IT+0x76>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <HAL_TIM_Base_Start_IT+0x76>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1e      	ldr	r2, [pc, #120]	; (8004f58 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <HAL_TIM_Base_Start_IT+0x76>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <HAL_TIM_Base_Start_IT+0xd0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d009      	beq.n	8004f02 <HAL_TIM_Base_Start_IT+0x76>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <HAL_TIM_Base_Start_IT+0x76>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a19      	ldr	r2, [pc, #100]	; (8004f64 <HAL_TIM_Base_Start_IT+0xd8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d115      	bne.n	8004f2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b06      	cmp	r3, #6
 8004f12:	d015      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0xb4>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1a:	d011      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2c:	e008      	b.n	8004f40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0201 	orr.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	e000      	b.n	8004f42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	40000c00 	.word	0x40000c00
 8004f60:	40013400 	.word	0x40013400
 8004f64:	40014000 	.word	0x40014000
 8004f68:	00010007 	.word	0x00010007

08004f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d122      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d11b      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0202 	mvn.w	r2, #2
 8004f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f905 	bl	80051be <HAL_TIM_IC_CaptureCallback>
 8004fb4:	e005      	b.n	8004fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f8f7 	bl	80051aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f908 	bl	80051d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d122      	bne.n	800501c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d11b      	bne.n	800501c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0204 	mvn.w	r2, #4
 8004fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f8db 	bl	80051be <HAL_TIM_IC_CaptureCallback>
 8005008:	e005      	b.n	8005016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f8cd 	bl	80051aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f8de 	bl	80051d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b08      	cmp	r3, #8
 8005028:	d122      	bne.n	8005070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b08      	cmp	r3, #8
 8005036:	d11b      	bne.n	8005070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0208 	mvn.w	r2, #8
 8005040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2204      	movs	r2, #4
 8005046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f8b1 	bl	80051be <HAL_TIM_IC_CaptureCallback>
 800505c:	e005      	b.n	800506a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f8a3 	bl	80051aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f8b4 	bl	80051d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b10      	cmp	r3, #16
 800507c:	d122      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b10      	cmp	r3, #16
 800508a:	d11b      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0210 	mvn.w	r2, #16
 8005094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2208      	movs	r2, #8
 800509a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f887 	bl	80051be <HAL_TIM_IC_CaptureCallback>
 80050b0:	e005      	b.n	80050be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f879 	bl	80051aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f88a 	bl	80051d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d10e      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d107      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0201 	mvn.w	r2, #1
 80050e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fc f8f8 	bl	80012e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	2b80      	cmp	r3, #128	; 0x80
 80050fc:	d10e      	bne.n	800511c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	2b80      	cmp	r3, #128	; 0x80
 800510a:	d107      	bne.n	800511c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f914 	bl	8005344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512a:	d10e      	bne.n	800514a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	2b80      	cmp	r3, #128	; 0x80
 8005138:	d107      	bne.n	800514a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f907 	bl	8005358 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d10e      	bne.n	8005176 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005162:	2b40      	cmp	r3, #64	; 0x40
 8005164:	d107      	bne.n	8005176 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800516e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f838 	bl	80051e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b20      	cmp	r3, #32
 8005182:	d10e      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b20      	cmp	r3, #32
 8005190:	d107      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f06f 0220 	mvn.w	r2, #32
 800519a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f8c7 	bl	8005330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
	...

080051fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a40      	ldr	r2, [pc, #256]	; (8005310 <TIM_Base_SetConfig+0x114>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521a:	d00f      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a3d      	ldr	r2, [pc, #244]	; (8005314 <TIM_Base_SetConfig+0x118>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00b      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a3c      	ldr	r2, [pc, #240]	; (8005318 <TIM_Base_SetConfig+0x11c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d007      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a3b      	ldr	r2, [pc, #236]	; (800531c <TIM_Base_SetConfig+0x120>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a3a      	ldr	r2, [pc, #232]	; (8005320 <TIM_Base_SetConfig+0x124>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d108      	bne.n	800524e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a2f      	ldr	r2, [pc, #188]	; (8005310 <TIM_Base_SetConfig+0x114>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d01f      	beq.n	8005296 <TIM_Base_SetConfig+0x9a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525c:	d01b      	beq.n	8005296 <TIM_Base_SetConfig+0x9a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2c      	ldr	r2, [pc, #176]	; (8005314 <TIM_Base_SetConfig+0x118>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d017      	beq.n	8005296 <TIM_Base_SetConfig+0x9a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a2b      	ldr	r2, [pc, #172]	; (8005318 <TIM_Base_SetConfig+0x11c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d013      	beq.n	8005296 <TIM_Base_SetConfig+0x9a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2a      	ldr	r2, [pc, #168]	; (800531c <TIM_Base_SetConfig+0x120>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00f      	beq.n	8005296 <TIM_Base_SetConfig+0x9a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a29      	ldr	r2, [pc, #164]	; (8005320 <TIM_Base_SetConfig+0x124>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00b      	beq.n	8005296 <TIM_Base_SetConfig+0x9a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a28      	ldr	r2, [pc, #160]	; (8005324 <TIM_Base_SetConfig+0x128>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d007      	beq.n	8005296 <TIM_Base_SetConfig+0x9a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a27      	ldr	r2, [pc, #156]	; (8005328 <TIM_Base_SetConfig+0x12c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d003      	beq.n	8005296 <TIM_Base_SetConfig+0x9a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a26      	ldr	r2, [pc, #152]	; (800532c <TIM_Base_SetConfig+0x130>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d108      	bne.n	80052a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a10      	ldr	r2, [pc, #64]	; (8005310 <TIM_Base_SetConfig+0x114>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00f      	beq.n	80052f4 <TIM_Base_SetConfig+0xf8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a12      	ldr	r2, [pc, #72]	; (8005320 <TIM_Base_SetConfig+0x124>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_Base_SetConfig+0xf8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a11      	ldr	r2, [pc, #68]	; (8005324 <TIM_Base_SetConfig+0x128>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_Base_SetConfig+0xf8>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a10      	ldr	r2, [pc, #64]	; (8005328 <TIM_Base_SetConfig+0x12c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0xf8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a0f      	ldr	r2, [pc, #60]	; (800532c <TIM_Base_SetConfig+0x130>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d103      	bne.n	80052fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	615a      	str	r2, [r3, #20]
}
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40012c00 	.word	0x40012c00
 8005314:	40000400 	.word	0x40000400
 8005318:	40000800 	.word	0x40000800
 800531c:	40000c00 	.word	0x40000c00
 8005320:	40013400 	.word	0x40013400
 8005324:	40014000 	.word	0x40014000
 8005328:	40014400 	.word	0x40014400
 800532c:	40014800 	.word	0x40014800

08005330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e040      	b.n	8005400 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fc f9aa 	bl	80016e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2224      	movs	r2, #36	; 0x24
 8005398:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fbc8 	bl	8005b40 <UART_SetConfig>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e022      	b.n	8005400 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fe74 	bl	80060b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fefb 	bl	80061f4 <UART_CheckIdleState>
 80053fe:	4603      	mov	r3, r0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800541a:	2b20      	cmp	r3, #32
 800541c:	d178      	bne.n	8005510 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_UART_Transmit_DMA+0x22>
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e071      	b.n	8005512 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_UART_Transmit_DMA+0x34>
 8005438:	2302      	movs	r3, #2
 800543a:	e06a      	b.n	8005512 <HAL_UART_Transmit_DMA+0x10a>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	88fa      	ldrh	r2, [r7, #6]
 800544e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	88fa      	ldrh	r2, [r7, #6]
 8005456:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2221      	movs	r2, #33	; 0x21
 8005466:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d02b      	beq.n	80054c8 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005474:	4a29      	ldr	r2, [pc, #164]	; (800551c <HAL_UART_Transmit_DMA+0x114>)
 8005476:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800547c:	4a28      	ldr	r2, [pc, #160]	; (8005520 <HAL_UART_Transmit_DMA+0x118>)
 800547e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005484:	4a27      	ldr	r2, [pc, #156]	; (8005524 <HAL_UART_Transmit_DMA+0x11c>)
 8005486:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800548c:	2200      	movs	r2, #0
 800548e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005498:	4619      	mov	r1, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3328      	adds	r3, #40	; 0x28
 80054a0:	461a      	mov	r2, r3
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	f7fc ffe4 	bl	8002470 <HAL_DMA_Start_IT>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00c      	beq.n	80054c8 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2210      	movs	r2, #16
 80054b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e024      	b.n	8005512 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2240      	movs	r2, #64	; 0x40
 80054ce:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3308      	adds	r3, #8
 80054de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	613b      	str	r3, [r7, #16]
   return(result);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3308      	adds	r3, #8
 80054f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f8:	623a      	str	r2, [r7, #32]
 80054fa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	69f9      	ldr	r1, [r7, #28]
 80054fe:	6a3a      	ldr	r2, [r7, #32]
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	61bb      	str	r3, [r7, #24]
   return(result);
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e5      	bne.n	80054d8 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	e000      	b.n	8005512 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005510:	2302      	movs	r3, #2
  }
}
 8005512:	4618      	mov	r0, r3
 8005514:	3728      	adds	r7, #40	; 0x28
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	08006521 	.word	0x08006521
 8005520:	080065bb 	.word	0x080065bb
 8005524:	080065d7 	.word	0x080065d7

08005528 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b0ba      	sub	sp, #232	; 0xe8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800554e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005552:	f640 030f 	movw	r3, #2063	; 0x80f
 8005556:	4013      	ands	r3, r2
 8005558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800555c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d115      	bne.n	8005590 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00f      	beq.n	8005590 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d009      	beq.n	8005590 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 82a6 	beq.w	8005ad2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4798      	blx	r3
      }
      return;
 800558e:	e2a0      	b.n	8005ad2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8117 	beq.w	80057c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800559a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055aa:	4b85      	ldr	r3, [pc, #532]	; (80057c0 <HAL_UART_IRQHandler+0x298>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 810a 	beq.w	80057c8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d011      	beq.n	80055e4 <HAL_UART_IRQHandler+0xbc>
 80055c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2201      	movs	r2, #1
 80055d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055da:	f043 0201 	orr.w	r2, r3, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d011      	beq.n	8005614 <HAL_UART_IRQHandler+0xec>
 80055f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00b      	beq.n	8005614 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2202      	movs	r2, #2
 8005602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800560a:	f043 0204 	orr.w	r2, r3, #4
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d011      	beq.n	8005644 <HAL_UART_IRQHandler+0x11c>
 8005620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00b      	beq.n	8005644 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2204      	movs	r2, #4
 8005632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800563a:	f043 0202 	orr.w	r2, r3, #2
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d017      	beq.n	8005680 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b00      	cmp	r3, #0
 800565a:	d105      	bne.n	8005668 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800565c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005660:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2208      	movs	r2, #8
 800566e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005676:	f043 0208 	orr.w	r2, r3, #8
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005688:	2b00      	cmp	r3, #0
 800568a:	d012      	beq.n	80056b2 <HAL_UART_IRQHandler+0x18a>
 800568c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00c      	beq.n	80056b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a8:	f043 0220 	orr.w	r2, r3, #32
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 820c 	beq.w	8005ad6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00d      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d005      	beq.n	800570a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005702:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005706:	2b00      	cmp	r3, #0
 8005708:	d04f      	beq.n	80057aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fea5 	bl	800645a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d141      	bne.n	80057a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3308      	adds	r3, #8
 8005724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3308      	adds	r3, #8
 8005746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800574a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800574e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1d9      	bne.n	800571e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576e:	2b00      	cmp	r3, #0
 8005770:	d013      	beq.n	800579a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <HAL_UART_IRQHandler+0x29c>)
 8005778:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	4618      	mov	r0, r3
 8005780:	f7fc ff14 	bl	80025ac <HAL_DMA_Abort_IT>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d017      	beq.n	80057ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005794:	4610      	mov	r0, r2
 8005796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005798:	e00f      	b.n	80057ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9ba 	bl	8005b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a0:	e00b      	b.n	80057ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f9b6 	bl	8005b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	e007      	b.n	80057ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f9b2 	bl	8005b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80057b8:	e18d      	b.n	8005ad6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ba:	bf00      	nop
    return;
 80057bc:	e18b      	b.n	8005ad6 <HAL_UART_IRQHandler+0x5ae>
 80057be:	bf00      	nop
 80057c0:	04000120 	.word	0x04000120
 80057c4:	08006653 	.word	0x08006653

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	f040 8146 	bne.w	8005a5e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d6:	f003 0310 	and.w	r3, r3, #16
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 813f 	beq.w	8005a5e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 8138 	beq.w	8005a5e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2210      	movs	r2, #16
 80057f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	f040 80b4 	bne.w	800596e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005812:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 815f 	beq.w	8005ada <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005826:	429a      	cmp	r2, r3
 8005828:	f080 8157 	bcs.w	8005ada <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005832:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	f040 8085 	bne.w	8005952 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800585c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005872:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005876:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800587e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800588a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1da      	bne.n	8005848 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3308      	adds	r3, #8
 8005898:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058a4:	f023 0301 	bic.w	r3, r3, #1
 80058a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3308      	adds	r3, #8
 80058b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e1      	bne.n	8005892 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3308      	adds	r3, #8
 80058d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3308      	adds	r3, #8
 80058ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e3      	bne.n	80058ce <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005922:	f023 0310 	bic.w	r3, r3, #16
 8005926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005934:	65bb      	str	r3, [r7, #88]	; 0x58
 8005936:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800593a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800593c:	e841 2300 	strex	r3, r2, [r1]
 8005940:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e4      	bne.n	8005912 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594c:	4618      	mov	r0, r3
 800594e:	f7fc fdef 	bl	8002530 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800595e:	b29b      	uxth	r3, r3
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	b29b      	uxth	r3, r3
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f8de 	bl	8005b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800596c:	e0b5      	b.n	8005ada <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800597a:	b29b      	uxth	r3, r3
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 80a7 	beq.w	8005ade <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 80a2 	beq.w	8005ade <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059bc:	647b      	str	r3, [r7, #68]	; 0x44
 80059be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059c4:	e841 2300 	strex	r3, r2, [r1]
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e4      	bne.n	800599a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3308      	adds	r3, #8
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	623b      	str	r3, [r7, #32]
   return(result);
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	f023 0301 	bic.w	r3, r3, #1
 80059e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3308      	adds	r3, #8
 80059f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059f4:	633a      	str	r2, [r7, #48]	; 0x30
 80059f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e3      	bne.n	80059d0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0310 	bic.w	r3, r3, #16
 8005a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	69b9      	ldr	r1, [r7, #24]
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	617b      	str	r3, [r7, #20]
   return(result);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e4      	bne.n	8005a1a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a54:	4619      	mov	r1, r3
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f866 	bl	8005b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a5c:	e03f      	b.n	8005ade <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00e      	beq.n	8005a88 <HAL_UART_IRQHandler+0x560>
 8005a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fe26 	bl	80066d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a86:	e02d      	b.n	8005ae4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00e      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01c      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	4798      	blx	r3
    }
    return;
 8005ab0:	e017      	b.n	8005ae2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d012      	beq.n	8005ae4 <HAL_UART_IRQHandler+0x5bc>
 8005abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00c      	beq.n	8005ae4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fdd7 	bl	800667e <UART_EndTransmit_IT>
    return;
 8005ad0:	e008      	b.n	8005ae4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ad2:	bf00      	nop
 8005ad4:	e006      	b.n	8005ae4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005ad6:	bf00      	nop
 8005ad8:	e004      	b.n	8005ae4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ada:	bf00      	nop
 8005adc:	e002      	b.n	8005ae4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ade:	bf00      	nop
 8005ae0:	e000      	b.n	8005ae4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005ae2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005ae4:	37e8      	adds	r7, #232	; 0xe8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop

08005aec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b44:	b08a      	sub	sp, #40	; 0x28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	4ba4      	ldr	r3, [pc, #656]	; (8005e00 <UART_SetConfig+0x2c0>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a99      	ldr	r2, [pc, #612]	; (8005e04 <UART_SetConfig+0x2c4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a90      	ldr	r2, [pc, #576]	; (8005e08 <UART_SetConfig+0x2c8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d126      	bne.n	8005c18 <UART_SetConfig+0xd8>
 8005bca:	4b90      	ldr	r3, [pc, #576]	; (8005e0c <UART_SetConfig+0x2cc>)
 8005bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd0:	f003 0303 	and.w	r3, r3, #3
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d81b      	bhi.n	8005c10 <UART_SetConfig+0xd0>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0xa0>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005bf1 	.word	0x08005bf1
 8005be4:	08005c01 	.word	0x08005c01
 8005be8:	08005bf9 	.word	0x08005bf9
 8005bec:	08005c09 	.word	0x08005c09
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bf6:	e116      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bfe:	e112      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005c00:	2304      	movs	r3, #4
 8005c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c06:	e10e      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005c08:	2308      	movs	r3, #8
 8005c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c0e:	e10a      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005c10:	2310      	movs	r3, #16
 8005c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c16:	e106      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a7c      	ldr	r2, [pc, #496]	; (8005e10 <UART_SetConfig+0x2d0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d138      	bne.n	8005c94 <UART_SetConfig+0x154>
 8005c22:	4b7a      	ldr	r3, [pc, #488]	; (8005e0c <UART_SetConfig+0x2cc>)
 8005c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c28:	f003 030c 	and.w	r3, r3, #12
 8005c2c:	2b0c      	cmp	r3, #12
 8005c2e:	d82d      	bhi.n	8005c8c <UART_SetConfig+0x14c>
 8005c30:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <UART_SetConfig+0xf8>)
 8005c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c36:	bf00      	nop
 8005c38:	08005c6d 	.word	0x08005c6d
 8005c3c:	08005c8d 	.word	0x08005c8d
 8005c40:	08005c8d 	.word	0x08005c8d
 8005c44:	08005c8d 	.word	0x08005c8d
 8005c48:	08005c7d 	.word	0x08005c7d
 8005c4c:	08005c8d 	.word	0x08005c8d
 8005c50:	08005c8d 	.word	0x08005c8d
 8005c54:	08005c8d 	.word	0x08005c8d
 8005c58:	08005c75 	.word	0x08005c75
 8005c5c:	08005c8d 	.word	0x08005c8d
 8005c60:	08005c8d 	.word	0x08005c8d
 8005c64:	08005c8d 	.word	0x08005c8d
 8005c68:	08005c85 	.word	0x08005c85
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c72:	e0d8      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005c74:	2302      	movs	r3, #2
 8005c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c7a:	e0d4      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c82:	e0d0      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005c84:	2308      	movs	r3, #8
 8005c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c8a:	e0cc      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005c8c:	2310      	movs	r3, #16
 8005c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c92:	e0c8      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a5e      	ldr	r2, [pc, #376]	; (8005e14 <UART_SetConfig+0x2d4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d125      	bne.n	8005cea <UART_SetConfig+0x1aa>
 8005c9e:	4b5b      	ldr	r3, [pc, #364]	; (8005e0c <UART_SetConfig+0x2cc>)
 8005ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ca8:	2b30      	cmp	r3, #48	; 0x30
 8005caa:	d016      	beq.n	8005cda <UART_SetConfig+0x19a>
 8005cac:	2b30      	cmp	r3, #48	; 0x30
 8005cae:	d818      	bhi.n	8005ce2 <UART_SetConfig+0x1a2>
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d00a      	beq.n	8005cca <UART_SetConfig+0x18a>
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	d814      	bhi.n	8005ce2 <UART_SetConfig+0x1a2>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <UART_SetConfig+0x182>
 8005cbc:	2b10      	cmp	r3, #16
 8005cbe:	d008      	beq.n	8005cd2 <UART_SetConfig+0x192>
 8005cc0:	e00f      	b.n	8005ce2 <UART_SetConfig+0x1a2>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc8:	e0ad      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cd0:	e0a9      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005cd2:	2304      	movs	r3, #4
 8005cd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cd8:	e0a5      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005cda:	2308      	movs	r3, #8
 8005cdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce0:	e0a1      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005ce2:	2310      	movs	r3, #16
 8005ce4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce8:	e09d      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a4a      	ldr	r2, [pc, #296]	; (8005e18 <UART_SetConfig+0x2d8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d125      	bne.n	8005d40 <UART_SetConfig+0x200>
 8005cf4:	4b45      	ldr	r3, [pc, #276]	; (8005e0c <UART_SetConfig+0x2cc>)
 8005cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005cfe:	2bc0      	cmp	r3, #192	; 0xc0
 8005d00:	d016      	beq.n	8005d30 <UART_SetConfig+0x1f0>
 8005d02:	2bc0      	cmp	r3, #192	; 0xc0
 8005d04:	d818      	bhi.n	8005d38 <UART_SetConfig+0x1f8>
 8005d06:	2b80      	cmp	r3, #128	; 0x80
 8005d08:	d00a      	beq.n	8005d20 <UART_SetConfig+0x1e0>
 8005d0a:	2b80      	cmp	r3, #128	; 0x80
 8005d0c:	d814      	bhi.n	8005d38 <UART_SetConfig+0x1f8>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <UART_SetConfig+0x1d8>
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d008      	beq.n	8005d28 <UART_SetConfig+0x1e8>
 8005d16:	e00f      	b.n	8005d38 <UART_SetConfig+0x1f8>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d1e:	e082      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005d20:	2302      	movs	r3, #2
 8005d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d26:	e07e      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005d28:	2304      	movs	r3, #4
 8005d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d2e:	e07a      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005d30:	2308      	movs	r3, #8
 8005d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d36:	e076      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005d38:	2310      	movs	r3, #16
 8005d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d3e:	e072      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a35      	ldr	r2, [pc, #212]	; (8005e1c <UART_SetConfig+0x2dc>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d12a      	bne.n	8005da0 <UART_SetConfig+0x260>
 8005d4a:	4b30      	ldr	r3, [pc, #192]	; (8005e0c <UART_SetConfig+0x2cc>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d58:	d01a      	beq.n	8005d90 <UART_SetConfig+0x250>
 8005d5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d5e:	d81b      	bhi.n	8005d98 <UART_SetConfig+0x258>
 8005d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d64:	d00c      	beq.n	8005d80 <UART_SetConfig+0x240>
 8005d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d6a:	d815      	bhi.n	8005d98 <UART_SetConfig+0x258>
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <UART_SetConfig+0x238>
 8005d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d74:	d008      	beq.n	8005d88 <UART_SetConfig+0x248>
 8005d76:	e00f      	b.n	8005d98 <UART_SetConfig+0x258>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7e:	e052      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005d80:	2302      	movs	r3, #2
 8005d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d86:	e04e      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005d88:	2304      	movs	r3, #4
 8005d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d8e:	e04a      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005d90:	2308      	movs	r3, #8
 8005d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d96:	e046      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005d98:	2310      	movs	r3, #16
 8005d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d9e:	e042      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a17      	ldr	r2, [pc, #92]	; (8005e04 <UART_SetConfig+0x2c4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d13a      	bne.n	8005e20 <UART_SetConfig+0x2e0>
 8005daa:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <UART_SetConfig+0x2cc>)
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005db4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005db8:	d01a      	beq.n	8005df0 <UART_SetConfig+0x2b0>
 8005dba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dbe:	d81b      	bhi.n	8005df8 <UART_SetConfig+0x2b8>
 8005dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dc4:	d00c      	beq.n	8005de0 <UART_SetConfig+0x2a0>
 8005dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dca:	d815      	bhi.n	8005df8 <UART_SetConfig+0x2b8>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <UART_SetConfig+0x298>
 8005dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd4:	d008      	beq.n	8005de8 <UART_SetConfig+0x2a8>
 8005dd6:	e00f      	b.n	8005df8 <UART_SetConfig+0x2b8>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dde:	e022      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005de0:	2302      	movs	r3, #2
 8005de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de6:	e01e      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005de8:	2304      	movs	r3, #4
 8005dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dee:	e01a      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005df0:	2308      	movs	r3, #8
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df6:	e016      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005df8:	2310      	movs	r3, #16
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dfe:	e012      	b.n	8005e26 <UART_SetConfig+0x2e6>
 8005e00:	efff69f3 	.word	0xefff69f3
 8005e04:	40008000 	.word	0x40008000
 8005e08:	40013800 	.word	0x40013800
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	40004400 	.word	0x40004400
 8005e14:	40004800 	.word	0x40004800
 8005e18:	40004c00 	.word	0x40004c00
 8005e1c:	40005000 	.word	0x40005000
 8005e20:	2310      	movs	r3, #16
 8005e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a9f      	ldr	r2, [pc, #636]	; (80060a8 <UART_SetConfig+0x568>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d17a      	bne.n	8005f26 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d824      	bhi.n	8005e82 <UART_SetConfig+0x342>
 8005e38:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <UART_SetConfig+0x300>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005e65 	.word	0x08005e65
 8005e44:	08005e83 	.word	0x08005e83
 8005e48:	08005e6d 	.word	0x08005e6d
 8005e4c:	08005e83 	.word	0x08005e83
 8005e50:	08005e73 	.word	0x08005e73
 8005e54:	08005e83 	.word	0x08005e83
 8005e58:	08005e83 	.word	0x08005e83
 8005e5c:	08005e83 	.word	0x08005e83
 8005e60:	08005e7b 	.word	0x08005e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e64:	f7fe fa36 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 8005e68:	61f8      	str	r0, [r7, #28]
        break;
 8005e6a:	e010      	b.n	8005e8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e6c:	4b8f      	ldr	r3, [pc, #572]	; (80060ac <UART_SetConfig+0x56c>)
 8005e6e:	61fb      	str	r3, [r7, #28]
        break;
 8005e70:	e00d      	b.n	8005e8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e72:	f7fe f997 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8005e76:	61f8      	str	r0, [r7, #28]
        break;
 8005e78:	e009      	b.n	8005e8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e7e:	61fb      	str	r3, [r7, #28]
        break;
 8005e80:	e005      	b.n	8005e8e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 80fb 	beq.w	800608c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	4413      	add	r3, r2
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d305      	bcc.n	8005eb2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d903      	bls.n	8005eba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005eb8:	e0e8      	b.n	800608c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	461c      	mov	r4, r3
 8005ec0:	4615      	mov	r5, r2
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	022b      	lsls	r3, r5, #8
 8005ecc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ed0:	0222      	lsls	r2, r4, #8
 8005ed2:	68f9      	ldr	r1, [r7, #12]
 8005ed4:	6849      	ldr	r1, [r1, #4]
 8005ed6:	0849      	lsrs	r1, r1, #1
 8005ed8:	2000      	movs	r0, #0
 8005eda:	4688      	mov	r8, r1
 8005edc:	4681      	mov	r9, r0
 8005ede:	eb12 0a08 	adds.w	sl, r2, r8
 8005ee2:	eb43 0b09 	adc.w	fp, r3, r9
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	603b      	str	r3, [r7, #0]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ef4:	4650      	mov	r0, sl
 8005ef6:	4659      	mov	r1, fp
 8005ef8:	f7fa fec6 	bl	8000c88 <__aeabi_uldivmod>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4613      	mov	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f0a:	d308      	bcc.n	8005f1e <UART_SetConfig+0x3de>
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f12:	d204      	bcs.n	8005f1e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	60da      	str	r2, [r3, #12]
 8005f1c:	e0b6      	b.n	800608c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f24:	e0b2      	b.n	800608c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f2e:	d15e      	bne.n	8005fee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005f30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d828      	bhi.n	8005f8a <UART_SetConfig+0x44a>
 8005f38:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <UART_SetConfig+0x400>)
 8005f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3e:	bf00      	nop
 8005f40:	08005f65 	.word	0x08005f65
 8005f44:	08005f6d 	.word	0x08005f6d
 8005f48:	08005f75 	.word	0x08005f75
 8005f4c:	08005f8b 	.word	0x08005f8b
 8005f50:	08005f7b 	.word	0x08005f7b
 8005f54:	08005f8b 	.word	0x08005f8b
 8005f58:	08005f8b 	.word	0x08005f8b
 8005f5c:	08005f8b 	.word	0x08005f8b
 8005f60:	08005f83 	.word	0x08005f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f64:	f7fe f9b6 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 8005f68:	61f8      	str	r0, [r7, #28]
        break;
 8005f6a:	e014      	b.n	8005f96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f6c:	f7fe f9c8 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 8005f70:	61f8      	str	r0, [r7, #28]
        break;
 8005f72:	e010      	b.n	8005f96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f74:	4b4d      	ldr	r3, [pc, #308]	; (80060ac <UART_SetConfig+0x56c>)
 8005f76:	61fb      	str	r3, [r7, #28]
        break;
 8005f78:	e00d      	b.n	8005f96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f7a:	f7fe f913 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8005f7e:	61f8      	str	r0, [r7, #28]
        break;
 8005f80:	e009      	b.n	8005f96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f86:	61fb      	str	r3, [r7, #28]
        break;
 8005f88:	e005      	b.n	8005f96 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d077      	beq.n	800608c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	005a      	lsls	r2, r3, #1
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	441a      	add	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b0f      	cmp	r3, #15
 8005fb6:	d916      	bls.n	8005fe6 <UART_SetConfig+0x4a6>
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fbe:	d212      	bcs.n	8005fe6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f023 030f 	bic.w	r3, r3, #15
 8005fc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	8afb      	ldrh	r3, [r7, #22]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	8afa      	ldrh	r2, [r7, #22]
 8005fe2:	60da      	str	r2, [r3, #12]
 8005fe4:	e052      	b.n	800608c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fec:	e04e      	b.n	800608c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d827      	bhi.n	8006046 <UART_SetConfig+0x506>
 8005ff6:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <UART_SetConfig+0x4bc>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	08006021 	.word	0x08006021
 8006000:	08006029 	.word	0x08006029
 8006004:	08006031 	.word	0x08006031
 8006008:	08006047 	.word	0x08006047
 800600c:	08006037 	.word	0x08006037
 8006010:	08006047 	.word	0x08006047
 8006014:	08006047 	.word	0x08006047
 8006018:	08006047 	.word	0x08006047
 800601c:	0800603f 	.word	0x0800603f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006020:	f7fe f958 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 8006024:	61f8      	str	r0, [r7, #28]
        break;
 8006026:	e014      	b.n	8006052 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006028:	f7fe f96a 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 800602c:	61f8      	str	r0, [r7, #28]
        break;
 800602e:	e010      	b.n	8006052 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006030:	4b1e      	ldr	r3, [pc, #120]	; (80060ac <UART_SetConfig+0x56c>)
 8006032:	61fb      	str	r3, [r7, #28]
        break;
 8006034:	e00d      	b.n	8006052 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006036:	f7fe f8b5 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 800603a:	61f8      	str	r0, [r7, #28]
        break;
 800603c:	e009      	b.n	8006052 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800603e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006042:	61fb      	str	r3, [r7, #28]
        break;
 8006044:	e005      	b.n	8006052 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006050:	bf00      	nop
    }

    if (pclk != 0U)
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d019      	beq.n	800608c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	085a      	lsrs	r2, r3, #1
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	441a      	add	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	fbb2 f3f3 	udiv	r3, r2, r3
 800606a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b0f      	cmp	r3, #15
 8006070:	d909      	bls.n	8006086 <UART_SetConfig+0x546>
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006078:	d205      	bcs.n	8006086 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60da      	str	r2, [r3, #12]
 8006084:	e002      	b.n	800608c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006098:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800609c:	4618      	mov	r0, r3
 800609e:	3728      	adds	r7, #40	; 0x28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060a6:	bf00      	nop
 80060a8:	40008000 	.word	0x40008000
 80060ac:	00f42400 	.word	0x00f42400

080060b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01a      	beq.n	80061c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ae:	d10a      	bne.n	80061c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]
  }
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006204:	f7fb ff8e 	bl	8002124 <HAL_GetTick>
 8006208:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b08      	cmp	r3, #8
 8006216:	d10e      	bne.n	8006236 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f82d 	bl	8006286 <UART_WaitOnFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e023      	b.n	800627e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b04      	cmp	r3, #4
 8006242:	d10e      	bne.n	8006262 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f817 	bl	8006286 <UART_WaitOnFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e00d      	b.n	800627e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2220      	movs	r2, #32
 8006266:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b09c      	sub	sp, #112	; 0x70
 800628a:	af00      	add	r7, sp, #0
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	60b9      	str	r1, [r7, #8]
 8006290:	603b      	str	r3, [r7, #0]
 8006292:	4613      	mov	r3, r2
 8006294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006296:	e0a5      	b.n	80063e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629e:	f000 80a1 	beq.w	80063e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a2:	f7fb ff3f 	bl	8002124 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d302      	bcc.n	80062b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80062b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d13e      	bne.n	8006336 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062cc:	667b      	str	r3, [r7, #100]	; 0x64
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e6      	bne.n	80062b8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3308      	adds	r3, #8
 80062f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fc:	f023 0301 	bic.w	r3, r3, #1
 8006300:	663b      	str	r3, [r7, #96]	; 0x60
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3308      	adds	r3, #8
 8006308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800630a:	64ba      	str	r2, [r7, #72]	; 0x48
 800630c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e5      	bne.n	80062ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2220      	movs	r2, #32
 8006322:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e067      	b.n	8006406 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d04f      	beq.n	80063e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800634e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006352:	d147      	bne.n	80063e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800635c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006372:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637c:	637b      	str	r3, [r7, #52]	; 0x34
 800637e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e6      	bne.n	800635e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3308      	adds	r3, #8
 8006396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	613b      	str	r3, [r7, #16]
   return(result);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f023 0301 	bic.w	r3, r3, #1
 80063a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3308      	adds	r3, #8
 80063ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063b0:	623a      	str	r2, [r7, #32]
 80063b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	69f9      	ldr	r1, [r7, #28]
 80063b6:	6a3a      	ldr	r2, [r7, #32]
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e5      	bne.n	8006390 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2220      	movs	r2, #32
 80063c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e010      	b.n	8006406 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	69da      	ldr	r2, [r3, #28]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	4013      	ands	r3, r2
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	bf0c      	ite	eq
 80063f4:	2301      	moveq	r3, #1
 80063f6:	2300      	movne	r3, #0
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	461a      	mov	r2, r3
 80063fc:	79fb      	ldrb	r3, [r7, #7]
 80063fe:	429a      	cmp	r2, r3
 8006400:	f43f af4a 	beq.w	8006298 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3770      	adds	r7, #112	; 0x70
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800640e:	b480      	push	{r7}
 8006410:	b089      	sub	sp, #36	; 0x24
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	60bb      	str	r3, [r7, #8]
   return(result);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800642a:	61fb      	str	r3, [r7, #28]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	6979      	ldr	r1, [r7, #20]
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	613b      	str	r3, [r7, #16]
   return(result);
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e6      	bne.n	8006416 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800644e:	bf00      	nop
 8006450:	3724      	adds	r7, #36	; 0x24
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800645a:	b480      	push	{r7}
 800645c:	b095      	sub	sp, #84	; 0x54
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646a:	e853 3f00 	ldrex	r3, [r3]
 800646e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006480:	643b      	str	r3, [r7, #64]	; 0x40
 8006482:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006488:	e841 2300 	strex	r3, r2, [r1]
 800648c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800648e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e6      	bne.n	8006462 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3308      	adds	r3, #8
 800649a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f023 0301 	bic.w	r3, r3, #1
 80064aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3308      	adds	r3, #8
 80064b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e5      	bne.n	8006494 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d118      	bne.n	8006502 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f023 0310 	bic.w	r3, r3, #16
 80064e4:	647b      	str	r3, [r7, #68]	; 0x44
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	6979      	ldr	r1, [r7, #20]
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	e841 2300 	strex	r3, r2, [r1]
 80064fa:	613b      	str	r3, [r7, #16]
   return(result);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1e6      	bne.n	80064d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006514:	bf00      	nop
 8006516:	3754      	adds	r7, #84	; 0x54
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b090      	sub	sp, #64	; 0x40
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b00      	cmp	r3, #0
 800653a:	d137      	bne.n	80065ac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800653c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800653e:	2200      	movs	r2, #0
 8006540:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3308      	adds	r3, #8
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	e853 3f00 	ldrex	r3, [r3]
 8006552:	623b      	str	r3, [r7, #32]
   return(result);
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800655a:	63bb      	str	r3, [r7, #56]	; 0x38
 800655c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3308      	adds	r3, #8
 8006562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006564:	633a      	str	r2, [r7, #48]	; 0x30
 8006566:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800656a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800656c:	e841 2300 	strex	r3, r2, [r1]
 8006570:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e5      	bne.n	8006544 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	60fb      	str	r3, [r7, #12]
   return(result);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
 800658e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659a:	69b9      	ldr	r1, [r7, #24]
 800659c:	69fa      	ldr	r2, [r7, #28]
 800659e:	e841 2300 	strex	r3, r2, [r1]
 80065a2:	617b      	str	r3, [r7, #20]
   return(result);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1e6      	bne.n	8006578 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065aa:	e002      	b.n	80065b2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80065ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80065ae:	f7ff fa9d 	bl	8005aec <HAL_UART_TxCpltCallback>
}
 80065b2:	bf00      	nop
 80065b4:	3740      	adds	r7, #64	; 0x40
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f7ff fa99 	bl	8005b00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b086      	sub	sp, #24
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fa:	2b80      	cmp	r3, #128	; 0x80
 80065fc:	d109      	bne.n	8006612 <UART_DMAError+0x3c>
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	2b21      	cmp	r3, #33	; 0x21
 8006602:	d106      	bne.n	8006612 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2200      	movs	r2, #0
 8006608:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800660c:	6978      	ldr	r0, [r7, #20]
 800660e:	f7ff fefe 	bl	800640e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661c:	2b40      	cmp	r3, #64	; 0x40
 800661e:	d109      	bne.n	8006634 <UART_DMAError+0x5e>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b22      	cmp	r3, #34	; 0x22
 8006624:	d106      	bne.n	8006634 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2200      	movs	r2, #0
 800662a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800662e:	6978      	ldr	r0, [r7, #20]
 8006630:	f7ff ff13 	bl	800645a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800663a:	f043 0210 	orr.w	r2, r3, #16
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006644:	6978      	ldr	r0, [r7, #20]
 8006646:	f7ff fa65 	bl	8005b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800664a:	bf00      	nop
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7ff fa4f 	bl	8005b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006676:	bf00      	nop
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b088      	sub	sp, #32
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	e853 3f00 	ldrex	r3, [r3]
 8006692:	60bb      	str	r3, [r7, #8]
   return(result);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800669a:	61fb      	str	r3, [r7, #28]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	61bb      	str	r3, [r7, #24]
 80066a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	6979      	ldr	r1, [r7, #20]
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	e841 2300 	strex	r3, r2, [r1]
 80066b0:	613b      	str	r3, [r7, #16]
   return(result);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e6      	bne.n	8006686 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2220      	movs	r2, #32
 80066bc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff fa11 	bl	8005aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ca:	bf00      	nop
 80066cc:	3720      	adds	r7, #32
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	4603      	mov	r3, r0
 80066ee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80066f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066f8:	2b84      	cmp	r3, #132	; 0x84
 80066fa:	d005      	beq.n	8006708 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80066fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	3303      	adds	r3, #3
 8006706:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006708:	68fb      	ldr	r3, [r7, #12]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800671a:	f001 f895 	bl	8007848 <vTaskStartScheduler>
  
  return osOK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	bd80      	pop	{r7, pc}

08006724 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006726:	b089      	sub	sp, #36	; 0x24
 8006728:	af04      	add	r7, sp, #16
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d020      	beq.n	8006778 <osThreadCreate+0x54>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01c      	beq.n	8006778 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685c      	ldr	r4, [r3, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681d      	ldr	r5, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691e      	ldr	r6, [r3, #16]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff ffc8 	bl	80066e6 <makeFreeRtosPriority>
 8006756:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006760:	9202      	str	r2, [sp, #8]
 8006762:	9301      	str	r3, [sp, #4]
 8006764:	9100      	str	r1, [sp, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	4632      	mov	r2, r6
 800676a:	4629      	mov	r1, r5
 800676c:	4620      	mov	r0, r4
 800676e:	f000 fe0f 	bl	8007390 <xTaskCreateStatic>
 8006772:	4603      	mov	r3, r0
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	e01c      	b.n	80067b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685c      	ldr	r4, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006784:	b29e      	uxth	r6, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800678c:	4618      	mov	r0, r3
 800678e:	f7ff ffaa 	bl	80066e6 <makeFreeRtosPriority>
 8006792:	4602      	mov	r2, r0
 8006794:	f107 030c 	add.w	r3, r7, #12
 8006798:	9301      	str	r3, [sp, #4]
 800679a:	9200      	str	r2, [sp, #0]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	4632      	mov	r2, r6
 80067a0:	4629      	mov	r1, r5
 80067a2:	4620      	mov	r0, r4
 80067a4:	f000 fe51 	bl	800744a <xTaskCreate>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d001      	beq.n	80067b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	e000      	b.n	80067b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80067b2:	68fb      	ldr	r3, [r7, #12]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <osDelay+0x16>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	e000      	b.n	80067d4 <osDelay+0x18>
 80067d2:	2301      	movs	r3, #1
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 f803 	bl	80077e0 <vTaskDelay>
  
  return osOK;
 80067da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f103 0208 	add.w	r2, r3, #8
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f04f 32ff 	mov.w	r2, #4294967295
 80067fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f103 0208 	add.w	r2, r3, #8
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f103 0208 	add.w	r2, r3, #8
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	601a      	str	r2, [r3, #0]
}
 800687a:	bf00      	nop
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006886:	b480      	push	{r7}
 8006888:	b085      	sub	sp, #20
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689c:	d103      	bne.n	80068a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	e00c      	b.n	80068c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3308      	adds	r3, #8
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	e002      	b.n	80068b4 <vListInsert+0x2e>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d2f6      	bcs.n	80068ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	601a      	str	r2, [r3, #0]
}
 80068ec:	bf00      	nop
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6892      	ldr	r2, [r2, #8]
 800690e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6852      	ldr	r2, [r2, #4]
 8006918:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	429a      	cmp	r2, r3
 8006922:	d103      	bne.n	800692c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	1e5a      	subs	r2, r3, #1
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006976:	f002 f93d 	bl	8008bf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006982:	68f9      	ldr	r1, [r7, #12]
 8006984:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006986:	fb01 f303 	mul.w	r3, r1, r3
 800698a:	441a      	add	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a6:	3b01      	subs	r3, #1
 80069a8:	68f9      	ldr	r1, [r7, #12]
 80069aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069ac:	fb01 f303 	mul.w	r3, r1, r3
 80069b0:	441a      	add	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	22ff      	movs	r2, #255	; 0xff
 80069ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	22ff      	movs	r2, #255	; 0xff
 80069c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d114      	bne.n	80069f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01a      	beq.n	8006a0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3310      	adds	r3, #16
 80069d8:	4618      	mov	r0, r3
 80069da:	f001 f9c9 	bl	8007d70 <xTaskRemoveFromEventList>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d012      	beq.n	8006a0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069e4:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <xQueueGenericReset+0xcc>)
 80069e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	e009      	b.n	8006a0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3310      	adds	r3, #16
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff fef2 	bl	80067e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3324      	adds	r3, #36	; 0x24
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff feed 	bl	80067e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a0a:	f002 f923 	bl	8008c54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a0e:	2301      	movs	r3, #1
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08e      	sub	sp, #56	; 0x38
 8006a20:	af02      	add	r7, sp, #8
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10a      	bne.n	8006a62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <xQueueGenericCreateStatic+0x52>
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <xQueueGenericCreateStatic+0x56>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <xQueueGenericCreateStatic+0x58>
 8006a72:	2300      	movs	r3, #0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10a      	bne.n	8006a8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	623b      	str	r3, [r7, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	e7fe      	b.n	8006a8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d102      	bne.n	8006a9a <xQueueGenericCreateStatic+0x7e>
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <xQueueGenericCreateStatic+0x82>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <xQueueGenericCreateStatic+0x84>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10a      	bne.n	8006aba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	61fb      	str	r3, [r7, #28]
}
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006aba:	2348      	movs	r3, #72	; 0x48
 8006abc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b48      	cmp	r3, #72	; 0x48
 8006ac2:	d00a      	beq.n	8006ada <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	61bb      	str	r3, [r7, #24]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ada:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00d      	beq.n	8006b02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006aee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	4613      	mov	r3, r2
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	68b9      	ldr	r1, [r7, #8]
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f83f 	bl	8006b80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3730      	adds	r7, #48	; 0x30
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	; 0x28
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	613b      	str	r3, [r7, #16]
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	3348      	adds	r3, #72	; 0x48
 8006b44:	4618      	mov	r0, r3
 8006b46:	f002 f977 	bl	8008e38 <pvPortMalloc>
 8006b4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d011      	beq.n	8006b76 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	3348      	adds	r3, #72	; 0x48
 8006b5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b64:	79fa      	ldrb	r2, [r7, #7]
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 f805 	bl	8006b80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b76:	69bb      	ldr	r3, [r7, #24]
	}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3720      	adds	r7, #32
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d103      	bne.n	8006b9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e002      	b.n	8006ba2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bae:	2101      	movs	r1, #1
 8006bb0:	69b8      	ldr	r0, [r7, #24]
 8006bb2:	f7ff fecb 	bl	800694c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08e      	sub	sp, #56	; 0x38
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <xQueueGenericSend+0x32>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d103      	bne.n	8006c00 <xQueueGenericSend+0x40>
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <xQueueGenericSend+0x44>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <xQueueGenericSend+0x46>
 8006c04:	2300      	movs	r3, #0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <xQueueGenericSend+0x60>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d103      	bne.n	8006c2e <xQueueGenericSend+0x6e>
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <xQueueGenericSend+0x72>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <xQueueGenericSend+0x74>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <xQueueGenericSend+0x8e>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	623b      	str	r3, [r7, #32]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c4e:	f001 fa4f 	bl	80080f0 <xTaskGetSchedulerState>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <xQueueGenericSend+0x9e>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <xQueueGenericSend+0xa2>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <xQueueGenericSend+0xa4>
 8006c62:	2300      	movs	r3, #0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <xQueueGenericSend+0xbe>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	61fb      	str	r3, [r7, #28]
}
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c7e:	f001 ffb9 	bl	8008bf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d302      	bcc.n	8006c94 <xQueueGenericSend+0xd4>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d129      	bne.n	8006ce8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	68b9      	ldr	r1, [r7, #8]
 8006c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c9a:	f000 fa0b 	bl	80070b4 <prvCopyDataToQueue>
 8006c9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d010      	beq.n	8006cca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	3324      	adds	r3, #36	; 0x24
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 f85f 	bl	8007d70 <xTaskRemoveFromEventList>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d013      	beq.n	8006ce0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006cb8:	4b3f      	ldr	r3, [pc, #252]	; (8006db8 <xQueueGenericSend+0x1f8>)
 8006cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	e00a      	b.n	8006ce0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d007      	beq.n	8006ce0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006cd0:	4b39      	ldr	r3, [pc, #228]	; (8006db8 <xQueueGenericSend+0x1f8>)
 8006cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ce0:	f001 ffb8 	bl	8008c54 <vPortExitCritical>
				return pdPASS;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e063      	b.n	8006db0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d103      	bne.n	8006cf6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cee:	f001 ffb1 	bl	8008c54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e05c      	b.n	8006db0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d106      	bne.n	8006d0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cfc:	f107 0314 	add.w	r3, r7, #20
 8006d00:	4618      	mov	r0, r3
 8006d02:	f001 f897 	bl	8007e34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d06:	2301      	movs	r3, #1
 8006d08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d0a:	f001 ffa3 	bl	8008c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d0e:	f000 fe0b 	bl	8007928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d12:	f001 ff6f 	bl	8008bf4 <vPortEnterCritical>
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d1c:	b25b      	sxtb	r3, r3
 8006d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d22:	d103      	bne.n	8006d2c <xQueueGenericSend+0x16c>
 8006d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d32:	b25b      	sxtb	r3, r3
 8006d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d38:	d103      	bne.n	8006d42 <xQueueGenericSend+0x182>
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d42:	f001 ff87 	bl	8008c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d46:	1d3a      	adds	r2, r7, #4
 8006d48:	f107 0314 	add.w	r3, r7, #20
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f001 f886 	bl	8007e60 <xTaskCheckForTimeOut>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d124      	bne.n	8006da4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d5c:	f000 faa2 	bl	80072a4 <prvIsQueueFull>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d018      	beq.n	8006d98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	3310      	adds	r3, #16
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 ffae 	bl	8007cd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d76:	f000 fa2d 	bl	80071d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d7a:	f000 fde3 	bl	8007944 <xTaskResumeAll>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f47f af7c 	bne.w	8006c7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d86:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <xQueueGenericSend+0x1f8>)
 8006d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	e772      	b.n	8006c7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d9a:	f000 fa1b 	bl	80071d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d9e:	f000 fdd1 	bl	8007944 <xTaskResumeAll>
 8006da2:	e76c      	b.n	8006c7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006da6:	f000 fa15 	bl	80071d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006daa:	f000 fdcb 	bl	8007944 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3738      	adds	r7, #56	; 0x38
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b090      	sub	sp, #64	; 0x40
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10a      	bne.n	8006dea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d103      	bne.n	8006df8 <xQueueGenericSendFromISR+0x3c>
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <xQueueGenericSendFromISR+0x40>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <xQueueGenericSendFromISR+0x42>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10a      	bne.n	8006e18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d103      	bne.n	8006e26 <xQueueGenericSendFromISR+0x6a>
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d101      	bne.n	8006e2a <xQueueGenericSendFromISR+0x6e>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e000      	b.n	8006e2c <xQueueGenericSendFromISR+0x70>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10a      	bne.n	8006e46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	623b      	str	r3, [r7, #32]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e46:	f001 ffb7 	bl	8008db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e4a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	61fa      	str	r2, [r7, #28]
 8006e60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d302      	bcc.n	8006e78 <xQueueGenericSendFromISR+0xbc>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d12f      	bne.n	8006ed8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	68b9      	ldr	r1, [r7, #8]
 8006e8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e8e:	f000 f911 	bl	80070b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9a:	d112      	bne.n	8006ec2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d016      	beq.n	8006ed2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	3324      	adds	r3, #36	; 0x24
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 ff61 	bl	8007d70 <xTaskRemoveFromEventList>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00e      	beq.n	8006ed2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00b      	beq.n	8006ed2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	e007      	b.n	8006ed2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ec2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	b25a      	sxtb	r2, r3
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006ed6:	e001      	b.n	8006edc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ede:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ee6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3740      	adds	r7, #64	; 0x40
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08c      	sub	sp, #48	; 0x30
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f00:	2300      	movs	r3, #0
 8006f02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <xQueueReceive+0x30>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	623b      	str	r3, [r7, #32]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d103      	bne.n	8006f32 <xQueueReceive+0x3e>
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <xQueueReceive+0x42>
 8006f32:	2301      	movs	r3, #1
 8006f34:	e000      	b.n	8006f38 <xQueueReceive+0x44>
 8006f36:	2300      	movs	r3, #0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10a      	bne.n	8006f52 <xQueueReceive+0x5e>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	61fb      	str	r3, [r7, #28]
}
 8006f4e:	bf00      	nop
 8006f50:	e7fe      	b.n	8006f50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f52:	f001 f8cd 	bl	80080f0 <xTaskGetSchedulerState>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d102      	bne.n	8006f62 <xQueueReceive+0x6e>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <xQueueReceive+0x72>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <xQueueReceive+0x74>
 8006f66:	2300      	movs	r3, #0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xQueueReceive+0x8e>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	61bb      	str	r3, [r7, #24]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f82:	f001 fe37 	bl	8008bf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d01f      	beq.n	8006fd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f92:	68b9      	ldr	r1, [r7, #8]
 8006f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f96:	f000 f8f7 	bl	8007188 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	1e5a      	subs	r2, r3, #1
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00f      	beq.n	8006fca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fac:	3310      	adds	r3, #16
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fede 	bl	8007d70 <xTaskRemoveFromEventList>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d007      	beq.n	8006fca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fba:	4b3d      	ldr	r3, [pc, #244]	; (80070b0 <xQueueReceive+0x1bc>)
 8006fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fca:	f001 fe43 	bl	8008c54 <vPortExitCritical>
				return pdPASS;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e069      	b.n	80070a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d103      	bne.n	8006fe0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fd8:	f001 fe3c 	bl	8008c54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e062      	b.n	80070a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d106      	bne.n	8006ff4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fe6:	f107 0310 	add.w	r3, r7, #16
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 ff22 	bl	8007e34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ff4:	f001 fe2e 	bl	8008c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ff8:	f000 fc96 	bl	8007928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ffc:	f001 fdfa 	bl	8008bf4 <vPortEnterCritical>
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007006:	b25b      	sxtb	r3, r3
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700c:	d103      	bne.n	8007016 <xQueueReceive+0x122>
 800700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800701c:	b25b      	sxtb	r3, r3
 800701e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007022:	d103      	bne.n	800702c <xQueueReceive+0x138>
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800702c:	f001 fe12 	bl	8008c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007030:	1d3a      	adds	r2, r7, #4
 8007032:	f107 0310 	add.w	r3, r7, #16
 8007036:	4611      	mov	r1, r2
 8007038:	4618      	mov	r0, r3
 800703a:	f000 ff11 	bl	8007e60 <xTaskCheckForTimeOut>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d123      	bne.n	800708c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007046:	f000 f917 	bl	8007278 <prvIsQueueEmpty>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d017      	beq.n	8007080 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	3324      	adds	r3, #36	; 0x24
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4611      	mov	r1, r2
 8007058:	4618      	mov	r0, r3
 800705a:	f000 fe39 	bl	8007cd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800705e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007060:	f000 f8b8 	bl	80071d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007064:	f000 fc6e 	bl	8007944 <xTaskResumeAll>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d189      	bne.n	8006f82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800706e:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <xQueueReceive+0x1bc>)
 8007070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	e780      	b.n	8006f82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007082:	f000 f8a7 	bl	80071d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007086:	f000 fc5d 	bl	8007944 <xTaskResumeAll>
 800708a:	e77a      	b.n	8006f82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800708c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800708e:	f000 f8a1 	bl	80071d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007092:	f000 fc57 	bl	8007944 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007098:	f000 f8ee 	bl	8007278 <prvIsQueueEmpty>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f43f af6f 	beq.w	8006f82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3730      	adds	r7, #48	; 0x30
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	e000ed04 	.word	0xe000ed04

080070b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070c0:	2300      	movs	r3, #0
 80070c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10d      	bne.n	80070ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d14d      	bne.n	8007176 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	4618      	mov	r0, r3
 80070e0:	f001 f824 	bl	800812c <xTaskPriorityDisinherit>
 80070e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	609a      	str	r2, [r3, #8]
 80070ec:	e043      	b.n	8007176 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d119      	bne.n	8007128 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6858      	ldr	r0, [r3, #4]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	461a      	mov	r2, r3
 80070fe:	68b9      	ldr	r1, [r7, #8]
 8007100:	f002 f9a7 	bl	8009452 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	441a      	add	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	429a      	cmp	r2, r3
 800711c:	d32b      	bcc.n	8007176 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	605a      	str	r2, [r3, #4]
 8007126:	e026      	b.n	8007176 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	68d8      	ldr	r0, [r3, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007130:	461a      	mov	r2, r3
 8007132:	68b9      	ldr	r1, [r7, #8]
 8007134:	f002 f98d 	bl	8009452 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007140:	425b      	negs	r3, r3
 8007142:	441a      	add	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d207      	bcs.n	8007164 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	689a      	ldr	r2, [r3, #8]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	425b      	negs	r3, r3
 800715e:	441a      	add	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b02      	cmp	r3, #2
 8007168:	d105      	bne.n	8007176 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	3b01      	subs	r3, #1
 8007174:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800717e:	697b      	ldr	r3, [r7, #20]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	2b00      	cmp	r3, #0
 8007198:	d018      	beq.n	80071cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	441a      	add	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d303      	bcc.n	80071bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68d9      	ldr	r1, [r3, #12]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	461a      	mov	r2, r3
 80071c6:	6838      	ldr	r0, [r7, #0]
 80071c8:	f002 f943 	bl	8009452 <memcpy>
	}
}
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071dc:	f001 fd0a 	bl	8008bf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071e8:	e011      	b.n	800720e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d012      	beq.n	8007218 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3324      	adds	r3, #36	; 0x24
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 fdba 	bl	8007d70 <xTaskRemoveFromEventList>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007202:	f000 fe8f 	bl	8007f24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	3b01      	subs	r3, #1
 800720a:	b2db      	uxtb	r3, r3
 800720c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800720e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007212:	2b00      	cmp	r3, #0
 8007214:	dce9      	bgt.n	80071ea <prvUnlockQueue+0x16>
 8007216:	e000      	b.n	800721a <prvUnlockQueue+0x46>
					break;
 8007218:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	22ff      	movs	r2, #255	; 0xff
 800721e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007222:	f001 fd17 	bl	8008c54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007226:	f001 fce5 	bl	8008bf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007230:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007232:	e011      	b.n	8007258 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d012      	beq.n	8007262 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3310      	adds	r3, #16
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fd95 	bl	8007d70 <xTaskRemoveFromEventList>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800724c:	f000 fe6a 	bl	8007f24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	3b01      	subs	r3, #1
 8007254:	b2db      	uxtb	r3, r3
 8007256:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800725c:	2b00      	cmp	r3, #0
 800725e:	dce9      	bgt.n	8007234 <prvUnlockQueue+0x60>
 8007260:	e000      	b.n	8007264 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007262:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	22ff      	movs	r2, #255	; 0xff
 8007268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800726c:	f001 fcf2 	bl	8008c54 <vPortExitCritical>
}
 8007270:	bf00      	nop
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007280:	f001 fcb8 	bl	8008bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	2b00      	cmp	r3, #0
 800728a:	d102      	bne.n	8007292 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800728c:	2301      	movs	r3, #1
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	e001      	b.n	8007296 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007292:	2300      	movs	r3, #0
 8007294:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007296:	f001 fcdd 	bl	8008c54 <vPortExitCritical>

	return xReturn;
 800729a:	68fb      	ldr	r3, [r7, #12]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072ac:	f001 fca2 	bl	8008bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d102      	bne.n	80072c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072bc:	2301      	movs	r3, #1
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	e001      	b.n	80072c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072c6:	f001 fcc5 	bl	8008c54 <vPortExitCritical>

	return xReturn;
 80072ca:	68fb      	ldr	r3, [r7, #12]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072de:	2300      	movs	r3, #0
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	e014      	b.n	800730e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072e4:	4a0f      	ldr	r2, [pc, #60]	; (8007324 <vQueueAddToRegistry+0x50>)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10b      	bne.n	8007308 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072f0:	490c      	ldr	r1, [pc, #48]	; (8007324 <vQueueAddToRegistry+0x50>)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072fa:	4a0a      	ldr	r2, [pc, #40]	; (8007324 <vQueueAddToRegistry+0x50>)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	4413      	add	r3, r2
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007306:	e006      	b.n	8007316 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3301      	adds	r3, #1
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2b07      	cmp	r3, #7
 8007312:	d9e7      	bls.n	80072e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007314:	bf00      	nop
 8007316:	bf00      	nop
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	20000b78 	.word	0x20000b78

08007328 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007338:	f001 fc5c 	bl	8008bf4 <vPortEnterCritical>
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007342:	b25b      	sxtb	r3, r3
 8007344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007348:	d103      	bne.n	8007352 <vQueueWaitForMessageRestricted+0x2a>
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007358:	b25b      	sxtb	r3, r3
 800735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735e:	d103      	bne.n	8007368 <vQueueWaitForMessageRestricted+0x40>
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007368:	f001 fc74 	bl	8008c54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007370:	2b00      	cmp	r3, #0
 8007372:	d106      	bne.n	8007382 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	3324      	adds	r3, #36	; 0x24
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fccb 	bl	8007d18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007382:	6978      	ldr	r0, [r7, #20]
 8007384:	f7ff ff26 	bl	80071d4 <prvUnlockQueue>
	}
 8007388:	bf00      	nop
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08e      	sub	sp, #56	; 0x38
 8007394:	af04      	add	r7, sp, #16
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800739e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	623b      	str	r3, [r7, #32]
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	61fb      	str	r3, [r7, #28]
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073d6:	23b4      	movs	r3, #180	; 0xb4
 80073d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	2bb4      	cmp	r3, #180	; 0xb4
 80073de:	d00a      	beq.n	80073f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	61bb      	str	r3, [r7, #24]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01e      	beq.n	800743c <xTaskCreateStatic+0xac>
 80073fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007400:	2b00      	cmp	r3, #0
 8007402:	d01b      	beq.n	800743c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007406:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800740c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	2202      	movs	r2, #2
 8007412:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007416:	2300      	movs	r3, #0
 8007418:	9303      	str	r3, [sp, #12]
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	9302      	str	r3, [sp, #8]
 800741e:	f107 0314 	add.w	r3, r7, #20
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	68b9      	ldr	r1, [r7, #8]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 f850 	bl	80074d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007434:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007436:	f000 f8eb 	bl	8007610 <prvAddNewTaskToReadyList>
 800743a:	e001      	b.n	8007440 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800743c:	2300      	movs	r3, #0
 800743e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007440:	697b      	ldr	r3, [r7, #20]
	}
 8007442:	4618      	mov	r0, r3
 8007444:	3728      	adds	r7, #40	; 0x28
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800744a:	b580      	push	{r7, lr}
 800744c:	b08c      	sub	sp, #48	; 0x30
 800744e:	af04      	add	r7, sp, #16
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	603b      	str	r3, [r7, #0]
 8007456:	4613      	mov	r3, r2
 8007458:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800745a:	88fb      	ldrh	r3, [r7, #6]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4618      	mov	r0, r3
 8007460:	f001 fcea 	bl	8008e38 <pvPortMalloc>
 8007464:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00e      	beq.n	800748a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800746c:	20b4      	movs	r0, #180	; 0xb4
 800746e:	f001 fce3 	bl	8008e38 <pvPortMalloc>
 8007472:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	631a      	str	r2, [r3, #48]	; 0x30
 8007480:	e005      	b.n	800748e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007482:	6978      	ldr	r0, [r7, #20]
 8007484:	f001 fda4 	bl	8008fd0 <vPortFree>
 8007488:	e001      	b.n	800748e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d017      	beq.n	80074c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800749c:	88fa      	ldrh	r2, [r7, #6]
 800749e:	2300      	movs	r3, #0
 80074a0:	9303      	str	r3, [sp, #12]
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	9302      	str	r3, [sp, #8]
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	9301      	str	r3, [sp, #4]
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 f80e 	bl	80074d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074b8:	69f8      	ldr	r0, [r7, #28]
 80074ba:	f000 f8a9 	bl	8007610 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074be:	2301      	movs	r3, #1
 80074c0:	61bb      	str	r3, [r7, #24]
 80074c2:	e002      	b.n	80074ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074c4:	f04f 33ff 	mov.w	r3, #4294967295
 80074c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074ca:	69bb      	ldr	r3, [r7, #24]
	}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3720      	adds	r7, #32
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074ec:	3b01      	subs	r3, #1
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	f023 0307 	bic.w	r3, r3, #7
 80074fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	617b      	str	r3, [r7, #20]
}
 8007518:	bf00      	nop
 800751a:	e7fe      	b.n	800751a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d01f      	beq.n	8007562 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007522:	2300      	movs	r3, #0
 8007524:	61fb      	str	r3, [r7, #28]
 8007526:	e012      	b.n	800754e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	4413      	add	r3, r2
 800752e:	7819      	ldrb	r1, [r3, #0]
 8007530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	4413      	add	r3, r2
 8007536:	3334      	adds	r3, #52	; 0x34
 8007538:	460a      	mov	r2, r1
 800753a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4413      	add	r3, r2
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d006      	beq.n	8007556 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	3301      	adds	r3, #1
 800754c:	61fb      	str	r3, [r7, #28]
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	2b0f      	cmp	r3, #15
 8007552:	d9e9      	bls.n	8007528 <prvInitialiseNewTask+0x54>
 8007554:	e000      	b.n	8007558 <prvInitialiseNewTask+0x84>
			{
				break;
 8007556:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007560:	e003      	b.n	800756a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	2b0e      	cmp	r3, #14
 800756e:	d901      	bls.n	8007574 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007570:	230e      	movs	r3, #14
 8007572:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007578:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800757e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	2200      	movs	r2, #0
 8007584:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	3304      	adds	r3, #4
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff f94a 	bl	8006824 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	3318      	adds	r3, #24
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff f945 	bl	8006824 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800759e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	f1c3 020f 	rsb	r2, r3, #15
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	334c      	adds	r3, #76	; 0x4c
 80075c4:	2260      	movs	r2, #96	; 0x60
 80075c6:	2100      	movs	r1, #0
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 ff50 	bl	800946e <memset>
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	4a0c      	ldr	r2, [pc, #48]	; (8007604 <prvInitialiseNewTask+0x130>)
 80075d2:	651a      	str	r2, [r3, #80]	; 0x50
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	4a0c      	ldr	r2, [pc, #48]	; (8007608 <prvInitialiseNewTask+0x134>)
 80075d8:	655a      	str	r2, [r3, #84]	; 0x54
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	4a0b      	ldr	r2, [pc, #44]	; (800760c <prvInitialiseNewTask+0x138>)
 80075de:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	68f9      	ldr	r1, [r7, #12]
 80075e4:	69b8      	ldr	r0, [r7, #24]
 80075e6:	f001 f9db 	bl	80089a0 <pxPortInitialiseStack>
 80075ea:	4602      	mov	r2, r0
 80075ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075fc:	bf00      	nop
 80075fe:	3720      	adds	r7, #32
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	0800dd4c 	.word	0x0800dd4c
 8007608:	0800dd6c 	.word	0x0800dd6c
 800760c:	0800dd2c 	.word	0x0800dd2c

08007610 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007618:	f001 faec 	bl	8008bf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800761c:	4b2a      	ldr	r3, [pc, #168]	; (80076c8 <prvAddNewTaskToReadyList+0xb8>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3301      	adds	r3, #1
 8007622:	4a29      	ldr	r2, [pc, #164]	; (80076c8 <prvAddNewTaskToReadyList+0xb8>)
 8007624:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007626:	4b29      	ldr	r3, [pc, #164]	; (80076cc <prvAddNewTaskToReadyList+0xbc>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d109      	bne.n	8007642 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800762e:	4a27      	ldr	r2, [pc, #156]	; (80076cc <prvAddNewTaskToReadyList+0xbc>)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007634:	4b24      	ldr	r3, [pc, #144]	; (80076c8 <prvAddNewTaskToReadyList+0xb8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d110      	bne.n	800765e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800763c:	f000 fc96 	bl	8007f6c <prvInitialiseTaskLists>
 8007640:	e00d      	b.n	800765e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007642:	4b23      	ldr	r3, [pc, #140]	; (80076d0 <prvAddNewTaskToReadyList+0xc0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d109      	bne.n	800765e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800764a:	4b20      	ldr	r3, [pc, #128]	; (80076cc <prvAddNewTaskToReadyList+0xbc>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	429a      	cmp	r2, r3
 8007656:	d802      	bhi.n	800765e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007658:	4a1c      	ldr	r2, [pc, #112]	; (80076cc <prvAddNewTaskToReadyList+0xbc>)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800765e:	4b1d      	ldr	r3, [pc, #116]	; (80076d4 <prvAddNewTaskToReadyList+0xc4>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3301      	adds	r3, #1
 8007664:	4a1b      	ldr	r2, [pc, #108]	; (80076d4 <prvAddNewTaskToReadyList+0xc4>)
 8007666:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	2201      	movs	r2, #1
 800766e:	409a      	lsls	r2, r3
 8007670:	4b19      	ldr	r3, [pc, #100]	; (80076d8 <prvAddNewTaskToReadyList+0xc8>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4313      	orrs	r3, r2
 8007676:	4a18      	ldr	r2, [pc, #96]	; (80076d8 <prvAddNewTaskToReadyList+0xc8>)
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4a15      	ldr	r2, [pc, #84]	; (80076dc <prvAddNewTaskToReadyList+0xcc>)
 8007688:	441a      	add	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3304      	adds	r3, #4
 800768e:	4619      	mov	r1, r3
 8007690:	4610      	mov	r0, r2
 8007692:	f7ff f8d4 	bl	800683e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007696:	f001 fadd 	bl	8008c54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800769a:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <prvAddNewTaskToReadyList+0xc0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00e      	beq.n	80076c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076a2:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <prvAddNewTaskToReadyList+0xbc>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d207      	bcs.n	80076c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076b0:	4b0b      	ldr	r3, [pc, #44]	; (80076e0 <prvAddNewTaskToReadyList+0xd0>)
 80076b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20000d58 	.word	0x20000d58
 80076cc:	20000bb8 	.word	0x20000bb8
 80076d0:	20000d64 	.word	0x20000d64
 80076d4:	20000d74 	.word	0x20000d74
 80076d8:	20000d60 	.word	0x20000d60
 80076dc:	20000bbc 	.word	0x20000bbc
 80076e0:	e000ed04 	.word	0xe000ed04

080076e4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	; 0x28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80076ee:	2300      	movs	r3, #0
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <vTaskDelayUntil+0x2a>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	617b      	str	r3, [r7, #20]
}
 800770a:	bf00      	nop
 800770c:	e7fe      	b.n	800770c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <vTaskDelayUntil+0x46>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	613b      	str	r3, [r7, #16]
}
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800772a:	4b2a      	ldr	r3, [pc, #168]	; (80077d4 <vTaskDelayUntil+0xf0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00a      	beq.n	8007748 <vTaskDelayUntil+0x64>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	60fb      	str	r3, [r7, #12]
}
 8007744:	bf00      	nop
 8007746:	e7fe      	b.n	8007746 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007748:	f000 f8ee 	bl	8007928 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800774c:	4b22      	ldr	r3, [pc, #136]	; (80077d8 <vTaskDelayUntil+0xf4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	4413      	add	r3, r2
 800775a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6a3a      	ldr	r2, [r7, #32]
 8007762:	429a      	cmp	r2, r3
 8007764:	d20b      	bcs.n	800777e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	429a      	cmp	r2, r3
 800776e:	d211      	bcs.n	8007794 <vTaskDelayUntil+0xb0>
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	429a      	cmp	r2, r3
 8007776:	d90d      	bls.n	8007794 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007778:	2301      	movs	r3, #1
 800777a:	627b      	str	r3, [r7, #36]	; 0x24
 800777c:	e00a      	b.n	8007794 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	429a      	cmp	r2, r3
 8007786:	d303      	bcc.n	8007790 <vTaskDelayUntil+0xac>
 8007788:	69fa      	ldr	r2, [r7, #28]
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	429a      	cmp	r2, r3
 800778e:	d901      	bls.n	8007794 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007790:	2301      	movs	r3, #1
 8007792:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	2b00      	cmp	r3, #0
 800779e:	d006      	beq.n	80077ae <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80077a0:	69fa      	ldr	r2, [r7, #28]
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2100      	movs	r1, #0
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 fd45 	bl	8008238 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80077ae:	f000 f8c9 	bl	8007944 <xTaskResumeAll>
 80077b2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d107      	bne.n	80077ca <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80077ba:	4b08      	ldr	r3, [pc, #32]	; (80077dc <vTaskDelayUntil+0xf8>)
 80077bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077ca:	bf00      	nop
 80077cc:	3728      	adds	r7, #40	; 0x28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20000d80 	.word	0x20000d80
 80077d8:	20000d5c 	.word	0x20000d5c
 80077dc:	e000ed04 	.word	0xe000ed04

080077e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d017      	beq.n	8007822 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077f2:	4b13      	ldr	r3, [pc, #76]	; (8007840 <vTaskDelay+0x60>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <vTaskDelay+0x30>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	60bb      	str	r3, [r7, #8]
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007810:	f000 f88a 	bl	8007928 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007814:	2100      	movs	r1, #0
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fd0e 	bl	8008238 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800781c:	f000 f892 	bl	8007944 <xTaskResumeAll>
 8007820:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d107      	bne.n	8007838 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007828:	4b06      	ldr	r3, [pc, #24]	; (8007844 <vTaskDelay+0x64>)
 800782a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007838:	bf00      	nop
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20000d80 	.word	0x20000d80
 8007844:	e000ed04 	.word	0xe000ed04

08007848 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08a      	sub	sp, #40	; 0x28
 800784c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800784e:	2300      	movs	r3, #0
 8007850:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007852:	2300      	movs	r3, #0
 8007854:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007856:	463a      	mov	r2, r7
 8007858:	1d39      	adds	r1, r7, #4
 800785a:	f107 0308 	add.w	r3, r7, #8
 800785e:	4618      	mov	r0, r3
 8007860:	f7f9 fbf0 	bl	8001044 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	9202      	str	r2, [sp, #8]
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	2300      	movs	r3, #0
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	2300      	movs	r3, #0
 8007874:	460a      	mov	r2, r1
 8007876:	4924      	ldr	r1, [pc, #144]	; (8007908 <vTaskStartScheduler+0xc0>)
 8007878:	4824      	ldr	r0, [pc, #144]	; (800790c <vTaskStartScheduler+0xc4>)
 800787a:	f7ff fd89 	bl	8007390 <xTaskCreateStatic>
 800787e:	4603      	mov	r3, r0
 8007880:	4a23      	ldr	r2, [pc, #140]	; (8007910 <vTaskStartScheduler+0xc8>)
 8007882:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007884:	4b22      	ldr	r3, [pc, #136]	; (8007910 <vTaskStartScheduler+0xc8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800788c:	2301      	movs	r3, #1
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	e001      	b.n	8007896 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d102      	bne.n	80078a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800789c:	f000 fd32 	bl	8008304 <xTimerCreateTimerTask>
 80078a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d11b      	bne.n	80078e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	613b      	str	r3, [r7, #16]
}
 80078ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078bc:	4b15      	ldr	r3, [pc, #84]	; (8007914 <vTaskStartScheduler+0xcc>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	334c      	adds	r3, #76	; 0x4c
 80078c2:	4a15      	ldr	r2, [pc, #84]	; (8007918 <vTaskStartScheduler+0xd0>)
 80078c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078c6:	4b15      	ldr	r3, [pc, #84]	; (800791c <vTaskStartScheduler+0xd4>)
 80078c8:	f04f 32ff 	mov.w	r2, #4294967295
 80078cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078ce:	4b14      	ldr	r3, [pc, #80]	; (8007920 <vTaskStartScheduler+0xd8>)
 80078d0:	2201      	movs	r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078d4:	4b13      	ldr	r3, [pc, #76]	; (8007924 <vTaskStartScheduler+0xdc>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078da:	f001 f8e9 	bl	8008ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078de:	e00e      	b.n	80078fe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e6:	d10a      	bne.n	80078fe <vTaskStartScheduler+0xb6>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	60fb      	str	r3, [r7, #12]
}
 80078fa:	bf00      	nop
 80078fc:	e7fe      	b.n	80078fc <vTaskStartScheduler+0xb4>
}
 80078fe:	bf00      	nop
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	0800dccc 	.word	0x0800dccc
 800790c:	08007f3d 	.word	0x08007f3d
 8007910:	20000d7c 	.word	0x20000d7c
 8007914:	20000bb8 	.word	0x20000bb8
 8007918:	20000044 	.word	0x20000044
 800791c:	20000d78 	.word	0x20000d78
 8007920:	20000d64 	.word	0x20000d64
 8007924:	20000d5c 	.word	0x20000d5c

08007928 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800792c:	4b04      	ldr	r3, [pc, #16]	; (8007940 <vTaskSuspendAll+0x18>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3301      	adds	r3, #1
 8007932:	4a03      	ldr	r2, [pc, #12]	; (8007940 <vTaskSuspendAll+0x18>)
 8007934:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007936:	bf00      	nop
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	20000d80 	.word	0x20000d80

08007944 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800794e:	2300      	movs	r3, #0
 8007950:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007952:	4b41      	ldr	r3, [pc, #260]	; (8007a58 <xTaskResumeAll+0x114>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <xTaskResumeAll+0x2c>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	603b      	str	r3, [r7, #0]
}
 800796c:	bf00      	nop
 800796e:	e7fe      	b.n	800796e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007970:	f001 f940 	bl	8008bf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007974:	4b38      	ldr	r3, [pc, #224]	; (8007a58 <xTaskResumeAll+0x114>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3b01      	subs	r3, #1
 800797a:	4a37      	ldr	r2, [pc, #220]	; (8007a58 <xTaskResumeAll+0x114>)
 800797c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800797e:	4b36      	ldr	r3, [pc, #216]	; (8007a58 <xTaskResumeAll+0x114>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d161      	bne.n	8007a4a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007986:	4b35      	ldr	r3, [pc, #212]	; (8007a5c <xTaskResumeAll+0x118>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d05d      	beq.n	8007a4a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800798e:	e02e      	b.n	80079ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007990:	4b33      	ldr	r3, [pc, #204]	; (8007a60 <xTaskResumeAll+0x11c>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3318      	adds	r3, #24
 800799c:	4618      	mov	r0, r3
 800799e:	f7fe ffab 	bl	80068f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3304      	adds	r3, #4
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe ffa6 	bl	80068f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b0:	2201      	movs	r2, #1
 80079b2:	409a      	lsls	r2, r3
 80079b4:	4b2b      	ldr	r3, [pc, #172]	; (8007a64 <xTaskResumeAll+0x120>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	4a2a      	ldr	r2, [pc, #168]	; (8007a64 <xTaskResumeAll+0x120>)
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c2:	4613      	mov	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4a27      	ldr	r2, [pc, #156]	; (8007a68 <xTaskResumeAll+0x124>)
 80079cc:	441a      	add	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3304      	adds	r3, #4
 80079d2:	4619      	mov	r1, r3
 80079d4:	4610      	mov	r0, r2
 80079d6:	f7fe ff32 	bl	800683e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079de:	4b23      	ldr	r3, [pc, #140]	; (8007a6c <xTaskResumeAll+0x128>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d302      	bcc.n	80079ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80079e8:	4b21      	ldr	r3, [pc, #132]	; (8007a70 <xTaskResumeAll+0x12c>)
 80079ea:	2201      	movs	r2, #1
 80079ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079ee:	4b1c      	ldr	r3, [pc, #112]	; (8007a60 <xTaskResumeAll+0x11c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1cc      	bne.n	8007990 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079fc:	f000 fb58 	bl	80080b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a00:	4b1c      	ldr	r3, [pc, #112]	; (8007a74 <xTaskResumeAll+0x130>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d010      	beq.n	8007a2e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a0c:	f000 f846 	bl	8007a9c <xTaskIncrementTick>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007a16:	4b16      	ldr	r3, [pc, #88]	; (8007a70 <xTaskResumeAll+0x12c>)
 8007a18:	2201      	movs	r2, #1
 8007a1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1f1      	bne.n	8007a0c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007a28:	4b12      	ldr	r3, [pc, #72]	; (8007a74 <xTaskResumeAll+0x130>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a2e:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <xTaskResumeAll+0x12c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a36:	2301      	movs	r3, #1
 8007a38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a3a:	4b0f      	ldr	r3, [pc, #60]	; (8007a78 <xTaskResumeAll+0x134>)
 8007a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a4a:	f001 f903 	bl	8008c54 <vPortExitCritical>

	return xAlreadyYielded;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20000d80 	.word	0x20000d80
 8007a5c:	20000d58 	.word	0x20000d58
 8007a60:	20000d18 	.word	0x20000d18
 8007a64:	20000d60 	.word	0x20000d60
 8007a68:	20000bbc 	.word	0x20000bbc
 8007a6c:	20000bb8 	.word	0x20000bb8
 8007a70:	20000d6c 	.word	0x20000d6c
 8007a74:	20000d68 	.word	0x20000d68
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a82:	4b05      	ldr	r3, [pc, #20]	; (8007a98 <xTaskGetTickCount+0x1c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a88:	687b      	ldr	r3, [r7, #4]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	20000d5c 	.word	0x20000d5c

08007a9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aa6:	4b4e      	ldr	r3, [pc, #312]	; (8007be0 <xTaskIncrementTick+0x144>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f040 808e 	bne.w	8007bcc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ab0:	4b4c      	ldr	r3, [pc, #304]	; (8007be4 <xTaskIncrementTick+0x148>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ab8:	4a4a      	ldr	r2, [pc, #296]	; (8007be4 <xTaskIncrementTick+0x148>)
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d120      	bne.n	8007b06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ac4:	4b48      	ldr	r3, [pc, #288]	; (8007be8 <xTaskIncrementTick+0x14c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <xTaskIncrementTick+0x48>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	603b      	str	r3, [r7, #0]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <xTaskIncrementTick+0x46>
 8007ae4:	4b40      	ldr	r3, [pc, #256]	; (8007be8 <xTaskIncrementTick+0x14c>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	4b40      	ldr	r3, [pc, #256]	; (8007bec <xTaskIncrementTick+0x150>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a3e      	ldr	r2, [pc, #248]	; (8007be8 <xTaskIncrementTick+0x14c>)
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	4a3e      	ldr	r2, [pc, #248]	; (8007bec <xTaskIncrementTick+0x150>)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	4b3d      	ldr	r3, [pc, #244]	; (8007bf0 <xTaskIncrementTick+0x154>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3301      	adds	r3, #1
 8007afe:	4a3c      	ldr	r2, [pc, #240]	; (8007bf0 <xTaskIncrementTick+0x154>)
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	f000 fad5 	bl	80080b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b06:	4b3b      	ldr	r3, [pc, #236]	; (8007bf4 <xTaskIncrementTick+0x158>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d348      	bcc.n	8007ba2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b10:	4b35      	ldr	r3, [pc, #212]	; (8007be8 <xTaskIncrementTick+0x14c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d104      	bne.n	8007b24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b1a:	4b36      	ldr	r3, [pc, #216]	; (8007bf4 <xTaskIncrementTick+0x158>)
 8007b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b20:	601a      	str	r2, [r3, #0]
					break;
 8007b22:	e03e      	b.n	8007ba2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b24:	4b30      	ldr	r3, [pc, #192]	; (8007be8 <xTaskIncrementTick+0x14c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d203      	bcs.n	8007b44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b3c:	4a2d      	ldr	r2, [pc, #180]	; (8007bf4 <xTaskIncrementTick+0x158>)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b42:	e02e      	b.n	8007ba2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe fed5 	bl	80068f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d004      	beq.n	8007b60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	3318      	adds	r3, #24
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fe fecc 	bl	80068f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	2201      	movs	r2, #1
 8007b66:	409a      	lsls	r2, r3
 8007b68:	4b23      	ldr	r3, [pc, #140]	; (8007bf8 <xTaskIncrementTick+0x15c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	4a22      	ldr	r2, [pc, #136]	; (8007bf8 <xTaskIncrementTick+0x15c>)
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4a1f      	ldr	r2, [pc, #124]	; (8007bfc <xTaskIncrementTick+0x160>)
 8007b80:	441a      	add	r2, r3
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f7fe fe58 	bl	800683e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b92:	4b1b      	ldr	r3, [pc, #108]	; (8007c00 <xTaskIncrementTick+0x164>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d3b9      	bcc.n	8007b10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ba0:	e7b6      	b.n	8007b10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ba2:	4b17      	ldr	r3, [pc, #92]	; (8007c00 <xTaskIncrementTick+0x164>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba8:	4914      	ldr	r1, [pc, #80]	; (8007bfc <xTaskIncrementTick+0x160>)
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	440b      	add	r3, r1
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d901      	bls.n	8007bbe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007bbe:	4b11      	ldr	r3, [pc, #68]	; (8007c04 <xTaskIncrementTick+0x168>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d007      	beq.n	8007bd6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	617b      	str	r3, [r7, #20]
 8007bca:	e004      	b.n	8007bd6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007bcc:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <xTaskIncrementTick+0x16c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	4a0d      	ldr	r2, [pc, #52]	; (8007c08 <xTaskIncrementTick+0x16c>)
 8007bd4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007bd6:	697b      	ldr	r3, [r7, #20]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	20000d80 	.word	0x20000d80
 8007be4:	20000d5c 	.word	0x20000d5c
 8007be8:	20000d10 	.word	0x20000d10
 8007bec:	20000d14 	.word	0x20000d14
 8007bf0:	20000d70 	.word	0x20000d70
 8007bf4:	20000d78 	.word	0x20000d78
 8007bf8:	20000d60 	.word	0x20000d60
 8007bfc:	20000bbc 	.word	0x20000bbc
 8007c00:	20000bb8 	.word	0x20000bb8
 8007c04:	20000d6c 	.word	0x20000d6c
 8007c08:	20000d68 	.word	0x20000d68

08007c0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c12:	4b29      	ldr	r3, [pc, #164]	; (8007cb8 <vTaskSwitchContext+0xac>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c1a:	4b28      	ldr	r3, [pc, #160]	; (8007cbc <vTaskSwitchContext+0xb0>)
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c20:	e044      	b.n	8007cac <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007c22:	4b26      	ldr	r3, [pc, #152]	; (8007cbc <vTaskSwitchContext+0xb0>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c28:	4b25      	ldr	r3, [pc, #148]	; (8007cc0 <vTaskSwitchContext+0xb4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	fab3 f383 	clz	r3, r3
 8007c34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c36:	7afb      	ldrb	r3, [r7, #11]
 8007c38:	f1c3 031f 	rsb	r3, r3, #31
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	4921      	ldr	r1, [pc, #132]	; (8007cc4 <vTaskSwitchContext+0xb8>)
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4613      	mov	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	440b      	add	r3, r1
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10a      	bne.n	8007c68 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	607b      	str	r3, [r7, #4]
}
 8007c64:	bf00      	nop
 8007c66:	e7fe      	b.n	8007c66 <vTaskSwitchContext+0x5a>
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4a14      	ldr	r2, [pc, #80]	; (8007cc4 <vTaskSwitchContext+0xb8>)
 8007c74:	4413      	add	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	605a      	str	r2, [r3, #4]
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	3308      	adds	r3, #8
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d104      	bne.n	8007c98 <vTaskSwitchContext+0x8c>
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	605a      	str	r2, [r3, #4]
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	4a0a      	ldr	r2, [pc, #40]	; (8007cc8 <vTaskSwitchContext+0xbc>)
 8007ca0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ca2:	4b09      	ldr	r3, [pc, #36]	; (8007cc8 <vTaskSwitchContext+0xbc>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	334c      	adds	r3, #76	; 0x4c
 8007ca8:	4a08      	ldr	r2, [pc, #32]	; (8007ccc <vTaskSwitchContext+0xc0>)
 8007caa:	6013      	str	r3, [r2, #0]
}
 8007cac:	bf00      	nop
 8007cae:	371c      	adds	r7, #28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	20000d80 	.word	0x20000d80
 8007cbc:	20000d6c 	.word	0x20000d6c
 8007cc0:	20000d60 	.word	0x20000d60
 8007cc4:	20000bbc 	.word	0x20000bbc
 8007cc8:	20000bb8 	.word	0x20000bb8
 8007ccc:	20000044 	.word	0x20000044

08007cd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	60fb      	str	r3, [r7, #12]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cf6:	4b07      	ldr	r3, [pc, #28]	; (8007d14 <vTaskPlaceOnEventList+0x44>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3318      	adds	r3, #24
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7fe fdc1 	bl	8006886 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d04:	2101      	movs	r1, #1
 8007d06:	6838      	ldr	r0, [r7, #0]
 8007d08:	f000 fa96 	bl	8008238 <prvAddCurrentTaskToDelayedList>
}
 8007d0c:	bf00      	nop
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20000bb8 	.word	0x20000bb8

08007d18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10a      	bne.n	8007d40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	617b      	str	r3, [r7, #20]
}
 8007d3c:	bf00      	nop
 8007d3e:	e7fe      	b.n	8007d3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d40:	4b0a      	ldr	r3, [pc, #40]	; (8007d6c <vTaskPlaceOnEventListRestricted+0x54>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3318      	adds	r3, #24
 8007d46:	4619      	mov	r1, r3
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7fe fd78 	bl	800683e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d54:	f04f 33ff 	mov.w	r3, #4294967295
 8007d58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d5a:	6879      	ldr	r1, [r7, #4]
 8007d5c:	68b8      	ldr	r0, [r7, #8]
 8007d5e:	f000 fa6b 	bl	8008238 <prvAddCurrentTaskToDelayedList>
	}
 8007d62:	bf00      	nop
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20000bb8 	.word	0x20000bb8

08007d70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	60fb      	str	r3, [r7, #12]
}
 8007d98:	bf00      	nop
 8007d9a:	e7fe      	b.n	8007d9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	3318      	adds	r3, #24
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fe fda9 	bl	80068f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007da6:	4b1d      	ldr	r3, [pc, #116]	; (8007e1c <xTaskRemoveFromEventList+0xac>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d11c      	bne.n	8007de8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	3304      	adds	r3, #4
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fe fda0 	bl	80068f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	409a      	lsls	r2, r3
 8007dc0:	4b17      	ldr	r3, [pc, #92]	; (8007e20 <xTaskRemoveFromEventList+0xb0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	4a16      	ldr	r2, [pc, #88]	; (8007e20 <xTaskRemoveFromEventList+0xb0>)
 8007dc8:	6013      	str	r3, [r2, #0]
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dce:	4613      	mov	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4a13      	ldr	r2, [pc, #76]	; (8007e24 <xTaskRemoveFromEventList+0xb4>)
 8007dd8:	441a      	add	r2, r3
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	3304      	adds	r3, #4
 8007dde:	4619      	mov	r1, r3
 8007de0:	4610      	mov	r0, r2
 8007de2:	f7fe fd2c 	bl	800683e <vListInsertEnd>
 8007de6:	e005      	b.n	8007df4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	3318      	adds	r3, #24
 8007dec:	4619      	mov	r1, r3
 8007dee:	480e      	ldr	r0, [pc, #56]	; (8007e28 <xTaskRemoveFromEventList+0xb8>)
 8007df0:	f7fe fd25 	bl	800683e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df8:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <xTaskRemoveFromEventList+0xbc>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d905      	bls.n	8007e0e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e02:	2301      	movs	r3, #1
 8007e04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e06:	4b0a      	ldr	r3, [pc, #40]	; (8007e30 <xTaskRemoveFromEventList+0xc0>)
 8007e08:	2201      	movs	r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	e001      	b.n	8007e12 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e12:	697b      	ldr	r3, [r7, #20]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	20000d80 	.word	0x20000d80
 8007e20:	20000d60 	.word	0x20000d60
 8007e24:	20000bbc 	.word	0x20000bbc
 8007e28:	20000d18 	.word	0x20000d18
 8007e2c:	20000bb8 	.word	0x20000bb8
 8007e30:	20000d6c 	.word	0x20000d6c

08007e34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e3c:	4b06      	ldr	r3, [pc, #24]	; (8007e58 <vTaskInternalSetTimeOutState+0x24>)
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <vTaskInternalSetTimeOutState+0x28>)
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	605a      	str	r2, [r3, #4]
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr
 8007e58:	20000d70 	.word	0x20000d70
 8007e5c:	20000d5c 	.word	0x20000d5c

08007e60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10a      	bne.n	8007e86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	613b      	str	r3, [r7, #16]
}
 8007e82:	bf00      	nop
 8007e84:	e7fe      	b.n	8007e84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10a      	bne.n	8007ea2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	60fb      	str	r3, [r7, #12]
}
 8007e9e:	bf00      	nop
 8007ea0:	e7fe      	b.n	8007ea0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ea2:	f000 fea7 	bl	8008bf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ea6:	4b1d      	ldr	r3, [pc, #116]	; (8007f1c <xTaskCheckForTimeOut+0xbc>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ebe:	d102      	bne.n	8007ec6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	61fb      	str	r3, [r7, #28]
 8007ec4:	e023      	b.n	8007f0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	4b15      	ldr	r3, [pc, #84]	; (8007f20 <xTaskCheckForTimeOut+0xc0>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d007      	beq.n	8007ee2 <xTaskCheckForTimeOut+0x82>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d302      	bcc.n	8007ee2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007edc:	2301      	movs	r3, #1
 8007ede:	61fb      	str	r3, [r7, #28]
 8007ee0:	e015      	b.n	8007f0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d20b      	bcs.n	8007f04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	1ad2      	subs	r2, r2, r3
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff ff9b 	bl	8007e34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007efe:	2300      	movs	r3, #0
 8007f00:	61fb      	str	r3, [r7, #28]
 8007f02:	e004      	b.n	8007f0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f0e:	f000 fea1 	bl	8008c54 <vPortExitCritical>

	return xReturn;
 8007f12:	69fb      	ldr	r3, [r7, #28]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3720      	adds	r7, #32
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20000d5c 	.word	0x20000d5c
 8007f20:	20000d70 	.word	0x20000d70

08007f24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f24:	b480      	push	{r7}
 8007f26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f28:	4b03      	ldr	r3, [pc, #12]	; (8007f38 <vTaskMissedYield+0x14>)
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	601a      	str	r2, [r3, #0]
}
 8007f2e:	bf00      	nop
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	20000d6c 	.word	0x20000d6c

08007f3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f44:	f000 f852 	bl	8007fec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f48:	4b06      	ldr	r3, [pc, #24]	; (8007f64 <prvIdleTask+0x28>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d9f9      	bls.n	8007f44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f50:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <prvIdleTask+0x2c>)
 8007f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f60:	e7f0      	b.n	8007f44 <prvIdleTask+0x8>
 8007f62:	bf00      	nop
 8007f64:	20000bbc 	.word	0x20000bbc
 8007f68:	e000ed04 	.word	0xe000ed04

08007f6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f72:	2300      	movs	r3, #0
 8007f74:	607b      	str	r3, [r7, #4]
 8007f76:	e00c      	b.n	8007f92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4a12      	ldr	r2, [pc, #72]	; (8007fcc <prvInitialiseTaskLists+0x60>)
 8007f84:	4413      	add	r3, r2
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fe fc2c 	bl	80067e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	607b      	str	r3, [r7, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b0e      	cmp	r3, #14
 8007f96:	d9ef      	bls.n	8007f78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f98:	480d      	ldr	r0, [pc, #52]	; (8007fd0 <prvInitialiseTaskLists+0x64>)
 8007f9a:	f7fe fc23 	bl	80067e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f9e:	480d      	ldr	r0, [pc, #52]	; (8007fd4 <prvInitialiseTaskLists+0x68>)
 8007fa0:	f7fe fc20 	bl	80067e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fa4:	480c      	ldr	r0, [pc, #48]	; (8007fd8 <prvInitialiseTaskLists+0x6c>)
 8007fa6:	f7fe fc1d 	bl	80067e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007faa:	480c      	ldr	r0, [pc, #48]	; (8007fdc <prvInitialiseTaskLists+0x70>)
 8007fac:	f7fe fc1a 	bl	80067e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fb0:	480b      	ldr	r0, [pc, #44]	; (8007fe0 <prvInitialiseTaskLists+0x74>)
 8007fb2:	f7fe fc17 	bl	80067e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fb6:	4b0b      	ldr	r3, [pc, #44]	; (8007fe4 <prvInitialiseTaskLists+0x78>)
 8007fb8:	4a05      	ldr	r2, [pc, #20]	; (8007fd0 <prvInitialiseTaskLists+0x64>)
 8007fba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <prvInitialiseTaskLists+0x7c>)
 8007fbe:	4a05      	ldr	r2, [pc, #20]	; (8007fd4 <prvInitialiseTaskLists+0x68>)
 8007fc0:	601a      	str	r2, [r3, #0]
}
 8007fc2:	bf00      	nop
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000bbc 	.word	0x20000bbc
 8007fd0:	20000ce8 	.word	0x20000ce8
 8007fd4:	20000cfc 	.word	0x20000cfc
 8007fd8:	20000d18 	.word	0x20000d18
 8007fdc:	20000d2c 	.word	0x20000d2c
 8007fe0:	20000d44 	.word	0x20000d44
 8007fe4:	20000d10 	.word	0x20000d10
 8007fe8:	20000d14 	.word	0x20000d14

08007fec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ff2:	e019      	b.n	8008028 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ff4:	f000 fdfe 	bl	8008bf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff8:	4b10      	ldr	r3, [pc, #64]	; (800803c <prvCheckTasksWaitingTermination+0x50>)
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3304      	adds	r3, #4
 8008004:	4618      	mov	r0, r3
 8008006:	f7fe fc77 	bl	80068f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800800a:	4b0d      	ldr	r3, [pc, #52]	; (8008040 <prvCheckTasksWaitingTermination+0x54>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3b01      	subs	r3, #1
 8008010:	4a0b      	ldr	r2, [pc, #44]	; (8008040 <prvCheckTasksWaitingTermination+0x54>)
 8008012:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008014:	4b0b      	ldr	r3, [pc, #44]	; (8008044 <prvCheckTasksWaitingTermination+0x58>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3b01      	subs	r3, #1
 800801a:	4a0a      	ldr	r2, [pc, #40]	; (8008044 <prvCheckTasksWaitingTermination+0x58>)
 800801c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800801e:	f000 fe19 	bl	8008c54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f810 	bl	8008048 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008028:	4b06      	ldr	r3, [pc, #24]	; (8008044 <prvCheckTasksWaitingTermination+0x58>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e1      	bne.n	8007ff4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008030:	bf00      	nop
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20000d2c 	.word	0x20000d2c
 8008040:	20000d58 	.word	0x20000d58
 8008044:	20000d40 	.word	0x20000d40

08008048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	334c      	adds	r3, #76	; 0x4c
 8008054:	4618      	mov	r0, r3
 8008056:	f002 f92f 	bl	800a2b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d108      	bne.n	8008076 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008068:	4618      	mov	r0, r3
 800806a:	f000 ffb1 	bl	8008fd0 <vPortFree>
				vPortFree( pxTCB );
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 ffae 	bl	8008fd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008074:	e018      	b.n	80080a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800807c:	2b01      	cmp	r3, #1
 800807e:	d103      	bne.n	8008088 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 ffa5 	bl	8008fd0 <vPortFree>
	}
 8008086:	e00f      	b.n	80080a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800808e:	2b02      	cmp	r3, #2
 8008090:	d00a      	beq.n	80080a8 <prvDeleteTCB+0x60>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	60fb      	str	r3, [r7, #12]
}
 80080a4:	bf00      	nop
 80080a6:	e7fe      	b.n	80080a6 <prvDeleteTCB+0x5e>
	}
 80080a8:	bf00      	nop
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080b6:	4b0c      	ldr	r3, [pc, #48]	; (80080e8 <prvResetNextTaskUnblockTime+0x38>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d104      	bne.n	80080ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080c0:	4b0a      	ldr	r3, [pc, #40]	; (80080ec <prvResetNextTaskUnblockTime+0x3c>)
 80080c2:	f04f 32ff 	mov.w	r2, #4294967295
 80080c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080c8:	e008      	b.n	80080dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ca:	4b07      	ldr	r3, [pc, #28]	; (80080e8 <prvResetNextTaskUnblockTime+0x38>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	4a04      	ldr	r2, [pc, #16]	; (80080ec <prvResetNextTaskUnblockTime+0x3c>)
 80080da:	6013      	str	r3, [r2, #0]
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	20000d10 	.word	0x20000d10
 80080ec:	20000d78 	.word	0x20000d78

080080f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080f6:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <xTaskGetSchedulerState+0x34>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d102      	bne.n	8008104 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080fe:	2301      	movs	r3, #1
 8008100:	607b      	str	r3, [r7, #4]
 8008102:	e008      	b.n	8008116 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008104:	4b08      	ldr	r3, [pc, #32]	; (8008128 <xTaskGetSchedulerState+0x38>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d102      	bne.n	8008112 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800810c:	2302      	movs	r3, #2
 800810e:	607b      	str	r3, [r7, #4]
 8008110:	e001      	b.n	8008116 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008112:	2300      	movs	r3, #0
 8008114:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008116:	687b      	ldr	r3, [r7, #4]
	}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	20000d64 	.word	0x20000d64
 8008128:	20000d80 	.word	0x20000d80

0800812c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008138:	2300      	movs	r3, #0
 800813a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d06e      	beq.n	8008220 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008142:	4b3a      	ldr	r3, [pc, #232]	; (800822c <xTaskPriorityDisinherit+0x100>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	429a      	cmp	r2, r3
 800814a:	d00a      	beq.n	8008162 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	60fb      	str	r3, [r7, #12]
}
 800815e:	bf00      	nop
 8008160:	e7fe      	b.n	8008160 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10a      	bne.n	8008180 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	60bb      	str	r3, [r7, #8]
}
 800817c:	bf00      	nop
 800817e:	e7fe      	b.n	800817e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008184:	1e5a      	subs	r2, r3, #1
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008192:	429a      	cmp	r2, r3
 8008194:	d044      	beq.n	8008220 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800819a:	2b00      	cmp	r3, #0
 800819c:	d140      	bne.n	8008220 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	3304      	adds	r3, #4
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fe fba8 	bl	80068f8 <uxListRemove>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d115      	bne.n	80081da <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b2:	491f      	ldr	r1, [pc, #124]	; (8008230 <xTaskPriorityDisinherit+0x104>)
 80081b4:	4613      	mov	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <xTaskPriorityDisinherit+0xae>
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	2201      	movs	r2, #1
 80081ca:	fa02 f303 	lsl.w	r3, r2, r3
 80081ce:	43da      	mvns	r2, r3
 80081d0:	4b18      	ldr	r3, [pc, #96]	; (8008234 <xTaskPriorityDisinherit+0x108>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4013      	ands	r3, r2
 80081d6:	4a17      	ldr	r2, [pc, #92]	; (8008234 <xTaskPriorityDisinherit+0x108>)
 80081d8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	f1c3 020f 	rsb	r2, r3, #15
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	2201      	movs	r2, #1
 80081f4:	409a      	lsls	r2, r3
 80081f6:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <xTaskPriorityDisinherit+0x108>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	4a0d      	ldr	r2, [pc, #52]	; (8008234 <xTaskPriorityDisinherit+0x108>)
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4a08      	ldr	r2, [pc, #32]	; (8008230 <xTaskPriorityDisinherit+0x104>)
 800820e:	441a      	add	r2, r3
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	3304      	adds	r3, #4
 8008214:	4619      	mov	r1, r3
 8008216:	4610      	mov	r0, r2
 8008218:	f7fe fb11 	bl	800683e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800821c:	2301      	movs	r3, #1
 800821e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008220:	697b      	ldr	r3, [r7, #20]
	}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000bb8 	.word	0x20000bb8
 8008230:	20000bbc 	.word	0x20000bbc
 8008234:	20000d60 	.word	0x20000d60

08008238 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008242:	4b29      	ldr	r3, [pc, #164]	; (80082e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008248:	4b28      	ldr	r3, [pc, #160]	; (80082ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3304      	adds	r3, #4
 800824e:	4618      	mov	r0, r3
 8008250:	f7fe fb52 	bl	80068f8 <uxListRemove>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10b      	bne.n	8008272 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800825a:	4b24      	ldr	r3, [pc, #144]	; (80082ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	2201      	movs	r2, #1
 8008262:	fa02 f303 	lsl.w	r3, r2, r3
 8008266:	43da      	mvns	r2, r3
 8008268:	4b21      	ldr	r3, [pc, #132]	; (80082f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4013      	ands	r3, r2
 800826e:	4a20      	ldr	r2, [pc, #128]	; (80082f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008270:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008278:	d10a      	bne.n	8008290 <prvAddCurrentTaskToDelayedList+0x58>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d007      	beq.n	8008290 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008280:	4b1a      	ldr	r3, [pc, #104]	; (80082ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3304      	adds	r3, #4
 8008286:	4619      	mov	r1, r3
 8008288:	481a      	ldr	r0, [pc, #104]	; (80082f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800828a:	f7fe fad8 	bl	800683e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800828e:	e026      	b.n	80082de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4413      	add	r3, r2
 8008296:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008298:	4b14      	ldr	r3, [pc, #80]	; (80082ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d209      	bcs.n	80082bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082a8:	4b13      	ldr	r3, [pc, #76]	; (80082f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f7fe fae6 	bl	8006886 <vListInsert>
}
 80082ba:	e010      	b.n	80082de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082bc:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3304      	adds	r3, #4
 80082c6:	4619      	mov	r1, r3
 80082c8:	4610      	mov	r0, r2
 80082ca:	f7fe fadc 	bl	8006886 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082ce:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d202      	bcs.n	80082de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80082d8:	4a09      	ldr	r2, [pc, #36]	; (8008300 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	6013      	str	r3, [r2, #0]
}
 80082de:	bf00      	nop
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20000d5c 	.word	0x20000d5c
 80082ec:	20000bb8 	.word	0x20000bb8
 80082f0:	20000d60 	.word	0x20000d60
 80082f4:	20000d44 	.word	0x20000d44
 80082f8:	20000d14 	.word	0x20000d14
 80082fc:	20000d10 	.word	0x20000d10
 8008300:	20000d78 	.word	0x20000d78

08008304 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08a      	sub	sp, #40	; 0x28
 8008308:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800830a:	2300      	movs	r3, #0
 800830c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800830e:	f000 fb07 	bl	8008920 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008312:	4b1c      	ldr	r3, [pc, #112]	; (8008384 <xTimerCreateTimerTask+0x80>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d021      	beq.n	800835e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800831e:	2300      	movs	r3, #0
 8008320:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008322:	1d3a      	adds	r2, r7, #4
 8008324:	f107 0108 	add.w	r1, r7, #8
 8008328:	f107 030c 	add.w	r3, r7, #12
 800832c:	4618      	mov	r0, r3
 800832e:	f7f8 fea3 	bl	8001078 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	9202      	str	r2, [sp, #8]
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	2302      	movs	r3, #2
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	2300      	movs	r3, #0
 8008342:	460a      	mov	r2, r1
 8008344:	4910      	ldr	r1, [pc, #64]	; (8008388 <xTimerCreateTimerTask+0x84>)
 8008346:	4811      	ldr	r0, [pc, #68]	; (800838c <xTimerCreateTimerTask+0x88>)
 8008348:	f7ff f822 	bl	8007390 <xTaskCreateStatic>
 800834c:	4603      	mov	r3, r0
 800834e:	4a10      	ldr	r2, [pc, #64]	; (8008390 <xTimerCreateTimerTask+0x8c>)
 8008350:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008352:	4b0f      	ldr	r3, [pc, #60]	; (8008390 <xTimerCreateTimerTask+0x8c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800835a:	2301      	movs	r3, #1
 800835c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10a      	bne.n	800837a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	613b      	str	r3, [r7, #16]
}
 8008376:	bf00      	nop
 8008378:	e7fe      	b.n	8008378 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800837a:	697b      	ldr	r3, [r7, #20]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3718      	adds	r7, #24
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20000db4 	.word	0x20000db4
 8008388:	0800dcd4 	.word	0x0800dcd4
 800838c:	080084c9 	.word	0x080084c9
 8008390:	20000db8 	.word	0x20000db8

08008394 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08a      	sub	sp, #40	; 0x28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10a      	bne.n	80083c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80083ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	623b      	str	r3, [r7, #32]
}
 80083be:	bf00      	nop
 80083c0:	e7fe      	b.n	80083c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083c2:	4b1a      	ldr	r3, [pc, #104]	; (800842c <xTimerGenericCommand+0x98>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d02a      	beq.n	8008420 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2b05      	cmp	r3, #5
 80083da:	dc18      	bgt.n	800840e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083dc:	f7ff fe88 	bl	80080f0 <xTaskGetSchedulerState>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d109      	bne.n	80083fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083e6:	4b11      	ldr	r3, [pc, #68]	; (800842c <xTimerGenericCommand+0x98>)
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	f107 0110 	add.w	r1, r7, #16
 80083ee:	2300      	movs	r3, #0
 80083f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083f2:	f7fe fbe5 	bl	8006bc0 <xQueueGenericSend>
 80083f6:	6278      	str	r0, [r7, #36]	; 0x24
 80083f8:	e012      	b.n	8008420 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083fa:	4b0c      	ldr	r3, [pc, #48]	; (800842c <xTimerGenericCommand+0x98>)
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	f107 0110 	add.w	r1, r7, #16
 8008402:	2300      	movs	r3, #0
 8008404:	2200      	movs	r2, #0
 8008406:	f7fe fbdb 	bl	8006bc0 <xQueueGenericSend>
 800840a:	6278      	str	r0, [r7, #36]	; 0x24
 800840c:	e008      	b.n	8008420 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800840e:	4b07      	ldr	r3, [pc, #28]	; (800842c <xTimerGenericCommand+0x98>)
 8008410:	6818      	ldr	r0, [r3, #0]
 8008412:	f107 0110 	add.w	r1, r7, #16
 8008416:	2300      	movs	r3, #0
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	f7fe fccf 	bl	8006dbc <xQueueGenericSendFromISR>
 800841e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008422:	4618      	mov	r0, r3
 8008424:	3728      	adds	r7, #40	; 0x28
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20000db4 	.word	0x20000db4

08008430 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af02      	add	r7, sp, #8
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800843a:	4b22      	ldr	r3, [pc, #136]	; (80084c4 <prvProcessExpiredTimer+0x94>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	3304      	adds	r3, #4
 8008448:	4618      	mov	r0, r3
 800844a:	f7fe fa55 	bl	80068f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008454:	f003 0304 	and.w	r3, r3, #4
 8008458:	2b00      	cmp	r3, #0
 800845a:	d022      	beq.n	80084a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	699a      	ldr	r2, [r3, #24]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	18d1      	adds	r1, r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	6978      	ldr	r0, [r7, #20]
 800846a:	f000 f8d1 	bl	8008610 <prvInsertTimerInActiveList>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d01f      	beq.n	80084b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008474:	2300      	movs	r3, #0
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	2300      	movs	r3, #0
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	2100      	movs	r1, #0
 800847e:	6978      	ldr	r0, [r7, #20]
 8008480:	f7ff ff88 	bl	8008394 <xTimerGenericCommand>
 8008484:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d113      	bne.n	80084b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	60fb      	str	r3, [r7, #12]
}
 800849e:	bf00      	nop
 80084a0:	e7fe      	b.n	80084a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084a8:	f023 0301 	bic.w	r3, r3, #1
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	6978      	ldr	r0, [r7, #20]
 80084ba:	4798      	blx	r3
}
 80084bc:	bf00      	nop
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20000dac 	.word	0x20000dac

080084c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084d0:	f107 0308 	add.w	r3, r7, #8
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 f857 	bl	8008588 <prvGetNextExpireTime>
 80084da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4619      	mov	r1, r3
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 f803 	bl	80084ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084e6:	f000 f8d5 	bl	8008694 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084ea:	e7f1      	b.n	80084d0 <prvTimerTask+0x8>

080084ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084f6:	f7ff fa17 	bl	8007928 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084fa:	f107 0308 	add.w	r3, r7, #8
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 f866 	bl	80085d0 <prvSampleTimeNow>
 8008504:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d130      	bne.n	800856e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <prvProcessTimerOrBlockTask+0x3c>
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	429a      	cmp	r2, r3
 8008518:	d806      	bhi.n	8008528 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800851a:	f7ff fa13 	bl	8007944 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800851e:	68f9      	ldr	r1, [r7, #12]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7ff ff85 	bl	8008430 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008526:	e024      	b.n	8008572 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d008      	beq.n	8008540 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800852e:	4b13      	ldr	r3, [pc, #76]	; (800857c <prvProcessTimerOrBlockTask+0x90>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <prvProcessTimerOrBlockTask+0x50>
 8008538:	2301      	movs	r3, #1
 800853a:	e000      	b.n	800853e <prvProcessTimerOrBlockTask+0x52>
 800853c:	2300      	movs	r3, #0
 800853e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008540:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <prvProcessTimerOrBlockTask+0x94>)
 8008542:	6818      	ldr	r0, [r3, #0]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	4619      	mov	r1, r3
 800854e:	f7fe feeb 	bl	8007328 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008552:	f7ff f9f7 	bl	8007944 <xTaskResumeAll>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10a      	bne.n	8008572 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800855c:	4b09      	ldr	r3, [pc, #36]	; (8008584 <prvProcessTimerOrBlockTask+0x98>)
 800855e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	f3bf 8f6f 	isb	sy
}
 800856c:	e001      	b.n	8008572 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800856e:	f7ff f9e9 	bl	8007944 <xTaskResumeAll>
}
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20000db0 	.word	0x20000db0
 8008580:	20000db4 	.word	0x20000db4
 8008584:	e000ed04 	.word	0xe000ed04

08008588 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008590:	4b0e      	ldr	r3, [pc, #56]	; (80085cc <prvGetNextExpireTime+0x44>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <prvGetNextExpireTime+0x16>
 800859a:	2201      	movs	r2, #1
 800859c:	e000      	b.n	80085a0 <prvGetNextExpireTime+0x18>
 800859e:	2200      	movs	r2, #0
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d105      	bne.n	80085b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085ac:	4b07      	ldr	r3, [pc, #28]	; (80085cc <prvGetNextExpireTime+0x44>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	60fb      	str	r3, [r7, #12]
 80085b6:	e001      	b.n	80085bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085bc:	68fb      	ldr	r3, [r7, #12]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	20000dac 	.word	0x20000dac

080085d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085d8:	f7ff fa50 	bl	8007a7c <xTaskGetTickCount>
 80085dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085de:	4b0b      	ldr	r3, [pc, #44]	; (800860c <prvSampleTimeNow+0x3c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d205      	bcs.n	80085f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085e8:	f000 f936 	bl	8008858 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	e002      	b.n	80085fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085fa:	4a04      	ldr	r2, [pc, #16]	; (800860c <prvSampleTimeNow+0x3c>)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008600:	68fb      	ldr	r3, [r7, #12]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20000dbc 	.word	0x20000dbc

08008610 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
 800861c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800861e:	2300      	movs	r3, #0
 8008620:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	429a      	cmp	r2, r3
 8008634:	d812      	bhi.n	800865c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	1ad2      	subs	r2, r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	429a      	cmp	r2, r3
 8008642:	d302      	bcc.n	800864a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008644:	2301      	movs	r3, #1
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	e01b      	b.n	8008682 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800864a:	4b10      	ldr	r3, [pc, #64]	; (800868c <prvInsertTimerInActiveList+0x7c>)
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3304      	adds	r3, #4
 8008652:	4619      	mov	r1, r3
 8008654:	4610      	mov	r0, r2
 8008656:	f7fe f916 	bl	8006886 <vListInsert>
 800865a:	e012      	b.n	8008682 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	429a      	cmp	r2, r3
 8008662:	d206      	bcs.n	8008672 <prvInsertTimerInActiveList+0x62>
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	429a      	cmp	r2, r3
 800866a:	d302      	bcc.n	8008672 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800866c:	2301      	movs	r3, #1
 800866e:	617b      	str	r3, [r7, #20]
 8008670:	e007      	b.n	8008682 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008672:	4b07      	ldr	r3, [pc, #28]	; (8008690 <prvInsertTimerInActiveList+0x80>)
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3304      	adds	r3, #4
 800867a:	4619      	mov	r1, r3
 800867c:	4610      	mov	r0, r2
 800867e:	f7fe f902 	bl	8006886 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008682:	697b      	ldr	r3, [r7, #20]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20000db0 	.word	0x20000db0
 8008690:	20000dac 	.word	0x20000dac

08008694 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b08e      	sub	sp, #56	; 0x38
 8008698:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800869a:	e0ca      	b.n	8008832 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	da18      	bge.n	80086d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086a2:	1d3b      	adds	r3, r7, #4
 80086a4:	3304      	adds	r3, #4
 80086a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10a      	bne.n	80086c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	61fb      	str	r3, [r7, #28]
}
 80086c0:	bf00      	nop
 80086c2:	e7fe      	b.n	80086c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086ca:	6850      	ldr	r0, [r2, #4]
 80086cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086ce:	6892      	ldr	r2, [r2, #8]
 80086d0:	4611      	mov	r1, r2
 80086d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f2c0 80aa 	blt.w	8008830 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d004      	beq.n	80086f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	3304      	adds	r3, #4
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fe f903 	bl	80068f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086f2:	463b      	mov	r3, r7
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff ff6b 	bl	80085d0 <prvSampleTimeNow>
 80086fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b09      	cmp	r3, #9
 8008700:	f200 8097 	bhi.w	8008832 <prvProcessReceivedCommands+0x19e>
 8008704:	a201      	add	r2, pc, #4	; (adr r2, 800870c <prvProcessReceivedCommands+0x78>)
 8008706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870a:	bf00      	nop
 800870c:	08008735 	.word	0x08008735
 8008710:	08008735 	.word	0x08008735
 8008714:	08008735 	.word	0x08008735
 8008718:	080087a9 	.word	0x080087a9
 800871c:	080087bd 	.word	0x080087bd
 8008720:	08008807 	.word	0x08008807
 8008724:	08008735 	.word	0x08008735
 8008728:	08008735 	.word	0x08008735
 800872c:	080087a9 	.word	0x080087a9
 8008730:	080087bd 	.word	0x080087bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800873a:	f043 0301 	orr.w	r3, r3, #1
 800873e:	b2da      	uxtb	r2, r3
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	18d1      	adds	r1, r2, r3
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008754:	f7ff ff5c 	bl	8008610 <prvInsertTimerInActiveList>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d069      	beq.n	8008832 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008764:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d05e      	beq.n	8008832 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	441a      	add	r2, r3
 800877c:	2300      	movs	r3, #0
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	2300      	movs	r3, #0
 8008782:	2100      	movs	r1, #0
 8008784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008786:	f7ff fe05 	bl	8008394 <xTimerGenericCommand>
 800878a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d14f      	bne.n	8008832 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	61bb      	str	r3, [r7, #24]
}
 80087a4:	bf00      	nop
 80087a6:	e7fe      	b.n	80087a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087ae:	f023 0301 	bic.w	r3, r3, #1
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80087ba:	e03a      	b.n	8008832 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087c2:	f043 0301 	orr.w	r3, r3, #1
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10a      	bne.n	80087f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	617b      	str	r3, [r7, #20]
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	699a      	ldr	r2, [r3, #24]
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	18d1      	adds	r1, r2, r3
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008800:	f7ff ff06 	bl	8008610 <prvInsertTimerInActiveList>
					break;
 8008804:	e015      	b.n	8008832 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d103      	bne.n	800881c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008816:	f000 fbdb 	bl	8008fd0 <vPortFree>
 800881a:	e00a      	b.n	8008832 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008822:	f023 0301 	bic.w	r3, r3, #1
 8008826:	b2da      	uxtb	r2, r3
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800882e:	e000      	b.n	8008832 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008830:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008832:	4b08      	ldr	r3, [pc, #32]	; (8008854 <prvProcessReceivedCommands+0x1c0>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	1d39      	adds	r1, r7, #4
 8008838:	2200      	movs	r2, #0
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe fb5a 	bl	8006ef4 <xQueueReceive>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	f47f af2a 	bne.w	800869c <prvProcessReceivedCommands+0x8>
	}
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	3730      	adds	r7, #48	; 0x30
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000db4 	.word	0x20000db4

08008858 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800885e:	e048      	b.n	80088f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008860:	4b2d      	ldr	r3, [pc, #180]	; (8008918 <prvSwitchTimerLists+0xc0>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800886a:	4b2b      	ldr	r3, [pc, #172]	; (8008918 <prvSwitchTimerLists+0xc0>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3304      	adds	r3, #4
 8008878:	4618      	mov	r0, r3
 800887a:	f7fe f83d 	bl	80068f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	d02e      	beq.n	80088f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	4413      	add	r3, r2
 800889c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d90e      	bls.n	80088c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088b2:	4b19      	ldr	r3, [pc, #100]	; (8008918 <prvSwitchTimerLists+0xc0>)
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3304      	adds	r3, #4
 80088ba:	4619      	mov	r1, r3
 80088bc:	4610      	mov	r0, r2
 80088be:	f7fd ffe2 	bl	8006886 <vListInsert>
 80088c2:	e016      	b.n	80088f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088c4:	2300      	movs	r3, #0
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	2300      	movs	r3, #0
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	2100      	movs	r1, #0
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f7ff fd60 	bl	8008394 <xTimerGenericCommand>
 80088d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	603b      	str	r3, [r7, #0]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088f2:	4b09      	ldr	r3, [pc, #36]	; (8008918 <prvSwitchTimerLists+0xc0>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1b1      	bne.n	8008860 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088fc:	4b06      	ldr	r3, [pc, #24]	; (8008918 <prvSwitchTimerLists+0xc0>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008902:	4b06      	ldr	r3, [pc, #24]	; (800891c <prvSwitchTimerLists+0xc4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a04      	ldr	r2, [pc, #16]	; (8008918 <prvSwitchTimerLists+0xc0>)
 8008908:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800890a:	4a04      	ldr	r2, [pc, #16]	; (800891c <prvSwitchTimerLists+0xc4>)
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	6013      	str	r3, [r2, #0]
}
 8008910:	bf00      	nop
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	20000dac 	.word	0x20000dac
 800891c:	20000db0 	.word	0x20000db0

08008920 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008926:	f000 f965 	bl	8008bf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800892a:	4b15      	ldr	r3, [pc, #84]	; (8008980 <prvCheckForValidListAndQueue+0x60>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d120      	bne.n	8008974 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008932:	4814      	ldr	r0, [pc, #80]	; (8008984 <prvCheckForValidListAndQueue+0x64>)
 8008934:	f7fd ff56 	bl	80067e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008938:	4813      	ldr	r0, [pc, #76]	; (8008988 <prvCheckForValidListAndQueue+0x68>)
 800893a:	f7fd ff53 	bl	80067e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800893e:	4b13      	ldr	r3, [pc, #76]	; (800898c <prvCheckForValidListAndQueue+0x6c>)
 8008940:	4a10      	ldr	r2, [pc, #64]	; (8008984 <prvCheckForValidListAndQueue+0x64>)
 8008942:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008944:	4b12      	ldr	r3, [pc, #72]	; (8008990 <prvCheckForValidListAndQueue+0x70>)
 8008946:	4a10      	ldr	r2, [pc, #64]	; (8008988 <prvCheckForValidListAndQueue+0x68>)
 8008948:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800894a:	2300      	movs	r3, #0
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	4b11      	ldr	r3, [pc, #68]	; (8008994 <prvCheckForValidListAndQueue+0x74>)
 8008950:	4a11      	ldr	r2, [pc, #68]	; (8008998 <prvCheckForValidListAndQueue+0x78>)
 8008952:	2110      	movs	r1, #16
 8008954:	200a      	movs	r0, #10
 8008956:	f7fe f861 	bl	8006a1c <xQueueGenericCreateStatic>
 800895a:	4603      	mov	r3, r0
 800895c:	4a08      	ldr	r2, [pc, #32]	; (8008980 <prvCheckForValidListAndQueue+0x60>)
 800895e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008960:	4b07      	ldr	r3, [pc, #28]	; (8008980 <prvCheckForValidListAndQueue+0x60>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d005      	beq.n	8008974 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008968:	4b05      	ldr	r3, [pc, #20]	; (8008980 <prvCheckForValidListAndQueue+0x60>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	490b      	ldr	r1, [pc, #44]	; (800899c <prvCheckForValidListAndQueue+0x7c>)
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe fcb0 	bl	80072d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008974:	f000 f96e 	bl	8008c54 <vPortExitCritical>
}
 8008978:	bf00      	nop
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	20000db4 	.word	0x20000db4
 8008984:	20000d84 	.word	0x20000d84
 8008988:	20000d98 	.word	0x20000d98
 800898c:	20000dac 	.word	0x20000dac
 8008990:	20000db0 	.word	0x20000db0
 8008994:	20000e60 	.word	0x20000e60
 8008998:	20000dc0 	.word	0x20000dc0
 800899c:	0800dcdc 	.word	0x0800dcdc

080089a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	3b04      	subs	r3, #4
 80089b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	3b04      	subs	r3, #4
 80089be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f023 0201 	bic.w	r2, r3, #1
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	3b04      	subs	r3, #4
 80089ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089d0:	4a0c      	ldr	r2, [pc, #48]	; (8008a04 <pxPortInitialiseStack+0x64>)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3b14      	subs	r3, #20
 80089da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3b04      	subs	r3, #4
 80089e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f06f 0202 	mvn.w	r2, #2
 80089ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3b20      	subs	r3, #32
 80089f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089f6:	68fb      	ldr	r3, [r7, #12]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	08008a09 	.word	0x08008a09

08008a08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a12:	4b12      	ldr	r3, [pc, #72]	; (8008a5c <prvTaskExitError+0x54>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1a:	d00a      	beq.n	8008a32 <prvTaskExitError+0x2a>
	__asm volatile
 8008a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	60fb      	str	r3, [r7, #12]
}
 8008a2e:	bf00      	nop
 8008a30:	e7fe      	b.n	8008a30 <prvTaskExitError+0x28>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	60bb      	str	r3, [r7, #8]
}
 8008a44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a46:	bf00      	nop
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d0fc      	beq.n	8008a48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a4e:	bf00      	nop
 8008a50:	bf00      	nop
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	20000040 	.word	0x20000040

08008a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a60:	4b07      	ldr	r3, [pc, #28]	; (8008a80 <pxCurrentTCBConst2>)
 8008a62:	6819      	ldr	r1, [r3, #0]
 8008a64:	6808      	ldr	r0, [r1, #0]
 8008a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6a:	f380 8809 	msr	PSP, r0
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f04f 0000 	mov.w	r0, #0
 8008a76:	f380 8811 	msr	BASEPRI, r0
 8008a7a:	4770      	bx	lr
 8008a7c:	f3af 8000 	nop.w

08008a80 <pxCurrentTCBConst2>:
 8008a80:	20000bb8 	.word	0x20000bb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop

08008a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a88:	4808      	ldr	r0, [pc, #32]	; (8008aac <prvPortStartFirstTask+0x24>)
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	6800      	ldr	r0, [r0, #0]
 8008a8e:	f380 8808 	msr	MSP, r0
 8008a92:	f04f 0000 	mov.w	r0, #0
 8008a96:	f380 8814 	msr	CONTROL, r0
 8008a9a:	b662      	cpsie	i
 8008a9c:	b661      	cpsie	f
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	df00      	svc	0
 8008aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008aaa:	bf00      	nop
 8008aac:	e000ed08 	.word	0xe000ed08

08008ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ab6:	4b46      	ldr	r3, [pc, #280]	; (8008bd0 <xPortStartScheduler+0x120>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a46      	ldr	r2, [pc, #280]	; (8008bd4 <xPortStartScheduler+0x124>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d10a      	bne.n	8008ad6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	613b      	str	r3, [r7, #16]
}
 8008ad2:	bf00      	nop
 8008ad4:	e7fe      	b.n	8008ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ad6:	4b3e      	ldr	r3, [pc, #248]	; (8008bd0 <xPortStartScheduler+0x120>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a3f      	ldr	r2, [pc, #252]	; (8008bd8 <xPortStartScheduler+0x128>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d10a      	bne.n	8008af6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	60fb      	str	r3, [r7, #12]
}
 8008af2:	bf00      	nop
 8008af4:	e7fe      	b.n	8008af4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008af6:	4b39      	ldr	r3, [pc, #228]	; (8008bdc <xPortStartScheduler+0x12c>)
 8008af8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	22ff      	movs	r2, #255	; 0xff
 8008b06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b10:	78fb      	ldrb	r3, [r7, #3]
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b18:	b2da      	uxtb	r2, r3
 8008b1a:	4b31      	ldr	r3, [pc, #196]	; (8008be0 <xPortStartScheduler+0x130>)
 8008b1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b1e:	4b31      	ldr	r3, [pc, #196]	; (8008be4 <xPortStartScheduler+0x134>)
 8008b20:	2207      	movs	r2, #7
 8008b22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b24:	e009      	b.n	8008b3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008b26:	4b2f      	ldr	r3, [pc, #188]	; (8008be4 <xPortStartScheduler+0x134>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	4a2d      	ldr	r2, [pc, #180]	; (8008be4 <xPortStartScheduler+0x134>)
 8008b2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b3a:	78fb      	ldrb	r3, [r7, #3]
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b42:	2b80      	cmp	r3, #128	; 0x80
 8008b44:	d0ef      	beq.n	8008b26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b46:	4b27      	ldr	r3, [pc, #156]	; (8008be4 <xPortStartScheduler+0x134>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f1c3 0307 	rsb	r3, r3, #7
 8008b4e:	2b04      	cmp	r3, #4
 8008b50:	d00a      	beq.n	8008b68 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	60bb      	str	r3, [r7, #8]
}
 8008b64:	bf00      	nop
 8008b66:	e7fe      	b.n	8008b66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b68:	4b1e      	ldr	r3, [pc, #120]	; (8008be4 <xPortStartScheduler+0x134>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	021b      	lsls	r3, r3, #8
 8008b6e:	4a1d      	ldr	r2, [pc, #116]	; (8008be4 <xPortStartScheduler+0x134>)
 8008b70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b72:	4b1c      	ldr	r3, [pc, #112]	; (8008be4 <xPortStartScheduler+0x134>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b7a:	4a1a      	ldr	r2, [pc, #104]	; (8008be4 <xPortStartScheduler+0x134>)
 8008b7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b86:	4b18      	ldr	r3, [pc, #96]	; (8008be8 <xPortStartScheduler+0x138>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a17      	ldr	r2, [pc, #92]	; (8008be8 <xPortStartScheduler+0x138>)
 8008b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b92:	4b15      	ldr	r3, [pc, #84]	; (8008be8 <xPortStartScheduler+0x138>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a14      	ldr	r2, [pc, #80]	; (8008be8 <xPortStartScheduler+0x138>)
 8008b98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b9e:	f000 f8dd 	bl	8008d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ba2:	4b12      	ldr	r3, [pc, #72]	; (8008bec <xPortStartScheduler+0x13c>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ba8:	f000 f8fc 	bl	8008da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008bac:	4b10      	ldr	r3, [pc, #64]	; (8008bf0 <xPortStartScheduler+0x140>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a0f      	ldr	r2, [pc, #60]	; (8008bf0 <xPortStartScheduler+0x140>)
 8008bb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008bb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008bb8:	f7ff ff66 	bl	8008a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bbc:	f7ff f826 	bl	8007c0c <vTaskSwitchContext>
	prvTaskExitError();
 8008bc0:	f7ff ff22 	bl	8008a08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	e000ed00 	.word	0xe000ed00
 8008bd4:	410fc271 	.word	0x410fc271
 8008bd8:	410fc270 	.word	0x410fc270
 8008bdc:	e000e400 	.word	0xe000e400
 8008be0:	20000ea8 	.word	0x20000ea8
 8008be4:	20000eac 	.word	0x20000eac
 8008be8:	e000ed20 	.word	0xe000ed20
 8008bec:	20000040 	.word	0x20000040
 8008bf0:	e000ef34 	.word	0xe000ef34

08008bf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	607b      	str	r3, [r7, #4]
}
 8008c0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c0e:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <vPortEnterCritical+0x58>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3301      	adds	r3, #1
 8008c14:	4a0d      	ldr	r2, [pc, #52]	; (8008c4c <vPortEnterCritical+0x58>)
 8008c16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c18:	4b0c      	ldr	r3, [pc, #48]	; (8008c4c <vPortEnterCritical+0x58>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d10f      	bne.n	8008c40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c20:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <vPortEnterCritical+0x5c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00a      	beq.n	8008c40 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	603b      	str	r3, [r7, #0]
}
 8008c3c:	bf00      	nop
 8008c3e:	e7fe      	b.n	8008c3e <vPortEnterCritical+0x4a>
	}
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	20000040 	.word	0x20000040
 8008c50:	e000ed04 	.word	0xe000ed04

08008c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c5a:	4b12      	ldr	r3, [pc, #72]	; (8008ca4 <vPortExitCritical+0x50>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10a      	bne.n	8008c78 <vPortExitCritical+0x24>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	607b      	str	r3, [r7, #4]
}
 8008c74:	bf00      	nop
 8008c76:	e7fe      	b.n	8008c76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c78:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <vPortExitCritical+0x50>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	4a09      	ldr	r2, [pc, #36]	; (8008ca4 <vPortExitCritical+0x50>)
 8008c80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c82:	4b08      	ldr	r3, [pc, #32]	; (8008ca4 <vPortExitCritical+0x50>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d105      	bne.n	8008c96 <vPortExitCritical+0x42>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	f383 8811 	msr	BASEPRI, r3
}
 8008c94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	20000040 	.word	0x20000040
	...

08008cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008cb0:	f3ef 8009 	mrs	r0, PSP
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	4b15      	ldr	r3, [pc, #84]	; (8008d10 <pxCurrentTCBConst>)
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	f01e 0f10 	tst.w	lr, #16
 8008cc0:	bf08      	it	eq
 8008cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cca:	6010      	str	r0, [r2, #0]
 8008ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008cd4:	f380 8811 	msr	BASEPRI, r0
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f7fe ff94 	bl	8007c0c <vTaskSwitchContext>
 8008ce4:	f04f 0000 	mov.w	r0, #0
 8008ce8:	f380 8811 	msr	BASEPRI, r0
 8008cec:	bc09      	pop	{r0, r3}
 8008cee:	6819      	ldr	r1, [r3, #0]
 8008cf0:	6808      	ldr	r0, [r1, #0]
 8008cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf6:	f01e 0f10 	tst.w	lr, #16
 8008cfa:	bf08      	it	eq
 8008cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d00:	f380 8809 	msr	PSP, r0
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	f3af 8000 	nop.w

08008d10 <pxCurrentTCBConst>:
 8008d10:	20000bb8 	.word	0x20000bb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop

08008d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	607b      	str	r3, [r7, #4]
}
 8008d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d32:	f7fe feb3 	bl	8007a9c <xTaskIncrementTick>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d3c:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <SysTick_Handler+0x40>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	2300      	movs	r3, #0
 8008d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	f383 8811 	msr	BASEPRI, r3
}
 8008d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	e000ed04 	.word	0xe000ed04

08008d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d60:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <vPortSetupTimerInterrupt+0x34>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d66:	4b0b      	ldr	r3, [pc, #44]	; (8008d94 <vPortSetupTimerInterrupt+0x38>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d6c:	4b0a      	ldr	r3, [pc, #40]	; (8008d98 <vPortSetupTimerInterrupt+0x3c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a0a      	ldr	r2, [pc, #40]	; (8008d9c <vPortSetupTimerInterrupt+0x40>)
 8008d72:	fba2 2303 	umull	r2, r3, r2, r3
 8008d76:	099b      	lsrs	r3, r3, #6
 8008d78:	4a09      	ldr	r2, [pc, #36]	; (8008da0 <vPortSetupTimerInterrupt+0x44>)
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d7e:	4b04      	ldr	r3, [pc, #16]	; (8008d90 <vPortSetupTimerInterrupt+0x34>)
 8008d80:	2207      	movs	r2, #7
 8008d82:	601a      	str	r2, [r3, #0]
}
 8008d84:	bf00      	nop
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	e000e010 	.word	0xe000e010
 8008d94:	e000e018 	.word	0xe000e018
 8008d98:	20000000 	.word	0x20000000
 8008d9c:	10624dd3 	.word	0x10624dd3
 8008da0:	e000e014 	.word	0xe000e014

08008da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008da4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008db4 <vPortEnableVFP+0x10>
 8008da8:	6801      	ldr	r1, [r0, #0]
 8008daa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008dae:	6001      	str	r1, [r0, #0]
 8008db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008db2:	bf00      	nop
 8008db4:	e000ed88 	.word	0xe000ed88

08008db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dbe:	f3ef 8305 	mrs	r3, IPSR
 8008dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b0f      	cmp	r3, #15
 8008dc8:	d914      	bls.n	8008df4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dca:	4a17      	ldr	r2, [pc, #92]	; (8008e28 <vPortValidateInterruptPriority+0x70>)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4413      	add	r3, r2
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008dd4:	4b15      	ldr	r3, [pc, #84]	; (8008e2c <vPortValidateInterruptPriority+0x74>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	7afa      	ldrb	r2, [r7, #11]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d20a      	bcs.n	8008df4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	607b      	str	r3, [r7, #4]
}
 8008df0:	bf00      	nop
 8008df2:	e7fe      	b.n	8008df2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008df4:	4b0e      	ldr	r3, [pc, #56]	; (8008e30 <vPortValidateInterruptPriority+0x78>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dfc:	4b0d      	ldr	r3, [pc, #52]	; (8008e34 <vPortValidateInterruptPriority+0x7c>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d90a      	bls.n	8008e1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	603b      	str	r3, [r7, #0]
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <vPortValidateInterruptPriority+0x60>
	}
 8008e1a:	bf00      	nop
 8008e1c:	3714      	adds	r7, #20
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	e000e3f0 	.word	0xe000e3f0
 8008e2c:	20000ea8 	.word	0x20000ea8
 8008e30:	e000ed0c 	.word	0xe000ed0c
 8008e34:	20000eac 	.word	0x20000eac

08008e38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b08a      	sub	sp, #40	; 0x28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e40:	2300      	movs	r3, #0
 8008e42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e44:	f7fe fd70 	bl	8007928 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e48:	4b5b      	ldr	r3, [pc, #364]	; (8008fb8 <pvPortMalloc+0x180>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e50:	f000 f920 	bl	8009094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e54:	4b59      	ldr	r3, [pc, #356]	; (8008fbc <pvPortMalloc+0x184>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f040 8093 	bne.w	8008f88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01d      	beq.n	8008ea4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e68:	2208      	movs	r2, #8
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d014      	beq.n	8008ea4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f023 0307 	bic.w	r3, r3, #7
 8008e80:	3308      	adds	r3, #8
 8008e82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00a      	beq.n	8008ea4 <pvPortMalloc+0x6c>
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	617b      	str	r3, [r7, #20]
}
 8008ea0:	bf00      	nop
 8008ea2:	e7fe      	b.n	8008ea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d06e      	beq.n	8008f88 <pvPortMalloc+0x150>
 8008eaa:	4b45      	ldr	r3, [pc, #276]	; (8008fc0 <pvPortMalloc+0x188>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d869      	bhi.n	8008f88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008eb4:	4b43      	ldr	r3, [pc, #268]	; (8008fc4 <pvPortMalloc+0x18c>)
 8008eb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008eb8:	4b42      	ldr	r3, [pc, #264]	; (8008fc4 <pvPortMalloc+0x18c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ebe:	e004      	b.n	8008eca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d903      	bls.n	8008edc <pvPortMalloc+0xa4>
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1f1      	bne.n	8008ec0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008edc:	4b36      	ldr	r3, [pc, #216]	; (8008fb8 <pvPortMalloc+0x180>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d050      	beq.n	8008f88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2208      	movs	r2, #8
 8008eec:	4413      	add	r3, r2
 8008eee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	6a3b      	ldr	r3, [r7, #32]
 8008ef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	2308      	movs	r3, #8
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d91f      	bls.n	8008f48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	f003 0307 	and.w	r3, r3, #7
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <pvPortMalloc+0xf8>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	613b      	str	r3, [r7, #16]
}
 8008f2c:	bf00      	nop
 8008f2e:	e7fe      	b.n	8008f2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	1ad2      	subs	r2, r2, r3
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f42:	69b8      	ldr	r0, [r7, #24]
 8008f44:	f000 f908 	bl	8009158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f48:	4b1d      	ldr	r3, [pc, #116]	; (8008fc0 <pvPortMalloc+0x188>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	4a1b      	ldr	r2, [pc, #108]	; (8008fc0 <pvPortMalloc+0x188>)
 8008f54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f56:	4b1a      	ldr	r3, [pc, #104]	; (8008fc0 <pvPortMalloc+0x188>)
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	4b1b      	ldr	r3, [pc, #108]	; (8008fc8 <pvPortMalloc+0x190>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d203      	bcs.n	8008f6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f62:	4b17      	ldr	r3, [pc, #92]	; (8008fc0 <pvPortMalloc+0x188>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a18      	ldr	r2, [pc, #96]	; (8008fc8 <pvPortMalloc+0x190>)
 8008f68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	685a      	ldr	r2, [r3, #4]
 8008f6e:	4b13      	ldr	r3, [pc, #76]	; (8008fbc <pvPortMalloc+0x184>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	431a      	orrs	r2, r3
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f7e:	4b13      	ldr	r3, [pc, #76]	; (8008fcc <pvPortMalloc+0x194>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3301      	adds	r3, #1
 8008f84:	4a11      	ldr	r2, [pc, #68]	; (8008fcc <pvPortMalloc+0x194>)
 8008f86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f88:	f7fe fcdc 	bl	8007944 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <pvPortMalloc+0x174>
	__asm volatile
 8008f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	60fb      	str	r3, [r7, #12]
}
 8008fa8:	bf00      	nop
 8008faa:	e7fe      	b.n	8008faa <pvPortMalloc+0x172>
	return pvReturn;
 8008fac:	69fb      	ldr	r3, [r7, #28]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3728      	adds	r7, #40	; 0x28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20005cd8 	.word	0x20005cd8
 8008fbc:	20005cec 	.word	0x20005cec
 8008fc0:	20005cdc 	.word	0x20005cdc
 8008fc4:	20005cd0 	.word	0x20005cd0
 8008fc8:	20005ce0 	.word	0x20005ce0
 8008fcc:	20005ce4 	.word	0x20005ce4

08008fd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d04d      	beq.n	800907e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fe2:	2308      	movs	r3, #8
 8008fe4:	425b      	negs	r3, r3
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	4413      	add	r3, r2
 8008fea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	4b24      	ldr	r3, [pc, #144]	; (8009088 <vPortFree+0xb8>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10a      	bne.n	8009014 <vPortFree+0x44>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	60fb      	str	r3, [r7, #12]
}
 8009010:	bf00      	nop
 8009012:	e7fe      	b.n	8009012 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00a      	beq.n	8009032 <vPortFree+0x62>
	__asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	60bb      	str	r3, [r7, #8]
}
 800902e:	bf00      	nop
 8009030:	e7fe      	b.n	8009030 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	4b14      	ldr	r3, [pc, #80]	; (8009088 <vPortFree+0xb8>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4013      	ands	r3, r2
 800903c:	2b00      	cmp	r3, #0
 800903e:	d01e      	beq.n	800907e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d11a      	bne.n	800907e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	4b0e      	ldr	r3, [pc, #56]	; (8009088 <vPortFree+0xb8>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	43db      	mvns	r3, r3
 8009052:	401a      	ands	r2, r3
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009058:	f7fe fc66 	bl	8007928 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	4b0a      	ldr	r3, [pc, #40]	; (800908c <vPortFree+0xbc>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4413      	add	r3, r2
 8009066:	4a09      	ldr	r2, [pc, #36]	; (800908c <vPortFree+0xbc>)
 8009068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800906a:	6938      	ldr	r0, [r7, #16]
 800906c:	f000 f874 	bl	8009158 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009070:	4b07      	ldr	r3, [pc, #28]	; (8009090 <vPortFree+0xc0>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3301      	adds	r3, #1
 8009076:	4a06      	ldr	r2, [pc, #24]	; (8009090 <vPortFree+0xc0>)
 8009078:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800907a:	f7fe fc63 	bl	8007944 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800907e:	bf00      	nop
 8009080:	3718      	adds	r7, #24
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20005cec 	.word	0x20005cec
 800908c:	20005cdc 	.word	0x20005cdc
 8009090:	20005ce8 	.word	0x20005ce8

08009094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800909a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800909e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090a0:	4b27      	ldr	r3, [pc, #156]	; (8009140 <prvHeapInit+0xac>)
 80090a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00c      	beq.n	80090c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3307      	adds	r3, #7
 80090b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f023 0307 	bic.w	r3, r3, #7
 80090ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	4a1f      	ldr	r2, [pc, #124]	; (8009140 <prvHeapInit+0xac>)
 80090c4:	4413      	add	r3, r2
 80090c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090cc:	4a1d      	ldr	r2, [pc, #116]	; (8009144 <prvHeapInit+0xb0>)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090d2:	4b1c      	ldr	r3, [pc, #112]	; (8009144 <prvHeapInit+0xb0>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	4413      	add	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090e0:	2208      	movs	r2, #8
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	1a9b      	subs	r3, r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f023 0307 	bic.w	r3, r3, #7
 80090ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4a15      	ldr	r2, [pc, #84]	; (8009148 <prvHeapInit+0xb4>)
 80090f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090f6:	4b14      	ldr	r3, [pc, #80]	; (8009148 <prvHeapInit+0xb4>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2200      	movs	r2, #0
 80090fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090fe:	4b12      	ldr	r3, [pc, #72]	; (8009148 <prvHeapInit+0xb4>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2200      	movs	r2, #0
 8009104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	1ad2      	subs	r2, r2, r3
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009114:	4b0c      	ldr	r3, [pc, #48]	; (8009148 <prvHeapInit+0xb4>)
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	4a0a      	ldr	r2, [pc, #40]	; (800914c <prvHeapInit+0xb8>)
 8009122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	4a09      	ldr	r2, [pc, #36]	; (8009150 <prvHeapInit+0xbc>)
 800912a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800912c:	4b09      	ldr	r3, [pc, #36]	; (8009154 <prvHeapInit+0xc0>)
 800912e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009132:	601a      	str	r2, [r3, #0]
}
 8009134:	bf00      	nop
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	20000eb0 	.word	0x20000eb0
 8009144:	20005cd0 	.word	0x20005cd0
 8009148:	20005cd8 	.word	0x20005cd8
 800914c:	20005ce0 	.word	0x20005ce0
 8009150:	20005cdc 	.word	0x20005cdc
 8009154:	20005cec 	.word	0x20005cec

08009158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009160:	4b28      	ldr	r3, [pc, #160]	; (8009204 <prvInsertBlockIntoFreeList+0xac>)
 8009162:	60fb      	str	r3, [r7, #12]
 8009164:	e002      	b.n	800916c <prvInsertBlockIntoFreeList+0x14>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	429a      	cmp	r2, r3
 8009174:	d8f7      	bhi.n	8009166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	4413      	add	r3, r2
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	429a      	cmp	r2, r3
 8009186:	d108      	bne.n	800919a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	441a      	add	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	441a      	add	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d118      	bne.n	80091e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	4b15      	ldr	r3, [pc, #84]	; (8009208 <prvInsertBlockIntoFreeList+0xb0>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d00d      	beq.n	80091d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	441a      	add	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	e008      	b.n	80091e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091d6:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <prvInsertBlockIntoFreeList+0xb0>)
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	e003      	b.n	80091e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d002      	beq.n	80091f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091f6:	bf00      	nop
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	20005cd0 	.word	0x20005cd0
 8009208:	20005cd8 	.word	0x20005cd8

0800920c <__errno>:
 800920c:	4b01      	ldr	r3, [pc, #4]	; (8009214 <__errno+0x8>)
 800920e:	6818      	ldr	r0, [r3, #0]
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20000044 	.word	0x20000044

08009218 <std>:
 8009218:	2300      	movs	r3, #0
 800921a:	b510      	push	{r4, lr}
 800921c:	4604      	mov	r4, r0
 800921e:	e9c0 3300 	strd	r3, r3, [r0]
 8009222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009226:	6083      	str	r3, [r0, #8]
 8009228:	8181      	strh	r1, [r0, #12]
 800922a:	6643      	str	r3, [r0, #100]	; 0x64
 800922c:	81c2      	strh	r2, [r0, #14]
 800922e:	6183      	str	r3, [r0, #24]
 8009230:	4619      	mov	r1, r3
 8009232:	2208      	movs	r2, #8
 8009234:	305c      	adds	r0, #92	; 0x5c
 8009236:	f000 f91a 	bl	800946e <memset>
 800923a:	4b05      	ldr	r3, [pc, #20]	; (8009250 <std+0x38>)
 800923c:	6263      	str	r3, [r4, #36]	; 0x24
 800923e:	4b05      	ldr	r3, [pc, #20]	; (8009254 <std+0x3c>)
 8009240:	62a3      	str	r3, [r4, #40]	; 0x28
 8009242:	4b05      	ldr	r3, [pc, #20]	; (8009258 <std+0x40>)
 8009244:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009246:	4b05      	ldr	r3, [pc, #20]	; (800925c <std+0x44>)
 8009248:	6224      	str	r4, [r4, #32]
 800924a:	6323      	str	r3, [r4, #48]	; 0x30
 800924c:	bd10      	pop	{r4, pc}
 800924e:	bf00      	nop
 8009250:	0800a3dd 	.word	0x0800a3dd
 8009254:	0800a3ff 	.word	0x0800a3ff
 8009258:	0800a437 	.word	0x0800a437
 800925c:	0800a45b 	.word	0x0800a45b

08009260 <_cleanup_r>:
 8009260:	4901      	ldr	r1, [pc, #4]	; (8009268 <_cleanup_r+0x8>)
 8009262:	f000 b8af 	b.w	80093c4 <_fwalk_reent>
 8009266:	bf00      	nop
 8009268:	0800c1c1 	.word	0x0800c1c1

0800926c <__sfmoreglue>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	2268      	movs	r2, #104	; 0x68
 8009270:	1e4d      	subs	r5, r1, #1
 8009272:	4355      	muls	r5, r2
 8009274:	460e      	mov	r6, r1
 8009276:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800927a:	f000 f921 	bl	80094c0 <_malloc_r>
 800927e:	4604      	mov	r4, r0
 8009280:	b140      	cbz	r0, 8009294 <__sfmoreglue+0x28>
 8009282:	2100      	movs	r1, #0
 8009284:	e9c0 1600 	strd	r1, r6, [r0]
 8009288:	300c      	adds	r0, #12
 800928a:	60a0      	str	r0, [r4, #8]
 800928c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009290:	f000 f8ed 	bl	800946e <memset>
 8009294:	4620      	mov	r0, r4
 8009296:	bd70      	pop	{r4, r5, r6, pc}

08009298 <__sfp_lock_acquire>:
 8009298:	4801      	ldr	r0, [pc, #4]	; (80092a0 <__sfp_lock_acquire+0x8>)
 800929a:	f000 b8d8 	b.w	800944e <__retarget_lock_acquire_recursive>
 800929e:	bf00      	nop
 80092a0:	20005cf1 	.word	0x20005cf1

080092a4 <__sfp_lock_release>:
 80092a4:	4801      	ldr	r0, [pc, #4]	; (80092ac <__sfp_lock_release+0x8>)
 80092a6:	f000 b8d3 	b.w	8009450 <__retarget_lock_release_recursive>
 80092aa:	bf00      	nop
 80092ac:	20005cf1 	.word	0x20005cf1

080092b0 <__sinit_lock_acquire>:
 80092b0:	4801      	ldr	r0, [pc, #4]	; (80092b8 <__sinit_lock_acquire+0x8>)
 80092b2:	f000 b8cc 	b.w	800944e <__retarget_lock_acquire_recursive>
 80092b6:	bf00      	nop
 80092b8:	20005cf2 	.word	0x20005cf2

080092bc <__sinit_lock_release>:
 80092bc:	4801      	ldr	r0, [pc, #4]	; (80092c4 <__sinit_lock_release+0x8>)
 80092be:	f000 b8c7 	b.w	8009450 <__retarget_lock_release_recursive>
 80092c2:	bf00      	nop
 80092c4:	20005cf2 	.word	0x20005cf2

080092c8 <__sinit>:
 80092c8:	b510      	push	{r4, lr}
 80092ca:	4604      	mov	r4, r0
 80092cc:	f7ff fff0 	bl	80092b0 <__sinit_lock_acquire>
 80092d0:	69a3      	ldr	r3, [r4, #24]
 80092d2:	b11b      	cbz	r3, 80092dc <__sinit+0x14>
 80092d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092d8:	f7ff bff0 	b.w	80092bc <__sinit_lock_release>
 80092dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092e0:	6523      	str	r3, [r4, #80]	; 0x50
 80092e2:	4b13      	ldr	r3, [pc, #76]	; (8009330 <__sinit+0x68>)
 80092e4:	4a13      	ldr	r2, [pc, #76]	; (8009334 <__sinit+0x6c>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80092ea:	42a3      	cmp	r3, r4
 80092ec:	bf04      	itt	eq
 80092ee:	2301      	moveq	r3, #1
 80092f0:	61a3      	streq	r3, [r4, #24]
 80092f2:	4620      	mov	r0, r4
 80092f4:	f000 f820 	bl	8009338 <__sfp>
 80092f8:	6060      	str	r0, [r4, #4]
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 f81c 	bl	8009338 <__sfp>
 8009300:	60a0      	str	r0, [r4, #8]
 8009302:	4620      	mov	r0, r4
 8009304:	f000 f818 	bl	8009338 <__sfp>
 8009308:	2200      	movs	r2, #0
 800930a:	60e0      	str	r0, [r4, #12]
 800930c:	2104      	movs	r1, #4
 800930e:	6860      	ldr	r0, [r4, #4]
 8009310:	f7ff ff82 	bl	8009218 <std>
 8009314:	68a0      	ldr	r0, [r4, #8]
 8009316:	2201      	movs	r2, #1
 8009318:	2109      	movs	r1, #9
 800931a:	f7ff ff7d 	bl	8009218 <std>
 800931e:	68e0      	ldr	r0, [r4, #12]
 8009320:	2202      	movs	r2, #2
 8009322:	2112      	movs	r1, #18
 8009324:	f7ff ff78 	bl	8009218 <std>
 8009328:	2301      	movs	r3, #1
 800932a:	61a3      	str	r3, [r4, #24]
 800932c:	e7d2      	b.n	80092d4 <__sinit+0xc>
 800932e:	bf00      	nop
 8009330:	0800dd8c 	.word	0x0800dd8c
 8009334:	08009261 	.word	0x08009261

08009338 <__sfp>:
 8009338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933a:	4607      	mov	r7, r0
 800933c:	f7ff ffac 	bl	8009298 <__sfp_lock_acquire>
 8009340:	4b1e      	ldr	r3, [pc, #120]	; (80093bc <__sfp+0x84>)
 8009342:	681e      	ldr	r6, [r3, #0]
 8009344:	69b3      	ldr	r3, [r6, #24]
 8009346:	b913      	cbnz	r3, 800934e <__sfp+0x16>
 8009348:	4630      	mov	r0, r6
 800934a:	f7ff ffbd 	bl	80092c8 <__sinit>
 800934e:	3648      	adds	r6, #72	; 0x48
 8009350:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009354:	3b01      	subs	r3, #1
 8009356:	d503      	bpl.n	8009360 <__sfp+0x28>
 8009358:	6833      	ldr	r3, [r6, #0]
 800935a:	b30b      	cbz	r3, 80093a0 <__sfp+0x68>
 800935c:	6836      	ldr	r6, [r6, #0]
 800935e:	e7f7      	b.n	8009350 <__sfp+0x18>
 8009360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009364:	b9d5      	cbnz	r5, 800939c <__sfp+0x64>
 8009366:	4b16      	ldr	r3, [pc, #88]	; (80093c0 <__sfp+0x88>)
 8009368:	60e3      	str	r3, [r4, #12]
 800936a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800936e:	6665      	str	r5, [r4, #100]	; 0x64
 8009370:	f000 f86c 	bl	800944c <__retarget_lock_init_recursive>
 8009374:	f7ff ff96 	bl	80092a4 <__sfp_lock_release>
 8009378:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800937c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009380:	6025      	str	r5, [r4, #0]
 8009382:	61a5      	str	r5, [r4, #24]
 8009384:	2208      	movs	r2, #8
 8009386:	4629      	mov	r1, r5
 8009388:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800938c:	f000 f86f 	bl	800946e <memset>
 8009390:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009394:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009398:	4620      	mov	r0, r4
 800939a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800939c:	3468      	adds	r4, #104	; 0x68
 800939e:	e7d9      	b.n	8009354 <__sfp+0x1c>
 80093a0:	2104      	movs	r1, #4
 80093a2:	4638      	mov	r0, r7
 80093a4:	f7ff ff62 	bl	800926c <__sfmoreglue>
 80093a8:	4604      	mov	r4, r0
 80093aa:	6030      	str	r0, [r6, #0]
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d1d5      	bne.n	800935c <__sfp+0x24>
 80093b0:	f7ff ff78 	bl	80092a4 <__sfp_lock_release>
 80093b4:	230c      	movs	r3, #12
 80093b6:	603b      	str	r3, [r7, #0]
 80093b8:	e7ee      	b.n	8009398 <__sfp+0x60>
 80093ba:	bf00      	nop
 80093bc:	0800dd8c 	.word	0x0800dd8c
 80093c0:	ffff0001 	.word	0xffff0001

080093c4 <_fwalk_reent>:
 80093c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093c8:	4606      	mov	r6, r0
 80093ca:	4688      	mov	r8, r1
 80093cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093d0:	2700      	movs	r7, #0
 80093d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093d6:	f1b9 0901 	subs.w	r9, r9, #1
 80093da:	d505      	bpl.n	80093e8 <_fwalk_reent+0x24>
 80093dc:	6824      	ldr	r4, [r4, #0]
 80093de:	2c00      	cmp	r4, #0
 80093e0:	d1f7      	bne.n	80093d2 <_fwalk_reent+0xe>
 80093e2:	4638      	mov	r0, r7
 80093e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093e8:	89ab      	ldrh	r3, [r5, #12]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d907      	bls.n	80093fe <_fwalk_reent+0x3a>
 80093ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093f2:	3301      	adds	r3, #1
 80093f4:	d003      	beq.n	80093fe <_fwalk_reent+0x3a>
 80093f6:	4629      	mov	r1, r5
 80093f8:	4630      	mov	r0, r6
 80093fa:	47c0      	blx	r8
 80093fc:	4307      	orrs	r7, r0
 80093fe:	3568      	adds	r5, #104	; 0x68
 8009400:	e7e9      	b.n	80093d6 <_fwalk_reent+0x12>
	...

08009404 <__libc_init_array>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	4d0d      	ldr	r5, [pc, #52]	; (800943c <__libc_init_array+0x38>)
 8009408:	4c0d      	ldr	r4, [pc, #52]	; (8009440 <__libc_init_array+0x3c>)
 800940a:	1b64      	subs	r4, r4, r5
 800940c:	10a4      	asrs	r4, r4, #2
 800940e:	2600      	movs	r6, #0
 8009410:	42a6      	cmp	r6, r4
 8009412:	d109      	bne.n	8009428 <__libc_init_array+0x24>
 8009414:	4d0b      	ldr	r5, [pc, #44]	; (8009444 <__libc_init_array+0x40>)
 8009416:	4c0c      	ldr	r4, [pc, #48]	; (8009448 <__libc_init_array+0x44>)
 8009418:	f004 fc06 	bl	800dc28 <_init>
 800941c:	1b64      	subs	r4, r4, r5
 800941e:	10a4      	asrs	r4, r4, #2
 8009420:	2600      	movs	r6, #0
 8009422:	42a6      	cmp	r6, r4
 8009424:	d105      	bne.n	8009432 <__libc_init_array+0x2e>
 8009426:	bd70      	pop	{r4, r5, r6, pc}
 8009428:	f855 3b04 	ldr.w	r3, [r5], #4
 800942c:	4798      	blx	r3
 800942e:	3601      	adds	r6, #1
 8009430:	e7ee      	b.n	8009410 <__libc_init_array+0xc>
 8009432:	f855 3b04 	ldr.w	r3, [r5], #4
 8009436:	4798      	blx	r3
 8009438:	3601      	adds	r6, #1
 800943a:	e7f2      	b.n	8009422 <__libc_init_array+0x1e>
 800943c:	0800e1e0 	.word	0x0800e1e0
 8009440:	0800e1e0 	.word	0x0800e1e0
 8009444:	0800e1e0 	.word	0x0800e1e0
 8009448:	0800e1e4 	.word	0x0800e1e4

0800944c <__retarget_lock_init_recursive>:
 800944c:	4770      	bx	lr

0800944e <__retarget_lock_acquire_recursive>:
 800944e:	4770      	bx	lr

08009450 <__retarget_lock_release_recursive>:
 8009450:	4770      	bx	lr

08009452 <memcpy>:
 8009452:	440a      	add	r2, r1
 8009454:	4291      	cmp	r1, r2
 8009456:	f100 33ff 	add.w	r3, r0, #4294967295
 800945a:	d100      	bne.n	800945e <memcpy+0xc>
 800945c:	4770      	bx	lr
 800945e:	b510      	push	{r4, lr}
 8009460:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009464:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009468:	4291      	cmp	r1, r2
 800946a:	d1f9      	bne.n	8009460 <memcpy+0xe>
 800946c:	bd10      	pop	{r4, pc}

0800946e <memset>:
 800946e:	4402      	add	r2, r0
 8009470:	4603      	mov	r3, r0
 8009472:	4293      	cmp	r3, r2
 8009474:	d100      	bne.n	8009478 <memset+0xa>
 8009476:	4770      	bx	lr
 8009478:	f803 1b01 	strb.w	r1, [r3], #1
 800947c:	e7f9      	b.n	8009472 <memset+0x4>
	...

08009480 <sbrk_aligned>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	4e0e      	ldr	r6, [pc, #56]	; (80094bc <sbrk_aligned+0x3c>)
 8009484:	460c      	mov	r4, r1
 8009486:	6831      	ldr	r1, [r6, #0]
 8009488:	4605      	mov	r5, r0
 800948a:	b911      	cbnz	r1, 8009492 <sbrk_aligned+0x12>
 800948c:	f000 ff70 	bl	800a370 <_sbrk_r>
 8009490:	6030      	str	r0, [r6, #0]
 8009492:	4621      	mov	r1, r4
 8009494:	4628      	mov	r0, r5
 8009496:	f000 ff6b 	bl	800a370 <_sbrk_r>
 800949a:	1c43      	adds	r3, r0, #1
 800949c:	d00a      	beq.n	80094b4 <sbrk_aligned+0x34>
 800949e:	1cc4      	adds	r4, r0, #3
 80094a0:	f024 0403 	bic.w	r4, r4, #3
 80094a4:	42a0      	cmp	r0, r4
 80094a6:	d007      	beq.n	80094b8 <sbrk_aligned+0x38>
 80094a8:	1a21      	subs	r1, r4, r0
 80094aa:	4628      	mov	r0, r5
 80094ac:	f000 ff60 	bl	800a370 <_sbrk_r>
 80094b0:	3001      	adds	r0, #1
 80094b2:	d101      	bne.n	80094b8 <sbrk_aligned+0x38>
 80094b4:	f04f 34ff 	mov.w	r4, #4294967295
 80094b8:	4620      	mov	r0, r4
 80094ba:	bd70      	pop	{r4, r5, r6, pc}
 80094bc:	20005cf8 	.word	0x20005cf8

080094c0 <_malloc_r>:
 80094c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c4:	1ccd      	adds	r5, r1, #3
 80094c6:	f025 0503 	bic.w	r5, r5, #3
 80094ca:	3508      	adds	r5, #8
 80094cc:	2d0c      	cmp	r5, #12
 80094ce:	bf38      	it	cc
 80094d0:	250c      	movcc	r5, #12
 80094d2:	2d00      	cmp	r5, #0
 80094d4:	4607      	mov	r7, r0
 80094d6:	db01      	blt.n	80094dc <_malloc_r+0x1c>
 80094d8:	42a9      	cmp	r1, r5
 80094da:	d905      	bls.n	80094e8 <_malloc_r+0x28>
 80094dc:	230c      	movs	r3, #12
 80094de:	603b      	str	r3, [r7, #0]
 80094e0:	2600      	movs	r6, #0
 80094e2:	4630      	mov	r0, r6
 80094e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e8:	4e2e      	ldr	r6, [pc, #184]	; (80095a4 <_malloc_r+0xe4>)
 80094ea:	f003 fabd 	bl	800ca68 <__malloc_lock>
 80094ee:	6833      	ldr	r3, [r6, #0]
 80094f0:	461c      	mov	r4, r3
 80094f2:	bb34      	cbnz	r4, 8009542 <_malloc_r+0x82>
 80094f4:	4629      	mov	r1, r5
 80094f6:	4638      	mov	r0, r7
 80094f8:	f7ff ffc2 	bl	8009480 <sbrk_aligned>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	4604      	mov	r4, r0
 8009500:	d14d      	bne.n	800959e <_malloc_r+0xde>
 8009502:	6834      	ldr	r4, [r6, #0]
 8009504:	4626      	mov	r6, r4
 8009506:	2e00      	cmp	r6, #0
 8009508:	d140      	bne.n	800958c <_malloc_r+0xcc>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	4631      	mov	r1, r6
 800950e:	4638      	mov	r0, r7
 8009510:	eb04 0803 	add.w	r8, r4, r3
 8009514:	f000 ff2c 	bl	800a370 <_sbrk_r>
 8009518:	4580      	cmp	r8, r0
 800951a:	d13a      	bne.n	8009592 <_malloc_r+0xd2>
 800951c:	6821      	ldr	r1, [r4, #0]
 800951e:	3503      	adds	r5, #3
 8009520:	1a6d      	subs	r5, r5, r1
 8009522:	f025 0503 	bic.w	r5, r5, #3
 8009526:	3508      	adds	r5, #8
 8009528:	2d0c      	cmp	r5, #12
 800952a:	bf38      	it	cc
 800952c:	250c      	movcc	r5, #12
 800952e:	4629      	mov	r1, r5
 8009530:	4638      	mov	r0, r7
 8009532:	f7ff ffa5 	bl	8009480 <sbrk_aligned>
 8009536:	3001      	adds	r0, #1
 8009538:	d02b      	beq.n	8009592 <_malloc_r+0xd2>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	442b      	add	r3, r5
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	e00e      	b.n	8009560 <_malloc_r+0xa0>
 8009542:	6822      	ldr	r2, [r4, #0]
 8009544:	1b52      	subs	r2, r2, r5
 8009546:	d41e      	bmi.n	8009586 <_malloc_r+0xc6>
 8009548:	2a0b      	cmp	r2, #11
 800954a:	d916      	bls.n	800957a <_malloc_r+0xba>
 800954c:	1961      	adds	r1, r4, r5
 800954e:	42a3      	cmp	r3, r4
 8009550:	6025      	str	r5, [r4, #0]
 8009552:	bf18      	it	ne
 8009554:	6059      	strne	r1, [r3, #4]
 8009556:	6863      	ldr	r3, [r4, #4]
 8009558:	bf08      	it	eq
 800955a:	6031      	streq	r1, [r6, #0]
 800955c:	5162      	str	r2, [r4, r5]
 800955e:	604b      	str	r3, [r1, #4]
 8009560:	4638      	mov	r0, r7
 8009562:	f104 060b 	add.w	r6, r4, #11
 8009566:	f003 fa85 	bl	800ca74 <__malloc_unlock>
 800956a:	f026 0607 	bic.w	r6, r6, #7
 800956e:	1d23      	adds	r3, r4, #4
 8009570:	1af2      	subs	r2, r6, r3
 8009572:	d0b6      	beq.n	80094e2 <_malloc_r+0x22>
 8009574:	1b9b      	subs	r3, r3, r6
 8009576:	50a3      	str	r3, [r4, r2]
 8009578:	e7b3      	b.n	80094e2 <_malloc_r+0x22>
 800957a:	6862      	ldr	r2, [r4, #4]
 800957c:	42a3      	cmp	r3, r4
 800957e:	bf0c      	ite	eq
 8009580:	6032      	streq	r2, [r6, #0]
 8009582:	605a      	strne	r2, [r3, #4]
 8009584:	e7ec      	b.n	8009560 <_malloc_r+0xa0>
 8009586:	4623      	mov	r3, r4
 8009588:	6864      	ldr	r4, [r4, #4]
 800958a:	e7b2      	b.n	80094f2 <_malloc_r+0x32>
 800958c:	4634      	mov	r4, r6
 800958e:	6876      	ldr	r6, [r6, #4]
 8009590:	e7b9      	b.n	8009506 <_malloc_r+0x46>
 8009592:	230c      	movs	r3, #12
 8009594:	603b      	str	r3, [r7, #0]
 8009596:	4638      	mov	r0, r7
 8009598:	f003 fa6c 	bl	800ca74 <__malloc_unlock>
 800959c:	e7a1      	b.n	80094e2 <_malloc_r+0x22>
 800959e:	6025      	str	r5, [r4, #0]
 80095a0:	e7de      	b.n	8009560 <_malloc_r+0xa0>
 80095a2:	bf00      	nop
 80095a4:	20005cf4 	.word	0x20005cf4

080095a8 <__cvt>:
 80095a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095ac:	ec55 4b10 	vmov	r4, r5, d0
 80095b0:	2d00      	cmp	r5, #0
 80095b2:	460e      	mov	r6, r1
 80095b4:	4619      	mov	r1, r3
 80095b6:	462b      	mov	r3, r5
 80095b8:	bfbb      	ittet	lt
 80095ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80095be:	461d      	movlt	r5, r3
 80095c0:	2300      	movge	r3, #0
 80095c2:	232d      	movlt	r3, #45	; 0x2d
 80095c4:	700b      	strb	r3, [r1, #0]
 80095c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80095cc:	4691      	mov	r9, r2
 80095ce:	f023 0820 	bic.w	r8, r3, #32
 80095d2:	bfbc      	itt	lt
 80095d4:	4622      	movlt	r2, r4
 80095d6:	4614      	movlt	r4, r2
 80095d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095dc:	d005      	beq.n	80095ea <__cvt+0x42>
 80095de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80095e2:	d100      	bne.n	80095e6 <__cvt+0x3e>
 80095e4:	3601      	adds	r6, #1
 80095e6:	2102      	movs	r1, #2
 80095e8:	e000      	b.n	80095ec <__cvt+0x44>
 80095ea:	2103      	movs	r1, #3
 80095ec:	ab03      	add	r3, sp, #12
 80095ee:	9301      	str	r3, [sp, #4]
 80095f0:	ab02      	add	r3, sp, #8
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	ec45 4b10 	vmov	d0, r4, r5
 80095f8:	4653      	mov	r3, sl
 80095fa:	4632      	mov	r2, r6
 80095fc:	f001 ff6c 	bl	800b4d8 <_dtoa_r>
 8009600:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009604:	4607      	mov	r7, r0
 8009606:	d102      	bne.n	800960e <__cvt+0x66>
 8009608:	f019 0f01 	tst.w	r9, #1
 800960c:	d022      	beq.n	8009654 <__cvt+0xac>
 800960e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009612:	eb07 0906 	add.w	r9, r7, r6
 8009616:	d110      	bne.n	800963a <__cvt+0x92>
 8009618:	783b      	ldrb	r3, [r7, #0]
 800961a:	2b30      	cmp	r3, #48	; 0x30
 800961c:	d10a      	bne.n	8009634 <__cvt+0x8c>
 800961e:	2200      	movs	r2, #0
 8009620:	2300      	movs	r3, #0
 8009622:	4620      	mov	r0, r4
 8009624:	4629      	mov	r1, r5
 8009626:	f7f7 fa4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800962a:	b918      	cbnz	r0, 8009634 <__cvt+0x8c>
 800962c:	f1c6 0601 	rsb	r6, r6, #1
 8009630:	f8ca 6000 	str.w	r6, [sl]
 8009634:	f8da 3000 	ldr.w	r3, [sl]
 8009638:	4499      	add	r9, r3
 800963a:	2200      	movs	r2, #0
 800963c:	2300      	movs	r3, #0
 800963e:	4620      	mov	r0, r4
 8009640:	4629      	mov	r1, r5
 8009642:	f7f7 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8009646:	b108      	cbz	r0, 800964c <__cvt+0xa4>
 8009648:	f8cd 900c 	str.w	r9, [sp, #12]
 800964c:	2230      	movs	r2, #48	; 0x30
 800964e:	9b03      	ldr	r3, [sp, #12]
 8009650:	454b      	cmp	r3, r9
 8009652:	d307      	bcc.n	8009664 <__cvt+0xbc>
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009658:	1bdb      	subs	r3, r3, r7
 800965a:	4638      	mov	r0, r7
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	b004      	add	sp, #16
 8009660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009664:	1c59      	adds	r1, r3, #1
 8009666:	9103      	str	r1, [sp, #12]
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	e7f0      	b.n	800964e <__cvt+0xa6>

0800966c <__exponent>:
 800966c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800966e:	4603      	mov	r3, r0
 8009670:	2900      	cmp	r1, #0
 8009672:	bfb8      	it	lt
 8009674:	4249      	neglt	r1, r1
 8009676:	f803 2b02 	strb.w	r2, [r3], #2
 800967a:	bfb4      	ite	lt
 800967c:	222d      	movlt	r2, #45	; 0x2d
 800967e:	222b      	movge	r2, #43	; 0x2b
 8009680:	2909      	cmp	r1, #9
 8009682:	7042      	strb	r2, [r0, #1]
 8009684:	dd2a      	ble.n	80096dc <__exponent+0x70>
 8009686:	f10d 0407 	add.w	r4, sp, #7
 800968a:	46a4      	mov	ip, r4
 800968c:	270a      	movs	r7, #10
 800968e:	46a6      	mov	lr, r4
 8009690:	460a      	mov	r2, r1
 8009692:	fb91 f6f7 	sdiv	r6, r1, r7
 8009696:	fb07 1516 	mls	r5, r7, r6, r1
 800969a:	3530      	adds	r5, #48	; 0x30
 800969c:	2a63      	cmp	r2, #99	; 0x63
 800969e:	f104 34ff 	add.w	r4, r4, #4294967295
 80096a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80096a6:	4631      	mov	r1, r6
 80096a8:	dcf1      	bgt.n	800968e <__exponent+0x22>
 80096aa:	3130      	adds	r1, #48	; 0x30
 80096ac:	f1ae 0502 	sub.w	r5, lr, #2
 80096b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80096b4:	1c44      	adds	r4, r0, #1
 80096b6:	4629      	mov	r1, r5
 80096b8:	4561      	cmp	r1, ip
 80096ba:	d30a      	bcc.n	80096d2 <__exponent+0x66>
 80096bc:	f10d 0209 	add.w	r2, sp, #9
 80096c0:	eba2 020e 	sub.w	r2, r2, lr
 80096c4:	4565      	cmp	r5, ip
 80096c6:	bf88      	it	hi
 80096c8:	2200      	movhi	r2, #0
 80096ca:	4413      	add	r3, r2
 80096cc:	1a18      	subs	r0, r3, r0
 80096ce:	b003      	add	sp, #12
 80096d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80096da:	e7ed      	b.n	80096b8 <__exponent+0x4c>
 80096dc:	2330      	movs	r3, #48	; 0x30
 80096de:	3130      	adds	r1, #48	; 0x30
 80096e0:	7083      	strb	r3, [r0, #2]
 80096e2:	70c1      	strb	r1, [r0, #3]
 80096e4:	1d03      	adds	r3, r0, #4
 80096e6:	e7f1      	b.n	80096cc <__exponent+0x60>

080096e8 <_printf_float>:
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	ed2d 8b02 	vpush	{d8}
 80096f0:	b08d      	sub	sp, #52	; 0x34
 80096f2:	460c      	mov	r4, r1
 80096f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80096f8:	4616      	mov	r6, r2
 80096fa:	461f      	mov	r7, r3
 80096fc:	4605      	mov	r5, r0
 80096fe:	f003 f91d 	bl	800c93c <_localeconv_r>
 8009702:	f8d0 a000 	ldr.w	sl, [r0]
 8009706:	4650      	mov	r0, sl
 8009708:	f7f6 fd62 	bl	80001d0 <strlen>
 800970c:	2300      	movs	r3, #0
 800970e:	930a      	str	r3, [sp, #40]	; 0x28
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	9305      	str	r3, [sp, #20]
 8009714:	f8d8 3000 	ldr.w	r3, [r8]
 8009718:	f894 b018 	ldrb.w	fp, [r4, #24]
 800971c:	3307      	adds	r3, #7
 800971e:	f023 0307 	bic.w	r3, r3, #7
 8009722:	f103 0208 	add.w	r2, r3, #8
 8009726:	f8c8 2000 	str.w	r2, [r8]
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009732:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009736:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800973a:	9307      	str	r3, [sp, #28]
 800973c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009740:	ee08 0a10 	vmov	s16, r0
 8009744:	4b9f      	ldr	r3, [pc, #636]	; (80099c4 <_printf_float+0x2dc>)
 8009746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800974a:	f04f 32ff 	mov.w	r2, #4294967295
 800974e:	f7f7 f9ed 	bl	8000b2c <__aeabi_dcmpun>
 8009752:	bb88      	cbnz	r0, 80097b8 <_printf_float+0xd0>
 8009754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009758:	4b9a      	ldr	r3, [pc, #616]	; (80099c4 <_printf_float+0x2dc>)
 800975a:	f04f 32ff 	mov.w	r2, #4294967295
 800975e:	f7f7 f9c7 	bl	8000af0 <__aeabi_dcmple>
 8009762:	bb48      	cbnz	r0, 80097b8 <_printf_float+0xd0>
 8009764:	2200      	movs	r2, #0
 8009766:	2300      	movs	r3, #0
 8009768:	4640      	mov	r0, r8
 800976a:	4649      	mov	r1, r9
 800976c:	f7f7 f9b6 	bl	8000adc <__aeabi_dcmplt>
 8009770:	b110      	cbz	r0, 8009778 <_printf_float+0x90>
 8009772:	232d      	movs	r3, #45	; 0x2d
 8009774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009778:	4b93      	ldr	r3, [pc, #588]	; (80099c8 <_printf_float+0x2e0>)
 800977a:	4894      	ldr	r0, [pc, #592]	; (80099cc <_printf_float+0x2e4>)
 800977c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009780:	bf94      	ite	ls
 8009782:	4698      	movls	r8, r3
 8009784:	4680      	movhi	r8, r0
 8009786:	2303      	movs	r3, #3
 8009788:	6123      	str	r3, [r4, #16]
 800978a:	9b05      	ldr	r3, [sp, #20]
 800978c:	f023 0204 	bic.w	r2, r3, #4
 8009790:	6022      	str	r2, [r4, #0]
 8009792:	f04f 0900 	mov.w	r9, #0
 8009796:	9700      	str	r7, [sp, #0]
 8009798:	4633      	mov	r3, r6
 800979a:	aa0b      	add	r2, sp, #44	; 0x2c
 800979c:	4621      	mov	r1, r4
 800979e:	4628      	mov	r0, r5
 80097a0:	f000 f9d8 	bl	8009b54 <_printf_common>
 80097a4:	3001      	adds	r0, #1
 80097a6:	f040 8090 	bne.w	80098ca <_printf_float+0x1e2>
 80097aa:	f04f 30ff 	mov.w	r0, #4294967295
 80097ae:	b00d      	add	sp, #52	; 0x34
 80097b0:	ecbd 8b02 	vpop	{d8}
 80097b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b8:	4642      	mov	r2, r8
 80097ba:	464b      	mov	r3, r9
 80097bc:	4640      	mov	r0, r8
 80097be:	4649      	mov	r1, r9
 80097c0:	f7f7 f9b4 	bl	8000b2c <__aeabi_dcmpun>
 80097c4:	b140      	cbz	r0, 80097d8 <_printf_float+0xf0>
 80097c6:	464b      	mov	r3, r9
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	bfbc      	itt	lt
 80097cc:	232d      	movlt	r3, #45	; 0x2d
 80097ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80097d2:	487f      	ldr	r0, [pc, #508]	; (80099d0 <_printf_float+0x2e8>)
 80097d4:	4b7f      	ldr	r3, [pc, #508]	; (80099d4 <_printf_float+0x2ec>)
 80097d6:	e7d1      	b.n	800977c <_printf_float+0x94>
 80097d8:	6863      	ldr	r3, [r4, #4]
 80097da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80097de:	9206      	str	r2, [sp, #24]
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	d13f      	bne.n	8009864 <_printf_float+0x17c>
 80097e4:	2306      	movs	r3, #6
 80097e6:	6063      	str	r3, [r4, #4]
 80097e8:	9b05      	ldr	r3, [sp, #20]
 80097ea:	6861      	ldr	r1, [r4, #4]
 80097ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80097f0:	2300      	movs	r3, #0
 80097f2:	9303      	str	r3, [sp, #12]
 80097f4:	ab0a      	add	r3, sp, #40	; 0x28
 80097f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80097fa:	ab09      	add	r3, sp, #36	; 0x24
 80097fc:	ec49 8b10 	vmov	d0, r8, r9
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	6022      	str	r2, [r4, #0]
 8009804:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009808:	4628      	mov	r0, r5
 800980a:	f7ff fecd 	bl	80095a8 <__cvt>
 800980e:	9b06      	ldr	r3, [sp, #24]
 8009810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009812:	2b47      	cmp	r3, #71	; 0x47
 8009814:	4680      	mov	r8, r0
 8009816:	d108      	bne.n	800982a <_printf_float+0x142>
 8009818:	1cc8      	adds	r0, r1, #3
 800981a:	db02      	blt.n	8009822 <_printf_float+0x13a>
 800981c:	6863      	ldr	r3, [r4, #4]
 800981e:	4299      	cmp	r1, r3
 8009820:	dd41      	ble.n	80098a6 <_printf_float+0x1be>
 8009822:	f1ab 0b02 	sub.w	fp, fp, #2
 8009826:	fa5f fb8b 	uxtb.w	fp, fp
 800982a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800982e:	d820      	bhi.n	8009872 <_printf_float+0x18a>
 8009830:	3901      	subs	r1, #1
 8009832:	465a      	mov	r2, fp
 8009834:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009838:	9109      	str	r1, [sp, #36]	; 0x24
 800983a:	f7ff ff17 	bl	800966c <__exponent>
 800983e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009840:	1813      	adds	r3, r2, r0
 8009842:	2a01      	cmp	r2, #1
 8009844:	4681      	mov	r9, r0
 8009846:	6123      	str	r3, [r4, #16]
 8009848:	dc02      	bgt.n	8009850 <_printf_float+0x168>
 800984a:	6822      	ldr	r2, [r4, #0]
 800984c:	07d2      	lsls	r2, r2, #31
 800984e:	d501      	bpl.n	8009854 <_printf_float+0x16c>
 8009850:	3301      	adds	r3, #1
 8009852:	6123      	str	r3, [r4, #16]
 8009854:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009858:	2b00      	cmp	r3, #0
 800985a:	d09c      	beq.n	8009796 <_printf_float+0xae>
 800985c:	232d      	movs	r3, #45	; 0x2d
 800985e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009862:	e798      	b.n	8009796 <_printf_float+0xae>
 8009864:	9a06      	ldr	r2, [sp, #24]
 8009866:	2a47      	cmp	r2, #71	; 0x47
 8009868:	d1be      	bne.n	80097e8 <_printf_float+0x100>
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1bc      	bne.n	80097e8 <_printf_float+0x100>
 800986e:	2301      	movs	r3, #1
 8009870:	e7b9      	b.n	80097e6 <_printf_float+0xfe>
 8009872:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009876:	d118      	bne.n	80098aa <_printf_float+0x1c2>
 8009878:	2900      	cmp	r1, #0
 800987a:	6863      	ldr	r3, [r4, #4]
 800987c:	dd0b      	ble.n	8009896 <_printf_float+0x1ae>
 800987e:	6121      	str	r1, [r4, #16]
 8009880:	b913      	cbnz	r3, 8009888 <_printf_float+0x1a0>
 8009882:	6822      	ldr	r2, [r4, #0]
 8009884:	07d0      	lsls	r0, r2, #31
 8009886:	d502      	bpl.n	800988e <_printf_float+0x1a6>
 8009888:	3301      	adds	r3, #1
 800988a:	440b      	add	r3, r1
 800988c:	6123      	str	r3, [r4, #16]
 800988e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009890:	f04f 0900 	mov.w	r9, #0
 8009894:	e7de      	b.n	8009854 <_printf_float+0x16c>
 8009896:	b913      	cbnz	r3, 800989e <_printf_float+0x1b6>
 8009898:	6822      	ldr	r2, [r4, #0]
 800989a:	07d2      	lsls	r2, r2, #31
 800989c:	d501      	bpl.n	80098a2 <_printf_float+0x1ba>
 800989e:	3302      	adds	r3, #2
 80098a0:	e7f4      	b.n	800988c <_printf_float+0x1a4>
 80098a2:	2301      	movs	r3, #1
 80098a4:	e7f2      	b.n	800988c <_printf_float+0x1a4>
 80098a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80098aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ac:	4299      	cmp	r1, r3
 80098ae:	db05      	blt.n	80098bc <_printf_float+0x1d4>
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	6121      	str	r1, [r4, #16]
 80098b4:	07d8      	lsls	r0, r3, #31
 80098b6:	d5ea      	bpl.n	800988e <_printf_float+0x1a6>
 80098b8:	1c4b      	adds	r3, r1, #1
 80098ba:	e7e7      	b.n	800988c <_printf_float+0x1a4>
 80098bc:	2900      	cmp	r1, #0
 80098be:	bfd4      	ite	le
 80098c0:	f1c1 0202 	rsble	r2, r1, #2
 80098c4:	2201      	movgt	r2, #1
 80098c6:	4413      	add	r3, r2
 80098c8:	e7e0      	b.n	800988c <_printf_float+0x1a4>
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	055a      	lsls	r2, r3, #21
 80098ce:	d407      	bmi.n	80098e0 <_printf_float+0x1f8>
 80098d0:	6923      	ldr	r3, [r4, #16]
 80098d2:	4642      	mov	r2, r8
 80098d4:	4631      	mov	r1, r6
 80098d6:	4628      	mov	r0, r5
 80098d8:	47b8      	blx	r7
 80098da:	3001      	adds	r0, #1
 80098dc:	d12c      	bne.n	8009938 <_printf_float+0x250>
 80098de:	e764      	b.n	80097aa <_printf_float+0xc2>
 80098e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098e4:	f240 80e0 	bls.w	8009aa8 <_printf_float+0x3c0>
 80098e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098ec:	2200      	movs	r2, #0
 80098ee:	2300      	movs	r3, #0
 80098f0:	f7f7 f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	d034      	beq.n	8009962 <_printf_float+0x27a>
 80098f8:	4a37      	ldr	r2, [pc, #220]	; (80099d8 <_printf_float+0x2f0>)
 80098fa:	2301      	movs	r3, #1
 80098fc:	4631      	mov	r1, r6
 80098fe:	4628      	mov	r0, r5
 8009900:	47b8      	blx	r7
 8009902:	3001      	adds	r0, #1
 8009904:	f43f af51 	beq.w	80097aa <_printf_float+0xc2>
 8009908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800990c:	429a      	cmp	r2, r3
 800990e:	db02      	blt.n	8009916 <_printf_float+0x22e>
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	07d8      	lsls	r0, r3, #31
 8009914:	d510      	bpl.n	8009938 <_printf_float+0x250>
 8009916:	ee18 3a10 	vmov	r3, s16
 800991a:	4652      	mov	r2, sl
 800991c:	4631      	mov	r1, r6
 800991e:	4628      	mov	r0, r5
 8009920:	47b8      	blx	r7
 8009922:	3001      	adds	r0, #1
 8009924:	f43f af41 	beq.w	80097aa <_printf_float+0xc2>
 8009928:	f04f 0800 	mov.w	r8, #0
 800992c:	f104 091a 	add.w	r9, r4, #26
 8009930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009932:	3b01      	subs	r3, #1
 8009934:	4543      	cmp	r3, r8
 8009936:	dc09      	bgt.n	800994c <_printf_float+0x264>
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	079b      	lsls	r3, r3, #30
 800993c:	f100 8105 	bmi.w	8009b4a <_printf_float+0x462>
 8009940:	68e0      	ldr	r0, [r4, #12]
 8009942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009944:	4298      	cmp	r0, r3
 8009946:	bfb8      	it	lt
 8009948:	4618      	movlt	r0, r3
 800994a:	e730      	b.n	80097ae <_printf_float+0xc6>
 800994c:	2301      	movs	r3, #1
 800994e:	464a      	mov	r2, r9
 8009950:	4631      	mov	r1, r6
 8009952:	4628      	mov	r0, r5
 8009954:	47b8      	blx	r7
 8009956:	3001      	adds	r0, #1
 8009958:	f43f af27 	beq.w	80097aa <_printf_float+0xc2>
 800995c:	f108 0801 	add.w	r8, r8, #1
 8009960:	e7e6      	b.n	8009930 <_printf_float+0x248>
 8009962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009964:	2b00      	cmp	r3, #0
 8009966:	dc39      	bgt.n	80099dc <_printf_float+0x2f4>
 8009968:	4a1b      	ldr	r2, [pc, #108]	; (80099d8 <_printf_float+0x2f0>)
 800996a:	2301      	movs	r3, #1
 800996c:	4631      	mov	r1, r6
 800996e:	4628      	mov	r0, r5
 8009970:	47b8      	blx	r7
 8009972:	3001      	adds	r0, #1
 8009974:	f43f af19 	beq.w	80097aa <_printf_float+0xc2>
 8009978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800997c:	4313      	orrs	r3, r2
 800997e:	d102      	bne.n	8009986 <_printf_float+0x29e>
 8009980:	6823      	ldr	r3, [r4, #0]
 8009982:	07d9      	lsls	r1, r3, #31
 8009984:	d5d8      	bpl.n	8009938 <_printf_float+0x250>
 8009986:	ee18 3a10 	vmov	r3, s16
 800998a:	4652      	mov	r2, sl
 800998c:	4631      	mov	r1, r6
 800998e:	4628      	mov	r0, r5
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	f43f af09 	beq.w	80097aa <_printf_float+0xc2>
 8009998:	f04f 0900 	mov.w	r9, #0
 800999c:	f104 0a1a 	add.w	sl, r4, #26
 80099a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a2:	425b      	negs	r3, r3
 80099a4:	454b      	cmp	r3, r9
 80099a6:	dc01      	bgt.n	80099ac <_printf_float+0x2c4>
 80099a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099aa:	e792      	b.n	80098d2 <_printf_float+0x1ea>
 80099ac:	2301      	movs	r3, #1
 80099ae:	4652      	mov	r2, sl
 80099b0:	4631      	mov	r1, r6
 80099b2:	4628      	mov	r0, r5
 80099b4:	47b8      	blx	r7
 80099b6:	3001      	adds	r0, #1
 80099b8:	f43f aef7 	beq.w	80097aa <_printf_float+0xc2>
 80099bc:	f109 0901 	add.w	r9, r9, #1
 80099c0:	e7ee      	b.n	80099a0 <_printf_float+0x2b8>
 80099c2:	bf00      	nop
 80099c4:	7fefffff 	.word	0x7fefffff
 80099c8:	0800dd90 	.word	0x0800dd90
 80099cc:	0800dd94 	.word	0x0800dd94
 80099d0:	0800dd9c 	.word	0x0800dd9c
 80099d4:	0800dd98 	.word	0x0800dd98
 80099d8:	0800dda0 	.word	0x0800dda0
 80099dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099e0:	429a      	cmp	r2, r3
 80099e2:	bfa8      	it	ge
 80099e4:	461a      	movge	r2, r3
 80099e6:	2a00      	cmp	r2, #0
 80099e8:	4691      	mov	r9, r2
 80099ea:	dc37      	bgt.n	8009a5c <_printf_float+0x374>
 80099ec:	f04f 0b00 	mov.w	fp, #0
 80099f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099f4:	f104 021a 	add.w	r2, r4, #26
 80099f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099fa:	9305      	str	r3, [sp, #20]
 80099fc:	eba3 0309 	sub.w	r3, r3, r9
 8009a00:	455b      	cmp	r3, fp
 8009a02:	dc33      	bgt.n	8009a6c <_printf_float+0x384>
 8009a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	db3b      	blt.n	8009a84 <_printf_float+0x39c>
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	07da      	lsls	r2, r3, #31
 8009a10:	d438      	bmi.n	8009a84 <_printf_float+0x39c>
 8009a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a14:	9a05      	ldr	r2, [sp, #20]
 8009a16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a18:	1a9a      	subs	r2, r3, r2
 8009a1a:	eba3 0901 	sub.w	r9, r3, r1
 8009a1e:	4591      	cmp	r9, r2
 8009a20:	bfa8      	it	ge
 8009a22:	4691      	movge	r9, r2
 8009a24:	f1b9 0f00 	cmp.w	r9, #0
 8009a28:	dc35      	bgt.n	8009a96 <_printf_float+0x3ae>
 8009a2a:	f04f 0800 	mov.w	r8, #0
 8009a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a32:	f104 0a1a 	add.w	sl, r4, #26
 8009a36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a3a:	1a9b      	subs	r3, r3, r2
 8009a3c:	eba3 0309 	sub.w	r3, r3, r9
 8009a40:	4543      	cmp	r3, r8
 8009a42:	f77f af79 	ble.w	8009938 <_printf_float+0x250>
 8009a46:	2301      	movs	r3, #1
 8009a48:	4652      	mov	r2, sl
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	47b8      	blx	r7
 8009a50:	3001      	adds	r0, #1
 8009a52:	f43f aeaa 	beq.w	80097aa <_printf_float+0xc2>
 8009a56:	f108 0801 	add.w	r8, r8, #1
 8009a5a:	e7ec      	b.n	8009a36 <_printf_float+0x34e>
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	4631      	mov	r1, r6
 8009a60:	4642      	mov	r2, r8
 8009a62:	4628      	mov	r0, r5
 8009a64:	47b8      	blx	r7
 8009a66:	3001      	adds	r0, #1
 8009a68:	d1c0      	bne.n	80099ec <_printf_float+0x304>
 8009a6a:	e69e      	b.n	80097aa <_printf_float+0xc2>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4628      	mov	r0, r5
 8009a72:	9205      	str	r2, [sp, #20]
 8009a74:	47b8      	blx	r7
 8009a76:	3001      	adds	r0, #1
 8009a78:	f43f ae97 	beq.w	80097aa <_printf_float+0xc2>
 8009a7c:	9a05      	ldr	r2, [sp, #20]
 8009a7e:	f10b 0b01 	add.w	fp, fp, #1
 8009a82:	e7b9      	b.n	80099f8 <_printf_float+0x310>
 8009a84:	ee18 3a10 	vmov	r3, s16
 8009a88:	4652      	mov	r2, sl
 8009a8a:	4631      	mov	r1, r6
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	47b8      	blx	r7
 8009a90:	3001      	adds	r0, #1
 8009a92:	d1be      	bne.n	8009a12 <_printf_float+0x32a>
 8009a94:	e689      	b.n	80097aa <_printf_float+0xc2>
 8009a96:	9a05      	ldr	r2, [sp, #20]
 8009a98:	464b      	mov	r3, r9
 8009a9a:	4442      	add	r2, r8
 8009a9c:	4631      	mov	r1, r6
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	47b8      	blx	r7
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	d1c1      	bne.n	8009a2a <_printf_float+0x342>
 8009aa6:	e680      	b.n	80097aa <_printf_float+0xc2>
 8009aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aaa:	2a01      	cmp	r2, #1
 8009aac:	dc01      	bgt.n	8009ab2 <_printf_float+0x3ca>
 8009aae:	07db      	lsls	r3, r3, #31
 8009ab0:	d538      	bpl.n	8009b24 <_printf_float+0x43c>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	4642      	mov	r2, r8
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4628      	mov	r0, r5
 8009aba:	47b8      	blx	r7
 8009abc:	3001      	adds	r0, #1
 8009abe:	f43f ae74 	beq.w	80097aa <_printf_float+0xc2>
 8009ac2:	ee18 3a10 	vmov	r3, s16
 8009ac6:	4652      	mov	r2, sl
 8009ac8:	4631      	mov	r1, r6
 8009aca:	4628      	mov	r0, r5
 8009acc:	47b8      	blx	r7
 8009ace:	3001      	adds	r0, #1
 8009ad0:	f43f ae6b 	beq.w	80097aa <_printf_float+0xc2>
 8009ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2300      	movs	r3, #0
 8009adc:	f7f6 fff4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ae0:	b9d8      	cbnz	r0, 8009b1a <_printf_float+0x432>
 8009ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ae4:	f108 0201 	add.w	r2, r8, #1
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	4631      	mov	r1, r6
 8009aec:	4628      	mov	r0, r5
 8009aee:	47b8      	blx	r7
 8009af0:	3001      	adds	r0, #1
 8009af2:	d10e      	bne.n	8009b12 <_printf_float+0x42a>
 8009af4:	e659      	b.n	80097aa <_printf_float+0xc2>
 8009af6:	2301      	movs	r3, #1
 8009af8:	4652      	mov	r2, sl
 8009afa:	4631      	mov	r1, r6
 8009afc:	4628      	mov	r0, r5
 8009afe:	47b8      	blx	r7
 8009b00:	3001      	adds	r0, #1
 8009b02:	f43f ae52 	beq.w	80097aa <_printf_float+0xc2>
 8009b06:	f108 0801 	add.w	r8, r8, #1
 8009b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	4543      	cmp	r3, r8
 8009b10:	dcf1      	bgt.n	8009af6 <_printf_float+0x40e>
 8009b12:	464b      	mov	r3, r9
 8009b14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b18:	e6dc      	b.n	80098d4 <_printf_float+0x1ec>
 8009b1a:	f04f 0800 	mov.w	r8, #0
 8009b1e:	f104 0a1a 	add.w	sl, r4, #26
 8009b22:	e7f2      	b.n	8009b0a <_printf_float+0x422>
 8009b24:	2301      	movs	r3, #1
 8009b26:	4642      	mov	r2, r8
 8009b28:	e7df      	b.n	8009aea <_printf_float+0x402>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	464a      	mov	r2, r9
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4628      	mov	r0, r5
 8009b32:	47b8      	blx	r7
 8009b34:	3001      	adds	r0, #1
 8009b36:	f43f ae38 	beq.w	80097aa <_printf_float+0xc2>
 8009b3a:	f108 0801 	add.w	r8, r8, #1
 8009b3e:	68e3      	ldr	r3, [r4, #12]
 8009b40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b42:	1a5b      	subs	r3, r3, r1
 8009b44:	4543      	cmp	r3, r8
 8009b46:	dcf0      	bgt.n	8009b2a <_printf_float+0x442>
 8009b48:	e6fa      	b.n	8009940 <_printf_float+0x258>
 8009b4a:	f04f 0800 	mov.w	r8, #0
 8009b4e:	f104 0919 	add.w	r9, r4, #25
 8009b52:	e7f4      	b.n	8009b3e <_printf_float+0x456>

08009b54 <_printf_common>:
 8009b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b58:	4616      	mov	r6, r2
 8009b5a:	4699      	mov	r9, r3
 8009b5c:	688a      	ldr	r2, [r1, #8]
 8009b5e:	690b      	ldr	r3, [r1, #16]
 8009b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b64:	4293      	cmp	r3, r2
 8009b66:	bfb8      	it	lt
 8009b68:	4613      	movlt	r3, r2
 8009b6a:	6033      	str	r3, [r6, #0]
 8009b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b70:	4607      	mov	r7, r0
 8009b72:	460c      	mov	r4, r1
 8009b74:	b10a      	cbz	r2, 8009b7a <_printf_common+0x26>
 8009b76:	3301      	adds	r3, #1
 8009b78:	6033      	str	r3, [r6, #0]
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	0699      	lsls	r1, r3, #26
 8009b7e:	bf42      	ittt	mi
 8009b80:	6833      	ldrmi	r3, [r6, #0]
 8009b82:	3302      	addmi	r3, #2
 8009b84:	6033      	strmi	r3, [r6, #0]
 8009b86:	6825      	ldr	r5, [r4, #0]
 8009b88:	f015 0506 	ands.w	r5, r5, #6
 8009b8c:	d106      	bne.n	8009b9c <_printf_common+0x48>
 8009b8e:	f104 0a19 	add.w	sl, r4, #25
 8009b92:	68e3      	ldr	r3, [r4, #12]
 8009b94:	6832      	ldr	r2, [r6, #0]
 8009b96:	1a9b      	subs	r3, r3, r2
 8009b98:	42ab      	cmp	r3, r5
 8009b9a:	dc26      	bgt.n	8009bea <_printf_common+0x96>
 8009b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ba0:	1e13      	subs	r3, r2, #0
 8009ba2:	6822      	ldr	r2, [r4, #0]
 8009ba4:	bf18      	it	ne
 8009ba6:	2301      	movne	r3, #1
 8009ba8:	0692      	lsls	r2, r2, #26
 8009baa:	d42b      	bmi.n	8009c04 <_printf_common+0xb0>
 8009bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	4638      	mov	r0, r7
 8009bb4:	47c0      	blx	r8
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	d01e      	beq.n	8009bf8 <_printf_common+0xa4>
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	68e5      	ldr	r5, [r4, #12]
 8009bbe:	6832      	ldr	r2, [r6, #0]
 8009bc0:	f003 0306 	and.w	r3, r3, #6
 8009bc4:	2b04      	cmp	r3, #4
 8009bc6:	bf08      	it	eq
 8009bc8:	1aad      	subeq	r5, r5, r2
 8009bca:	68a3      	ldr	r3, [r4, #8]
 8009bcc:	6922      	ldr	r2, [r4, #16]
 8009bce:	bf0c      	ite	eq
 8009bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bd4:	2500      	movne	r5, #0
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	bfc4      	itt	gt
 8009bda:	1a9b      	subgt	r3, r3, r2
 8009bdc:	18ed      	addgt	r5, r5, r3
 8009bde:	2600      	movs	r6, #0
 8009be0:	341a      	adds	r4, #26
 8009be2:	42b5      	cmp	r5, r6
 8009be4:	d11a      	bne.n	8009c1c <_printf_common+0xc8>
 8009be6:	2000      	movs	r0, #0
 8009be8:	e008      	b.n	8009bfc <_printf_common+0xa8>
 8009bea:	2301      	movs	r3, #1
 8009bec:	4652      	mov	r2, sl
 8009bee:	4649      	mov	r1, r9
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	47c0      	blx	r8
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d103      	bne.n	8009c00 <_printf_common+0xac>
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c00:	3501      	adds	r5, #1
 8009c02:	e7c6      	b.n	8009b92 <_printf_common+0x3e>
 8009c04:	18e1      	adds	r1, r4, r3
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	2030      	movs	r0, #48	; 0x30
 8009c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c0e:	4422      	add	r2, r4
 8009c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c18:	3302      	adds	r3, #2
 8009c1a:	e7c7      	b.n	8009bac <_printf_common+0x58>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	4622      	mov	r2, r4
 8009c20:	4649      	mov	r1, r9
 8009c22:	4638      	mov	r0, r7
 8009c24:	47c0      	blx	r8
 8009c26:	3001      	adds	r0, #1
 8009c28:	d0e6      	beq.n	8009bf8 <_printf_common+0xa4>
 8009c2a:	3601      	adds	r6, #1
 8009c2c:	e7d9      	b.n	8009be2 <_printf_common+0x8e>
	...

08009c30 <_printf_i>:
 8009c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c34:	7e0f      	ldrb	r7, [r1, #24]
 8009c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c38:	2f78      	cmp	r7, #120	; 0x78
 8009c3a:	4691      	mov	r9, r2
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	460c      	mov	r4, r1
 8009c40:	469a      	mov	sl, r3
 8009c42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c46:	d807      	bhi.n	8009c58 <_printf_i+0x28>
 8009c48:	2f62      	cmp	r7, #98	; 0x62
 8009c4a:	d80a      	bhi.n	8009c62 <_printf_i+0x32>
 8009c4c:	2f00      	cmp	r7, #0
 8009c4e:	f000 80d8 	beq.w	8009e02 <_printf_i+0x1d2>
 8009c52:	2f58      	cmp	r7, #88	; 0x58
 8009c54:	f000 80a3 	beq.w	8009d9e <_printf_i+0x16e>
 8009c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c60:	e03a      	b.n	8009cd8 <_printf_i+0xa8>
 8009c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c66:	2b15      	cmp	r3, #21
 8009c68:	d8f6      	bhi.n	8009c58 <_printf_i+0x28>
 8009c6a:	a101      	add	r1, pc, #4	; (adr r1, 8009c70 <_printf_i+0x40>)
 8009c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c70:	08009cc9 	.word	0x08009cc9
 8009c74:	08009cdd 	.word	0x08009cdd
 8009c78:	08009c59 	.word	0x08009c59
 8009c7c:	08009c59 	.word	0x08009c59
 8009c80:	08009c59 	.word	0x08009c59
 8009c84:	08009c59 	.word	0x08009c59
 8009c88:	08009cdd 	.word	0x08009cdd
 8009c8c:	08009c59 	.word	0x08009c59
 8009c90:	08009c59 	.word	0x08009c59
 8009c94:	08009c59 	.word	0x08009c59
 8009c98:	08009c59 	.word	0x08009c59
 8009c9c:	08009de9 	.word	0x08009de9
 8009ca0:	08009d0d 	.word	0x08009d0d
 8009ca4:	08009dcb 	.word	0x08009dcb
 8009ca8:	08009c59 	.word	0x08009c59
 8009cac:	08009c59 	.word	0x08009c59
 8009cb0:	08009e0b 	.word	0x08009e0b
 8009cb4:	08009c59 	.word	0x08009c59
 8009cb8:	08009d0d 	.word	0x08009d0d
 8009cbc:	08009c59 	.word	0x08009c59
 8009cc0:	08009c59 	.word	0x08009c59
 8009cc4:	08009dd3 	.word	0x08009dd3
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	1d1a      	adds	r2, r3, #4
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	602a      	str	r2, [r5, #0]
 8009cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e0a3      	b.n	8009e24 <_printf_i+0x1f4>
 8009cdc:	6820      	ldr	r0, [r4, #0]
 8009cde:	6829      	ldr	r1, [r5, #0]
 8009ce0:	0606      	lsls	r6, r0, #24
 8009ce2:	f101 0304 	add.w	r3, r1, #4
 8009ce6:	d50a      	bpl.n	8009cfe <_printf_i+0xce>
 8009ce8:	680e      	ldr	r6, [r1, #0]
 8009cea:	602b      	str	r3, [r5, #0]
 8009cec:	2e00      	cmp	r6, #0
 8009cee:	da03      	bge.n	8009cf8 <_printf_i+0xc8>
 8009cf0:	232d      	movs	r3, #45	; 0x2d
 8009cf2:	4276      	negs	r6, r6
 8009cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cf8:	485e      	ldr	r0, [pc, #376]	; (8009e74 <_printf_i+0x244>)
 8009cfa:	230a      	movs	r3, #10
 8009cfc:	e019      	b.n	8009d32 <_printf_i+0x102>
 8009cfe:	680e      	ldr	r6, [r1, #0]
 8009d00:	602b      	str	r3, [r5, #0]
 8009d02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d06:	bf18      	it	ne
 8009d08:	b236      	sxthne	r6, r6
 8009d0a:	e7ef      	b.n	8009cec <_printf_i+0xbc>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	6820      	ldr	r0, [r4, #0]
 8009d10:	1d19      	adds	r1, r3, #4
 8009d12:	6029      	str	r1, [r5, #0]
 8009d14:	0601      	lsls	r1, r0, #24
 8009d16:	d501      	bpl.n	8009d1c <_printf_i+0xec>
 8009d18:	681e      	ldr	r6, [r3, #0]
 8009d1a:	e002      	b.n	8009d22 <_printf_i+0xf2>
 8009d1c:	0646      	lsls	r6, r0, #25
 8009d1e:	d5fb      	bpl.n	8009d18 <_printf_i+0xe8>
 8009d20:	881e      	ldrh	r6, [r3, #0]
 8009d22:	4854      	ldr	r0, [pc, #336]	; (8009e74 <_printf_i+0x244>)
 8009d24:	2f6f      	cmp	r7, #111	; 0x6f
 8009d26:	bf0c      	ite	eq
 8009d28:	2308      	moveq	r3, #8
 8009d2a:	230a      	movne	r3, #10
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d32:	6865      	ldr	r5, [r4, #4]
 8009d34:	60a5      	str	r5, [r4, #8]
 8009d36:	2d00      	cmp	r5, #0
 8009d38:	bfa2      	ittt	ge
 8009d3a:	6821      	ldrge	r1, [r4, #0]
 8009d3c:	f021 0104 	bicge.w	r1, r1, #4
 8009d40:	6021      	strge	r1, [r4, #0]
 8009d42:	b90e      	cbnz	r6, 8009d48 <_printf_i+0x118>
 8009d44:	2d00      	cmp	r5, #0
 8009d46:	d04d      	beq.n	8009de4 <_printf_i+0x1b4>
 8009d48:	4615      	mov	r5, r2
 8009d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8009d52:	5dc7      	ldrb	r7, [r0, r7]
 8009d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d58:	4637      	mov	r7, r6
 8009d5a:	42bb      	cmp	r3, r7
 8009d5c:	460e      	mov	r6, r1
 8009d5e:	d9f4      	bls.n	8009d4a <_printf_i+0x11a>
 8009d60:	2b08      	cmp	r3, #8
 8009d62:	d10b      	bne.n	8009d7c <_printf_i+0x14c>
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	07de      	lsls	r6, r3, #31
 8009d68:	d508      	bpl.n	8009d7c <_printf_i+0x14c>
 8009d6a:	6923      	ldr	r3, [r4, #16]
 8009d6c:	6861      	ldr	r1, [r4, #4]
 8009d6e:	4299      	cmp	r1, r3
 8009d70:	bfde      	ittt	le
 8009d72:	2330      	movle	r3, #48	; 0x30
 8009d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d7c:	1b52      	subs	r2, r2, r5
 8009d7e:	6122      	str	r2, [r4, #16]
 8009d80:	f8cd a000 	str.w	sl, [sp]
 8009d84:	464b      	mov	r3, r9
 8009d86:	aa03      	add	r2, sp, #12
 8009d88:	4621      	mov	r1, r4
 8009d8a:	4640      	mov	r0, r8
 8009d8c:	f7ff fee2 	bl	8009b54 <_printf_common>
 8009d90:	3001      	adds	r0, #1
 8009d92:	d14c      	bne.n	8009e2e <_printf_i+0x1fe>
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295
 8009d98:	b004      	add	sp, #16
 8009d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9e:	4835      	ldr	r0, [pc, #212]	; (8009e74 <_printf_i+0x244>)
 8009da0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009da4:	6829      	ldr	r1, [r5, #0]
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009dac:	6029      	str	r1, [r5, #0]
 8009dae:	061d      	lsls	r5, r3, #24
 8009db0:	d514      	bpl.n	8009ddc <_printf_i+0x1ac>
 8009db2:	07df      	lsls	r7, r3, #31
 8009db4:	bf44      	itt	mi
 8009db6:	f043 0320 	orrmi.w	r3, r3, #32
 8009dba:	6023      	strmi	r3, [r4, #0]
 8009dbc:	b91e      	cbnz	r6, 8009dc6 <_printf_i+0x196>
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	f023 0320 	bic.w	r3, r3, #32
 8009dc4:	6023      	str	r3, [r4, #0]
 8009dc6:	2310      	movs	r3, #16
 8009dc8:	e7b0      	b.n	8009d2c <_printf_i+0xfc>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	f043 0320 	orr.w	r3, r3, #32
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	2378      	movs	r3, #120	; 0x78
 8009dd4:	4828      	ldr	r0, [pc, #160]	; (8009e78 <_printf_i+0x248>)
 8009dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dda:	e7e3      	b.n	8009da4 <_printf_i+0x174>
 8009ddc:	0659      	lsls	r1, r3, #25
 8009dde:	bf48      	it	mi
 8009de0:	b2b6      	uxthmi	r6, r6
 8009de2:	e7e6      	b.n	8009db2 <_printf_i+0x182>
 8009de4:	4615      	mov	r5, r2
 8009de6:	e7bb      	b.n	8009d60 <_printf_i+0x130>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	6826      	ldr	r6, [r4, #0]
 8009dec:	6961      	ldr	r1, [r4, #20]
 8009dee:	1d18      	adds	r0, r3, #4
 8009df0:	6028      	str	r0, [r5, #0]
 8009df2:	0635      	lsls	r5, r6, #24
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	d501      	bpl.n	8009dfc <_printf_i+0x1cc>
 8009df8:	6019      	str	r1, [r3, #0]
 8009dfa:	e002      	b.n	8009e02 <_printf_i+0x1d2>
 8009dfc:	0670      	lsls	r0, r6, #25
 8009dfe:	d5fb      	bpl.n	8009df8 <_printf_i+0x1c8>
 8009e00:	8019      	strh	r1, [r3, #0]
 8009e02:	2300      	movs	r3, #0
 8009e04:	6123      	str	r3, [r4, #16]
 8009e06:	4615      	mov	r5, r2
 8009e08:	e7ba      	b.n	8009d80 <_printf_i+0x150>
 8009e0a:	682b      	ldr	r3, [r5, #0]
 8009e0c:	1d1a      	adds	r2, r3, #4
 8009e0e:	602a      	str	r2, [r5, #0]
 8009e10:	681d      	ldr	r5, [r3, #0]
 8009e12:	6862      	ldr	r2, [r4, #4]
 8009e14:	2100      	movs	r1, #0
 8009e16:	4628      	mov	r0, r5
 8009e18:	f7f6 f9e2 	bl	80001e0 <memchr>
 8009e1c:	b108      	cbz	r0, 8009e22 <_printf_i+0x1f2>
 8009e1e:	1b40      	subs	r0, r0, r5
 8009e20:	6060      	str	r0, [r4, #4]
 8009e22:	6863      	ldr	r3, [r4, #4]
 8009e24:	6123      	str	r3, [r4, #16]
 8009e26:	2300      	movs	r3, #0
 8009e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e2c:	e7a8      	b.n	8009d80 <_printf_i+0x150>
 8009e2e:	6923      	ldr	r3, [r4, #16]
 8009e30:	462a      	mov	r2, r5
 8009e32:	4649      	mov	r1, r9
 8009e34:	4640      	mov	r0, r8
 8009e36:	47d0      	blx	sl
 8009e38:	3001      	adds	r0, #1
 8009e3a:	d0ab      	beq.n	8009d94 <_printf_i+0x164>
 8009e3c:	6823      	ldr	r3, [r4, #0]
 8009e3e:	079b      	lsls	r3, r3, #30
 8009e40:	d413      	bmi.n	8009e6a <_printf_i+0x23a>
 8009e42:	68e0      	ldr	r0, [r4, #12]
 8009e44:	9b03      	ldr	r3, [sp, #12]
 8009e46:	4298      	cmp	r0, r3
 8009e48:	bfb8      	it	lt
 8009e4a:	4618      	movlt	r0, r3
 8009e4c:	e7a4      	b.n	8009d98 <_printf_i+0x168>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	4632      	mov	r2, r6
 8009e52:	4649      	mov	r1, r9
 8009e54:	4640      	mov	r0, r8
 8009e56:	47d0      	blx	sl
 8009e58:	3001      	adds	r0, #1
 8009e5a:	d09b      	beq.n	8009d94 <_printf_i+0x164>
 8009e5c:	3501      	adds	r5, #1
 8009e5e:	68e3      	ldr	r3, [r4, #12]
 8009e60:	9903      	ldr	r1, [sp, #12]
 8009e62:	1a5b      	subs	r3, r3, r1
 8009e64:	42ab      	cmp	r3, r5
 8009e66:	dcf2      	bgt.n	8009e4e <_printf_i+0x21e>
 8009e68:	e7eb      	b.n	8009e42 <_printf_i+0x212>
 8009e6a:	2500      	movs	r5, #0
 8009e6c:	f104 0619 	add.w	r6, r4, #25
 8009e70:	e7f5      	b.n	8009e5e <_printf_i+0x22e>
 8009e72:	bf00      	nop
 8009e74:	0800dda2 	.word	0x0800dda2
 8009e78:	0800ddb3 	.word	0x0800ddb3

08009e7c <_scanf_float>:
 8009e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e80:	b087      	sub	sp, #28
 8009e82:	4617      	mov	r7, r2
 8009e84:	9303      	str	r3, [sp, #12]
 8009e86:	688b      	ldr	r3, [r1, #8]
 8009e88:	1e5a      	subs	r2, r3, #1
 8009e8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009e8e:	bf83      	ittte	hi
 8009e90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009e94:	195b      	addhi	r3, r3, r5
 8009e96:	9302      	strhi	r3, [sp, #8]
 8009e98:	2300      	movls	r3, #0
 8009e9a:	bf86      	itte	hi
 8009e9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009ea0:	608b      	strhi	r3, [r1, #8]
 8009ea2:	9302      	strls	r3, [sp, #8]
 8009ea4:	680b      	ldr	r3, [r1, #0]
 8009ea6:	468b      	mov	fp, r1
 8009ea8:	2500      	movs	r5, #0
 8009eaa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009eae:	f84b 3b1c 	str.w	r3, [fp], #28
 8009eb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009eb6:	4680      	mov	r8, r0
 8009eb8:	460c      	mov	r4, r1
 8009eba:	465e      	mov	r6, fp
 8009ebc:	46aa      	mov	sl, r5
 8009ebe:	46a9      	mov	r9, r5
 8009ec0:	9501      	str	r5, [sp, #4]
 8009ec2:	68a2      	ldr	r2, [r4, #8]
 8009ec4:	b152      	cbz	r2, 8009edc <_scanf_float+0x60>
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	2b4e      	cmp	r3, #78	; 0x4e
 8009ecc:	d864      	bhi.n	8009f98 <_scanf_float+0x11c>
 8009ece:	2b40      	cmp	r3, #64	; 0x40
 8009ed0:	d83c      	bhi.n	8009f4c <_scanf_float+0xd0>
 8009ed2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009ed6:	b2c8      	uxtb	r0, r1
 8009ed8:	280e      	cmp	r0, #14
 8009eda:	d93a      	bls.n	8009f52 <_scanf_float+0xd6>
 8009edc:	f1b9 0f00 	cmp.w	r9, #0
 8009ee0:	d003      	beq.n	8009eea <_scanf_float+0x6e>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009eee:	f1ba 0f01 	cmp.w	sl, #1
 8009ef2:	f200 8113 	bhi.w	800a11c <_scanf_float+0x2a0>
 8009ef6:	455e      	cmp	r6, fp
 8009ef8:	f200 8105 	bhi.w	800a106 <_scanf_float+0x28a>
 8009efc:	2501      	movs	r5, #1
 8009efe:	4628      	mov	r0, r5
 8009f00:	b007      	add	sp, #28
 8009f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f06:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009f0a:	2a0d      	cmp	r2, #13
 8009f0c:	d8e6      	bhi.n	8009edc <_scanf_float+0x60>
 8009f0e:	a101      	add	r1, pc, #4	; (adr r1, 8009f14 <_scanf_float+0x98>)
 8009f10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f14:	0800a053 	.word	0x0800a053
 8009f18:	08009edd 	.word	0x08009edd
 8009f1c:	08009edd 	.word	0x08009edd
 8009f20:	08009edd 	.word	0x08009edd
 8009f24:	0800a0b3 	.word	0x0800a0b3
 8009f28:	0800a08b 	.word	0x0800a08b
 8009f2c:	08009edd 	.word	0x08009edd
 8009f30:	08009edd 	.word	0x08009edd
 8009f34:	0800a061 	.word	0x0800a061
 8009f38:	08009edd 	.word	0x08009edd
 8009f3c:	08009edd 	.word	0x08009edd
 8009f40:	08009edd 	.word	0x08009edd
 8009f44:	08009edd 	.word	0x08009edd
 8009f48:	0800a019 	.word	0x0800a019
 8009f4c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009f50:	e7db      	b.n	8009f0a <_scanf_float+0x8e>
 8009f52:	290e      	cmp	r1, #14
 8009f54:	d8c2      	bhi.n	8009edc <_scanf_float+0x60>
 8009f56:	a001      	add	r0, pc, #4	; (adr r0, 8009f5c <_scanf_float+0xe0>)
 8009f58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009f5c:	0800a00b 	.word	0x0800a00b
 8009f60:	08009edd 	.word	0x08009edd
 8009f64:	0800a00b 	.word	0x0800a00b
 8009f68:	0800a09f 	.word	0x0800a09f
 8009f6c:	08009edd 	.word	0x08009edd
 8009f70:	08009fb9 	.word	0x08009fb9
 8009f74:	08009ff5 	.word	0x08009ff5
 8009f78:	08009ff5 	.word	0x08009ff5
 8009f7c:	08009ff5 	.word	0x08009ff5
 8009f80:	08009ff5 	.word	0x08009ff5
 8009f84:	08009ff5 	.word	0x08009ff5
 8009f88:	08009ff5 	.word	0x08009ff5
 8009f8c:	08009ff5 	.word	0x08009ff5
 8009f90:	08009ff5 	.word	0x08009ff5
 8009f94:	08009ff5 	.word	0x08009ff5
 8009f98:	2b6e      	cmp	r3, #110	; 0x6e
 8009f9a:	d809      	bhi.n	8009fb0 <_scanf_float+0x134>
 8009f9c:	2b60      	cmp	r3, #96	; 0x60
 8009f9e:	d8b2      	bhi.n	8009f06 <_scanf_float+0x8a>
 8009fa0:	2b54      	cmp	r3, #84	; 0x54
 8009fa2:	d077      	beq.n	800a094 <_scanf_float+0x218>
 8009fa4:	2b59      	cmp	r3, #89	; 0x59
 8009fa6:	d199      	bne.n	8009edc <_scanf_float+0x60>
 8009fa8:	2d07      	cmp	r5, #7
 8009faa:	d197      	bne.n	8009edc <_scanf_float+0x60>
 8009fac:	2508      	movs	r5, #8
 8009fae:	e029      	b.n	800a004 <_scanf_float+0x188>
 8009fb0:	2b74      	cmp	r3, #116	; 0x74
 8009fb2:	d06f      	beq.n	800a094 <_scanf_float+0x218>
 8009fb4:	2b79      	cmp	r3, #121	; 0x79
 8009fb6:	e7f6      	b.n	8009fa6 <_scanf_float+0x12a>
 8009fb8:	6821      	ldr	r1, [r4, #0]
 8009fba:	05c8      	lsls	r0, r1, #23
 8009fbc:	d51a      	bpl.n	8009ff4 <_scanf_float+0x178>
 8009fbe:	9b02      	ldr	r3, [sp, #8]
 8009fc0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009fc4:	6021      	str	r1, [r4, #0]
 8009fc6:	f109 0901 	add.w	r9, r9, #1
 8009fca:	b11b      	cbz	r3, 8009fd4 <_scanf_float+0x158>
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	3201      	adds	r2, #1
 8009fd0:	9302      	str	r3, [sp, #8]
 8009fd2:	60a2      	str	r2, [r4, #8]
 8009fd4:	68a3      	ldr	r3, [r4, #8]
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	60a3      	str	r3, [r4, #8]
 8009fda:	6923      	ldr	r3, [r4, #16]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	6123      	str	r3, [r4, #16]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	607b      	str	r3, [r7, #4]
 8009fe8:	f340 8084 	ble.w	800a0f4 <_scanf_float+0x278>
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	603b      	str	r3, [r7, #0]
 8009ff2:	e766      	b.n	8009ec2 <_scanf_float+0x46>
 8009ff4:	eb1a 0f05 	cmn.w	sl, r5
 8009ff8:	f47f af70 	bne.w	8009edc <_scanf_float+0x60>
 8009ffc:	6822      	ldr	r2, [r4, #0]
 8009ffe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a002:	6022      	str	r2, [r4, #0]
 800a004:	f806 3b01 	strb.w	r3, [r6], #1
 800a008:	e7e4      	b.n	8009fd4 <_scanf_float+0x158>
 800a00a:	6822      	ldr	r2, [r4, #0]
 800a00c:	0610      	lsls	r0, r2, #24
 800a00e:	f57f af65 	bpl.w	8009edc <_scanf_float+0x60>
 800a012:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a016:	e7f4      	b.n	800a002 <_scanf_float+0x186>
 800a018:	f1ba 0f00 	cmp.w	sl, #0
 800a01c:	d10e      	bne.n	800a03c <_scanf_float+0x1c0>
 800a01e:	f1b9 0f00 	cmp.w	r9, #0
 800a022:	d10e      	bne.n	800a042 <_scanf_float+0x1c6>
 800a024:	6822      	ldr	r2, [r4, #0]
 800a026:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a02a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a02e:	d108      	bne.n	800a042 <_scanf_float+0x1c6>
 800a030:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a034:	6022      	str	r2, [r4, #0]
 800a036:	f04f 0a01 	mov.w	sl, #1
 800a03a:	e7e3      	b.n	800a004 <_scanf_float+0x188>
 800a03c:	f1ba 0f02 	cmp.w	sl, #2
 800a040:	d055      	beq.n	800a0ee <_scanf_float+0x272>
 800a042:	2d01      	cmp	r5, #1
 800a044:	d002      	beq.n	800a04c <_scanf_float+0x1d0>
 800a046:	2d04      	cmp	r5, #4
 800a048:	f47f af48 	bne.w	8009edc <_scanf_float+0x60>
 800a04c:	3501      	adds	r5, #1
 800a04e:	b2ed      	uxtb	r5, r5
 800a050:	e7d8      	b.n	800a004 <_scanf_float+0x188>
 800a052:	f1ba 0f01 	cmp.w	sl, #1
 800a056:	f47f af41 	bne.w	8009edc <_scanf_float+0x60>
 800a05a:	f04f 0a02 	mov.w	sl, #2
 800a05e:	e7d1      	b.n	800a004 <_scanf_float+0x188>
 800a060:	b97d      	cbnz	r5, 800a082 <_scanf_float+0x206>
 800a062:	f1b9 0f00 	cmp.w	r9, #0
 800a066:	f47f af3c 	bne.w	8009ee2 <_scanf_float+0x66>
 800a06a:	6822      	ldr	r2, [r4, #0]
 800a06c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a070:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a074:	f47f af39 	bne.w	8009eea <_scanf_float+0x6e>
 800a078:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a07c:	6022      	str	r2, [r4, #0]
 800a07e:	2501      	movs	r5, #1
 800a080:	e7c0      	b.n	800a004 <_scanf_float+0x188>
 800a082:	2d03      	cmp	r5, #3
 800a084:	d0e2      	beq.n	800a04c <_scanf_float+0x1d0>
 800a086:	2d05      	cmp	r5, #5
 800a088:	e7de      	b.n	800a048 <_scanf_float+0x1cc>
 800a08a:	2d02      	cmp	r5, #2
 800a08c:	f47f af26 	bne.w	8009edc <_scanf_float+0x60>
 800a090:	2503      	movs	r5, #3
 800a092:	e7b7      	b.n	800a004 <_scanf_float+0x188>
 800a094:	2d06      	cmp	r5, #6
 800a096:	f47f af21 	bne.w	8009edc <_scanf_float+0x60>
 800a09a:	2507      	movs	r5, #7
 800a09c:	e7b2      	b.n	800a004 <_scanf_float+0x188>
 800a09e:	6822      	ldr	r2, [r4, #0]
 800a0a0:	0591      	lsls	r1, r2, #22
 800a0a2:	f57f af1b 	bpl.w	8009edc <_scanf_float+0x60>
 800a0a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a0aa:	6022      	str	r2, [r4, #0]
 800a0ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800a0b0:	e7a8      	b.n	800a004 <_scanf_float+0x188>
 800a0b2:	6822      	ldr	r2, [r4, #0]
 800a0b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a0b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a0bc:	d006      	beq.n	800a0cc <_scanf_float+0x250>
 800a0be:	0550      	lsls	r0, r2, #21
 800a0c0:	f57f af0c 	bpl.w	8009edc <_scanf_float+0x60>
 800a0c4:	f1b9 0f00 	cmp.w	r9, #0
 800a0c8:	f43f af0f 	beq.w	8009eea <_scanf_float+0x6e>
 800a0cc:	0591      	lsls	r1, r2, #22
 800a0ce:	bf58      	it	pl
 800a0d0:	9901      	ldrpl	r1, [sp, #4]
 800a0d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a0d6:	bf58      	it	pl
 800a0d8:	eba9 0101 	subpl.w	r1, r9, r1
 800a0dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a0e0:	bf58      	it	pl
 800a0e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a0e6:	6022      	str	r2, [r4, #0]
 800a0e8:	f04f 0900 	mov.w	r9, #0
 800a0ec:	e78a      	b.n	800a004 <_scanf_float+0x188>
 800a0ee:	f04f 0a03 	mov.w	sl, #3
 800a0f2:	e787      	b.n	800a004 <_scanf_float+0x188>
 800a0f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a0f8:	4639      	mov	r1, r7
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	4798      	blx	r3
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f43f aedf 	beq.w	8009ec2 <_scanf_float+0x46>
 800a104:	e6ea      	b.n	8009edc <_scanf_float+0x60>
 800a106:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a10a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a10e:	463a      	mov	r2, r7
 800a110:	4640      	mov	r0, r8
 800a112:	4798      	blx	r3
 800a114:	6923      	ldr	r3, [r4, #16]
 800a116:	3b01      	subs	r3, #1
 800a118:	6123      	str	r3, [r4, #16]
 800a11a:	e6ec      	b.n	8009ef6 <_scanf_float+0x7a>
 800a11c:	1e6b      	subs	r3, r5, #1
 800a11e:	2b06      	cmp	r3, #6
 800a120:	d825      	bhi.n	800a16e <_scanf_float+0x2f2>
 800a122:	2d02      	cmp	r5, #2
 800a124:	d836      	bhi.n	800a194 <_scanf_float+0x318>
 800a126:	455e      	cmp	r6, fp
 800a128:	f67f aee8 	bls.w	8009efc <_scanf_float+0x80>
 800a12c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a130:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a134:	463a      	mov	r2, r7
 800a136:	4640      	mov	r0, r8
 800a138:	4798      	blx	r3
 800a13a:	6923      	ldr	r3, [r4, #16]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	6123      	str	r3, [r4, #16]
 800a140:	e7f1      	b.n	800a126 <_scanf_float+0x2aa>
 800a142:	9802      	ldr	r0, [sp, #8]
 800a144:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a148:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a14c:	9002      	str	r0, [sp, #8]
 800a14e:	463a      	mov	r2, r7
 800a150:	4640      	mov	r0, r8
 800a152:	4798      	blx	r3
 800a154:	6923      	ldr	r3, [r4, #16]
 800a156:	3b01      	subs	r3, #1
 800a158:	6123      	str	r3, [r4, #16]
 800a15a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a15e:	fa5f fa8a 	uxtb.w	sl, sl
 800a162:	f1ba 0f02 	cmp.w	sl, #2
 800a166:	d1ec      	bne.n	800a142 <_scanf_float+0x2c6>
 800a168:	3d03      	subs	r5, #3
 800a16a:	b2ed      	uxtb	r5, r5
 800a16c:	1b76      	subs	r6, r6, r5
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	05da      	lsls	r2, r3, #23
 800a172:	d52f      	bpl.n	800a1d4 <_scanf_float+0x358>
 800a174:	055b      	lsls	r3, r3, #21
 800a176:	d510      	bpl.n	800a19a <_scanf_float+0x31e>
 800a178:	455e      	cmp	r6, fp
 800a17a:	f67f aebf 	bls.w	8009efc <_scanf_float+0x80>
 800a17e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a182:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a186:	463a      	mov	r2, r7
 800a188:	4640      	mov	r0, r8
 800a18a:	4798      	blx	r3
 800a18c:	6923      	ldr	r3, [r4, #16]
 800a18e:	3b01      	subs	r3, #1
 800a190:	6123      	str	r3, [r4, #16]
 800a192:	e7f1      	b.n	800a178 <_scanf_float+0x2fc>
 800a194:	46aa      	mov	sl, r5
 800a196:	9602      	str	r6, [sp, #8]
 800a198:	e7df      	b.n	800a15a <_scanf_float+0x2de>
 800a19a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a19e:	6923      	ldr	r3, [r4, #16]
 800a1a0:	2965      	cmp	r1, #101	; 0x65
 800a1a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a1a6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a1aa:	6123      	str	r3, [r4, #16]
 800a1ac:	d00c      	beq.n	800a1c8 <_scanf_float+0x34c>
 800a1ae:	2945      	cmp	r1, #69	; 0x45
 800a1b0:	d00a      	beq.n	800a1c8 <_scanf_float+0x34c>
 800a1b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1b6:	463a      	mov	r2, r7
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	4798      	blx	r3
 800a1bc:	6923      	ldr	r3, [r4, #16]
 800a1be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	1eb5      	subs	r5, r6, #2
 800a1c6:	6123      	str	r3, [r4, #16]
 800a1c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1cc:	463a      	mov	r2, r7
 800a1ce:	4640      	mov	r0, r8
 800a1d0:	4798      	blx	r3
 800a1d2:	462e      	mov	r6, r5
 800a1d4:	6825      	ldr	r5, [r4, #0]
 800a1d6:	f015 0510 	ands.w	r5, r5, #16
 800a1da:	d159      	bne.n	800a290 <_scanf_float+0x414>
 800a1dc:	7035      	strb	r5, [r6, #0]
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a1e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1e8:	d11b      	bne.n	800a222 <_scanf_float+0x3a6>
 800a1ea:	9b01      	ldr	r3, [sp, #4]
 800a1ec:	454b      	cmp	r3, r9
 800a1ee:	eba3 0209 	sub.w	r2, r3, r9
 800a1f2:	d123      	bne.n	800a23c <_scanf_float+0x3c0>
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	4659      	mov	r1, fp
 800a1f8:	4640      	mov	r0, r8
 800a1fa:	f000 ff57 	bl	800b0ac <_strtod_r>
 800a1fe:	6822      	ldr	r2, [r4, #0]
 800a200:	9b03      	ldr	r3, [sp, #12]
 800a202:	f012 0f02 	tst.w	r2, #2
 800a206:	ec57 6b10 	vmov	r6, r7, d0
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	d021      	beq.n	800a252 <_scanf_float+0x3d6>
 800a20e:	9903      	ldr	r1, [sp, #12]
 800a210:	1d1a      	adds	r2, r3, #4
 800a212:	600a      	str	r2, [r1, #0]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	e9c3 6700 	strd	r6, r7, [r3]
 800a21a:	68e3      	ldr	r3, [r4, #12]
 800a21c:	3301      	adds	r3, #1
 800a21e:	60e3      	str	r3, [r4, #12]
 800a220:	e66d      	b.n	8009efe <_scanf_float+0x82>
 800a222:	9b04      	ldr	r3, [sp, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d0e5      	beq.n	800a1f4 <_scanf_float+0x378>
 800a228:	9905      	ldr	r1, [sp, #20]
 800a22a:	230a      	movs	r3, #10
 800a22c:	462a      	mov	r2, r5
 800a22e:	3101      	adds	r1, #1
 800a230:	4640      	mov	r0, r8
 800a232:	f000 ffc3 	bl	800b1bc <_strtol_r>
 800a236:	9b04      	ldr	r3, [sp, #16]
 800a238:	9e05      	ldr	r6, [sp, #20]
 800a23a:	1ac2      	subs	r2, r0, r3
 800a23c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a240:	429e      	cmp	r6, r3
 800a242:	bf28      	it	cs
 800a244:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a248:	4912      	ldr	r1, [pc, #72]	; (800a294 <_scanf_float+0x418>)
 800a24a:	4630      	mov	r0, r6
 800a24c:	f000 f8a6 	bl	800a39c <siprintf>
 800a250:	e7d0      	b.n	800a1f4 <_scanf_float+0x378>
 800a252:	9903      	ldr	r1, [sp, #12]
 800a254:	f012 0f04 	tst.w	r2, #4
 800a258:	f103 0204 	add.w	r2, r3, #4
 800a25c:	600a      	str	r2, [r1, #0]
 800a25e:	d1d9      	bne.n	800a214 <_scanf_float+0x398>
 800a260:	f8d3 8000 	ldr.w	r8, [r3]
 800a264:	ee10 2a10 	vmov	r2, s0
 800a268:	ee10 0a10 	vmov	r0, s0
 800a26c:	463b      	mov	r3, r7
 800a26e:	4639      	mov	r1, r7
 800a270:	f7f6 fc5c 	bl	8000b2c <__aeabi_dcmpun>
 800a274:	b128      	cbz	r0, 800a282 <_scanf_float+0x406>
 800a276:	4808      	ldr	r0, [pc, #32]	; (800a298 <_scanf_float+0x41c>)
 800a278:	f000 f88a 	bl	800a390 <nanf>
 800a27c:	ed88 0a00 	vstr	s0, [r8]
 800a280:	e7cb      	b.n	800a21a <_scanf_float+0x39e>
 800a282:	4630      	mov	r0, r6
 800a284:	4639      	mov	r1, r7
 800a286:	f7f6 fcaf 	bl	8000be8 <__aeabi_d2f>
 800a28a:	f8c8 0000 	str.w	r0, [r8]
 800a28e:	e7c4      	b.n	800a21a <_scanf_float+0x39e>
 800a290:	2500      	movs	r5, #0
 800a292:	e634      	b.n	8009efe <_scanf_float+0x82>
 800a294:	0800ddc4 	.word	0x0800ddc4
 800a298:	0800de5b 	.word	0x0800de5b

0800a29c <cleanup_glue>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	460c      	mov	r4, r1
 800a2a0:	6809      	ldr	r1, [r1, #0]
 800a2a2:	4605      	mov	r5, r0
 800a2a4:	b109      	cbz	r1, 800a2aa <cleanup_glue+0xe>
 800a2a6:	f7ff fff9 	bl	800a29c <cleanup_glue>
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2b2:	f003 b8bd 	b.w	800d430 <_free_r>
	...

0800a2b8 <_reclaim_reent>:
 800a2b8:	4b2c      	ldr	r3, [pc, #176]	; (800a36c <_reclaim_reent+0xb4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4283      	cmp	r3, r0
 800a2be:	b570      	push	{r4, r5, r6, lr}
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	d051      	beq.n	800a368 <_reclaim_reent+0xb0>
 800a2c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a2c6:	b143      	cbz	r3, 800a2da <_reclaim_reent+0x22>
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d14a      	bne.n	800a364 <_reclaim_reent+0xac>
 800a2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2d0:	6819      	ldr	r1, [r3, #0]
 800a2d2:	b111      	cbz	r1, 800a2da <_reclaim_reent+0x22>
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f003 f8ab 	bl	800d430 <_free_r>
 800a2da:	6961      	ldr	r1, [r4, #20]
 800a2dc:	b111      	cbz	r1, 800a2e4 <_reclaim_reent+0x2c>
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f003 f8a6 	bl	800d430 <_free_r>
 800a2e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a2e6:	b111      	cbz	r1, 800a2ee <_reclaim_reent+0x36>
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f003 f8a1 	bl	800d430 <_free_r>
 800a2ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a2f0:	b111      	cbz	r1, 800a2f8 <_reclaim_reent+0x40>
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f003 f89c 	bl	800d430 <_free_r>
 800a2f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a2fa:	b111      	cbz	r1, 800a302 <_reclaim_reent+0x4a>
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f003 f897 	bl	800d430 <_free_r>
 800a302:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a304:	b111      	cbz	r1, 800a30c <_reclaim_reent+0x54>
 800a306:	4620      	mov	r0, r4
 800a308:	f003 f892 	bl	800d430 <_free_r>
 800a30c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a30e:	b111      	cbz	r1, 800a316 <_reclaim_reent+0x5e>
 800a310:	4620      	mov	r0, r4
 800a312:	f003 f88d 	bl	800d430 <_free_r>
 800a316:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a318:	b111      	cbz	r1, 800a320 <_reclaim_reent+0x68>
 800a31a:	4620      	mov	r0, r4
 800a31c:	f003 f888 	bl	800d430 <_free_r>
 800a320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a322:	b111      	cbz	r1, 800a32a <_reclaim_reent+0x72>
 800a324:	4620      	mov	r0, r4
 800a326:	f003 f883 	bl	800d430 <_free_r>
 800a32a:	69a3      	ldr	r3, [r4, #24]
 800a32c:	b1e3      	cbz	r3, 800a368 <_reclaim_reent+0xb0>
 800a32e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a330:	4620      	mov	r0, r4
 800a332:	4798      	blx	r3
 800a334:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a336:	b1b9      	cbz	r1, 800a368 <_reclaim_reent+0xb0>
 800a338:	4620      	mov	r0, r4
 800a33a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a33e:	f7ff bfad 	b.w	800a29c <cleanup_glue>
 800a342:	5949      	ldr	r1, [r1, r5]
 800a344:	b941      	cbnz	r1, 800a358 <_reclaim_reent+0xa0>
 800a346:	3504      	adds	r5, #4
 800a348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a34a:	2d80      	cmp	r5, #128	; 0x80
 800a34c:	68d9      	ldr	r1, [r3, #12]
 800a34e:	d1f8      	bne.n	800a342 <_reclaim_reent+0x8a>
 800a350:	4620      	mov	r0, r4
 800a352:	f003 f86d 	bl	800d430 <_free_r>
 800a356:	e7ba      	b.n	800a2ce <_reclaim_reent+0x16>
 800a358:	680e      	ldr	r6, [r1, #0]
 800a35a:	4620      	mov	r0, r4
 800a35c:	f003 f868 	bl	800d430 <_free_r>
 800a360:	4631      	mov	r1, r6
 800a362:	e7ef      	b.n	800a344 <_reclaim_reent+0x8c>
 800a364:	2500      	movs	r5, #0
 800a366:	e7ef      	b.n	800a348 <_reclaim_reent+0x90>
 800a368:	bd70      	pop	{r4, r5, r6, pc}
 800a36a:	bf00      	nop
 800a36c:	20000044 	.word	0x20000044

0800a370 <_sbrk_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4d06      	ldr	r5, [pc, #24]	; (800a38c <_sbrk_r+0x1c>)
 800a374:	2300      	movs	r3, #0
 800a376:	4604      	mov	r4, r0
 800a378:	4608      	mov	r0, r1
 800a37a:	602b      	str	r3, [r5, #0]
 800a37c:	f7f7 f93c 	bl	80015f8 <_sbrk>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	d102      	bne.n	800a38a <_sbrk_r+0x1a>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	b103      	cbz	r3, 800a38a <_sbrk_r+0x1a>
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	20005cfc 	.word	0x20005cfc

0800a390 <nanf>:
 800a390:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a398 <nanf+0x8>
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	7fc00000 	.word	0x7fc00000

0800a39c <siprintf>:
 800a39c:	b40e      	push	{r1, r2, r3}
 800a39e:	b500      	push	{lr}
 800a3a0:	b09c      	sub	sp, #112	; 0x70
 800a3a2:	ab1d      	add	r3, sp, #116	; 0x74
 800a3a4:	9002      	str	r0, [sp, #8]
 800a3a6:	9006      	str	r0, [sp, #24]
 800a3a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3ac:	4809      	ldr	r0, [pc, #36]	; (800a3d4 <siprintf+0x38>)
 800a3ae:	9107      	str	r1, [sp, #28]
 800a3b0:	9104      	str	r1, [sp, #16]
 800a3b2:	4909      	ldr	r1, [pc, #36]	; (800a3d8 <siprintf+0x3c>)
 800a3b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3b8:	9105      	str	r1, [sp, #20]
 800a3ba:	6800      	ldr	r0, [r0, #0]
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	a902      	add	r1, sp, #8
 800a3c0:	f003 f8de 	bl	800d580 <_svfiprintf_r>
 800a3c4:	9b02      	ldr	r3, [sp, #8]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	701a      	strb	r2, [r3, #0]
 800a3ca:	b01c      	add	sp, #112	; 0x70
 800a3cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3d0:	b003      	add	sp, #12
 800a3d2:	4770      	bx	lr
 800a3d4:	20000044 	.word	0x20000044
 800a3d8:	ffff0208 	.word	0xffff0208

0800a3dc <__sread>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	460c      	mov	r4, r1
 800a3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e4:	f003 fb26 	bl	800da34 <_read_r>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	bfab      	itete	ge
 800a3ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3ee:	89a3      	ldrhlt	r3, [r4, #12]
 800a3f0:	181b      	addge	r3, r3, r0
 800a3f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3f6:	bfac      	ite	ge
 800a3f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3fa:	81a3      	strhlt	r3, [r4, #12]
 800a3fc:	bd10      	pop	{r4, pc}

0800a3fe <__swrite>:
 800a3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a402:	461f      	mov	r7, r3
 800a404:	898b      	ldrh	r3, [r1, #12]
 800a406:	05db      	lsls	r3, r3, #23
 800a408:	4605      	mov	r5, r0
 800a40a:	460c      	mov	r4, r1
 800a40c:	4616      	mov	r6, r2
 800a40e:	d505      	bpl.n	800a41c <__swrite+0x1e>
 800a410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a414:	2302      	movs	r3, #2
 800a416:	2200      	movs	r2, #0
 800a418:	f002 fa94 	bl	800c944 <_lseek_r>
 800a41c:	89a3      	ldrh	r3, [r4, #12]
 800a41e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a426:	81a3      	strh	r3, [r4, #12]
 800a428:	4632      	mov	r2, r6
 800a42a:	463b      	mov	r3, r7
 800a42c:	4628      	mov	r0, r5
 800a42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a432:	f000 bf17 	b.w	800b264 <_write_r>

0800a436 <__sseek>:
 800a436:	b510      	push	{r4, lr}
 800a438:	460c      	mov	r4, r1
 800a43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a43e:	f002 fa81 	bl	800c944 <_lseek_r>
 800a442:	1c43      	adds	r3, r0, #1
 800a444:	89a3      	ldrh	r3, [r4, #12]
 800a446:	bf15      	itete	ne
 800a448:	6560      	strne	r0, [r4, #84]	; 0x54
 800a44a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a44e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a452:	81a3      	strheq	r3, [r4, #12]
 800a454:	bf18      	it	ne
 800a456:	81a3      	strhne	r3, [r4, #12]
 800a458:	bd10      	pop	{r4, pc}

0800a45a <__sclose>:
 800a45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a45e:	f000 bf9f 	b.w	800b3a0 <_close_r>

0800a462 <sulp>:
 800a462:	b570      	push	{r4, r5, r6, lr}
 800a464:	4604      	mov	r4, r0
 800a466:	460d      	mov	r5, r1
 800a468:	ec45 4b10 	vmov	d0, r4, r5
 800a46c:	4616      	mov	r6, r2
 800a46e:	f002 fe79 	bl	800d164 <__ulp>
 800a472:	ec51 0b10 	vmov	r0, r1, d0
 800a476:	b17e      	cbz	r6, 800a498 <sulp+0x36>
 800a478:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a47c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a480:	2b00      	cmp	r3, #0
 800a482:	dd09      	ble.n	800a498 <sulp+0x36>
 800a484:	051b      	lsls	r3, r3, #20
 800a486:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a48a:	2400      	movs	r4, #0
 800a48c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a490:	4622      	mov	r2, r4
 800a492:	462b      	mov	r3, r5
 800a494:	f7f6 f8b0 	bl	80005f8 <__aeabi_dmul>
 800a498:	bd70      	pop	{r4, r5, r6, pc}
 800a49a:	0000      	movs	r0, r0
 800a49c:	0000      	movs	r0, r0
	...

0800a4a0 <_strtod_l>:
 800a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a4:	ed2d 8b02 	vpush	{d8}
 800a4a8:	b09d      	sub	sp, #116	; 0x74
 800a4aa:	461f      	mov	r7, r3
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9318      	str	r3, [sp, #96]	; 0x60
 800a4b0:	4ba2      	ldr	r3, [pc, #648]	; (800a73c <_strtod_l+0x29c>)
 800a4b2:	9213      	str	r2, [sp, #76]	; 0x4c
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	9305      	str	r3, [sp, #20]
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	4688      	mov	r8, r1
 800a4be:	f7f5 fe87 	bl	80001d0 <strlen>
 800a4c2:	f04f 0a00 	mov.w	sl, #0
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	f04f 0b00 	mov.w	fp, #0
 800a4cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a4d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4d2:	781a      	ldrb	r2, [r3, #0]
 800a4d4:	2a2b      	cmp	r2, #43	; 0x2b
 800a4d6:	d04e      	beq.n	800a576 <_strtod_l+0xd6>
 800a4d8:	d83b      	bhi.n	800a552 <_strtod_l+0xb2>
 800a4da:	2a0d      	cmp	r2, #13
 800a4dc:	d834      	bhi.n	800a548 <_strtod_l+0xa8>
 800a4de:	2a08      	cmp	r2, #8
 800a4e0:	d834      	bhi.n	800a54c <_strtod_l+0xac>
 800a4e2:	2a00      	cmp	r2, #0
 800a4e4:	d03e      	beq.n	800a564 <_strtod_l+0xc4>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	930a      	str	r3, [sp, #40]	; 0x28
 800a4ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a4ec:	7833      	ldrb	r3, [r6, #0]
 800a4ee:	2b30      	cmp	r3, #48	; 0x30
 800a4f0:	f040 80b0 	bne.w	800a654 <_strtod_l+0x1b4>
 800a4f4:	7873      	ldrb	r3, [r6, #1]
 800a4f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a4fa:	2b58      	cmp	r3, #88	; 0x58
 800a4fc:	d168      	bne.n	800a5d0 <_strtod_l+0x130>
 800a4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a500:	9301      	str	r3, [sp, #4]
 800a502:	ab18      	add	r3, sp, #96	; 0x60
 800a504:	9702      	str	r7, [sp, #8]
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	4a8d      	ldr	r2, [pc, #564]	; (800a740 <_strtod_l+0x2a0>)
 800a50a:	ab19      	add	r3, sp, #100	; 0x64
 800a50c:	a917      	add	r1, sp, #92	; 0x5c
 800a50e:	4620      	mov	r0, r4
 800a510:	f001 ff0c 	bl	800c32c <__gethex>
 800a514:	f010 0707 	ands.w	r7, r0, #7
 800a518:	4605      	mov	r5, r0
 800a51a:	d005      	beq.n	800a528 <_strtod_l+0x88>
 800a51c:	2f06      	cmp	r7, #6
 800a51e:	d12c      	bne.n	800a57a <_strtod_l+0xda>
 800a520:	3601      	adds	r6, #1
 800a522:	2300      	movs	r3, #0
 800a524:	9617      	str	r6, [sp, #92]	; 0x5c
 800a526:	930a      	str	r3, [sp, #40]	; 0x28
 800a528:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f040 8590 	bne.w	800b050 <_strtod_l+0xbb0>
 800a530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a532:	b1eb      	cbz	r3, 800a570 <_strtod_l+0xd0>
 800a534:	4652      	mov	r2, sl
 800a536:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a53a:	ec43 2b10 	vmov	d0, r2, r3
 800a53e:	b01d      	add	sp, #116	; 0x74
 800a540:	ecbd 8b02 	vpop	{d8}
 800a544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a548:	2a20      	cmp	r2, #32
 800a54a:	d1cc      	bne.n	800a4e6 <_strtod_l+0x46>
 800a54c:	3301      	adds	r3, #1
 800a54e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a550:	e7be      	b.n	800a4d0 <_strtod_l+0x30>
 800a552:	2a2d      	cmp	r2, #45	; 0x2d
 800a554:	d1c7      	bne.n	800a4e6 <_strtod_l+0x46>
 800a556:	2201      	movs	r2, #1
 800a558:	920a      	str	r2, [sp, #40]	; 0x28
 800a55a:	1c5a      	adds	r2, r3, #1
 800a55c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a55e:	785b      	ldrb	r3, [r3, #1]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1c2      	bne.n	800a4ea <_strtod_l+0x4a>
 800a564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a566:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f040 856e 	bne.w	800b04c <_strtod_l+0xbac>
 800a570:	4652      	mov	r2, sl
 800a572:	465b      	mov	r3, fp
 800a574:	e7e1      	b.n	800a53a <_strtod_l+0x9a>
 800a576:	2200      	movs	r2, #0
 800a578:	e7ee      	b.n	800a558 <_strtod_l+0xb8>
 800a57a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a57c:	b13a      	cbz	r2, 800a58e <_strtod_l+0xee>
 800a57e:	2135      	movs	r1, #53	; 0x35
 800a580:	a81a      	add	r0, sp, #104	; 0x68
 800a582:	f002 fefa 	bl	800d37a <__copybits>
 800a586:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a588:	4620      	mov	r0, r4
 800a58a:	f002 fab9 	bl	800cb00 <_Bfree>
 800a58e:	3f01      	subs	r7, #1
 800a590:	2f04      	cmp	r7, #4
 800a592:	d806      	bhi.n	800a5a2 <_strtod_l+0x102>
 800a594:	e8df f007 	tbb	[pc, r7]
 800a598:	1714030a 	.word	0x1714030a
 800a59c:	0a          	.byte	0x0a
 800a59d:	00          	.byte	0x00
 800a59e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a5a2:	0728      	lsls	r0, r5, #28
 800a5a4:	d5c0      	bpl.n	800a528 <_strtod_l+0x88>
 800a5a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a5aa:	e7bd      	b.n	800a528 <_strtod_l+0x88>
 800a5ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a5b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a5b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a5ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a5be:	e7f0      	b.n	800a5a2 <_strtod_l+0x102>
 800a5c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a744 <_strtod_l+0x2a4>
 800a5c4:	e7ed      	b.n	800a5a2 <_strtod_l+0x102>
 800a5c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a5ca:	f04f 3aff 	mov.w	sl, #4294967295
 800a5ce:	e7e8      	b.n	800a5a2 <_strtod_l+0x102>
 800a5d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a5d6:	785b      	ldrb	r3, [r3, #1]
 800a5d8:	2b30      	cmp	r3, #48	; 0x30
 800a5da:	d0f9      	beq.n	800a5d0 <_strtod_l+0x130>
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d0a3      	beq.n	800a528 <_strtod_l+0x88>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	f04f 0900 	mov.w	r9, #0
 800a5e6:	9304      	str	r3, [sp, #16]
 800a5e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5ea:	9308      	str	r3, [sp, #32]
 800a5ec:	f8cd 901c 	str.w	r9, [sp, #28]
 800a5f0:	464f      	mov	r7, r9
 800a5f2:	220a      	movs	r2, #10
 800a5f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a5f6:	7806      	ldrb	r6, [r0, #0]
 800a5f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a5fc:	b2d9      	uxtb	r1, r3
 800a5fe:	2909      	cmp	r1, #9
 800a600:	d92a      	bls.n	800a658 <_strtod_l+0x1b8>
 800a602:	9905      	ldr	r1, [sp, #20]
 800a604:	462a      	mov	r2, r5
 800a606:	f003 fa2f 	bl	800da68 <strncmp>
 800a60a:	b398      	cbz	r0, 800a674 <_strtod_l+0x1d4>
 800a60c:	2000      	movs	r0, #0
 800a60e:	4632      	mov	r2, r6
 800a610:	463d      	mov	r5, r7
 800a612:	9005      	str	r0, [sp, #20]
 800a614:	4603      	mov	r3, r0
 800a616:	2a65      	cmp	r2, #101	; 0x65
 800a618:	d001      	beq.n	800a61e <_strtod_l+0x17e>
 800a61a:	2a45      	cmp	r2, #69	; 0x45
 800a61c:	d118      	bne.n	800a650 <_strtod_l+0x1b0>
 800a61e:	b91d      	cbnz	r5, 800a628 <_strtod_l+0x188>
 800a620:	9a04      	ldr	r2, [sp, #16]
 800a622:	4302      	orrs	r2, r0
 800a624:	d09e      	beq.n	800a564 <_strtod_l+0xc4>
 800a626:	2500      	movs	r5, #0
 800a628:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a62c:	f108 0201 	add.w	r2, r8, #1
 800a630:	9217      	str	r2, [sp, #92]	; 0x5c
 800a632:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a636:	2a2b      	cmp	r2, #43	; 0x2b
 800a638:	d075      	beq.n	800a726 <_strtod_l+0x286>
 800a63a:	2a2d      	cmp	r2, #45	; 0x2d
 800a63c:	d07b      	beq.n	800a736 <_strtod_l+0x296>
 800a63e:	f04f 0c00 	mov.w	ip, #0
 800a642:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a646:	2909      	cmp	r1, #9
 800a648:	f240 8082 	bls.w	800a750 <_strtod_l+0x2b0>
 800a64c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a650:	2600      	movs	r6, #0
 800a652:	e09d      	b.n	800a790 <_strtod_l+0x2f0>
 800a654:	2300      	movs	r3, #0
 800a656:	e7c4      	b.n	800a5e2 <_strtod_l+0x142>
 800a658:	2f08      	cmp	r7, #8
 800a65a:	bfd8      	it	le
 800a65c:	9907      	ldrle	r1, [sp, #28]
 800a65e:	f100 0001 	add.w	r0, r0, #1
 800a662:	bfda      	itte	le
 800a664:	fb02 3301 	mlale	r3, r2, r1, r3
 800a668:	9307      	strle	r3, [sp, #28]
 800a66a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a66e:	3701      	adds	r7, #1
 800a670:	9017      	str	r0, [sp, #92]	; 0x5c
 800a672:	e7bf      	b.n	800a5f4 <_strtod_l+0x154>
 800a674:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a676:	195a      	adds	r2, r3, r5
 800a678:	9217      	str	r2, [sp, #92]	; 0x5c
 800a67a:	5d5a      	ldrb	r2, [r3, r5]
 800a67c:	2f00      	cmp	r7, #0
 800a67e:	d037      	beq.n	800a6f0 <_strtod_l+0x250>
 800a680:	9005      	str	r0, [sp, #20]
 800a682:	463d      	mov	r5, r7
 800a684:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a688:	2b09      	cmp	r3, #9
 800a68a:	d912      	bls.n	800a6b2 <_strtod_l+0x212>
 800a68c:	2301      	movs	r3, #1
 800a68e:	e7c2      	b.n	800a616 <_strtod_l+0x176>
 800a690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	9217      	str	r2, [sp, #92]	; 0x5c
 800a696:	785a      	ldrb	r2, [r3, #1]
 800a698:	3001      	adds	r0, #1
 800a69a:	2a30      	cmp	r2, #48	; 0x30
 800a69c:	d0f8      	beq.n	800a690 <_strtod_l+0x1f0>
 800a69e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a6a2:	2b08      	cmp	r3, #8
 800a6a4:	f200 84d9 	bhi.w	800b05a <_strtod_l+0xbba>
 800a6a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6aa:	9005      	str	r0, [sp, #20]
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	9308      	str	r3, [sp, #32]
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	3a30      	subs	r2, #48	; 0x30
 800a6b4:	f100 0301 	add.w	r3, r0, #1
 800a6b8:	d014      	beq.n	800a6e4 <_strtod_l+0x244>
 800a6ba:	9905      	ldr	r1, [sp, #20]
 800a6bc:	4419      	add	r1, r3
 800a6be:	9105      	str	r1, [sp, #20]
 800a6c0:	462b      	mov	r3, r5
 800a6c2:	eb00 0e05 	add.w	lr, r0, r5
 800a6c6:	210a      	movs	r1, #10
 800a6c8:	4573      	cmp	r3, lr
 800a6ca:	d113      	bne.n	800a6f4 <_strtod_l+0x254>
 800a6cc:	182b      	adds	r3, r5, r0
 800a6ce:	2b08      	cmp	r3, #8
 800a6d0:	f105 0501 	add.w	r5, r5, #1
 800a6d4:	4405      	add	r5, r0
 800a6d6:	dc1c      	bgt.n	800a712 <_strtod_l+0x272>
 800a6d8:	9907      	ldr	r1, [sp, #28]
 800a6da:	230a      	movs	r3, #10
 800a6dc:	fb03 2301 	mla	r3, r3, r1, r2
 800a6e0:	9307      	str	r3, [sp, #28]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6e6:	1c51      	adds	r1, r2, #1
 800a6e8:	9117      	str	r1, [sp, #92]	; 0x5c
 800a6ea:	7852      	ldrb	r2, [r2, #1]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	e7c9      	b.n	800a684 <_strtod_l+0x1e4>
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	e7d2      	b.n	800a69a <_strtod_l+0x1fa>
 800a6f4:	2b08      	cmp	r3, #8
 800a6f6:	dc04      	bgt.n	800a702 <_strtod_l+0x262>
 800a6f8:	9e07      	ldr	r6, [sp, #28]
 800a6fa:	434e      	muls	r6, r1
 800a6fc:	9607      	str	r6, [sp, #28]
 800a6fe:	3301      	adds	r3, #1
 800a700:	e7e2      	b.n	800a6c8 <_strtod_l+0x228>
 800a702:	f103 0c01 	add.w	ip, r3, #1
 800a706:	f1bc 0f10 	cmp.w	ip, #16
 800a70a:	bfd8      	it	le
 800a70c:	fb01 f909 	mulle.w	r9, r1, r9
 800a710:	e7f5      	b.n	800a6fe <_strtod_l+0x25e>
 800a712:	2d10      	cmp	r5, #16
 800a714:	bfdc      	itt	le
 800a716:	230a      	movle	r3, #10
 800a718:	fb03 2909 	mlale	r9, r3, r9, r2
 800a71c:	e7e1      	b.n	800a6e2 <_strtod_l+0x242>
 800a71e:	2300      	movs	r3, #0
 800a720:	9305      	str	r3, [sp, #20]
 800a722:	2301      	movs	r3, #1
 800a724:	e77c      	b.n	800a620 <_strtod_l+0x180>
 800a726:	f04f 0c00 	mov.w	ip, #0
 800a72a:	f108 0202 	add.w	r2, r8, #2
 800a72e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a730:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a734:	e785      	b.n	800a642 <_strtod_l+0x1a2>
 800a736:	f04f 0c01 	mov.w	ip, #1
 800a73a:	e7f6      	b.n	800a72a <_strtod_l+0x28a>
 800a73c:	0800e054 	.word	0x0800e054
 800a740:	0800ddcc 	.word	0x0800ddcc
 800a744:	7ff00000 	.word	0x7ff00000
 800a748:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a74a:	1c51      	adds	r1, r2, #1
 800a74c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a74e:	7852      	ldrb	r2, [r2, #1]
 800a750:	2a30      	cmp	r2, #48	; 0x30
 800a752:	d0f9      	beq.n	800a748 <_strtod_l+0x2a8>
 800a754:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a758:	2908      	cmp	r1, #8
 800a75a:	f63f af79 	bhi.w	800a650 <_strtod_l+0x1b0>
 800a75e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a762:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a764:	9206      	str	r2, [sp, #24]
 800a766:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a768:	1c51      	adds	r1, r2, #1
 800a76a:	9117      	str	r1, [sp, #92]	; 0x5c
 800a76c:	7852      	ldrb	r2, [r2, #1]
 800a76e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a772:	2e09      	cmp	r6, #9
 800a774:	d937      	bls.n	800a7e6 <_strtod_l+0x346>
 800a776:	9e06      	ldr	r6, [sp, #24]
 800a778:	1b89      	subs	r1, r1, r6
 800a77a:	2908      	cmp	r1, #8
 800a77c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a780:	dc02      	bgt.n	800a788 <_strtod_l+0x2e8>
 800a782:	4576      	cmp	r6, lr
 800a784:	bfa8      	it	ge
 800a786:	4676      	movge	r6, lr
 800a788:	f1bc 0f00 	cmp.w	ip, #0
 800a78c:	d000      	beq.n	800a790 <_strtod_l+0x2f0>
 800a78e:	4276      	negs	r6, r6
 800a790:	2d00      	cmp	r5, #0
 800a792:	d14d      	bne.n	800a830 <_strtod_l+0x390>
 800a794:	9904      	ldr	r1, [sp, #16]
 800a796:	4301      	orrs	r1, r0
 800a798:	f47f aec6 	bne.w	800a528 <_strtod_l+0x88>
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f47f aee1 	bne.w	800a564 <_strtod_l+0xc4>
 800a7a2:	2a69      	cmp	r2, #105	; 0x69
 800a7a4:	d027      	beq.n	800a7f6 <_strtod_l+0x356>
 800a7a6:	dc24      	bgt.n	800a7f2 <_strtod_l+0x352>
 800a7a8:	2a49      	cmp	r2, #73	; 0x49
 800a7aa:	d024      	beq.n	800a7f6 <_strtod_l+0x356>
 800a7ac:	2a4e      	cmp	r2, #78	; 0x4e
 800a7ae:	f47f aed9 	bne.w	800a564 <_strtod_l+0xc4>
 800a7b2:	499f      	ldr	r1, [pc, #636]	; (800aa30 <_strtod_l+0x590>)
 800a7b4:	a817      	add	r0, sp, #92	; 0x5c
 800a7b6:	f002 f811 	bl	800c7dc <__match>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	f43f aed2 	beq.w	800a564 <_strtod_l+0xc4>
 800a7c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	2b28      	cmp	r3, #40	; 0x28
 800a7c6:	d12d      	bne.n	800a824 <_strtod_l+0x384>
 800a7c8:	499a      	ldr	r1, [pc, #616]	; (800aa34 <_strtod_l+0x594>)
 800a7ca:	aa1a      	add	r2, sp, #104	; 0x68
 800a7cc:	a817      	add	r0, sp, #92	; 0x5c
 800a7ce:	f002 f819 	bl	800c804 <__hexnan>
 800a7d2:	2805      	cmp	r0, #5
 800a7d4:	d126      	bne.n	800a824 <_strtod_l+0x384>
 800a7d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a7dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a7e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a7e4:	e6a0      	b.n	800a528 <_strtod_l+0x88>
 800a7e6:	210a      	movs	r1, #10
 800a7e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a7ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a7f0:	e7b9      	b.n	800a766 <_strtod_l+0x2c6>
 800a7f2:	2a6e      	cmp	r2, #110	; 0x6e
 800a7f4:	e7db      	b.n	800a7ae <_strtod_l+0x30e>
 800a7f6:	4990      	ldr	r1, [pc, #576]	; (800aa38 <_strtod_l+0x598>)
 800a7f8:	a817      	add	r0, sp, #92	; 0x5c
 800a7fa:	f001 ffef 	bl	800c7dc <__match>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	f43f aeb0 	beq.w	800a564 <_strtod_l+0xc4>
 800a804:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a806:	498d      	ldr	r1, [pc, #564]	; (800aa3c <_strtod_l+0x59c>)
 800a808:	3b01      	subs	r3, #1
 800a80a:	a817      	add	r0, sp, #92	; 0x5c
 800a80c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a80e:	f001 ffe5 	bl	800c7dc <__match>
 800a812:	b910      	cbnz	r0, 800a81a <_strtod_l+0x37a>
 800a814:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a816:	3301      	adds	r3, #1
 800a818:	9317      	str	r3, [sp, #92]	; 0x5c
 800a81a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800aa4c <_strtod_l+0x5ac>
 800a81e:	f04f 0a00 	mov.w	sl, #0
 800a822:	e681      	b.n	800a528 <_strtod_l+0x88>
 800a824:	4886      	ldr	r0, [pc, #536]	; (800aa40 <_strtod_l+0x5a0>)
 800a826:	f003 f917 	bl	800da58 <nan>
 800a82a:	ec5b ab10 	vmov	sl, fp, d0
 800a82e:	e67b      	b.n	800a528 <_strtod_l+0x88>
 800a830:	9b05      	ldr	r3, [sp, #20]
 800a832:	9807      	ldr	r0, [sp, #28]
 800a834:	1af3      	subs	r3, r6, r3
 800a836:	2f00      	cmp	r7, #0
 800a838:	bf08      	it	eq
 800a83a:	462f      	moveq	r7, r5
 800a83c:	2d10      	cmp	r5, #16
 800a83e:	9306      	str	r3, [sp, #24]
 800a840:	46a8      	mov	r8, r5
 800a842:	bfa8      	it	ge
 800a844:	f04f 0810 	movge.w	r8, #16
 800a848:	f7f5 fe5c 	bl	8000504 <__aeabi_ui2d>
 800a84c:	2d09      	cmp	r5, #9
 800a84e:	4682      	mov	sl, r0
 800a850:	468b      	mov	fp, r1
 800a852:	dd13      	ble.n	800a87c <_strtod_l+0x3dc>
 800a854:	4b7b      	ldr	r3, [pc, #492]	; (800aa44 <_strtod_l+0x5a4>)
 800a856:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a85a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a85e:	f7f5 fecb 	bl	80005f8 <__aeabi_dmul>
 800a862:	4682      	mov	sl, r0
 800a864:	4648      	mov	r0, r9
 800a866:	468b      	mov	fp, r1
 800a868:	f7f5 fe4c 	bl	8000504 <__aeabi_ui2d>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4650      	mov	r0, sl
 800a872:	4659      	mov	r1, fp
 800a874:	f7f5 fd0a 	bl	800028c <__adddf3>
 800a878:	4682      	mov	sl, r0
 800a87a:	468b      	mov	fp, r1
 800a87c:	2d0f      	cmp	r5, #15
 800a87e:	dc38      	bgt.n	800a8f2 <_strtod_l+0x452>
 800a880:	9b06      	ldr	r3, [sp, #24]
 800a882:	2b00      	cmp	r3, #0
 800a884:	f43f ae50 	beq.w	800a528 <_strtod_l+0x88>
 800a888:	dd24      	ble.n	800a8d4 <_strtod_l+0x434>
 800a88a:	2b16      	cmp	r3, #22
 800a88c:	dc0b      	bgt.n	800a8a6 <_strtod_l+0x406>
 800a88e:	496d      	ldr	r1, [pc, #436]	; (800aa44 <_strtod_l+0x5a4>)
 800a890:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a894:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a898:	4652      	mov	r2, sl
 800a89a:	465b      	mov	r3, fp
 800a89c:	f7f5 feac 	bl	80005f8 <__aeabi_dmul>
 800a8a0:	4682      	mov	sl, r0
 800a8a2:	468b      	mov	fp, r1
 800a8a4:	e640      	b.n	800a528 <_strtod_l+0x88>
 800a8a6:	9a06      	ldr	r2, [sp, #24]
 800a8a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	db20      	blt.n	800a8f2 <_strtod_l+0x452>
 800a8b0:	4c64      	ldr	r4, [pc, #400]	; (800aa44 <_strtod_l+0x5a4>)
 800a8b2:	f1c5 050f 	rsb	r5, r5, #15
 800a8b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a8ba:	4652      	mov	r2, sl
 800a8bc:	465b      	mov	r3, fp
 800a8be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8c2:	f7f5 fe99 	bl	80005f8 <__aeabi_dmul>
 800a8c6:	9b06      	ldr	r3, [sp, #24]
 800a8c8:	1b5d      	subs	r5, r3, r5
 800a8ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a8ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a8d2:	e7e3      	b.n	800a89c <_strtod_l+0x3fc>
 800a8d4:	9b06      	ldr	r3, [sp, #24]
 800a8d6:	3316      	adds	r3, #22
 800a8d8:	db0b      	blt.n	800a8f2 <_strtod_l+0x452>
 800a8da:	9b05      	ldr	r3, [sp, #20]
 800a8dc:	1b9e      	subs	r6, r3, r6
 800a8de:	4b59      	ldr	r3, [pc, #356]	; (800aa44 <_strtod_l+0x5a4>)
 800a8e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a8e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8e8:	4650      	mov	r0, sl
 800a8ea:	4659      	mov	r1, fp
 800a8ec:	f7f5 ffae 	bl	800084c <__aeabi_ddiv>
 800a8f0:	e7d6      	b.n	800a8a0 <_strtod_l+0x400>
 800a8f2:	9b06      	ldr	r3, [sp, #24]
 800a8f4:	eba5 0808 	sub.w	r8, r5, r8
 800a8f8:	4498      	add	r8, r3
 800a8fa:	f1b8 0f00 	cmp.w	r8, #0
 800a8fe:	dd74      	ble.n	800a9ea <_strtod_l+0x54a>
 800a900:	f018 030f 	ands.w	r3, r8, #15
 800a904:	d00a      	beq.n	800a91c <_strtod_l+0x47c>
 800a906:	494f      	ldr	r1, [pc, #316]	; (800aa44 <_strtod_l+0x5a4>)
 800a908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a90c:	4652      	mov	r2, sl
 800a90e:	465b      	mov	r3, fp
 800a910:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a914:	f7f5 fe70 	bl	80005f8 <__aeabi_dmul>
 800a918:	4682      	mov	sl, r0
 800a91a:	468b      	mov	fp, r1
 800a91c:	f038 080f 	bics.w	r8, r8, #15
 800a920:	d04f      	beq.n	800a9c2 <_strtod_l+0x522>
 800a922:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a926:	dd22      	ble.n	800a96e <_strtod_l+0x4ce>
 800a928:	2500      	movs	r5, #0
 800a92a:	462e      	mov	r6, r5
 800a92c:	9507      	str	r5, [sp, #28]
 800a92e:	9505      	str	r5, [sp, #20]
 800a930:	2322      	movs	r3, #34	; 0x22
 800a932:	f8df b118 	ldr.w	fp, [pc, #280]	; 800aa4c <_strtod_l+0x5ac>
 800a936:	6023      	str	r3, [r4, #0]
 800a938:	f04f 0a00 	mov.w	sl, #0
 800a93c:	9b07      	ldr	r3, [sp, #28]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f43f adf2 	beq.w	800a528 <_strtod_l+0x88>
 800a944:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a946:	4620      	mov	r0, r4
 800a948:	f002 f8da 	bl	800cb00 <_Bfree>
 800a94c:	9905      	ldr	r1, [sp, #20]
 800a94e:	4620      	mov	r0, r4
 800a950:	f002 f8d6 	bl	800cb00 <_Bfree>
 800a954:	4631      	mov	r1, r6
 800a956:	4620      	mov	r0, r4
 800a958:	f002 f8d2 	bl	800cb00 <_Bfree>
 800a95c:	9907      	ldr	r1, [sp, #28]
 800a95e:	4620      	mov	r0, r4
 800a960:	f002 f8ce 	bl	800cb00 <_Bfree>
 800a964:	4629      	mov	r1, r5
 800a966:	4620      	mov	r0, r4
 800a968:	f002 f8ca 	bl	800cb00 <_Bfree>
 800a96c:	e5dc      	b.n	800a528 <_strtod_l+0x88>
 800a96e:	4b36      	ldr	r3, [pc, #216]	; (800aa48 <_strtod_l+0x5a8>)
 800a970:	9304      	str	r3, [sp, #16]
 800a972:	2300      	movs	r3, #0
 800a974:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a978:	4650      	mov	r0, sl
 800a97a:	4659      	mov	r1, fp
 800a97c:	4699      	mov	r9, r3
 800a97e:	f1b8 0f01 	cmp.w	r8, #1
 800a982:	dc21      	bgt.n	800a9c8 <_strtod_l+0x528>
 800a984:	b10b      	cbz	r3, 800a98a <_strtod_l+0x4ea>
 800a986:	4682      	mov	sl, r0
 800a988:	468b      	mov	fp, r1
 800a98a:	4b2f      	ldr	r3, [pc, #188]	; (800aa48 <_strtod_l+0x5a8>)
 800a98c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a990:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a994:	4652      	mov	r2, sl
 800a996:	465b      	mov	r3, fp
 800a998:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a99c:	f7f5 fe2c 	bl	80005f8 <__aeabi_dmul>
 800a9a0:	4b2a      	ldr	r3, [pc, #168]	; (800aa4c <_strtod_l+0x5ac>)
 800a9a2:	460a      	mov	r2, r1
 800a9a4:	400b      	ands	r3, r1
 800a9a6:	492a      	ldr	r1, [pc, #168]	; (800aa50 <_strtod_l+0x5b0>)
 800a9a8:	428b      	cmp	r3, r1
 800a9aa:	4682      	mov	sl, r0
 800a9ac:	d8bc      	bhi.n	800a928 <_strtod_l+0x488>
 800a9ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a9b2:	428b      	cmp	r3, r1
 800a9b4:	bf86      	itte	hi
 800a9b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800aa54 <_strtod_l+0x5b4>
 800a9ba:	f04f 3aff 	movhi.w	sl, #4294967295
 800a9be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	9304      	str	r3, [sp, #16]
 800a9c6:	e084      	b.n	800aad2 <_strtod_l+0x632>
 800a9c8:	f018 0f01 	tst.w	r8, #1
 800a9cc:	d005      	beq.n	800a9da <_strtod_l+0x53a>
 800a9ce:	9b04      	ldr	r3, [sp, #16]
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	f7f5 fe10 	bl	80005f8 <__aeabi_dmul>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	9a04      	ldr	r2, [sp, #16]
 800a9dc:	3208      	adds	r2, #8
 800a9de:	f109 0901 	add.w	r9, r9, #1
 800a9e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a9e6:	9204      	str	r2, [sp, #16]
 800a9e8:	e7c9      	b.n	800a97e <_strtod_l+0x4de>
 800a9ea:	d0ea      	beq.n	800a9c2 <_strtod_l+0x522>
 800a9ec:	f1c8 0800 	rsb	r8, r8, #0
 800a9f0:	f018 020f 	ands.w	r2, r8, #15
 800a9f4:	d00a      	beq.n	800aa0c <_strtod_l+0x56c>
 800a9f6:	4b13      	ldr	r3, [pc, #76]	; (800aa44 <_strtod_l+0x5a4>)
 800a9f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9fc:	4650      	mov	r0, sl
 800a9fe:	4659      	mov	r1, fp
 800aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa04:	f7f5 ff22 	bl	800084c <__aeabi_ddiv>
 800aa08:	4682      	mov	sl, r0
 800aa0a:	468b      	mov	fp, r1
 800aa0c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aa10:	d0d7      	beq.n	800a9c2 <_strtod_l+0x522>
 800aa12:	f1b8 0f1f 	cmp.w	r8, #31
 800aa16:	dd1f      	ble.n	800aa58 <_strtod_l+0x5b8>
 800aa18:	2500      	movs	r5, #0
 800aa1a:	462e      	mov	r6, r5
 800aa1c:	9507      	str	r5, [sp, #28]
 800aa1e:	9505      	str	r5, [sp, #20]
 800aa20:	2322      	movs	r3, #34	; 0x22
 800aa22:	f04f 0a00 	mov.w	sl, #0
 800aa26:	f04f 0b00 	mov.w	fp, #0
 800aa2a:	6023      	str	r3, [r4, #0]
 800aa2c:	e786      	b.n	800a93c <_strtod_l+0x49c>
 800aa2e:	bf00      	nop
 800aa30:	0800dd9d 	.word	0x0800dd9d
 800aa34:	0800dde0 	.word	0x0800dde0
 800aa38:	0800dd95 	.word	0x0800dd95
 800aa3c:	0800df60 	.word	0x0800df60
 800aa40:	0800de5b 	.word	0x0800de5b
 800aa44:	0800e0f0 	.word	0x0800e0f0
 800aa48:	0800e0c8 	.word	0x0800e0c8
 800aa4c:	7ff00000 	.word	0x7ff00000
 800aa50:	7ca00000 	.word	0x7ca00000
 800aa54:	7fefffff 	.word	0x7fefffff
 800aa58:	f018 0310 	ands.w	r3, r8, #16
 800aa5c:	bf18      	it	ne
 800aa5e:	236a      	movne	r3, #106	; 0x6a
 800aa60:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ae10 <_strtod_l+0x970>
 800aa64:	9304      	str	r3, [sp, #16]
 800aa66:	4650      	mov	r0, sl
 800aa68:	4659      	mov	r1, fp
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f018 0f01 	tst.w	r8, #1
 800aa70:	d004      	beq.n	800aa7c <_strtod_l+0x5dc>
 800aa72:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aa76:	f7f5 fdbf 	bl	80005f8 <__aeabi_dmul>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800aa80:	f109 0908 	add.w	r9, r9, #8
 800aa84:	d1f2      	bne.n	800aa6c <_strtod_l+0x5cc>
 800aa86:	b10b      	cbz	r3, 800aa8c <_strtod_l+0x5ec>
 800aa88:	4682      	mov	sl, r0
 800aa8a:	468b      	mov	fp, r1
 800aa8c:	9b04      	ldr	r3, [sp, #16]
 800aa8e:	b1c3      	cbz	r3, 800aac2 <_strtod_l+0x622>
 800aa90:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aa94:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	4659      	mov	r1, fp
 800aa9c:	dd11      	ble.n	800aac2 <_strtod_l+0x622>
 800aa9e:	2b1f      	cmp	r3, #31
 800aaa0:	f340 8124 	ble.w	800acec <_strtod_l+0x84c>
 800aaa4:	2b34      	cmp	r3, #52	; 0x34
 800aaa6:	bfde      	ittt	le
 800aaa8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aaac:	f04f 33ff 	movle.w	r3, #4294967295
 800aab0:	fa03 f202 	lslle.w	r2, r3, r2
 800aab4:	f04f 0a00 	mov.w	sl, #0
 800aab8:	bfcc      	ite	gt
 800aaba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800aabe:	ea02 0b01 	andle.w	fp, r2, r1
 800aac2:	2200      	movs	r2, #0
 800aac4:	2300      	movs	r3, #0
 800aac6:	4650      	mov	r0, sl
 800aac8:	4659      	mov	r1, fp
 800aaca:	f7f5 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d1a2      	bne.n	800aa18 <_strtod_l+0x578>
 800aad2:	9b07      	ldr	r3, [sp, #28]
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	9908      	ldr	r1, [sp, #32]
 800aad8:	462b      	mov	r3, r5
 800aada:	463a      	mov	r2, r7
 800aadc:	4620      	mov	r0, r4
 800aade:	f002 f877 	bl	800cbd0 <__s2b>
 800aae2:	9007      	str	r0, [sp, #28]
 800aae4:	2800      	cmp	r0, #0
 800aae6:	f43f af1f 	beq.w	800a928 <_strtod_l+0x488>
 800aaea:	9b05      	ldr	r3, [sp, #20]
 800aaec:	1b9e      	subs	r6, r3, r6
 800aaee:	9b06      	ldr	r3, [sp, #24]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	bfb4      	ite	lt
 800aaf4:	4633      	movlt	r3, r6
 800aaf6:	2300      	movge	r3, #0
 800aaf8:	930c      	str	r3, [sp, #48]	; 0x30
 800aafa:	9b06      	ldr	r3, [sp, #24]
 800aafc:	2500      	movs	r5, #0
 800aafe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ab02:	9312      	str	r3, [sp, #72]	; 0x48
 800ab04:	462e      	mov	r6, r5
 800ab06:	9b07      	ldr	r3, [sp, #28]
 800ab08:	4620      	mov	r0, r4
 800ab0a:	6859      	ldr	r1, [r3, #4]
 800ab0c:	f001 ffb8 	bl	800ca80 <_Balloc>
 800ab10:	9005      	str	r0, [sp, #20]
 800ab12:	2800      	cmp	r0, #0
 800ab14:	f43f af0c 	beq.w	800a930 <_strtod_l+0x490>
 800ab18:	9b07      	ldr	r3, [sp, #28]
 800ab1a:	691a      	ldr	r2, [r3, #16]
 800ab1c:	3202      	adds	r2, #2
 800ab1e:	f103 010c 	add.w	r1, r3, #12
 800ab22:	0092      	lsls	r2, r2, #2
 800ab24:	300c      	adds	r0, #12
 800ab26:	f7fe fc94 	bl	8009452 <memcpy>
 800ab2a:	ec4b ab10 	vmov	d0, sl, fp
 800ab2e:	aa1a      	add	r2, sp, #104	; 0x68
 800ab30:	a919      	add	r1, sp, #100	; 0x64
 800ab32:	4620      	mov	r0, r4
 800ab34:	f002 fb92 	bl	800d25c <__d2b>
 800ab38:	ec4b ab18 	vmov	d8, sl, fp
 800ab3c:	9018      	str	r0, [sp, #96]	; 0x60
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	f43f aef6 	beq.w	800a930 <_strtod_l+0x490>
 800ab44:	2101      	movs	r1, #1
 800ab46:	4620      	mov	r0, r4
 800ab48:	f002 f8dc 	bl	800cd04 <__i2b>
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	f43f aeee 	beq.w	800a930 <_strtod_l+0x490>
 800ab54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab56:	9904      	ldr	r1, [sp, #16]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	bfab      	itete	ge
 800ab5c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ab5e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ab60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ab62:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ab66:	bfac      	ite	ge
 800ab68:	eb03 0902 	addge.w	r9, r3, r2
 800ab6c:	1ad7      	sublt	r7, r2, r3
 800ab6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ab70:	eba3 0801 	sub.w	r8, r3, r1
 800ab74:	4490      	add	r8, r2
 800ab76:	4ba1      	ldr	r3, [pc, #644]	; (800adfc <_strtod_l+0x95c>)
 800ab78:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab7c:	4598      	cmp	r8, r3
 800ab7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ab82:	f280 80c7 	bge.w	800ad14 <_strtod_l+0x874>
 800ab86:	eba3 0308 	sub.w	r3, r3, r8
 800ab8a:	2b1f      	cmp	r3, #31
 800ab8c:	eba2 0203 	sub.w	r2, r2, r3
 800ab90:	f04f 0101 	mov.w	r1, #1
 800ab94:	f300 80b1 	bgt.w	800acfa <_strtod_l+0x85a>
 800ab98:	fa01 f303 	lsl.w	r3, r1, r3
 800ab9c:	930d      	str	r3, [sp, #52]	; 0x34
 800ab9e:	2300      	movs	r3, #0
 800aba0:	9308      	str	r3, [sp, #32]
 800aba2:	eb09 0802 	add.w	r8, r9, r2
 800aba6:	9b04      	ldr	r3, [sp, #16]
 800aba8:	45c1      	cmp	r9, r8
 800abaa:	4417      	add	r7, r2
 800abac:	441f      	add	r7, r3
 800abae:	464b      	mov	r3, r9
 800abb0:	bfa8      	it	ge
 800abb2:	4643      	movge	r3, r8
 800abb4:	42bb      	cmp	r3, r7
 800abb6:	bfa8      	it	ge
 800abb8:	463b      	movge	r3, r7
 800abba:	2b00      	cmp	r3, #0
 800abbc:	bfc2      	ittt	gt
 800abbe:	eba8 0803 	subgt.w	r8, r8, r3
 800abc2:	1aff      	subgt	r7, r7, r3
 800abc4:	eba9 0903 	subgt.w	r9, r9, r3
 800abc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abca:	2b00      	cmp	r3, #0
 800abcc:	dd17      	ble.n	800abfe <_strtod_l+0x75e>
 800abce:	4631      	mov	r1, r6
 800abd0:	461a      	mov	r2, r3
 800abd2:	4620      	mov	r0, r4
 800abd4:	f002 f956 	bl	800ce84 <__pow5mult>
 800abd8:	4606      	mov	r6, r0
 800abda:	2800      	cmp	r0, #0
 800abdc:	f43f aea8 	beq.w	800a930 <_strtod_l+0x490>
 800abe0:	4601      	mov	r1, r0
 800abe2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800abe4:	4620      	mov	r0, r4
 800abe6:	f002 f8a3 	bl	800cd30 <__multiply>
 800abea:	900b      	str	r0, [sp, #44]	; 0x2c
 800abec:	2800      	cmp	r0, #0
 800abee:	f43f ae9f 	beq.w	800a930 <_strtod_l+0x490>
 800abf2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800abf4:	4620      	mov	r0, r4
 800abf6:	f001 ff83 	bl	800cb00 <_Bfree>
 800abfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abfc:	9318      	str	r3, [sp, #96]	; 0x60
 800abfe:	f1b8 0f00 	cmp.w	r8, #0
 800ac02:	f300 808c 	bgt.w	800ad1e <_strtod_l+0x87e>
 800ac06:	9b06      	ldr	r3, [sp, #24]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	dd08      	ble.n	800ac1e <_strtod_l+0x77e>
 800ac0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac0e:	9905      	ldr	r1, [sp, #20]
 800ac10:	4620      	mov	r0, r4
 800ac12:	f002 f937 	bl	800ce84 <__pow5mult>
 800ac16:	9005      	str	r0, [sp, #20]
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	f43f ae89 	beq.w	800a930 <_strtod_l+0x490>
 800ac1e:	2f00      	cmp	r7, #0
 800ac20:	dd08      	ble.n	800ac34 <_strtod_l+0x794>
 800ac22:	9905      	ldr	r1, [sp, #20]
 800ac24:	463a      	mov	r2, r7
 800ac26:	4620      	mov	r0, r4
 800ac28:	f002 f986 	bl	800cf38 <__lshift>
 800ac2c:	9005      	str	r0, [sp, #20]
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	f43f ae7e 	beq.w	800a930 <_strtod_l+0x490>
 800ac34:	f1b9 0f00 	cmp.w	r9, #0
 800ac38:	dd08      	ble.n	800ac4c <_strtod_l+0x7ac>
 800ac3a:	4631      	mov	r1, r6
 800ac3c:	464a      	mov	r2, r9
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f002 f97a 	bl	800cf38 <__lshift>
 800ac44:	4606      	mov	r6, r0
 800ac46:	2800      	cmp	r0, #0
 800ac48:	f43f ae72 	beq.w	800a930 <_strtod_l+0x490>
 800ac4c:	9a05      	ldr	r2, [sp, #20]
 800ac4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac50:	4620      	mov	r0, r4
 800ac52:	f002 f9fd 	bl	800d050 <__mdiff>
 800ac56:	4605      	mov	r5, r0
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	f43f ae69 	beq.w	800a930 <_strtod_l+0x490>
 800ac5e:	68c3      	ldr	r3, [r0, #12]
 800ac60:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac62:	2300      	movs	r3, #0
 800ac64:	60c3      	str	r3, [r0, #12]
 800ac66:	4631      	mov	r1, r6
 800ac68:	f002 f9d6 	bl	800d018 <__mcmp>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	da60      	bge.n	800ad32 <_strtod_l+0x892>
 800ac70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac72:	ea53 030a 	orrs.w	r3, r3, sl
 800ac76:	f040 8082 	bne.w	800ad7e <_strtod_l+0x8de>
 800ac7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d17d      	bne.n	800ad7e <_strtod_l+0x8de>
 800ac82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac86:	0d1b      	lsrs	r3, r3, #20
 800ac88:	051b      	lsls	r3, r3, #20
 800ac8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ac8e:	d976      	bls.n	800ad7e <_strtod_l+0x8de>
 800ac90:	696b      	ldr	r3, [r5, #20]
 800ac92:	b913      	cbnz	r3, 800ac9a <_strtod_l+0x7fa>
 800ac94:	692b      	ldr	r3, [r5, #16]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	dd71      	ble.n	800ad7e <_strtod_l+0x8de>
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f002 f94a 	bl	800cf38 <__lshift>
 800aca4:	4631      	mov	r1, r6
 800aca6:	4605      	mov	r5, r0
 800aca8:	f002 f9b6 	bl	800d018 <__mcmp>
 800acac:	2800      	cmp	r0, #0
 800acae:	dd66      	ble.n	800ad7e <_strtod_l+0x8de>
 800acb0:	9904      	ldr	r1, [sp, #16]
 800acb2:	4a53      	ldr	r2, [pc, #332]	; (800ae00 <_strtod_l+0x960>)
 800acb4:	465b      	mov	r3, fp
 800acb6:	2900      	cmp	r1, #0
 800acb8:	f000 8081 	beq.w	800adbe <_strtod_l+0x91e>
 800acbc:	ea02 010b 	and.w	r1, r2, fp
 800acc0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800acc4:	dc7b      	bgt.n	800adbe <_strtod_l+0x91e>
 800acc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800acca:	f77f aea9 	ble.w	800aa20 <_strtod_l+0x580>
 800acce:	4b4d      	ldr	r3, [pc, #308]	; (800ae04 <_strtod_l+0x964>)
 800acd0:	4650      	mov	r0, sl
 800acd2:	4659      	mov	r1, fp
 800acd4:	2200      	movs	r2, #0
 800acd6:	f7f5 fc8f 	bl	80005f8 <__aeabi_dmul>
 800acda:	460b      	mov	r3, r1
 800acdc:	4303      	orrs	r3, r0
 800acde:	bf08      	it	eq
 800ace0:	2322      	moveq	r3, #34	; 0x22
 800ace2:	4682      	mov	sl, r0
 800ace4:	468b      	mov	fp, r1
 800ace6:	bf08      	it	eq
 800ace8:	6023      	streq	r3, [r4, #0]
 800acea:	e62b      	b.n	800a944 <_strtod_l+0x4a4>
 800acec:	f04f 32ff 	mov.w	r2, #4294967295
 800acf0:	fa02 f303 	lsl.w	r3, r2, r3
 800acf4:	ea03 0a0a 	and.w	sl, r3, sl
 800acf8:	e6e3      	b.n	800aac2 <_strtod_l+0x622>
 800acfa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800acfe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ad02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ad06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ad0a:	fa01 f308 	lsl.w	r3, r1, r8
 800ad0e:	9308      	str	r3, [sp, #32]
 800ad10:	910d      	str	r1, [sp, #52]	; 0x34
 800ad12:	e746      	b.n	800aba2 <_strtod_l+0x702>
 800ad14:	2300      	movs	r3, #0
 800ad16:	9308      	str	r3, [sp, #32]
 800ad18:	2301      	movs	r3, #1
 800ad1a:	930d      	str	r3, [sp, #52]	; 0x34
 800ad1c:	e741      	b.n	800aba2 <_strtod_l+0x702>
 800ad1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad20:	4642      	mov	r2, r8
 800ad22:	4620      	mov	r0, r4
 800ad24:	f002 f908 	bl	800cf38 <__lshift>
 800ad28:	9018      	str	r0, [sp, #96]	; 0x60
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	f47f af6b 	bne.w	800ac06 <_strtod_l+0x766>
 800ad30:	e5fe      	b.n	800a930 <_strtod_l+0x490>
 800ad32:	465f      	mov	r7, fp
 800ad34:	d16e      	bne.n	800ae14 <_strtod_l+0x974>
 800ad36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad3c:	b342      	cbz	r2, 800ad90 <_strtod_l+0x8f0>
 800ad3e:	4a32      	ldr	r2, [pc, #200]	; (800ae08 <_strtod_l+0x968>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d128      	bne.n	800ad96 <_strtod_l+0x8f6>
 800ad44:	9b04      	ldr	r3, [sp, #16]
 800ad46:	4651      	mov	r1, sl
 800ad48:	b1eb      	cbz	r3, 800ad86 <_strtod_l+0x8e6>
 800ad4a:	4b2d      	ldr	r3, [pc, #180]	; (800ae00 <_strtod_l+0x960>)
 800ad4c:	403b      	ands	r3, r7
 800ad4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad52:	f04f 32ff 	mov.w	r2, #4294967295
 800ad56:	d819      	bhi.n	800ad8c <_strtod_l+0x8ec>
 800ad58:	0d1b      	lsrs	r3, r3, #20
 800ad5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad62:	4299      	cmp	r1, r3
 800ad64:	d117      	bne.n	800ad96 <_strtod_l+0x8f6>
 800ad66:	4b29      	ldr	r3, [pc, #164]	; (800ae0c <_strtod_l+0x96c>)
 800ad68:	429f      	cmp	r7, r3
 800ad6a:	d102      	bne.n	800ad72 <_strtod_l+0x8d2>
 800ad6c:	3101      	adds	r1, #1
 800ad6e:	f43f addf 	beq.w	800a930 <_strtod_l+0x490>
 800ad72:	4b23      	ldr	r3, [pc, #140]	; (800ae00 <_strtod_l+0x960>)
 800ad74:	403b      	ands	r3, r7
 800ad76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ad7a:	f04f 0a00 	mov.w	sl, #0
 800ad7e:	9b04      	ldr	r3, [sp, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1a4      	bne.n	800acce <_strtod_l+0x82e>
 800ad84:	e5de      	b.n	800a944 <_strtod_l+0x4a4>
 800ad86:	f04f 33ff 	mov.w	r3, #4294967295
 800ad8a:	e7ea      	b.n	800ad62 <_strtod_l+0x8c2>
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	e7e8      	b.n	800ad62 <_strtod_l+0x8c2>
 800ad90:	ea53 030a 	orrs.w	r3, r3, sl
 800ad94:	d08c      	beq.n	800acb0 <_strtod_l+0x810>
 800ad96:	9b08      	ldr	r3, [sp, #32]
 800ad98:	b1db      	cbz	r3, 800add2 <_strtod_l+0x932>
 800ad9a:	423b      	tst	r3, r7
 800ad9c:	d0ef      	beq.n	800ad7e <_strtod_l+0x8de>
 800ad9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ada0:	9a04      	ldr	r2, [sp, #16]
 800ada2:	4650      	mov	r0, sl
 800ada4:	4659      	mov	r1, fp
 800ada6:	b1c3      	cbz	r3, 800adda <_strtod_l+0x93a>
 800ada8:	f7ff fb5b 	bl	800a462 <sulp>
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	ec51 0b18 	vmov	r0, r1, d8
 800adb4:	f7f5 fa6a 	bl	800028c <__adddf3>
 800adb8:	4682      	mov	sl, r0
 800adba:	468b      	mov	fp, r1
 800adbc:	e7df      	b.n	800ad7e <_strtod_l+0x8de>
 800adbe:	4013      	ands	r3, r2
 800adc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800adc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800adc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800adcc:	f04f 3aff 	mov.w	sl, #4294967295
 800add0:	e7d5      	b.n	800ad7e <_strtod_l+0x8de>
 800add2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800add4:	ea13 0f0a 	tst.w	r3, sl
 800add8:	e7e0      	b.n	800ad9c <_strtod_l+0x8fc>
 800adda:	f7ff fb42 	bl	800a462 <sulp>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	ec51 0b18 	vmov	r0, r1, d8
 800ade6:	f7f5 fa4f 	bl	8000288 <__aeabi_dsub>
 800adea:	2200      	movs	r2, #0
 800adec:	2300      	movs	r3, #0
 800adee:	4682      	mov	sl, r0
 800adf0:	468b      	mov	fp, r1
 800adf2:	f7f5 fe69 	bl	8000ac8 <__aeabi_dcmpeq>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d0c1      	beq.n	800ad7e <_strtod_l+0x8de>
 800adfa:	e611      	b.n	800aa20 <_strtod_l+0x580>
 800adfc:	fffffc02 	.word	0xfffffc02
 800ae00:	7ff00000 	.word	0x7ff00000
 800ae04:	39500000 	.word	0x39500000
 800ae08:	000fffff 	.word	0x000fffff
 800ae0c:	7fefffff 	.word	0x7fefffff
 800ae10:	0800ddf8 	.word	0x0800ddf8
 800ae14:	4631      	mov	r1, r6
 800ae16:	4628      	mov	r0, r5
 800ae18:	f002 fa7c 	bl	800d314 <__ratio>
 800ae1c:	ec59 8b10 	vmov	r8, r9, d0
 800ae20:	ee10 0a10 	vmov	r0, s0
 800ae24:	2200      	movs	r2, #0
 800ae26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae2a:	4649      	mov	r1, r9
 800ae2c:	f7f5 fe60 	bl	8000af0 <__aeabi_dcmple>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d07a      	beq.n	800af2a <_strtod_l+0xa8a>
 800ae34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d04a      	beq.n	800aed0 <_strtod_l+0xa30>
 800ae3a:	4b95      	ldr	r3, [pc, #596]	; (800b090 <_strtod_l+0xbf0>)
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ae42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b090 <_strtod_l+0xbf0>
 800ae46:	f04f 0800 	mov.w	r8, #0
 800ae4a:	4b92      	ldr	r3, [pc, #584]	; (800b094 <_strtod_l+0xbf4>)
 800ae4c:	403b      	ands	r3, r7
 800ae4e:	930d      	str	r3, [sp, #52]	; 0x34
 800ae50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae52:	4b91      	ldr	r3, [pc, #580]	; (800b098 <_strtod_l+0xbf8>)
 800ae54:	429a      	cmp	r2, r3
 800ae56:	f040 80b0 	bne.w	800afba <_strtod_l+0xb1a>
 800ae5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae5e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ae62:	ec4b ab10 	vmov	d0, sl, fp
 800ae66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ae6a:	f002 f97b 	bl	800d164 <__ulp>
 800ae6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae72:	ec53 2b10 	vmov	r2, r3, d0
 800ae76:	f7f5 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ae7a:	4652      	mov	r2, sl
 800ae7c:	465b      	mov	r3, fp
 800ae7e:	f7f5 fa05 	bl	800028c <__adddf3>
 800ae82:	460b      	mov	r3, r1
 800ae84:	4983      	ldr	r1, [pc, #524]	; (800b094 <_strtod_l+0xbf4>)
 800ae86:	4a85      	ldr	r2, [pc, #532]	; (800b09c <_strtod_l+0xbfc>)
 800ae88:	4019      	ands	r1, r3
 800ae8a:	4291      	cmp	r1, r2
 800ae8c:	4682      	mov	sl, r0
 800ae8e:	d960      	bls.n	800af52 <_strtod_l+0xab2>
 800ae90:	ee18 3a90 	vmov	r3, s17
 800ae94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d104      	bne.n	800aea6 <_strtod_l+0xa06>
 800ae9c:	ee18 3a10 	vmov	r3, s16
 800aea0:	3301      	adds	r3, #1
 800aea2:	f43f ad45 	beq.w	800a930 <_strtod_l+0x490>
 800aea6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b0a8 <_strtod_l+0xc08>
 800aeaa:	f04f 3aff 	mov.w	sl, #4294967295
 800aeae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f001 fe25 	bl	800cb00 <_Bfree>
 800aeb6:	9905      	ldr	r1, [sp, #20]
 800aeb8:	4620      	mov	r0, r4
 800aeba:	f001 fe21 	bl	800cb00 <_Bfree>
 800aebe:	4631      	mov	r1, r6
 800aec0:	4620      	mov	r0, r4
 800aec2:	f001 fe1d 	bl	800cb00 <_Bfree>
 800aec6:	4629      	mov	r1, r5
 800aec8:	4620      	mov	r0, r4
 800aeca:	f001 fe19 	bl	800cb00 <_Bfree>
 800aece:	e61a      	b.n	800ab06 <_strtod_l+0x666>
 800aed0:	f1ba 0f00 	cmp.w	sl, #0
 800aed4:	d11b      	bne.n	800af0e <_strtod_l+0xa6e>
 800aed6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aeda:	b9f3      	cbnz	r3, 800af1a <_strtod_l+0xa7a>
 800aedc:	4b6c      	ldr	r3, [pc, #432]	; (800b090 <_strtod_l+0xbf0>)
 800aede:	2200      	movs	r2, #0
 800aee0:	4640      	mov	r0, r8
 800aee2:	4649      	mov	r1, r9
 800aee4:	f7f5 fdfa 	bl	8000adc <__aeabi_dcmplt>
 800aee8:	b9d0      	cbnz	r0, 800af20 <_strtod_l+0xa80>
 800aeea:	4640      	mov	r0, r8
 800aeec:	4649      	mov	r1, r9
 800aeee:	4b6c      	ldr	r3, [pc, #432]	; (800b0a0 <_strtod_l+0xc00>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	f7f5 fb81 	bl	80005f8 <__aeabi_dmul>
 800aef6:	4680      	mov	r8, r0
 800aef8:	4689      	mov	r9, r1
 800aefa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aefe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800af02:	9315      	str	r3, [sp, #84]	; 0x54
 800af04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800af08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af0c:	e79d      	b.n	800ae4a <_strtod_l+0x9aa>
 800af0e:	f1ba 0f01 	cmp.w	sl, #1
 800af12:	d102      	bne.n	800af1a <_strtod_l+0xa7a>
 800af14:	2f00      	cmp	r7, #0
 800af16:	f43f ad83 	beq.w	800aa20 <_strtod_l+0x580>
 800af1a:	4b62      	ldr	r3, [pc, #392]	; (800b0a4 <_strtod_l+0xc04>)
 800af1c:	2200      	movs	r2, #0
 800af1e:	e78e      	b.n	800ae3e <_strtod_l+0x99e>
 800af20:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b0a0 <_strtod_l+0xc00>
 800af24:	f04f 0800 	mov.w	r8, #0
 800af28:	e7e7      	b.n	800aefa <_strtod_l+0xa5a>
 800af2a:	4b5d      	ldr	r3, [pc, #372]	; (800b0a0 <_strtod_l+0xc00>)
 800af2c:	4640      	mov	r0, r8
 800af2e:	4649      	mov	r1, r9
 800af30:	2200      	movs	r2, #0
 800af32:	f7f5 fb61 	bl	80005f8 <__aeabi_dmul>
 800af36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af38:	4680      	mov	r8, r0
 800af3a:	4689      	mov	r9, r1
 800af3c:	b933      	cbnz	r3, 800af4c <_strtod_l+0xaac>
 800af3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af42:	900e      	str	r0, [sp, #56]	; 0x38
 800af44:	930f      	str	r3, [sp, #60]	; 0x3c
 800af46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800af4a:	e7dd      	b.n	800af08 <_strtod_l+0xa68>
 800af4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800af50:	e7f9      	b.n	800af46 <_strtod_l+0xaa6>
 800af52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800af56:	9b04      	ldr	r3, [sp, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1a8      	bne.n	800aeae <_strtod_l+0xa0e>
 800af5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af62:	0d1b      	lsrs	r3, r3, #20
 800af64:	051b      	lsls	r3, r3, #20
 800af66:	429a      	cmp	r2, r3
 800af68:	d1a1      	bne.n	800aeae <_strtod_l+0xa0e>
 800af6a:	4640      	mov	r0, r8
 800af6c:	4649      	mov	r1, r9
 800af6e:	f7f5 fea3 	bl	8000cb8 <__aeabi_d2lz>
 800af72:	f7f5 fb13 	bl	800059c <__aeabi_l2d>
 800af76:	4602      	mov	r2, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	4640      	mov	r0, r8
 800af7c:	4649      	mov	r1, r9
 800af7e:	f7f5 f983 	bl	8000288 <__aeabi_dsub>
 800af82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af88:	ea43 030a 	orr.w	r3, r3, sl
 800af8c:	4313      	orrs	r3, r2
 800af8e:	4680      	mov	r8, r0
 800af90:	4689      	mov	r9, r1
 800af92:	d055      	beq.n	800b040 <_strtod_l+0xba0>
 800af94:	a336      	add	r3, pc, #216	; (adr r3, 800b070 <_strtod_l+0xbd0>)
 800af96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9a:	f7f5 fd9f 	bl	8000adc <__aeabi_dcmplt>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	f47f acd0 	bne.w	800a944 <_strtod_l+0x4a4>
 800afa4:	a334      	add	r3, pc, #208	; (adr r3, 800b078 <_strtod_l+0xbd8>)
 800afa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afaa:	4640      	mov	r0, r8
 800afac:	4649      	mov	r1, r9
 800afae:	f7f5 fdb3 	bl	8000b18 <__aeabi_dcmpgt>
 800afb2:	2800      	cmp	r0, #0
 800afb4:	f43f af7b 	beq.w	800aeae <_strtod_l+0xa0e>
 800afb8:	e4c4      	b.n	800a944 <_strtod_l+0x4a4>
 800afba:	9b04      	ldr	r3, [sp, #16]
 800afbc:	b333      	cbz	r3, 800b00c <_strtod_l+0xb6c>
 800afbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800afc4:	d822      	bhi.n	800b00c <_strtod_l+0xb6c>
 800afc6:	a32e      	add	r3, pc, #184	; (adr r3, 800b080 <_strtod_l+0xbe0>)
 800afc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afcc:	4640      	mov	r0, r8
 800afce:	4649      	mov	r1, r9
 800afd0:	f7f5 fd8e 	bl	8000af0 <__aeabi_dcmple>
 800afd4:	b1a0      	cbz	r0, 800b000 <_strtod_l+0xb60>
 800afd6:	4649      	mov	r1, r9
 800afd8:	4640      	mov	r0, r8
 800afda:	f7f5 fde5 	bl	8000ba8 <__aeabi_d2uiz>
 800afde:	2801      	cmp	r0, #1
 800afe0:	bf38      	it	cc
 800afe2:	2001      	movcc	r0, #1
 800afe4:	f7f5 fa8e 	bl	8000504 <__aeabi_ui2d>
 800afe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afea:	4680      	mov	r8, r0
 800afec:	4689      	mov	r9, r1
 800afee:	bb23      	cbnz	r3, 800b03a <_strtod_l+0xb9a>
 800aff0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aff4:	9010      	str	r0, [sp, #64]	; 0x40
 800aff6:	9311      	str	r3, [sp, #68]	; 0x44
 800aff8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800affc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b002:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b004:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b008:	1a9b      	subs	r3, r3, r2
 800b00a:	9309      	str	r3, [sp, #36]	; 0x24
 800b00c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b010:	eeb0 0a48 	vmov.f32	s0, s16
 800b014:	eef0 0a68 	vmov.f32	s1, s17
 800b018:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b01c:	f002 f8a2 	bl	800d164 <__ulp>
 800b020:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b024:	ec53 2b10 	vmov	r2, r3, d0
 800b028:	f7f5 fae6 	bl	80005f8 <__aeabi_dmul>
 800b02c:	ec53 2b18 	vmov	r2, r3, d8
 800b030:	f7f5 f92c 	bl	800028c <__adddf3>
 800b034:	4682      	mov	sl, r0
 800b036:	468b      	mov	fp, r1
 800b038:	e78d      	b.n	800af56 <_strtod_l+0xab6>
 800b03a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b03e:	e7db      	b.n	800aff8 <_strtod_l+0xb58>
 800b040:	a311      	add	r3, pc, #68	; (adr r3, 800b088 <_strtod_l+0xbe8>)
 800b042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b046:	f7f5 fd49 	bl	8000adc <__aeabi_dcmplt>
 800b04a:	e7b2      	b.n	800afb2 <_strtod_l+0xb12>
 800b04c:	2300      	movs	r3, #0
 800b04e:	930a      	str	r3, [sp, #40]	; 0x28
 800b050:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b052:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b054:	6013      	str	r3, [r2, #0]
 800b056:	f7ff ba6b 	b.w	800a530 <_strtod_l+0x90>
 800b05a:	2a65      	cmp	r2, #101	; 0x65
 800b05c:	f43f ab5f 	beq.w	800a71e <_strtod_l+0x27e>
 800b060:	2a45      	cmp	r2, #69	; 0x45
 800b062:	f43f ab5c 	beq.w	800a71e <_strtod_l+0x27e>
 800b066:	2301      	movs	r3, #1
 800b068:	f7ff bb94 	b.w	800a794 <_strtod_l+0x2f4>
 800b06c:	f3af 8000 	nop.w
 800b070:	94a03595 	.word	0x94a03595
 800b074:	3fdfffff 	.word	0x3fdfffff
 800b078:	35afe535 	.word	0x35afe535
 800b07c:	3fe00000 	.word	0x3fe00000
 800b080:	ffc00000 	.word	0xffc00000
 800b084:	41dfffff 	.word	0x41dfffff
 800b088:	94a03595 	.word	0x94a03595
 800b08c:	3fcfffff 	.word	0x3fcfffff
 800b090:	3ff00000 	.word	0x3ff00000
 800b094:	7ff00000 	.word	0x7ff00000
 800b098:	7fe00000 	.word	0x7fe00000
 800b09c:	7c9fffff 	.word	0x7c9fffff
 800b0a0:	3fe00000 	.word	0x3fe00000
 800b0a4:	bff00000 	.word	0xbff00000
 800b0a8:	7fefffff 	.word	0x7fefffff

0800b0ac <_strtod_r>:
 800b0ac:	4b01      	ldr	r3, [pc, #4]	; (800b0b4 <_strtod_r+0x8>)
 800b0ae:	f7ff b9f7 	b.w	800a4a0 <_strtod_l>
 800b0b2:	bf00      	nop
 800b0b4:	200000ac 	.word	0x200000ac

0800b0b8 <_strtol_l.constprop.0>:
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0be:	d001      	beq.n	800b0c4 <_strtol_l.constprop.0+0xc>
 800b0c0:	2b24      	cmp	r3, #36	; 0x24
 800b0c2:	d906      	bls.n	800b0d2 <_strtol_l.constprop.0+0x1a>
 800b0c4:	f7fe f8a2 	bl	800920c <__errno>
 800b0c8:	2316      	movs	r3, #22
 800b0ca:	6003      	str	r3, [r0, #0]
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b1b8 <_strtol_l.constprop.0+0x100>
 800b0d6:	460d      	mov	r5, r1
 800b0d8:	462e      	mov	r6, r5
 800b0da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0de:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b0e2:	f017 0708 	ands.w	r7, r7, #8
 800b0e6:	d1f7      	bne.n	800b0d8 <_strtol_l.constprop.0+0x20>
 800b0e8:	2c2d      	cmp	r4, #45	; 0x2d
 800b0ea:	d132      	bne.n	800b152 <_strtol_l.constprop.0+0x9a>
 800b0ec:	782c      	ldrb	r4, [r5, #0]
 800b0ee:	2701      	movs	r7, #1
 800b0f0:	1cb5      	adds	r5, r6, #2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d05b      	beq.n	800b1ae <_strtol_l.constprop.0+0xf6>
 800b0f6:	2b10      	cmp	r3, #16
 800b0f8:	d109      	bne.n	800b10e <_strtol_l.constprop.0+0x56>
 800b0fa:	2c30      	cmp	r4, #48	; 0x30
 800b0fc:	d107      	bne.n	800b10e <_strtol_l.constprop.0+0x56>
 800b0fe:	782c      	ldrb	r4, [r5, #0]
 800b100:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b104:	2c58      	cmp	r4, #88	; 0x58
 800b106:	d14d      	bne.n	800b1a4 <_strtol_l.constprop.0+0xec>
 800b108:	786c      	ldrb	r4, [r5, #1]
 800b10a:	2310      	movs	r3, #16
 800b10c:	3502      	adds	r5, #2
 800b10e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b112:	f108 38ff 	add.w	r8, r8, #4294967295
 800b116:	f04f 0c00 	mov.w	ip, #0
 800b11a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b11e:	4666      	mov	r6, ip
 800b120:	fb03 8a19 	mls	sl, r3, r9, r8
 800b124:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b128:	f1be 0f09 	cmp.w	lr, #9
 800b12c:	d816      	bhi.n	800b15c <_strtol_l.constprop.0+0xa4>
 800b12e:	4674      	mov	r4, lr
 800b130:	42a3      	cmp	r3, r4
 800b132:	dd24      	ble.n	800b17e <_strtol_l.constprop.0+0xc6>
 800b134:	f1bc 0f00 	cmp.w	ip, #0
 800b138:	db1e      	blt.n	800b178 <_strtol_l.constprop.0+0xc0>
 800b13a:	45b1      	cmp	r9, r6
 800b13c:	d31c      	bcc.n	800b178 <_strtol_l.constprop.0+0xc0>
 800b13e:	d101      	bne.n	800b144 <_strtol_l.constprop.0+0x8c>
 800b140:	45a2      	cmp	sl, r4
 800b142:	db19      	blt.n	800b178 <_strtol_l.constprop.0+0xc0>
 800b144:	fb06 4603 	mla	r6, r6, r3, r4
 800b148:	f04f 0c01 	mov.w	ip, #1
 800b14c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b150:	e7e8      	b.n	800b124 <_strtol_l.constprop.0+0x6c>
 800b152:	2c2b      	cmp	r4, #43	; 0x2b
 800b154:	bf04      	itt	eq
 800b156:	782c      	ldrbeq	r4, [r5, #0]
 800b158:	1cb5      	addeq	r5, r6, #2
 800b15a:	e7ca      	b.n	800b0f2 <_strtol_l.constprop.0+0x3a>
 800b15c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b160:	f1be 0f19 	cmp.w	lr, #25
 800b164:	d801      	bhi.n	800b16a <_strtol_l.constprop.0+0xb2>
 800b166:	3c37      	subs	r4, #55	; 0x37
 800b168:	e7e2      	b.n	800b130 <_strtol_l.constprop.0+0x78>
 800b16a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b16e:	f1be 0f19 	cmp.w	lr, #25
 800b172:	d804      	bhi.n	800b17e <_strtol_l.constprop.0+0xc6>
 800b174:	3c57      	subs	r4, #87	; 0x57
 800b176:	e7db      	b.n	800b130 <_strtol_l.constprop.0+0x78>
 800b178:	f04f 3cff 	mov.w	ip, #4294967295
 800b17c:	e7e6      	b.n	800b14c <_strtol_l.constprop.0+0x94>
 800b17e:	f1bc 0f00 	cmp.w	ip, #0
 800b182:	da05      	bge.n	800b190 <_strtol_l.constprop.0+0xd8>
 800b184:	2322      	movs	r3, #34	; 0x22
 800b186:	6003      	str	r3, [r0, #0]
 800b188:	4646      	mov	r6, r8
 800b18a:	b942      	cbnz	r2, 800b19e <_strtol_l.constprop.0+0xe6>
 800b18c:	4630      	mov	r0, r6
 800b18e:	e79e      	b.n	800b0ce <_strtol_l.constprop.0+0x16>
 800b190:	b107      	cbz	r7, 800b194 <_strtol_l.constprop.0+0xdc>
 800b192:	4276      	negs	r6, r6
 800b194:	2a00      	cmp	r2, #0
 800b196:	d0f9      	beq.n	800b18c <_strtol_l.constprop.0+0xd4>
 800b198:	f1bc 0f00 	cmp.w	ip, #0
 800b19c:	d000      	beq.n	800b1a0 <_strtol_l.constprop.0+0xe8>
 800b19e:	1e69      	subs	r1, r5, #1
 800b1a0:	6011      	str	r1, [r2, #0]
 800b1a2:	e7f3      	b.n	800b18c <_strtol_l.constprop.0+0xd4>
 800b1a4:	2430      	movs	r4, #48	; 0x30
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1b1      	bne.n	800b10e <_strtol_l.constprop.0+0x56>
 800b1aa:	2308      	movs	r3, #8
 800b1ac:	e7af      	b.n	800b10e <_strtol_l.constprop.0+0x56>
 800b1ae:	2c30      	cmp	r4, #48	; 0x30
 800b1b0:	d0a5      	beq.n	800b0fe <_strtol_l.constprop.0+0x46>
 800b1b2:	230a      	movs	r3, #10
 800b1b4:	e7ab      	b.n	800b10e <_strtol_l.constprop.0+0x56>
 800b1b6:	bf00      	nop
 800b1b8:	0800de5d 	.word	0x0800de5d

0800b1bc <_strtol_r>:
 800b1bc:	f7ff bf7c 	b.w	800b0b8 <_strtol_l.constprop.0>

0800b1c0 <__swbuf_r>:
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c2:	460e      	mov	r6, r1
 800b1c4:	4614      	mov	r4, r2
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	b118      	cbz	r0, 800b1d2 <__swbuf_r+0x12>
 800b1ca:	6983      	ldr	r3, [r0, #24]
 800b1cc:	b90b      	cbnz	r3, 800b1d2 <__swbuf_r+0x12>
 800b1ce:	f7fe f87b 	bl	80092c8 <__sinit>
 800b1d2:	4b21      	ldr	r3, [pc, #132]	; (800b258 <__swbuf_r+0x98>)
 800b1d4:	429c      	cmp	r4, r3
 800b1d6:	d12b      	bne.n	800b230 <__swbuf_r+0x70>
 800b1d8:	686c      	ldr	r4, [r5, #4]
 800b1da:	69a3      	ldr	r3, [r4, #24]
 800b1dc:	60a3      	str	r3, [r4, #8]
 800b1de:	89a3      	ldrh	r3, [r4, #12]
 800b1e0:	071a      	lsls	r2, r3, #28
 800b1e2:	d52f      	bpl.n	800b244 <__swbuf_r+0x84>
 800b1e4:	6923      	ldr	r3, [r4, #16]
 800b1e6:	b36b      	cbz	r3, 800b244 <__swbuf_r+0x84>
 800b1e8:	6923      	ldr	r3, [r4, #16]
 800b1ea:	6820      	ldr	r0, [r4, #0]
 800b1ec:	1ac0      	subs	r0, r0, r3
 800b1ee:	6963      	ldr	r3, [r4, #20]
 800b1f0:	b2f6      	uxtb	r6, r6
 800b1f2:	4283      	cmp	r3, r0
 800b1f4:	4637      	mov	r7, r6
 800b1f6:	dc04      	bgt.n	800b202 <__swbuf_r+0x42>
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f000 ffe0 	bl	800c1c0 <_fflush_r>
 800b200:	bb30      	cbnz	r0, 800b250 <__swbuf_r+0x90>
 800b202:	68a3      	ldr	r3, [r4, #8]
 800b204:	3b01      	subs	r3, #1
 800b206:	60a3      	str	r3, [r4, #8]
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	1c5a      	adds	r2, r3, #1
 800b20c:	6022      	str	r2, [r4, #0]
 800b20e:	701e      	strb	r6, [r3, #0]
 800b210:	6963      	ldr	r3, [r4, #20]
 800b212:	3001      	adds	r0, #1
 800b214:	4283      	cmp	r3, r0
 800b216:	d004      	beq.n	800b222 <__swbuf_r+0x62>
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	07db      	lsls	r3, r3, #31
 800b21c:	d506      	bpl.n	800b22c <__swbuf_r+0x6c>
 800b21e:	2e0a      	cmp	r6, #10
 800b220:	d104      	bne.n	800b22c <__swbuf_r+0x6c>
 800b222:	4621      	mov	r1, r4
 800b224:	4628      	mov	r0, r5
 800b226:	f000 ffcb 	bl	800c1c0 <_fflush_r>
 800b22a:	b988      	cbnz	r0, 800b250 <__swbuf_r+0x90>
 800b22c:	4638      	mov	r0, r7
 800b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b230:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <__swbuf_r+0x9c>)
 800b232:	429c      	cmp	r4, r3
 800b234:	d101      	bne.n	800b23a <__swbuf_r+0x7a>
 800b236:	68ac      	ldr	r4, [r5, #8]
 800b238:	e7cf      	b.n	800b1da <__swbuf_r+0x1a>
 800b23a:	4b09      	ldr	r3, [pc, #36]	; (800b260 <__swbuf_r+0xa0>)
 800b23c:	429c      	cmp	r4, r3
 800b23e:	bf08      	it	eq
 800b240:	68ec      	ldreq	r4, [r5, #12]
 800b242:	e7ca      	b.n	800b1da <__swbuf_r+0x1a>
 800b244:	4621      	mov	r1, r4
 800b246:	4628      	mov	r0, r5
 800b248:	f000 f81e 	bl	800b288 <__swsetup_r>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d0cb      	beq.n	800b1e8 <__swbuf_r+0x28>
 800b250:	f04f 37ff 	mov.w	r7, #4294967295
 800b254:	e7ea      	b.n	800b22c <__swbuf_r+0x6c>
 800b256:	bf00      	nop
 800b258:	0800dd4c 	.word	0x0800dd4c
 800b25c:	0800dd6c 	.word	0x0800dd6c
 800b260:	0800dd2c 	.word	0x0800dd2c

0800b264 <_write_r>:
 800b264:	b538      	push	{r3, r4, r5, lr}
 800b266:	4d07      	ldr	r5, [pc, #28]	; (800b284 <_write_r+0x20>)
 800b268:	4604      	mov	r4, r0
 800b26a:	4608      	mov	r0, r1
 800b26c:	4611      	mov	r1, r2
 800b26e:	2200      	movs	r2, #0
 800b270:	602a      	str	r2, [r5, #0]
 800b272:	461a      	mov	r2, r3
 800b274:	f7f6 f96f 	bl	8001556 <_write>
 800b278:	1c43      	adds	r3, r0, #1
 800b27a:	d102      	bne.n	800b282 <_write_r+0x1e>
 800b27c:	682b      	ldr	r3, [r5, #0]
 800b27e:	b103      	cbz	r3, 800b282 <_write_r+0x1e>
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	bd38      	pop	{r3, r4, r5, pc}
 800b284:	20005cfc 	.word	0x20005cfc

0800b288 <__swsetup_r>:
 800b288:	4b32      	ldr	r3, [pc, #200]	; (800b354 <__swsetup_r+0xcc>)
 800b28a:	b570      	push	{r4, r5, r6, lr}
 800b28c:	681d      	ldr	r5, [r3, #0]
 800b28e:	4606      	mov	r6, r0
 800b290:	460c      	mov	r4, r1
 800b292:	b125      	cbz	r5, 800b29e <__swsetup_r+0x16>
 800b294:	69ab      	ldr	r3, [r5, #24]
 800b296:	b913      	cbnz	r3, 800b29e <__swsetup_r+0x16>
 800b298:	4628      	mov	r0, r5
 800b29a:	f7fe f815 	bl	80092c8 <__sinit>
 800b29e:	4b2e      	ldr	r3, [pc, #184]	; (800b358 <__swsetup_r+0xd0>)
 800b2a0:	429c      	cmp	r4, r3
 800b2a2:	d10f      	bne.n	800b2c4 <__swsetup_r+0x3c>
 800b2a4:	686c      	ldr	r4, [r5, #4]
 800b2a6:	89a3      	ldrh	r3, [r4, #12]
 800b2a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2ac:	0719      	lsls	r1, r3, #28
 800b2ae:	d42c      	bmi.n	800b30a <__swsetup_r+0x82>
 800b2b0:	06dd      	lsls	r5, r3, #27
 800b2b2:	d411      	bmi.n	800b2d8 <__swsetup_r+0x50>
 800b2b4:	2309      	movs	r3, #9
 800b2b6:	6033      	str	r3, [r6, #0]
 800b2b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b2bc:	81a3      	strh	r3, [r4, #12]
 800b2be:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c2:	e03e      	b.n	800b342 <__swsetup_r+0xba>
 800b2c4:	4b25      	ldr	r3, [pc, #148]	; (800b35c <__swsetup_r+0xd4>)
 800b2c6:	429c      	cmp	r4, r3
 800b2c8:	d101      	bne.n	800b2ce <__swsetup_r+0x46>
 800b2ca:	68ac      	ldr	r4, [r5, #8]
 800b2cc:	e7eb      	b.n	800b2a6 <__swsetup_r+0x1e>
 800b2ce:	4b24      	ldr	r3, [pc, #144]	; (800b360 <__swsetup_r+0xd8>)
 800b2d0:	429c      	cmp	r4, r3
 800b2d2:	bf08      	it	eq
 800b2d4:	68ec      	ldreq	r4, [r5, #12]
 800b2d6:	e7e6      	b.n	800b2a6 <__swsetup_r+0x1e>
 800b2d8:	0758      	lsls	r0, r3, #29
 800b2da:	d512      	bpl.n	800b302 <__swsetup_r+0x7a>
 800b2dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2de:	b141      	cbz	r1, 800b2f2 <__swsetup_r+0x6a>
 800b2e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2e4:	4299      	cmp	r1, r3
 800b2e6:	d002      	beq.n	800b2ee <__swsetup_r+0x66>
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f002 f8a1 	bl	800d430 <_free_r>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	6363      	str	r3, [r4, #52]	; 0x34
 800b2f2:	89a3      	ldrh	r3, [r4, #12]
 800b2f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2f8:	81a3      	strh	r3, [r4, #12]
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	6063      	str	r3, [r4, #4]
 800b2fe:	6923      	ldr	r3, [r4, #16]
 800b300:	6023      	str	r3, [r4, #0]
 800b302:	89a3      	ldrh	r3, [r4, #12]
 800b304:	f043 0308 	orr.w	r3, r3, #8
 800b308:	81a3      	strh	r3, [r4, #12]
 800b30a:	6923      	ldr	r3, [r4, #16]
 800b30c:	b94b      	cbnz	r3, 800b322 <__swsetup_r+0x9a>
 800b30e:	89a3      	ldrh	r3, [r4, #12]
 800b310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b318:	d003      	beq.n	800b322 <__swsetup_r+0x9a>
 800b31a:	4621      	mov	r1, r4
 800b31c:	4630      	mov	r0, r6
 800b31e:	f001 fb49 	bl	800c9b4 <__smakebuf_r>
 800b322:	89a0      	ldrh	r0, [r4, #12]
 800b324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b328:	f010 0301 	ands.w	r3, r0, #1
 800b32c:	d00a      	beq.n	800b344 <__swsetup_r+0xbc>
 800b32e:	2300      	movs	r3, #0
 800b330:	60a3      	str	r3, [r4, #8]
 800b332:	6963      	ldr	r3, [r4, #20]
 800b334:	425b      	negs	r3, r3
 800b336:	61a3      	str	r3, [r4, #24]
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	b943      	cbnz	r3, 800b34e <__swsetup_r+0xc6>
 800b33c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b340:	d1ba      	bne.n	800b2b8 <__swsetup_r+0x30>
 800b342:	bd70      	pop	{r4, r5, r6, pc}
 800b344:	0781      	lsls	r1, r0, #30
 800b346:	bf58      	it	pl
 800b348:	6963      	ldrpl	r3, [r4, #20]
 800b34a:	60a3      	str	r3, [r4, #8]
 800b34c:	e7f4      	b.n	800b338 <__swsetup_r+0xb0>
 800b34e:	2000      	movs	r0, #0
 800b350:	e7f7      	b.n	800b342 <__swsetup_r+0xba>
 800b352:	bf00      	nop
 800b354:	20000044 	.word	0x20000044
 800b358:	0800dd4c 	.word	0x0800dd4c
 800b35c:	0800dd6c 	.word	0x0800dd6c
 800b360:	0800dd2c 	.word	0x0800dd2c

0800b364 <__assert_func>:
 800b364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b366:	4614      	mov	r4, r2
 800b368:	461a      	mov	r2, r3
 800b36a:	4b09      	ldr	r3, [pc, #36]	; (800b390 <__assert_func+0x2c>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4605      	mov	r5, r0
 800b370:	68d8      	ldr	r0, [r3, #12]
 800b372:	b14c      	cbz	r4, 800b388 <__assert_func+0x24>
 800b374:	4b07      	ldr	r3, [pc, #28]	; (800b394 <__assert_func+0x30>)
 800b376:	9100      	str	r1, [sp, #0]
 800b378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b37c:	4906      	ldr	r1, [pc, #24]	; (800b398 <__assert_func+0x34>)
 800b37e:	462b      	mov	r3, r5
 800b380:	f000 ff5a 	bl	800c238 <fiprintf>
 800b384:	f002 fb91 	bl	800daaa <abort>
 800b388:	4b04      	ldr	r3, [pc, #16]	; (800b39c <__assert_func+0x38>)
 800b38a:	461c      	mov	r4, r3
 800b38c:	e7f3      	b.n	800b376 <__assert_func+0x12>
 800b38e:	bf00      	nop
 800b390:	20000044 	.word	0x20000044
 800b394:	0800de20 	.word	0x0800de20
 800b398:	0800de2d 	.word	0x0800de2d
 800b39c:	0800de5b 	.word	0x0800de5b

0800b3a0 <_close_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	4d06      	ldr	r5, [pc, #24]	; (800b3bc <_close_r+0x1c>)
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	4608      	mov	r0, r1
 800b3aa:	602b      	str	r3, [r5, #0]
 800b3ac:	f7f6 f8ef 	bl	800158e <_close>
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	d102      	bne.n	800b3ba <_close_r+0x1a>
 800b3b4:	682b      	ldr	r3, [r5, #0]
 800b3b6:	b103      	cbz	r3, 800b3ba <_close_r+0x1a>
 800b3b8:	6023      	str	r3, [r4, #0]
 800b3ba:	bd38      	pop	{r3, r4, r5, pc}
 800b3bc:	20005cfc 	.word	0x20005cfc

0800b3c0 <quorem>:
 800b3c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c4:	6903      	ldr	r3, [r0, #16]
 800b3c6:	690c      	ldr	r4, [r1, #16]
 800b3c8:	42a3      	cmp	r3, r4
 800b3ca:	4607      	mov	r7, r0
 800b3cc:	f2c0 8081 	blt.w	800b4d2 <quorem+0x112>
 800b3d0:	3c01      	subs	r4, #1
 800b3d2:	f101 0814 	add.w	r8, r1, #20
 800b3d6:	f100 0514 	add.w	r5, r0, #20
 800b3da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3de:	9301      	str	r3, [sp, #4]
 800b3e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b3f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3f8:	d331      	bcc.n	800b45e <quorem+0x9e>
 800b3fa:	f04f 0e00 	mov.w	lr, #0
 800b3fe:	4640      	mov	r0, r8
 800b400:	46ac      	mov	ip, r5
 800b402:	46f2      	mov	sl, lr
 800b404:	f850 2b04 	ldr.w	r2, [r0], #4
 800b408:	b293      	uxth	r3, r2
 800b40a:	fb06 e303 	mla	r3, r6, r3, lr
 800b40e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b412:	b29b      	uxth	r3, r3
 800b414:	ebaa 0303 	sub.w	r3, sl, r3
 800b418:	f8dc a000 	ldr.w	sl, [ip]
 800b41c:	0c12      	lsrs	r2, r2, #16
 800b41e:	fa13 f38a 	uxtah	r3, r3, sl
 800b422:	fb06 e202 	mla	r2, r6, r2, lr
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	9b00      	ldr	r3, [sp, #0]
 800b42a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b42e:	b292      	uxth	r2, r2
 800b430:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b434:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b438:	f8bd 3000 	ldrh.w	r3, [sp]
 800b43c:	4581      	cmp	r9, r0
 800b43e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b442:	f84c 3b04 	str.w	r3, [ip], #4
 800b446:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b44a:	d2db      	bcs.n	800b404 <quorem+0x44>
 800b44c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b450:	b92b      	cbnz	r3, 800b45e <quorem+0x9e>
 800b452:	9b01      	ldr	r3, [sp, #4]
 800b454:	3b04      	subs	r3, #4
 800b456:	429d      	cmp	r5, r3
 800b458:	461a      	mov	r2, r3
 800b45a:	d32e      	bcc.n	800b4ba <quorem+0xfa>
 800b45c:	613c      	str	r4, [r7, #16]
 800b45e:	4638      	mov	r0, r7
 800b460:	f001 fdda 	bl	800d018 <__mcmp>
 800b464:	2800      	cmp	r0, #0
 800b466:	db24      	blt.n	800b4b2 <quorem+0xf2>
 800b468:	3601      	adds	r6, #1
 800b46a:	4628      	mov	r0, r5
 800b46c:	f04f 0c00 	mov.w	ip, #0
 800b470:	f858 2b04 	ldr.w	r2, [r8], #4
 800b474:	f8d0 e000 	ldr.w	lr, [r0]
 800b478:	b293      	uxth	r3, r2
 800b47a:	ebac 0303 	sub.w	r3, ip, r3
 800b47e:	0c12      	lsrs	r2, r2, #16
 800b480:	fa13 f38e 	uxtah	r3, r3, lr
 800b484:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b488:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b492:	45c1      	cmp	r9, r8
 800b494:	f840 3b04 	str.w	r3, [r0], #4
 800b498:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b49c:	d2e8      	bcs.n	800b470 <quorem+0xb0>
 800b49e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4a6:	b922      	cbnz	r2, 800b4b2 <quorem+0xf2>
 800b4a8:	3b04      	subs	r3, #4
 800b4aa:	429d      	cmp	r5, r3
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	d30a      	bcc.n	800b4c6 <quorem+0x106>
 800b4b0:	613c      	str	r4, [r7, #16]
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	b003      	add	sp, #12
 800b4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ba:	6812      	ldr	r2, [r2, #0]
 800b4bc:	3b04      	subs	r3, #4
 800b4be:	2a00      	cmp	r2, #0
 800b4c0:	d1cc      	bne.n	800b45c <quorem+0x9c>
 800b4c2:	3c01      	subs	r4, #1
 800b4c4:	e7c7      	b.n	800b456 <quorem+0x96>
 800b4c6:	6812      	ldr	r2, [r2, #0]
 800b4c8:	3b04      	subs	r3, #4
 800b4ca:	2a00      	cmp	r2, #0
 800b4cc:	d1f0      	bne.n	800b4b0 <quorem+0xf0>
 800b4ce:	3c01      	subs	r4, #1
 800b4d0:	e7eb      	b.n	800b4aa <quorem+0xea>
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	e7ee      	b.n	800b4b4 <quorem+0xf4>
	...

0800b4d8 <_dtoa_r>:
 800b4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4dc:	ed2d 8b04 	vpush	{d8-d9}
 800b4e0:	ec57 6b10 	vmov	r6, r7, d0
 800b4e4:	b093      	sub	sp, #76	; 0x4c
 800b4e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b4ec:	9106      	str	r1, [sp, #24]
 800b4ee:	ee10 aa10 	vmov	sl, s0
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	9209      	str	r2, [sp, #36]	; 0x24
 800b4f6:	930c      	str	r3, [sp, #48]	; 0x30
 800b4f8:	46bb      	mov	fp, r7
 800b4fa:	b975      	cbnz	r5, 800b51a <_dtoa_r+0x42>
 800b4fc:	2010      	movs	r0, #16
 800b4fe:	f001 fa99 	bl	800ca34 <malloc>
 800b502:	4602      	mov	r2, r0
 800b504:	6260      	str	r0, [r4, #36]	; 0x24
 800b506:	b920      	cbnz	r0, 800b512 <_dtoa_r+0x3a>
 800b508:	4ba7      	ldr	r3, [pc, #668]	; (800b7a8 <_dtoa_r+0x2d0>)
 800b50a:	21ea      	movs	r1, #234	; 0xea
 800b50c:	48a7      	ldr	r0, [pc, #668]	; (800b7ac <_dtoa_r+0x2d4>)
 800b50e:	f7ff ff29 	bl	800b364 <__assert_func>
 800b512:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b516:	6005      	str	r5, [r0, #0]
 800b518:	60c5      	str	r5, [r0, #12]
 800b51a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b51c:	6819      	ldr	r1, [r3, #0]
 800b51e:	b151      	cbz	r1, 800b536 <_dtoa_r+0x5e>
 800b520:	685a      	ldr	r2, [r3, #4]
 800b522:	604a      	str	r2, [r1, #4]
 800b524:	2301      	movs	r3, #1
 800b526:	4093      	lsls	r3, r2
 800b528:	608b      	str	r3, [r1, #8]
 800b52a:	4620      	mov	r0, r4
 800b52c:	f001 fae8 	bl	800cb00 <_Bfree>
 800b530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b532:	2200      	movs	r2, #0
 800b534:	601a      	str	r2, [r3, #0]
 800b536:	1e3b      	subs	r3, r7, #0
 800b538:	bfaa      	itet	ge
 800b53a:	2300      	movge	r3, #0
 800b53c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b540:	f8c8 3000 	strge.w	r3, [r8]
 800b544:	4b9a      	ldr	r3, [pc, #616]	; (800b7b0 <_dtoa_r+0x2d8>)
 800b546:	bfbc      	itt	lt
 800b548:	2201      	movlt	r2, #1
 800b54a:	f8c8 2000 	strlt.w	r2, [r8]
 800b54e:	ea33 030b 	bics.w	r3, r3, fp
 800b552:	d11b      	bne.n	800b58c <_dtoa_r+0xb4>
 800b554:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b556:	f242 730f 	movw	r3, #9999	; 0x270f
 800b55a:	6013      	str	r3, [r2, #0]
 800b55c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b560:	4333      	orrs	r3, r6
 800b562:	f000 8592 	beq.w	800c08a <_dtoa_r+0xbb2>
 800b566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b568:	b963      	cbnz	r3, 800b584 <_dtoa_r+0xac>
 800b56a:	4b92      	ldr	r3, [pc, #584]	; (800b7b4 <_dtoa_r+0x2dc>)
 800b56c:	e022      	b.n	800b5b4 <_dtoa_r+0xdc>
 800b56e:	4b92      	ldr	r3, [pc, #584]	; (800b7b8 <_dtoa_r+0x2e0>)
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	3308      	adds	r3, #8
 800b574:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b576:	6013      	str	r3, [r2, #0]
 800b578:	9801      	ldr	r0, [sp, #4]
 800b57a:	b013      	add	sp, #76	; 0x4c
 800b57c:	ecbd 8b04 	vpop	{d8-d9}
 800b580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b584:	4b8b      	ldr	r3, [pc, #556]	; (800b7b4 <_dtoa_r+0x2dc>)
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	3303      	adds	r3, #3
 800b58a:	e7f3      	b.n	800b574 <_dtoa_r+0x9c>
 800b58c:	2200      	movs	r2, #0
 800b58e:	2300      	movs	r3, #0
 800b590:	4650      	mov	r0, sl
 800b592:	4659      	mov	r1, fp
 800b594:	f7f5 fa98 	bl	8000ac8 <__aeabi_dcmpeq>
 800b598:	ec4b ab19 	vmov	d9, sl, fp
 800b59c:	4680      	mov	r8, r0
 800b59e:	b158      	cbz	r0, 800b5b8 <_dtoa_r+0xe0>
 800b5a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	6013      	str	r3, [r2, #0]
 800b5a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 856b 	beq.w	800c084 <_dtoa_r+0xbac>
 800b5ae:	4883      	ldr	r0, [pc, #524]	; (800b7bc <_dtoa_r+0x2e4>)
 800b5b0:	6018      	str	r0, [r3, #0]
 800b5b2:	1e43      	subs	r3, r0, #1
 800b5b4:	9301      	str	r3, [sp, #4]
 800b5b6:	e7df      	b.n	800b578 <_dtoa_r+0xa0>
 800b5b8:	ec4b ab10 	vmov	d0, sl, fp
 800b5bc:	aa10      	add	r2, sp, #64	; 0x40
 800b5be:	a911      	add	r1, sp, #68	; 0x44
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f001 fe4b 	bl	800d25c <__d2b>
 800b5c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b5ca:	ee08 0a10 	vmov	s16, r0
 800b5ce:	2d00      	cmp	r5, #0
 800b5d0:	f000 8084 	beq.w	800b6dc <_dtoa_r+0x204>
 800b5d4:	ee19 3a90 	vmov	r3, s19
 800b5d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b5e0:	4656      	mov	r6, sl
 800b5e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b5e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b5ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b5ee:	4b74      	ldr	r3, [pc, #464]	; (800b7c0 <_dtoa_r+0x2e8>)
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	f7f4 fe47 	bl	8000288 <__aeabi_dsub>
 800b5fa:	a365      	add	r3, pc, #404	; (adr r3, 800b790 <_dtoa_r+0x2b8>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	f7f4 fffa 	bl	80005f8 <__aeabi_dmul>
 800b604:	a364      	add	r3, pc, #400	; (adr r3, 800b798 <_dtoa_r+0x2c0>)
 800b606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60a:	f7f4 fe3f 	bl	800028c <__adddf3>
 800b60e:	4606      	mov	r6, r0
 800b610:	4628      	mov	r0, r5
 800b612:	460f      	mov	r7, r1
 800b614:	f7f4 ff86 	bl	8000524 <__aeabi_i2d>
 800b618:	a361      	add	r3, pc, #388	; (adr r3, 800b7a0 <_dtoa_r+0x2c8>)
 800b61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61e:	f7f4 ffeb 	bl	80005f8 <__aeabi_dmul>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	4630      	mov	r0, r6
 800b628:	4639      	mov	r1, r7
 800b62a:	f7f4 fe2f 	bl	800028c <__adddf3>
 800b62e:	4606      	mov	r6, r0
 800b630:	460f      	mov	r7, r1
 800b632:	f7f5 fa91 	bl	8000b58 <__aeabi_d2iz>
 800b636:	2200      	movs	r2, #0
 800b638:	9000      	str	r0, [sp, #0]
 800b63a:	2300      	movs	r3, #0
 800b63c:	4630      	mov	r0, r6
 800b63e:	4639      	mov	r1, r7
 800b640:	f7f5 fa4c 	bl	8000adc <__aeabi_dcmplt>
 800b644:	b150      	cbz	r0, 800b65c <_dtoa_r+0x184>
 800b646:	9800      	ldr	r0, [sp, #0]
 800b648:	f7f4 ff6c 	bl	8000524 <__aeabi_i2d>
 800b64c:	4632      	mov	r2, r6
 800b64e:	463b      	mov	r3, r7
 800b650:	f7f5 fa3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b654:	b910      	cbnz	r0, 800b65c <_dtoa_r+0x184>
 800b656:	9b00      	ldr	r3, [sp, #0]
 800b658:	3b01      	subs	r3, #1
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	9b00      	ldr	r3, [sp, #0]
 800b65e:	2b16      	cmp	r3, #22
 800b660:	d85a      	bhi.n	800b718 <_dtoa_r+0x240>
 800b662:	9a00      	ldr	r2, [sp, #0]
 800b664:	4b57      	ldr	r3, [pc, #348]	; (800b7c4 <_dtoa_r+0x2ec>)
 800b666:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66e:	ec51 0b19 	vmov	r0, r1, d9
 800b672:	f7f5 fa33 	bl	8000adc <__aeabi_dcmplt>
 800b676:	2800      	cmp	r0, #0
 800b678:	d050      	beq.n	800b71c <_dtoa_r+0x244>
 800b67a:	9b00      	ldr	r3, [sp, #0]
 800b67c:	3b01      	subs	r3, #1
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	2300      	movs	r3, #0
 800b682:	930b      	str	r3, [sp, #44]	; 0x2c
 800b684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b686:	1b5d      	subs	r5, r3, r5
 800b688:	1e6b      	subs	r3, r5, #1
 800b68a:	9305      	str	r3, [sp, #20]
 800b68c:	bf45      	ittet	mi
 800b68e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b692:	9304      	strmi	r3, [sp, #16]
 800b694:	2300      	movpl	r3, #0
 800b696:	2300      	movmi	r3, #0
 800b698:	bf4c      	ite	mi
 800b69a:	9305      	strmi	r3, [sp, #20]
 800b69c:	9304      	strpl	r3, [sp, #16]
 800b69e:	9b00      	ldr	r3, [sp, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	db3d      	blt.n	800b720 <_dtoa_r+0x248>
 800b6a4:	9b05      	ldr	r3, [sp, #20]
 800b6a6:	9a00      	ldr	r2, [sp, #0]
 800b6a8:	920a      	str	r2, [sp, #40]	; 0x28
 800b6aa:	4413      	add	r3, r2
 800b6ac:	9305      	str	r3, [sp, #20]
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	9307      	str	r3, [sp, #28]
 800b6b2:	9b06      	ldr	r3, [sp, #24]
 800b6b4:	2b09      	cmp	r3, #9
 800b6b6:	f200 8089 	bhi.w	800b7cc <_dtoa_r+0x2f4>
 800b6ba:	2b05      	cmp	r3, #5
 800b6bc:	bfc4      	itt	gt
 800b6be:	3b04      	subgt	r3, #4
 800b6c0:	9306      	strgt	r3, [sp, #24]
 800b6c2:	9b06      	ldr	r3, [sp, #24]
 800b6c4:	f1a3 0302 	sub.w	r3, r3, #2
 800b6c8:	bfcc      	ite	gt
 800b6ca:	2500      	movgt	r5, #0
 800b6cc:	2501      	movle	r5, #1
 800b6ce:	2b03      	cmp	r3, #3
 800b6d0:	f200 8087 	bhi.w	800b7e2 <_dtoa_r+0x30a>
 800b6d4:	e8df f003 	tbb	[pc, r3]
 800b6d8:	59383a2d 	.word	0x59383a2d
 800b6dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b6e0:	441d      	add	r5, r3
 800b6e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b6e6:	2b20      	cmp	r3, #32
 800b6e8:	bfc1      	itttt	gt
 800b6ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b6ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b6f2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b6f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b6fa:	bfda      	itte	le
 800b6fc:	f1c3 0320 	rsble	r3, r3, #32
 800b700:	fa06 f003 	lslle.w	r0, r6, r3
 800b704:	4318      	orrgt	r0, r3
 800b706:	f7f4 fefd 	bl	8000504 <__aeabi_ui2d>
 800b70a:	2301      	movs	r3, #1
 800b70c:	4606      	mov	r6, r0
 800b70e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b712:	3d01      	subs	r5, #1
 800b714:	930e      	str	r3, [sp, #56]	; 0x38
 800b716:	e76a      	b.n	800b5ee <_dtoa_r+0x116>
 800b718:	2301      	movs	r3, #1
 800b71a:	e7b2      	b.n	800b682 <_dtoa_r+0x1aa>
 800b71c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b71e:	e7b1      	b.n	800b684 <_dtoa_r+0x1ac>
 800b720:	9b04      	ldr	r3, [sp, #16]
 800b722:	9a00      	ldr	r2, [sp, #0]
 800b724:	1a9b      	subs	r3, r3, r2
 800b726:	9304      	str	r3, [sp, #16]
 800b728:	4253      	negs	r3, r2
 800b72a:	9307      	str	r3, [sp, #28]
 800b72c:	2300      	movs	r3, #0
 800b72e:	930a      	str	r3, [sp, #40]	; 0x28
 800b730:	e7bf      	b.n	800b6b2 <_dtoa_r+0x1da>
 800b732:	2300      	movs	r3, #0
 800b734:	9308      	str	r3, [sp, #32]
 800b736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b738:	2b00      	cmp	r3, #0
 800b73a:	dc55      	bgt.n	800b7e8 <_dtoa_r+0x310>
 800b73c:	2301      	movs	r3, #1
 800b73e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b742:	461a      	mov	r2, r3
 800b744:	9209      	str	r2, [sp, #36]	; 0x24
 800b746:	e00c      	b.n	800b762 <_dtoa_r+0x28a>
 800b748:	2301      	movs	r3, #1
 800b74a:	e7f3      	b.n	800b734 <_dtoa_r+0x25c>
 800b74c:	2300      	movs	r3, #0
 800b74e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b750:	9308      	str	r3, [sp, #32]
 800b752:	9b00      	ldr	r3, [sp, #0]
 800b754:	4413      	add	r3, r2
 800b756:	9302      	str	r3, [sp, #8]
 800b758:	3301      	adds	r3, #1
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	9303      	str	r3, [sp, #12]
 800b75e:	bfb8      	it	lt
 800b760:	2301      	movlt	r3, #1
 800b762:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b764:	2200      	movs	r2, #0
 800b766:	6042      	str	r2, [r0, #4]
 800b768:	2204      	movs	r2, #4
 800b76a:	f102 0614 	add.w	r6, r2, #20
 800b76e:	429e      	cmp	r6, r3
 800b770:	6841      	ldr	r1, [r0, #4]
 800b772:	d93d      	bls.n	800b7f0 <_dtoa_r+0x318>
 800b774:	4620      	mov	r0, r4
 800b776:	f001 f983 	bl	800ca80 <_Balloc>
 800b77a:	9001      	str	r0, [sp, #4]
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d13b      	bne.n	800b7f8 <_dtoa_r+0x320>
 800b780:	4b11      	ldr	r3, [pc, #68]	; (800b7c8 <_dtoa_r+0x2f0>)
 800b782:	4602      	mov	r2, r0
 800b784:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b788:	e6c0      	b.n	800b50c <_dtoa_r+0x34>
 800b78a:	2301      	movs	r3, #1
 800b78c:	e7df      	b.n	800b74e <_dtoa_r+0x276>
 800b78e:	bf00      	nop
 800b790:	636f4361 	.word	0x636f4361
 800b794:	3fd287a7 	.word	0x3fd287a7
 800b798:	8b60c8b3 	.word	0x8b60c8b3
 800b79c:	3fc68a28 	.word	0x3fc68a28
 800b7a0:	509f79fb 	.word	0x509f79fb
 800b7a4:	3fd34413 	.word	0x3fd34413
 800b7a8:	0800df6a 	.word	0x0800df6a
 800b7ac:	0800df81 	.word	0x0800df81
 800b7b0:	7ff00000 	.word	0x7ff00000
 800b7b4:	0800df66 	.word	0x0800df66
 800b7b8:	0800df5d 	.word	0x0800df5d
 800b7bc:	0800dda1 	.word	0x0800dda1
 800b7c0:	3ff80000 	.word	0x3ff80000
 800b7c4:	0800e0f0 	.word	0x0800e0f0
 800b7c8:	0800dfdc 	.word	0x0800dfdc
 800b7cc:	2501      	movs	r5, #1
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	9306      	str	r3, [sp, #24]
 800b7d2:	9508      	str	r5, [sp, #32]
 800b7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b7d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	2312      	movs	r3, #18
 800b7e0:	e7b0      	b.n	800b744 <_dtoa_r+0x26c>
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	9308      	str	r3, [sp, #32]
 800b7e6:	e7f5      	b.n	800b7d4 <_dtoa_r+0x2fc>
 800b7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7ee:	e7b8      	b.n	800b762 <_dtoa_r+0x28a>
 800b7f0:	3101      	adds	r1, #1
 800b7f2:	6041      	str	r1, [r0, #4]
 800b7f4:	0052      	lsls	r2, r2, #1
 800b7f6:	e7b8      	b.n	800b76a <_dtoa_r+0x292>
 800b7f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7fa:	9a01      	ldr	r2, [sp, #4]
 800b7fc:	601a      	str	r2, [r3, #0]
 800b7fe:	9b03      	ldr	r3, [sp, #12]
 800b800:	2b0e      	cmp	r3, #14
 800b802:	f200 809d 	bhi.w	800b940 <_dtoa_r+0x468>
 800b806:	2d00      	cmp	r5, #0
 800b808:	f000 809a 	beq.w	800b940 <_dtoa_r+0x468>
 800b80c:	9b00      	ldr	r3, [sp, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	dd32      	ble.n	800b878 <_dtoa_r+0x3a0>
 800b812:	4ab7      	ldr	r2, [pc, #732]	; (800baf0 <_dtoa_r+0x618>)
 800b814:	f003 030f 	and.w	r3, r3, #15
 800b818:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b81c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b820:	9b00      	ldr	r3, [sp, #0]
 800b822:	05d8      	lsls	r0, r3, #23
 800b824:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b828:	d516      	bpl.n	800b858 <_dtoa_r+0x380>
 800b82a:	4bb2      	ldr	r3, [pc, #712]	; (800baf4 <_dtoa_r+0x61c>)
 800b82c:	ec51 0b19 	vmov	r0, r1, d9
 800b830:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b834:	f7f5 f80a 	bl	800084c <__aeabi_ddiv>
 800b838:	f007 070f 	and.w	r7, r7, #15
 800b83c:	4682      	mov	sl, r0
 800b83e:	468b      	mov	fp, r1
 800b840:	2503      	movs	r5, #3
 800b842:	4eac      	ldr	r6, [pc, #688]	; (800baf4 <_dtoa_r+0x61c>)
 800b844:	b957      	cbnz	r7, 800b85c <_dtoa_r+0x384>
 800b846:	4642      	mov	r2, r8
 800b848:	464b      	mov	r3, r9
 800b84a:	4650      	mov	r0, sl
 800b84c:	4659      	mov	r1, fp
 800b84e:	f7f4 fffd 	bl	800084c <__aeabi_ddiv>
 800b852:	4682      	mov	sl, r0
 800b854:	468b      	mov	fp, r1
 800b856:	e028      	b.n	800b8aa <_dtoa_r+0x3d2>
 800b858:	2502      	movs	r5, #2
 800b85a:	e7f2      	b.n	800b842 <_dtoa_r+0x36a>
 800b85c:	07f9      	lsls	r1, r7, #31
 800b85e:	d508      	bpl.n	800b872 <_dtoa_r+0x39a>
 800b860:	4640      	mov	r0, r8
 800b862:	4649      	mov	r1, r9
 800b864:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b868:	f7f4 fec6 	bl	80005f8 <__aeabi_dmul>
 800b86c:	3501      	adds	r5, #1
 800b86e:	4680      	mov	r8, r0
 800b870:	4689      	mov	r9, r1
 800b872:	107f      	asrs	r7, r7, #1
 800b874:	3608      	adds	r6, #8
 800b876:	e7e5      	b.n	800b844 <_dtoa_r+0x36c>
 800b878:	f000 809b 	beq.w	800b9b2 <_dtoa_r+0x4da>
 800b87c:	9b00      	ldr	r3, [sp, #0]
 800b87e:	4f9d      	ldr	r7, [pc, #628]	; (800baf4 <_dtoa_r+0x61c>)
 800b880:	425e      	negs	r6, r3
 800b882:	4b9b      	ldr	r3, [pc, #620]	; (800baf0 <_dtoa_r+0x618>)
 800b884:	f006 020f 	and.w	r2, r6, #15
 800b888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	ec51 0b19 	vmov	r0, r1, d9
 800b894:	f7f4 feb0 	bl	80005f8 <__aeabi_dmul>
 800b898:	1136      	asrs	r6, r6, #4
 800b89a:	4682      	mov	sl, r0
 800b89c:	468b      	mov	fp, r1
 800b89e:	2300      	movs	r3, #0
 800b8a0:	2502      	movs	r5, #2
 800b8a2:	2e00      	cmp	r6, #0
 800b8a4:	d17a      	bne.n	800b99c <_dtoa_r+0x4c4>
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1d3      	bne.n	800b852 <_dtoa_r+0x37a>
 800b8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f000 8082 	beq.w	800b9b6 <_dtoa_r+0x4de>
 800b8b2:	4b91      	ldr	r3, [pc, #580]	; (800baf8 <_dtoa_r+0x620>)
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	4650      	mov	r0, sl
 800b8b8:	4659      	mov	r1, fp
 800b8ba:	f7f5 f90f 	bl	8000adc <__aeabi_dcmplt>
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	d079      	beq.n	800b9b6 <_dtoa_r+0x4de>
 800b8c2:	9b03      	ldr	r3, [sp, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d076      	beq.n	800b9b6 <_dtoa_r+0x4de>
 800b8c8:	9b02      	ldr	r3, [sp, #8]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	dd36      	ble.n	800b93c <_dtoa_r+0x464>
 800b8ce:	9b00      	ldr	r3, [sp, #0]
 800b8d0:	4650      	mov	r0, sl
 800b8d2:	4659      	mov	r1, fp
 800b8d4:	1e5f      	subs	r7, r3, #1
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	4b88      	ldr	r3, [pc, #544]	; (800bafc <_dtoa_r+0x624>)
 800b8da:	f7f4 fe8d 	bl	80005f8 <__aeabi_dmul>
 800b8de:	9e02      	ldr	r6, [sp, #8]
 800b8e0:	4682      	mov	sl, r0
 800b8e2:	468b      	mov	fp, r1
 800b8e4:	3501      	adds	r5, #1
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	f7f4 fe1c 	bl	8000524 <__aeabi_i2d>
 800b8ec:	4652      	mov	r2, sl
 800b8ee:	465b      	mov	r3, fp
 800b8f0:	f7f4 fe82 	bl	80005f8 <__aeabi_dmul>
 800b8f4:	4b82      	ldr	r3, [pc, #520]	; (800bb00 <_dtoa_r+0x628>)
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f7f4 fcc8 	bl	800028c <__adddf3>
 800b8fc:	46d0      	mov	r8, sl
 800b8fe:	46d9      	mov	r9, fp
 800b900:	4682      	mov	sl, r0
 800b902:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b906:	2e00      	cmp	r6, #0
 800b908:	d158      	bne.n	800b9bc <_dtoa_r+0x4e4>
 800b90a:	4b7e      	ldr	r3, [pc, #504]	; (800bb04 <_dtoa_r+0x62c>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	4640      	mov	r0, r8
 800b910:	4649      	mov	r1, r9
 800b912:	f7f4 fcb9 	bl	8000288 <__aeabi_dsub>
 800b916:	4652      	mov	r2, sl
 800b918:	465b      	mov	r3, fp
 800b91a:	4680      	mov	r8, r0
 800b91c:	4689      	mov	r9, r1
 800b91e:	f7f5 f8fb 	bl	8000b18 <__aeabi_dcmpgt>
 800b922:	2800      	cmp	r0, #0
 800b924:	f040 8295 	bne.w	800be52 <_dtoa_r+0x97a>
 800b928:	4652      	mov	r2, sl
 800b92a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b92e:	4640      	mov	r0, r8
 800b930:	4649      	mov	r1, r9
 800b932:	f7f5 f8d3 	bl	8000adc <__aeabi_dcmplt>
 800b936:	2800      	cmp	r0, #0
 800b938:	f040 8289 	bne.w	800be4e <_dtoa_r+0x976>
 800b93c:	ec5b ab19 	vmov	sl, fp, d9
 800b940:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b942:	2b00      	cmp	r3, #0
 800b944:	f2c0 8148 	blt.w	800bbd8 <_dtoa_r+0x700>
 800b948:	9a00      	ldr	r2, [sp, #0]
 800b94a:	2a0e      	cmp	r2, #14
 800b94c:	f300 8144 	bgt.w	800bbd8 <_dtoa_r+0x700>
 800b950:	4b67      	ldr	r3, [pc, #412]	; (800baf0 <_dtoa_r+0x618>)
 800b952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b956:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f280 80d5 	bge.w	800bb0c <_dtoa_r+0x634>
 800b962:	9b03      	ldr	r3, [sp, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	f300 80d1 	bgt.w	800bb0c <_dtoa_r+0x634>
 800b96a:	f040 826f 	bne.w	800be4c <_dtoa_r+0x974>
 800b96e:	4b65      	ldr	r3, [pc, #404]	; (800bb04 <_dtoa_r+0x62c>)
 800b970:	2200      	movs	r2, #0
 800b972:	4640      	mov	r0, r8
 800b974:	4649      	mov	r1, r9
 800b976:	f7f4 fe3f 	bl	80005f8 <__aeabi_dmul>
 800b97a:	4652      	mov	r2, sl
 800b97c:	465b      	mov	r3, fp
 800b97e:	f7f5 f8c1 	bl	8000b04 <__aeabi_dcmpge>
 800b982:	9e03      	ldr	r6, [sp, #12]
 800b984:	4637      	mov	r7, r6
 800b986:	2800      	cmp	r0, #0
 800b988:	f040 8245 	bne.w	800be16 <_dtoa_r+0x93e>
 800b98c:	9d01      	ldr	r5, [sp, #4]
 800b98e:	2331      	movs	r3, #49	; 0x31
 800b990:	f805 3b01 	strb.w	r3, [r5], #1
 800b994:	9b00      	ldr	r3, [sp, #0]
 800b996:	3301      	adds	r3, #1
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	e240      	b.n	800be1e <_dtoa_r+0x946>
 800b99c:	07f2      	lsls	r2, r6, #31
 800b99e:	d505      	bpl.n	800b9ac <_dtoa_r+0x4d4>
 800b9a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9a4:	f7f4 fe28 	bl	80005f8 <__aeabi_dmul>
 800b9a8:	3501      	adds	r5, #1
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	1076      	asrs	r6, r6, #1
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	e777      	b.n	800b8a2 <_dtoa_r+0x3ca>
 800b9b2:	2502      	movs	r5, #2
 800b9b4:	e779      	b.n	800b8aa <_dtoa_r+0x3d2>
 800b9b6:	9f00      	ldr	r7, [sp, #0]
 800b9b8:	9e03      	ldr	r6, [sp, #12]
 800b9ba:	e794      	b.n	800b8e6 <_dtoa_r+0x40e>
 800b9bc:	9901      	ldr	r1, [sp, #4]
 800b9be:	4b4c      	ldr	r3, [pc, #304]	; (800baf0 <_dtoa_r+0x618>)
 800b9c0:	4431      	add	r1, r6
 800b9c2:	910d      	str	r1, [sp, #52]	; 0x34
 800b9c4:	9908      	ldr	r1, [sp, #32]
 800b9c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b9ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b9ce:	2900      	cmp	r1, #0
 800b9d0:	d043      	beq.n	800ba5a <_dtoa_r+0x582>
 800b9d2:	494d      	ldr	r1, [pc, #308]	; (800bb08 <_dtoa_r+0x630>)
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	f7f4 ff39 	bl	800084c <__aeabi_ddiv>
 800b9da:	4652      	mov	r2, sl
 800b9dc:	465b      	mov	r3, fp
 800b9de:	f7f4 fc53 	bl	8000288 <__aeabi_dsub>
 800b9e2:	9d01      	ldr	r5, [sp, #4]
 800b9e4:	4682      	mov	sl, r0
 800b9e6:	468b      	mov	fp, r1
 800b9e8:	4649      	mov	r1, r9
 800b9ea:	4640      	mov	r0, r8
 800b9ec:	f7f5 f8b4 	bl	8000b58 <__aeabi_d2iz>
 800b9f0:	4606      	mov	r6, r0
 800b9f2:	f7f4 fd97 	bl	8000524 <__aeabi_i2d>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	f7f4 fc43 	bl	8000288 <__aeabi_dsub>
 800ba02:	3630      	adds	r6, #48	; 0x30
 800ba04:	f805 6b01 	strb.w	r6, [r5], #1
 800ba08:	4652      	mov	r2, sl
 800ba0a:	465b      	mov	r3, fp
 800ba0c:	4680      	mov	r8, r0
 800ba0e:	4689      	mov	r9, r1
 800ba10:	f7f5 f864 	bl	8000adc <__aeabi_dcmplt>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d163      	bne.n	800bae0 <_dtoa_r+0x608>
 800ba18:	4642      	mov	r2, r8
 800ba1a:	464b      	mov	r3, r9
 800ba1c:	4936      	ldr	r1, [pc, #216]	; (800baf8 <_dtoa_r+0x620>)
 800ba1e:	2000      	movs	r0, #0
 800ba20:	f7f4 fc32 	bl	8000288 <__aeabi_dsub>
 800ba24:	4652      	mov	r2, sl
 800ba26:	465b      	mov	r3, fp
 800ba28:	f7f5 f858 	bl	8000adc <__aeabi_dcmplt>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	f040 80b5 	bne.w	800bb9c <_dtoa_r+0x6c4>
 800ba32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba34:	429d      	cmp	r5, r3
 800ba36:	d081      	beq.n	800b93c <_dtoa_r+0x464>
 800ba38:	4b30      	ldr	r3, [pc, #192]	; (800bafc <_dtoa_r+0x624>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	4650      	mov	r0, sl
 800ba3e:	4659      	mov	r1, fp
 800ba40:	f7f4 fdda 	bl	80005f8 <__aeabi_dmul>
 800ba44:	4b2d      	ldr	r3, [pc, #180]	; (800bafc <_dtoa_r+0x624>)
 800ba46:	4682      	mov	sl, r0
 800ba48:	468b      	mov	fp, r1
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	4649      	mov	r1, r9
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f7f4 fdd2 	bl	80005f8 <__aeabi_dmul>
 800ba54:	4680      	mov	r8, r0
 800ba56:	4689      	mov	r9, r1
 800ba58:	e7c6      	b.n	800b9e8 <_dtoa_r+0x510>
 800ba5a:	4650      	mov	r0, sl
 800ba5c:	4659      	mov	r1, fp
 800ba5e:	f7f4 fdcb 	bl	80005f8 <__aeabi_dmul>
 800ba62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba64:	9d01      	ldr	r5, [sp, #4]
 800ba66:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba68:	4682      	mov	sl, r0
 800ba6a:	468b      	mov	fp, r1
 800ba6c:	4649      	mov	r1, r9
 800ba6e:	4640      	mov	r0, r8
 800ba70:	f7f5 f872 	bl	8000b58 <__aeabi_d2iz>
 800ba74:	4606      	mov	r6, r0
 800ba76:	f7f4 fd55 	bl	8000524 <__aeabi_i2d>
 800ba7a:	3630      	adds	r6, #48	; 0x30
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	460b      	mov	r3, r1
 800ba80:	4640      	mov	r0, r8
 800ba82:	4649      	mov	r1, r9
 800ba84:	f7f4 fc00 	bl	8000288 <__aeabi_dsub>
 800ba88:	f805 6b01 	strb.w	r6, [r5], #1
 800ba8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba8e:	429d      	cmp	r5, r3
 800ba90:	4680      	mov	r8, r0
 800ba92:	4689      	mov	r9, r1
 800ba94:	f04f 0200 	mov.w	r2, #0
 800ba98:	d124      	bne.n	800bae4 <_dtoa_r+0x60c>
 800ba9a:	4b1b      	ldr	r3, [pc, #108]	; (800bb08 <_dtoa_r+0x630>)
 800ba9c:	4650      	mov	r0, sl
 800ba9e:	4659      	mov	r1, fp
 800baa0:	f7f4 fbf4 	bl	800028c <__adddf3>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4640      	mov	r0, r8
 800baaa:	4649      	mov	r1, r9
 800baac:	f7f5 f834 	bl	8000b18 <__aeabi_dcmpgt>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d173      	bne.n	800bb9c <_dtoa_r+0x6c4>
 800bab4:	4652      	mov	r2, sl
 800bab6:	465b      	mov	r3, fp
 800bab8:	4913      	ldr	r1, [pc, #76]	; (800bb08 <_dtoa_r+0x630>)
 800baba:	2000      	movs	r0, #0
 800babc:	f7f4 fbe4 	bl	8000288 <__aeabi_dsub>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	4640      	mov	r0, r8
 800bac6:	4649      	mov	r1, r9
 800bac8:	f7f5 f808 	bl	8000adc <__aeabi_dcmplt>
 800bacc:	2800      	cmp	r0, #0
 800bace:	f43f af35 	beq.w	800b93c <_dtoa_r+0x464>
 800bad2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bad4:	1e6b      	subs	r3, r5, #1
 800bad6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bad8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800badc:	2b30      	cmp	r3, #48	; 0x30
 800bade:	d0f8      	beq.n	800bad2 <_dtoa_r+0x5fa>
 800bae0:	9700      	str	r7, [sp, #0]
 800bae2:	e049      	b.n	800bb78 <_dtoa_r+0x6a0>
 800bae4:	4b05      	ldr	r3, [pc, #20]	; (800bafc <_dtoa_r+0x624>)
 800bae6:	f7f4 fd87 	bl	80005f8 <__aeabi_dmul>
 800baea:	4680      	mov	r8, r0
 800baec:	4689      	mov	r9, r1
 800baee:	e7bd      	b.n	800ba6c <_dtoa_r+0x594>
 800baf0:	0800e0f0 	.word	0x0800e0f0
 800baf4:	0800e0c8 	.word	0x0800e0c8
 800baf8:	3ff00000 	.word	0x3ff00000
 800bafc:	40240000 	.word	0x40240000
 800bb00:	401c0000 	.word	0x401c0000
 800bb04:	40140000 	.word	0x40140000
 800bb08:	3fe00000 	.word	0x3fe00000
 800bb0c:	9d01      	ldr	r5, [sp, #4]
 800bb0e:	4656      	mov	r6, sl
 800bb10:	465f      	mov	r7, fp
 800bb12:	4642      	mov	r2, r8
 800bb14:	464b      	mov	r3, r9
 800bb16:	4630      	mov	r0, r6
 800bb18:	4639      	mov	r1, r7
 800bb1a:	f7f4 fe97 	bl	800084c <__aeabi_ddiv>
 800bb1e:	f7f5 f81b 	bl	8000b58 <__aeabi_d2iz>
 800bb22:	4682      	mov	sl, r0
 800bb24:	f7f4 fcfe 	bl	8000524 <__aeabi_i2d>
 800bb28:	4642      	mov	r2, r8
 800bb2a:	464b      	mov	r3, r9
 800bb2c:	f7f4 fd64 	bl	80005f8 <__aeabi_dmul>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	4630      	mov	r0, r6
 800bb36:	4639      	mov	r1, r7
 800bb38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bb3c:	f7f4 fba4 	bl	8000288 <__aeabi_dsub>
 800bb40:	f805 6b01 	strb.w	r6, [r5], #1
 800bb44:	9e01      	ldr	r6, [sp, #4]
 800bb46:	9f03      	ldr	r7, [sp, #12]
 800bb48:	1bae      	subs	r6, r5, r6
 800bb4a:	42b7      	cmp	r7, r6
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	d135      	bne.n	800bbbe <_dtoa_r+0x6e6>
 800bb52:	f7f4 fb9b 	bl	800028c <__adddf3>
 800bb56:	4642      	mov	r2, r8
 800bb58:	464b      	mov	r3, r9
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	460f      	mov	r7, r1
 800bb5e:	f7f4 ffdb 	bl	8000b18 <__aeabi_dcmpgt>
 800bb62:	b9d0      	cbnz	r0, 800bb9a <_dtoa_r+0x6c2>
 800bb64:	4642      	mov	r2, r8
 800bb66:	464b      	mov	r3, r9
 800bb68:	4630      	mov	r0, r6
 800bb6a:	4639      	mov	r1, r7
 800bb6c:	f7f4 ffac 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb70:	b110      	cbz	r0, 800bb78 <_dtoa_r+0x6a0>
 800bb72:	f01a 0f01 	tst.w	sl, #1
 800bb76:	d110      	bne.n	800bb9a <_dtoa_r+0x6c2>
 800bb78:	4620      	mov	r0, r4
 800bb7a:	ee18 1a10 	vmov	r1, s16
 800bb7e:	f000 ffbf 	bl	800cb00 <_Bfree>
 800bb82:	2300      	movs	r3, #0
 800bb84:	9800      	ldr	r0, [sp, #0]
 800bb86:	702b      	strb	r3, [r5, #0]
 800bb88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	6018      	str	r0, [r3, #0]
 800bb8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f43f acf1 	beq.w	800b578 <_dtoa_r+0xa0>
 800bb96:	601d      	str	r5, [r3, #0]
 800bb98:	e4ee      	b.n	800b578 <_dtoa_r+0xa0>
 800bb9a:	9f00      	ldr	r7, [sp, #0]
 800bb9c:	462b      	mov	r3, r5
 800bb9e:	461d      	mov	r5, r3
 800bba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bba4:	2a39      	cmp	r2, #57	; 0x39
 800bba6:	d106      	bne.n	800bbb6 <_dtoa_r+0x6de>
 800bba8:	9a01      	ldr	r2, [sp, #4]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d1f7      	bne.n	800bb9e <_dtoa_r+0x6c6>
 800bbae:	9901      	ldr	r1, [sp, #4]
 800bbb0:	2230      	movs	r2, #48	; 0x30
 800bbb2:	3701      	adds	r7, #1
 800bbb4:	700a      	strb	r2, [r1, #0]
 800bbb6:	781a      	ldrb	r2, [r3, #0]
 800bbb8:	3201      	adds	r2, #1
 800bbba:	701a      	strb	r2, [r3, #0]
 800bbbc:	e790      	b.n	800bae0 <_dtoa_r+0x608>
 800bbbe:	4ba6      	ldr	r3, [pc, #664]	; (800be58 <_dtoa_r+0x980>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f7f4 fd19 	bl	80005f8 <__aeabi_dmul>
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	2300      	movs	r3, #0
 800bbca:	4606      	mov	r6, r0
 800bbcc:	460f      	mov	r7, r1
 800bbce:	f7f4 ff7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d09d      	beq.n	800bb12 <_dtoa_r+0x63a>
 800bbd6:	e7cf      	b.n	800bb78 <_dtoa_r+0x6a0>
 800bbd8:	9a08      	ldr	r2, [sp, #32]
 800bbda:	2a00      	cmp	r2, #0
 800bbdc:	f000 80d7 	beq.w	800bd8e <_dtoa_r+0x8b6>
 800bbe0:	9a06      	ldr	r2, [sp, #24]
 800bbe2:	2a01      	cmp	r2, #1
 800bbe4:	f300 80ba 	bgt.w	800bd5c <_dtoa_r+0x884>
 800bbe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbea:	2a00      	cmp	r2, #0
 800bbec:	f000 80b2 	beq.w	800bd54 <_dtoa_r+0x87c>
 800bbf0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bbf4:	9e07      	ldr	r6, [sp, #28]
 800bbf6:	9d04      	ldr	r5, [sp, #16]
 800bbf8:	9a04      	ldr	r2, [sp, #16]
 800bbfa:	441a      	add	r2, r3
 800bbfc:	9204      	str	r2, [sp, #16]
 800bbfe:	9a05      	ldr	r2, [sp, #20]
 800bc00:	2101      	movs	r1, #1
 800bc02:	441a      	add	r2, r3
 800bc04:	4620      	mov	r0, r4
 800bc06:	9205      	str	r2, [sp, #20]
 800bc08:	f001 f87c 	bl	800cd04 <__i2b>
 800bc0c:	4607      	mov	r7, r0
 800bc0e:	2d00      	cmp	r5, #0
 800bc10:	dd0c      	ble.n	800bc2c <_dtoa_r+0x754>
 800bc12:	9b05      	ldr	r3, [sp, #20]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	dd09      	ble.n	800bc2c <_dtoa_r+0x754>
 800bc18:	42ab      	cmp	r3, r5
 800bc1a:	9a04      	ldr	r2, [sp, #16]
 800bc1c:	bfa8      	it	ge
 800bc1e:	462b      	movge	r3, r5
 800bc20:	1ad2      	subs	r2, r2, r3
 800bc22:	9204      	str	r2, [sp, #16]
 800bc24:	9a05      	ldr	r2, [sp, #20]
 800bc26:	1aed      	subs	r5, r5, r3
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	9305      	str	r3, [sp, #20]
 800bc2c:	9b07      	ldr	r3, [sp, #28]
 800bc2e:	b31b      	cbz	r3, 800bc78 <_dtoa_r+0x7a0>
 800bc30:	9b08      	ldr	r3, [sp, #32]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f000 80af 	beq.w	800bd96 <_dtoa_r+0x8be>
 800bc38:	2e00      	cmp	r6, #0
 800bc3a:	dd13      	ble.n	800bc64 <_dtoa_r+0x78c>
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	4632      	mov	r2, r6
 800bc40:	4620      	mov	r0, r4
 800bc42:	f001 f91f 	bl	800ce84 <__pow5mult>
 800bc46:	ee18 2a10 	vmov	r2, s16
 800bc4a:	4601      	mov	r1, r0
 800bc4c:	4607      	mov	r7, r0
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f001 f86e 	bl	800cd30 <__multiply>
 800bc54:	ee18 1a10 	vmov	r1, s16
 800bc58:	4680      	mov	r8, r0
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f000 ff50 	bl	800cb00 <_Bfree>
 800bc60:	ee08 8a10 	vmov	s16, r8
 800bc64:	9b07      	ldr	r3, [sp, #28]
 800bc66:	1b9a      	subs	r2, r3, r6
 800bc68:	d006      	beq.n	800bc78 <_dtoa_r+0x7a0>
 800bc6a:	ee18 1a10 	vmov	r1, s16
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f001 f908 	bl	800ce84 <__pow5mult>
 800bc74:	ee08 0a10 	vmov	s16, r0
 800bc78:	2101      	movs	r1, #1
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f001 f842 	bl	800cd04 <__i2b>
 800bc80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	4606      	mov	r6, r0
 800bc86:	f340 8088 	ble.w	800bd9a <_dtoa_r+0x8c2>
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	4601      	mov	r1, r0
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f001 f8f8 	bl	800ce84 <__pow5mult>
 800bc94:	9b06      	ldr	r3, [sp, #24]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	4606      	mov	r6, r0
 800bc9a:	f340 8081 	ble.w	800bda0 <_dtoa_r+0x8c8>
 800bc9e:	f04f 0800 	mov.w	r8, #0
 800bca2:	6933      	ldr	r3, [r6, #16]
 800bca4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bca8:	6918      	ldr	r0, [r3, #16]
 800bcaa:	f000 ffdb 	bl	800cc64 <__hi0bits>
 800bcae:	f1c0 0020 	rsb	r0, r0, #32
 800bcb2:	9b05      	ldr	r3, [sp, #20]
 800bcb4:	4418      	add	r0, r3
 800bcb6:	f010 001f 	ands.w	r0, r0, #31
 800bcba:	f000 8092 	beq.w	800bde2 <_dtoa_r+0x90a>
 800bcbe:	f1c0 0320 	rsb	r3, r0, #32
 800bcc2:	2b04      	cmp	r3, #4
 800bcc4:	f340 808a 	ble.w	800bddc <_dtoa_r+0x904>
 800bcc8:	f1c0 001c 	rsb	r0, r0, #28
 800bccc:	9b04      	ldr	r3, [sp, #16]
 800bcce:	4403      	add	r3, r0
 800bcd0:	9304      	str	r3, [sp, #16]
 800bcd2:	9b05      	ldr	r3, [sp, #20]
 800bcd4:	4403      	add	r3, r0
 800bcd6:	4405      	add	r5, r0
 800bcd8:	9305      	str	r3, [sp, #20]
 800bcda:	9b04      	ldr	r3, [sp, #16]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	dd07      	ble.n	800bcf0 <_dtoa_r+0x818>
 800bce0:	ee18 1a10 	vmov	r1, s16
 800bce4:	461a      	mov	r2, r3
 800bce6:	4620      	mov	r0, r4
 800bce8:	f001 f926 	bl	800cf38 <__lshift>
 800bcec:	ee08 0a10 	vmov	s16, r0
 800bcf0:	9b05      	ldr	r3, [sp, #20]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	dd05      	ble.n	800bd02 <_dtoa_r+0x82a>
 800bcf6:	4631      	mov	r1, r6
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f001 f91c 	bl	800cf38 <__lshift>
 800bd00:	4606      	mov	r6, r0
 800bd02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d06e      	beq.n	800bde6 <_dtoa_r+0x90e>
 800bd08:	ee18 0a10 	vmov	r0, s16
 800bd0c:	4631      	mov	r1, r6
 800bd0e:	f001 f983 	bl	800d018 <__mcmp>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	da67      	bge.n	800bde6 <_dtoa_r+0x90e>
 800bd16:	9b00      	ldr	r3, [sp, #0]
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	ee18 1a10 	vmov	r1, s16
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	220a      	movs	r2, #10
 800bd22:	2300      	movs	r3, #0
 800bd24:	4620      	mov	r0, r4
 800bd26:	f000 ff0d 	bl	800cb44 <__multadd>
 800bd2a:	9b08      	ldr	r3, [sp, #32]
 800bd2c:	ee08 0a10 	vmov	s16, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f000 81b1 	beq.w	800c098 <_dtoa_r+0xbc0>
 800bd36:	2300      	movs	r3, #0
 800bd38:	4639      	mov	r1, r7
 800bd3a:	220a      	movs	r2, #10
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f000 ff01 	bl	800cb44 <__multadd>
 800bd42:	9b02      	ldr	r3, [sp, #8]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	4607      	mov	r7, r0
 800bd48:	f300 808e 	bgt.w	800be68 <_dtoa_r+0x990>
 800bd4c:	9b06      	ldr	r3, [sp, #24]
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	dc51      	bgt.n	800bdf6 <_dtoa_r+0x91e>
 800bd52:	e089      	b.n	800be68 <_dtoa_r+0x990>
 800bd54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bd5a:	e74b      	b.n	800bbf4 <_dtoa_r+0x71c>
 800bd5c:	9b03      	ldr	r3, [sp, #12]
 800bd5e:	1e5e      	subs	r6, r3, #1
 800bd60:	9b07      	ldr	r3, [sp, #28]
 800bd62:	42b3      	cmp	r3, r6
 800bd64:	bfbf      	itttt	lt
 800bd66:	9b07      	ldrlt	r3, [sp, #28]
 800bd68:	9607      	strlt	r6, [sp, #28]
 800bd6a:	1af2      	sublt	r2, r6, r3
 800bd6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bd6e:	bfb6      	itet	lt
 800bd70:	189b      	addlt	r3, r3, r2
 800bd72:	1b9e      	subge	r6, r3, r6
 800bd74:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bd76:	9b03      	ldr	r3, [sp, #12]
 800bd78:	bfb8      	it	lt
 800bd7a:	2600      	movlt	r6, #0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	bfb7      	itett	lt
 800bd80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bd84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bd88:	1a9d      	sublt	r5, r3, r2
 800bd8a:	2300      	movlt	r3, #0
 800bd8c:	e734      	b.n	800bbf8 <_dtoa_r+0x720>
 800bd8e:	9e07      	ldr	r6, [sp, #28]
 800bd90:	9d04      	ldr	r5, [sp, #16]
 800bd92:	9f08      	ldr	r7, [sp, #32]
 800bd94:	e73b      	b.n	800bc0e <_dtoa_r+0x736>
 800bd96:	9a07      	ldr	r2, [sp, #28]
 800bd98:	e767      	b.n	800bc6a <_dtoa_r+0x792>
 800bd9a:	9b06      	ldr	r3, [sp, #24]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	dc18      	bgt.n	800bdd2 <_dtoa_r+0x8fa>
 800bda0:	f1ba 0f00 	cmp.w	sl, #0
 800bda4:	d115      	bne.n	800bdd2 <_dtoa_r+0x8fa>
 800bda6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdaa:	b993      	cbnz	r3, 800bdd2 <_dtoa_r+0x8fa>
 800bdac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bdb0:	0d1b      	lsrs	r3, r3, #20
 800bdb2:	051b      	lsls	r3, r3, #20
 800bdb4:	b183      	cbz	r3, 800bdd8 <_dtoa_r+0x900>
 800bdb6:	9b04      	ldr	r3, [sp, #16]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	9304      	str	r3, [sp, #16]
 800bdbc:	9b05      	ldr	r3, [sp, #20]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	9305      	str	r3, [sp, #20]
 800bdc2:	f04f 0801 	mov.w	r8, #1
 800bdc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f47f af6a 	bne.w	800bca2 <_dtoa_r+0x7ca>
 800bdce:	2001      	movs	r0, #1
 800bdd0:	e76f      	b.n	800bcb2 <_dtoa_r+0x7da>
 800bdd2:	f04f 0800 	mov.w	r8, #0
 800bdd6:	e7f6      	b.n	800bdc6 <_dtoa_r+0x8ee>
 800bdd8:	4698      	mov	r8, r3
 800bdda:	e7f4      	b.n	800bdc6 <_dtoa_r+0x8ee>
 800bddc:	f43f af7d 	beq.w	800bcda <_dtoa_r+0x802>
 800bde0:	4618      	mov	r0, r3
 800bde2:	301c      	adds	r0, #28
 800bde4:	e772      	b.n	800bccc <_dtoa_r+0x7f4>
 800bde6:	9b03      	ldr	r3, [sp, #12]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	dc37      	bgt.n	800be5c <_dtoa_r+0x984>
 800bdec:	9b06      	ldr	r3, [sp, #24]
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	dd34      	ble.n	800be5c <_dtoa_r+0x984>
 800bdf2:	9b03      	ldr	r3, [sp, #12]
 800bdf4:	9302      	str	r3, [sp, #8]
 800bdf6:	9b02      	ldr	r3, [sp, #8]
 800bdf8:	b96b      	cbnz	r3, 800be16 <_dtoa_r+0x93e>
 800bdfa:	4631      	mov	r1, r6
 800bdfc:	2205      	movs	r2, #5
 800bdfe:	4620      	mov	r0, r4
 800be00:	f000 fea0 	bl	800cb44 <__multadd>
 800be04:	4601      	mov	r1, r0
 800be06:	4606      	mov	r6, r0
 800be08:	ee18 0a10 	vmov	r0, s16
 800be0c:	f001 f904 	bl	800d018 <__mcmp>
 800be10:	2800      	cmp	r0, #0
 800be12:	f73f adbb 	bgt.w	800b98c <_dtoa_r+0x4b4>
 800be16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be18:	9d01      	ldr	r5, [sp, #4]
 800be1a:	43db      	mvns	r3, r3
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	f04f 0800 	mov.w	r8, #0
 800be22:	4631      	mov	r1, r6
 800be24:	4620      	mov	r0, r4
 800be26:	f000 fe6b 	bl	800cb00 <_Bfree>
 800be2a:	2f00      	cmp	r7, #0
 800be2c:	f43f aea4 	beq.w	800bb78 <_dtoa_r+0x6a0>
 800be30:	f1b8 0f00 	cmp.w	r8, #0
 800be34:	d005      	beq.n	800be42 <_dtoa_r+0x96a>
 800be36:	45b8      	cmp	r8, r7
 800be38:	d003      	beq.n	800be42 <_dtoa_r+0x96a>
 800be3a:	4641      	mov	r1, r8
 800be3c:	4620      	mov	r0, r4
 800be3e:	f000 fe5f 	bl	800cb00 <_Bfree>
 800be42:	4639      	mov	r1, r7
 800be44:	4620      	mov	r0, r4
 800be46:	f000 fe5b 	bl	800cb00 <_Bfree>
 800be4a:	e695      	b.n	800bb78 <_dtoa_r+0x6a0>
 800be4c:	2600      	movs	r6, #0
 800be4e:	4637      	mov	r7, r6
 800be50:	e7e1      	b.n	800be16 <_dtoa_r+0x93e>
 800be52:	9700      	str	r7, [sp, #0]
 800be54:	4637      	mov	r7, r6
 800be56:	e599      	b.n	800b98c <_dtoa_r+0x4b4>
 800be58:	40240000 	.word	0x40240000
 800be5c:	9b08      	ldr	r3, [sp, #32]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f000 80ca 	beq.w	800bff8 <_dtoa_r+0xb20>
 800be64:	9b03      	ldr	r3, [sp, #12]
 800be66:	9302      	str	r3, [sp, #8]
 800be68:	2d00      	cmp	r5, #0
 800be6a:	dd05      	ble.n	800be78 <_dtoa_r+0x9a0>
 800be6c:	4639      	mov	r1, r7
 800be6e:	462a      	mov	r2, r5
 800be70:	4620      	mov	r0, r4
 800be72:	f001 f861 	bl	800cf38 <__lshift>
 800be76:	4607      	mov	r7, r0
 800be78:	f1b8 0f00 	cmp.w	r8, #0
 800be7c:	d05b      	beq.n	800bf36 <_dtoa_r+0xa5e>
 800be7e:	6879      	ldr	r1, [r7, #4]
 800be80:	4620      	mov	r0, r4
 800be82:	f000 fdfd 	bl	800ca80 <_Balloc>
 800be86:	4605      	mov	r5, r0
 800be88:	b928      	cbnz	r0, 800be96 <_dtoa_r+0x9be>
 800be8a:	4b87      	ldr	r3, [pc, #540]	; (800c0a8 <_dtoa_r+0xbd0>)
 800be8c:	4602      	mov	r2, r0
 800be8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800be92:	f7ff bb3b 	b.w	800b50c <_dtoa_r+0x34>
 800be96:	693a      	ldr	r2, [r7, #16]
 800be98:	3202      	adds	r2, #2
 800be9a:	0092      	lsls	r2, r2, #2
 800be9c:	f107 010c 	add.w	r1, r7, #12
 800bea0:	300c      	adds	r0, #12
 800bea2:	f7fd fad6 	bl	8009452 <memcpy>
 800bea6:	2201      	movs	r2, #1
 800bea8:	4629      	mov	r1, r5
 800beaa:	4620      	mov	r0, r4
 800beac:	f001 f844 	bl	800cf38 <__lshift>
 800beb0:	9b01      	ldr	r3, [sp, #4]
 800beb2:	f103 0901 	add.w	r9, r3, #1
 800beb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800beba:	4413      	add	r3, r2
 800bebc:	9305      	str	r3, [sp, #20]
 800bebe:	f00a 0301 	and.w	r3, sl, #1
 800bec2:	46b8      	mov	r8, r7
 800bec4:	9304      	str	r3, [sp, #16]
 800bec6:	4607      	mov	r7, r0
 800bec8:	4631      	mov	r1, r6
 800beca:	ee18 0a10 	vmov	r0, s16
 800bece:	f7ff fa77 	bl	800b3c0 <quorem>
 800bed2:	4641      	mov	r1, r8
 800bed4:	9002      	str	r0, [sp, #8]
 800bed6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800beda:	ee18 0a10 	vmov	r0, s16
 800bede:	f001 f89b 	bl	800d018 <__mcmp>
 800bee2:	463a      	mov	r2, r7
 800bee4:	9003      	str	r0, [sp, #12]
 800bee6:	4631      	mov	r1, r6
 800bee8:	4620      	mov	r0, r4
 800beea:	f001 f8b1 	bl	800d050 <__mdiff>
 800beee:	68c2      	ldr	r2, [r0, #12]
 800bef0:	f109 3bff 	add.w	fp, r9, #4294967295
 800bef4:	4605      	mov	r5, r0
 800bef6:	bb02      	cbnz	r2, 800bf3a <_dtoa_r+0xa62>
 800bef8:	4601      	mov	r1, r0
 800befa:	ee18 0a10 	vmov	r0, s16
 800befe:	f001 f88b 	bl	800d018 <__mcmp>
 800bf02:	4602      	mov	r2, r0
 800bf04:	4629      	mov	r1, r5
 800bf06:	4620      	mov	r0, r4
 800bf08:	9207      	str	r2, [sp, #28]
 800bf0a:	f000 fdf9 	bl	800cb00 <_Bfree>
 800bf0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bf12:	ea43 0102 	orr.w	r1, r3, r2
 800bf16:	9b04      	ldr	r3, [sp, #16]
 800bf18:	430b      	orrs	r3, r1
 800bf1a:	464d      	mov	r5, r9
 800bf1c:	d10f      	bne.n	800bf3e <_dtoa_r+0xa66>
 800bf1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf22:	d02a      	beq.n	800bf7a <_dtoa_r+0xaa2>
 800bf24:	9b03      	ldr	r3, [sp, #12]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	dd02      	ble.n	800bf30 <_dtoa_r+0xa58>
 800bf2a:	9b02      	ldr	r3, [sp, #8]
 800bf2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bf30:	f88b a000 	strb.w	sl, [fp]
 800bf34:	e775      	b.n	800be22 <_dtoa_r+0x94a>
 800bf36:	4638      	mov	r0, r7
 800bf38:	e7ba      	b.n	800beb0 <_dtoa_r+0x9d8>
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	e7e2      	b.n	800bf04 <_dtoa_r+0xa2c>
 800bf3e:	9b03      	ldr	r3, [sp, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	db04      	blt.n	800bf4e <_dtoa_r+0xa76>
 800bf44:	9906      	ldr	r1, [sp, #24]
 800bf46:	430b      	orrs	r3, r1
 800bf48:	9904      	ldr	r1, [sp, #16]
 800bf4a:	430b      	orrs	r3, r1
 800bf4c:	d122      	bne.n	800bf94 <_dtoa_r+0xabc>
 800bf4e:	2a00      	cmp	r2, #0
 800bf50:	ddee      	ble.n	800bf30 <_dtoa_r+0xa58>
 800bf52:	ee18 1a10 	vmov	r1, s16
 800bf56:	2201      	movs	r2, #1
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f000 ffed 	bl	800cf38 <__lshift>
 800bf5e:	4631      	mov	r1, r6
 800bf60:	ee08 0a10 	vmov	s16, r0
 800bf64:	f001 f858 	bl	800d018 <__mcmp>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	dc03      	bgt.n	800bf74 <_dtoa_r+0xa9c>
 800bf6c:	d1e0      	bne.n	800bf30 <_dtoa_r+0xa58>
 800bf6e:	f01a 0f01 	tst.w	sl, #1
 800bf72:	d0dd      	beq.n	800bf30 <_dtoa_r+0xa58>
 800bf74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf78:	d1d7      	bne.n	800bf2a <_dtoa_r+0xa52>
 800bf7a:	2339      	movs	r3, #57	; 0x39
 800bf7c:	f88b 3000 	strb.w	r3, [fp]
 800bf80:	462b      	mov	r3, r5
 800bf82:	461d      	mov	r5, r3
 800bf84:	3b01      	subs	r3, #1
 800bf86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bf8a:	2a39      	cmp	r2, #57	; 0x39
 800bf8c:	d071      	beq.n	800c072 <_dtoa_r+0xb9a>
 800bf8e:	3201      	adds	r2, #1
 800bf90:	701a      	strb	r2, [r3, #0]
 800bf92:	e746      	b.n	800be22 <_dtoa_r+0x94a>
 800bf94:	2a00      	cmp	r2, #0
 800bf96:	dd07      	ble.n	800bfa8 <_dtoa_r+0xad0>
 800bf98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf9c:	d0ed      	beq.n	800bf7a <_dtoa_r+0xaa2>
 800bf9e:	f10a 0301 	add.w	r3, sl, #1
 800bfa2:	f88b 3000 	strb.w	r3, [fp]
 800bfa6:	e73c      	b.n	800be22 <_dtoa_r+0x94a>
 800bfa8:	9b05      	ldr	r3, [sp, #20]
 800bfaa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bfae:	4599      	cmp	r9, r3
 800bfb0:	d047      	beq.n	800c042 <_dtoa_r+0xb6a>
 800bfb2:	ee18 1a10 	vmov	r1, s16
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	220a      	movs	r2, #10
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f000 fdc2 	bl	800cb44 <__multadd>
 800bfc0:	45b8      	cmp	r8, r7
 800bfc2:	ee08 0a10 	vmov	s16, r0
 800bfc6:	f04f 0300 	mov.w	r3, #0
 800bfca:	f04f 020a 	mov.w	r2, #10
 800bfce:	4641      	mov	r1, r8
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	d106      	bne.n	800bfe2 <_dtoa_r+0xb0a>
 800bfd4:	f000 fdb6 	bl	800cb44 <__multadd>
 800bfd8:	4680      	mov	r8, r0
 800bfda:	4607      	mov	r7, r0
 800bfdc:	f109 0901 	add.w	r9, r9, #1
 800bfe0:	e772      	b.n	800bec8 <_dtoa_r+0x9f0>
 800bfe2:	f000 fdaf 	bl	800cb44 <__multadd>
 800bfe6:	4639      	mov	r1, r7
 800bfe8:	4680      	mov	r8, r0
 800bfea:	2300      	movs	r3, #0
 800bfec:	220a      	movs	r2, #10
 800bfee:	4620      	mov	r0, r4
 800bff0:	f000 fda8 	bl	800cb44 <__multadd>
 800bff4:	4607      	mov	r7, r0
 800bff6:	e7f1      	b.n	800bfdc <_dtoa_r+0xb04>
 800bff8:	9b03      	ldr	r3, [sp, #12]
 800bffa:	9302      	str	r3, [sp, #8]
 800bffc:	9d01      	ldr	r5, [sp, #4]
 800bffe:	ee18 0a10 	vmov	r0, s16
 800c002:	4631      	mov	r1, r6
 800c004:	f7ff f9dc 	bl	800b3c0 <quorem>
 800c008:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c00c:	9b01      	ldr	r3, [sp, #4]
 800c00e:	f805 ab01 	strb.w	sl, [r5], #1
 800c012:	1aea      	subs	r2, r5, r3
 800c014:	9b02      	ldr	r3, [sp, #8]
 800c016:	4293      	cmp	r3, r2
 800c018:	dd09      	ble.n	800c02e <_dtoa_r+0xb56>
 800c01a:	ee18 1a10 	vmov	r1, s16
 800c01e:	2300      	movs	r3, #0
 800c020:	220a      	movs	r2, #10
 800c022:	4620      	mov	r0, r4
 800c024:	f000 fd8e 	bl	800cb44 <__multadd>
 800c028:	ee08 0a10 	vmov	s16, r0
 800c02c:	e7e7      	b.n	800bffe <_dtoa_r+0xb26>
 800c02e:	9b02      	ldr	r3, [sp, #8]
 800c030:	2b00      	cmp	r3, #0
 800c032:	bfc8      	it	gt
 800c034:	461d      	movgt	r5, r3
 800c036:	9b01      	ldr	r3, [sp, #4]
 800c038:	bfd8      	it	le
 800c03a:	2501      	movle	r5, #1
 800c03c:	441d      	add	r5, r3
 800c03e:	f04f 0800 	mov.w	r8, #0
 800c042:	ee18 1a10 	vmov	r1, s16
 800c046:	2201      	movs	r2, #1
 800c048:	4620      	mov	r0, r4
 800c04a:	f000 ff75 	bl	800cf38 <__lshift>
 800c04e:	4631      	mov	r1, r6
 800c050:	ee08 0a10 	vmov	s16, r0
 800c054:	f000 ffe0 	bl	800d018 <__mcmp>
 800c058:	2800      	cmp	r0, #0
 800c05a:	dc91      	bgt.n	800bf80 <_dtoa_r+0xaa8>
 800c05c:	d102      	bne.n	800c064 <_dtoa_r+0xb8c>
 800c05e:	f01a 0f01 	tst.w	sl, #1
 800c062:	d18d      	bne.n	800bf80 <_dtoa_r+0xaa8>
 800c064:	462b      	mov	r3, r5
 800c066:	461d      	mov	r5, r3
 800c068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c06c:	2a30      	cmp	r2, #48	; 0x30
 800c06e:	d0fa      	beq.n	800c066 <_dtoa_r+0xb8e>
 800c070:	e6d7      	b.n	800be22 <_dtoa_r+0x94a>
 800c072:	9a01      	ldr	r2, [sp, #4]
 800c074:	429a      	cmp	r2, r3
 800c076:	d184      	bne.n	800bf82 <_dtoa_r+0xaaa>
 800c078:	9b00      	ldr	r3, [sp, #0]
 800c07a:	3301      	adds	r3, #1
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	2331      	movs	r3, #49	; 0x31
 800c080:	7013      	strb	r3, [r2, #0]
 800c082:	e6ce      	b.n	800be22 <_dtoa_r+0x94a>
 800c084:	4b09      	ldr	r3, [pc, #36]	; (800c0ac <_dtoa_r+0xbd4>)
 800c086:	f7ff ba95 	b.w	800b5b4 <_dtoa_r+0xdc>
 800c08a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	f47f aa6e 	bne.w	800b56e <_dtoa_r+0x96>
 800c092:	4b07      	ldr	r3, [pc, #28]	; (800c0b0 <_dtoa_r+0xbd8>)
 800c094:	f7ff ba8e 	b.w	800b5b4 <_dtoa_r+0xdc>
 800c098:	9b02      	ldr	r3, [sp, #8]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	dcae      	bgt.n	800bffc <_dtoa_r+0xb24>
 800c09e:	9b06      	ldr	r3, [sp, #24]
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	f73f aea8 	bgt.w	800bdf6 <_dtoa_r+0x91e>
 800c0a6:	e7a9      	b.n	800bffc <_dtoa_r+0xb24>
 800c0a8:	0800dfdc 	.word	0x0800dfdc
 800c0ac:	0800dda0 	.word	0x0800dda0
 800c0b0:	0800df5d 	.word	0x0800df5d

0800c0b4 <__sflush_r>:
 800c0b4:	898a      	ldrh	r2, [r1, #12]
 800c0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ba:	4605      	mov	r5, r0
 800c0bc:	0710      	lsls	r0, r2, #28
 800c0be:	460c      	mov	r4, r1
 800c0c0:	d458      	bmi.n	800c174 <__sflush_r+0xc0>
 800c0c2:	684b      	ldr	r3, [r1, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	dc05      	bgt.n	800c0d4 <__sflush_r+0x20>
 800c0c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	dc02      	bgt.n	800c0d4 <__sflush_r+0x20>
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0d6:	2e00      	cmp	r6, #0
 800c0d8:	d0f9      	beq.n	800c0ce <__sflush_r+0x1a>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0e0:	682f      	ldr	r7, [r5, #0]
 800c0e2:	602b      	str	r3, [r5, #0]
 800c0e4:	d032      	beq.n	800c14c <__sflush_r+0x98>
 800c0e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0e8:	89a3      	ldrh	r3, [r4, #12]
 800c0ea:	075a      	lsls	r2, r3, #29
 800c0ec:	d505      	bpl.n	800c0fa <__sflush_r+0x46>
 800c0ee:	6863      	ldr	r3, [r4, #4]
 800c0f0:	1ac0      	subs	r0, r0, r3
 800c0f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0f4:	b10b      	cbz	r3, 800c0fa <__sflush_r+0x46>
 800c0f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0f8:	1ac0      	subs	r0, r0, r3
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c100:	6a21      	ldr	r1, [r4, #32]
 800c102:	4628      	mov	r0, r5
 800c104:	47b0      	blx	r6
 800c106:	1c43      	adds	r3, r0, #1
 800c108:	89a3      	ldrh	r3, [r4, #12]
 800c10a:	d106      	bne.n	800c11a <__sflush_r+0x66>
 800c10c:	6829      	ldr	r1, [r5, #0]
 800c10e:	291d      	cmp	r1, #29
 800c110:	d82c      	bhi.n	800c16c <__sflush_r+0xb8>
 800c112:	4a2a      	ldr	r2, [pc, #168]	; (800c1bc <__sflush_r+0x108>)
 800c114:	40ca      	lsrs	r2, r1
 800c116:	07d6      	lsls	r6, r2, #31
 800c118:	d528      	bpl.n	800c16c <__sflush_r+0xb8>
 800c11a:	2200      	movs	r2, #0
 800c11c:	6062      	str	r2, [r4, #4]
 800c11e:	04d9      	lsls	r1, r3, #19
 800c120:	6922      	ldr	r2, [r4, #16]
 800c122:	6022      	str	r2, [r4, #0]
 800c124:	d504      	bpl.n	800c130 <__sflush_r+0x7c>
 800c126:	1c42      	adds	r2, r0, #1
 800c128:	d101      	bne.n	800c12e <__sflush_r+0x7a>
 800c12a:	682b      	ldr	r3, [r5, #0]
 800c12c:	b903      	cbnz	r3, 800c130 <__sflush_r+0x7c>
 800c12e:	6560      	str	r0, [r4, #84]	; 0x54
 800c130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c132:	602f      	str	r7, [r5, #0]
 800c134:	2900      	cmp	r1, #0
 800c136:	d0ca      	beq.n	800c0ce <__sflush_r+0x1a>
 800c138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c13c:	4299      	cmp	r1, r3
 800c13e:	d002      	beq.n	800c146 <__sflush_r+0x92>
 800c140:	4628      	mov	r0, r5
 800c142:	f001 f975 	bl	800d430 <_free_r>
 800c146:	2000      	movs	r0, #0
 800c148:	6360      	str	r0, [r4, #52]	; 0x34
 800c14a:	e7c1      	b.n	800c0d0 <__sflush_r+0x1c>
 800c14c:	6a21      	ldr	r1, [r4, #32]
 800c14e:	2301      	movs	r3, #1
 800c150:	4628      	mov	r0, r5
 800c152:	47b0      	blx	r6
 800c154:	1c41      	adds	r1, r0, #1
 800c156:	d1c7      	bne.n	800c0e8 <__sflush_r+0x34>
 800c158:	682b      	ldr	r3, [r5, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d0c4      	beq.n	800c0e8 <__sflush_r+0x34>
 800c15e:	2b1d      	cmp	r3, #29
 800c160:	d001      	beq.n	800c166 <__sflush_r+0xb2>
 800c162:	2b16      	cmp	r3, #22
 800c164:	d101      	bne.n	800c16a <__sflush_r+0xb6>
 800c166:	602f      	str	r7, [r5, #0]
 800c168:	e7b1      	b.n	800c0ce <__sflush_r+0x1a>
 800c16a:	89a3      	ldrh	r3, [r4, #12]
 800c16c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c170:	81a3      	strh	r3, [r4, #12]
 800c172:	e7ad      	b.n	800c0d0 <__sflush_r+0x1c>
 800c174:	690f      	ldr	r7, [r1, #16]
 800c176:	2f00      	cmp	r7, #0
 800c178:	d0a9      	beq.n	800c0ce <__sflush_r+0x1a>
 800c17a:	0793      	lsls	r3, r2, #30
 800c17c:	680e      	ldr	r6, [r1, #0]
 800c17e:	bf08      	it	eq
 800c180:	694b      	ldreq	r3, [r1, #20]
 800c182:	600f      	str	r7, [r1, #0]
 800c184:	bf18      	it	ne
 800c186:	2300      	movne	r3, #0
 800c188:	eba6 0807 	sub.w	r8, r6, r7
 800c18c:	608b      	str	r3, [r1, #8]
 800c18e:	f1b8 0f00 	cmp.w	r8, #0
 800c192:	dd9c      	ble.n	800c0ce <__sflush_r+0x1a>
 800c194:	6a21      	ldr	r1, [r4, #32]
 800c196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c198:	4643      	mov	r3, r8
 800c19a:	463a      	mov	r2, r7
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b0      	blx	r6
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	dc06      	bgt.n	800c1b2 <__sflush_r+0xfe>
 800c1a4:	89a3      	ldrh	r3, [r4, #12]
 800c1a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1aa:	81a3      	strh	r3, [r4, #12]
 800c1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b0:	e78e      	b.n	800c0d0 <__sflush_r+0x1c>
 800c1b2:	4407      	add	r7, r0
 800c1b4:	eba8 0800 	sub.w	r8, r8, r0
 800c1b8:	e7e9      	b.n	800c18e <__sflush_r+0xda>
 800c1ba:	bf00      	nop
 800c1bc:	20400001 	.word	0x20400001

0800c1c0 <_fflush_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	690b      	ldr	r3, [r1, #16]
 800c1c4:	4605      	mov	r5, r0
 800c1c6:	460c      	mov	r4, r1
 800c1c8:	b913      	cbnz	r3, 800c1d0 <_fflush_r+0x10>
 800c1ca:	2500      	movs	r5, #0
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	bd38      	pop	{r3, r4, r5, pc}
 800c1d0:	b118      	cbz	r0, 800c1da <_fflush_r+0x1a>
 800c1d2:	6983      	ldr	r3, [r0, #24]
 800c1d4:	b90b      	cbnz	r3, 800c1da <_fflush_r+0x1a>
 800c1d6:	f7fd f877 	bl	80092c8 <__sinit>
 800c1da:	4b14      	ldr	r3, [pc, #80]	; (800c22c <_fflush_r+0x6c>)
 800c1dc:	429c      	cmp	r4, r3
 800c1de:	d11b      	bne.n	800c218 <_fflush_r+0x58>
 800c1e0:	686c      	ldr	r4, [r5, #4]
 800c1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d0ef      	beq.n	800c1ca <_fflush_r+0xa>
 800c1ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1ec:	07d0      	lsls	r0, r2, #31
 800c1ee:	d404      	bmi.n	800c1fa <_fflush_r+0x3a>
 800c1f0:	0599      	lsls	r1, r3, #22
 800c1f2:	d402      	bmi.n	800c1fa <_fflush_r+0x3a>
 800c1f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1f6:	f7fd f92a 	bl	800944e <__retarget_lock_acquire_recursive>
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	f7ff ff59 	bl	800c0b4 <__sflush_r>
 800c202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c204:	07da      	lsls	r2, r3, #31
 800c206:	4605      	mov	r5, r0
 800c208:	d4e0      	bmi.n	800c1cc <_fflush_r+0xc>
 800c20a:	89a3      	ldrh	r3, [r4, #12]
 800c20c:	059b      	lsls	r3, r3, #22
 800c20e:	d4dd      	bmi.n	800c1cc <_fflush_r+0xc>
 800c210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c212:	f7fd f91d 	bl	8009450 <__retarget_lock_release_recursive>
 800c216:	e7d9      	b.n	800c1cc <_fflush_r+0xc>
 800c218:	4b05      	ldr	r3, [pc, #20]	; (800c230 <_fflush_r+0x70>)
 800c21a:	429c      	cmp	r4, r3
 800c21c:	d101      	bne.n	800c222 <_fflush_r+0x62>
 800c21e:	68ac      	ldr	r4, [r5, #8]
 800c220:	e7df      	b.n	800c1e2 <_fflush_r+0x22>
 800c222:	4b04      	ldr	r3, [pc, #16]	; (800c234 <_fflush_r+0x74>)
 800c224:	429c      	cmp	r4, r3
 800c226:	bf08      	it	eq
 800c228:	68ec      	ldreq	r4, [r5, #12]
 800c22a:	e7da      	b.n	800c1e2 <_fflush_r+0x22>
 800c22c:	0800dd4c 	.word	0x0800dd4c
 800c230:	0800dd6c 	.word	0x0800dd6c
 800c234:	0800dd2c 	.word	0x0800dd2c

0800c238 <fiprintf>:
 800c238:	b40e      	push	{r1, r2, r3}
 800c23a:	b503      	push	{r0, r1, lr}
 800c23c:	4601      	mov	r1, r0
 800c23e:	ab03      	add	r3, sp, #12
 800c240:	4805      	ldr	r0, [pc, #20]	; (800c258 <fiprintf+0x20>)
 800c242:	f853 2b04 	ldr.w	r2, [r3], #4
 800c246:	6800      	ldr	r0, [r0, #0]
 800c248:	9301      	str	r3, [sp, #4]
 800c24a:	f001 fac3 	bl	800d7d4 <_vfiprintf_r>
 800c24e:	b002      	add	sp, #8
 800c250:	f85d eb04 	ldr.w	lr, [sp], #4
 800c254:	b003      	add	sp, #12
 800c256:	4770      	bx	lr
 800c258:	20000044 	.word	0x20000044

0800c25c <rshift>:
 800c25c:	6903      	ldr	r3, [r0, #16]
 800c25e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c262:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c266:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c26a:	f100 0414 	add.w	r4, r0, #20
 800c26e:	dd45      	ble.n	800c2fc <rshift+0xa0>
 800c270:	f011 011f 	ands.w	r1, r1, #31
 800c274:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c278:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c27c:	d10c      	bne.n	800c298 <rshift+0x3c>
 800c27e:	f100 0710 	add.w	r7, r0, #16
 800c282:	4629      	mov	r1, r5
 800c284:	42b1      	cmp	r1, r6
 800c286:	d334      	bcc.n	800c2f2 <rshift+0x96>
 800c288:	1a9b      	subs	r3, r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	1eea      	subs	r2, r5, #3
 800c28e:	4296      	cmp	r6, r2
 800c290:	bf38      	it	cc
 800c292:	2300      	movcc	r3, #0
 800c294:	4423      	add	r3, r4
 800c296:	e015      	b.n	800c2c4 <rshift+0x68>
 800c298:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c29c:	f1c1 0820 	rsb	r8, r1, #32
 800c2a0:	40cf      	lsrs	r7, r1
 800c2a2:	f105 0e04 	add.w	lr, r5, #4
 800c2a6:	46a1      	mov	r9, r4
 800c2a8:	4576      	cmp	r6, lr
 800c2aa:	46f4      	mov	ip, lr
 800c2ac:	d815      	bhi.n	800c2da <rshift+0x7e>
 800c2ae:	1a9a      	subs	r2, r3, r2
 800c2b0:	0092      	lsls	r2, r2, #2
 800c2b2:	3a04      	subs	r2, #4
 800c2b4:	3501      	adds	r5, #1
 800c2b6:	42ae      	cmp	r6, r5
 800c2b8:	bf38      	it	cc
 800c2ba:	2200      	movcc	r2, #0
 800c2bc:	18a3      	adds	r3, r4, r2
 800c2be:	50a7      	str	r7, [r4, r2]
 800c2c0:	b107      	cbz	r7, 800c2c4 <rshift+0x68>
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	1b1a      	subs	r2, r3, r4
 800c2c6:	42a3      	cmp	r3, r4
 800c2c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c2cc:	bf08      	it	eq
 800c2ce:	2300      	moveq	r3, #0
 800c2d0:	6102      	str	r2, [r0, #16]
 800c2d2:	bf08      	it	eq
 800c2d4:	6143      	streq	r3, [r0, #20]
 800c2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2da:	f8dc c000 	ldr.w	ip, [ip]
 800c2de:	fa0c fc08 	lsl.w	ip, ip, r8
 800c2e2:	ea4c 0707 	orr.w	r7, ip, r7
 800c2e6:	f849 7b04 	str.w	r7, [r9], #4
 800c2ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c2ee:	40cf      	lsrs	r7, r1
 800c2f0:	e7da      	b.n	800c2a8 <rshift+0x4c>
 800c2f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c2f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c2fa:	e7c3      	b.n	800c284 <rshift+0x28>
 800c2fc:	4623      	mov	r3, r4
 800c2fe:	e7e1      	b.n	800c2c4 <rshift+0x68>

0800c300 <__hexdig_fun>:
 800c300:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c304:	2b09      	cmp	r3, #9
 800c306:	d802      	bhi.n	800c30e <__hexdig_fun+0xe>
 800c308:	3820      	subs	r0, #32
 800c30a:	b2c0      	uxtb	r0, r0
 800c30c:	4770      	bx	lr
 800c30e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c312:	2b05      	cmp	r3, #5
 800c314:	d801      	bhi.n	800c31a <__hexdig_fun+0x1a>
 800c316:	3847      	subs	r0, #71	; 0x47
 800c318:	e7f7      	b.n	800c30a <__hexdig_fun+0xa>
 800c31a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c31e:	2b05      	cmp	r3, #5
 800c320:	d801      	bhi.n	800c326 <__hexdig_fun+0x26>
 800c322:	3827      	subs	r0, #39	; 0x27
 800c324:	e7f1      	b.n	800c30a <__hexdig_fun+0xa>
 800c326:	2000      	movs	r0, #0
 800c328:	4770      	bx	lr
	...

0800c32c <__gethex>:
 800c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	ed2d 8b02 	vpush	{d8}
 800c334:	b089      	sub	sp, #36	; 0x24
 800c336:	ee08 0a10 	vmov	s16, r0
 800c33a:	9304      	str	r3, [sp, #16]
 800c33c:	4bb4      	ldr	r3, [pc, #720]	; (800c610 <__gethex+0x2e4>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	9301      	str	r3, [sp, #4]
 800c342:	4618      	mov	r0, r3
 800c344:	468b      	mov	fp, r1
 800c346:	4690      	mov	r8, r2
 800c348:	f7f3 ff42 	bl	80001d0 <strlen>
 800c34c:	9b01      	ldr	r3, [sp, #4]
 800c34e:	f8db 2000 	ldr.w	r2, [fp]
 800c352:	4403      	add	r3, r0
 800c354:	4682      	mov	sl, r0
 800c356:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c35a:	9305      	str	r3, [sp, #20]
 800c35c:	1c93      	adds	r3, r2, #2
 800c35e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c362:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c366:	32fe      	adds	r2, #254	; 0xfe
 800c368:	18d1      	adds	r1, r2, r3
 800c36a:	461f      	mov	r7, r3
 800c36c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c370:	9100      	str	r1, [sp, #0]
 800c372:	2830      	cmp	r0, #48	; 0x30
 800c374:	d0f8      	beq.n	800c368 <__gethex+0x3c>
 800c376:	f7ff ffc3 	bl	800c300 <__hexdig_fun>
 800c37a:	4604      	mov	r4, r0
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d13a      	bne.n	800c3f6 <__gethex+0xca>
 800c380:	9901      	ldr	r1, [sp, #4]
 800c382:	4652      	mov	r2, sl
 800c384:	4638      	mov	r0, r7
 800c386:	f001 fb6f 	bl	800da68 <strncmp>
 800c38a:	4605      	mov	r5, r0
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d168      	bne.n	800c462 <__gethex+0x136>
 800c390:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c394:	eb07 060a 	add.w	r6, r7, sl
 800c398:	f7ff ffb2 	bl	800c300 <__hexdig_fun>
 800c39c:	2800      	cmp	r0, #0
 800c39e:	d062      	beq.n	800c466 <__gethex+0x13a>
 800c3a0:	4633      	mov	r3, r6
 800c3a2:	7818      	ldrb	r0, [r3, #0]
 800c3a4:	2830      	cmp	r0, #48	; 0x30
 800c3a6:	461f      	mov	r7, r3
 800c3a8:	f103 0301 	add.w	r3, r3, #1
 800c3ac:	d0f9      	beq.n	800c3a2 <__gethex+0x76>
 800c3ae:	f7ff ffa7 	bl	800c300 <__hexdig_fun>
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	fab0 f480 	clz	r4, r0
 800c3b8:	0964      	lsrs	r4, r4, #5
 800c3ba:	4635      	mov	r5, r6
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	463a      	mov	r2, r7
 800c3c0:	4616      	mov	r6, r2
 800c3c2:	3201      	adds	r2, #1
 800c3c4:	7830      	ldrb	r0, [r6, #0]
 800c3c6:	f7ff ff9b 	bl	800c300 <__hexdig_fun>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d1f8      	bne.n	800c3c0 <__gethex+0x94>
 800c3ce:	9901      	ldr	r1, [sp, #4]
 800c3d0:	4652      	mov	r2, sl
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f001 fb48 	bl	800da68 <strncmp>
 800c3d8:	b980      	cbnz	r0, 800c3fc <__gethex+0xd0>
 800c3da:	b94d      	cbnz	r5, 800c3f0 <__gethex+0xc4>
 800c3dc:	eb06 050a 	add.w	r5, r6, sl
 800c3e0:	462a      	mov	r2, r5
 800c3e2:	4616      	mov	r6, r2
 800c3e4:	3201      	adds	r2, #1
 800c3e6:	7830      	ldrb	r0, [r6, #0]
 800c3e8:	f7ff ff8a 	bl	800c300 <__hexdig_fun>
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	d1f8      	bne.n	800c3e2 <__gethex+0xb6>
 800c3f0:	1bad      	subs	r5, r5, r6
 800c3f2:	00ad      	lsls	r5, r5, #2
 800c3f4:	e004      	b.n	800c400 <__gethex+0xd4>
 800c3f6:	2400      	movs	r4, #0
 800c3f8:	4625      	mov	r5, r4
 800c3fa:	e7e0      	b.n	800c3be <__gethex+0x92>
 800c3fc:	2d00      	cmp	r5, #0
 800c3fe:	d1f7      	bne.n	800c3f0 <__gethex+0xc4>
 800c400:	7833      	ldrb	r3, [r6, #0]
 800c402:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c406:	2b50      	cmp	r3, #80	; 0x50
 800c408:	d13b      	bne.n	800c482 <__gethex+0x156>
 800c40a:	7873      	ldrb	r3, [r6, #1]
 800c40c:	2b2b      	cmp	r3, #43	; 0x2b
 800c40e:	d02c      	beq.n	800c46a <__gethex+0x13e>
 800c410:	2b2d      	cmp	r3, #45	; 0x2d
 800c412:	d02e      	beq.n	800c472 <__gethex+0x146>
 800c414:	1c71      	adds	r1, r6, #1
 800c416:	f04f 0900 	mov.w	r9, #0
 800c41a:	7808      	ldrb	r0, [r1, #0]
 800c41c:	f7ff ff70 	bl	800c300 <__hexdig_fun>
 800c420:	1e43      	subs	r3, r0, #1
 800c422:	b2db      	uxtb	r3, r3
 800c424:	2b18      	cmp	r3, #24
 800c426:	d82c      	bhi.n	800c482 <__gethex+0x156>
 800c428:	f1a0 0210 	sub.w	r2, r0, #16
 800c42c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c430:	f7ff ff66 	bl	800c300 <__hexdig_fun>
 800c434:	1e43      	subs	r3, r0, #1
 800c436:	b2db      	uxtb	r3, r3
 800c438:	2b18      	cmp	r3, #24
 800c43a:	d91d      	bls.n	800c478 <__gethex+0x14c>
 800c43c:	f1b9 0f00 	cmp.w	r9, #0
 800c440:	d000      	beq.n	800c444 <__gethex+0x118>
 800c442:	4252      	negs	r2, r2
 800c444:	4415      	add	r5, r2
 800c446:	f8cb 1000 	str.w	r1, [fp]
 800c44a:	b1e4      	cbz	r4, 800c486 <__gethex+0x15a>
 800c44c:	9b00      	ldr	r3, [sp, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	bf14      	ite	ne
 800c452:	2700      	movne	r7, #0
 800c454:	2706      	moveq	r7, #6
 800c456:	4638      	mov	r0, r7
 800c458:	b009      	add	sp, #36	; 0x24
 800c45a:	ecbd 8b02 	vpop	{d8}
 800c45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c462:	463e      	mov	r6, r7
 800c464:	4625      	mov	r5, r4
 800c466:	2401      	movs	r4, #1
 800c468:	e7ca      	b.n	800c400 <__gethex+0xd4>
 800c46a:	f04f 0900 	mov.w	r9, #0
 800c46e:	1cb1      	adds	r1, r6, #2
 800c470:	e7d3      	b.n	800c41a <__gethex+0xee>
 800c472:	f04f 0901 	mov.w	r9, #1
 800c476:	e7fa      	b.n	800c46e <__gethex+0x142>
 800c478:	230a      	movs	r3, #10
 800c47a:	fb03 0202 	mla	r2, r3, r2, r0
 800c47e:	3a10      	subs	r2, #16
 800c480:	e7d4      	b.n	800c42c <__gethex+0x100>
 800c482:	4631      	mov	r1, r6
 800c484:	e7df      	b.n	800c446 <__gethex+0x11a>
 800c486:	1bf3      	subs	r3, r6, r7
 800c488:	3b01      	subs	r3, #1
 800c48a:	4621      	mov	r1, r4
 800c48c:	2b07      	cmp	r3, #7
 800c48e:	dc0b      	bgt.n	800c4a8 <__gethex+0x17c>
 800c490:	ee18 0a10 	vmov	r0, s16
 800c494:	f000 faf4 	bl	800ca80 <_Balloc>
 800c498:	4604      	mov	r4, r0
 800c49a:	b940      	cbnz	r0, 800c4ae <__gethex+0x182>
 800c49c:	4b5d      	ldr	r3, [pc, #372]	; (800c614 <__gethex+0x2e8>)
 800c49e:	4602      	mov	r2, r0
 800c4a0:	21de      	movs	r1, #222	; 0xde
 800c4a2:	485d      	ldr	r0, [pc, #372]	; (800c618 <__gethex+0x2ec>)
 800c4a4:	f7fe ff5e 	bl	800b364 <__assert_func>
 800c4a8:	3101      	adds	r1, #1
 800c4aa:	105b      	asrs	r3, r3, #1
 800c4ac:	e7ee      	b.n	800c48c <__gethex+0x160>
 800c4ae:	f100 0914 	add.w	r9, r0, #20
 800c4b2:	f04f 0b00 	mov.w	fp, #0
 800c4b6:	f1ca 0301 	rsb	r3, sl, #1
 800c4ba:	f8cd 9008 	str.w	r9, [sp, #8]
 800c4be:	f8cd b000 	str.w	fp, [sp]
 800c4c2:	9306      	str	r3, [sp, #24]
 800c4c4:	42b7      	cmp	r7, r6
 800c4c6:	d340      	bcc.n	800c54a <__gethex+0x21e>
 800c4c8:	9802      	ldr	r0, [sp, #8]
 800c4ca:	9b00      	ldr	r3, [sp, #0]
 800c4cc:	f840 3b04 	str.w	r3, [r0], #4
 800c4d0:	eba0 0009 	sub.w	r0, r0, r9
 800c4d4:	1080      	asrs	r0, r0, #2
 800c4d6:	0146      	lsls	r6, r0, #5
 800c4d8:	6120      	str	r0, [r4, #16]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f000 fbc2 	bl	800cc64 <__hi0bits>
 800c4e0:	1a30      	subs	r0, r6, r0
 800c4e2:	f8d8 6000 	ldr.w	r6, [r8]
 800c4e6:	42b0      	cmp	r0, r6
 800c4e8:	dd63      	ble.n	800c5b2 <__gethex+0x286>
 800c4ea:	1b87      	subs	r7, r0, r6
 800c4ec:	4639      	mov	r1, r7
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f000 ff66 	bl	800d3c0 <__any_on>
 800c4f4:	4682      	mov	sl, r0
 800c4f6:	b1a8      	cbz	r0, 800c524 <__gethex+0x1f8>
 800c4f8:	1e7b      	subs	r3, r7, #1
 800c4fa:	1159      	asrs	r1, r3, #5
 800c4fc:	f003 021f 	and.w	r2, r3, #31
 800c500:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c504:	f04f 0a01 	mov.w	sl, #1
 800c508:	fa0a f202 	lsl.w	r2, sl, r2
 800c50c:	420a      	tst	r2, r1
 800c50e:	d009      	beq.n	800c524 <__gethex+0x1f8>
 800c510:	4553      	cmp	r3, sl
 800c512:	dd05      	ble.n	800c520 <__gethex+0x1f4>
 800c514:	1eb9      	subs	r1, r7, #2
 800c516:	4620      	mov	r0, r4
 800c518:	f000 ff52 	bl	800d3c0 <__any_on>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	d145      	bne.n	800c5ac <__gethex+0x280>
 800c520:	f04f 0a02 	mov.w	sl, #2
 800c524:	4639      	mov	r1, r7
 800c526:	4620      	mov	r0, r4
 800c528:	f7ff fe98 	bl	800c25c <rshift>
 800c52c:	443d      	add	r5, r7
 800c52e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c532:	42ab      	cmp	r3, r5
 800c534:	da4c      	bge.n	800c5d0 <__gethex+0x2a4>
 800c536:	ee18 0a10 	vmov	r0, s16
 800c53a:	4621      	mov	r1, r4
 800c53c:	f000 fae0 	bl	800cb00 <_Bfree>
 800c540:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c542:	2300      	movs	r3, #0
 800c544:	6013      	str	r3, [r2, #0]
 800c546:	27a3      	movs	r7, #163	; 0xa3
 800c548:	e785      	b.n	800c456 <__gethex+0x12a>
 800c54a:	1e73      	subs	r3, r6, #1
 800c54c:	9a05      	ldr	r2, [sp, #20]
 800c54e:	9303      	str	r3, [sp, #12]
 800c550:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c554:	4293      	cmp	r3, r2
 800c556:	d019      	beq.n	800c58c <__gethex+0x260>
 800c558:	f1bb 0f20 	cmp.w	fp, #32
 800c55c:	d107      	bne.n	800c56e <__gethex+0x242>
 800c55e:	9b02      	ldr	r3, [sp, #8]
 800c560:	9a00      	ldr	r2, [sp, #0]
 800c562:	f843 2b04 	str.w	r2, [r3], #4
 800c566:	9302      	str	r3, [sp, #8]
 800c568:	2300      	movs	r3, #0
 800c56a:	9300      	str	r3, [sp, #0]
 800c56c:	469b      	mov	fp, r3
 800c56e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c572:	f7ff fec5 	bl	800c300 <__hexdig_fun>
 800c576:	9b00      	ldr	r3, [sp, #0]
 800c578:	f000 000f 	and.w	r0, r0, #15
 800c57c:	fa00 f00b 	lsl.w	r0, r0, fp
 800c580:	4303      	orrs	r3, r0
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	f10b 0b04 	add.w	fp, fp, #4
 800c588:	9b03      	ldr	r3, [sp, #12]
 800c58a:	e00d      	b.n	800c5a8 <__gethex+0x27c>
 800c58c:	9b03      	ldr	r3, [sp, #12]
 800c58e:	9a06      	ldr	r2, [sp, #24]
 800c590:	4413      	add	r3, r2
 800c592:	42bb      	cmp	r3, r7
 800c594:	d3e0      	bcc.n	800c558 <__gethex+0x22c>
 800c596:	4618      	mov	r0, r3
 800c598:	9901      	ldr	r1, [sp, #4]
 800c59a:	9307      	str	r3, [sp, #28]
 800c59c:	4652      	mov	r2, sl
 800c59e:	f001 fa63 	bl	800da68 <strncmp>
 800c5a2:	9b07      	ldr	r3, [sp, #28]
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	d1d7      	bne.n	800c558 <__gethex+0x22c>
 800c5a8:	461e      	mov	r6, r3
 800c5aa:	e78b      	b.n	800c4c4 <__gethex+0x198>
 800c5ac:	f04f 0a03 	mov.w	sl, #3
 800c5b0:	e7b8      	b.n	800c524 <__gethex+0x1f8>
 800c5b2:	da0a      	bge.n	800c5ca <__gethex+0x29e>
 800c5b4:	1a37      	subs	r7, r6, r0
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	ee18 0a10 	vmov	r0, s16
 800c5bc:	463a      	mov	r2, r7
 800c5be:	f000 fcbb 	bl	800cf38 <__lshift>
 800c5c2:	1bed      	subs	r5, r5, r7
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	f100 0914 	add.w	r9, r0, #20
 800c5ca:	f04f 0a00 	mov.w	sl, #0
 800c5ce:	e7ae      	b.n	800c52e <__gethex+0x202>
 800c5d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c5d4:	42a8      	cmp	r0, r5
 800c5d6:	dd72      	ble.n	800c6be <__gethex+0x392>
 800c5d8:	1b45      	subs	r5, r0, r5
 800c5da:	42ae      	cmp	r6, r5
 800c5dc:	dc36      	bgt.n	800c64c <__gethex+0x320>
 800c5de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d02a      	beq.n	800c63c <__gethex+0x310>
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	d02c      	beq.n	800c644 <__gethex+0x318>
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d11c      	bne.n	800c628 <__gethex+0x2fc>
 800c5ee:	42ae      	cmp	r6, r5
 800c5f0:	d11a      	bne.n	800c628 <__gethex+0x2fc>
 800c5f2:	2e01      	cmp	r6, #1
 800c5f4:	d112      	bne.n	800c61c <__gethex+0x2f0>
 800c5f6:	9a04      	ldr	r2, [sp, #16]
 800c5f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c5fc:	6013      	str	r3, [r2, #0]
 800c5fe:	2301      	movs	r3, #1
 800c600:	6123      	str	r3, [r4, #16]
 800c602:	f8c9 3000 	str.w	r3, [r9]
 800c606:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c608:	2762      	movs	r7, #98	; 0x62
 800c60a:	601c      	str	r4, [r3, #0]
 800c60c:	e723      	b.n	800c456 <__gethex+0x12a>
 800c60e:	bf00      	nop
 800c610:	0800e054 	.word	0x0800e054
 800c614:	0800dfdc 	.word	0x0800dfdc
 800c618:	0800dfed 	.word	0x0800dfed
 800c61c:	1e71      	subs	r1, r6, #1
 800c61e:	4620      	mov	r0, r4
 800c620:	f000 fece 	bl	800d3c0 <__any_on>
 800c624:	2800      	cmp	r0, #0
 800c626:	d1e6      	bne.n	800c5f6 <__gethex+0x2ca>
 800c628:	ee18 0a10 	vmov	r0, s16
 800c62c:	4621      	mov	r1, r4
 800c62e:	f000 fa67 	bl	800cb00 <_Bfree>
 800c632:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c634:	2300      	movs	r3, #0
 800c636:	6013      	str	r3, [r2, #0]
 800c638:	2750      	movs	r7, #80	; 0x50
 800c63a:	e70c      	b.n	800c456 <__gethex+0x12a>
 800c63c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1f2      	bne.n	800c628 <__gethex+0x2fc>
 800c642:	e7d8      	b.n	800c5f6 <__gethex+0x2ca>
 800c644:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1d5      	bne.n	800c5f6 <__gethex+0x2ca>
 800c64a:	e7ed      	b.n	800c628 <__gethex+0x2fc>
 800c64c:	1e6f      	subs	r7, r5, #1
 800c64e:	f1ba 0f00 	cmp.w	sl, #0
 800c652:	d131      	bne.n	800c6b8 <__gethex+0x38c>
 800c654:	b127      	cbz	r7, 800c660 <__gethex+0x334>
 800c656:	4639      	mov	r1, r7
 800c658:	4620      	mov	r0, r4
 800c65a:	f000 feb1 	bl	800d3c0 <__any_on>
 800c65e:	4682      	mov	sl, r0
 800c660:	117b      	asrs	r3, r7, #5
 800c662:	2101      	movs	r1, #1
 800c664:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c668:	f007 071f 	and.w	r7, r7, #31
 800c66c:	fa01 f707 	lsl.w	r7, r1, r7
 800c670:	421f      	tst	r7, r3
 800c672:	4629      	mov	r1, r5
 800c674:	4620      	mov	r0, r4
 800c676:	bf18      	it	ne
 800c678:	f04a 0a02 	orrne.w	sl, sl, #2
 800c67c:	1b76      	subs	r6, r6, r5
 800c67e:	f7ff fded 	bl	800c25c <rshift>
 800c682:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c686:	2702      	movs	r7, #2
 800c688:	f1ba 0f00 	cmp.w	sl, #0
 800c68c:	d048      	beq.n	800c720 <__gethex+0x3f4>
 800c68e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c692:	2b02      	cmp	r3, #2
 800c694:	d015      	beq.n	800c6c2 <__gethex+0x396>
 800c696:	2b03      	cmp	r3, #3
 800c698:	d017      	beq.n	800c6ca <__gethex+0x39e>
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d109      	bne.n	800c6b2 <__gethex+0x386>
 800c69e:	f01a 0f02 	tst.w	sl, #2
 800c6a2:	d006      	beq.n	800c6b2 <__gethex+0x386>
 800c6a4:	f8d9 0000 	ldr.w	r0, [r9]
 800c6a8:	ea4a 0a00 	orr.w	sl, sl, r0
 800c6ac:	f01a 0f01 	tst.w	sl, #1
 800c6b0:	d10e      	bne.n	800c6d0 <__gethex+0x3a4>
 800c6b2:	f047 0710 	orr.w	r7, r7, #16
 800c6b6:	e033      	b.n	800c720 <__gethex+0x3f4>
 800c6b8:	f04f 0a01 	mov.w	sl, #1
 800c6bc:	e7d0      	b.n	800c660 <__gethex+0x334>
 800c6be:	2701      	movs	r7, #1
 800c6c0:	e7e2      	b.n	800c688 <__gethex+0x35c>
 800c6c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6c4:	f1c3 0301 	rsb	r3, r3, #1
 800c6c8:	9315      	str	r3, [sp, #84]	; 0x54
 800c6ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d0f0      	beq.n	800c6b2 <__gethex+0x386>
 800c6d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c6d4:	f104 0314 	add.w	r3, r4, #20
 800c6d8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c6dc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c6e0:	f04f 0c00 	mov.w	ip, #0
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c6ee:	d01c      	beq.n	800c72a <__gethex+0x3fe>
 800c6f0:	3201      	adds	r2, #1
 800c6f2:	6002      	str	r2, [r0, #0]
 800c6f4:	2f02      	cmp	r7, #2
 800c6f6:	f104 0314 	add.w	r3, r4, #20
 800c6fa:	d13f      	bne.n	800c77c <__gethex+0x450>
 800c6fc:	f8d8 2000 	ldr.w	r2, [r8]
 800c700:	3a01      	subs	r2, #1
 800c702:	42b2      	cmp	r2, r6
 800c704:	d10a      	bne.n	800c71c <__gethex+0x3f0>
 800c706:	1171      	asrs	r1, r6, #5
 800c708:	2201      	movs	r2, #1
 800c70a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c70e:	f006 061f 	and.w	r6, r6, #31
 800c712:	fa02 f606 	lsl.w	r6, r2, r6
 800c716:	421e      	tst	r6, r3
 800c718:	bf18      	it	ne
 800c71a:	4617      	movne	r7, r2
 800c71c:	f047 0720 	orr.w	r7, r7, #32
 800c720:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c722:	601c      	str	r4, [r3, #0]
 800c724:	9b04      	ldr	r3, [sp, #16]
 800c726:	601d      	str	r5, [r3, #0]
 800c728:	e695      	b.n	800c456 <__gethex+0x12a>
 800c72a:	4299      	cmp	r1, r3
 800c72c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c730:	d8d8      	bhi.n	800c6e4 <__gethex+0x3b8>
 800c732:	68a3      	ldr	r3, [r4, #8]
 800c734:	459b      	cmp	fp, r3
 800c736:	db19      	blt.n	800c76c <__gethex+0x440>
 800c738:	6861      	ldr	r1, [r4, #4]
 800c73a:	ee18 0a10 	vmov	r0, s16
 800c73e:	3101      	adds	r1, #1
 800c740:	f000 f99e 	bl	800ca80 <_Balloc>
 800c744:	4681      	mov	r9, r0
 800c746:	b918      	cbnz	r0, 800c750 <__gethex+0x424>
 800c748:	4b1a      	ldr	r3, [pc, #104]	; (800c7b4 <__gethex+0x488>)
 800c74a:	4602      	mov	r2, r0
 800c74c:	2184      	movs	r1, #132	; 0x84
 800c74e:	e6a8      	b.n	800c4a2 <__gethex+0x176>
 800c750:	6922      	ldr	r2, [r4, #16]
 800c752:	3202      	adds	r2, #2
 800c754:	f104 010c 	add.w	r1, r4, #12
 800c758:	0092      	lsls	r2, r2, #2
 800c75a:	300c      	adds	r0, #12
 800c75c:	f7fc fe79 	bl	8009452 <memcpy>
 800c760:	4621      	mov	r1, r4
 800c762:	ee18 0a10 	vmov	r0, s16
 800c766:	f000 f9cb 	bl	800cb00 <_Bfree>
 800c76a:	464c      	mov	r4, r9
 800c76c:	6923      	ldr	r3, [r4, #16]
 800c76e:	1c5a      	adds	r2, r3, #1
 800c770:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c774:	6122      	str	r2, [r4, #16]
 800c776:	2201      	movs	r2, #1
 800c778:	615a      	str	r2, [r3, #20]
 800c77a:	e7bb      	b.n	800c6f4 <__gethex+0x3c8>
 800c77c:	6922      	ldr	r2, [r4, #16]
 800c77e:	455a      	cmp	r2, fp
 800c780:	dd0b      	ble.n	800c79a <__gethex+0x46e>
 800c782:	2101      	movs	r1, #1
 800c784:	4620      	mov	r0, r4
 800c786:	f7ff fd69 	bl	800c25c <rshift>
 800c78a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c78e:	3501      	adds	r5, #1
 800c790:	42ab      	cmp	r3, r5
 800c792:	f6ff aed0 	blt.w	800c536 <__gethex+0x20a>
 800c796:	2701      	movs	r7, #1
 800c798:	e7c0      	b.n	800c71c <__gethex+0x3f0>
 800c79a:	f016 061f 	ands.w	r6, r6, #31
 800c79e:	d0fa      	beq.n	800c796 <__gethex+0x46a>
 800c7a0:	4453      	add	r3, sl
 800c7a2:	f1c6 0620 	rsb	r6, r6, #32
 800c7a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c7aa:	f000 fa5b 	bl	800cc64 <__hi0bits>
 800c7ae:	42b0      	cmp	r0, r6
 800c7b0:	dbe7      	blt.n	800c782 <__gethex+0x456>
 800c7b2:	e7f0      	b.n	800c796 <__gethex+0x46a>
 800c7b4:	0800dfdc 	.word	0x0800dfdc

0800c7b8 <L_shift>:
 800c7b8:	f1c2 0208 	rsb	r2, r2, #8
 800c7bc:	0092      	lsls	r2, r2, #2
 800c7be:	b570      	push	{r4, r5, r6, lr}
 800c7c0:	f1c2 0620 	rsb	r6, r2, #32
 800c7c4:	6843      	ldr	r3, [r0, #4]
 800c7c6:	6804      	ldr	r4, [r0, #0]
 800c7c8:	fa03 f506 	lsl.w	r5, r3, r6
 800c7cc:	432c      	orrs	r4, r5
 800c7ce:	40d3      	lsrs	r3, r2
 800c7d0:	6004      	str	r4, [r0, #0]
 800c7d2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c7d6:	4288      	cmp	r0, r1
 800c7d8:	d3f4      	bcc.n	800c7c4 <L_shift+0xc>
 800c7da:	bd70      	pop	{r4, r5, r6, pc}

0800c7dc <__match>:
 800c7dc:	b530      	push	{r4, r5, lr}
 800c7de:	6803      	ldr	r3, [r0, #0]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7e6:	b914      	cbnz	r4, 800c7ee <__match+0x12>
 800c7e8:	6003      	str	r3, [r0, #0]
 800c7ea:	2001      	movs	r0, #1
 800c7ec:	bd30      	pop	{r4, r5, pc}
 800c7ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c7f6:	2d19      	cmp	r5, #25
 800c7f8:	bf98      	it	ls
 800c7fa:	3220      	addls	r2, #32
 800c7fc:	42a2      	cmp	r2, r4
 800c7fe:	d0f0      	beq.n	800c7e2 <__match+0x6>
 800c800:	2000      	movs	r0, #0
 800c802:	e7f3      	b.n	800c7ec <__match+0x10>

0800c804 <__hexnan>:
 800c804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c808:	680b      	ldr	r3, [r1, #0]
 800c80a:	115e      	asrs	r6, r3, #5
 800c80c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c810:	f013 031f 	ands.w	r3, r3, #31
 800c814:	b087      	sub	sp, #28
 800c816:	bf18      	it	ne
 800c818:	3604      	addne	r6, #4
 800c81a:	2500      	movs	r5, #0
 800c81c:	1f37      	subs	r7, r6, #4
 800c81e:	4690      	mov	r8, r2
 800c820:	6802      	ldr	r2, [r0, #0]
 800c822:	9301      	str	r3, [sp, #4]
 800c824:	4682      	mov	sl, r0
 800c826:	f846 5c04 	str.w	r5, [r6, #-4]
 800c82a:	46b9      	mov	r9, r7
 800c82c:	463c      	mov	r4, r7
 800c82e:	9502      	str	r5, [sp, #8]
 800c830:	46ab      	mov	fp, r5
 800c832:	7851      	ldrb	r1, [r2, #1]
 800c834:	1c53      	adds	r3, r2, #1
 800c836:	9303      	str	r3, [sp, #12]
 800c838:	b341      	cbz	r1, 800c88c <__hexnan+0x88>
 800c83a:	4608      	mov	r0, r1
 800c83c:	9205      	str	r2, [sp, #20]
 800c83e:	9104      	str	r1, [sp, #16]
 800c840:	f7ff fd5e 	bl	800c300 <__hexdig_fun>
 800c844:	2800      	cmp	r0, #0
 800c846:	d14f      	bne.n	800c8e8 <__hexnan+0xe4>
 800c848:	9904      	ldr	r1, [sp, #16]
 800c84a:	9a05      	ldr	r2, [sp, #20]
 800c84c:	2920      	cmp	r1, #32
 800c84e:	d818      	bhi.n	800c882 <__hexnan+0x7e>
 800c850:	9b02      	ldr	r3, [sp, #8]
 800c852:	459b      	cmp	fp, r3
 800c854:	dd13      	ble.n	800c87e <__hexnan+0x7a>
 800c856:	454c      	cmp	r4, r9
 800c858:	d206      	bcs.n	800c868 <__hexnan+0x64>
 800c85a:	2d07      	cmp	r5, #7
 800c85c:	dc04      	bgt.n	800c868 <__hexnan+0x64>
 800c85e:	462a      	mov	r2, r5
 800c860:	4649      	mov	r1, r9
 800c862:	4620      	mov	r0, r4
 800c864:	f7ff ffa8 	bl	800c7b8 <L_shift>
 800c868:	4544      	cmp	r4, r8
 800c86a:	d950      	bls.n	800c90e <__hexnan+0x10a>
 800c86c:	2300      	movs	r3, #0
 800c86e:	f1a4 0904 	sub.w	r9, r4, #4
 800c872:	f844 3c04 	str.w	r3, [r4, #-4]
 800c876:	f8cd b008 	str.w	fp, [sp, #8]
 800c87a:	464c      	mov	r4, r9
 800c87c:	461d      	mov	r5, r3
 800c87e:	9a03      	ldr	r2, [sp, #12]
 800c880:	e7d7      	b.n	800c832 <__hexnan+0x2e>
 800c882:	2929      	cmp	r1, #41	; 0x29
 800c884:	d156      	bne.n	800c934 <__hexnan+0x130>
 800c886:	3202      	adds	r2, #2
 800c888:	f8ca 2000 	str.w	r2, [sl]
 800c88c:	f1bb 0f00 	cmp.w	fp, #0
 800c890:	d050      	beq.n	800c934 <__hexnan+0x130>
 800c892:	454c      	cmp	r4, r9
 800c894:	d206      	bcs.n	800c8a4 <__hexnan+0xa0>
 800c896:	2d07      	cmp	r5, #7
 800c898:	dc04      	bgt.n	800c8a4 <__hexnan+0xa0>
 800c89a:	462a      	mov	r2, r5
 800c89c:	4649      	mov	r1, r9
 800c89e:	4620      	mov	r0, r4
 800c8a0:	f7ff ff8a 	bl	800c7b8 <L_shift>
 800c8a4:	4544      	cmp	r4, r8
 800c8a6:	d934      	bls.n	800c912 <__hexnan+0x10e>
 800c8a8:	f1a8 0204 	sub.w	r2, r8, #4
 800c8ac:	4623      	mov	r3, r4
 800c8ae:	f853 1b04 	ldr.w	r1, [r3], #4
 800c8b2:	f842 1f04 	str.w	r1, [r2, #4]!
 800c8b6:	429f      	cmp	r7, r3
 800c8b8:	d2f9      	bcs.n	800c8ae <__hexnan+0xaa>
 800c8ba:	1b3b      	subs	r3, r7, r4
 800c8bc:	f023 0303 	bic.w	r3, r3, #3
 800c8c0:	3304      	adds	r3, #4
 800c8c2:	3401      	adds	r4, #1
 800c8c4:	3e03      	subs	r6, #3
 800c8c6:	42b4      	cmp	r4, r6
 800c8c8:	bf88      	it	hi
 800c8ca:	2304      	movhi	r3, #4
 800c8cc:	4443      	add	r3, r8
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	f843 2b04 	str.w	r2, [r3], #4
 800c8d4:	429f      	cmp	r7, r3
 800c8d6:	d2fb      	bcs.n	800c8d0 <__hexnan+0xcc>
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	b91b      	cbnz	r3, 800c8e4 <__hexnan+0xe0>
 800c8dc:	4547      	cmp	r7, r8
 800c8de:	d127      	bne.n	800c930 <__hexnan+0x12c>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	603b      	str	r3, [r7, #0]
 800c8e4:	2005      	movs	r0, #5
 800c8e6:	e026      	b.n	800c936 <__hexnan+0x132>
 800c8e8:	3501      	adds	r5, #1
 800c8ea:	2d08      	cmp	r5, #8
 800c8ec:	f10b 0b01 	add.w	fp, fp, #1
 800c8f0:	dd06      	ble.n	800c900 <__hexnan+0xfc>
 800c8f2:	4544      	cmp	r4, r8
 800c8f4:	d9c3      	bls.n	800c87e <__hexnan+0x7a>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8fc:	2501      	movs	r5, #1
 800c8fe:	3c04      	subs	r4, #4
 800c900:	6822      	ldr	r2, [r4, #0]
 800c902:	f000 000f 	and.w	r0, r0, #15
 800c906:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c90a:	6022      	str	r2, [r4, #0]
 800c90c:	e7b7      	b.n	800c87e <__hexnan+0x7a>
 800c90e:	2508      	movs	r5, #8
 800c910:	e7b5      	b.n	800c87e <__hexnan+0x7a>
 800c912:	9b01      	ldr	r3, [sp, #4]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d0df      	beq.n	800c8d8 <__hexnan+0xd4>
 800c918:	f04f 32ff 	mov.w	r2, #4294967295
 800c91c:	f1c3 0320 	rsb	r3, r3, #32
 800c920:	fa22 f303 	lsr.w	r3, r2, r3
 800c924:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c928:	401a      	ands	r2, r3
 800c92a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c92e:	e7d3      	b.n	800c8d8 <__hexnan+0xd4>
 800c930:	3f04      	subs	r7, #4
 800c932:	e7d1      	b.n	800c8d8 <__hexnan+0xd4>
 800c934:	2004      	movs	r0, #4
 800c936:	b007      	add	sp, #28
 800c938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c93c <_localeconv_r>:
 800c93c:	4800      	ldr	r0, [pc, #0]	; (800c940 <_localeconv_r+0x4>)
 800c93e:	4770      	bx	lr
 800c940:	2000019c 	.word	0x2000019c

0800c944 <_lseek_r>:
 800c944:	b538      	push	{r3, r4, r5, lr}
 800c946:	4d07      	ldr	r5, [pc, #28]	; (800c964 <_lseek_r+0x20>)
 800c948:	4604      	mov	r4, r0
 800c94a:	4608      	mov	r0, r1
 800c94c:	4611      	mov	r1, r2
 800c94e:	2200      	movs	r2, #0
 800c950:	602a      	str	r2, [r5, #0]
 800c952:	461a      	mov	r2, r3
 800c954:	f7f4 fe42 	bl	80015dc <_lseek>
 800c958:	1c43      	adds	r3, r0, #1
 800c95a:	d102      	bne.n	800c962 <_lseek_r+0x1e>
 800c95c:	682b      	ldr	r3, [r5, #0]
 800c95e:	b103      	cbz	r3, 800c962 <_lseek_r+0x1e>
 800c960:	6023      	str	r3, [r4, #0]
 800c962:	bd38      	pop	{r3, r4, r5, pc}
 800c964:	20005cfc 	.word	0x20005cfc

0800c968 <__swhatbuf_r>:
 800c968:	b570      	push	{r4, r5, r6, lr}
 800c96a:	460e      	mov	r6, r1
 800c96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c970:	2900      	cmp	r1, #0
 800c972:	b096      	sub	sp, #88	; 0x58
 800c974:	4614      	mov	r4, r2
 800c976:	461d      	mov	r5, r3
 800c978:	da08      	bge.n	800c98c <__swhatbuf_r+0x24>
 800c97a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c97e:	2200      	movs	r2, #0
 800c980:	602a      	str	r2, [r5, #0]
 800c982:	061a      	lsls	r2, r3, #24
 800c984:	d410      	bmi.n	800c9a8 <__swhatbuf_r+0x40>
 800c986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c98a:	e00e      	b.n	800c9aa <__swhatbuf_r+0x42>
 800c98c:	466a      	mov	r2, sp
 800c98e:	f001 f893 	bl	800dab8 <_fstat_r>
 800c992:	2800      	cmp	r0, #0
 800c994:	dbf1      	blt.n	800c97a <__swhatbuf_r+0x12>
 800c996:	9a01      	ldr	r2, [sp, #4]
 800c998:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c99c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c9a0:	425a      	negs	r2, r3
 800c9a2:	415a      	adcs	r2, r3
 800c9a4:	602a      	str	r2, [r5, #0]
 800c9a6:	e7ee      	b.n	800c986 <__swhatbuf_r+0x1e>
 800c9a8:	2340      	movs	r3, #64	; 0x40
 800c9aa:	2000      	movs	r0, #0
 800c9ac:	6023      	str	r3, [r4, #0]
 800c9ae:	b016      	add	sp, #88	; 0x58
 800c9b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c9b4 <__smakebuf_r>:
 800c9b4:	898b      	ldrh	r3, [r1, #12]
 800c9b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9b8:	079d      	lsls	r5, r3, #30
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	460c      	mov	r4, r1
 800c9be:	d507      	bpl.n	800c9d0 <__smakebuf_r+0x1c>
 800c9c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9c4:	6023      	str	r3, [r4, #0]
 800c9c6:	6123      	str	r3, [r4, #16]
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	6163      	str	r3, [r4, #20]
 800c9cc:	b002      	add	sp, #8
 800c9ce:	bd70      	pop	{r4, r5, r6, pc}
 800c9d0:	ab01      	add	r3, sp, #4
 800c9d2:	466a      	mov	r2, sp
 800c9d4:	f7ff ffc8 	bl	800c968 <__swhatbuf_r>
 800c9d8:	9900      	ldr	r1, [sp, #0]
 800c9da:	4605      	mov	r5, r0
 800c9dc:	4630      	mov	r0, r6
 800c9de:	f7fc fd6f 	bl	80094c0 <_malloc_r>
 800c9e2:	b948      	cbnz	r0, 800c9f8 <__smakebuf_r+0x44>
 800c9e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9e8:	059a      	lsls	r2, r3, #22
 800c9ea:	d4ef      	bmi.n	800c9cc <__smakebuf_r+0x18>
 800c9ec:	f023 0303 	bic.w	r3, r3, #3
 800c9f0:	f043 0302 	orr.w	r3, r3, #2
 800c9f4:	81a3      	strh	r3, [r4, #12]
 800c9f6:	e7e3      	b.n	800c9c0 <__smakebuf_r+0xc>
 800c9f8:	4b0d      	ldr	r3, [pc, #52]	; (800ca30 <__smakebuf_r+0x7c>)
 800c9fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9fc:	89a3      	ldrh	r3, [r4, #12]
 800c9fe:	6020      	str	r0, [r4, #0]
 800ca00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca04:	81a3      	strh	r3, [r4, #12]
 800ca06:	9b00      	ldr	r3, [sp, #0]
 800ca08:	6163      	str	r3, [r4, #20]
 800ca0a:	9b01      	ldr	r3, [sp, #4]
 800ca0c:	6120      	str	r0, [r4, #16]
 800ca0e:	b15b      	cbz	r3, 800ca28 <__smakebuf_r+0x74>
 800ca10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca14:	4630      	mov	r0, r6
 800ca16:	f001 f861 	bl	800dadc <_isatty_r>
 800ca1a:	b128      	cbz	r0, 800ca28 <__smakebuf_r+0x74>
 800ca1c:	89a3      	ldrh	r3, [r4, #12]
 800ca1e:	f023 0303 	bic.w	r3, r3, #3
 800ca22:	f043 0301 	orr.w	r3, r3, #1
 800ca26:	81a3      	strh	r3, [r4, #12]
 800ca28:	89a0      	ldrh	r0, [r4, #12]
 800ca2a:	4305      	orrs	r5, r0
 800ca2c:	81a5      	strh	r5, [r4, #12]
 800ca2e:	e7cd      	b.n	800c9cc <__smakebuf_r+0x18>
 800ca30:	08009261 	.word	0x08009261

0800ca34 <malloc>:
 800ca34:	4b02      	ldr	r3, [pc, #8]	; (800ca40 <malloc+0xc>)
 800ca36:	4601      	mov	r1, r0
 800ca38:	6818      	ldr	r0, [r3, #0]
 800ca3a:	f7fc bd41 	b.w	80094c0 <_malloc_r>
 800ca3e:	bf00      	nop
 800ca40:	20000044 	.word	0x20000044

0800ca44 <__ascii_mbtowc>:
 800ca44:	b082      	sub	sp, #8
 800ca46:	b901      	cbnz	r1, 800ca4a <__ascii_mbtowc+0x6>
 800ca48:	a901      	add	r1, sp, #4
 800ca4a:	b142      	cbz	r2, 800ca5e <__ascii_mbtowc+0x1a>
 800ca4c:	b14b      	cbz	r3, 800ca62 <__ascii_mbtowc+0x1e>
 800ca4e:	7813      	ldrb	r3, [r2, #0]
 800ca50:	600b      	str	r3, [r1, #0]
 800ca52:	7812      	ldrb	r2, [r2, #0]
 800ca54:	1e10      	subs	r0, r2, #0
 800ca56:	bf18      	it	ne
 800ca58:	2001      	movne	r0, #1
 800ca5a:	b002      	add	sp, #8
 800ca5c:	4770      	bx	lr
 800ca5e:	4610      	mov	r0, r2
 800ca60:	e7fb      	b.n	800ca5a <__ascii_mbtowc+0x16>
 800ca62:	f06f 0001 	mvn.w	r0, #1
 800ca66:	e7f8      	b.n	800ca5a <__ascii_mbtowc+0x16>

0800ca68 <__malloc_lock>:
 800ca68:	4801      	ldr	r0, [pc, #4]	; (800ca70 <__malloc_lock+0x8>)
 800ca6a:	f7fc bcf0 	b.w	800944e <__retarget_lock_acquire_recursive>
 800ca6e:	bf00      	nop
 800ca70:	20005cf0 	.word	0x20005cf0

0800ca74 <__malloc_unlock>:
 800ca74:	4801      	ldr	r0, [pc, #4]	; (800ca7c <__malloc_unlock+0x8>)
 800ca76:	f7fc bceb 	b.w	8009450 <__retarget_lock_release_recursive>
 800ca7a:	bf00      	nop
 800ca7c:	20005cf0 	.word	0x20005cf0

0800ca80 <_Balloc>:
 800ca80:	b570      	push	{r4, r5, r6, lr}
 800ca82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca84:	4604      	mov	r4, r0
 800ca86:	460d      	mov	r5, r1
 800ca88:	b976      	cbnz	r6, 800caa8 <_Balloc+0x28>
 800ca8a:	2010      	movs	r0, #16
 800ca8c:	f7ff ffd2 	bl	800ca34 <malloc>
 800ca90:	4602      	mov	r2, r0
 800ca92:	6260      	str	r0, [r4, #36]	; 0x24
 800ca94:	b920      	cbnz	r0, 800caa0 <_Balloc+0x20>
 800ca96:	4b18      	ldr	r3, [pc, #96]	; (800caf8 <_Balloc+0x78>)
 800ca98:	4818      	ldr	r0, [pc, #96]	; (800cafc <_Balloc+0x7c>)
 800ca9a:	2166      	movs	r1, #102	; 0x66
 800ca9c:	f7fe fc62 	bl	800b364 <__assert_func>
 800caa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800caa4:	6006      	str	r6, [r0, #0]
 800caa6:	60c6      	str	r6, [r0, #12]
 800caa8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800caaa:	68f3      	ldr	r3, [r6, #12]
 800caac:	b183      	cbz	r3, 800cad0 <_Balloc+0x50>
 800caae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cab6:	b9b8      	cbnz	r0, 800cae8 <_Balloc+0x68>
 800cab8:	2101      	movs	r1, #1
 800caba:	fa01 f605 	lsl.w	r6, r1, r5
 800cabe:	1d72      	adds	r2, r6, #5
 800cac0:	0092      	lsls	r2, r2, #2
 800cac2:	4620      	mov	r0, r4
 800cac4:	f000 fc9d 	bl	800d402 <_calloc_r>
 800cac8:	b160      	cbz	r0, 800cae4 <_Balloc+0x64>
 800caca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cace:	e00e      	b.n	800caee <_Balloc+0x6e>
 800cad0:	2221      	movs	r2, #33	; 0x21
 800cad2:	2104      	movs	r1, #4
 800cad4:	4620      	mov	r0, r4
 800cad6:	f000 fc94 	bl	800d402 <_calloc_r>
 800cada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cadc:	60f0      	str	r0, [r6, #12]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d1e4      	bne.n	800caae <_Balloc+0x2e>
 800cae4:	2000      	movs	r0, #0
 800cae6:	bd70      	pop	{r4, r5, r6, pc}
 800cae8:	6802      	ldr	r2, [r0, #0]
 800caea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800caee:	2300      	movs	r3, #0
 800caf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800caf4:	e7f7      	b.n	800cae6 <_Balloc+0x66>
 800caf6:	bf00      	nop
 800caf8:	0800df6a 	.word	0x0800df6a
 800cafc:	0800e068 	.word	0x0800e068

0800cb00 <_Bfree>:
 800cb00:	b570      	push	{r4, r5, r6, lr}
 800cb02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb04:	4605      	mov	r5, r0
 800cb06:	460c      	mov	r4, r1
 800cb08:	b976      	cbnz	r6, 800cb28 <_Bfree+0x28>
 800cb0a:	2010      	movs	r0, #16
 800cb0c:	f7ff ff92 	bl	800ca34 <malloc>
 800cb10:	4602      	mov	r2, r0
 800cb12:	6268      	str	r0, [r5, #36]	; 0x24
 800cb14:	b920      	cbnz	r0, 800cb20 <_Bfree+0x20>
 800cb16:	4b09      	ldr	r3, [pc, #36]	; (800cb3c <_Bfree+0x3c>)
 800cb18:	4809      	ldr	r0, [pc, #36]	; (800cb40 <_Bfree+0x40>)
 800cb1a:	218a      	movs	r1, #138	; 0x8a
 800cb1c:	f7fe fc22 	bl	800b364 <__assert_func>
 800cb20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb24:	6006      	str	r6, [r0, #0]
 800cb26:	60c6      	str	r6, [r0, #12]
 800cb28:	b13c      	cbz	r4, 800cb3a <_Bfree+0x3a>
 800cb2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb2c:	6862      	ldr	r2, [r4, #4]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb34:	6021      	str	r1, [r4, #0]
 800cb36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb3a:	bd70      	pop	{r4, r5, r6, pc}
 800cb3c:	0800df6a 	.word	0x0800df6a
 800cb40:	0800e068 	.word	0x0800e068

0800cb44 <__multadd>:
 800cb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb48:	690d      	ldr	r5, [r1, #16]
 800cb4a:	4607      	mov	r7, r0
 800cb4c:	460c      	mov	r4, r1
 800cb4e:	461e      	mov	r6, r3
 800cb50:	f101 0c14 	add.w	ip, r1, #20
 800cb54:	2000      	movs	r0, #0
 800cb56:	f8dc 3000 	ldr.w	r3, [ip]
 800cb5a:	b299      	uxth	r1, r3
 800cb5c:	fb02 6101 	mla	r1, r2, r1, r6
 800cb60:	0c1e      	lsrs	r6, r3, #16
 800cb62:	0c0b      	lsrs	r3, r1, #16
 800cb64:	fb02 3306 	mla	r3, r2, r6, r3
 800cb68:	b289      	uxth	r1, r1
 800cb6a:	3001      	adds	r0, #1
 800cb6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb70:	4285      	cmp	r5, r0
 800cb72:	f84c 1b04 	str.w	r1, [ip], #4
 800cb76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb7a:	dcec      	bgt.n	800cb56 <__multadd+0x12>
 800cb7c:	b30e      	cbz	r6, 800cbc2 <__multadd+0x7e>
 800cb7e:	68a3      	ldr	r3, [r4, #8]
 800cb80:	42ab      	cmp	r3, r5
 800cb82:	dc19      	bgt.n	800cbb8 <__multadd+0x74>
 800cb84:	6861      	ldr	r1, [r4, #4]
 800cb86:	4638      	mov	r0, r7
 800cb88:	3101      	adds	r1, #1
 800cb8a:	f7ff ff79 	bl	800ca80 <_Balloc>
 800cb8e:	4680      	mov	r8, r0
 800cb90:	b928      	cbnz	r0, 800cb9e <__multadd+0x5a>
 800cb92:	4602      	mov	r2, r0
 800cb94:	4b0c      	ldr	r3, [pc, #48]	; (800cbc8 <__multadd+0x84>)
 800cb96:	480d      	ldr	r0, [pc, #52]	; (800cbcc <__multadd+0x88>)
 800cb98:	21b5      	movs	r1, #181	; 0xb5
 800cb9a:	f7fe fbe3 	bl	800b364 <__assert_func>
 800cb9e:	6922      	ldr	r2, [r4, #16]
 800cba0:	3202      	adds	r2, #2
 800cba2:	f104 010c 	add.w	r1, r4, #12
 800cba6:	0092      	lsls	r2, r2, #2
 800cba8:	300c      	adds	r0, #12
 800cbaa:	f7fc fc52 	bl	8009452 <memcpy>
 800cbae:	4621      	mov	r1, r4
 800cbb0:	4638      	mov	r0, r7
 800cbb2:	f7ff ffa5 	bl	800cb00 <_Bfree>
 800cbb6:	4644      	mov	r4, r8
 800cbb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbbc:	3501      	adds	r5, #1
 800cbbe:	615e      	str	r6, [r3, #20]
 800cbc0:	6125      	str	r5, [r4, #16]
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc8:	0800dfdc 	.word	0x0800dfdc
 800cbcc:	0800e068 	.word	0x0800e068

0800cbd0 <__s2b>:
 800cbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbd4:	460c      	mov	r4, r1
 800cbd6:	4615      	mov	r5, r2
 800cbd8:	461f      	mov	r7, r3
 800cbda:	2209      	movs	r2, #9
 800cbdc:	3308      	adds	r3, #8
 800cbde:	4606      	mov	r6, r0
 800cbe0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	db09      	blt.n	800cc00 <__s2b+0x30>
 800cbec:	4630      	mov	r0, r6
 800cbee:	f7ff ff47 	bl	800ca80 <_Balloc>
 800cbf2:	b940      	cbnz	r0, 800cc06 <__s2b+0x36>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	4b19      	ldr	r3, [pc, #100]	; (800cc5c <__s2b+0x8c>)
 800cbf8:	4819      	ldr	r0, [pc, #100]	; (800cc60 <__s2b+0x90>)
 800cbfa:	21ce      	movs	r1, #206	; 0xce
 800cbfc:	f7fe fbb2 	bl	800b364 <__assert_func>
 800cc00:	0052      	lsls	r2, r2, #1
 800cc02:	3101      	adds	r1, #1
 800cc04:	e7f0      	b.n	800cbe8 <__s2b+0x18>
 800cc06:	9b08      	ldr	r3, [sp, #32]
 800cc08:	6143      	str	r3, [r0, #20]
 800cc0a:	2d09      	cmp	r5, #9
 800cc0c:	f04f 0301 	mov.w	r3, #1
 800cc10:	6103      	str	r3, [r0, #16]
 800cc12:	dd16      	ble.n	800cc42 <__s2b+0x72>
 800cc14:	f104 0909 	add.w	r9, r4, #9
 800cc18:	46c8      	mov	r8, r9
 800cc1a:	442c      	add	r4, r5
 800cc1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc20:	4601      	mov	r1, r0
 800cc22:	3b30      	subs	r3, #48	; 0x30
 800cc24:	220a      	movs	r2, #10
 800cc26:	4630      	mov	r0, r6
 800cc28:	f7ff ff8c 	bl	800cb44 <__multadd>
 800cc2c:	45a0      	cmp	r8, r4
 800cc2e:	d1f5      	bne.n	800cc1c <__s2b+0x4c>
 800cc30:	f1a5 0408 	sub.w	r4, r5, #8
 800cc34:	444c      	add	r4, r9
 800cc36:	1b2d      	subs	r5, r5, r4
 800cc38:	1963      	adds	r3, r4, r5
 800cc3a:	42bb      	cmp	r3, r7
 800cc3c:	db04      	blt.n	800cc48 <__s2b+0x78>
 800cc3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc42:	340a      	adds	r4, #10
 800cc44:	2509      	movs	r5, #9
 800cc46:	e7f6      	b.n	800cc36 <__s2b+0x66>
 800cc48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc4c:	4601      	mov	r1, r0
 800cc4e:	3b30      	subs	r3, #48	; 0x30
 800cc50:	220a      	movs	r2, #10
 800cc52:	4630      	mov	r0, r6
 800cc54:	f7ff ff76 	bl	800cb44 <__multadd>
 800cc58:	e7ee      	b.n	800cc38 <__s2b+0x68>
 800cc5a:	bf00      	nop
 800cc5c:	0800dfdc 	.word	0x0800dfdc
 800cc60:	0800e068 	.word	0x0800e068

0800cc64 <__hi0bits>:
 800cc64:	0c03      	lsrs	r3, r0, #16
 800cc66:	041b      	lsls	r3, r3, #16
 800cc68:	b9d3      	cbnz	r3, 800cca0 <__hi0bits+0x3c>
 800cc6a:	0400      	lsls	r0, r0, #16
 800cc6c:	2310      	movs	r3, #16
 800cc6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc72:	bf04      	itt	eq
 800cc74:	0200      	lsleq	r0, r0, #8
 800cc76:	3308      	addeq	r3, #8
 800cc78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc7c:	bf04      	itt	eq
 800cc7e:	0100      	lsleq	r0, r0, #4
 800cc80:	3304      	addeq	r3, #4
 800cc82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc86:	bf04      	itt	eq
 800cc88:	0080      	lsleq	r0, r0, #2
 800cc8a:	3302      	addeq	r3, #2
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	db05      	blt.n	800cc9c <__hi0bits+0x38>
 800cc90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc94:	f103 0301 	add.w	r3, r3, #1
 800cc98:	bf08      	it	eq
 800cc9a:	2320      	moveq	r3, #32
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	4770      	bx	lr
 800cca0:	2300      	movs	r3, #0
 800cca2:	e7e4      	b.n	800cc6e <__hi0bits+0xa>

0800cca4 <__lo0bits>:
 800cca4:	6803      	ldr	r3, [r0, #0]
 800cca6:	f013 0207 	ands.w	r2, r3, #7
 800ccaa:	4601      	mov	r1, r0
 800ccac:	d00b      	beq.n	800ccc6 <__lo0bits+0x22>
 800ccae:	07da      	lsls	r2, r3, #31
 800ccb0:	d423      	bmi.n	800ccfa <__lo0bits+0x56>
 800ccb2:	0798      	lsls	r0, r3, #30
 800ccb4:	bf49      	itett	mi
 800ccb6:	085b      	lsrmi	r3, r3, #1
 800ccb8:	089b      	lsrpl	r3, r3, #2
 800ccba:	2001      	movmi	r0, #1
 800ccbc:	600b      	strmi	r3, [r1, #0]
 800ccbe:	bf5c      	itt	pl
 800ccc0:	600b      	strpl	r3, [r1, #0]
 800ccc2:	2002      	movpl	r0, #2
 800ccc4:	4770      	bx	lr
 800ccc6:	b298      	uxth	r0, r3
 800ccc8:	b9a8      	cbnz	r0, 800ccf6 <__lo0bits+0x52>
 800ccca:	0c1b      	lsrs	r3, r3, #16
 800cccc:	2010      	movs	r0, #16
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	b90a      	cbnz	r2, 800ccd6 <__lo0bits+0x32>
 800ccd2:	3008      	adds	r0, #8
 800ccd4:	0a1b      	lsrs	r3, r3, #8
 800ccd6:	071a      	lsls	r2, r3, #28
 800ccd8:	bf04      	itt	eq
 800ccda:	091b      	lsreq	r3, r3, #4
 800ccdc:	3004      	addeq	r0, #4
 800ccde:	079a      	lsls	r2, r3, #30
 800cce0:	bf04      	itt	eq
 800cce2:	089b      	lsreq	r3, r3, #2
 800cce4:	3002      	addeq	r0, #2
 800cce6:	07da      	lsls	r2, r3, #31
 800cce8:	d403      	bmi.n	800ccf2 <__lo0bits+0x4e>
 800ccea:	085b      	lsrs	r3, r3, #1
 800ccec:	f100 0001 	add.w	r0, r0, #1
 800ccf0:	d005      	beq.n	800ccfe <__lo0bits+0x5a>
 800ccf2:	600b      	str	r3, [r1, #0]
 800ccf4:	4770      	bx	lr
 800ccf6:	4610      	mov	r0, r2
 800ccf8:	e7e9      	b.n	800ccce <__lo0bits+0x2a>
 800ccfa:	2000      	movs	r0, #0
 800ccfc:	4770      	bx	lr
 800ccfe:	2020      	movs	r0, #32
 800cd00:	4770      	bx	lr
	...

0800cd04 <__i2b>:
 800cd04:	b510      	push	{r4, lr}
 800cd06:	460c      	mov	r4, r1
 800cd08:	2101      	movs	r1, #1
 800cd0a:	f7ff feb9 	bl	800ca80 <_Balloc>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	b928      	cbnz	r0, 800cd1e <__i2b+0x1a>
 800cd12:	4b05      	ldr	r3, [pc, #20]	; (800cd28 <__i2b+0x24>)
 800cd14:	4805      	ldr	r0, [pc, #20]	; (800cd2c <__i2b+0x28>)
 800cd16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cd1a:	f7fe fb23 	bl	800b364 <__assert_func>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	6144      	str	r4, [r0, #20]
 800cd22:	6103      	str	r3, [r0, #16]
 800cd24:	bd10      	pop	{r4, pc}
 800cd26:	bf00      	nop
 800cd28:	0800dfdc 	.word	0x0800dfdc
 800cd2c:	0800e068 	.word	0x0800e068

0800cd30 <__multiply>:
 800cd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd34:	4691      	mov	r9, r2
 800cd36:	690a      	ldr	r2, [r1, #16]
 800cd38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	bfb8      	it	lt
 800cd40:	460b      	movlt	r3, r1
 800cd42:	460c      	mov	r4, r1
 800cd44:	bfbc      	itt	lt
 800cd46:	464c      	movlt	r4, r9
 800cd48:	4699      	movlt	r9, r3
 800cd4a:	6927      	ldr	r7, [r4, #16]
 800cd4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd50:	68a3      	ldr	r3, [r4, #8]
 800cd52:	6861      	ldr	r1, [r4, #4]
 800cd54:	eb07 060a 	add.w	r6, r7, sl
 800cd58:	42b3      	cmp	r3, r6
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	bfb8      	it	lt
 800cd5e:	3101      	addlt	r1, #1
 800cd60:	f7ff fe8e 	bl	800ca80 <_Balloc>
 800cd64:	b930      	cbnz	r0, 800cd74 <__multiply+0x44>
 800cd66:	4602      	mov	r2, r0
 800cd68:	4b44      	ldr	r3, [pc, #272]	; (800ce7c <__multiply+0x14c>)
 800cd6a:	4845      	ldr	r0, [pc, #276]	; (800ce80 <__multiply+0x150>)
 800cd6c:	f240 115d 	movw	r1, #349	; 0x15d
 800cd70:	f7fe faf8 	bl	800b364 <__assert_func>
 800cd74:	f100 0514 	add.w	r5, r0, #20
 800cd78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd7c:	462b      	mov	r3, r5
 800cd7e:	2200      	movs	r2, #0
 800cd80:	4543      	cmp	r3, r8
 800cd82:	d321      	bcc.n	800cdc8 <__multiply+0x98>
 800cd84:	f104 0314 	add.w	r3, r4, #20
 800cd88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd8c:	f109 0314 	add.w	r3, r9, #20
 800cd90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cd94:	9202      	str	r2, [sp, #8]
 800cd96:	1b3a      	subs	r2, r7, r4
 800cd98:	3a15      	subs	r2, #21
 800cd9a:	f022 0203 	bic.w	r2, r2, #3
 800cd9e:	3204      	adds	r2, #4
 800cda0:	f104 0115 	add.w	r1, r4, #21
 800cda4:	428f      	cmp	r7, r1
 800cda6:	bf38      	it	cc
 800cda8:	2204      	movcc	r2, #4
 800cdaa:	9201      	str	r2, [sp, #4]
 800cdac:	9a02      	ldr	r2, [sp, #8]
 800cdae:	9303      	str	r3, [sp, #12]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d80c      	bhi.n	800cdce <__multiply+0x9e>
 800cdb4:	2e00      	cmp	r6, #0
 800cdb6:	dd03      	ble.n	800cdc0 <__multiply+0x90>
 800cdb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d05a      	beq.n	800ce76 <__multiply+0x146>
 800cdc0:	6106      	str	r6, [r0, #16]
 800cdc2:	b005      	add	sp, #20
 800cdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc8:	f843 2b04 	str.w	r2, [r3], #4
 800cdcc:	e7d8      	b.n	800cd80 <__multiply+0x50>
 800cdce:	f8b3 a000 	ldrh.w	sl, [r3]
 800cdd2:	f1ba 0f00 	cmp.w	sl, #0
 800cdd6:	d024      	beq.n	800ce22 <__multiply+0xf2>
 800cdd8:	f104 0e14 	add.w	lr, r4, #20
 800cddc:	46a9      	mov	r9, r5
 800cdde:	f04f 0c00 	mov.w	ip, #0
 800cde2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cde6:	f8d9 1000 	ldr.w	r1, [r9]
 800cdea:	fa1f fb82 	uxth.w	fp, r2
 800cdee:	b289      	uxth	r1, r1
 800cdf0:	fb0a 110b 	mla	r1, sl, fp, r1
 800cdf4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cdf8:	f8d9 2000 	ldr.w	r2, [r9]
 800cdfc:	4461      	add	r1, ip
 800cdfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce02:	fb0a c20b 	mla	r2, sl, fp, ip
 800ce06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ce0a:	b289      	uxth	r1, r1
 800ce0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce10:	4577      	cmp	r7, lr
 800ce12:	f849 1b04 	str.w	r1, [r9], #4
 800ce16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce1a:	d8e2      	bhi.n	800cde2 <__multiply+0xb2>
 800ce1c:	9a01      	ldr	r2, [sp, #4]
 800ce1e:	f845 c002 	str.w	ip, [r5, r2]
 800ce22:	9a03      	ldr	r2, [sp, #12]
 800ce24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ce28:	3304      	adds	r3, #4
 800ce2a:	f1b9 0f00 	cmp.w	r9, #0
 800ce2e:	d020      	beq.n	800ce72 <__multiply+0x142>
 800ce30:	6829      	ldr	r1, [r5, #0]
 800ce32:	f104 0c14 	add.w	ip, r4, #20
 800ce36:	46ae      	mov	lr, r5
 800ce38:	f04f 0a00 	mov.w	sl, #0
 800ce3c:	f8bc b000 	ldrh.w	fp, [ip]
 800ce40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce44:	fb09 220b 	mla	r2, r9, fp, r2
 800ce48:	4492      	add	sl, r2
 800ce4a:	b289      	uxth	r1, r1
 800ce4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ce50:	f84e 1b04 	str.w	r1, [lr], #4
 800ce54:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce58:	f8be 1000 	ldrh.w	r1, [lr]
 800ce5c:	0c12      	lsrs	r2, r2, #16
 800ce5e:	fb09 1102 	mla	r1, r9, r2, r1
 800ce62:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ce66:	4567      	cmp	r7, ip
 800ce68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce6c:	d8e6      	bhi.n	800ce3c <__multiply+0x10c>
 800ce6e:	9a01      	ldr	r2, [sp, #4]
 800ce70:	50a9      	str	r1, [r5, r2]
 800ce72:	3504      	adds	r5, #4
 800ce74:	e79a      	b.n	800cdac <__multiply+0x7c>
 800ce76:	3e01      	subs	r6, #1
 800ce78:	e79c      	b.n	800cdb4 <__multiply+0x84>
 800ce7a:	bf00      	nop
 800ce7c:	0800dfdc 	.word	0x0800dfdc
 800ce80:	0800e068 	.word	0x0800e068

0800ce84 <__pow5mult>:
 800ce84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce88:	4615      	mov	r5, r2
 800ce8a:	f012 0203 	ands.w	r2, r2, #3
 800ce8e:	4606      	mov	r6, r0
 800ce90:	460f      	mov	r7, r1
 800ce92:	d007      	beq.n	800cea4 <__pow5mult+0x20>
 800ce94:	4c25      	ldr	r4, [pc, #148]	; (800cf2c <__pow5mult+0xa8>)
 800ce96:	3a01      	subs	r2, #1
 800ce98:	2300      	movs	r3, #0
 800ce9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce9e:	f7ff fe51 	bl	800cb44 <__multadd>
 800cea2:	4607      	mov	r7, r0
 800cea4:	10ad      	asrs	r5, r5, #2
 800cea6:	d03d      	beq.n	800cf24 <__pow5mult+0xa0>
 800cea8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ceaa:	b97c      	cbnz	r4, 800cecc <__pow5mult+0x48>
 800ceac:	2010      	movs	r0, #16
 800ceae:	f7ff fdc1 	bl	800ca34 <malloc>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	6270      	str	r0, [r6, #36]	; 0x24
 800ceb6:	b928      	cbnz	r0, 800cec4 <__pow5mult+0x40>
 800ceb8:	4b1d      	ldr	r3, [pc, #116]	; (800cf30 <__pow5mult+0xac>)
 800ceba:	481e      	ldr	r0, [pc, #120]	; (800cf34 <__pow5mult+0xb0>)
 800cebc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cec0:	f7fe fa50 	bl	800b364 <__assert_func>
 800cec4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cec8:	6004      	str	r4, [r0, #0]
 800ceca:	60c4      	str	r4, [r0, #12]
 800cecc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ced0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ced4:	b94c      	cbnz	r4, 800ceea <__pow5mult+0x66>
 800ced6:	f240 2171 	movw	r1, #625	; 0x271
 800ceda:	4630      	mov	r0, r6
 800cedc:	f7ff ff12 	bl	800cd04 <__i2b>
 800cee0:	2300      	movs	r3, #0
 800cee2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cee6:	4604      	mov	r4, r0
 800cee8:	6003      	str	r3, [r0, #0]
 800ceea:	f04f 0900 	mov.w	r9, #0
 800ceee:	07eb      	lsls	r3, r5, #31
 800cef0:	d50a      	bpl.n	800cf08 <__pow5mult+0x84>
 800cef2:	4639      	mov	r1, r7
 800cef4:	4622      	mov	r2, r4
 800cef6:	4630      	mov	r0, r6
 800cef8:	f7ff ff1a 	bl	800cd30 <__multiply>
 800cefc:	4639      	mov	r1, r7
 800cefe:	4680      	mov	r8, r0
 800cf00:	4630      	mov	r0, r6
 800cf02:	f7ff fdfd 	bl	800cb00 <_Bfree>
 800cf06:	4647      	mov	r7, r8
 800cf08:	106d      	asrs	r5, r5, #1
 800cf0a:	d00b      	beq.n	800cf24 <__pow5mult+0xa0>
 800cf0c:	6820      	ldr	r0, [r4, #0]
 800cf0e:	b938      	cbnz	r0, 800cf20 <__pow5mult+0x9c>
 800cf10:	4622      	mov	r2, r4
 800cf12:	4621      	mov	r1, r4
 800cf14:	4630      	mov	r0, r6
 800cf16:	f7ff ff0b 	bl	800cd30 <__multiply>
 800cf1a:	6020      	str	r0, [r4, #0]
 800cf1c:	f8c0 9000 	str.w	r9, [r0]
 800cf20:	4604      	mov	r4, r0
 800cf22:	e7e4      	b.n	800ceee <__pow5mult+0x6a>
 800cf24:	4638      	mov	r0, r7
 800cf26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf2a:	bf00      	nop
 800cf2c:	0800e1b8 	.word	0x0800e1b8
 800cf30:	0800df6a 	.word	0x0800df6a
 800cf34:	0800e068 	.word	0x0800e068

0800cf38 <__lshift>:
 800cf38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf3c:	460c      	mov	r4, r1
 800cf3e:	6849      	ldr	r1, [r1, #4]
 800cf40:	6923      	ldr	r3, [r4, #16]
 800cf42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf46:	68a3      	ldr	r3, [r4, #8]
 800cf48:	4607      	mov	r7, r0
 800cf4a:	4691      	mov	r9, r2
 800cf4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf50:	f108 0601 	add.w	r6, r8, #1
 800cf54:	42b3      	cmp	r3, r6
 800cf56:	db0b      	blt.n	800cf70 <__lshift+0x38>
 800cf58:	4638      	mov	r0, r7
 800cf5a:	f7ff fd91 	bl	800ca80 <_Balloc>
 800cf5e:	4605      	mov	r5, r0
 800cf60:	b948      	cbnz	r0, 800cf76 <__lshift+0x3e>
 800cf62:	4602      	mov	r2, r0
 800cf64:	4b2a      	ldr	r3, [pc, #168]	; (800d010 <__lshift+0xd8>)
 800cf66:	482b      	ldr	r0, [pc, #172]	; (800d014 <__lshift+0xdc>)
 800cf68:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cf6c:	f7fe f9fa 	bl	800b364 <__assert_func>
 800cf70:	3101      	adds	r1, #1
 800cf72:	005b      	lsls	r3, r3, #1
 800cf74:	e7ee      	b.n	800cf54 <__lshift+0x1c>
 800cf76:	2300      	movs	r3, #0
 800cf78:	f100 0114 	add.w	r1, r0, #20
 800cf7c:	f100 0210 	add.w	r2, r0, #16
 800cf80:	4618      	mov	r0, r3
 800cf82:	4553      	cmp	r3, sl
 800cf84:	db37      	blt.n	800cff6 <__lshift+0xbe>
 800cf86:	6920      	ldr	r0, [r4, #16]
 800cf88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf8c:	f104 0314 	add.w	r3, r4, #20
 800cf90:	f019 091f 	ands.w	r9, r9, #31
 800cf94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cf9c:	d02f      	beq.n	800cffe <__lshift+0xc6>
 800cf9e:	f1c9 0e20 	rsb	lr, r9, #32
 800cfa2:	468a      	mov	sl, r1
 800cfa4:	f04f 0c00 	mov.w	ip, #0
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	fa02 f209 	lsl.w	r2, r2, r9
 800cfae:	ea42 020c 	orr.w	r2, r2, ip
 800cfb2:	f84a 2b04 	str.w	r2, [sl], #4
 800cfb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfba:	4298      	cmp	r0, r3
 800cfbc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cfc0:	d8f2      	bhi.n	800cfa8 <__lshift+0x70>
 800cfc2:	1b03      	subs	r3, r0, r4
 800cfc4:	3b15      	subs	r3, #21
 800cfc6:	f023 0303 	bic.w	r3, r3, #3
 800cfca:	3304      	adds	r3, #4
 800cfcc:	f104 0215 	add.w	r2, r4, #21
 800cfd0:	4290      	cmp	r0, r2
 800cfd2:	bf38      	it	cc
 800cfd4:	2304      	movcc	r3, #4
 800cfd6:	f841 c003 	str.w	ip, [r1, r3]
 800cfda:	f1bc 0f00 	cmp.w	ip, #0
 800cfde:	d001      	beq.n	800cfe4 <__lshift+0xac>
 800cfe0:	f108 0602 	add.w	r6, r8, #2
 800cfe4:	3e01      	subs	r6, #1
 800cfe6:	4638      	mov	r0, r7
 800cfe8:	612e      	str	r6, [r5, #16]
 800cfea:	4621      	mov	r1, r4
 800cfec:	f7ff fd88 	bl	800cb00 <_Bfree>
 800cff0:	4628      	mov	r0, r5
 800cff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cff6:	f842 0f04 	str.w	r0, [r2, #4]!
 800cffa:	3301      	adds	r3, #1
 800cffc:	e7c1      	b.n	800cf82 <__lshift+0x4a>
 800cffe:	3904      	subs	r1, #4
 800d000:	f853 2b04 	ldr.w	r2, [r3], #4
 800d004:	f841 2f04 	str.w	r2, [r1, #4]!
 800d008:	4298      	cmp	r0, r3
 800d00a:	d8f9      	bhi.n	800d000 <__lshift+0xc8>
 800d00c:	e7ea      	b.n	800cfe4 <__lshift+0xac>
 800d00e:	bf00      	nop
 800d010:	0800dfdc 	.word	0x0800dfdc
 800d014:	0800e068 	.word	0x0800e068

0800d018 <__mcmp>:
 800d018:	b530      	push	{r4, r5, lr}
 800d01a:	6902      	ldr	r2, [r0, #16]
 800d01c:	690c      	ldr	r4, [r1, #16]
 800d01e:	1b12      	subs	r2, r2, r4
 800d020:	d10e      	bne.n	800d040 <__mcmp+0x28>
 800d022:	f100 0314 	add.w	r3, r0, #20
 800d026:	3114      	adds	r1, #20
 800d028:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d02c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d030:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d034:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d038:	42a5      	cmp	r5, r4
 800d03a:	d003      	beq.n	800d044 <__mcmp+0x2c>
 800d03c:	d305      	bcc.n	800d04a <__mcmp+0x32>
 800d03e:	2201      	movs	r2, #1
 800d040:	4610      	mov	r0, r2
 800d042:	bd30      	pop	{r4, r5, pc}
 800d044:	4283      	cmp	r3, r0
 800d046:	d3f3      	bcc.n	800d030 <__mcmp+0x18>
 800d048:	e7fa      	b.n	800d040 <__mcmp+0x28>
 800d04a:	f04f 32ff 	mov.w	r2, #4294967295
 800d04e:	e7f7      	b.n	800d040 <__mcmp+0x28>

0800d050 <__mdiff>:
 800d050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d054:	460c      	mov	r4, r1
 800d056:	4606      	mov	r6, r0
 800d058:	4611      	mov	r1, r2
 800d05a:	4620      	mov	r0, r4
 800d05c:	4690      	mov	r8, r2
 800d05e:	f7ff ffdb 	bl	800d018 <__mcmp>
 800d062:	1e05      	subs	r5, r0, #0
 800d064:	d110      	bne.n	800d088 <__mdiff+0x38>
 800d066:	4629      	mov	r1, r5
 800d068:	4630      	mov	r0, r6
 800d06a:	f7ff fd09 	bl	800ca80 <_Balloc>
 800d06e:	b930      	cbnz	r0, 800d07e <__mdiff+0x2e>
 800d070:	4b3a      	ldr	r3, [pc, #232]	; (800d15c <__mdiff+0x10c>)
 800d072:	4602      	mov	r2, r0
 800d074:	f240 2132 	movw	r1, #562	; 0x232
 800d078:	4839      	ldr	r0, [pc, #228]	; (800d160 <__mdiff+0x110>)
 800d07a:	f7fe f973 	bl	800b364 <__assert_func>
 800d07e:	2301      	movs	r3, #1
 800d080:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d084:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d088:	bfa4      	itt	ge
 800d08a:	4643      	movge	r3, r8
 800d08c:	46a0      	movge	r8, r4
 800d08e:	4630      	mov	r0, r6
 800d090:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d094:	bfa6      	itte	ge
 800d096:	461c      	movge	r4, r3
 800d098:	2500      	movge	r5, #0
 800d09a:	2501      	movlt	r5, #1
 800d09c:	f7ff fcf0 	bl	800ca80 <_Balloc>
 800d0a0:	b920      	cbnz	r0, 800d0ac <__mdiff+0x5c>
 800d0a2:	4b2e      	ldr	r3, [pc, #184]	; (800d15c <__mdiff+0x10c>)
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d0aa:	e7e5      	b.n	800d078 <__mdiff+0x28>
 800d0ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d0b0:	6926      	ldr	r6, [r4, #16]
 800d0b2:	60c5      	str	r5, [r0, #12]
 800d0b4:	f104 0914 	add.w	r9, r4, #20
 800d0b8:	f108 0514 	add.w	r5, r8, #20
 800d0bc:	f100 0e14 	add.w	lr, r0, #20
 800d0c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d0c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d0c8:	f108 0210 	add.w	r2, r8, #16
 800d0cc:	46f2      	mov	sl, lr
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d0d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d0d8:	fa1f f883 	uxth.w	r8, r3
 800d0dc:	fa11 f18b 	uxtah	r1, r1, fp
 800d0e0:	0c1b      	lsrs	r3, r3, #16
 800d0e2:	eba1 0808 	sub.w	r8, r1, r8
 800d0e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d0ee:	fa1f f888 	uxth.w	r8, r8
 800d0f2:	1419      	asrs	r1, r3, #16
 800d0f4:	454e      	cmp	r6, r9
 800d0f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d0fa:	f84a 3b04 	str.w	r3, [sl], #4
 800d0fe:	d8e7      	bhi.n	800d0d0 <__mdiff+0x80>
 800d100:	1b33      	subs	r3, r6, r4
 800d102:	3b15      	subs	r3, #21
 800d104:	f023 0303 	bic.w	r3, r3, #3
 800d108:	3304      	adds	r3, #4
 800d10a:	3415      	adds	r4, #21
 800d10c:	42a6      	cmp	r6, r4
 800d10e:	bf38      	it	cc
 800d110:	2304      	movcc	r3, #4
 800d112:	441d      	add	r5, r3
 800d114:	4473      	add	r3, lr
 800d116:	469e      	mov	lr, r3
 800d118:	462e      	mov	r6, r5
 800d11a:	4566      	cmp	r6, ip
 800d11c:	d30e      	bcc.n	800d13c <__mdiff+0xec>
 800d11e:	f10c 0203 	add.w	r2, ip, #3
 800d122:	1b52      	subs	r2, r2, r5
 800d124:	f022 0203 	bic.w	r2, r2, #3
 800d128:	3d03      	subs	r5, #3
 800d12a:	45ac      	cmp	ip, r5
 800d12c:	bf38      	it	cc
 800d12e:	2200      	movcc	r2, #0
 800d130:	441a      	add	r2, r3
 800d132:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d136:	b17b      	cbz	r3, 800d158 <__mdiff+0x108>
 800d138:	6107      	str	r7, [r0, #16]
 800d13a:	e7a3      	b.n	800d084 <__mdiff+0x34>
 800d13c:	f856 8b04 	ldr.w	r8, [r6], #4
 800d140:	fa11 f288 	uxtah	r2, r1, r8
 800d144:	1414      	asrs	r4, r2, #16
 800d146:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d14a:	b292      	uxth	r2, r2
 800d14c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d150:	f84e 2b04 	str.w	r2, [lr], #4
 800d154:	1421      	asrs	r1, r4, #16
 800d156:	e7e0      	b.n	800d11a <__mdiff+0xca>
 800d158:	3f01      	subs	r7, #1
 800d15a:	e7ea      	b.n	800d132 <__mdiff+0xe2>
 800d15c:	0800dfdc 	.word	0x0800dfdc
 800d160:	0800e068 	.word	0x0800e068

0800d164 <__ulp>:
 800d164:	b082      	sub	sp, #8
 800d166:	ed8d 0b00 	vstr	d0, [sp]
 800d16a:	9b01      	ldr	r3, [sp, #4]
 800d16c:	4912      	ldr	r1, [pc, #72]	; (800d1b8 <__ulp+0x54>)
 800d16e:	4019      	ands	r1, r3
 800d170:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d174:	2900      	cmp	r1, #0
 800d176:	dd05      	ble.n	800d184 <__ulp+0x20>
 800d178:	2200      	movs	r2, #0
 800d17a:	460b      	mov	r3, r1
 800d17c:	ec43 2b10 	vmov	d0, r2, r3
 800d180:	b002      	add	sp, #8
 800d182:	4770      	bx	lr
 800d184:	4249      	negs	r1, r1
 800d186:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d18a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d18e:	f04f 0200 	mov.w	r2, #0
 800d192:	f04f 0300 	mov.w	r3, #0
 800d196:	da04      	bge.n	800d1a2 <__ulp+0x3e>
 800d198:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d19c:	fa41 f300 	asr.w	r3, r1, r0
 800d1a0:	e7ec      	b.n	800d17c <__ulp+0x18>
 800d1a2:	f1a0 0114 	sub.w	r1, r0, #20
 800d1a6:	291e      	cmp	r1, #30
 800d1a8:	bfda      	itte	le
 800d1aa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d1ae:	fa20 f101 	lsrle.w	r1, r0, r1
 800d1b2:	2101      	movgt	r1, #1
 800d1b4:	460a      	mov	r2, r1
 800d1b6:	e7e1      	b.n	800d17c <__ulp+0x18>
 800d1b8:	7ff00000 	.word	0x7ff00000

0800d1bc <__b2d>:
 800d1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1be:	6905      	ldr	r5, [r0, #16]
 800d1c0:	f100 0714 	add.w	r7, r0, #20
 800d1c4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d1c8:	1f2e      	subs	r6, r5, #4
 800d1ca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f7ff fd48 	bl	800cc64 <__hi0bits>
 800d1d4:	f1c0 0320 	rsb	r3, r0, #32
 800d1d8:	280a      	cmp	r0, #10
 800d1da:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d258 <__b2d+0x9c>
 800d1de:	600b      	str	r3, [r1, #0]
 800d1e0:	dc14      	bgt.n	800d20c <__b2d+0x50>
 800d1e2:	f1c0 0e0b 	rsb	lr, r0, #11
 800d1e6:	fa24 f10e 	lsr.w	r1, r4, lr
 800d1ea:	42b7      	cmp	r7, r6
 800d1ec:	ea41 030c 	orr.w	r3, r1, ip
 800d1f0:	bf34      	ite	cc
 800d1f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d1f6:	2100      	movcs	r1, #0
 800d1f8:	3015      	adds	r0, #21
 800d1fa:	fa04 f000 	lsl.w	r0, r4, r0
 800d1fe:	fa21 f10e 	lsr.w	r1, r1, lr
 800d202:	ea40 0201 	orr.w	r2, r0, r1
 800d206:	ec43 2b10 	vmov	d0, r2, r3
 800d20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d20c:	42b7      	cmp	r7, r6
 800d20e:	bf3a      	itte	cc
 800d210:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d214:	f1a5 0608 	subcc.w	r6, r5, #8
 800d218:	2100      	movcs	r1, #0
 800d21a:	380b      	subs	r0, #11
 800d21c:	d017      	beq.n	800d24e <__b2d+0x92>
 800d21e:	f1c0 0c20 	rsb	ip, r0, #32
 800d222:	fa04 f500 	lsl.w	r5, r4, r0
 800d226:	42be      	cmp	r6, r7
 800d228:	fa21 f40c 	lsr.w	r4, r1, ip
 800d22c:	ea45 0504 	orr.w	r5, r5, r4
 800d230:	bf8c      	ite	hi
 800d232:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d236:	2400      	movls	r4, #0
 800d238:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d23c:	fa01 f000 	lsl.w	r0, r1, r0
 800d240:	fa24 f40c 	lsr.w	r4, r4, ip
 800d244:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d248:	ea40 0204 	orr.w	r2, r0, r4
 800d24c:	e7db      	b.n	800d206 <__b2d+0x4a>
 800d24e:	ea44 030c 	orr.w	r3, r4, ip
 800d252:	460a      	mov	r2, r1
 800d254:	e7d7      	b.n	800d206 <__b2d+0x4a>
 800d256:	bf00      	nop
 800d258:	3ff00000 	.word	0x3ff00000

0800d25c <__d2b>:
 800d25c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d260:	4689      	mov	r9, r1
 800d262:	2101      	movs	r1, #1
 800d264:	ec57 6b10 	vmov	r6, r7, d0
 800d268:	4690      	mov	r8, r2
 800d26a:	f7ff fc09 	bl	800ca80 <_Balloc>
 800d26e:	4604      	mov	r4, r0
 800d270:	b930      	cbnz	r0, 800d280 <__d2b+0x24>
 800d272:	4602      	mov	r2, r0
 800d274:	4b25      	ldr	r3, [pc, #148]	; (800d30c <__d2b+0xb0>)
 800d276:	4826      	ldr	r0, [pc, #152]	; (800d310 <__d2b+0xb4>)
 800d278:	f240 310a 	movw	r1, #778	; 0x30a
 800d27c:	f7fe f872 	bl	800b364 <__assert_func>
 800d280:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d284:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d288:	bb35      	cbnz	r5, 800d2d8 <__d2b+0x7c>
 800d28a:	2e00      	cmp	r6, #0
 800d28c:	9301      	str	r3, [sp, #4]
 800d28e:	d028      	beq.n	800d2e2 <__d2b+0x86>
 800d290:	4668      	mov	r0, sp
 800d292:	9600      	str	r6, [sp, #0]
 800d294:	f7ff fd06 	bl	800cca4 <__lo0bits>
 800d298:	9900      	ldr	r1, [sp, #0]
 800d29a:	b300      	cbz	r0, 800d2de <__d2b+0x82>
 800d29c:	9a01      	ldr	r2, [sp, #4]
 800d29e:	f1c0 0320 	rsb	r3, r0, #32
 800d2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2a6:	430b      	orrs	r3, r1
 800d2a8:	40c2      	lsrs	r2, r0
 800d2aa:	6163      	str	r3, [r4, #20]
 800d2ac:	9201      	str	r2, [sp, #4]
 800d2ae:	9b01      	ldr	r3, [sp, #4]
 800d2b0:	61a3      	str	r3, [r4, #24]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	bf14      	ite	ne
 800d2b6:	2202      	movne	r2, #2
 800d2b8:	2201      	moveq	r2, #1
 800d2ba:	6122      	str	r2, [r4, #16]
 800d2bc:	b1d5      	cbz	r5, 800d2f4 <__d2b+0x98>
 800d2be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d2c2:	4405      	add	r5, r0
 800d2c4:	f8c9 5000 	str.w	r5, [r9]
 800d2c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d2cc:	f8c8 0000 	str.w	r0, [r8]
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	b003      	add	sp, #12
 800d2d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2dc:	e7d5      	b.n	800d28a <__d2b+0x2e>
 800d2de:	6161      	str	r1, [r4, #20]
 800d2e0:	e7e5      	b.n	800d2ae <__d2b+0x52>
 800d2e2:	a801      	add	r0, sp, #4
 800d2e4:	f7ff fcde 	bl	800cca4 <__lo0bits>
 800d2e8:	9b01      	ldr	r3, [sp, #4]
 800d2ea:	6163      	str	r3, [r4, #20]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	6122      	str	r2, [r4, #16]
 800d2f0:	3020      	adds	r0, #32
 800d2f2:	e7e3      	b.n	800d2bc <__d2b+0x60>
 800d2f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d2fc:	f8c9 0000 	str.w	r0, [r9]
 800d300:	6918      	ldr	r0, [r3, #16]
 800d302:	f7ff fcaf 	bl	800cc64 <__hi0bits>
 800d306:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d30a:	e7df      	b.n	800d2cc <__d2b+0x70>
 800d30c:	0800dfdc 	.word	0x0800dfdc
 800d310:	0800e068 	.word	0x0800e068

0800d314 <__ratio>:
 800d314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d318:	4688      	mov	r8, r1
 800d31a:	4669      	mov	r1, sp
 800d31c:	4681      	mov	r9, r0
 800d31e:	f7ff ff4d 	bl	800d1bc <__b2d>
 800d322:	a901      	add	r1, sp, #4
 800d324:	4640      	mov	r0, r8
 800d326:	ec55 4b10 	vmov	r4, r5, d0
 800d32a:	f7ff ff47 	bl	800d1bc <__b2d>
 800d32e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d332:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d336:	eba3 0c02 	sub.w	ip, r3, r2
 800d33a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d33e:	1a9b      	subs	r3, r3, r2
 800d340:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d344:	ec51 0b10 	vmov	r0, r1, d0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	bfd6      	itet	le
 800d34c:	460a      	movle	r2, r1
 800d34e:	462a      	movgt	r2, r5
 800d350:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d354:	468b      	mov	fp, r1
 800d356:	462f      	mov	r7, r5
 800d358:	bfd4      	ite	le
 800d35a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d35e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d362:	4620      	mov	r0, r4
 800d364:	ee10 2a10 	vmov	r2, s0
 800d368:	465b      	mov	r3, fp
 800d36a:	4639      	mov	r1, r7
 800d36c:	f7f3 fa6e 	bl	800084c <__aeabi_ddiv>
 800d370:	ec41 0b10 	vmov	d0, r0, r1
 800d374:	b003      	add	sp, #12
 800d376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d37a <__copybits>:
 800d37a:	3901      	subs	r1, #1
 800d37c:	b570      	push	{r4, r5, r6, lr}
 800d37e:	1149      	asrs	r1, r1, #5
 800d380:	6914      	ldr	r4, [r2, #16]
 800d382:	3101      	adds	r1, #1
 800d384:	f102 0314 	add.w	r3, r2, #20
 800d388:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d38c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d390:	1f05      	subs	r5, r0, #4
 800d392:	42a3      	cmp	r3, r4
 800d394:	d30c      	bcc.n	800d3b0 <__copybits+0x36>
 800d396:	1aa3      	subs	r3, r4, r2
 800d398:	3b11      	subs	r3, #17
 800d39a:	f023 0303 	bic.w	r3, r3, #3
 800d39e:	3211      	adds	r2, #17
 800d3a0:	42a2      	cmp	r2, r4
 800d3a2:	bf88      	it	hi
 800d3a4:	2300      	movhi	r3, #0
 800d3a6:	4418      	add	r0, r3
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	4288      	cmp	r0, r1
 800d3ac:	d305      	bcc.n	800d3ba <__copybits+0x40>
 800d3ae:	bd70      	pop	{r4, r5, r6, pc}
 800d3b0:	f853 6b04 	ldr.w	r6, [r3], #4
 800d3b4:	f845 6f04 	str.w	r6, [r5, #4]!
 800d3b8:	e7eb      	b.n	800d392 <__copybits+0x18>
 800d3ba:	f840 3b04 	str.w	r3, [r0], #4
 800d3be:	e7f4      	b.n	800d3aa <__copybits+0x30>

0800d3c0 <__any_on>:
 800d3c0:	f100 0214 	add.w	r2, r0, #20
 800d3c4:	6900      	ldr	r0, [r0, #16]
 800d3c6:	114b      	asrs	r3, r1, #5
 800d3c8:	4298      	cmp	r0, r3
 800d3ca:	b510      	push	{r4, lr}
 800d3cc:	db11      	blt.n	800d3f2 <__any_on+0x32>
 800d3ce:	dd0a      	ble.n	800d3e6 <__any_on+0x26>
 800d3d0:	f011 011f 	ands.w	r1, r1, #31
 800d3d4:	d007      	beq.n	800d3e6 <__any_on+0x26>
 800d3d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d3da:	fa24 f001 	lsr.w	r0, r4, r1
 800d3de:	fa00 f101 	lsl.w	r1, r0, r1
 800d3e2:	428c      	cmp	r4, r1
 800d3e4:	d10b      	bne.n	800d3fe <__any_on+0x3e>
 800d3e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d803      	bhi.n	800d3f6 <__any_on+0x36>
 800d3ee:	2000      	movs	r0, #0
 800d3f0:	bd10      	pop	{r4, pc}
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	e7f7      	b.n	800d3e6 <__any_on+0x26>
 800d3f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3fa:	2900      	cmp	r1, #0
 800d3fc:	d0f5      	beq.n	800d3ea <__any_on+0x2a>
 800d3fe:	2001      	movs	r0, #1
 800d400:	e7f6      	b.n	800d3f0 <__any_on+0x30>

0800d402 <_calloc_r>:
 800d402:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d404:	fba1 2402 	umull	r2, r4, r1, r2
 800d408:	b94c      	cbnz	r4, 800d41e <_calloc_r+0x1c>
 800d40a:	4611      	mov	r1, r2
 800d40c:	9201      	str	r2, [sp, #4]
 800d40e:	f7fc f857 	bl	80094c0 <_malloc_r>
 800d412:	9a01      	ldr	r2, [sp, #4]
 800d414:	4605      	mov	r5, r0
 800d416:	b930      	cbnz	r0, 800d426 <_calloc_r+0x24>
 800d418:	4628      	mov	r0, r5
 800d41a:	b003      	add	sp, #12
 800d41c:	bd30      	pop	{r4, r5, pc}
 800d41e:	220c      	movs	r2, #12
 800d420:	6002      	str	r2, [r0, #0]
 800d422:	2500      	movs	r5, #0
 800d424:	e7f8      	b.n	800d418 <_calloc_r+0x16>
 800d426:	4621      	mov	r1, r4
 800d428:	f7fc f821 	bl	800946e <memset>
 800d42c:	e7f4      	b.n	800d418 <_calloc_r+0x16>
	...

0800d430 <_free_r>:
 800d430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d432:	2900      	cmp	r1, #0
 800d434:	d044      	beq.n	800d4c0 <_free_r+0x90>
 800d436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d43a:	9001      	str	r0, [sp, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f1a1 0404 	sub.w	r4, r1, #4
 800d442:	bfb8      	it	lt
 800d444:	18e4      	addlt	r4, r4, r3
 800d446:	f7ff fb0f 	bl	800ca68 <__malloc_lock>
 800d44a:	4a1e      	ldr	r2, [pc, #120]	; (800d4c4 <_free_r+0x94>)
 800d44c:	9801      	ldr	r0, [sp, #4]
 800d44e:	6813      	ldr	r3, [r2, #0]
 800d450:	b933      	cbnz	r3, 800d460 <_free_r+0x30>
 800d452:	6063      	str	r3, [r4, #4]
 800d454:	6014      	str	r4, [r2, #0]
 800d456:	b003      	add	sp, #12
 800d458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d45c:	f7ff bb0a 	b.w	800ca74 <__malloc_unlock>
 800d460:	42a3      	cmp	r3, r4
 800d462:	d908      	bls.n	800d476 <_free_r+0x46>
 800d464:	6825      	ldr	r5, [r4, #0]
 800d466:	1961      	adds	r1, r4, r5
 800d468:	428b      	cmp	r3, r1
 800d46a:	bf01      	itttt	eq
 800d46c:	6819      	ldreq	r1, [r3, #0]
 800d46e:	685b      	ldreq	r3, [r3, #4]
 800d470:	1949      	addeq	r1, r1, r5
 800d472:	6021      	streq	r1, [r4, #0]
 800d474:	e7ed      	b.n	800d452 <_free_r+0x22>
 800d476:	461a      	mov	r2, r3
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	b10b      	cbz	r3, 800d480 <_free_r+0x50>
 800d47c:	42a3      	cmp	r3, r4
 800d47e:	d9fa      	bls.n	800d476 <_free_r+0x46>
 800d480:	6811      	ldr	r1, [r2, #0]
 800d482:	1855      	adds	r5, r2, r1
 800d484:	42a5      	cmp	r5, r4
 800d486:	d10b      	bne.n	800d4a0 <_free_r+0x70>
 800d488:	6824      	ldr	r4, [r4, #0]
 800d48a:	4421      	add	r1, r4
 800d48c:	1854      	adds	r4, r2, r1
 800d48e:	42a3      	cmp	r3, r4
 800d490:	6011      	str	r1, [r2, #0]
 800d492:	d1e0      	bne.n	800d456 <_free_r+0x26>
 800d494:	681c      	ldr	r4, [r3, #0]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	6053      	str	r3, [r2, #4]
 800d49a:	4421      	add	r1, r4
 800d49c:	6011      	str	r1, [r2, #0]
 800d49e:	e7da      	b.n	800d456 <_free_r+0x26>
 800d4a0:	d902      	bls.n	800d4a8 <_free_r+0x78>
 800d4a2:	230c      	movs	r3, #12
 800d4a4:	6003      	str	r3, [r0, #0]
 800d4a6:	e7d6      	b.n	800d456 <_free_r+0x26>
 800d4a8:	6825      	ldr	r5, [r4, #0]
 800d4aa:	1961      	adds	r1, r4, r5
 800d4ac:	428b      	cmp	r3, r1
 800d4ae:	bf04      	itt	eq
 800d4b0:	6819      	ldreq	r1, [r3, #0]
 800d4b2:	685b      	ldreq	r3, [r3, #4]
 800d4b4:	6063      	str	r3, [r4, #4]
 800d4b6:	bf04      	itt	eq
 800d4b8:	1949      	addeq	r1, r1, r5
 800d4ba:	6021      	streq	r1, [r4, #0]
 800d4bc:	6054      	str	r4, [r2, #4]
 800d4be:	e7ca      	b.n	800d456 <_free_r+0x26>
 800d4c0:	b003      	add	sp, #12
 800d4c2:	bd30      	pop	{r4, r5, pc}
 800d4c4:	20005cf4 	.word	0x20005cf4

0800d4c8 <__ssputs_r>:
 800d4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4cc:	688e      	ldr	r6, [r1, #8]
 800d4ce:	429e      	cmp	r6, r3
 800d4d0:	4682      	mov	sl, r0
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	4690      	mov	r8, r2
 800d4d6:	461f      	mov	r7, r3
 800d4d8:	d838      	bhi.n	800d54c <__ssputs_r+0x84>
 800d4da:	898a      	ldrh	r2, [r1, #12]
 800d4dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d4e0:	d032      	beq.n	800d548 <__ssputs_r+0x80>
 800d4e2:	6825      	ldr	r5, [r4, #0]
 800d4e4:	6909      	ldr	r1, [r1, #16]
 800d4e6:	eba5 0901 	sub.w	r9, r5, r1
 800d4ea:	6965      	ldr	r5, [r4, #20]
 800d4ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	444b      	add	r3, r9
 800d4f8:	106d      	asrs	r5, r5, #1
 800d4fa:	429d      	cmp	r5, r3
 800d4fc:	bf38      	it	cc
 800d4fe:	461d      	movcc	r5, r3
 800d500:	0553      	lsls	r3, r2, #21
 800d502:	d531      	bpl.n	800d568 <__ssputs_r+0xa0>
 800d504:	4629      	mov	r1, r5
 800d506:	f7fb ffdb 	bl	80094c0 <_malloc_r>
 800d50a:	4606      	mov	r6, r0
 800d50c:	b950      	cbnz	r0, 800d524 <__ssputs_r+0x5c>
 800d50e:	230c      	movs	r3, #12
 800d510:	f8ca 3000 	str.w	r3, [sl]
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d51a:	81a3      	strh	r3, [r4, #12]
 800d51c:	f04f 30ff 	mov.w	r0, #4294967295
 800d520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d524:	6921      	ldr	r1, [r4, #16]
 800d526:	464a      	mov	r2, r9
 800d528:	f7fb ff93 	bl	8009452 <memcpy>
 800d52c:	89a3      	ldrh	r3, [r4, #12]
 800d52e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d536:	81a3      	strh	r3, [r4, #12]
 800d538:	6126      	str	r6, [r4, #16]
 800d53a:	6165      	str	r5, [r4, #20]
 800d53c:	444e      	add	r6, r9
 800d53e:	eba5 0509 	sub.w	r5, r5, r9
 800d542:	6026      	str	r6, [r4, #0]
 800d544:	60a5      	str	r5, [r4, #8]
 800d546:	463e      	mov	r6, r7
 800d548:	42be      	cmp	r6, r7
 800d54a:	d900      	bls.n	800d54e <__ssputs_r+0x86>
 800d54c:	463e      	mov	r6, r7
 800d54e:	6820      	ldr	r0, [r4, #0]
 800d550:	4632      	mov	r2, r6
 800d552:	4641      	mov	r1, r8
 800d554:	f000 fad2 	bl	800dafc <memmove>
 800d558:	68a3      	ldr	r3, [r4, #8]
 800d55a:	1b9b      	subs	r3, r3, r6
 800d55c:	60a3      	str	r3, [r4, #8]
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	4433      	add	r3, r6
 800d562:	6023      	str	r3, [r4, #0]
 800d564:	2000      	movs	r0, #0
 800d566:	e7db      	b.n	800d520 <__ssputs_r+0x58>
 800d568:	462a      	mov	r2, r5
 800d56a:	f000 fae1 	bl	800db30 <_realloc_r>
 800d56e:	4606      	mov	r6, r0
 800d570:	2800      	cmp	r0, #0
 800d572:	d1e1      	bne.n	800d538 <__ssputs_r+0x70>
 800d574:	6921      	ldr	r1, [r4, #16]
 800d576:	4650      	mov	r0, sl
 800d578:	f7ff ff5a 	bl	800d430 <_free_r>
 800d57c:	e7c7      	b.n	800d50e <__ssputs_r+0x46>
	...

0800d580 <_svfiprintf_r>:
 800d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d584:	4698      	mov	r8, r3
 800d586:	898b      	ldrh	r3, [r1, #12]
 800d588:	061b      	lsls	r3, r3, #24
 800d58a:	b09d      	sub	sp, #116	; 0x74
 800d58c:	4607      	mov	r7, r0
 800d58e:	460d      	mov	r5, r1
 800d590:	4614      	mov	r4, r2
 800d592:	d50e      	bpl.n	800d5b2 <_svfiprintf_r+0x32>
 800d594:	690b      	ldr	r3, [r1, #16]
 800d596:	b963      	cbnz	r3, 800d5b2 <_svfiprintf_r+0x32>
 800d598:	2140      	movs	r1, #64	; 0x40
 800d59a:	f7fb ff91 	bl	80094c0 <_malloc_r>
 800d59e:	6028      	str	r0, [r5, #0]
 800d5a0:	6128      	str	r0, [r5, #16]
 800d5a2:	b920      	cbnz	r0, 800d5ae <_svfiprintf_r+0x2e>
 800d5a4:	230c      	movs	r3, #12
 800d5a6:	603b      	str	r3, [r7, #0]
 800d5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ac:	e0d1      	b.n	800d752 <_svfiprintf_r+0x1d2>
 800d5ae:	2340      	movs	r3, #64	; 0x40
 800d5b0:	616b      	str	r3, [r5, #20]
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d5b6:	2320      	movs	r3, #32
 800d5b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5c0:	2330      	movs	r3, #48	; 0x30
 800d5c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d76c <_svfiprintf_r+0x1ec>
 800d5c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5ca:	f04f 0901 	mov.w	r9, #1
 800d5ce:	4623      	mov	r3, r4
 800d5d0:	469a      	mov	sl, r3
 800d5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5d6:	b10a      	cbz	r2, 800d5dc <_svfiprintf_r+0x5c>
 800d5d8:	2a25      	cmp	r2, #37	; 0x25
 800d5da:	d1f9      	bne.n	800d5d0 <_svfiprintf_r+0x50>
 800d5dc:	ebba 0b04 	subs.w	fp, sl, r4
 800d5e0:	d00b      	beq.n	800d5fa <_svfiprintf_r+0x7a>
 800d5e2:	465b      	mov	r3, fp
 800d5e4:	4622      	mov	r2, r4
 800d5e6:	4629      	mov	r1, r5
 800d5e8:	4638      	mov	r0, r7
 800d5ea:	f7ff ff6d 	bl	800d4c8 <__ssputs_r>
 800d5ee:	3001      	adds	r0, #1
 800d5f0:	f000 80aa 	beq.w	800d748 <_svfiprintf_r+0x1c8>
 800d5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5f6:	445a      	add	r2, fp
 800d5f8:	9209      	str	r2, [sp, #36]	; 0x24
 800d5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f000 80a2 	beq.w	800d748 <_svfiprintf_r+0x1c8>
 800d604:	2300      	movs	r3, #0
 800d606:	f04f 32ff 	mov.w	r2, #4294967295
 800d60a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d60e:	f10a 0a01 	add.w	sl, sl, #1
 800d612:	9304      	str	r3, [sp, #16]
 800d614:	9307      	str	r3, [sp, #28]
 800d616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d61a:	931a      	str	r3, [sp, #104]	; 0x68
 800d61c:	4654      	mov	r4, sl
 800d61e:	2205      	movs	r2, #5
 800d620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d624:	4851      	ldr	r0, [pc, #324]	; (800d76c <_svfiprintf_r+0x1ec>)
 800d626:	f7f2 fddb 	bl	80001e0 <memchr>
 800d62a:	9a04      	ldr	r2, [sp, #16]
 800d62c:	b9d8      	cbnz	r0, 800d666 <_svfiprintf_r+0xe6>
 800d62e:	06d0      	lsls	r0, r2, #27
 800d630:	bf44      	itt	mi
 800d632:	2320      	movmi	r3, #32
 800d634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d638:	0711      	lsls	r1, r2, #28
 800d63a:	bf44      	itt	mi
 800d63c:	232b      	movmi	r3, #43	; 0x2b
 800d63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d642:	f89a 3000 	ldrb.w	r3, [sl]
 800d646:	2b2a      	cmp	r3, #42	; 0x2a
 800d648:	d015      	beq.n	800d676 <_svfiprintf_r+0xf6>
 800d64a:	9a07      	ldr	r2, [sp, #28]
 800d64c:	4654      	mov	r4, sl
 800d64e:	2000      	movs	r0, #0
 800d650:	f04f 0c0a 	mov.w	ip, #10
 800d654:	4621      	mov	r1, r4
 800d656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d65a:	3b30      	subs	r3, #48	; 0x30
 800d65c:	2b09      	cmp	r3, #9
 800d65e:	d94e      	bls.n	800d6fe <_svfiprintf_r+0x17e>
 800d660:	b1b0      	cbz	r0, 800d690 <_svfiprintf_r+0x110>
 800d662:	9207      	str	r2, [sp, #28]
 800d664:	e014      	b.n	800d690 <_svfiprintf_r+0x110>
 800d666:	eba0 0308 	sub.w	r3, r0, r8
 800d66a:	fa09 f303 	lsl.w	r3, r9, r3
 800d66e:	4313      	orrs	r3, r2
 800d670:	9304      	str	r3, [sp, #16]
 800d672:	46a2      	mov	sl, r4
 800d674:	e7d2      	b.n	800d61c <_svfiprintf_r+0x9c>
 800d676:	9b03      	ldr	r3, [sp, #12]
 800d678:	1d19      	adds	r1, r3, #4
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	9103      	str	r1, [sp, #12]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	bfbb      	ittet	lt
 800d682:	425b      	neglt	r3, r3
 800d684:	f042 0202 	orrlt.w	r2, r2, #2
 800d688:	9307      	strge	r3, [sp, #28]
 800d68a:	9307      	strlt	r3, [sp, #28]
 800d68c:	bfb8      	it	lt
 800d68e:	9204      	strlt	r2, [sp, #16]
 800d690:	7823      	ldrb	r3, [r4, #0]
 800d692:	2b2e      	cmp	r3, #46	; 0x2e
 800d694:	d10c      	bne.n	800d6b0 <_svfiprintf_r+0x130>
 800d696:	7863      	ldrb	r3, [r4, #1]
 800d698:	2b2a      	cmp	r3, #42	; 0x2a
 800d69a:	d135      	bne.n	800d708 <_svfiprintf_r+0x188>
 800d69c:	9b03      	ldr	r3, [sp, #12]
 800d69e:	1d1a      	adds	r2, r3, #4
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	9203      	str	r2, [sp, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	bfb8      	it	lt
 800d6a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6ac:	3402      	adds	r4, #2
 800d6ae:	9305      	str	r3, [sp, #20]
 800d6b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d77c <_svfiprintf_r+0x1fc>
 800d6b4:	7821      	ldrb	r1, [r4, #0]
 800d6b6:	2203      	movs	r2, #3
 800d6b8:	4650      	mov	r0, sl
 800d6ba:	f7f2 fd91 	bl	80001e0 <memchr>
 800d6be:	b140      	cbz	r0, 800d6d2 <_svfiprintf_r+0x152>
 800d6c0:	2340      	movs	r3, #64	; 0x40
 800d6c2:	eba0 000a 	sub.w	r0, r0, sl
 800d6c6:	fa03 f000 	lsl.w	r0, r3, r0
 800d6ca:	9b04      	ldr	r3, [sp, #16]
 800d6cc:	4303      	orrs	r3, r0
 800d6ce:	3401      	adds	r4, #1
 800d6d0:	9304      	str	r3, [sp, #16]
 800d6d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6d6:	4826      	ldr	r0, [pc, #152]	; (800d770 <_svfiprintf_r+0x1f0>)
 800d6d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6dc:	2206      	movs	r2, #6
 800d6de:	f7f2 fd7f 	bl	80001e0 <memchr>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d038      	beq.n	800d758 <_svfiprintf_r+0x1d8>
 800d6e6:	4b23      	ldr	r3, [pc, #140]	; (800d774 <_svfiprintf_r+0x1f4>)
 800d6e8:	bb1b      	cbnz	r3, 800d732 <_svfiprintf_r+0x1b2>
 800d6ea:	9b03      	ldr	r3, [sp, #12]
 800d6ec:	3307      	adds	r3, #7
 800d6ee:	f023 0307 	bic.w	r3, r3, #7
 800d6f2:	3308      	adds	r3, #8
 800d6f4:	9303      	str	r3, [sp, #12]
 800d6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6f8:	4433      	add	r3, r6
 800d6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d6fc:	e767      	b.n	800d5ce <_svfiprintf_r+0x4e>
 800d6fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800d702:	460c      	mov	r4, r1
 800d704:	2001      	movs	r0, #1
 800d706:	e7a5      	b.n	800d654 <_svfiprintf_r+0xd4>
 800d708:	2300      	movs	r3, #0
 800d70a:	3401      	adds	r4, #1
 800d70c:	9305      	str	r3, [sp, #20]
 800d70e:	4619      	mov	r1, r3
 800d710:	f04f 0c0a 	mov.w	ip, #10
 800d714:	4620      	mov	r0, r4
 800d716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d71a:	3a30      	subs	r2, #48	; 0x30
 800d71c:	2a09      	cmp	r2, #9
 800d71e:	d903      	bls.n	800d728 <_svfiprintf_r+0x1a8>
 800d720:	2b00      	cmp	r3, #0
 800d722:	d0c5      	beq.n	800d6b0 <_svfiprintf_r+0x130>
 800d724:	9105      	str	r1, [sp, #20]
 800d726:	e7c3      	b.n	800d6b0 <_svfiprintf_r+0x130>
 800d728:	fb0c 2101 	mla	r1, ip, r1, r2
 800d72c:	4604      	mov	r4, r0
 800d72e:	2301      	movs	r3, #1
 800d730:	e7f0      	b.n	800d714 <_svfiprintf_r+0x194>
 800d732:	ab03      	add	r3, sp, #12
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	462a      	mov	r2, r5
 800d738:	4b0f      	ldr	r3, [pc, #60]	; (800d778 <_svfiprintf_r+0x1f8>)
 800d73a:	a904      	add	r1, sp, #16
 800d73c:	4638      	mov	r0, r7
 800d73e:	f7fb ffd3 	bl	80096e8 <_printf_float>
 800d742:	1c42      	adds	r2, r0, #1
 800d744:	4606      	mov	r6, r0
 800d746:	d1d6      	bne.n	800d6f6 <_svfiprintf_r+0x176>
 800d748:	89ab      	ldrh	r3, [r5, #12]
 800d74a:	065b      	lsls	r3, r3, #25
 800d74c:	f53f af2c 	bmi.w	800d5a8 <_svfiprintf_r+0x28>
 800d750:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d752:	b01d      	add	sp, #116	; 0x74
 800d754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d758:	ab03      	add	r3, sp, #12
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	462a      	mov	r2, r5
 800d75e:	4b06      	ldr	r3, [pc, #24]	; (800d778 <_svfiprintf_r+0x1f8>)
 800d760:	a904      	add	r1, sp, #16
 800d762:	4638      	mov	r0, r7
 800d764:	f7fc fa64 	bl	8009c30 <_printf_i>
 800d768:	e7eb      	b.n	800d742 <_svfiprintf_r+0x1c2>
 800d76a:	bf00      	nop
 800d76c:	0800e1c4 	.word	0x0800e1c4
 800d770:	0800e1ce 	.word	0x0800e1ce
 800d774:	080096e9 	.word	0x080096e9
 800d778:	0800d4c9 	.word	0x0800d4c9
 800d77c:	0800e1ca 	.word	0x0800e1ca

0800d780 <__sfputc_r>:
 800d780:	6893      	ldr	r3, [r2, #8]
 800d782:	3b01      	subs	r3, #1
 800d784:	2b00      	cmp	r3, #0
 800d786:	b410      	push	{r4}
 800d788:	6093      	str	r3, [r2, #8]
 800d78a:	da08      	bge.n	800d79e <__sfputc_r+0x1e>
 800d78c:	6994      	ldr	r4, [r2, #24]
 800d78e:	42a3      	cmp	r3, r4
 800d790:	db01      	blt.n	800d796 <__sfputc_r+0x16>
 800d792:	290a      	cmp	r1, #10
 800d794:	d103      	bne.n	800d79e <__sfputc_r+0x1e>
 800d796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d79a:	f7fd bd11 	b.w	800b1c0 <__swbuf_r>
 800d79e:	6813      	ldr	r3, [r2, #0]
 800d7a0:	1c58      	adds	r0, r3, #1
 800d7a2:	6010      	str	r0, [r2, #0]
 800d7a4:	7019      	strb	r1, [r3, #0]
 800d7a6:	4608      	mov	r0, r1
 800d7a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7ac:	4770      	bx	lr

0800d7ae <__sfputs_r>:
 800d7ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	460f      	mov	r7, r1
 800d7b4:	4614      	mov	r4, r2
 800d7b6:	18d5      	adds	r5, r2, r3
 800d7b8:	42ac      	cmp	r4, r5
 800d7ba:	d101      	bne.n	800d7c0 <__sfputs_r+0x12>
 800d7bc:	2000      	movs	r0, #0
 800d7be:	e007      	b.n	800d7d0 <__sfputs_r+0x22>
 800d7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c4:	463a      	mov	r2, r7
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	f7ff ffda 	bl	800d780 <__sfputc_r>
 800d7cc:	1c43      	adds	r3, r0, #1
 800d7ce:	d1f3      	bne.n	800d7b8 <__sfputs_r+0xa>
 800d7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d7d4 <_vfiprintf_r>:
 800d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	460d      	mov	r5, r1
 800d7da:	b09d      	sub	sp, #116	; 0x74
 800d7dc:	4614      	mov	r4, r2
 800d7de:	4698      	mov	r8, r3
 800d7e0:	4606      	mov	r6, r0
 800d7e2:	b118      	cbz	r0, 800d7ec <_vfiprintf_r+0x18>
 800d7e4:	6983      	ldr	r3, [r0, #24]
 800d7e6:	b90b      	cbnz	r3, 800d7ec <_vfiprintf_r+0x18>
 800d7e8:	f7fb fd6e 	bl	80092c8 <__sinit>
 800d7ec:	4b89      	ldr	r3, [pc, #548]	; (800da14 <_vfiprintf_r+0x240>)
 800d7ee:	429d      	cmp	r5, r3
 800d7f0:	d11b      	bne.n	800d82a <_vfiprintf_r+0x56>
 800d7f2:	6875      	ldr	r5, [r6, #4]
 800d7f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7f6:	07d9      	lsls	r1, r3, #31
 800d7f8:	d405      	bmi.n	800d806 <_vfiprintf_r+0x32>
 800d7fa:	89ab      	ldrh	r3, [r5, #12]
 800d7fc:	059a      	lsls	r2, r3, #22
 800d7fe:	d402      	bmi.n	800d806 <_vfiprintf_r+0x32>
 800d800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d802:	f7fb fe24 	bl	800944e <__retarget_lock_acquire_recursive>
 800d806:	89ab      	ldrh	r3, [r5, #12]
 800d808:	071b      	lsls	r3, r3, #28
 800d80a:	d501      	bpl.n	800d810 <_vfiprintf_r+0x3c>
 800d80c:	692b      	ldr	r3, [r5, #16]
 800d80e:	b9eb      	cbnz	r3, 800d84c <_vfiprintf_r+0x78>
 800d810:	4629      	mov	r1, r5
 800d812:	4630      	mov	r0, r6
 800d814:	f7fd fd38 	bl	800b288 <__swsetup_r>
 800d818:	b1c0      	cbz	r0, 800d84c <_vfiprintf_r+0x78>
 800d81a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d81c:	07dc      	lsls	r4, r3, #31
 800d81e:	d50e      	bpl.n	800d83e <_vfiprintf_r+0x6a>
 800d820:	f04f 30ff 	mov.w	r0, #4294967295
 800d824:	b01d      	add	sp, #116	; 0x74
 800d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82a:	4b7b      	ldr	r3, [pc, #492]	; (800da18 <_vfiprintf_r+0x244>)
 800d82c:	429d      	cmp	r5, r3
 800d82e:	d101      	bne.n	800d834 <_vfiprintf_r+0x60>
 800d830:	68b5      	ldr	r5, [r6, #8]
 800d832:	e7df      	b.n	800d7f4 <_vfiprintf_r+0x20>
 800d834:	4b79      	ldr	r3, [pc, #484]	; (800da1c <_vfiprintf_r+0x248>)
 800d836:	429d      	cmp	r5, r3
 800d838:	bf08      	it	eq
 800d83a:	68f5      	ldreq	r5, [r6, #12]
 800d83c:	e7da      	b.n	800d7f4 <_vfiprintf_r+0x20>
 800d83e:	89ab      	ldrh	r3, [r5, #12]
 800d840:	0598      	lsls	r0, r3, #22
 800d842:	d4ed      	bmi.n	800d820 <_vfiprintf_r+0x4c>
 800d844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d846:	f7fb fe03 	bl	8009450 <__retarget_lock_release_recursive>
 800d84a:	e7e9      	b.n	800d820 <_vfiprintf_r+0x4c>
 800d84c:	2300      	movs	r3, #0
 800d84e:	9309      	str	r3, [sp, #36]	; 0x24
 800d850:	2320      	movs	r3, #32
 800d852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d856:	f8cd 800c 	str.w	r8, [sp, #12]
 800d85a:	2330      	movs	r3, #48	; 0x30
 800d85c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800da20 <_vfiprintf_r+0x24c>
 800d860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d864:	f04f 0901 	mov.w	r9, #1
 800d868:	4623      	mov	r3, r4
 800d86a:	469a      	mov	sl, r3
 800d86c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d870:	b10a      	cbz	r2, 800d876 <_vfiprintf_r+0xa2>
 800d872:	2a25      	cmp	r2, #37	; 0x25
 800d874:	d1f9      	bne.n	800d86a <_vfiprintf_r+0x96>
 800d876:	ebba 0b04 	subs.w	fp, sl, r4
 800d87a:	d00b      	beq.n	800d894 <_vfiprintf_r+0xc0>
 800d87c:	465b      	mov	r3, fp
 800d87e:	4622      	mov	r2, r4
 800d880:	4629      	mov	r1, r5
 800d882:	4630      	mov	r0, r6
 800d884:	f7ff ff93 	bl	800d7ae <__sfputs_r>
 800d888:	3001      	adds	r0, #1
 800d88a:	f000 80aa 	beq.w	800d9e2 <_vfiprintf_r+0x20e>
 800d88e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d890:	445a      	add	r2, fp
 800d892:	9209      	str	r2, [sp, #36]	; 0x24
 800d894:	f89a 3000 	ldrb.w	r3, [sl]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	f000 80a2 	beq.w	800d9e2 <_vfiprintf_r+0x20e>
 800d89e:	2300      	movs	r3, #0
 800d8a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8a8:	f10a 0a01 	add.w	sl, sl, #1
 800d8ac:	9304      	str	r3, [sp, #16]
 800d8ae:	9307      	str	r3, [sp, #28]
 800d8b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8b4:	931a      	str	r3, [sp, #104]	; 0x68
 800d8b6:	4654      	mov	r4, sl
 800d8b8:	2205      	movs	r2, #5
 800d8ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8be:	4858      	ldr	r0, [pc, #352]	; (800da20 <_vfiprintf_r+0x24c>)
 800d8c0:	f7f2 fc8e 	bl	80001e0 <memchr>
 800d8c4:	9a04      	ldr	r2, [sp, #16]
 800d8c6:	b9d8      	cbnz	r0, 800d900 <_vfiprintf_r+0x12c>
 800d8c8:	06d1      	lsls	r1, r2, #27
 800d8ca:	bf44      	itt	mi
 800d8cc:	2320      	movmi	r3, #32
 800d8ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8d2:	0713      	lsls	r3, r2, #28
 800d8d4:	bf44      	itt	mi
 800d8d6:	232b      	movmi	r3, #43	; 0x2b
 800d8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d8e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d8e2:	d015      	beq.n	800d910 <_vfiprintf_r+0x13c>
 800d8e4:	9a07      	ldr	r2, [sp, #28]
 800d8e6:	4654      	mov	r4, sl
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	f04f 0c0a 	mov.w	ip, #10
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8f4:	3b30      	subs	r3, #48	; 0x30
 800d8f6:	2b09      	cmp	r3, #9
 800d8f8:	d94e      	bls.n	800d998 <_vfiprintf_r+0x1c4>
 800d8fa:	b1b0      	cbz	r0, 800d92a <_vfiprintf_r+0x156>
 800d8fc:	9207      	str	r2, [sp, #28]
 800d8fe:	e014      	b.n	800d92a <_vfiprintf_r+0x156>
 800d900:	eba0 0308 	sub.w	r3, r0, r8
 800d904:	fa09 f303 	lsl.w	r3, r9, r3
 800d908:	4313      	orrs	r3, r2
 800d90a:	9304      	str	r3, [sp, #16]
 800d90c:	46a2      	mov	sl, r4
 800d90e:	e7d2      	b.n	800d8b6 <_vfiprintf_r+0xe2>
 800d910:	9b03      	ldr	r3, [sp, #12]
 800d912:	1d19      	adds	r1, r3, #4
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	9103      	str	r1, [sp, #12]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	bfbb      	ittet	lt
 800d91c:	425b      	neglt	r3, r3
 800d91e:	f042 0202 	orrlt.w	r2, r2, #2
 800d922:	9307      	strge	r3, [sp, #28]
 800d924:	9307      	strlt	r3, [sp, #28]
 800d926:	bfb8      	it	lt
 800d928:	9204      	strlt	r2, [sp, #16]
 800d92a:	7823      	ldrb	r3, [r4, #0]
 800d92c:	2b2e      	cmp	r3, #46	; 0x2e
 800d92e:	d10c      	bne.n	800d94a <_vfiprintf_r+0x176>
 800d930:	7863      	ldrb	r3, [r4, #1]
 800d932:	2b2a      	cmp	r3, #42	; 0x2a
 800d934:	d135      	bne.n	800d9a2 <_vfiprintf_r+0x1ce>
 800d936:	9b03      	ldr	r3, [sp, #12]
 800d938:	1d1a      	adds	r2, r3, #4
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	9203      	str	r2, [sp, #12]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	bfb8      	it	lt
 800d942:	f04f 33ff 	movlt.w	r3, #4294967295
 800d946:	3402      	adds	r4, #2
 800d948:	9305      	str	r3, [sp, #20]
 800d94a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800da30 <_vfiprintf_r+0x25c>
 800d94e:	7821      	ldrb	r1, [r4, #0]
 800d950:	2203      	movs	r2, #3
 800d952:	4650      	mov	r0, sl
 800d954:	f7f2 fc44 	bl	80001e0 <memchr>
 800d958:	b140      	cbz	r0, 800d96c <_vfiprintf_r+0x198>
 800d95a:	2340      	movs	r3, #64	; 0x40
 800d95c:	eba0 000a 	sub.w	r0, r0, sl
 800d960:	fa03 f000 	lsl.w	r0, r3, r0
 800d964:	9b04      	ldr	r3, [sp, #16]
 800d966:	4303      	orrs	r3, r0
 800d968:	3401      	adds	r4, #1
 800d96a:	9304      	str	r3, [sp, #16]
 800d96c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d970:	482c      	ldr	r0, [pc, #176]	; (800da24 <_vfiprintf_r+0x250>)
 800d972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d976:	2206      	movs	r2, #6
 800d978:	f7f2 fc32 	bl	80001e0 <memchr>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d03f      	beq.n	800da00 <_vfiprintf_r+0x22c>
 800d980:	4b29      	ldr	r3, [pc, #164]	; (800da28 <_vfiprintf_r+0x254>)
 800d982:	bb1b      	cbnz	r3, 800d9cc <_vfiprintf_r+0x1f8>
 800d984:	9b03      	ldr	r3, [sp, #12]
 800d986:	3307      	adds	r3, #7
 800d988:	f023 0307 	bic.w	r3, r3, #7
 800d98c:	3308      	adds	r3, #8
 800d98e:	9303      	str	r3, [sp, #12]
 800d990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d992:	443b      	add	r3, r7
 800d994:	9309      	str	r3, [sp, #36]	; 0x24
 800d996:	e767      	b.n	800d868 <_vfiprintf_r+0x94>
 800d998:	fb0c 3202 	mla	r2, ip, r2, r3
 800d99c:	460c      	mov	r4, r1
 800d99e:	2001      	movs	r0, #1
 800d9a0:	e7a5      	b.n	800d8ee <_vfiprintf_r+0x11a>
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	3401      	adds	r4, #1
 800d9a6:	9305      	str	r3, [sp, #20]
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	f04f 0c0a 	mov.w	ip, #10
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9b4:	3a30      	subs	r2, #48	; 0x30
 800d9b6:	2a09      	cmp	r2, #9
 800d9b8:	d903      	bls.n	800d9c2 <_vfiprintf_r+0x1ee>
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d0c5      	beq.n	800d94a <_vfiprintf_r+0x176>
 800d9be:	9105      	str	r1, [sp, #20]
 800d9c0:	e7c3      	b.n	800d94a <_vfiprintf_r+0x176>
 800d9c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e7f0      	b.n	800d9ae <_vfiprintf_r+0x1da>
 800d9cc:	ab03      	add	r3, sp, #12
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	462a      	mov	r2, r5
 800d9d2:	4b16      	ldr	r3, [pc, #88]	; (800da2c <_vfiprintf_r+0x258>)
 800d9d4:	a904      	add	r1, sp, #16
 800d9d6:	4630      	mov	r0, r6
 800d9d8:	f7fb fe86 	bl	80096e8 <_printf_float>
 800d9dc:	4607      	mov	r7, r0
 800d9de:	1c78      	adds	r0, r7, #1
 800d9e0:	d1d6      	bne.n	800d990 <_vfiprintf_r+0x1bc>
 800d9e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9e4:	07d9      	lsls	r1, r3, #31
 800d9e6:	d405      	bmi.n	800d9f4 <_vfiprintf_r+0x220>
 800d9e8:	89ab      	ldrh	r3, [r5, #12]
 800d9ea:	059a      	lsls	r2, r3, #22
 800d9ec:	d402      	bmi.n	800d9f4 <_vfiprintf_r+0x220>
 800d9ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9f0:	f7fb fd2e 	bl	8009450 <__retarget_lock_release_recursive>
 800d9f4:	89ab      	ldrh	r3, [r5, #12]
 800d9f6:	065b      	lsls	r3, r3, #25
 800d9f8:	f53f af12 	bmi.w	800d820 <_vfiprintf_r+0x4c>
 800d9fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9fe:	e711      	b.n	800d824 <_vfiprintf_r+0x50>
 800da00:	ab03      	add	r3, sp, #12
 800da02:	9300      	str	r3, [sp, #0]
 800da04:	462a      	mov	r2, r5
 800da06:	4b09      	ldr	r3, [pc, #36]	; (800da2c <_vfiprintf_r+0x258>)
 800da08:	a904      	add	r1, sp, #16
 800da0a:	4630      	mov	r0, r6
 800da0c:	f7fc f910 	bl	8009c30 <_printf_i>
 800da10:	e7e4      	b.n	800d9dc <_vfiprintf_r+0x208>
 800da12:	bf00      	nop
 800da14:	0800dd4c 	.word	0x0800dd4c
 800da18:	0800dd6c 	.word	0x0800dd6c
 800da1c:	0800dd2c 	.word	0x0800dd2c
 800da20:	0800e1c4 	.word	0x0800e1c4
 800da24:	0800e1ce 	.word	0x0800e1ce
 800da28:	080096e9 	.word	0x080096e9
 800da2c:	0800d7af 	.word	0x0800d7af
 800da30:	0800e1ca 	.word	0x0800e1ca

0800da34 <_read_r>:
 800da34:	b538      	push	{r3, r4, r5, lr}
 800da36:	4d07      	ldr	r5, [pc, #28]	; (800da54 <_read_r+0x20>)
 800da38:	4604      	mov	r4, r0
 800da3a:	4608      	mov	r0, r1
 800da3c:	4611      	mov	r1, r2
 800da3e:	2200      	movs	r2, #0
 800da40:	602a      	str	r2, [r5, #0]
 800da42:	461a      	mov	r2, r3
 800da44:	f7f3 fd6a 	bl	800151c <_read>
 800da48:	1c43      	adds	r3, r0, #1
 800da4a:	d102      	bne.n	800da52 <_read_r+0x1e>
 800da4c:	682b      	ldr	r3, [r5, #0]
 800da4e:	b103      	cbz	r3, 800da52 <_read_r+0x1e>
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	bd38      	pop	{r3, r4, r5, pc}
 800da54:	20005cfc 	.word	0x20005cfc

0800da58 <nan>:
 800da58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800da60 <nan+0x8>
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	00000000 	.word	0x00000000
 800da64:	7ff80000 	.word	0x7ff80000

0800da68 <strncmp>:
 800da68:	b510      	push	{r4, lr}
 800da6a:	b17a      	cbz	r2, 800da8c <strncmp+0x24>
 800da6c:	4603      	mov	r3, r0
 800da6e:	3901      	subs	r1, #1
 800da70:	1884      	adds	r4, r0, r2
 800da72:	f813 0b01 	ldrb.w	r0, [r3], #1
 800da76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800da7a:	4290      	cmp	r0, r2
 800da7c:	d101      	bne.n	800da82 <strncmp+0x1a>
 800da7e:	42a3      	cmp	r3, r4
 800da80:	d101      	bne.n	800da86 <strncmp+0x1e>
 800da82:	1a80      	subs	r0, r0, r2
 800da84:	bd10      	pop	{r4, pc}
 800da86:	2800      	cmp	r0, #0
 800da88:	d1f3      	bne.n	800da72 <strncmp+0xa>
 800da8a:	e7fa      	b.n	800da82 <strncmp+0x1a>
 800da8c:	4610      	mov	r0, r2
 800da8e:	e7f9      	b.n	800da84 <strncmp+0x1c>

0800da90 <__ascii_wctomb>:
 800da90:	b149      	cbz	r1, 800daa6 <__ascii_wctomb+0x16>
 800da92:	2aff      	cmp	r2, #255	; 0xff
 800da94:	bf85      	ittet	hi
 800da96:	238a      	movhi	r3, #138	; 0x8a
 800da98:	6003      	strhi	r3, [r0, #0]
 800da9a:	700a      	strbls	r2, [r1, #0]
 800da9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800daa0:	bf98      	it	ls
 800daa2:	2001      	movls	r0, #1
 800daa4:	4770      	bx	lr
 800daa6:	4608      	mov	r0, r1
 800daa8:	4770      	bx	lr

0800daaa <abort>:
 800daaa:	b508      	push	{r3, lr}
 800daac:	2006      	movs	r0, #6
 800daae:	f000 f897 	bl	800dbe0 <raise>
 800dab2:	2001      	movs	r0, #1
 800dab4:	f7f3 fd28 	bl	8001508 <_exit>

0800dab8 <_fstat_r>:
 800dab8:	b538      	push	{r3, r4, r5, lr}
 800daba:	4d07      	ldr	r5, [pc, #28]	; (800dad8 <_fstat_r+0x20>)
 800dabc:	2300      	movs	r3, #0
 800dabe:	4604      	mov	r4, r0
 800dac0:	4608      	mov	r0, r1
 800dac2:	4611      	mov	r1, r2
 800dac4:	602b      	str	r3, [r5, #0]
 800dac6:	f7f3 fd6e 	bl	80015a6 <_fstat>
 800daca:	1c43      	adds	r3, r0, #1
 800dacc:	d102      	bne.n	800dad4 <_fstat_r+0x1c>
 800dace:	682b      	ldr	r3, [r5, #0]
 800dad0:	b103      	cbz	r3, 800dad4 <_fstat_r+0x1c>
 800dad2:	6023      	str	r3, [r4, #0]
 800dad4:	bd38      	pop	{r3, r4, r5, pc}
 800dad6:	bf00      	nop
 800dad8:	20005cfc 	.word	0x20005cfc

0800dadc <_isatty_r>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	4d06      	ldr	r5, [pc, #24]	; (800daf8 <_isatty_r+0x1c>)
 800dae0:	2300      	movs	r3, #0
 800dae2:	4604      	mov	r4, r0
 800dae4:	4608      	mov	r0, r1
 800dae6:	602b      	str	r3, [r5, #0]
 800dae8:	f7f3 fd6d 	bl	80015c6 <_isatty>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	d102      	bne.n	800daf6 <_isatty_r+0x1a>
 800daf0:	682b      	ldr	r3, [r5, #0]
 800daf2:	b103      	cbz	r3, 800daf6 <_isatty_r+0x1a>
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	bd38      	pop	{r3, r4, r5, pc}
 800daf8:	20005cfc 	.word	0x20005cfc

0800dafc <memmove>:
 800dafc:	4288      	cmp	r0, r1
 800dafe:	b510      	push	{r4, lr}
 800db00:	eb01 0402 	add.w	r4, r1, r2
 800db04:	d902      	bls.n	800db0c <memmove+0x10>
 800db06:	4284      	cmp	r4, r0
 800db08:	4623      	mov	r3, r4
 800db0a:	d807      	bhi.n	800db1c <memmove+0x20>
 800db0c:	1e43      	subs	r3, r0, #1
 800db0e:	42a1      	cmp	r1, r4
 800db10:	d008      	beq.n	800db24 <memmove+0x28>
 800db12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db1a:	e7f8      	b.n	800db0e <memmove+0x12>
 800db1c:	4402      	add	r2, r0
 800db1e:	4601      	mov	r1, r0
 800db20:	428a      	cmp	r2, r1
 800db22:	d100      	bne.n	800db26 <memmove+0x2a>
 800db24:	bd10      	pop	{r4, pc}
 800db26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db2e:	e7f7      	b.n	800db20 <memmove+0x24>

0800db30 <_realloc_r>:
 800db30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db34:	4680      	mov	r8, r0
 800db36:	4614      	mov	r4, r2
 800db38:	460e      	mov	r6, r1
 800db3a:	b921      	cbnz	r1, 800db46 <_realloc_r+0x16>
 800db3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db40:	4611      	mov	r1, r2
 800db42:	f7fb bcbd 	b.w	80094c0 <_malloc_r>
 800db46:	b92a      	cbnz	r2, 800db54 <_realloc_r+0x24>
 800db48:	f7ff fc72 	bl	800d430 <_free_r>
 800db4c:	4625      	mov	r5, r4
 800db4e:	4628      	mov	r0, r5
 800db50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db54:	f000 f860 	bl	800dc18 <_malloc_usable_size_r>
 800db58:	4284      	cmp	r4, r0
 800db5a:	4607      	mov	r7, r0
 800db5c:	d802      	bhi.n	800db64 <_realloc_r+0x34>
 800db5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db62:	d812      	bhi.n	800db8a <_realloc_r+0x5a>
 800db64:	4621      	mov	r1, r4
 800db66:	4640      	mov	r0, r8
 800db68:	f7fb fcaa 	bl	80094c0 <_malloc_r>
 800db6c:	4605      	mov	r5, r0
 800db6e:	2800      	cmp	r0, #0
 800db70:	d0ed      	beq.n	800db4e <_realloc_r+0x1e>
 800db72:	42bc      	cmp	r4, r7
 800db74:	4622      	mov	r2, r4
 800db76:	4631      	mov	r1, r6
 800db78:	bf28      	it	cs
 800db7a:	463a      	movcs	r2, r7
 800db7c:	f7fb fc69 	bl	8009452 <memcpy>
 800db80:	4631      	mov	r1, r6
 800db82:	4640      	mov	r0, r8
 800db84:	f7ff fc54 	bl	800d430 <_free_r>
 800db88:	e7e1      	b.n	800db4e <_realloc_r+0x1e>
 800db8a:	4635      	mov	r5, r6
 800db8c:	e7df      	b.n	800db4e <_realloc_r+0x1e>

0800db8e <_raise_r>:
 800db8e:	291f      	cmp	r1, #31
 800db90:	b538      	push	{r3, r4, r5, lr}
 800db92:	4604      	mov	r4, r0
 800db94:	460d      	mov	r5, r1
 800db96:	d904      	bls.n	800dba2 <_raise_r+0x14>
 800db98:	2316      	movs	r3, #22
 800db9a:	6003      	str	r3, [r0, #0]
 800db9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dba0:	bd38      	pop	{r3, r4, r5, pc}
 800dba2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dba4:	b112      	cbz	r2, 800dbac <_raise_r+0x1e>
 800dba6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbaa:	b94b      	cbnz	r3, 800dbc0 <_raise_r+0x32>
 800dbac:	4620      	mov	r0, r4
 800dbae:	f000 f831 	bl	800dc14 <_getpid_r>
 800dbb2:	462a      	mov	r2, r5
 800dbb4:	4601      	mov	r1, r0
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbbc:	f000 b818 	b.w	800dbf0 <_kill_r>
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d00a      	beq.n	800dbda <_raise_r+0x4c>
 800dbc4:	1c59      	adds	r1, r3, #1
 800dbc6:	d103      	bne.n	800dbd0 <_raise_r+0x42>
 800dbc8:	2316      	movs	r3, #22
 800dbca:	6003      	str	r3, [r0, #0]
 800dbcc:	2001      	movs	r0, #1
 800dbce:	e7e7      	b.n	800dba0 <_raise_r+0x12>
 800dbd0:	2400      	movs	r4, #0
 800dbd2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	4798      	blx	r3
 800dbda:	2000      	movs	r0, #0
 800dbdc:	e7e0      	b.n	800dba0 <_raise_r+0x12>
	...

0800dbe0 <raise>:
 800dbe0:	4b02      	ldr	r3, [pc, #8]	; (800dbec <raise+0xc>)
 800dbe2:	4601      	mov	r1, r0
 800dbe4:	6818      	ldr	r0, [r3, #0]
 800dbe6:	f7ff bfd2 	b.w	800db8e <_raise_r>
 800dbea:	bf00      	nop
 800dbec:	20000044 	.word	0x20000044

0800dbf0 <_kill_r>:
 800dbf0:	b538      	push	{r3, r4, r5, lr}
 800dbf2:	4d07      	ldr	r5, [pc, #28]	; (800dc10 <_kill_r+0x20>)
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	4608      	mov	r0, r1
 800dbfa:	4611      	mov	r1, r2
 800dbfc:	602b      	str	r3, [r5, #0]
 800dbfe:	f7f3 fc73 	bl	80014e8 <_kill>
 800dc02:	1c43      	adds	r3, r0, #1
 800dc04:	d102      	bne.n	800dc0c <_kill_r+0x1c>
 800dc06:	682b      	ldr	r3, [r5, #0]
 800dc08:	b103      	cbz	r3, 800dc0c <_kill_r+0x1c>
 800dc0a:	6023      	str	r3, [r4, #0]
 800dc0c:	bd38      	pop	{r3, r4, r5, pc}
 800dc0e:	bf00      	nop
 800dc10:	20005cfc 	.word	0x20005cfc

0800dc14 <_getpid_r>:
 800dc14:	f7f3 bc60 	b.w	80014d8 <_getpid>

0800dc18 <_malloc_usable_size_r>:
 800dc18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc1c:	1f18      	subs	r0, r3, #4
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	bfbc      	itt	lt
 800dc22:	580b      	ldrlt	r3, [r1, r0]
 800dc24:	18c0      	addlt	r0, r0, r3
 800dc26:	4770      	bx	lr

0800dc28 <_init>:
 800dc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2a:	bf00      	nop
 800dc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc2e:	bc08      	pop	{r3}
 800dc30:	469e      	mov	lr, r3
 800dc32:	4770      	bx	lr

0800dc34 <_fini>:
 800dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc36:	bf00      	nop
 800dc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc3a:	bc08      	pop	{r3}
 800dc3c:	469e      	mov	lr, r3
 800dc3e:	4770      	bx	lr
